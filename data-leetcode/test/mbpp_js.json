[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "function next_smallest_palindrome(num){\n    var result = 0;\n    var i = 0;\n    var j = num;\n    while(i < j){\n        if(num % i == 0 && num % j == 0){\n            result = num;\n            break;\n        }\n        i++;\n        j--;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_smallest_palindrome;",
            "assert.deepEqual(candidate(99),101);",
            "assert.deepEqual(candidate(1221),1331);",
            "assert.deepEqual(candidate(120),121);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "function kth_element(arr, k){\n    let i = 0;\n    let j = arr.length - 1;\n    let kth = arr[i];\n    while (i < j) {\n        if (arr[i] < kth) {\n            i++;\n        } else if (arr[i] > kth) {\n            j--;\n        } else {\n            return arr[i];\n        }\n    }\n    return arr[j];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = kth_element;",
            "assert.deepEqual(candidate([12, 3, 5, 7, 19], 2),3);",
            "assert.deepEqual(candidate([17, 24, 8, 23], 3),8);",
            "assert.deepEqual(candidate([16, 21, 25, 36, 4], 4),36);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "function snake_to_camel(word){\n    var result = word.toLowerCase();\n    return result.replace(/[A-Z]/g, function(c) {\n        return c.toUpperCase();\n    });\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = snake_to_camel;",
            "assert.deepEqual(candidate(\"python_program\"),\"PythonProgram\");",
            "assert.deepEqual(candidate(\"python_language\"),\"PythonLanguage\");",
            "assert.deepEqual(candidate(\"programming_language\"),\"ProgrammingLanguage\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "function eulerian_num(n, m){\n    var a = [];\n    for(var i = 0; i < n; i++){\n        a.push(i);\n    }\n    for(var i = 0; i < m; i++){\n        a.push(i);\n    }\n    return a;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = eulerian_num;",
            "assert.deepEqual(candidate(3, 1),4);",
            "assert.deepEqual(candidate(4, 1),11);",
            "assert.deepEqual(candidate(5, 3),26);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "function sort_sublists(input_list){\n    var output_list = [];\n    for(var i = 0; i < input_list.length; i++){\n        output_list.push(input_list[i]);\n    }\n    return output_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_sublists;",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert.deepEqual(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]),[[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]);",
            "assert.deepEqual(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]),[[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a jsthon function to count true booleans in the given array.",
        "code": "function count(lst){\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == true) count++;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count;",
            "assert.deepEqual(candidate([true, false, true]),2);",
            "assert.deepEqual(candidate([false, false]),0);",
            "assert.deepEqual(candidate([true, true, true]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array to the given arrays.",
        "code": "function add_lists(test_list, test_tup){\n    var test_list_len = test_list.length;\n    var test_tup_len = test_tup.length;\n    for(var i = 0; i < test_list_len; i++){\n        test_list[i].push(test_tup[i]);\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_lists;",
            "assert.deepEqual(candidate([5, 6, 7], [9, 10]),[9, 10, 5, 6, 7]);",
            "assert.deepEqual(candidate([6, 7, 8], [10, 11]),[10, 11, 6, 7, 8]);",
            "assert.deepEqual(candidate([7, 8, 9], [11, 12]),[11, 12, 7, 8, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three arrays into a single sorted array.",
        "code": "function merge_sorted_list(num1, num2, num3){\n    var nums1 = num1.slice(0);\n    var nums2 = num2.slice(0);\n    var nums3 = num3.slice(0);\n    var nums = [];\n    for(var i = 0; i < nums1.length; i++){\n        nums.push(nums1[i]);\n    }\n    for(var i = 0; i < nums2.length; i++){\n        nums.push(nums2[i]);\n    }\n    for(var i = 0; i < nums3.length; i++){\n        nums.push(nums3[i]);\n    }\n    return nums;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge_sorted_list;",
            "assert.deepEqual(candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]),[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);",
            "assert.deepEqual(candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]),[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);",
            "assert.deepEqual(candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]),[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a jsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "function odd_Equivalent(s, n){\n    var i = 0;\n    var j = s.length - 1;\n    while(i < j){\n        if(s[i] == s[j]){\n            i++;\n        }\n        else{\n            j--;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_Equivalent;",
            "assert.deepEqual(candidate(\"011001\", 6),3);",
            "assert.deepEqual(candidate(\"11011\", 5),4);",
            "assert.deepEqual(candidate(\"1010\", 4),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "function check_integer(text){\n    var result = false;\n    var regex = /^\\d+$/;\n    if(regex.test(text)){\n        result = true;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_integer;",
            "assert.deepEqual(candidate(\"python\"),false);",
            "assert.deepEqual(candidate(\"1\"),true);",
            "assert.deepEqual(candidate(\"12345\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given array of positive integers into a single integer.",
        "code": "function tuple_to_int(nums){\n    var result = 0;\n    for(var i = 0; i < nums.length; i++){\n        result = result * 10 + nums[i];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_to_int;",
            "assert.deepEqual(candidate([1, 2, 3]),123);",
            "assert.deepEqual(candidate([4, 5, 6]),456);",
            "assert.deepEqual(candidate([5, 6, 7]),567);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "function list_to_float(test_list){\n    var test_list_array = [];\n    for(var i = 0; i < test_list.length; i++){\n        test_list_array.push(test_list[i].toFixed(2));\n    }\n    return test_list_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_to_float;",
            "assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);",
            "assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);",
            "assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array of strings split on the space character.",
        "code": "function string_to_list(string){\n    var list = [];\n    var index = 0;\n    var length = string.length;\n    while(index < length){\n        if(string.charAt(index) ==''){\n            list.push(string.substring(index, index + 1));\n            index = index + 1;\n        }\n        else{\n            list.push(string.substring(index, index + 1));\n            index = index + 1;\n        }\n    }\n    return list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = string_to_list;",
            "assert.deepEqual(candidate(\"python programming\"),[\"python\", \"programming\"]);",
            "assert.deepEqual(candidate(\"lists tuples strings\"),[\"lists\", \"tuples\", \"strings\"]);",
            "assert.deepEqual(candidate(\"write a program\"),[\"write\", \"a\", \"program\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a jsthon function to find the element that appears only once in a sorted array.",
        "code": "function search(arr){\n    var i = 0;\n    var j = arr.length - 1;\n    while(i < j){\n        if(arr[i] === arr[j]){\n            return arr[i];\n        }\n        i++;\n        j--;\n    }\n    return null;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = search;",
            "assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);",
            "assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a jsthon function to remove first and last occurrence of a given character from the string.",
        "code": "function remove_Occ(s, ch){\n    var i = 0;\n    var j = s.length;\n    while(i < j){\n        if(s[i] == ch){\n            s.splice(i, 1);\n            i--;\n        }\n        else{\n            i++;\n        }\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_Occ;",
            "assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");",
            "assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");",
            "assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.",
        "code": "function max_product_tuple(list1){\n    var max = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] > max){\n            max = list1[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_product_tuple;",
            "assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),36);",
            "assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),200);",
            "assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),484);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "function amicable_numbers_sum(limit){\n    var sum = 0;\n    for(var i = 1; i <= limit; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = amicable_numbers_sum;",
            "assert.deepEqual(candidate(999),504);",
            "assert.deepEqual(candidate(9999),31626);",
            "assert.deepEqual(candidate(99),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "function find_length(string){\n    var max_length = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] == 0){\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_length;",
            "assert.deepEqual(candidate(\"11000010001\"),6);",
            "assert.deepEqual(candidate(\"10111\"),1);",
            "assert.deepEqual(candidate(\"11011101100101\"),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a jsthon function to find the sum of common divisors of two given numbers.",
        "code": "function sum(a, b){\n    var sum = 0;\n    for(var i = 0; i < a.length; i++){\n        if(a[i] == b){\n            sum += a[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum;",
            "assert.deepEqual(candidate(10, 15),6);",
            "assert.deepEqual(candidate(100, 150),93);",
            "assert.deepEqual(candidate(4, 6),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "function multiply_int(x, y){\n    return x * y;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiply_int;",
            "assert.deepEqual(candidate(10, 20),200);",
            "assert.deepEqual(candidate(5, 10),50);",
            "assert.deepEqual(candidate(4, 8),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array of words.",
        "code": "function long_words(n, str){\n    var words = str.split(\" \");\n    var words_length = words.length;\n    var words_index = 0;\n    var words_index_max = words_length - 1;\n    var words_index_min = 0;\n    var words_index_min_max = words_length - 1;\n    var words_index_min_max_index = 0;\n    var words_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min = 0;\n    var words_index_min_max_index_min_max = words_length - 1;\n    var words_index_min_max_index_min_max_index = 0;\n    var words_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index = 0;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length - 1;\n    var words_index_min_max_index_min_max_index_min_max_index_max = words_length\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = long_words;",
            "assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);",
            "assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);",
            "assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "function magic_square_test(my_matrix){\n    var magic_square = false;\n    for(var i = 0; i < my_matrix.length; i++){\n        if(my_matrix[i] == '*'){\n            magic_square = true;\n            break;\n        }\n    }\n    return magic_square;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = magic_square_test;",
            "assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);",
            "assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);",
            "assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "function sort_matrix(M){\n    var n = M.length;\n    var a = [];\n    for(var i = 0; i < n; i++){\n        a.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            if(i == j){\n                a.push(i);\n            }\n            else{\n                if(M[i][j] > M[j][i]){\n                    a.push(i);\n                    a.push(j);\n                }\n                else{\n                    a.push(j);\n                    a.push(i);\n                }\n            }\n        }\n    }\n    return a;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_matrix;",
            "assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);",
            "assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);",
            "assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array.",
        "code": "function max_occurrences(nums){\n    var max = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > max){\n            max = nums[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_occurrences;",
            "assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);",
            "assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);",
            "assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a jsthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "function reverse_vowels(str1){\n    var str2 = str1.split(\"\");\n    var str2_ = str2.join(\"\");\n    var str2_ = str2_.replace(/[aeiou]/g, function(match){\n        return \"\";\n    });\n    return str2_;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_vowels;",
            "assert.deepEqual(candidate(\"Python\"),\"Python\");",
            "assert.deepEqual(candidate(\"USA\"),\"ASU\");",
            "assert.deepEqual(candidate(\"ab\"),\"ab\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array to a string.",
        "code": "function tup_string(tup1){\n    var tup2 = [];\n    for(var i = 0; i < tup1.length; i++){\n        tup2.push(tup1[i].toString());\n    }\n    return tup2.join(\"\");\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tup_string;",
            "assert.deepEqual(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]),\"exercises\");",
            "assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]),\"python\");",
            "assert.deepEqual(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]),\"program\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "function sum_negativenum(nums){\n    var sum = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] < 0){\n            sum += nums[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_negativenum;",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]),-32);",
            "assert.deepEqual(candidate([10, 15, -14, 13, -18, 12, -20]),-52);",
            "assert.deepEqual(candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]),-894);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "function hexagonal_num(n){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n    var i38 = 0;\n    var i39 = 0;\n    var\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = hexagonal_num;",
            "assert.deepEqual(candidate(10),190);",
            "assert.deepEqual(candidate(5),45);",
            "assert.deepEqual(candidate(7),91);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a jsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "function is_Sum_Of_Powers_Of_Two(n){\n    if(n == 0) return true;\n    if(n == 1) return false;\n    if(n == 2) return true;\n    if(n == 3) return false;\n    if(n == 4) return true;\n    if(n == 5) return false;\n    if(n == 6) return true;\n    if(n == 7) return false;\n    if(n == 8) return true;\n    if(n == 9) return false;\n    if(n == 10) return true;\n    if(n == 11) return false;\n    if(n == 12) return true;\n    if(n == 13) return false;\n    if(n == 14) return true;\n    if(n == 15) return false;\n    if(n == 16) return true;\n    if(n == 17) return false;\n    if(n == 18) return true;\n    if(n == 19) return false;\n    if(n == 20) return true;\n    if(n == 21) return false;\n    if(n == 22) return true;\n    if(n == 23) return false;\n    if(n == 24) return true;\n    if(n == 25) return false;\n    if(n == 26) return true;\n    if(n == 27) return false;\n    if(n == 28) return true;\n    if(n == 29) return false;\n    if(n == 30) return true;\n    if(n == 31) return false;\n    if(n == 32) return true;\n    if(n == 33) return false;\n    if(n == 34) return true;\n    if(n == 35) return false;\n    if(n == 36) return true;\n    if(n == 37) return false;\n    if(n == 38) return true;\n    if(n == 39) return false;\n    if(n == 40) return true;\n    if(n == 41) return false;\n    if(n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Sum_Of_Powers_Of_Two;",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(7),false);",
            "assert.deepEqual(candidate(14),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "function pancake_sort(nums){\n    var array = [];\n    for(var i = 0; i < nums.length; i++){\n        array.push(nums[i]);\n    }\n    return array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pancake_sort;",
            "assert.deepEqual(candidate([15, 79, 25, 38, 69]),[15, 25, 38, 69, 79]);",
            "assert.deepEqual(candidate([98, 12, 54, 36, 85]),[12, 36, 54, 85, 98]);",
            "assert.deepEqual(candidate([41, 42, 32, 12, 23]),[12, 23, 32, 41, 42]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "function count_samepair(list1, list2, list3){\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list2[i]){\n            count++;\n        }\n    }\n    for(var i = 0; i < list2.length; i++){\n        if(list2[i] == list3[i]){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_samepair;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),4);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of arrays present in the given array.",
        "code": "function find_lists(Input){\n    var num_lists = 0;\n    for(var i = 0; i < Input.length; i++){\n        if(Input[i] == '[' && Input[i+1] == ']'){\n            num_lists++;\n        }\n    }\n    return num_lists;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_lists;",
            "assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8]]),2);",
            "assert.deepEqual(candidate([[1, 2], [3, 4], [5, 6]]),3);",
            "assert.deepEqual(candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a jsthon function to find the maximum difference between any two elements in a given array.",
        "code": "function max_Abs_Diff(arr){\n    var max = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > arr[i+1]){\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_Abs_Diff;",
            "assert.deepEqual(candidate([2, 1, 5, 3]),4);",
            "assert.deepEqual(candidate([9, 3, 2, 5, 1]),8);",
            "assert.deepEqual(candidate([3, 2, 1]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a jsthon function to find the volume of a triangular prism.",
        "code": "function find_Volume(l, b, h){\n    var x = l;\n    var y = b;\n    var z = h;\n    var volume = 0;\n    while (x < z){\n        if (x == y){\n            volume += 1;\n        }\n        x += 1;\n    }\n    return volume;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Volume;",
            "assert.deepEqual(candidate(10, 8, 6),240);",
            "assert.deepEqual(candidate(3, 2, 2),6);",
            "assert.deepEqual(candidate(1, 2, 1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as an array, or return undefined if no solution exists.",
        "code": "function find_solution(a, b, n){\n    var x = [];\n    var y = [];\n    for(var i = 0; i < a.length; i++){\n        x.push(a[i]);\n        y.push(b[i]);\n    }\n    var solution = x.sort().join(\"\");\n    return solution;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_solution;",
            "assert.deepEqual(candidate(2, 3, 7),[2, 1]);",
            "assert.deepEqual(candidate(4, 2, 7),undefined);",
            "assert.deepEqual(candidate(1, 13, 17),[4, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array present in another array.",
        "code": "function remove_elements(list1, list2){\n    var list1_length = list1.length;\n    var list2_length = list2.length;\n    var index = 0;\n    while(index < list1_length){\n        if(list1[index] == list2[index]){\n            list1.splice(index, 1);\n            index++;\n        }\n        else{\n            index++;\n        }\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_elements;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "function sum_series(n){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_series;",
            "assert.deepEqual(candidate(6),12);",
            "assert.deepEqual(candidate(10),30);",
            "assert.deepEqual(candidate(9),25);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "function are_equivalent(num1, num2){\n    var num1_div = num1 / num2;\n    var num2_div = num2 / num1;\n    return num1_div == num2_div;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = are_equivalent;",
            "assert.deepEqual(candidate(36, 57),false);",
            "assert.deepEqual(candidate(2, 4),false);",
            "assert.deepEqual(candidate(23, 47),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "function count_char_position(str1){\n    var count = 0;\n    for(var i = 0; i < str1.length; i++){\n        if(str1.charAt(i) == str1.charAt(i)){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_char_position;",
            "assert.deepEqual(candidate(\"xbcefg\"),2);",
            "assert.deepEqual(candidate(\"ABcED\"),3);",
            "assert.deepEqual(candidate(\"AbgdeF\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "function find_even_pair(A){\n    var n = A.length;\n    var i = 0;\n    var j = n - 1;\n    while(i < n && j > 0){\n        if(A[i] == A[j]){\n            i++;\n            j--;\n        }\n        else{\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_even_pair;",
            "assert.deepEqual(candidate([5, 4, 7, 2, 1]),4);",
            "assert.deepEqual(candidate([7, 2, 8, 1, 0, 5, 11]),9);",
            "assert.deepEqual(candidate([1, 2, 3]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a jsthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "function next_power_of_2(n){\n    var result = 1;\n    while(result < n){\n        result *= 2;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_power_of_2;",
            "assert.deepEqual(candidate(0),1);",
            "assert.deepEqual(candidate(5),8);",
            "assert.deepEqual(candidate(17),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array.",
        "code": "function frequency(a, x){\n  var count = 0;\n  for(var i = 0; i < a.length; i++){\n    if(a[i] == x){\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = frequency;",
            "assert.deepEqual(candidate([1, 2, 3], 4),0);",
            "assert.deepEqual(candidate([1, 2, 2, 3, 3, 3, 4], 3),3);",
            "assert.deepEqual(candidate([0, 1, 2, 3, 1, 2], 1),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "function text_lowercase_underscore(text){\n    var result = text.replace(/[^a-z]/g, function(match){\n        return match.toLowerCase();\n    });\n    return result.replace(/[^a-z]/g, function(match){\n        return match.toLowerCase();\n    });\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_lowercase_underscore;",
            "assert.deepEqual(candidate(\"aab_cbbbc\"),true);",
            "assert.deepEqual(candidate(\"aab_Abbbc\"),false);",
            "assert.deepEqual(candidate(\"Aaab_abbbc\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "function sum_range_list(list1, m, n){\n    var sum = 0;\n    for(var i = 0; i < m; i++){\n        sum += list1[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_range_list;",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10),29);",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7),16);",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10),38);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "function perimeter_pentagon(a){\n    var perimeter = 0;\n    for(var i = 0; i < a.length; i++){\n        perimeter += Math.sqrt(Math.pow(a[i].x - a[i].y, 2) + Math.pow(a[i].x - a[i].z, 2));\n    }\n    return perimeter;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = perimeter_pentagon;",
            "assert.deepEqual(candidate(5),25);",
            "assert.deepEqual(candidate(10),50);",
            "assert.deepEqual(candidate(15),75);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "function count_occurance(s){\n    var count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] =='std'){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_occurance;",
            "assert.deepEqual(candidate(\"letstdlenstdporstd\"),3);",
            "assert.deepEqual(candidate(\"truststdsolensporsd\"),1);",
            "assert.deepEqual(candidate(\"makestdsostdworthit\"),2);",
            "assert.deepEqual(candidate(\"stds\"),1);",
            "assert.deepEqual(candidate(\"\"),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "function square_perimeter(a){\n    return Math.sqrt(a*a);\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_perimeter;",
            "assert.deepEqual(candidate(10),40);",
            "assert.deepEqual(candidate(5),20);",
            "assert.deepEqual(candidate(4),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "function remove_dirty_chars(string, second_string){\n    var first_string = string.split('');\n    var second_string = second_string.split('');\n    var first_length = first_string.length;\n    var second_length = second_string.length;\n    var first_index = 0;\n    var second_index = 0;\n    var first_char = '';\n    var second_char = '';\n    while(first_index < first_length){\n        first_char = first_string[first_index];\n        if(first_char in second_string){\n            second_char = second_string[first_index];\n            first_index++;\n        }\n        else{\n            first_index++;\n        }\n    }\n    while(second_index < second_length){\n        second_char = second_string[second_index];\n        if(second_char in first_string){\n            first_index++;\n        }\n        else{\n            second_index++;\n        }\n    }\n    return first_char + second_char;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_dirty_chars;",
            "assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");",
            "assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");",
            "assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "function test_duplicate(arraynums){\n    var array = [];\n    for(var i = 0; i < arraynums.length; i++){\n        array.push(arraynums[i]);\n    }\n    return array.indexOf(array[0])!= -1;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = test_duplicate;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 4]),true);",
            "assert.deepEqual(candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "function is_woodall(x){\n    return x%2==0;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_woodall;",
            "assert.deepEqual(candidate(383),true);",
            "assert.deepEqual(candidate(254),false);",
            "assert.deepEqual(candidate(200),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in array have same data type or not.",
        "code": "function check_type(test_tuple){\n    var test_array = test_tuple[0];\n    var test_array_length = test_tuple[1];\n    var test_array_length_check = test_tuple[2];\n    var test_array_length_check_check = test_tuple[3];\n    var test_array_length_check_check_check = test_tuple[4];\n    var test_array_length_check_check_check_check = test_tuple[5];\n    var test_array_length_check_check_check_check_check = test_tuple[6];\n    var test_array_length_check_check_check_check_check_check = test_tuple[7];\n    var test_array_length_check_check_check_check_check_check_check = test_tuple[8];\n    var test_array_length_check_check_check_check_check_check_check_check = test_tuple[9];\n    var test_array_length_check_check_check_check_check_check_check_check_check = test_tuple[10];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check = test_tuple[11];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check = test_tuple[12];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check = test_tuple[13];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check_check = test_tuple[14];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check_check_check_check = test_tuple[15];\n    var test_array_length_check_check_check_check\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_type;",
            "assert.deepEqual(candidate([5, 6, 7, 3, 5, 6]),true);",
            "assert.deepEqual(candidate([1, 2, \"4\"]),false);",
            "assert.deepEqual(candidate([3, 2, 1, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "function is_majority(arr, n, x){\n    var majority = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == x){\n            majority = i;\n            break;\n        }\n    }\n    return majority;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_majority;",
            "assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);",
            "assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);",
            "assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);",
            "assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a jsthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "function count_Set_Bits(n){\n    var result = 0;\n    for(var i = 0; i < n; i++){\n        result += (1 << i);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Set_Bits;",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(4),1);",
            "assert.deepEqual(candidate(6),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a jsthon function to remove the characters which have odd index values of a given string.",
        "code": "function odd_values_string(str){\n    var odd_values = [];\n    var odd_index = 0;\n    var odd_index_string = '';\n    var odd_index_string_length = 0;\n    var odd_index_string_length_string = '';\n    var odd_index_string_length_string_length = 0;\n    var odd_index_string_length_string_length_string = '';\n    var odd_index_string_length_string_length_string_length = 0;\n    var odd_index_string_length_string_length_string_length_string = '';\n    var odd_index_string_length_string_length_string_length_string_length = 0;\n    var odd_index_string_length_string_length_string_length_string_length_string_length = 0;\n    var odd_index_string_length_string_length_string_length_string_length_string_length_string_length = 0;\n    var odd_index_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_values_string;",
            "assert.deepEqual(candidate(\"abcdef\"),\"ace\");",
            "assert.deepEqual(candidate(\"python\"),\"pto\");",
            "assert.deepEqual(candidate(\"data\"),\"dt\");",
            "assert.deepEqual(candidate(\"lambs\"),\"lms\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "function min_of_three(a, b, c){\n    if(a < b && a < c)\n        return a;\n    if(b < a && b < c)\n        return b;\n    if(c < a && c < b)\n        return c;\n    return a;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_of_three;",
            "assert.deepEqual(candidate(10, 20, 0),0);",
            "assert.deepEqual(candidate(19, 15, 18),15);",
            "assert.deepEqual(candidate(-10, -20, -30),-30);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a jsthon function to check whether all the bits are unset in the given range or not.",
        "code": "function all_Bits_Set_In_The_Given_Range(n, l, r){\n    var bits = [];\n    for(var i = l; i <= r; i++){\n        bits.push(i);\n    }\n    return bits;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_Bits_Set_In_The_Given_Range;",
            "assert.deepEqual(candidate(4, 1, 2),true);",
            "assert.deepEqual(candidate(17, 2, 4),true);",
            "assert.deepEqual(candidate(39, 4, 6),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "function re_arrange_array(arr, n){\n    var i, j, k, l, m, n_i, n_j, n_k, n_l, n_m, n_n, n_o, n_p, n_q, n_r, n_s, n_t, n_u, n_v, n_w, n_x, n_y, n_z, n_w_i, n_w_j, n_w_k, n_w_l, n_w_m, n_w_n, n_w_o, n_w_p, n_w_q, n_w_r, n_w_s, n_w_t, n_w_u, n_w_v, n_w_w, n_w_x, n_w_y, n_w_z, n_w_w_i, n_w_w_j, n_w_w_k, n_w_w_l, n_w_w_m, n_w_w_n, n_w_w_o, n_w_w_p, n_w_w_q, n_w_w_r, n_w_w_s, n_w_w_t, n_w_w_u, n_w_w_v, n_w_w_w, n_w_w_x, n_w_w_y, n_w_w_z, n_w_w_w_i, n_w_w_w_j, n_w_w_w_k, n_w_w_w_l, n_w_w_w_m, n_w_w_w_n, n_w_w_w_o, n_w_w_w_p, n_w_w_w_q, n_w_w_w_r, n_w_w_w_s, n_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = re_arrange_array;",
            "assert.deepEqual(candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9),[-1, -3, -7, 4, 5, 6, 2, 8, 9]);",
            "assert.deepEqual(candidate([12, -14, -26, 13, 15], 5),[-14, -26, 12, 13, 15]);",
            "assert.deepEqual(candidate([10, 24, 36, -42, -39, -78, 85], 7),[-42, -39, -78, 10, 24, 36, 85]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "function replace_blank(str1, char){\n    var str2 = str1.replace(/^\\s+|\\s+$/g, char);\n    return str2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_blank;",
            "assert.deepEqual(candidate(\"hello people\", \"@\"),\"hello@people\");",
            "assert.deepEqual(candidate(\"python program language\", \"$\"),\"python$program$language\");",
            "assert.deepEqual(candidate(\"blank space\", \"-\"),\"blank-space\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "function volume_cube(l){\n    var x = l;\n    var y = x;\n    var z = x;\n    var r = x;\n    var s = x;\n    var t = x;\n    var u = x;\n    var v = x;\n    var w = x;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u = u;\n    var v = v;\n    var w = w;\n    var x = x;\n    var y = y;\n    var z = z;\n    var r = r;\n    var s = s;\n    var t = t;\n    var u =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = volume_cube;",
            "assert.deepEqual(candidate(3),27);",
            "assert.deepEqual(candidate(2),8);",
            "assert.deepEqual(candidate(5),125);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "237",
        "title": "check_occurences",
        "text": "Write a function that takes in an array of arrays and returns an object mapping each unique array to the number of times it occurs in the array.",
        "code": "function check_occurences(test_list){\n    var test_list_length = test_list.length;\n    var test_list_index = 0;\n    var test_list_index_max = test_list_length - 1;\n    var test_list_index_min = 0;\n    var test_list_index_min_max = test_list_length - 1;\n    var test_list_index_min_max_max = test_list_length - 1;\n    var test_list_index_min_max_min = test_list_length - 1;\n    var test_list_index_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min_max_min_max_min_max = test_list_length - 1;\n    var test_list_index_min_max_min\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_occurences;",
            "assert.deepEqual(candidate([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]),{[1, 3]: 2, [2, 5]: 2, [3, 6]: 1});",
            "assert.deepEqual(candidate([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]),{[2, 4]: 2, [3, 6]: 2, [4, 7]: 1});",
            "assert.deepEqual(candidate([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]),{[2, 13]: 1, [11, 23]: 1, [12, 25]: 2, [16, 23]: 1});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a jsthon function to count the number of non-empty substrings of a given string.",
        "code": "function number_of_substrings(str){\n    var count = 0;\n    for(var i = 0; i < str.length; i++){\n        if(str[i]!= ''){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = number_of_substrings;",
            "assert.deepEqual(candidate(\"abc\"),6);",
            "assert.deepEqual(candidate(\"abcd\"),10);",
            "assert.deepEqual(candidate(\"abcde\"),15);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "function get_total_number_of_sequences(m, n){\n    var total = 0;\n    for(var i = 0; i < m; i++){\n        total += i;\n    }\n    for(var i = 0; i < n; i++){\n        total += i;\n    }\n    return total;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_total_number_of_sequences;",
            "assert.deepEqual(candidate(10, 4),4);",
            "assert.deepEqual(candidate(5, 2),6);",
            "assert.deepEqual(candidate(16, 3),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.",
        "code": "function replace_list(list1, list2){\n    var list1_length = list1.length;\n    var list2_length = list2.length;\n    var new_list = [];\n    for(var i = 0; i < list1_length; i++){\n        new_list.push(list1[i]);\n    }\n    for(var i = 0; i < list2_length; i++){\n        new_list.push(list2[i]);\n    }\n    return new_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_list;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 2, 4, 6, 8]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]),[1, 2, 3, 4, 5, 6, 7, 8]);",
            "assert.deepEqual(candidate([\"red\", \"blue\", \"green\"], [\"yellow\"]),[\"red\", \"blue\", \"yellow\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "function count_charac(str1){\n    var count = 0;\n    for(var i = 0; i < str1.length; i++){\n        if(str1[i] ==''){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_charac;",
            "assert.deepEqual(candidate(\"python programming\"),18);",
            "assert.deepEqual(candidate(\"language\"),8);",
            "assert.deepEqual(candidate(\"words\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a jsthon function to find the next perfect square greater than a given number.",
        "code": "function next_Perfect_Square(N){\n    var x = N;\n    var y = N;\n    var z = N;\n    var a = N;\n    var b = N;\n    var c = N;\n    var d = N;\n    var e = N;\n    var f = N;\n    var g = N;\n    var h = N;\n    var i = N;\n    var j = N;\n    var k = N;\n    var l = N;\n    var m = N;\n    var n = N;\n    var o = N;\n    var p = N;\n    var q = N;\n    var r = N;\n    var s = N;\n    var t = N;\n    var u = N;\n    var v = N;\n    var w = N;\n    var x1 = N;\n    var y1 = N;\n    var z1 = N;\n    var a1 = N;\n    var b1 = N;\n    var c1 = N;\n    var d1 = N;\n    var e1 = N;\n    var f1 = N;\n    var g1 = N;\n    var h1 = N;\n    var i1 = N;\n    var j1 = N;\n    var k1 = N;\n    var l1 = N;\n    var m1 = N;\n    var n1 = N;\n    var o1 = N;\n    var p1 = N;\n    var q1 = N;\n    var r1 = N;\n    var s1 = N;\n    var t1 = N;\n    var u1 = N;\n    var v1 = N;\n    var w1 = N;\n    var x2 = N;\n    var y2 = N;\n    var z2 = N;\n    var a2 = N;\n    var b2 = N;\n    var c2 = N;\n    var d2 = N;\n    var e2 = N;\n    var f2 = N;\n    var g2 = N;\n    var h2 = N;\n    var i2\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_Perfect_Square;",
            "assert.deepEqual(candidate(35),36);",
            "assert.deepEqual(candidate(6),9);",
            "assert.deepEqual(candidate(9),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "function max_sum(arr){\n    var max = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum;",
            "assert.deepEqual(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]),194);",
            "assert.deepEqual(candidate([80, 60, 30, 40, 20, 10]),210);",
            "assert.deepEqual(candidate([2, 3, 14, 16, 21, 23, 29, 30]),138);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "function lps(str){\n    var lps = [];\n    var i = 0;\n    var j = 0;\n    var len = str.length;\n    while(i < len){\n        if(str[i] == str[j]){\n            lps.push(i);\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return lps;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lps;",
            "assert.deepEqual(candidate(\"TENS FOR TENS\"),5);",
            "assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);",
            "assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "function intersection_array(array_nums1, array_nums2){\n    var intersection_array = [];\n    for(var i = 0; i < array_nums1.length; i++){\n        for(var j = 0; j < array_nums2.length; j++){\n            if(array_nums1[i] == array_nums2[j]){\n                intersection_array.push(array_nums1[i]);\n            }\n        }\n    }\n    return intersection_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = intersection_array;",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]),[1, 2, 8, 9]);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]),[3, 5, 7, 9]);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]),[10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a jsthon function that takes in an array and an element and counts the occcurences of the element in the array.",
        "code": "function count_X(tup, x){\n    var count = 0;\n    for(var i = 0; i < tup.length; i++){\n        if(tup[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_X;",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4),0);",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10),3);",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "function insert_element(list, element){\n    var new_list = [];\n    for(var i = 0; i < list.length; i++){\n        new_list.push(list[i]);\n    }\n    new_list.push(element);\n    return new_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = insert_element;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Black\"], \"c\"),[\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]);",
            "assert.deepEqual(candidate([\"python\", \"java\"], \"program\"),[\"program\", \"python\", \"program\", \"java\"]);",
            "assert.deepEqual(candidate([\"happy\", \"sad\"], \"laugh\"),[\"laugh\", \"happy\", \"laugh\", \"sad\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a jsthon function to convert complex numbers to polar coordinates.",
        "code": "function convert(numbers){\n    var polar = [];\n    for(var i = 0; i < numbers.length; i++){\n        polar.push(Math.atan2(numbers[i][1], numbers[i][0]));\n    }\n    return polar;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = convert;",
            "assert.deepEqual(candidate(1),[1.0, 0.0]);",
            "assert.deepEqual(candidate(4),[4.0, 0.0]);",
            "assert.deepEqual(candidate(5),[5.0, 0.0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a jsthon function that returns the number of integer elements in a given array.",
        "code": "function count_integer(list1){\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == 1)\n            count++;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_integer;",
            "assert.deepEqual(candidate([1, 2, \"abc\", 1.2]),2);",
            "assert.deepEqual(candidate([1, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 1.2, 4, 5.1]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "function combinations_colors(l, n){\n    var combinations = [];\n    for(var i = 0; i < l; i++){\n        combinations.push([i, i]);\n    }\n    for(var i = 0; i < n; i++){\n        combinations.push([i, i]);\n    }\n    return combinations;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = combinations_colors;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 1),[[\"Red\"], [\"Green\"], [\"Blue\"]]);",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 2),[[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 3),[[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a jsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "function count_Primes_nums(n){\n    let count = 0;\n    for(let i = 2; i <= n; i++){\n        if(i % 2 == 0){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Primes_nums;",
            "assert.deepEqual(candidate(5),2);",
            "assert.deepEqual(candidate(10),4);",
            "assert.deepEqual(candidate(100),25);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "function swap_numbers(a, b){\n    var temp = a;\n    a = b;\n    b = temp;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_numbers;",
            "assert.deepEqual(candidate(10, 20),[20, 10]);",
            "assert.deepEqual(candidate(15, 17),[17, 15]);",
            "assert.deepEqual(candidate(100, 200),[200, 100]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two arrays.",
        "code": "function maximize_elements(test_tup1, test_tup2){\n    var test_tup1_max = 0;\n    var test_tup2_max = 0;\n    for(var i = 0; i < test_tup1.length; i++){\n        if(test_tup1[i] > test_tup2[i]){\n            test_tup1_max = i;\n        }\n        if(test_tup2[i] > test_tup1[i]){\n            test_tup2_max = i;\n        }\n    }\n    return [test_tup1_max, test_tup2_max];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maximize_elements;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 7], [4, 9], [2, 9], [7, 10]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[7, 8], [5, 10], [3, 10], [8, 11]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[8, 9], [6, 11], [4, 11], [9, 12]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "function newman_prime(n){\n    var a = n;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n = 66;\n    var o = 67;\n    var p = 68;\n    var q = 69\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = newman_prime;",
            "assert.deepEqual(candidate(3),7);",
            "assert.deepEqual(candidate(4),17);",
            "assert.deepEqual(candidate(5),41);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.",
        "code": "function division_elements(test_tup1, test_tup2){\n    var test_tup1_array = test_tup1.split(\",\");\n    var test_tup2_array = test_tup2.split(\",\");\n    var test_tup1_array_length = test_tup1_array.length;\n    var test_tup2_array_length = test_tup2_array.length;\n    var test_tup1_array_index = 0;\n    var test_tup2_array_index = 0;\n    var test_tup1_array_index_length = test_tup1_array_length;\n    var test_tup2_array_index_length = test_tup2_array_length;\n    var test_tup1_array_index_index = 0;\n    var test_tup2_array_index_index = 0;\n    var test_tup1_array_index_index_length = test_tup1_array_index_length;\n    var test_tup2_array_index_index_index = 0;\n    var test_tup1_array_index_index_index_length = test_tup1_array_index_index_length;\n    var test_tup2_array_index_index_index_index_length = test_tup2_array_index_index_index_length;\n    var test_tup1_array_index_index_index_index_length = test_tup1_array_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_length = test_tup2_array_index_index_index_index_length;\n    var test_tup1_array_index_index_index_index_index_length = test_tup1_array_index_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_index_length = test_tup2_array\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = division_elements;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[2, 2, 2, 3]);",
            "assert.deepEqual(candidate([12, 6, 8, 16], [6, 3, 4, 4]),[2, 2, 2, 4]);",
            "assert.deepEqual(candidate([20, 14, 36, 18], [5, 7, 6, 9]),[4, 2, 6, 2]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.",
        "code": "function split_two_parts(list1, L){\n    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        result.push(list1[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split_two_parts;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);",
            "assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "function dog_age(h_age){\n    var age = h_age - 1980;\n    var year = age / 4;\n    var month = (age - (year * 4)) / 100;\n    var day = (age - (year * 4) - (month * 100)) / 400;\n    return year + \"-\" + month + \"-\" + day;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dog_age;",
            "assert.deepEqual(candidate(12),61);",
            "assert.deepEqual(candidate(15),73);",
            "assert.deepEqual(candidate(24),109);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.",
        "code": "function list_split(S, step){\n    var result = [];\n    for(var i = 0; i < S.length; i += step){\n        result.push(S.slice(i, i + step));\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_split;",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3),[[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3),[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]);",
            "assert.deepEqual(candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2),[[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "function lateralsurface_cube(l){\n    var side = l.side;\n    var side_length = l.side_length;\n    var side_width = l.side_width;\n    var side_height = l.side_height;\n    var side_depth = l.side_depth;\n    var side_depth_max = l.side_depth_max;\n    var side_depth_min = l.side_depth_min;\n    var side_depth_max_min = l.side_depth_max_min;\n    var side_depth_min_max = l.side_depth_min_max;\n    var side_depth_min_max_min = l.side_depth_min_max_min;\n    var side_depth_min_max_min_max = l.side_depth_min_max_max;\n    var side_depth_min_max_min_max = l.side_depth_min_max_max;\n    var side_depth_min_max_min_max_min = l.side_depth_min_max_min_max;\n    var side_depth_min_max_min_max_min = l.side_depth_min_max_min_max;\n    var side_depth_min_max_min_max_min = l.side_depth_min_max_min_max_min;\n    var side_depth_min_max_min_max_min_max = l.side_depth_min_max_min_max_max;\n    var side_depth_min_max_min_max_min_max = l.side_depth_min_max_min_max_max;\n    var side_depth_min_max_min_max_min_max = l.side_depth_min_max_min_max_max;\n    var side_depth_min_max_min_max_min_max = l.side_depth_min_max_min_max_max;\n    var side_depth_min_max_min_max_min_max = l.side_depth_min_max_min_max\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lateralsurface_cube;",
            "assert.deepEqual(candidate(5),100);",
            "assert.deepEqual(candidate(9),324);",
            "assert.deepEqual(candidate(10),400);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a jsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "function square_Sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_Sum;",
            "assert.deepEqual(candidate(2),10);",
            "assert.deepEqual(candidate(3),35);",
            "assert.deepEqual(candidate(4),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "function find_star_num(n){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_star_num;",
            "assert.deepEqual(candidate(3),37);",
            "assert.deepEqual(candidate(4),73);",
            "assert.deepEqual(candidate(5),121);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "function ascii_value(k){\n    return k.charCodeAt(0);\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = ascii_value;",
            "assert.deepEqual(candidate(\"A\"),65);",
            "assert.deepEqual(candidate(\"R\"),82);",
            "assert.deepEqual(candidate(\"S\"),83);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a jsthon function to find the sum of even numbers at even positions of an array.",
        "code": "function sum_even_and_even_index(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(i % 2 == 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_even_and_even_index;",
            "assert.deepEqual(candidate([5, 6, 12, 1, 18, 8]),30);",
            "assert.deepEqual(candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]),26);",
            "assert.deepEqual(candidate([5, 6, 12, 1]),12);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a jsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "function even_Power_Sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_Power_Sum;",
            "assert.deepEqual(candidate(2),1056);",
            "assert.deepEqual(candidate(3),8832);",
            "assert.deepEqual(candidate(1),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array of arrays and returns an array containing the rear element of each array.",
        "code": "function rear_extract(test_list){\n    var test_list_length = test_list.length;\n    var test_list_array = new Array(test_list_length);\n    for(var i = 0; i < test_list_length; i++){\n        test_list_array[i] = test_list[i];\n    }\n    return test_list_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rear_extract;",
            "assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);",
            "assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);",
            "assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.",
        "code": "function substract_elements(test_tup1, test_tup2){\n    var test_tup1_array = test_tup1.slice(0);\n    var test_tup2_array = test_tup2.slice(0);\n    var test_tup1_array_length = test_tup1_array.length;\n    var test_tup2_array_length = test_tup2_array.length;\n    var test_tup1_array_index = 0;\n    var test_tup2_array_index = 0;\n    var test_tup1_array_index_length = test_tup1_array_length;\n    var test_tup2_array_index_length = test_tup2_array_length;\n    var test_tup1_array_index_index = 0;\n    var test_tup2_array_index_index = 0;\n    var test_tup1_array_index_index_length = test_tup1_array_index_length;\n    var test_tup2_array_index_index_index = 0;\n    var test_tup1_array_index_index_index_length = test_tup1_array_index_index_length;\n    var test_tup1_array_index_index_index_index = 0;\n    var test_tup2_array_index_index_index_index_length = test_tup2_array_index_index_index_length;\n    var test_tup1_array_index_index_index_index_index = 0;\n    var test_tup2_array_index_index_index_index_index_length = test_tup2_array_index_index_index_index_length;\n    var test_tup1_array_index_index_index_index_index_length = test_tup1_array_index_index_index_index_length;\n    var test_tup1_array_index_index_index\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = substract_elements;",
            "assert.deepEqual(candidate([10, 4, 5], [2, 5, 18]),[8, -1, -13]);",
            "assert.deepEqual(candidate([11, 2, 3], [24, 45, 16]),[-13, -43, -13]);",
            "assert.deepEqual(candidate([7, 18, 9], [10, 11, 12]),[-3, 7, -3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a jsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "function even_binomial_Coeff_Sum(n){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_binomial_Coeff_Sum;",
            "assert.deepEqual(candidate(4),8);",
            "assert.deepEqual(candidate(6),32);",
            "assert.deepEqual(candidate(2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in an object and integer n and filters the object to only include entries with values greater than or equal to n.",
        "code": "function dict_filter(dict, n){\n    var result = {};\n    for(var key in dict){\n        if(dict[key] > n){\n            result[key] = dict[key];\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dict_filter;",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 170),{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Pierre Cox\": 190});",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 180),{\"Alden Cantrell\": 180, \"Pierre Cox\": 190});",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 190),{\"Pierre Cox\": 190});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the array element in the given array.",
        "code": "function count_first_elements(test_tup){\n    var test_tup_length = test_tup.length;\n    var test_tup_index = 0;\n    var test_tup_value = test_tup[test_tup_index];\n    var test_tup_value_length = test_tup_value.length;\n    var test_tup_index_value = 0;\n    var test_tup_index_value_length = 0;\n    while(test_tup_index_value < test_tup_value_length){\n        if(test_tup_index_value == test_tup_index){\n            test_tup_index_value_length = test_tup_value_length;\n        }\n        test_tup_index_value++;\n    }\n    while(test_tup_index_value_length < test_tup_value_length){\n        test_tup_index_value++;\n    }\n    return test_tup_index_value;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_first_elements;",
            "assert.deepEqual(candidate([1, 5, 7, [4, 6], 10]),3);",
            "assert.deepEqual(candidate([2, 9, [5, 7], 11]),2);",
            "assert.deepEqual(candidate([11, 15, 5, 8, [2, 3], 8]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "function is_num_decagonal(n){\n    var i = 0;\n    var j = n;\n    while(i < j){\n        if(n % i == 0 && n % j == 0){\n            return true;\n        }\n        i++;\n        j--;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_num_decagonal;",
            "assert.deepEqual(candidate(3),27);",
            "assert.deepEqual(candidate(7),175);",
            "assert.deepEqual(candidate(10),370);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "function sequential_search(dlist, item){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sequential_search;",
            "assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);",
            "assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);",
            "assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a jsthon function to check if the elements of a given array are unique or not.",
        "code": "function all_unique(test_list){\n    var test_list_length = test_list.length;\n    var test_list_index = 0;\n    var test_list_index_max = test_list_length - 1;\n    var test_list_index_min = 0;\n    var test_list_index_min_max = test_list_length - 1;\n    var test_list_index_min_max_index = 0;\n    var test_list_index_min_max_index_max = test_list_length - 1;\n    var test_list_index_min_max_index_min = 0;\n    var test_list_index_min_max_index_min_max = test_list_length - 1;\n    var test_list_index_min_max_index_min_max_index = 0;\n    var test_list_index_min_max_index_min_max_index_max = test_list_length - 1;\n    var test_list_index_min_max_index_min_max_index_min = 0;\n    var test_list_index_min_max_index_min_max_index_min_max = test_list_length - 1;\n    var test_list_index_min_max_index_min_max_index_min_max_index = 0;\n    var test_list_index_min_max_index_min_max_index_min_max_index_max = test_list_length - 1;\n    var test_list_index_min_max_index_min_max_index_min_max_index_max = 0;\n    var test_list_index_min_max_index_min_max_index_min_max_index_max = test_list_length - 1;\n    var test_list_index_min_max_index_min_max_index_min_max_index_max = 0;\n    var test_list_index_min_max_index_min_max_index_min_max_index_max = test_list_length - 1;\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_unique;",
            "assert.deepEqual(candidate([1, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two arrays element-wise.",
        "code": "function sub_list(nums1, nums2){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        result.push(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sub_list;",
            "assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),[-3, -3, -3]);",
            "assert.deepEqual(candidate([1, 2], [3, 4]),[-2, -2]);",
            "assert.deepEqual(candidate([90, 120], [50, 70]),[40, 50]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a jsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "function validate(n){\n    if(n < 0)\n        return false;\n    else\n        return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = validate;",
            "assert.deepEqual(candidate(1234),true);",
            "assert.deepEqual(candidate(51241),false);",
            "assert.deepEqual(candidate(321),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.",
        "code": "function check_element(list, element){\n    var i = 0;\n    for(i = 0; i < list.length; i++){\n        if(list[i] == element){\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_element;",
            "assert.deepEqual(candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\"),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4], 7),false);",
            "assert.deepEqual(candidate([\"green\", \"green\", \"green\", \"green\"], \"green\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "function text_match_two_three(text){\n    var match = text.match(/^a/);\n    if(match){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_two_three;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "function max_sub_array_sum_repeated(a, n, k){\n    var max = 0;\n    for(var i = 0; i < n; i++){\n        max = Math.max(max, a[i]);\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sub_array_sum_repeated;",
            "assert.deepEqual(candidate([10, 20, -30, -1], 4, 3),30);",
            "assert.deepEqual(candidate([-1, 10, 20], 3, 2),59);",
            "assert.deepEqual(candidate([-1, -2, -3], 3, 3),-1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a jsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "function square_Sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_Sum;",
            "assert.deepEqual(candidate(2),20);",
            "assert.deepEqual(candidate(3),56);",
            "assert.deepEqual(candidate(4),120);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array of maximum length in an array of arrays.",
        "code": "function max_length(list1){\n    var max_length = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] > max_length){\n            max_length = list1[i];\n        }\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_length;",
            "assert.deepEqual(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]]);",
            "assert.deepEqual(candidate([[1], [5, 7], [10, 12, 14, 15]]),[4, [10, 12, 14, 15]]);",
            "assert.deepEqual(candidate([[5], [15, 20, 25]]),[3, [15, 20, 25]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "function count_no_of_ways(n, k){\n    var count = 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < k; j++){\n            if(i == j){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_no_of_ways;",
            "assert.deepEqual(candidate(2, 4),16);",
            "assert.deepEqual(candidate(3, 2),6);",
            "assert.deepEqual(candidate(4, 4),228);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a jsthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "function find(n, m){\n    var a = n;\n    var b = m;\n    var c = 0;\n    while(a > 0){\n        c = a % b;\n        a = a / b;\n    }\n    return c;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find;",
            "assert.deepEqual(candidate(10, 3),3);",
            "assert.deepEqual(candidate(4, 2),2);",
            "assert.deepEqual(candidate(20, 5),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "function otherside_rightangle(w, h){\n    var x = w / 2;\n    var y = h / 2;\n    var x2 = x;\n    var y2 = y;\n    var x3 = x;\n    var y3 = y;\n    var x4 = x;\n    var y4 = y;\n    var x5 = x;\n    var y5 = y;\n    var x6 = x;\n    var y6 = y;\n    var x7 = x;\n    var y7 = y;\n    var x8 = x;\n    var y8 = y;\n    var x9 = x;\n    var y9 = y;\n    var x10 = x;\n    var y10 = y;\n    var x11 = x;\n    var y11 = y;\n    var x12 = x;\n    var y12 = y;\n    var x13 = x;\n    var y13 = y;\n    var x14 = x;\n    var y14 = y;\n    var x15 = x;\n    var y15 = y;\n    var x16 = x;\n    var y16 = y;\n    var x17 = x;\n    var y17 = y;\n    var x18 = x;\n    var y18 = y;\n    var x19 = x;\n    var y19 = y;\n    var x20 = x;\n    var y20 = y;\n    var x21 = x;\n    var y21 = y;\n    var x22 = x;\n    var y22 = y;\n    var x23 = x;\n    var y23 = y;\n    var x24 = x;\n    var y24 = y;\n    var x25 = x;\n    var y25 = y;\n    var x26 = x;\n    var y26 = y;\n    var x27 = x;\n    var y27 = y;\n    var x28 = x;\n    var y28 = y;\n    var x29 = x;\n    var y29 = y;\n    var x30 = x;\n    var y30 = y;\n    var\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = otherside_rightangle;",
            "assert.deepEqual(candidate(7, 8),10.63014581273465);",
            "assert.deepEqual(candidate(3, 4),5);",
            "assert.deepEqual(candidate(7, 15),16.55294535724685);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous array.",
        "code": "function max_val(listval){\n    var max = listval[0];\n    for(var i = 1; i < listval.length; i++){\n        if(listval[i] > max){\n            max = listval[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_val;",
            "assert.deepEqual(candidate([\"Python\", 3, 2, 4, 5, \"version\"]),5);",
            "assert.deepEqual(candidate([\"Python\", 15, 20, 25]),25);",
            "assert.deepEqual(candidate([\"Python\", 30, 20, 40, 50, \"version\"]),50);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "function sum_div(number){\n    var sum = 0;\n    for(var i = 0; i < number; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_div;",
            "assert.deepEqual(candidate(8),7);",
            "assert.deepEqual(candidate(12),16);",
            "assert.deepEqual(candidate(7),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a jsthon function to count inversions in an array.",
        "code": "function get_Inv_Count(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_Inv_Count;",
            "assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);",
            "assert.deepEqual(candidate([1, 2, 1]),1);",
            "assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested array structure.",
        "code": "function flatten_list(list1){\n    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        result.push(flatten_list(list1[i]));\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = flatten_list;",
            "assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);",
            "assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array of arrays.",
        "code": "function max_aggregate(stdata){\n    var max = 0;\n    for(var i = 0; i < stdata.length; i++){\n        if(stdata[i] > max){\n            max = stdata[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_aggregate;",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]),[\"Juan Whelan\", 212]);",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]),[\"Juan Whelan\", 72]);",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]),[\"Sabah Colley\", 70]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a jsthon function to find element at a given index after number of rotations.",
        "code": "function find_Element(arr, ranges, rotations, index){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Element;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "function start_withp(words){\n    var start = words[0];\n    var end = words[1];\n    return [start, end];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = start_withp;",
            "assert.deepEqual(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]),[\"Python\", \"PHP\"]);",
            "assert.deepEqual(candidate([\"Python Programming\", \"Java Programming\"]),[\"Python\", \"Programming\"]);",
            "assert.deepEqual(candidate([\"Pqrst Pqr\", \"qrstuv\"]),[\"Pqrst\", \"Pqr\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "function max_sum_increasing_subseq(a, n, index, k){\n    if(index == n){\n        return a[index];\n    }\n    var max = a[index];\n    for(var i = index + 1; i < n; i++){\n        if(a[i] > max){\n            max = a[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum_increasing_subseq;",
            "assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11);",
            "assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7);",
            "assert.deepEqual(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "function large_product(nums1, nums2, N){\n    var result = [];\n    for(var i = 0; i < N; i++){\n        result.push(nums1[i] * nums2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = large_product;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a jsthon function to find the maximum of two numbers.",
        "code": "function maximum(a, b){\n    if(a > b)\n        return a;\n    else\n        return b;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maximum;",
            "assert.deepEqual(candidate(5, 10),10);",
            "assert.deepEqual(candidate(-1, -2),-1);",
            "assert.deepEqual(candidate(9, 7),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array of characters.",
        "code": "function string_to_tuple(str1){\n    var str2 = str1.split('');\n    var str3 = [];\n    for(var i = 0; i < str2.length; i++){\n        str3.push(str2[i]);\n    }\n    return str3;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = string_to_tuple;",
            "assert.deepEqual(candidate(\"python 3.0\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]);",
            "assert.deepEqual(candidate(\"item1\"),[\"i\", \"t\", \"e\", \"m\", \"1\"]);",
            "assert.deepEqual(candidate(\"15.10\"),[\"1\", \"5\", \".\", \"1\", \"0\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a jsthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "function highest_Power_of_2(n){\n    var result = 0;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = highest_Power_of_2;",
            "assert.deepEqual(candidate(10),8);",
            "assert.deepEqual(candidate(19),16);",
            "assert.deepEqual(candidate(32),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "function find_lucas(n){\n    var a = [];\n    for(var i = 0; i < n; i++){\n        a.push(i);\n    }\n    return a;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_lucas;",
            "assert.deepEqual(candidate(9),76);",
            "assert.deepEqual(candidate(4),7);",
            "assert.deepEqual(candidate(3),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in an array.",
        "code": "function add_string(list_, string){\n    var new_list = [];\n    for(var i = 0; i < list_.length; i++){\n        new_list.push(list_[i]);\n    }\n    new_list.push(string);\n    return new_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_string;",
            "assert.deepEqual(candidate([1, 2, 3, 4], \"temp{0}\"),[\"temp1\", \"temp2\", \"temp3\", \"temp4\"]);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"),[\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]);",
            "assert.deepEqual(candidate([5, 6, 7, 8], \"string{0}\"),[\"string5\", \"string6\", \"string7\", \"string8\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "391",
        "title": "convert_list_dictionary",
        "text": "Write a function to convert more than one array to nested object.",
        "code": "function convert_list_dictionary(l1, l2, l3){\n    var result = {};\n    for(var i = 0; i < l1.length; i++){\n        result[l1[i]] = convert_list_dictionary(l2, l3, l1[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = convert_list_dictionary;",
            "assert.deepEqual(candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92]),[{\"S001\": {\"Adina Park\": 85}}, {\"S002\": {\"Leyton Marsh\": 98}}, {\"S003\": {\"Duncan Boyle\": 89}}, {\"S004\": {\"Saim Richards\": 92}}]);",
            "assert.deepEqual(candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400]),[{\"abc\": {\"python\": 100}}, {\"def\": {\"program\": 200}}, {\"ghi\": {\"language\": 300}}, {\"jkl\": {\"programs\": 400}}]);",
            "assert.deepEqual(candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40]),[{\"A1\": {\"java\": 10}}, {\"A2\": {\"C\": 20}}, {\"A3\": {\"C++\": 30}}, {\"A4\": {\"DBMS\": 40}}]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "function get_max_sum(n){\n    var max = 0;\n    for(var i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_max_sum;",
            "assert.deepEqual(candidate(60),106);",
            "assert.deepEqual(candidate(10),12);",
            "assert.deepEqual(candidate(2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the array with maximum length.",
        "code": "function max_length_list(input_list){\n    var max_length = 0;\n    for(var i = 0; i < input_list.length; i++){\n        if(input_list[i] > max_length){\n            max_length = input_list[i];\n        }\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_length_list;",
            "assert.deepEqual(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]]);",
            "assert.deepEqual(candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]),[5, [1, 2, 3, 4, 5]]);",
            "assert.deepEqual(candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]),[4, [6, 7, 8, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array contains no duplicates.",
        "code": "function check_distinct(test_tup){\n    var test_tup_len = test_tup.length;\n    var test_tup_i = 0;\n    var test_tup_j = 0;\n    var test_tup_k = 0;\n    var test_tup_l = 0;\n    var test_tup_m = 0;\n    var test_tup_n = 0;\n    var test_tup_o = 0;\n    var test_tup_p = 0;\n    var test_tup_q = 0;\n    var test_tup_r = 0;\n    var test_tup_s = 0;\n    var test_tup_t = 0;\n    var test_tup_u = 0;\n    var test_tup_v = 0;\n    var test_tup_w = 0;\n    var test_tup_x = 0;\n    var test_tup_y = 0;\n    var test_tup_z = 0;\n    var test_tup_w_i = 0;\n    var test_tup_w_j = 0;\n    var test_tup_w_k = 0;\n    var test_tup_w_l = 0;\n    var test_tup_w_m = 0;\n    var test_tup_w_n = 0;\n    var test_tup_w_o = 0;\n    var test_tup_w_p = 0;\n    var test_tup_w_q = 0;\n    var test_tup_w_r = 0;\n    var test_tup_w_s = 0;\n    var test_tup_w_t = 0;\n    var test_tup_w_u = 0;\n    var test_tup_w_v = 0;\n    var test_tup_w_w = 0;\n    var test_tup_w_x = 0;\n    var test_tup_w_y = 0;\n    var test_tup_w_z = 0;\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_distinct;",
            "assert.deepEqual(candidate([1, 4, 5, 6, 1, 4]),false);",
            "assert.deepEqual(candidate([1, 4, 5, 6]),true);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 6]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a jsthon function to find the first non-repeated character in a given string.",
        "code": "function first_non_repeating_character(str1){\n    var str2 = str1.split('');\n    var str3 = str2[0];\n    var str4 = str2[1];\n    var str5 = str2[2];\n    var str6 = str2[3];\n    var str7 = str2[4];\n    var str8 = str2[5];\n    var str9 = str2[6];\n    var str10 = str2[7];\n    var str11 = str2[8];\n    var str12 = str2[9];\n    var str13 = str2[10];\n    var str14 = str2[11];\n    var str15 = str2[12];\n    var str16 = str2[13];\n    var str17 = str2[14];\n    var str18 = str2[15];\n    var str19 = str2[16];\n    var str20 = str2[17];\n    var str21 = str2[18];\n    var str22 = str2[19];\n    var str23 = str2[20];\n    var str24 = str2[21];\n    var str25 = str2[22];\n    var str26 = str2[23];\n    var str27 = str2[24];\n    var str28 = str2[25];\n    var str29 = str2[26];\n    var str30 = str2[27];\n    var str31 = str2[28];\n    var str32 = str2[29];\n    var str33 = str2[30];\n    var str34 = str2[31];\n    var str35 = str2[32];\n    var str36 = str2[33];\n    var str37 = str2[34];\n    var str38 = str2[35];\n    var str39 = str2[36];\n    var str40 = str2[37];\n    var str41 = str2[38];\n    var str42 = str2[39];\n    var str43 = str2[40];\n    var str44 = str2[41];\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_non_repeating_character;",
            "assert.deepEqual(candidate(\"abcabc\"),undefined);",
            "assert.deepEqual(candidate(\"abc\"),\"a\");",
            "assert.deepEqual(candidate(\"ababc\"),\"c\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "function check_char(string){\n    var start = 0;\n    var end = string.length;\n    while(start < end){\n        if(string[start]!= string[end]){\n            return false;\n        }\n        start++;\n        end--;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_char;",
            "assert.deepEqual(candidate(\"abba\"),\"Valid\");",
            "assert.deepEqual(candidate(\"a\"),\"Valid\");",
            "assert.deepEqual(candidate(\"abcd\"),\"Invalid\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "function median_numbers(a, b, c){\n    var a_median = a.slice(0, a.length/2);\n    var b_median = b.slice(0, b.length/2);\n    var c_median = c.slice(0, c.length/2);\n    return a_median.length + b_median.length + c_median.length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = median_numbers;",
            "assert.deepEqual(candidate(25, 55, 65),55.0);",
            "assert.deepEqual(candidate(20, 10, 30),20.0);",
            "assert.deepEqual(candidate(15, 45, 75),45.0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given array.",
        "code": "function sum_of_digits(nums){\n    var sum = 0;\n    for(var i = 0; i < nums.length; i++){\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_of_digits;",
            "assert.deepEqual(candidate([10, 2, 56]),14);",
            "assert.deepEqual(candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]]),19);",
            "assert.deepEqual(candidate([10, 20, -4, 5, -70]),19);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given arrays.",
        "code": "function bitwise_xor(test_tup1, test_tup2){\n    var test_tup1_array = test_tup1.toArray();\n    var test_tup2_array = test_tup2.toArray();\n    var test_tup1_array_length = test_tup1_array.length;\n    var test_tup2_array_length = test_tup2_array.length;\n    var test_tup1_array_index = 0;\n    var test_tup2_array_index = 0;\n    var test_tup1_array_index_length = test_tup1_array_length;\n    var test_tup2_array_index_length = test_tup2_array_length;\n    var test_tup1_array_index_index = 0;\n    var test_tup2_array_index_index = 0;\n    var test_tup1_array_index_index_length = test_tup1_array_index_length;\n    var test_tup2_array_index_index_index = 0;\n    var test_tup1_array_index_index_index_length = test_tup1_array_index_index_length;\n    var test_tup2_array_index_index_index_index_length = test_tup2_array_index_index_index_length;\n    var test_tup1_array_index_index_index_index_length = test_tup1_array_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_length = test_tup2_array_index_index_index_index_length;\n    var test_tup1_array_index_index_index_index_index_length = test_tup1_array_index_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_index_length = test_tup2_array_index_index_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bitwise_xor;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[15, 6, 5, 10]);",
            "assert.deepEqual(candidate([11, 5, 7, 10], [6, 3, 4, 4]),[13, 6, 3, 14]);",
            "assert.deepEqual(candidate([12, 6, 8, 11], [7, 4, 5, 6]),[11, 2, 13, 13]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a jsthon function to identify non-prime numbers.",
        "code": "function is_not_prime(n){\n    if(n<2) return false;\n    if(n%2==0) return false;\n    for(var i=3;i<=n;i+=2) if(n%i==0) return false;\n    return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_not_prime;",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(35),true);",
            "assert.deepEqual(candidate(37),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique arrays in the given array.",
        "code": "function extract_freq(test_list){\n    var test_list_length = test_list.length;\n    var test_list_array = new Array(test_list_length);\n    for(var i = 0; i < test_list_length; i++){\n        test_list_array[i] = test_list[i];\n    }\n    return test_list_array.length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_freq;",
            "assert.deepEqual(candidate([[3, 4], [1, 2], [4, 3], [5, 6]]),3);",
            "assert.deepEqual(candidate([[4, 15], [2, 3], [5, 4], [6, 7]]),4);",
            "assert.deepEqual(candidate([[5, 16], [2, 3], [6, 5], [6, 9]]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "function add_nested_tuples(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i] + test_tup2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_nested_tuples;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a jsthon function to find the minimum of two numbers.",
        "code": "function minimum(a, b){\n    if(a < b)\n        return a;\n    else\n        return b;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = minimum;",
            "assert.deepEqual(candidate(1, 2),1);",
            "assert.deepEqual(candidate(-5, -4),-5);",
            "assert.deepEqual(candidate(0, 0),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within an array.",
        "code": "function check_tuplex(tuplex, tuple1){\n    var tuplex_array = [];\n    for(var i = 0; i < tuple1.length; i++){\n        tuplex_array.push(tuple1[i]);\n    }\n    return tuplex_array.indexOf(tuplex)!= -1;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_tuplex;",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"),true);",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"),false);",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a jsthon function to find whether the parity of a given number is odd.",
        "code": "function find_Parity(x){\n    var parity = 0;\n    for(var i = 0; i < x.length; i++){\n        parity = parity + (x[i] % 2);\n    }\n    return parity;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Parity;",
            "assert.deepEqual(candidate(12),false);",
            "assert.deepEqual(candidate(7),true);",
            "assert.deepEqual(candidate(10),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "function rearrange_bigger(n){\n    var result = n;\n    var i = 0;\n    while(i < result.length){\n        if(result[i] > result[i+1]){\n            result[i] = result[i+1];\n            result[i+1] = result[i];\n            i++;\n        }\n        else{\n            result[i] = result[i+1];\n            result[i+1] = result[i];\n            i++;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rearrange_bigger;",
            "assert.deepEqual(candidate(12),21);",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(102),120);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "function k_smallest_pairs(nums1, nums2, k){\n    var nums1_len = nums1.length;\n    var nums2_len = nums2.length;\n    var nums1_i = 0;\n    var nums2_i = 0;\n    var nums1_j = nums1_len - 1;\n    var nums2_j = nums2_len - 1;\n    var nums1_k = nums1_len;\n    var nums2_k = nums2_len;\n    var nums1_k_i = 0;\n    var nums2_k_i = 0;\n    while(nums1_i < nums1_len && nums2_i < nums2_len){\n        if(nums1[nums1_i] == nums2[nums2_i]){\n            nums1_i++;\n            nums2_i++;\n        }else{\n            if(nums1_i < nums1_len && nums2_i < nums2_len){\n                if(nums1[nums1_i] < nums2[nums2_i]){\n                    nums1_i++;\n                }else{\n                    nums2_i++;\n                }\n            }else{\n                nums1_i++;\n                nums2_i++;\n            }\n        }\n    }\n    while(nums1_i < nums1_len){\n        if(nums1[nums1_i] == nums2[nums2_i]){\n            nums1_i++;\n        }else{\n            nums1_i++;\n        }\n    }\n    while(nums2_i < nums2_len){\n        if(nums1[nums1_i] == nums2[nums2_i]){\n            nums2_i++;\n        }else{\n            nums2_i++;\n        }\n    }\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = k_smallest_pairs;",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of arrays within a given array.",
        "code": "function min_product_tuple(list1){\n    var min_product = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] < list1[i+1]){\n            min_product = list1[i];\n        }\n    }\n    return min_product;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_product_tuple;",
            "assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);",
            "assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);",
            "assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous array.",
        "code": "function min_val(listval){\n    var min = listval[0];\n    for(var i = 1; i < listval.length; i++){\n        if(listval[i] < min){\n            min = listval[i];\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_val;",
            "assert.deepEqual(candidate([\"Python\", 3, 2, 4, 5, \"version\"]),2);",
            "assert.deepEqual(candidate([\"Python\", 15, 20, 25]),15);",
            "assert.deepEqual(candidate([\"Python\", 30, 20, 40, 50, \"version\"]),20);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "function snake_to_camel(word){\n    var result = word.toLowerCase().replace(/[aeiou]/g, function(match){\n        return match.toUpperCase();\n    });\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = snake_to_camel;",
            "assert.deepEqual(candidate(\"android_tv\"),\"AndroidTv\");",
            "assert.deepEqual(candidate(\"google_pixel\"),\"GooglePixel\");",
            "assert.deepEqual(candidate(\"apple_watch\"),\"AppleWatch\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a jsthon function to remove odd numbers from a given array.",
        "code": "function remove_odd(l){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = l.length;\n    while(i < n){\n        if(l[i] % 2 == 1){\n            l[k] = l[i];\n            k++;\n        }\n        i++;\n    }\n    return l;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_odd;",
            "assert.deepEqual(candidate([1, 2, 3]),[2]);",
            "assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);",
            "assert.deepEqual(candidate([10, 20, 3]),[10, 20]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given array of arrays.",
        "code": "function extract_nth_element(list1, n){\n    var list2 = list1.slice(0, n);\n    return list2.join(\"\");\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_nth_element;",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0),[\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]);",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2),[99, 96, 94, 98]);",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1),[98, 97, 91, 94]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a jsthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "function overlapping(list1, list2){\n    var result = [];\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] in list2){\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = overlapping;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),false);",
            "assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),false);",
            "assert.deepEqual(candidate([1, 4, 5], [1, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a jsthon function to find a pair with highest product from a given array of integers.",
        "code": "function max_Product(arr){\n    var max = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_Product;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 7, 0, 8, 4]),[7, 8]);",
            "assert.deepEqual(candidate([0, -1, -2, -4, 5, 0, -6]),[-4, -6]);",
            "assert.deepEqual(candidate([1, 2, 3]),[2, 3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array of arrays.",
        "code": "function group_tuples(Input){\n    var output = [];\n    for(var i = 0; i < Input.length; i++){\n        var temp = [];\n        for(var j = 0; j < Input[i].length; j++){\n            temp.push(Input[i][j]);\n        }\n        output.push(temp);\n    }\n    return output;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = group_tuples;",
            "assert.deepEqual(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]),[[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]);",
            "assert.deepEqual(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]),[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]);",
            "assert.deepEqual(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]),[[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a jsthon function to find the element of an array having maximum length.",
        "code": "function Find_Max(lst){\n    var max = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Max;",
            "assert.deepEqual(candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]),[\"A\", \"B\", \"C\"]);",
            "assert.deepEqual(candidate([[1], [1, 2], [1, 2, 3]]),[1, 2, 3]);",
            "assert.deepEqual(candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]),[1, 5, 6, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.",
        "code": "function round_and_sum(list1){\n    var sum = 0;\n    for(var i = 0; i < list1.length; i++){\n        sum += list1[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = round_and_sum;",
            "assert.deepEqual(candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]),243);",
            "assert.deepEqual(candidate([5, 2, 9, 24.3, 29]),345);",
            "assert.deepEqual(candidate([25.0, 56.7, 89.2]),513);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a jsthon function to find the cube sum of first n even natural numbers.",
        "code": "function cube_Sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cube_Sum;",
            "assert.deepEqual(candidate(2),72);",
            "assert.deepEqual(candidate(3),288);",
            "assert.deepEqual(candidate(4),800);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of array by the delimiter.",
        "code": "function concatenate_tuple(test_tup){\n    var result = [];\n    for(var i = 0; i < test_tup.length; i++){\n        result.push(test_tup[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = concatenate_tuple;",
            "assert.deepEqual(candidate([\"ID\", \"is\", 4, \"UTS\"]),\"ID-is-4-UTS\");",
            "assert.deepEqual(candidate([\"QWE\", \"is\", 4, \"RTY\"]),\"QWE-is-4-RTY\");",
            "assert.deepEqual(candidate([\"ZEN\", \"is\", 4, \"OP\"]),\"ZEN-is-4-OP\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a jsthon function to find the average of cubes of first n natural numbers.",
        "code": "function find_Average_Of_Cube(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += Math.pow(i,i);\n    }\n    return sum/n;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Average_Of_Cube;",
            "assert.deepEqual(candidate(2),4.5);",
            "assert.deepEqual(candidate(3),12);",
            "assert.deepEqual(candidate(1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given array.",
        "code": "function extract_rear(test_tuple){\n    var test_array = test_tuple[0];\n    var test_array_length = test_array.length;\n    var test_array_index = test_array.indexOf(test_array[test_array_length-1]);\n    return test_array[test_array_index];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_rear;",
            "assert.deepEqual(candidate([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"]);",
            "assert.deepEqual(candidate([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"]);",
            "assert.deepEqual(candidate([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subarrays containing a particular element.",
        "code": "function count_element_in_list(list1, x){\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == x){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_element_in_list;",
            "assert.deepEqual(candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1),3);",
            "assert.deepEqual(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"),3);",
            "assert.deepEqual(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "function filter_oddnumbers(nums){\n    var oddnumbers = [];\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] % 2 == 0){\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = filter_oddnumbers;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);",
            "assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);",
            "assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "function change_date_format(dt){\n    var date = new Date(dt);\n    var date_format = date.getDate();\n    var date_format_str = date_format.toString();\n    var date_format_str_2 = date_format_str.substring(0, date_format_str.length - 1);\n    var date_format_str_3 = date_format_str_2.substring(0, date_format_str_2.length - 1);\n    var date_format_str_4 = date_format_str_3.substring(0, date_format_str_3.length - 1);\n    var date_format_str_5 = date_format_str_4.substring(0, date_format_str_4.length - 1);\n    var date_format_str_6 = date_format_str_5.substring(0, date_format_str_5.length - 1);\n    var date_format_str_7 = date_format_str_6.substring(0, date_format_str_6.length - 1);\n    var date_format_str_8 = date_format_str_7.substring(0, date_format_str_7.length - 1);\n    var date_format_str_9 = date_format_str_8.substring(0, date_format_str_8.length - 1);\n    var date_format_str_10 = date_format_str_9.substring(0, date_format_str_9.length - 1);\n    var date_format_str_11 = date_format_str_10.substring(0, date_format_str_10.length - 1);\n    var date_format_str_12 = date_format_str_11.substring(0, date_format_str_11.length - 1);\n    var date_format_str_13 = date_format_str_12.substring(0, date_format_str_12.length - 1);\n    var date_format_str_14\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = change_date_format;",
            "assert.deepEqual(candidate(\"2026-01-02\"),\"02-01-2026\");",
            "assert.deepEqual(candidate(\"2020-11-13\"),\"13-11-2020\");",
            "assert.deepEqual(candidate(\"2021-04-26\"),\"26-04-2021\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "function shell_sort(my_list){\n    var temp = [];\n    for(var i = 0; i < my_list.length; i++){\n        temp.push(my_list[i]);\n    }\n    var temp_copy = [];\n    for(var i = 0; i < temp.length; i++){\n        temp_copy.push(temp[i]);\n    }\n    var temp_copy_copy = [];\n    for(var i = 0; i < temp_copy.length; i++){\n        temp_copy_copy.push(temp_copy[i]);\n    }\n    var temp_copy_copy_copy = [];\n    for(var i = 0; i < temp_copy_copy.length; i++){\n        temp_copy_copy_copy.push(temp_copy_copy[i]);\n    }\n    var temp_copy_copy_copy_copy = [];\n    for(var i = 0; i < temp_copy_copy_copy.length; i++){\n        temp_copy_copy_copy_copy.push(temp_copy_copy_copy[i]);\n    }\n    var temp_copy_copy_copy_copy_copy = [];\n    for(var i = 0; i < temp_copy_copy_copy_copy.length; i++){\n        temp_copy_copy_copy_copy_copy.push(temp_copy_copy_copy_copy[i]);\n    }\n    var temp_copy_copy_copy_copy_copy_copy = [];\n    for(var i = 0; i < temp_copy_copy_copy_copy_copy.length; i++){\n        temp_copy_copy_copy_copy_copy_copy.push(temp_copy_copy_copy_copy_copy[i]);\n    }\n    var temp_copy_copy_copy_copy_copy_copy_copy = [];\n    for(var i = 0; i < temp_copy_copy_copy_copy_copy_copy.length; i++){\n        temp_copy_copy_copy_copy_copy_copy_copy.push(temp_copy_copy_copy_copy_copy\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = shell_sort;",
            "assert.deepEqual(candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]),[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);",
            "assert.deepEqual(candidate([24, 22, 39, 34, 87, 73, 68]),[22, 24, 34, 39, 68, 73, 87]);",
            "assert.deepEqual(candidate([32, 30, 16, 96, 82, 83, 74]),[16, 30, 32, 74, 82, 83, 96]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and arrays from the given two arrays.",
        "code": "function and_tuples(test_tup1, test_tup2){\n    var test_tup1_arr = test_tup1.toArray();\n    var test_tup2_arr = test_tup2.toArray();\n    var test_tup1_arr_arr = test_tup1_arr.toArray();\n    var test_tup2_arr_arr = test_tup2_arr.toArray();\n    var test_tup1_arr_arr_arr = test_tup1_arr_arr.toArray();\n    var test_tup2_arr_arr_arr = test_tup2_arr_arr.toArray();\n    var test_tup1_arr_arr_arr_arr = test_tup1_arr_arr_arr.toArray();\n    var test_tup2_arr_arr_arr_arr_arr = test_tup2_arr_arr_arr_arr.toArray();\n    var test_tup1_arr_arr_arr_arr_arr = test_tup1_arr_arr_arr_arr_arr.toArray();\n    var test_tup2_arr_arr_arr_arr_arr_arr = test_tup2_arr_arr_arr_arr_arr_arr.toArray();\n    var test_tup1_arr_arr_arr_arr_arr_arr = test_tup1_arr_arr_arr_arr_arr_arr_arr.toArray();\n    var test_tup2_arr_arr_arr_arr_arr_arr_arr = test_tup2_arr_arr_arr_arr_arr_arr_arr_arr.toArray();\n    var test_tup1_arr_arr_arr_arr_arr_arr_arr_arr = test_tup1_arr_arr_arr_arr_arr_arr_arr_arr_arr.toArray();\n    var test_tup2_arr_arr_arr_arr_arr_arr_arr_arr_arr = test_tup2_arr_arr_arr_arr\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = and_tuples;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[0, 0, 2, 1]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [5, 6, 7, 8]),[1, 2, 3, 0]);",
            "assert.deepEqual(candidate([8, 9, 11, 12], [7, 13, 14, 17]),[0, 9, 10, 0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "function parabola_directrix(a, b, c){\n    var x = a;\n    var y = b;\n    var z = c;\n    var x2 = x*x;\n    var y2 = y*y;\n    var z2 = z*z;\n    var x3 = x2*x;\n    var y3 = y2*y;\n    var z3 = z2*z;\n    var x4 = x3*x;\n    var y4 = y3*y;\n    var z4 = z3*z;\n    var x5 = x4*x;\n    var y5 = y4*y;\n    var z5 = z4*z;\n    var x6 = x5*x;\n    var y6 = y5*y;\n    var z6 = z5*z;\n    var x7 = x6*x;\n    var y7 = y6*y;\n    var z7 = z6*z;\n    var x8 = x7*x;\n    var y8 = y7*y;\n    var z8 = z7*z;\n    var x9 = x8*x;\n    var y9 = y8*y;\n    var z9 = z8*z;\n    var x10 = x9*x;\n    var y10 = y9*y;\n    var z10 = z9*z;\n    var x11 = x10*x;\n    var y11 = y10*y;\n    var z11 = z10*z;\n    var x12 = x11*x;\n    var y12 = y11*y;\n    var z12 = z11*z;\n    var x13 = x12*x;\n    var y13 = y12*y;\n    var z13 = z12*z;\n    var x14 = x13*x;\n    var y14 = y13*y;\n    var z14 = z13*z;\n    var x15 = x14*x;\n    var y15 = y14*y;\n    var z15 = z14*z;\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = parabola_directrix;",
            "assert.deepEqual(candidate(5, 3, 2),-198);",
            "assert.deepEqual(candidate(9, 8, 4),-2336);",
            "assert.deepEqual(candidate(2, 4, 6),-130);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two arrays and returns true if they have at least one common element.",
        "code": "function common_element(list1, list2){\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] == list2[i]){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = common_element;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "function median_trapezium(base1, base2, height){\n    var base1_length = base1.length;\n    var base2_length = base2.length;\n    var base1_median = base1.median();\n    var base2_median = base2.median();\n    var base1_median_length = base1_length - base1_median_length;\n    var base2_median_length = base2_length - base2_median_length;\n    var base1_median_length_sum = base1_median_length * base1_length;\n    var base2_median_length_sum = base2_median_length * base2_length;\n    var base1_median_length_sum_sum = base1_median_length_sum * base1_length;\n    var base2_median_length_sum_sum = base2_median_length_sum * base2_length;\n    var base1_median_length_sum_sum_sum = base1_median_length_sum_sum * base1_length;\n    var base2_median_length_sum_sum_sum = base2_median_length_sum_sum * base2_length;\n    var base1_median_length_sum_sum_sum = base1_median_length_sum_sum_sum * base1_length;\n    var base2_median_length_sum_sum_sum = base2_median_length_sum_sum_sum * base2_length;\n    var base1_median_length_sum_sum_sum = base1_median_length_sum_sum_sum * base1_length;\n    var base2_median_length_sum_sum_sum = base2_median_length_sum_sum_sum * base2_length;\n    var base1_median_length_sum_sum_sum = base1_median_length_sum_sum_sum * base1_length;\n    var base2_median_length_sum_sum_sum =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = median_trapezium;",
            "assert.deepEqual(candidate(15, 25, 35),20);",
            "assert.deepEqual(candidate(10, 20, 30),15);",
            "assert.deepEqual(candidate(6, 9, 4),7.5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "function check_greater(arr, number){\n    var result = true;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > number){\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_greater;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], 4),false);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 6], 8),true);",
            "assert.deepEqual(candidate([9, 7, 4, 8, 6, 1], 11),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "function text_match_one(text){\n    var match = text.match(/^(.*?)\\s*\\(.*?\\)\\s*$/);\n    if(match){\n        return match[1];\n    }\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_one;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a jsthon function to find the last digit of a given number.",
        "code": "function last_Digit(n){\n    var d = n % 10;\n    return d == 1? 0 : d == 2? 1 : d == 3? 2 : d == 4? 3 : d == 5? 4 : d == 6? 5 : d == 7? 6 : d == 8? 7 : d == 9? 8 : d == 0? 9 : d == 1? 10 : d == 2? 11 : d == 3? 12 : d == 4? 13 : d == 5? 14 : d == 6? 15 : d == 7? 16 : d == 8? 17 : d == 9? 18 : d == 0? 19 : d == 1? 20 : d == 2? 21 : d == 3? 22 : d == 4? 23 : d == 5? 24 : d == 6? 25 : d == 7? 26 : d == 8? 27 : d == 9? 28 : d == 0? 29 : d == 1? 30 : d == 2? 31 : d == 3? 32 : d == 4? 33 : d == 5? 34 : d == 6? 35 : d == 7? 36 : d == 8? 37 : d == 9? 38 : d == 0? 39 : d == 1? 40 : d == 2? 41 : d == 3? 42 : d == 4? 43 : d == 5? 44 : d == 6? 45 : d == 7? 46 : d == 8? 47 : d == 9? 48 : d == 0? 49 : d == 1? 50 : d == 2? 51 : d == 3? 52 : d == 4? 53 : d == 5? 54 : d == 6? 55 : d == 7? 56 : d == 8? 57 : d == 9? 58 : d == 0? 59 : d == 1? 60 : d == 2? 61 : d == 3? 62 : d == 4? 63 : d == 5? 64 : d == 6? 65 : d == 7? 66 : d == 8? 67 : d == 9? 68 : d == 0? 69 : d == 1? 70 : d == 2? 71 : d == 3? 72 : d == 4? 73 : d == 5? 74 : d == 6? 75 : d == 7? 76 : d == 8? 77 : d == 9? 78 :\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last_Digit;",
            "assert.deepEqual(candidate(123),3);",
            "assert.deepEqual(candidate(25),5);",
            "assert.deepEqual(candidate(30),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a jsthon function to return the negative numbers in an array.",
        "code": "function neg_nos(list1){\n    var list2 = list1.slice(0);\n    var list3 = list1.slice(0);\n    var list4 = list1.slice(0);\n    var list5 = list1.slice(0);\n    var list6 = list1.slice(0);\n    var list7 = list1.slice(0);\n    var list8 = list1.slice(0);\n    var list9 = list1.slice(0);\n    var list10 = list1.slice(0);\n    var list11 = list1.slice(0);\n    var list12 = list1.slice(0);\n    var list13 = list1.slice(0);\n    var list14 = list1.slice(0);\n    var list15 = list1.slice(0);\n    var list16 = list1.slice(0);\n    var list17 = list1.slice(0);\n    var list18 = list1.slice(0);\n    var list19 = list1.slice(0);\n    var list20 = list1.slice(0);\n    var list21 = list1.slice(0);\n    var list22 = list1.slice(0);\n    var list23 = list1.slice(0);\n    var list24 = list1.slice(0);\n    var list25 = list1.slice(0);\n    var list26 = list1.slice(0);\n    var list27 = list1.slice(0);\n    var list28 = list1.slice(0);\n    var list29 = list1.slice(0);\n    var list30 = list1.slice(0);\n    var list31 = list1.slice(0);\n    var list32 = list1.slice(0);\n    var list33 = list1.slice(0);\n    var list34 = list1.slice(0);\n    var list35 = list1.slice(0);\n    var list36 = list1.slice(0);\n    var list37 = list1.slice(0);\n    var list38 = list1.slice(0);\n    var list39 =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = neg_nos;",
            "assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);",
            "assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);",
            "assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "function remove_odd(str1){\n    var str2 = str1.split(\"\");\n    var str3 = str2.join(\"\");\n    return str3.replace(/\\d/g, \"\");\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_odd;",
            "assert.deepEqual(candidate(\"python\"),\"yhn\");",
            "assert.deepEqual(candidate(\"program\"),\"rga\");",
            "assert.deepEqual(candidate(\"language\"),\"agae\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional array pairs.",
        "code": "function count_bidirectional(test_list){\n    var test_list_length = test_list.length;\n    var test_list_i = 0;\n    var test_list_j = 0;\n    var test_list_k = 0;\n    var test_list_l = 0;\n    var test_list_m = 0;\n    var test_list_n = 0;\n    var test_list_o = 0;\n    var test_list_p = 0;\n    var test_list_q = 0;\n    var test_list_r = 0;\n    var test_list_s = 0;\n    var test_list_t = 0;\n    var test_list_u = 0;\n    var test_list_v = 0;\n    var test_list_w = 0;\n    var test_list_x = 0;\n    var test_list_y = 0;\n    var test_list_z = 0;\n    var test_list_a = 0;\n    var test_list_b = 0;\n    var test_list_c = 0;\n    var test_list_d = 0;\n    var test_list_e = 0;\n    var test_list_f = 0;\n    var test_list_g = 0;\n    var test_list_h = 0;\n    var test_list_i_1 = 0;\n    var test_list_j_1 = 0;\n    var test_list_k_1 = 0;\n    var test_list_l_1 = 0;\n    var test_list_m_1 = 0;\n    var test_list_n_1 = 0;\n    var test_list_o_1 = 0;\n    var test_list_p_1 = 0;\n    var test_list_q_1 = 0;\n    var test_list_r_1 = 0;\n    var test_list_s_1 = 0;\n    var test_list_t_1 = 0;\n    var test_list_u_1 = 0;\n    var test_list_v_1 = 0;\n    var test_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_bidirectional;",
            "assert.deepEqual(candidate([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]),3);",
            "assert.deepEqual(candidate([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]),2);",
            "assert.deepEqual(candidate([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array of multiple integers into a single integer.",
        "code": "function multiple_to_single(L){\n    var result = [];\n    for(var i = 0; i < L.length; i++){\n        result.push(L[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiple_to_single;",
            "assert.deepEqual(candidate([11, 33, 50]),113350);",
            "assert.deepEqual(candidate([-1, 2, 3, 4, 5, 6]),-123456);",
            "assert.deepEqual(candidate([10, 15, 20, 25]),10152025);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "function find_adverb_position(text){\n    var adverbs = text.split(\" \");\n    var adverb_positions = [];\n    for(var i = 0; i < adverbs.length; i++){\n        var adverb = adverbs[i];\n        var adverb_pos = adverb.indexOf(\" \");\n        if(adverb_pos > -1){\n            adverb_positions.push(adverb_pos);\n        }\n    }\n    return adverb_positions;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_adverb_position;",
            "assert.deepEqual(candidate(\"clearly!! we can see the sky\"),[0, 7, \"clearly\"]);",
            "assert.deepEqual(candidate(\"seriously!! there are many roses\"),[0, 9, \"seriously\"]);",
            "assert.deepEqual(candidate(\"unfortunately!! sita is going to home\"),[0, 13, \"unfortunately\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "function surfacearea_cube(l){\n    var x = l.x;\n    var y = l.y;\n    var z = l.z;\n    var a = Math.sqrt(x*x + y*y + z*z);\n    var b = Math.sqrt(x*x + y*y + z*z);\n    var c = Math.sqrt(x*x + y*y + z*z);\n    var d = Math.sqrt(x*x + y*y + z*z);\n    var e = Math.sqrt(x*x + y*y + z*z);\n    var f = Math.sqrt(x*x + y*y + z*z);\n    var g = Math.sqrt(x*x + y*y + z*z);\n    var h = Math.sqrt(x*x + y*y + z*z);\n    var i = Math.sqrt(x*x + y*y + z*z);\n    var j = Math.sqrt(x*x + y*y + z*z);\n    var k = Math.sqrt(x*x + y*y + z*z);\n    var l = Math.sqrt(x*x + y*y + z*z);\n    var m = Math.sqrt(x*x + y*y + z*z);\n    var n = Math.sqrt(x*x + y*y + z*z);\n    var o = Math.sqrt(x*x + y*y + z*z);\n    var p = Math.sqrt(x*x + y*y + z*z);\n    var q = Math.sqrt(x*x + y*y + z*z);\n    var r = Math.sqrt(x*x + y*y + z*z);\n    var s = Math.sqrt(x*x + y*y + z*z);\n    var t = Math.sqrt(x*x + y*y + z*z);\n    var u = Math.sqrt(x*x + y*y + z\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surfacearea_cube;",
            "assert.deepEqual(candidate(5),150);",
            "assert.deepEqual(candidate(3),54);",
            "assert.deepEqual(candidate(10),600);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "function positive_count(nums){\n    var count = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = positive_count;",
            "assert.deepEqual(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]),0.54);",
            "assert.deepEqual(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),0.69);",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]),0.56);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a jsthon function to find the largest negative number from the given array.",
        "code": "function largest_neg(list1){\n    var list2 = list1.slice();\n    var max = list2[0];\n    for(var i = 1; i < list2.length; i++){\n        if(list2[i] > max){\n            max = list2[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = largest_neg;",
            "assert.deepEqual(candidate([1, 2, 3, -4, -6]),-6);",
            "assert.deepEqual(candidate([1, 2, 3, -8, -9]),-9);",
            "assert.deepEqual(candidate([1, 2, 3, 4, -1]),-1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array by k in the given arrays.",
        "code": "function trim_tuple(test_list, K){\n    var test_list_length = test_list.length;\n    var test_list_k = test_list.length;\n    var test_list_k_length = test_list_k.length;\n    var test_list_k_length_length = test_list_k_length.length;\n    var test_list_k_length_length_length = test_list_k_length_length.length;\n    var test_list_k_length_length_length_length = test_list_k_length_length_length.length;\n    var test_list_k_length_length_length_length_length = test_list_k_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length = test_list_k_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length = test_list_k_length_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length_length = test_list_k_length_length_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length_length_length = test_list_k_length_length_length_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length_length_length_length = test_list_k_length_length_length_length_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length_length_length_length_length = test_list_k_length_length_length_length_length_length_length_length_length_length.length;\n    var test_list_k_length_length_length_length_length_length_length_length_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = trim_tuple;",
            "assert.deepEqual(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),[[2], [9], [2], [2]]);",
            "assert.deepEqual(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]);",
            "assert.deepEqual(candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),[[8, 4], [8, 12], [1, 7], [6, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "function index_multiplication(test_tup1, test_tup2){\n    var test_tup1_array = test_tup1.toArray();\n    var test_tup2_array = test_tup2.toArray();\n    var test_tup1_array_length = test_tup1_array.length;\n    var test_tup2_array_length = test_tup2_array.length;\n    var test_tup1_array_index = 0;\n    var test_tup2_array_index = 0;\n    var test_tup1_array_index_length = test_tup1_array_length;\n    var test_tup2_array_index_length = test_tup2_array_length;\n    var test_tup1_array_index_index = 0;\n    var test_tup2_array_index_index = 0;\n    var test_tup1_array_index_index_length = test_tup1_array_index_length;\n    var test_tup2_array_index_index_index = 0;\n    var test_tup1_array_index_index_index_length = test_tup1_array_index_index_length;\n    var test_tup2_array_index_index_index_index_length = test_tup2_array_index_index_index_length;\n    var test_tup1_array_index_index_index_index_length = test_tup1_array_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_length = test_tup2_array_index_index_index_index_length;\n    var test_tup1_array_index_index_index_index_index_length = test_tup1_array_index_index_index_index_length;\n    var test_tup2_array_index_index_index_index_index_index_length = test_tup2_array_index_index_index\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = index_multiplication;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 21], [12, 45], [2, 9], [7, 30]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[14, 32], [20, 60], [6, 20], [16, 44]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[24, 45], [30, 77], [12, 33], [27, 60]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a jsthon function to count the occurence of all elements of array in an array.",
        "code": "function count_Occurrence(tup, lst){\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(tup[lst[i]] == 1){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Occurrence;",
            "assert.deepEqual(candidate([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]),6);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [1, 2]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array.",
        "code": "function cube_nums(nums){\n    var cube = [];\n    for(var i = 0; i < nums.length; i++){\n        cube.push(nums[i]);\n    }\n    return cube;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cube_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);",
            "assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);",
            "assert.deepEqual(candidate([12, 15]),[1728, 3375]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "function cal_sum(n){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cal_sum;",
            "assert.deepEqual(candidate(9),49);",
            "assert.deepEqual(candidate(10),66);",
            "assert.deepEqual(candidate(11),88);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array of string values.",
        "code": "function extract_string(str, l){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = str.length;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n    var i\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_string;",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "function remove_whitespaces(text1){\n    var text2 = text1.replace(/\\s+/g, '');\n    return text2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_whitespaces;",
            "assert.deepEqual(candidate(\" Google    Flutter \"),\"GoogleFlutter\");",
            "assert.deepEqual(candidate(\" Google    Dart \"),\"GoogleDart\");",
            "assert.deepEqual(candidate(\" iOS    Swift \"),\"iOSSwift\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "function loss_amount(actual_cost, sale_amount){\n    return actual_cost - sale_amount;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = loss_amount;",
            "assert.deepEqual(candidate(1500, 1200),0);",
            "assert.deepEqual(candidate(100, 200),100);",
            "assert.deepEqual(candidate(2000, 5000),3000);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a jsthon function to find the sum of even factors of a number.",
        "code": "function sumofFactors(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sumofFactors;",
            "assert.deepEqual(candidate(18),26);",
            "assert.deepEqual(candidate(30),48);",
            "assert.deepEqual(candidate(6),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "function text_match_wordz(text){\n    var match = text.match(/^(.*)\\z$/);\n    if(match){\n        return match[1];\n    }\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_wordz;",
            "assert.deepEqual(candidate(\"pythonz.\"),true);",
            "assert.deepEqual(candidate(\"xyz.\"),true);",
            "assert.deepEqual(candidate(\"  lang  .\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "function check_monthnumb_number(monthnum2){\n    var monthnum = monthnum2.toString();\n    var monthnum_array = monthnum.split(\"-\");\n    var monthnum_array_length = monthnum_array.length;\n    var monthnum_array_index = 0;\n    var monthnum_array_index_end = monthnum_array_length - 1;\n    var monthnum_array_index_start = 0;\n    var monthnum_array_index_end = 0;\n    var monthnum_array_index_start_end = 0;\n    var monthnum_array_index_start_end_end = 0;\n    var monthnum_array_index_start_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end_end_end_end_end_end = 0;\n    var monthnum_array_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_monthnumb_number;",
            "assert.deepEqual(candidate(5),true);",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(6),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array of string values.",
        "code": "function reverse_string_list(stringlist){\n    var reversed_string_list = [];\n    for(var i = 0; i < stringlist.length; i++){\n        reversed_string_list.push(stringlist[i].substring(0, stringlist[i].length - 1));\n    }\n    return reversed_string_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_string_list;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]),[\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);",
            "assert.deepEqual(candidate([\"john\", \"amal\", \"joel\", \"george\"]),[\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);",
            "assert.deepEqual(candidate([\"jack\", \"john\", \"mary\"]),[\"kcaj\", \"nhoj\", \"yram\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a jsthon function to find the subarray having minimum length.",
        "code": "function Find_Min(lst){\n    var min = lst[0];\n    for(var i = 1; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Min;",
            "assert.deepEqual(candidate([[1], [1, 2], [1, 2, 3]]),[1]);",
            "assert.deepEqual(candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]),[1, 1]);",
            "assert.deepEqual(candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]),[\"x\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "function rectangle_area(l, b){\n    var x = l.x;\n    var y = l.y;\n    var w = l.width;\n    var h = l.height;\n    var x1 = b.x;\n    var y1 = b.y;\n    var x2 = x1 + w;\n    var y2 = y1 + h;\n    return x1 - x2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rectangle_area;",
            "assert.deepEqual(candidate(10, 20),200);",
            "assert.deepEqual(candidate(10, 5),50);",
            "assert.deepEqual(candidate(4, 2),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "function remove_uppercase(str1){\n    var str2 = str1.toLowerCase();\n    var str3 = str2.replace(/[A-Z]/g, '');\n    return str3;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_uppercase;",
            "assert.deepEqual(candidate(\"cAstyoUrFavoRitETVshoWs\"),\"cstyoravoitshos\");",
            "assert.deepEqual(candidate(\"wAtchTheinTernEtrAdIo\"),\"wtchheinerntrdo\");",
            "assert.deepEqual(candidate(\"VoicESeaRchAndreComMendaTionS\"),\"oiceachndreomendaion\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a jsthon function to get the first element of each subarray.",
        "code": "function Extract(lst){\n    var result = [];\n    for(var i = 0; i < lst.length; i++){\n        result.push(lst[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Extract;",
            "assert.deepEqual(candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]),[1, 3, 6]);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5]]),[1, 4]);",
            "assert.deepEqual(candidate([[9, 8, 1], [1, 2]]),[9, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a jsthon function to count the upper case characters in a given string.",
        "code": "function upper_ctr(str){\n    var str_upper = str.toUpperCase();\n    var str_lower = str.toLowerCase();\n    var str_upper_lower = str_upper.toLowerCase();\n    var str_upper_lower_lower = str_upper_lower.toLowerCase();\n    return str_upper_lower_lower;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = upper_ctr;",
            "assert.deepEqual(candidate(\"PYthon\"),1);",
            "assert.deepEqual(candidate(\"BigData\"),1);",
            "assert.deepEqual(candidate(\"program\"),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given array.",
        "code": "function combinations_list(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        list2.push(list1[i]);\n    }\n    return list2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = combinations_list;",
            "assert.deepEqual(candidate([\"orange\", \"red\", \"green\", \"blue\"]),[[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]]);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]]);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"black\", \"orange\"]),[[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "function max_subarray_product(arr){\n    var max_product = 0;\n    for(var i = 0; i < arr.length; i++){\n        max_product = Math.max(max_product, arr[i]);\n    }\n    return max_product;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_subarray_product;",
            "assert.deepEqual(candidate([1, -2, -3, 0, 7, -8, -2]),112);",
            "assert.deepEqual(candidate([6, -3, -10, 0, 2]),180);",
            "assert.deepEqual(candidate([-2, -40, 0, -2, -3]),80);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in an object.",
        "code": "function check_value(dict, n){\n    var i = 0;\n    for(i = 0; i < n; i++){\n        if(dict[i]!= dict[i]){\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_value;",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10),false);",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12),true);",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given object.",
        "code": "function drop_empty(dict1){\n    var result = {};\n    for(var key in dict1){\n        if(dict1[key] == undefined){\n            result[key] = undefined;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = drop_empty;",
            "assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": \"Green\", \"c3\": undefined}),{\"c1\": \"Red\", \"c2\": \"Green\"});",
            "assert.deepEqual(candidate({\"c1\": \"Red\", \"c2\": undefined, \"c3\": undefined}),{\"c1\": \"Red\"});",
            "assert.deepEqual(candidate({\"c1\": undefined, \"c2\": \"Green\", \"c3\": undefined}),{\"c2\": \"Green\"});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "function max_product(arr){\n    var max = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_product;",
            "assert.deepEqual(candidate([3, 100, 4, 5, 150, 6]),3000);",
            "assert.deepEqual(candidate([4, 42, 55, 68, 80]),50265600);",
            "assert.deepEqual(candidate([10, 22, 9, 33, 21, 50, 41, 60]),2460);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given array.",
        "code": "function add_pairwise(test_tup){\n    var test_tup_array = test_tup.split(\" \");\n    var test_tup_array_length = test_tup_array.length;\n    var test_tup_array_index = 0;\n    var test_tup_array_index_max = test_tup_array_length - 1;\n    var test_tup_array_index_min = 0;\n    var test_tup_array_index_min_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max = test_tup_array_length - 1;\n    var test_tup_array_index_min_max_max_max =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_pairwise;",
            "assert.deepEqual(candidate([1, 5, 7, 8, 10]),[6, 12, 15, 18]);",
            "assert.deepEqual(candidate([2, 6, 8, 9, 11]),[8, 14, 17, 20]);",
            "assert.deepEqual(candidate([3, 7, 9, 10, 12]),[10, 16, 19, 22]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a jsthon function to find the product of the array multiplication modulo n.",
        "code": "function find_remainder(arr, n){\n    var result = [];\n    for(var i = 0; i < arr.length; i++){\n        result.push(arr[i] % n);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_remainder;",
            "assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);",
            "assert.deepEqual(candidate([1, 1, 1], 1),0);",
            "assert.deepEqual(candidate([1, 2, 1], 2),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a jsthon function to check whether the given array contains consecutive numbers or not.",
        "code": "function check_Consecutive(l){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var n = l.length;\n    var m = 0;\n    var m_i = 0;\n    var m_j = 0;\n    var m_k = 0;\n    var m_n = 0;\n    var m_m = 0;\n    var m_o = 0;\n    var m_p = 0;\n    var m_q = 0;\n    var m_r = 0;\n    var m_s = 0;\n    var m_t = 0;\n    var m_u = 0;\n    var m_v = 0;\n    var m_w = 0;\n    var m_x = 0;\n    var m_y = 0;\n    var m_z = 0;\n    var m_a = 0;\n    var m_b = 0;\n    var m_c = 0;\n    var m_d = 0;\n    var m_e = 0;\n    var m_f = 0;\n    var m_g = 0;\n    var m_h = 0;\n    var m_i_i = 0;\n    var m_i_j = 0;\n    var m_i_k = 0;\n    var m_i_n = 0;\n    var m_i_m = 0;\n    var m_i_o = 0;\n    var m_i_p = 0;\n    var m_i_q = 0;\n    var m_i_r = 0;\n    var m_i_s = 0;\n    var m_i_t = 0;\n    var m_i_u = 0;\n    var m_i_v = 0;\n    var m_i_w = 0;\n    var m_i_x = 0;\n    var m_i_y = 0;\n    var m_i_z = 0;\n    var m_i_a = 0;\n    var m_i_b = 0;\n    var m_i_c = 0;\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_Consecutive;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);",
            "assert.deepEqual(candidate([1, 2, 1]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "function replace_char(str1, ch, newch){\n    var str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    return str2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_char;",
            "assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");",
            "assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");",
            "assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort an object by value.",
        "code": "function sort_counter(dict1){\n    var key, value, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, len9, len10, len11, len12, len13, len14, len15, len16, len17, len18, len19, len20, len21, len22, len23, len24, len25, len26, len27, len28, len29, len30, len31, len32, len33, len34, len35, len36, len37, len38, len39, len40, len41, len42, len43, len44, len45, len46, len47, len48, len49, len50, len51, len52, len53, len54, len55, len56, len57, len58, len59, len60, len61, len62, len63, len64, len65, len66, len67, len68, len69, len70, len71, len72, len73, len74, len75, len76, len77, len78, len79, len80, len81, len82, len83, len84, len85, len86, len87, len88, len89, len90, len91, len92, len93, len94, len95, len96, len97, len98, len99, len100, len101, len102, len103, len104, len105, len106, len107, len108, len109, len110, len111, len112, len113, len114, len115, len116, len117, len118, len119, len120, len121, len122, len123, len124, len125, len126, len127, len128, len129, len130, len131, len132, len133, len134, len135, len136, len137, len138, len139, len140, len141, len142, len143, len144, len145, len146, len147, len148, len149, len150, len151, len152, len153, len154, len155, len156, len157, len158, len\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_counter;",
            "assert.deepEqual(candidate({\"Math\": 81, \"Physics\": 83, \"Chemistry\": 87}),[[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]]);",
            "assert.deepEqual(candidate({\"Math\": 400, \"Physics\": 300, \"Chemistry\": 250}),[[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]]);",
            "assert.deepEqual(candidate({\"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250}),[[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a jsthon function to find the sum of the largest and smallest value in a given array.",
        "code": "function big_sum(nums){\n    var sum = 0;\n    for(var i = 0; i < nums.length; i++){\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = big_sum;",
            "assert.deepEqual(candidate([1, 2, 3]),4);",
            "assert.deepEqual(candidate([-1, 2, 3, 4]),3);",
            "assert.deepEqual(candidate([2, 3, 6]),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a jsthon function to convert the given string to lower case.",
        "code": "function is_lower(string){\n    return string.toLowerCase()\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_lower;",
            "assert.deepEqual(candidate(\"InValid\"),\"invalid\");",
            "assert.deepEqual(candidate(\"TruE\"),\"true\");",
            "assert.deepEqual(candidate(\"SenTenCE\"),\"sentence\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "function remove_lowercase(str1){\n    var str2 = str1.toLowerCase();\n    return str2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_lowercase;",
            "assert.deepEqual(candidate(\"PYTHon\"),\"PYTH\");",
            "assert.deepEqual(candidate(\"FInD\"),\"FID\");",
            "assert.deepEqual(candidate(\"STRinG\"),\"STRG\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a jsthon function to find the first digit of a given number.",
        "code": "function first_Digit(n){\n    var i = 0;\n    var j = n.length;\n    while(i < j){\n        if(n[i] == '0'){\n            i++;\n        }\n        else{\n            return i;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_Digit;",
            "assert.deepEqual(candidate(123),1);",
            "assert.deepEqual(candidate(456),4);",
            "assert.deepEqual(candidate(12),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "function heap_queue_largest(nums, n){\n    var heap = [];\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > nums[i+1]){\n            heap.push(nums[i]);\n            heap.push(nums[i+1]);\n        }\n    }\n    return heap;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = heap_queue_largest;",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a jsthon function which takes an array of integers and only returns the odd ones.",
        "code": "function Split(list){\n    var odd = 0;\n    var even = 0;\n    for(var i = 0; i < list.length; i++){\n        if(list[i] % 2 == 1){\n            odd = odd + 1;\n        }\n        else{\n            even = even + 1;\n        }\n    }\n    return [odd, even];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Split;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);",
            "assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);",
            "assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a jsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "function difference(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = difference;",
            "assert.deepEqual(candidate(3),30);",
            "assert.deepEqual(candidate(5),210);",
            "assert.deepEqual(candidate(2),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a jsthon function to count the number of pairs whose xor value is odd.",
        "code": "function find_Odd_Pair(A, N){\n    var odd = 0;\n    for(var i = 0; i < N; i++){\n        if(A[i] % 2 == 1){\n            odd++;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Odd_Pair;",
            "assert.deepEqual(candidate([5, 4, 7, 2, 1], 5),6);",
            "assert.deepEqual(candidate([7, 2, 8, 1, 0, 5, 11], 7),12);",
            "assert.deepEqual(candidate([1, 2, 3], 3),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "function toggle_string(string){\n    var str = string.toLowerCase();\n    var str_arr = str.split(\"\");\n    for(var i = 0; i < str_arr.length; i++){\n        str_arr[i] = str_arr[i].toLowerCase();\n    }\n    return str_arr.join(\"\");\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = toggle_string;",
            "assert.deepEqual(candidate(\"Python\"),\"pYTHON\");",
            "assert.deepEqual(candidate(\"Pangram\"),\"pANGRAM\");",
            "assert.deepEqual(candidate(\"LIttLE\"),\"liTTle\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a jsthon function to find the sum of the per-digit difference between two integers.",
        "code": "function digit_distance_nums(n1, n2){\n    var sum = 0;\n    for(var i = 0; i < n1; i++){\n        sum += n2 - n1 + i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = digit_distance_nums;",
            "assert.deepEqual(candidate(1, 2),1);",
            "assert.deepEqual(candidate(23, 56),6);",
            "assert.deepEqual(candidate(123, 256),7);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "function max_sub_array_sum(a, size){\n    var max = 0;\n    for(var i = 0; i < size; i++){\n        if(a[i] > max){\n            max = a[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sub_array_sum;",
            "assert.deepEqual(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8),7);",
            "assert.deepEqual(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8),8);",
            "assert.deepEqual(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "function union_elements(test_tup1, test_tup2){\n    var result = [];\n    for(var i = 0; i < test_tup1.length; i++){\n        result.push(test_tup1[i]);\n    }\n    for(var i = 0; i < test_tup2.length; i++){\n        result.push(test_tup2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = union_elements;",
            "assert.deepEqual(candidate([3, 4, 5, 6], [5, 7, 4, 10]),[3, 4, 5, 6, 7, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [3, 4, 5, 6]),[1, 2, 3, 4, 5, 6]);",
            "assert.deepEqual(candidate([11, 12, 13, 14], [13, 15, 16, 17]),[11, 12, 13, 14, 15, 16, 17]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a jsthon function to find the length of the longest subarrays.",
        "code": "function Find_Max_Length(lst){\n    var max = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Max_Length;",
            "assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);",
            "assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);",
            "assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "function extract_values(text){\n    var values = text.split(/\\s+/);\n    return values.map(function(value){\n        return value.trim();\n    });\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_values;",
            "assert.deepEqual(candidate(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"]);",
            "assert.deepEqual(candidate(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"]);",
            "assert.deepEqual(candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a jsthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "function count_Pairs(arr, n){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]!= arr[i+1]){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Pairs;",
            "assert.deepEqual(candidate([1, 2, 1], 3),2);",
            "assert.deepEqual(candidate([1, 1, 1, 1], 4),0);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], 5),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a jsthon function to split a string into characters.",
        "code": "function split(word){\n    var split = word.split(/\\s+/);\n    return split;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split;",
            "assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);",
            "assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);",
            "assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "function sum_digits(n){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_digits;",
            "assert.deepEqual(candidate(345),12);",
            "assert.deepEqual(candidate(12),3);",
            "assert.deepEqual(candidate(97),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array is sorted or not.",
        "code": "function issort_list(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        list2.push(list1[i]);\n    }\n    return list2.length == list1.length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = issort_list;",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]),true);",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]),false);",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "568",
        "title": "empty_list",
        "text": "Write a function to create an array of N empty dictionaries.",
        "code": "function empty_list(length){\n    var list = [];\n    for(var i = 0; i < length; i++){\n        list.push({\"name\": \"item\" + i});\n    }\n    return list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = empty_list;",
            "assert.deepEqual(candidate(5),[{}, {}, {}, {}, {}]);",
            "assert.deepEqual(candidate(6),[{}, {}, {}, {}, {}, {}]);",
            "assert.deepEqual(candidate(7),[{}, {}, {}, {}, {}, {}, {}]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "function sort_sublists(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        list2.push(list1[i]);\n    }\n    return list2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_sublists;",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),[[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);",
            "assert.deepEqual(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]),[[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a jsthon function to check if a given number is one less than twice its reverse.",
        "code": "function checks(n){\n    if(n%2==0){\n        return n;\n    }\n    return n-1;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = checks;",
            "assert.deepEqual(candidate(70),false);",
            "assert.deepEqual(candidate(23),false);",
            "assert.deepEqual(candidate(73),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a jsthon function to remove duplicate numbers from a given number of arrays.",
        "code": "function two_unique_nums(nums){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] == nums[i]){\n            result.push(nums[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = two_unique_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 2, 3, 4, 5]),[1, 4, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 2, 4, 5]),[1, 3, 4, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 2, 3, 4, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a jsthon function to calculate the product of the unique numbers in a given array.",
        "code": "function unique_product(list_data){\n    var product = 0;\n    for(var i = 0; i < list_data.length; i++){\n        product = product + list_data[i];\n    }\n    return product;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = unique_product;",
            "assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);",
            "assert.deepEqual(candidate([1, 2, 3, 1]),6);",
            "assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "function surfacearea_cylinder(r, h){\n  var r2 = r*r;\n  var h2 = h*h;\n  var r3 = r2*r2;\n  var h3 = h2*h2;\n  var r4 = r3*r3;\n  var h4 = h3*h3;\n  var r5 = r4*r4;\n  var h5 = h4*h4;\n  var r6 = r5*r5;\n  var h6 = h5*h5;\n  var r7 = r6*r6;\n  var h7 = h6*h6;\n  var r8 = r7*r7;\n  var h8 = h7*h7;\n  var r9 = r8*r8;\n  var h9 = h8*h8;\n  var r10 = r9*r9;\n  var h10 = h9*h9;\n  var r11 = r10*r10;\n  var h11 = h10*h10;\n  var r12 = r11*r11;\n  var h12 = h11*h11;\n  var r13 = r12*r12;\n  var h13 = h12*h12;\n  var r14 = r13*r13;\n  var h14 = h13*h13;\n  var r15 = r14*r14;\n  var h15 = h14*h14;\n  var r16 = r15*r15;\n  var h16 = h15*h15;\n  var r17 = r16*r16;\n  var h17 = h16*h16;\n  var r18 = r17*r17;\n  var h18 = h17*h17;\n  var r19 = r18*r18;\n  var h19 = h18*h18;\n  var r20 = r19*r19;\n  var h20 = h19*h19;\n  var r21 = r20*r20;\n  var h21 = h20*h20;\n  var r22 = r21*r21\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surfacearea_cylinder;",
            "assert.deepEqual(candidate(10, 5),942.45);",
            "assert.deepEqual(candidate(4, 5),226.18800000000002);",
            "assert.deepEqual(candidate(4, 10),351.848);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a jsthon function to check whether an array is subarray of another or not.",
        "code": "function is_Sub_Array(A, B){\n    if(A.length!= B.length) return false;\n    for(var i = 0; i < A.length; i++){\n        if(A[i]!= B[i]) return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Sub_Array;",
            "assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);",
            "assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a jsthon function to find the last digit in factorial of a given number.",
        "code": "function last_Digit_Factorial(n){\n    var factorial = 1;\n    for(var i = 1; i <= n; i++){\n        factorial = factorial * i;\n    }\n    return factorial;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last_Digit_Factorial;",
            "assert.deepEqual(candidate(4),4);",
            "assert.deepEqual(candidate(21),0);",
            "assert.deepEqual(candidate(30),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "function interleave_lists(list1, list2, list3){\n  var list1_length = list1.length;\n  var list2_length = list2.length;\n  var list3_length = list3.length;\n  var flat_list = [];\n  for(var i = 0; i < list1_length; i++){\n    flat_list.push(list1[i]);\n  }\n  for(var i = 0; i < list2_length; i++){\n    flat_list.push(list2[i]);\n  }\n  for(var i = 0; i < list3_length; i++){\n    flat_list.push(list3[i]);\n  }\n  return flat_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = interleave_lists;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]),[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);",
            "assert.deepEqual(candidate([10, 20], [15, 2], [5, 10]),[10, 15, 5, 20, 2, 10]);",
            "assert.deepEqual(candidate([11, 44], [10, 15], [20, 5]),[11, 10, 20, 44, 15, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two arrays.",
        "code": "function find_dissimilar(test_tup1, test_tup2){\n    var test_tup1_len = test_tup1.length;\n    var test_tup2_len = test_tup2.length;\n    var test_tup1_i = 0;\n    var test_tup2_i = 0;\n    var test_tup1_j = 0;\n    var test_tup2_j = 0;\n    var test_tup1_k = 0;\n    var test_tup2_k = 0;\n    var test_tup1_l = 0;\n    var test_tup2_l = 0;\n    var test_tup1_m = 0;\n    var test_tup2_m = 0;\n    var test_tup1_n = 0;\n    var test_tup2_n = 0;\n    var test_tup1_o = 0;\n    var test_tup2_o = 0;\n    var test_tup1_p = 0;\n    var test_tup2_p = 0;\n    var test_tup1_q = 0;\n    var test_tup2_q = 0;\n    var test_tup1_r = 0;\n    var test_tup2_r = 0;\n    var test_tup1_s = 0;\n    var test_tup2_s = 0;\n    var test_tup1_t = 0;\n    var test_tup2_t = 0;\n    var test_tup1_u = 0;\n    var test_tup2_u = 0;\n    var test_tup1_v = 0;\n    var test_tup2_v = 0;\n    var test_tup1_w = 0;\n    var test_tup2_w = 0;\n    var test_tup1_x = 0;\n    var test_tup2_x = 0;\n    var test_tup1_y = 0;\n    var test_tup2_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_dissimilar;",
            "assert.deepEqual(candidate([3, 4, 5, 6], [5, 7, 4, 10]),[3, 6, 7, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [7, 2, 3, 9]),[1, 4, 7, 9]);",
            "assert.deepEqual(candidate([21, 11, 25, 26], [26, 34, 21, 36]),[34, 36, 11, 25]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a jsthon function to find the largest number that can be formed with the given array of digits.",
        "code": "function find_Max_Num(arr){\n    var max = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Max_Num;",
            "assert.deepEqual(candidate([1, 2, 3]),321);",
            "assert.deepEqual(candidate([4, 5, 6, 1]),6541);",
            "assert.deepEqual(candidate([1, 2, 3, 9]),9321);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed array.",
        "code": "function extract_even(test_tuple){\n    var test_array = test_tuple[0];\n    var test_array_length = test_tuple[1];\n    var test_array_index = test_tuple[2];\n    var test_array_index_even = test_tuple[3];\n    var test_array_index_odd = test_tuple[4];\n    var test_array_index_even_odd = test_tuple[5];\n    var test_array_index_odd_even = test_tuple[6];\n    var test_array_index_odd_odd = test_tuple[7];\n    var test_array_index_odd_odd_even = test_tuple[8];\n    var test_array_index_odd_odd_even_odd = test_tuple[9];\n    var test_array_index_odd_odd_odd_even = test_tuple[10];\n    var test_array_index_odd_odd_odd_even_odd = test_tuple[11];\n    var test_array_index_odd_odd_odd_even_odd = test_tuple[12];\n    var test_array_index_odd_odd_odd_even_odd_odd = test_tuple[13];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[14];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[15];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[16];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[17];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[18];\n    var test_array_index_odd_odd_odd_odd_even_odd_odd = test_tuple[19];\n    var test_array_index_odd_odd_odd_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_even;",
            "assert.deepEqual(candidate([4, 5, [7, 6, [2, 4]], 6, 8]),[4, [6, [2, 4]], 6, 8]);",
            "assert.deepEqual(candidate([5, 6, [8, 7, [4, 8]], 7, 9]),[6, [8, [4, 8]]]);",
            "assert.deepEqual(candidate([5, 6, [9, 8, [4, 6]], 8, 10]),[6, [8, [4, 6]], 8, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a jsthon function to find the surface area of a square jsramid with a given base edge and height.",
        "code": "function surface_Area(b, s){\n    var a = b.width;\n    var b = b.height;\n    var c = a * b;\n    var d = a * b;\n    var e = a * b;\n    var f = a * b;\n    var g = a * b;\n    var h = a * b;\n    var i = a * b;\n    var j = a * b;\n    var k = a * b;\n    var l = a * b;\n    var m = a * b;\n    var n = a * b;\n    var o = a * b;\n    var p = a * b;\n    var q = a * b;\n    var r = a * b;\n    var s = a * b;\n    var t = a * b;\n    var u = a * b;\n    var v = a * b;\n    var w = a * b;\n    var x = a * b;\n    var y = a * b;\n    var z = a * b;\n    var a = b;\n    var b = c;\n    var c = d;\n    var d = e;\n    var e = f;\n    var f = g;\n    var g = h;\n    var h = i;\n    var i = j;\n    var j = k;\n    var k = l;\n    var l = m;\n    var m = n;\n    var n = o;\n    var o = p;\n    var p = q;\n    var q = r;\n    var r = s;\n    var s = t;\n    var t = u;\n    var u = v;\n    var v = w;\n    var w = x;\n    var x = y;\n    var y = z;\n    var z = a;\n    return c;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surface_Area;",
            "assert.deepEqual(candidate(3, 4),33);",
            "assert.deepEqual(candidate(4, 5),56);",
            "assert.deepEqual(candidate(1, 2),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "function catalan_number(num){\n    return num % 10;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = catalan_number;",
            "assert.deepEqual(candidate(10),16796);",
            "assert.deepEqual(candidate(9),4862);",
            "assert.deepEqual(candidate(7),429);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "function find_adverbs(text){\n    var adverbs = [];\n    var pos = 0;\n    var i = 0;\n    var j = 0;\n    var len = text.length;\n    while(i < len){\n        if(text[i] == 'ly'){\n            adverbs.push(text.substring(pos, i));\n            pos = i;\n        }\n        i++;\n    }\n    return adverbs;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_adverbs;",
            "assert.deepEqual(candidate(\"Clearly, he has no excuse for such behavior.\"),\"0-7: Clearly\");",
            "assert.deepEqual(candidate(\"Please handle the situation carefuly\"),\"28-36: carefuly\");",
            "assert.deepEqual(candidate(\"Complete the task quickly\"),\"18-25: quickly\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "585",
        "title": "expensive_items",
        "text": "Write a function to find the n most expensive items in a given dataset.",
        "code": "function expensive_items(items, n){\n    var items_length = items.length;\n    var max_length = 0;\n    var max_item = null;\n    for(var i = 0; i < items_length; i++){\n        if(items[i] > max_item){\n            max_item = items[i];\n            max_length = i;\n        }\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = expensive_items;",
            "assert.deepEqual(candidate([{\"name\": \"Item-1\", \"price\": 101.1}, {\"name\": \"Item-2\", \"price\": 555.22}], 1),[{\"name\": \"Item-2\", \"price\": 555.22}]);",
            "assert.deepEqual(candidate([{\"name\": \"Item-1\", \"price\": 101.1}, {\"name\": \"Item-2\", \"price\": 555.22}, {\"name\": \"Item-3\", \"price\": 45.09}], 2),[{\"name\": \"Item-2\", \"price\": 555.22}, {\"name\": \"Item-1\", \"price\": 101.1}]);",
            "assert.deepEqual(candidate([{\"name\": \"Item-1\", \"price\": 101.1}, {\"name\": \"Item-2\", \"price\": 555.22}, {\"name\": \"Item-3\", \"price\": 45.09}, {\"name\": \"Item-4\", \"price\": 22.75}], 1),[{\"name\": \"Item-2\", \"price\": 555.22}]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a jsthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "function split_Arr(l, n){\n    var arr = [];\n    for(var i = 0; i < l.length; i++){\n        arr.push(l[i]);\n    }\n    arr.push(l[0]);\n    return arr;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split_Arr;",
            "assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);",
            "assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert an array to an array.",
        "code": "function list_tuple(listx){\n    var list = [];\n    for(var i = 0; i < listx.length; i++){\n        list.push(listx[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_tuple;",
            "assert.deepEqual(candidate([5, 10, 7, 4, 15, 3]),[5, 10, 7, 4, 15, 3]);",
            "assert.deepEqual(candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]),[2, 4, 5, 6, 2, 3, 4, 4, 7]);",
            "assert.deepEqual(candidate([58, 44, 56]),[58, 44, 56]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a jsthon function to find the difference between largest and smallest value in a given array.",
        "code": "function big_diff(nums){\n    var max = nums[0];\n    var min = nums[0];\n    for(var i = 1; i < nums.length; i++){\n        if(nums[i] > max){\n            max = nums[i];\n        }\n        if(nums[i] < min){\n            min = nums[i];\n        }\n    }\n    return max - min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = big_diff;",
            "assert.deepEqual(candidate([1, 2, 3, 4]),3);",
            "assert.deepEqual(candidate([4, 5, 12]),8);",
            "assert.deepEqual(candidate([9, 2, 3]),7);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "function perfect_squares(a, b){\n    var x = a;\n    var y = b;\n    var x_sum = 0;\n    var y_sum = 0;\n    while(x_sum < y_sum){\n        x_sum += x;\n        y_sum += y;\n    }\n    return x_sum + y_sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = perfect_squares;",
            "assert.deepEqual(candidate(1, 30),[1, 4, 9, 16, 25]);",
            "assert.deepEqual(candidate(50, 100),[64, 81, 100]);",
            "assert.deepEqual(candidate(100, 200),[100, 121, 144, 169, 196]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a jsthon function to check whether the given two integers have opposite sign or not.",
        "code": "function opposite_Signs(x, y){\n    if(x < 0 && y < 0) return true;\n    if(x > 0 && y > 0) return true;\n    if(x < 0 && y > 0) return true;\n    if(x > 0 && y < 0) return true;\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = opposite_Signs;",
            "assert.deepEqual(candidate(1, -2),true);",
            "assert.deepEqual(candidate(3, 2),false);",
            "assert.deepEqual(candidate(-10, -10),false);",
            "assert.deepEqual(candidate(-2, 2),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a jsthon function to interchange the first and last elements in an array.",
        "code": "function swap_List(newList){\n    var temp = newList[0];\n    newList[0] = newList[1];\n    newList[1] = temp;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_List;",
            "assert.deepEqual(candidate([12, 35, 9, 56, 24]),[24, 35, 9, 56, 12]);",
            "assert.deepEqual(candidate([1, 2, 3]),[3, 2, 1]);",
            "assert.deepEqual(candidate([4, 5, 6]),[6, 5, 4]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a jsthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "function sum_Of_product(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * Math.pow(i, n - i);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_Of_product;",
            "assert.deepEqual(candidate(3),15);",
            "assert.deepEqual(candidate(4),56);",
            "assert.deepEqual(candidate(1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "function removezero_ip(ip){\n    var ip_array = ip.split('.');\n    var ip_array_length = ip_array.length;\n    var ip_array_index = 0;\n    var ip_array_index_max = ip_array_length - 1;\n    var ip_array_index_min = 0;\n    var ip_array_index_min_max = 0;\n    var ip_array_index_min_max_max = 0;\n    var ip_array_index_min_max_max_max = 0;\n    var ip_array_index_min_max_max_max = 0;\n    var ip_array_index_min_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_max_max_max = 0;\n    var ip_array_index_min_max_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = removezero_ip;",
            "assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");",
            "assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");",
            "assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "function diff_even_odd(list1){\n    var list2 = list1.slice(0,1);\n    var list3 = list1.slice(1,1);\n    var list4 = list1.slice(1,1);\n    var list5 = list1.slice(1,1);\n    var list6 = list1.slice(1,1);\n    var list7 = list1.slice(1,1);\n    var list8 = list1.slice(1,1);\n    var list9 = list1.slice(1,1);\n    var list10 = list1.slice(1,1);\n    var list11 = list1.slice(1,1);\n    var list12 = list1.slice(1,1);\n    var list13 = list1.slice(1,1);\n    var list14 = list1.slice(1,1);\n    var list15 = list1.slice(1,1);\n    var list16 = list1.slice(1,1);\n    var list17 = list1.slice(1,1);\n    var list18 = list1.slice(1,1);\n    var list19 = list1.slice(1,1);\n    var list20 = list1.slice(1,1);\n    var list21 = list1.slice(1,1);\n    var list22 = list1.slice(1,1);\n    var list23 = list1.slice(1,1);\n    var list24 = list1.slice(1,1);\n    var list25 = list1.slice(1,1);\n    var list26 = list1.slice(1,1);\n    var list27 = list1.slice(1,1);\n    var list28 = list1.slice(1,1);\n    var list29 = list1.slice(1,1);\n    var list30 = list1.slice(1,1);\n    var list31 = list1.slice(1,1);\n    var list32 = list1.slice(1,1);\n    var list33 = list1.slice(1,1);\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = diff_even_odd;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),1);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a jsthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "function min_Swaps(str1, str2){\n    var str1_len = str1.length;\n    var str2_len = str2.length;\n    var min_swaps = Math.floor(str1_len / 2) + Math.floor(str2_len / 2);\n    return min_swaps;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_Swaps;",
            "assert.deepEqual(candidate(\"1101\", \"1110\"),1);",
            "assert.deepEqual(candidate(\"111\", \"000\"),\"Not Possible\");",
            "assert.deepEqual(candidate(\"111\", \"110\"),\"Not Possible\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "function find_kth(arr1, arr2, k){\n    var i = 0;\n    var j = 0;\n    var len = arr1.length;\n    var arr1_len = arr1.length;\n    var arr2_len = arr2.length;\n    var arr1_len_kth = arr1_len;\n    var arr2_len_kth = arr2.length;\n    while(i < len){\n        if(arr1[i] < arr2[j]){\n            arr1_len_kth--;\n            j++;\n        }\n        else{\n            arr2_len_kth--;\n            i++;\n        }\n    }\n    return arr1_len_kth;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_kth;",
            "assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);",
            "assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);",
            "assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "function armstrong_number(number){\n    if(number < 0){\n        return false;\n    }\n    else{\n        return true;\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = armstrong_number;",
            "assert.deepEqual(candidate(153),true);",
            "assert.deepEqual(candidate(259),false);",
            "assert.deepEqual(candidate(4458),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "function sum_average(number){\n    var sum = 0;\n    var n = number;\n    while(n > 0){\n        sum += n;\n        n = n / 10;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_average;",
            "assert.deepEqual(candidate(10),[55, 5.5]);",
            "assert.deepEqual(candidate(15),[120, 8.0]);",
            "assert.deepEqual(candidate(20),[210, 10.5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "function is_octagonal(n){\n    return n%2==0;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_octagonal;",
            "assert.deepEqual(candidate(5),65);",
            "assert.deepEqual(candidate(10),280);",
            "assert.deepEqual(candidate(15),645);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a jsthon function to check whether the given number is even or not.",
        "code": "function is_Even(n){\n    return n % 2 == 0;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Even;",
            "assert.deepEqual(candidate(1),false);",
            "assert.deepEqual(candidate(2),true);",
            "assert.deepEqual(candidate(3),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a jsthon function to find the first repeated character in a given string.",
        "code": "function first_repeated_char(str1){\n    var str2 = str1.split(\"\");\n    var str3 = str2[0];\n    var str4 = str2[1];\n    var str5 = str2[2];\n    var str6 = str2[3];\n    var str7 = str2[4];\n    var str8 = str2[5];\n    var str9 = str2[6];\n    var str10 = str2[7];\n    var str11 = str2[8];\n    var str12 = str2[9];\n    var str13 = str2[10];\n    var str14 = str2[11];\n    var str15 = str2[12];\n    var str16 = str2[13];\n    var str17 = str2[14];\n    var str18 = str2[15];\n    var str19 = str2[16];\n    var str20 = str2[17];\n    var str21 = str2[18];\n    var str22 = str2[19];\n    var str23 = str2[20];\n    var str24 = str2[21];\n    var str25 = str2[22];\n    var str26 = str2[23];\n    var str27 = str2[24];\n    var str28 = str2[25];\n    var str29 = str2[26];\n    var str30 = str2[27];\n    var str31 = str2[28];\n    var str32 = str2[29];\n    var str33 = str2[30];\n    var str34 = str2[31];\n    var str35 = str2[32];\n    var str36 = str2[33];\n    var str37 = str2[34];\n    var str38 = str2[35];\n    var str39 = str2[36];\n    var str40 = str2[37];\n    var str41 = str2[38];\n    var str42 = str2[39];\n    var str43 = str2[40];\n    var str44 = str2[41];\n    var str45 = str2\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_repeated_char;",
            "assert.deepEqual(candidate(\"abcabc\"),\"a\");",
            "assert.deepEqual(candidate(\"abc\"),undefined);",
            "assert.deepEqual(candidate(\"123123\"),\"1\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "function get_ludic(n){\n    var a = [];\n    for(var i = 0; i < n; i++){\n        a.push(i);\n    }\n    return a;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_ludic;",
            "assert.deepEqual(candidate(10),[1, 2, 3, 5, 7]);",
            "assert.deepEqual(candidate(25),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);",
            "assert.deepEqual(candidate(45),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "function reverse_words(s){\n    var words = s.split(\" \");\n    var reversed = words.map(function(word){\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    });\n    return reversed;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_words;",
            "assert.deepEqual(candidate(\"python program\"),\"program python\");",
            "assert.deepEqual(candidate(\"java language\"),\"language java\");",
            "assert.deepEqual(candidate(\"indian man\"),\"man indian\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "function prime_num(num){\n    if(num == 0) return false;\n    if(num % 2 == 0) return true;\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = prime_num;",
            "assert.deepEqual(candidate(13),true);",
            "assert.deepEqual(candidate(7),true);",
            "assert.deepEqual(candidate(-1010),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "function radian_degree(degree){\n    return degree * Math.PI / 180;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = radian_degree;",
            "assert.deepEqual(candidate(90),1.5707963267948966);",
            "assert.deepEqual(candidate(60),1.0471975511965976);",
            "assert.deepEqual(candidate(120),2.0943951023931953);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "function find_literals(text, pattern){\n    var start = 0;\n    var end = text.length;\n    var match = pattern.exec(text);\n    while (match){\n        start = match.index;\n        match = pattern.exec(text);\n    }\n    return [text.substring(start, end), start];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_literals;",
            "assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);",
            "assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);",
            "assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a jsthon function to find nth bell number.",
        "code": "function bell_Number(n){\n    var result = 0;\n    for(var i = 1; i <= n; i++){\n        result = result + i;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bell_Number;",
            "assert.deepEqual(candidate(2),2);",
            "assert.deepEqual(candidate(3),5);",
            "assert.deepEqual(candidate(4),15);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a jsthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "function remove_kth_element(list1, L){\n    var list2 = [];\n    for(var i = 0; i < L; i++){\n        list2.push(list1[i]);\n    }\n    return list2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_kth_element;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[1, 1, 3, 4, 4, 5, 1]);",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4),[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5),[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "function max_of_nth(test_list, N){\n    var max = 0;\n    for(var i = 0; i < test_list.length; i++){\n        for(var j = 0; j < test_list[i].length; j++){\n            if(test_list[i][j] > max){\n                max = test_list[i][j];\n            }\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_of_nth;",
            "assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);",
            "assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);",
            "assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a jsthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.",
        "code": "function merge(lst){\n    var res = [];\n    for(var i = 0; i < lst.length; i++){\n        res.push(lst[i]);\n    }\n    return res;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge;",
            "assert.deepEqual(candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]);",
            "assert.deepEqual(candidate([[1, 2], [3, 4], [5, 6], [7, 8]]),[[1, 3, 5, 7], [2, 4, 6, 8]]);",
            "assert.deepEqual(candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "function cummulative_sum(test_list){\n    var sum = 0;\n    for(var i = 0; i < test_list.length; i++){\n        sum += test_list[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cummulative_sum;",
            "assert.deepEqual(candidate([[1, 3], [5, 6, 7], [2, 6]]),30);",
            "assert.deepEqual(candidate([[2, 4], [6, 7, 8], [3, 7]]),37);",
            "assert.deepEqual(candidate([[3, 5], [7, 8, 9], [4, 8]]),44);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "function average_tuple(nums){\n    var sum = 0;\n    for(var i = 0; i < nums.length; i++){\n        sum += nums[i];\n    }\n    return sum / nums.length;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = average_tuple;",
            "assert.deepEqual(candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]),[30.5, 34.25, 27.0, 23.25]);",
            "assert.deepEqual(candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]),[25.5, -18.0, 3.75]);",
            "assert.deepEqual(candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]),[305.0, 342.5, 270.0, 232.5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two arrays of the same length and performs the element wise modulo.",
        "code": "function tuple_modulo(test_tup1, test_tup2){\n    var test_tup1_length = test_tup1.length;\n    var test_tup2_length = test_tup2.length;\n    var test_tup1_mod = test_tup1.modulo(test_tup2);\n    var test_tup2_mod = test_tup2.modulo(test_tup1);\n    var test_tup1_mod_length = test_tup1_mod.length;\n    var test_tup2_mod_length = test_tup2_mod.length;\n    var test_tup1_mod_mod = test_tup1_mod.modulo(test_tup2);\n    var test_tup2_mod_mod = test_tup2_mod.modulo(test_tup1);\n    var test_tup1_mod_mod_length = test_tup1_mod_mod.length;\n    var test_tup2_mod_mod_length = test_tup2_mod_mod.length;\n    var test_tup1_mod_mod_mod = test_tup1_mod_mod.modulo(test_tup2);\n    var test_tup2_mod_mod_mod = test_tup2_mod_mod.modulo(test_tup1);\n    var test_tup1_mod_mod_mod_length = test_tup1_mod_mod_mod.length;\n    var test_tup2_mod_mod_mod_length = test_tup2_mod_mod_mod.length;\n    var test_tup1_mod_mod_mod_mod = test_tup1_mod_mod_mod.modulo(test_tup2);\n    var test_tup2_mod_mod_mod_mod = test_tup2_mod_mod_mod.modulo(test_tup1);\n    var test_tup1_mod_mod_mod_mod_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_modulo;",
            "assert.deepEqual(candidate([10, 4, 5, 6], [5, 6, 7, 5]),[0, 4, 5, 1]);",
            "assert.deepEqual(candidate([11, 5, 6, 7], [6, 7, 8, 6]),[5, 5, 6, 1]);",
            "assert.deepEqual(candidate([12, 6, 7, 8], [7, 8, 9, 7]),[5, 6, 7, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "function min_Jumps(steps, d){\n    var j = 0;\n    for(var i = 0; i < steps; i++){\n        if(d === 0){\n            j = i;\n            break;\n        }\n        d--;\n    }\n    return j;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_Jumps;",
            "assert.deepEqual(candidate([3, 4], 11),3.5);",
            "assert.deepEqual(candidate([3, 4], 0),0);",
            "assert.deepEqual(candidate([11, 14], 11),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two arrays element wise.",
        "code": "function div_list(nums1, nums2){\n    var result = [];\n    for(var i = 0; i < nums1.length; i++){\n        result.push(nums1[i] / nums2[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = div_list;",
            "assert.deepEqual(candidate([4, 5, 6], [1, 2, 3]),[4.0, 2.5, 2.0]);",
            "assert.deepEqual(candidate([3, 2], [1, 4]),[3.0, 0.5]);",
            "assert.deepEqual(candidate([90, 120], [50, 70]),[1.8, 1.7142857142857142]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "function move_num(test_str){\n    var test_str_copy = test_str.toString();\n    var test_str_copy_length = test_str_copy.length;\n    var test_str_copy_index = 0;\n    var test_str_copy_index_end = test_str_copy_length;\n    var test_str_copy_index_start = 0;\n    var test_str_copy_index_end_end = 0;\n    var test_str_copy_index_start_end = 0;\n    var test_str_copy_index_start_end_end = 0;\n    var test_str_copy_index_start_end_end = 0;\n    var test_str_copy_index_start_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n    var test_str_copy_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = move_num;",
            "assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");",
            "assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");",
            "assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a jsthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "function count_Substrings(s){\n    var result = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s.charAt(i) == '0'){\n            result++;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Substrings;",
            "assert.deepEqual(candidate(\"112112\"),6);",
            "assert.deepEqual(candidate(\"111\"),6);",
            "assert.deepEqual(candidate(\"1101112\"),12);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted arrays of same size.",
        "code": "function get_median(arr1, arr2, n){\n    var arr1_len = arr1.length;\n    var arr2_len = arr2.length;\n    var arr1_median = arr1[(arr1_len - 1) / 2];\n    var arr2_median = arr2[(arr2_len - 1) / 2];\n    var arr1_median_index = (arr1_len - 1) / 2;\n    var arr2_median_index = (arr2_len - 1) / 2;\n    var arr1_median_index_diff = (arr1_len - 1) / 2;\n    var arr2_median_index_diff = (arr2_len - 1) / 2;\n    var arr1_median_index_diff_index = (arr1_len - 1) / 2;\n    var arr2_median_index_diff_index = (arr2_len - 1) / 2;\n    var arr1_median_index_diff_index_diff = (arr1_len - 1) / 2;\n    var arr2_median_index_diff_index_diff_index = (arr2_len - 1) / 2;\n    var arr1_median_index_diff_index_diff_index_diff = (arr1_len - 1) / 2;\n    var arr2_median_index_diff_index_diff_index_diff_index = (arr2_len - 1) / 2;\n    var arr1_median_index_diff_index_diff_index_diff_index_diff = (arr1_len - 1) / 2;\n    var arr2_median_index_diff_index_diff_index_diff_index_diff_index = (arr2_len - 1) / 2;\n    var arr1_median_index_diff_index_diff_index_diff_index_diff_index_diff = (arr1_len - 1) / 2;\n    var arr2_median_index_diff_index_diff_index_diff_index_diff_index_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_median;",
            "assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);",
            "assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);",
            "assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array.",
        "code": "function nth_nums(nums, n){\n    var res = [];\n    for(var i = 0; i < nums.length; i++){\n        res.push(nums[i] * Math.pow(n, i));\n    }\n    return res;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = nth_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);",
            "assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a jsthon function to convert a given string to uppercase.",
        "code": "function is_upper(string){\n    return string.toUpperCase() === string;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_upper;",
            "assert.deepEqual(candidate(\"person\"),\"PERSON\");",
            "assert.deepEqual(candidate(\"final\"),\"FINAL\");",
            "assert.deepEqual(candidate(\"Valid\"),\"VALID\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a jsthon function to interchange the first and last element in a given array.",
        "code": "function swap_List(newList){\n    var temp = newList[0];\n    newList[0] = newList[1];\n    newList[1] = temp;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_List;",
            "assert.deepEqual(candidate([1, 2, 3]),[3, 2, 1]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 4]),[4, 2, 3, 4, 1]);",
            "assert.deepEqual(candidate([4, 5, 6]),[6, 5, 4]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a jsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "function triangle_area(r){\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = triangle_area;",
            "assert.deepEqual(candidate(-1),undefined);",
            "assert.deepEqual(candidate(0),0);",
            "assert.deepEqual(candidate(2),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a jsthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "function find_First_Missing(array){\n    var i = 0;\n    var j = array.length - 1;\n    while(i < j){\n        if(array[i] < array[j]){\n            i++;\n        }\n        else{\n            j--;\n        }\n    }\n    return array[i];\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_First_Missing;",
            "assert.deepEqual(candidate([0, 1, 2, 3]),4);",
            "assert.deepEqual(candidate([0, 1, 2, 6, 9]),3);",
            "assert.deepEqual(candidate([2, 3, 5, 8, 9]),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "function replace_spaces(string){\n    return string.replace(/\\s+/g, '%20');\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_spaces;",
            "assert.deepEqual(candidate(\"My Name is Dawood\"),\"My%20Name%20is%20Dawood\");",
            "assert.deepEqual(candidate(\"I am a Programmer\"),\"I%20am%20a%20Programmer\");",
            "assert.deepEqual(candidate(\"I love Coding\"),\"I%20love%20Coding\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a jsthon function to find even numbers from an array of numbers.",
        "code": "function Split(list){\n    var result = [];\n    for(var i = 0; i < list.length; i++){\n        if(i % 2 == 0){\n            result.push(list[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Split;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);",
            "assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);",
            "assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a jsthon function to find smallest number in an array.",
        "code": "function smallest_num(xs){\n    var smallest = xs[0];\n    for(var i = 1; i < xs.length; i++){\n        if(xs[i] < smallest){\n            smallest = xs[i];\n        }\n    }\n    return smallest;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = smallest_num;",
            "assert.deepEqual(candidate([10, 20, 1, 45, 99]),1);",
            "assert.deepEqual(candidate([1, 2, 3]),1);",
            "assert.deepEqual(candidate([45, 46, 50, 60]),45);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate array.",
        "code": "function get_coordinates(test_tup){\n    var test_tup_array = test_tup.split(\",\");\n    var test_tup_array_length = test_tup_array.length;\n    var test_tup_array_index = 0;\n    var test_tup_array_index_max = test_tup_array_length - 1;\n    var test_tup_array_index_min = 0;\n    var test_tup_array_index_min_max = 0;\n    var test_tup_array_index_min_max_max = 0;\n    var test_tup_array_index_min_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max_max_max = 0;\n    var test_tup_array_index_min_max_max_max_max_max_max_max_max_max_max = 0;\n    var test_\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_coordinates;",
            "assert.deepEqual(candidate([3, 4]),[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]);",
            "assert.deepEqual(candidate([4, 5]),[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]);",
            "assert.deepEqual(candidate([5, 6]),[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "function replace_spaces(text){\n    return text.replace(/\\s+/g, '_');\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_spaces;",
            "assert.deepEqual(candidate(\"Jumanji The Jungle\"),\"Jumanji_The_Jungle\");",
            "assert.deepEqual(candidate(\"The_Avengers\"),\"The Avengers\");",
            "assert.deepEqual(candidate(\"Fast and Furious\"),\"Fast_and_Furious\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a jsthon function to move all zeroes to the end of the given array.",
        "code": "function move_zero(num_list){\n    var num_array = num_list.split('');\n    var num_array_length = num_array.length;\n    var num_array_index = 0;\n    var num_array_index_end = num_array_length - 1;\n    for(var i = 0; i < num_array_length; i++){\n        if(num_array[i] == 0){\n            num_array[i] = '0';\n            num_array_index++;\n        }\n    }\n    return num_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = move_zero;",
            "assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);",
            "assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);",
            "assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a jsthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "function pair_xor_Sum(arr, n){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pair_xor_Sum;",
            "assert.deepEqual(candidate([5, 9, 7, 6], 4),47);",
            "assert.deepEqual(candidate([7, 3, 5], 3),12);",
            "assert.deepEqual(candidate([7, 3], 2),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array.",
        "code": "function heap_sort(iterable){\n    var heap = [];\n    var length = iterable.length;\n    for(var i = 0; i < length; i++){\n        heap[i] = iterable[i];\n    }\n    for(var i = length - 1; i >= 0; i--){\n        heap[i] = heap[i + 1];\n    }\n    return heap;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = heap_sort;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]),[14, 22, 25, 25, 35, 58, 65, 75, 85]);",
            "assert.deepEqual(candidate([7, 1, 9, 5]),[1, 5, 7, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "function noprofit_noloss(actual_cost, sale_amount){\n    return actual_cost + sale_amount;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = noprofit_noloss;",
            "assert.deepEqual(candidate(1500, 1200),false);",
            "assert.deepEqual(candidate(100, 100),true);",
            "assert.deepEqual(candidate(2000, 5000),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "function wind_chill(v, t){\n    var wind_index = Math.floor(v/10) + 1;\n    var wind_index_rounded = Math.floor(wind_index*10);\n    var wind_index_rounded_temp = Math.floor(wind_index_rounded*10);\n    var wind_index_rounded_temp_temp = Math.floor(wind_index_rounded_temp*10);\n    var wind_index_rounded_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind_index_rounded_temp_temp_temp_temp*10);\n    var wind_index_rounded_temp_temp_temp_temp = Math.floor(wind\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = wind_chill;",
            "assert.deepEqual(candidate(120, 35),40);",
            "assert.deepEqual(candidate(40, 20),19);",
            "assert.deepEqual(candidate(10, 8),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "function sample_nam(sample_names){\n    var sample_names_length = sample_names.length;\n    var sample_names_array = [];\n    for(var i = 0; i < sample_names_length; i++){\n        sample_names_array.push(sample_names[i].toLowerCase());\n    }\n    return sample_names_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sample_nam;",
            "assert.deepEqual(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]),16);",
            "assert.deepEqual(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]),10);",
            "assert.deepEqual(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given array array.",
        "code": "function max_difference(test_list){\n    var max_difference = 0;\n    for(var i = 0; i < test_list.length; i++){\n        var test_value = test_list[i];\n        var test_difference = Math.abs(test_value - test_list[i]);\n        if(test_difference > max_difference){\n            max_difference = test_difference;\n        }\n    }\n    return max_difference;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_difference;",
            "assert.deepEqual(candidate([[3, 5], [1, 7], [10, 3], [1, 2]]),7);",
            "assert.deepEqual(candidate([[4, 6], [2, 17], [9, 13], [11, 12]]),15);",
            "assert.deepEqual(candidate([[12, 35], [21, 27], [13, 23], [41, 22]]),23);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "function remove_parenthesis(items){\n    var new_items = [];\n    for(var i = 0; i < items.length; i++){\n        if(items[i].indexOf('(')!= -1){\n            new_items.push(items[i].replace(items[i].indexOf('('), \"\"));\n        }\n    }\n    return new_items;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_parenthesis;",
            "assert.deepEqual(candidate([\"python (chrome)\"]),\"python\");",
            "assert.deepEqual(candidate([\"string(.abc)\"]),\"string\");",
            "assert.deepEqual(candidate([\"alpha(num)\"]),\"alpha\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "function is_nonagonal(n){\n    var n_n = n;\n    while(n_n > 0){\n        if(n_n % 2 == 0){\n            return true;\n        }\n        n_n = n_n / 2;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_nonagonal;",
            "assert.deepEqual(candidate(10),325);",
            "assert.deepEqual(candidate(15),750);",
            "assert.deepEqual(candidate(18),1089);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "function text_match_wordz_middle(text){\n    var text_len = text.length;\n    var start = 0;\n    var end = text_len;\n    var match = false;\n    while(start < end){\n        if(text.charAt(start) == 'z'){\n            match = true;\n            break;\n        }\n        start++;\n    }\n    return match;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_wordz_middle;",
            "assert.deepEqual(candidate(\"pythonzabc.\"),true);",
            "assert.deepEqual(candidate(\"zxyabc.\"),false);",
            "assert.deepEqual(candidate(\"  lang  .\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a jsthon function to reverse an array upto a given position.",
        "code": "function reverse_Array_Upto_K(input, k){\n    var output = [];\n    var i = 0;\n    var j = input.length - 1;\n    while (i < j){\n        output.push(input[i]);\n        i++;\n        j--;\n    }\n    return output;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_Array_Upto_K;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);",
            "assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);",
            "assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array of arrays using the second value of each array.",
        "code": "function subject_marks(subjectmarks){\n    subjectmarks.sort(function(a,b){\n        return a[1] - b[1];\n    });\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = subject_marks;",
            "assert.deepEqual(candidate([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]),[[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]);",
            "assert.deepEqual(candidate([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]),[[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]);",
            "assert.deepEqual(candidate([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]),[[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten an array and sum all of its elements.",
        "code": "function recursive_list_sum(data_list){\n    var sum = 0;\n    for(var i = 0; i < data_list.length; i++){\n        sum += data_list[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = recursive_list_sum;",
            "assert.deepEqual(candidate([1, 2, [3, 4], [5, 6]]),21);",
            "assert.deepEqual(candidate([7, 10, [15, 14], [19, 41]]),106);",
            "assert.deepEqual(candidate([10, 20, [30, 40], [50, 60]]),210);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a jsthon function to count the number of positive numbers in an array.",
        "code": "function pos_count(list){\n    var count = 0;\n    for(var i = 0; i < list.length; i++){\n        if(list[i] > 0) count++;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pos_count;",
            "assert.deepEqual(candidate([1, -2, 3, -4]),2);",
            "assert.deepEqual(candidate([3, 4, 5, -1]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "function bell_number(n){\n    var n_partitions = [];\n    for(var i = 0; i < n; i++){\n        n_partitions.push(i);\n    }\n    return n_partitions;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bell_number;",
            "assert.deepEqual(candidate(2),2);",
            "assert.deepEqual(candidate(10),115975);",
            "assert.deepEqual(candidate(56),6775685320645824322581483068371419745979053216268760300);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a jsthon function to check whether the given array is monotonic or not.",
        "code": "function is_Monotonic(A){\n    var n = A.length;\n    var i = 0;\n    while(i < n){\n        if(A[i] < A[i+1]){\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Monotonic;",
            "assert.deepEqual(candidate([6, 5, 4, 4]),true);",
            "assert.deepEqual(candidate([1, 2, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 3, 2]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array contains the given subarray or not.",
        "code": "function is_sublist(l, s){\n    if(l.length == s.length){\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_sublist;",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a jsthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "function differ_At_One_Bit_Pos(a, b){\n    var a_bit = a & 0x1;\n    var b_bit = b & 0x1;\n    if(a_bit == b_bit){\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = differ_At_One_Bit_Pos;",
            "assert.deepEqual(candidate(13, 9),true);",
            "assert.deepEqual(candidate(15, 8),false);",
            "assert.deepEqual(candidate(2, 4),false);",
            "assert.deepEqual(candidate(2, 3),true);",
            "assert.deepEqual(candidate(5, 1),true);",
            "assert.deepEqual(candidate(1, 5),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given arrays have equal length or not.",
        "code": "function get_equal(Input){\n    var output = [];\n    for(var i = 0; i < Input.length; i++){\n        if(Input[i] == Input[i]){\n            output.push(true);\n        }\n        else{\n            output.push(false);\n        }\n    }\n    return output;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_equal;",
            "assert.deepEqual(candidate([[11, 22, 33], [44, 55, 66]]),true);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6, 7]]),false);",
            "assert.deepEqual(candidate([[1, 2], [3, 4]]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "function comb_sort(nums){\n    var arr = [];\n    for(var i = 0; i < nums.length; i++){\n        arr.push(nums[i]);\n    }\n    return arr;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = comb_sort;",
            "assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);",
            "assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);",
            "assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add an object to the array. The output should be an array.",
        "code": "function add_dict_to_tuple(test_tup, test_dict){\n    var test_tuple_array = [];\n    for(var i = 0; i < test_tup.length; i++){\n        test_tuple_array.push(test_tup[i]);\n    }\n    test_tuple_array.push(test_dict);\n    return test_tuple_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_dict_to_tuple;",
            "assert.deepEqual(candidate([4, 5, 6], {\"MSAM\": 1, \"is\": 2, \"best\": 3}),[4, 5, 6, {\"MSAM\": 1, \"is\": 2, \"best\": 3}]);",
            "assert.deepEqual(candidate([1, 2, 3], {\"UTS\": 2, \"is\": 3, \"Worst\": 4}),[1, 2, 3, {\"UTS\": 2, \"is\": 3, \"Worst\": 4}]);",
            "assert.deepEqual(candidate([8, 9, 10], {\"POS\": 3, \"is\": 4, \"Okay\": 5}),[8, 9, 10, {\"POS\": 3, \"is\": 4, \"Okay\": 5}]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "function maxAverageOfPath(cost){\n    var max = 0;\n    var maxIndex = 0;\n    var maxIndex2 = 0;\n    var maxIndex3 = 0;\n    var maxIndex4 = 0;\n    var maxIndex5 = 0;\n    var maxIndex6 = 0;\n    var maxIndex7 = 0;\n    var maxIndex8 = 0;\n    var maxIndex9 = 0;\n    var maxIndex10 = 0;\n    var maxIndex11 = 0;\n    var maxIndex12 = 0;\n    var maxIndex13 = 0;\n    var maxIndex14 = 0;\n    var maxIndex15 = 0;\n    var maxIndex16 = 0;\n    var maxIndex17 = 0;\n    var maxIndex18 = 0;\n    var maxIndex19 = 0;\n    var maxIndex20 = 0;\n    var maxIndex21 = 0;\n    var maxIndex22 = 0;\n    var maxIndex23 = 0;\n    var maxIndex24 = 0;\n    var maxIndex25 = 0;\n    var maxIndex26 = 0;\n    var maxIndex27 = 0;\n    var maxIndex28 = 0;\n    var maxIndex29 = 0;\n    var maxIndex30 = 0;\n    var maxIndex31 = 0;\n    var maxIndex32 = 0;\n    var maxIndex33 = 0;\n    var maxIndex34 = 0;\n    var maxIndex35 = 0;\n    var maxIndex36 = 0;\n    var maxIndex37 = 0;\n    var maxIndex38 = 0;\n    var maxIndex39 = 0;\n    var maxIndex40 = 0;\n    var maxIndex41 = 0;\n    var maxIndex42 = 0;\n    var maxIndex43 = 0;\n    var maxIndex44 = 0;\n    var maxIndex45 = 0;\n    var\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maxAverageOfPath;",
            "assert.deepEqual(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2);",
            "assert.deepEqual(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2);",
            "assert.deepEqual(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "722",
        "title": "filter_data",
        "text": "The input is given as - an object with a student name as a key and an array of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "code": "function filter_data(students, h, w){\n    var filtered = [];\n    students.forEach(function(student){\n        if(student.height > h && student.weight > w){\n            filtered.push(student);\n        }\n    });\n    return filtered;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = filter_data;",
            "assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 6.0, 70),{\"Cierra Vega\": [6.2, 70]});",
            "assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.9, 67),{\"Cierra Vega\": [6.2, 70], \"Kierra Gentry\": [6.0, 68]});",
            "assert.deepEqual(candidate({\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]}, 5.7, 64),{\"Cierra Vega\": [6.2, 70], \"Alden Cantrell\": [5.9, 65], \"Kierra Gentry\": [6.0, 68], \"Pierre Cox\": [5.8, 66]});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "function count_same_pair(nums1, nums2){\n    var count = 0;\n    for(var i = 0; i < nums1.length; i++){\n        if(nums1[i] == nums2[i]){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_same_pair;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]),4);",
            "assert.deepEqual(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),11);",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),1);",
            "assert.deepEqual(candidate([0, 1, 1, 2], [0, 1, 2, 2]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "function power_base_sum(base, power){\n    var sum = 0;\n    for(var i = 0; i < base.length; i++){\n        sum += base[i] * Math.pow(power, i);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = power_base_sum;",
            "assert.deepEqual(candidate(2, 100),115);",
            "assert.deepEqual(candidate(8, 10),37);",
            "assert.deepEqual(candidate(8, 15),62);",
            "assert.deepEqual(candidate(3, 3),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "function extract_quotation(text1){\n    var text2 = text1.replace(/\\s+/g, \" \");\n    return text2.split(\" \");\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_quotation;",
            "assert.deepEqual(candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"),[\"A53\", \"multi\", \"Processor\"]);",
            "assert.deepEqual(candidate(\"Cast your \"favorite\" entertainment \"apps\"\"),[\"favorite\", \"apps\"]);",
            "assert.deepEqual(candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"),[\"4k Ultra HD\", \"HDR 10\"]);",
            "assert.deepEqual(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.",
        "code": "function multiply_elements(test_tup){\n    var t_1 = test_tup[0];\n    var t_2 = test_tup[1];\n    var t_3 = test_tup[2];\n    var t_4 = test_tup[3];\n    var t_5 = test_tup[4];\n    var t_6 = test_tup[5];\n    var t_7 = test_tup[6];\n    var t_8 = test_tup[7];\n    var t_9 = test_tup[8];\n    var t_10 = test_tup[9];\n    var t_11 = test_tup[10];\n    var t_12 = test_tup[11];\n    var t_13 = test_tup[12];\n    var t_14 = test_tup[13];\n    var t_15 = test_tup[14];\n    var t_16 = test_tup[15];\n    var t_17 = test_tup[16];\n    var t_18 = test_tup[17];\n    var t_19 = test_tup[18];\n    var t_20 = test_tup[19];\n    var t_21 = test_tup[20];\n    var t_22 = test_tup[21];\n    var t_23 = test_tup[22];\n    var t_24 = test_tup[23];\n    var t_25 = test_tup[24];\n    var t_26 = test_tup[25];\n    var t_27 = test_tup[26];\n    var t_28 = test_tup[27];\n    var t_29 = test_tup[28];\n    var t_30 = test_tup[29];\n    var t_31 = test_tup[30];\n    var t_32 = test_tup[31\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiply_elements;",
            "assert.deepEqual(candidate([1, 5, 7, 8, 10]),[5, 35, 56, 80]);",
            "assert.deepEqual(candidate([2, 4, 5, 6, 7]),[8, 20, 30, 42]);",
            "assert.deepEqual(candidate([12, 13, 14, 9, 15]),[156, 182, 126, 135]);",
            "assert.deepEqual(candidate([12]),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "function sum_list(lst1, lst2){\n    var sum = 0;\n    for(var i=0; i<lst1.length; i++){\n        sum += lst1[i] + lst2[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_list;",
            "assert.deepEqual(candidate([10, 20, 30], [15, 25, 35]),[25, 45, 65]);",
            "assert.deepEqual(candidate([1, 2, 3], [5, 6, 7]),[6, 8, 10]);",
            "assert.deepEqual(candidate([15, 20, 30], [15, 45, 75]),[30, 65, 105]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a jsthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "function dif_Square(n){\n    if(n==0) return 0;\n    if(n==1) return 1;\n    if(n==2) return 2;\n    if(n==3) return 3;\n    if(n==4) return 4;\n    if(n==5) return 5;\n    if(n==6) return 6;\n    if(n==7) return 7;\n    if(n==8) return 8;\n    if(n==9) return 9;\n    if(n==10) return 10;\n    if(n==11) return 11;\n    if(n==12) return 12;\n    if(n==13) return 13;\n    if(n==14) return 14;\n    if(n==15) return 15;\n    if(n==16) return 16;\n    if(n==17) return 17;\n    if(n==18) return 18;\n    if(n==19) return 19;\n    if(n==20) return 20;\n    if(n==21) return 21;\n    if(n==22) return 22;\n    if(n==23) return 23;\n    if(n==24) return 24;\n    if(n==25) return 25;\n    if(n==26) return 26;\n    if(n==27) return 27;\n    if(n==28) return 28;\n    if(n==29) return 29;\n    if(n==30) return 30;\n    if(n==31) return 31;\n    if(n==32) return 32;\n    if(n==33) return 33;\n    if(n==34) return 34;\n    if(n==35) return 35;\n    if(n==36) return 36;\n    if(n==37) return 37;\n    if(n==38) return 38;\n    if(n==39) return 39;\n    if(n==40) return 40;\n    if(n==41) return 41;\n    if(n==42) return 42;\n    if(n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dif_Square;",
            "assert.deepEqual(candidate(5),true);",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(15),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given array.",
        "code": "function consecutive_duplicates(nums){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        if(i == nums.length - 1){\n            result.push(nums[i]);\n        }\n        else{\n            result.push(nums[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = consecutive_duplicates;",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[10, 15, 19, 18, 17, 26, 17, 18, 10]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[\"a\", \"b\", \"c\", \"d\"]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]),[\"a\", \"b\", \"c\", \"d\", \"a\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "function lateralsurface_cone(r, h){\n    var r2 = r*r;\n    var h2 = h*h;\n    var r3 = r2*r2;\n    var h3 = h2*h2;\n    var r4 = r3*r3;\n    var h4 = h3*h3;\n    var r5 = r4*r4;\n    var h5 = h4*h4;\n    var r6 = r5*r5;\n    var h6 = h5*h5;\n    var r7 = r6*r6;\n    var h7 = h6*h6;\n    var r8 = r7*r7;\n    var h8 = h7*h7;\n    var r9 = r8*r8;\n    var h9 = h8*h8;\n    var r10 = r9*r9;\n    var h10 = h9*h9;\n    var r11 = r10*r10;\n    var h11 = h10*h10;\n    var r12 = r11*r11;\n    var h12 = h11*h11;\n    var r13 = r12*r12;\n    var h13 = h12*h12;\n    var r14 = r13*r13;\n    var h14 = h13*h13;\n    var r15 = r14*r14;\n    var h15 = h14*h14;\n    var r16 = r15*r15;\n    var h16 = h15*h15;\n    var r17 = r16*r16;\n    var h17 = h16*h16;\n    var r18 = r17*r17;\n    var h18 = h17*h17;\n    var r19 = r18*r18;\n    var h19 = h18*h18;\n    var r20 = r19*r19;\n    var h20 = h19*h19;\n    var r21 = r20*r20;\n    var h21 = h20*h20;\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lateralsurface_cone;",
            "assert.deepEqual(candidate(5, 12),204.20352248333654);",
            "assert.deepEqual(candidate(10, 15),566.3586699569488);",
            "assert.deepEqual(candidate(19, 17),1521.8090132193388);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "function replace_specialchar(text){\n    var re = /[\\s\\,\\(\\)\\[\\]\\{\\}\\<\\>\\|\\{]/g;\n    var text = text.replace(re, ':');\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_specialchar;",
            "assert.deepEqual(candidate(\"Python language, Programming language.\"),\"Python:language::Programming:language:\");",
            "assert.deepEqual(candidate(\"a b c,d e f\"),\"a:b:c:d:e:f\");",
            "assert.deepEqual(candidate(\"ram reshma,ram rahim\"),\"ram:reshma:ram:rahim\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "function find_first_occurrence(A, x){\n    var i = 0;\n    var j = A.length - 1;\n    while(i < j){\n        if(A[i] == x){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_first_occurrence;",
            "assert.deepEqual(candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1);",
            "assert.deepEqual(candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2);",
            "assert.deepEqual(candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a jsthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "function sum_Of_Subarray_Prod(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_Of_Subarray_Prod;",
            "assert.deepEqual(candidate([1, 2, 3]),20);",
            "assert.deepEqual(candidate([1, 2]),5);",
            "assert.deepEqual(candidate([1, 2, 3, 4]),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a jsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "function toggle_middle_bits(n){\n    var middle_bits = n % 2;\n    var first_bit = (middle_bits == 0)? 1 : 0;\n    var last_bit = (middle_bits == 1)? 1 : 0;\n    return first_bit + last_bit;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = toggle_middle_bits;",
            "assert.deepEqual(candidate(9),15);",
            "assert.deepEqual(candidate(10),12);",
            "assert.deepEqual(candidate(11),13);",
            "assert.deepEqual(candidate(65),127);",
            "assert.deepEqual(candidate(77),115);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-data-structure-exercise-24.php",
        "code": "function left_insertion(a, x){\n    var i = 0;\n    var j = a.length - 1;\n    while (i < j) {\n        if (a[i] < x) {\n            i++;\n        } else if (a[i] > x) {\n            j--;\n        } else {\n            return i;\n        }\n    }\n    return i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = left_insertion;",
            "assert.deepEqual(candidate([1, 2, 4, 5], 6),4);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 3),2);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 7),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "function check_str(string){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var regex = new RegExp(\"^\" + vowels.join(\"\"));\n    return string.match(regex);\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_str;",
            "assert.deepEqual(candidate(\"annie\"),true);",
            "assert.deepEqual(candidate(\"dawood\"),false);",
            "assert.deepEqual(candidate(\"Else\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/jsthon-exercises/data-structures-and-algorithms/jsthon-recursion-exercise-9.php",
        "code": "function geometric_sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * Math.pow(i, n - i);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = geometric_sum;",
            "assert.deepEqual(candidate(7),1.9921875);",
            "assert.deepEqual(candidate(4),1.9375);",
            "assert.deepEqual(candidate(8),1.99609375);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a jsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "function find_Index(n){\n    var i = 0;\n    var j = n;\n    while(i < j){\n        if(n % i == 0 && n % j == 0){\n            return i;\n        }\n        i++;\n        j--;\n    }\n    return -1;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Index;",
            "assert.deepEqual(candidate(2),4);",
            "assert.deepEqual(candidate(3),14);",
            "assert.deepEqual(candidate(4),45);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given array to a key-value object using adjacent elements. https://www.geeksforgeeks.org/jsthon-convert-array-to-adjacent-pair-object/",
        "code": "function tuple_to_dict(test_tup){\n    var test_tuple = test_tup[0];\n    var test_array = test_tup[1];\n    var test_key = test_tuple[0];\n    var test_value = test_tuple[1];\n    var test_key_value = {};\n    test_key_value[test_key] = test_value;\n    return test_key_value;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_to_dict;",
            "assert.deepEqual(candidate([1, 5, 7, 10, 13, 5]),{1: 5, 7: 10, 13: 5});",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),{1: 2, 3: 4, 5: 6});",
            "assert.deepEqual(candidate([7, 8, 9, 10, 11, 12]),{7: 8, 9: 10, 11: 12});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a jsthon function to check whether all the characters are same or not.",
        "code": "function all_Characters_Same(s){\n    var result = true;\n    for(var i = 0; i < s.length; i++){\n        if(s.charAt(i)!= s.charAt(i)){\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_Characters_Same;",
            "assert.deepEqual(candidate(\"python\"),false);",
            "assert.deepEqual(candidate(\"aaa\"),true);",
            "assert.deepEqual(candidate(\"data\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "function area_tetrahedron(side){\n    var x = side[0];\n    var y = side[1];\n    var z = side[2];\n    var a = x*x + y*y + z*z;\n    var b = x*y + z*x + y*z;\n    var c = x*z + y*y + x*x;\n    var d = x*y + z*z + x*x;\n    var e = x*z + y*y + z*z;\n    var f = x*y + z*z + y*y;\n    var g = x*z + y*y + z*z;\n    var h = x*y + z*z + y*y;\n    var i = x*x + y*y + z*z;\n    var j = x*y + z*z + y*y;\n    var k = x*z + y*y + z*z;\n    var l = x*y + z*z + y*y;\n    var m = x*z + y*y + z*z;\n    var n = x*y + z*z + y*y;\n    var o = x*z + y*y + z*z;\n    var p = x*y + z*z + y*y;\n    var q = x*z + y*y + z*z;\n    var r = x*y + z*z + y*y;\n    var s = x*z + y*y + z*z;\n    var t = x*y + z*z + y*y;\n    var u = x*z + y*y + z*z;\n    var v = x*y + z*z + y*y;\n    var w = x*y + z*z + y*y;\n    var x1 = a*a - b*b;\n    var x2 = a*b - c*c;\n    var x3 = a*c - d*d;\n    var x4 = a*d - e*e;\n    var x5 = a*e\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = area_tetrahedron;",
            "assert.deepEqual(candidate(3),15.588457268119894);",
            "assert.deepEqual(candidate(20),692.8203230275509);",
            "assert.deepEqual(candidate(10),173.20508075688772);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/jsthon-program-right-rotate-array-n/",
        "code": "function rotate_right(list, m){\n    var n = list.length;\n    var i = n - 1;\n    var j = n - 1;\n    var temp = list[i];\n    list[i] = list[j];\n    list[j] = temp;\n    for(var k = 0; k < m; k++){\n        if(i == j){\n            list[i] = list[i+1];\n            list[i+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[i+1];\n            list[i+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[i+1];\n            list[i+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[i+1];\n            list[i+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[j+1];\n            list[j+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[j+1];\n            list[j+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[j+1];\n            list[j+1] = list[i];\n            list[i] = list[j];\n            list[j] = list[i];\n            list[i] = list[j+1];\n            list[j+1] = list[i];\n            list[i] = list[j];\n            list[\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rotate_right;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given array has any none value or not.",
        "code": "function check_none(test_tup){\n    var test_array = test_tup[0];\n    var test_array_length = test_tup[1];\n    var test_array_length_check = test_tup[2];\n    var test_array_length_check_check = test_tup[3];\n    var test_array_length_check_check_check = test_tup[4];\n    var test_array_length_check_check_check_check = test_tup[5];\n    var test_array_length_check_check_check_check_check = test_tup[6];\n    var test_array_length_check_check_check_check_check_check = test_tup[7];\n    var test_array_length_check_check_check_check_check_check_check = test_tup[8];\n    var test_array_length_check_check_check_check_check_check_check_check = test_tup[9];\n    var test_array_length_check_check_check_check_check_check_check_check_check = test_tup[10];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check = test_tup[11];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check = test_tup[12];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check = test_tup[13];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check_check = test_tup[14];\n    var test_array_length_check_check_check_check_check_check_check_check_check_check_check_check_check_check_check = test_tup[15];\n    var test_array_length_check_check_check_check_check\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_none;",
            "assert.deepEqual(candidate([10, 4, 5, 6, undefined]),true);",
            "assert.deepEqual(candidate([7, 8, 9, 11, 14]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, undefined]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/jsthon-exercises/lambda/jsthon-lambda-exercise-24.php",
        "code": "function divisible_by_digits(startnum, endnum){\n    var result = [];\n    for(var i = startnum; i <= endnum; i++){\n        if(i % 10 == 0){\n            result.push(i);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = divisible_by_digits;",
            "assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);",
            "assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);",
            "assert.deepEqual(candidate(20, 25),[22, 24]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return undefined if the angle is larger than 360 degrees.",
        "code": "function sector_area(r, a){\n\tvar r2 = r * r;\n\tvar r3 = r2 * r;\n\tvar r4 = r3 * r;\n\tvar r5 = r4 * r;\n\tvar r6 = r5 * r;\n\tvar r7 = r6 * r;\n\tvar r8 = r7 * r;\n\tvar r9 = r8 * r;\n\tvar r10 = r9 * r;\n\tvar r11 = r10 * r;\n\tvar r12 = r11 * r;\n\tvar r13 = r12 * r;\n\tvar r14 = r13 * r;\n\tvar r15 = r14 * r;\n\tvar r16 = r15 * r;\n\tvar r17 = r16 * r;\n\tvar r18 = r17 * r;\n\tvar r19 = r18 * r;\n\tvar r20 = r19 * r;\n\tvar r21 = r20 * r;\n\tvar r22 = r21 * r;\n\tvar r23 = r22 * r;\n\tvar r24 = r23 * r;\n\tvar r25 = r24 * r;\n\tvar r26 = r25 * r;\n\tvar r27 = r26 * r;\n\tvar r28 = r27 * r;\n\tvar r29 = r28 * r;\n\tvar r30 = r29 * r;\n\tvar r31 = r30 * r;\n\tvar r32 = r31 * r;\n\tvar r33 = r32 * r;\n\tvar r34 = r33 * r;\n\tvar r35 = r34 * r;\n\tvar r36 = r35 * r;\n\tvar r37 = r36 * r;\n\tvar r38 = r37 * r;\n\tvar r39 = r38 * r;\n\tvar r40 = r39 * r;\n\tvar r41 = r40 * r;\n\tvar r42 = r41 * r;\n\tvar r43 = r42 * r;\n\tvar r44 = r\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sector_area;",
            "assert.deepEqual(candidate(4, 45),6.283185307179586);",
            "assert.deepEqual(candidate(9, 45),31.808625617596654);",
            "assert.deepEqual(candidate(9, 361),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "function lcs_of_three(X, Y, Z){\n    var x = X.length, y = Y.length, z = Z.length;\n    var lcs = [];\n    for(var i = 0; i < x; i++){\n        for(var j = 0; j < y; j++){\n            for(var k = 0; k < z; k++){\n                if(X[i] == Y[j] && X[i] == Z[k]){\n                    lcs.push(i);\n                    break;\n                }\n            }\n        }\n    }\n    return lcs;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lcs_of_three;",
            "assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);",
            "assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);",
            "assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "function capital_words_spaces(str1){\n    var str2 = str1.split(\" \");\n    var str3 = str2.join(\" \");\n    return str3;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = capital_words_spaces;",
            "assert.deepEqual(candidate(\"Python\"),\"Python\");",
            "assert.deepEqual(candidate(\"PythonProgrammingExamples\"),\"Python Programming Examples\");",
            "assert.deepEqual(candidate(\"GetReadyToBeCodingFreak\"),\"Get Ready To Be Coding Freak\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/jsthon-sort-numeric-strings-in-a-array/",
        "code": "function sort_numeric_strings(nums_str){\n    var nums = nums_str.split('');\n    var nums_arr = [];\n    for(var i = 0; i < nums.length; i++){\n        nums_arr.push(nums[i]);\n    }\n    nums_arr.sort(function(a, b){\n        return a - b;\n    });\n    return nums_arr.join('');\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_numeric_strings;",
            "assert.deepEqual(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]),[-500, -12, 0, 4, 7, 12, 45, 100, 200]);",
            "assert.deepEqual(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]),[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);",
            "assert.deepEqual(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]),[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "function is_samepatterns(colors, patterns){\n    var i, j, len, pattern, pattern_len, pattern_len_i, pattern_len_j, pattern_len_k, pattern_len_l, pattern_len_m, pattern_len_n, pattern_len_o, pattern_len_p, pattern_len_q, pattern_len_r, pattern_len_s, pattern_len_t, pattern_len_u, pattern_len_v, pattern_len_w, pattern_len_x, pattern_len_y, pattern_len_z, pattern_len_a, pattern_len_b, pattern_len_c, pattern_len_d, pattern_len_e, pattern_len_f, pattern_len_g, pattern_len_h, pattern_len_i, pattern_len_j, pattern_len_k, pattern_len_l, pattern_len_m, pattern_len_n, pattern_len_o, pattern_len_p, pattern_len_q, pattern_len_r, pattern_len_s, pattern_len_t, pattern_len_u, pattern_len_v, pattern_len_w, pattern_len_x, pattern_len_y, pattern_len_z, pattern_len_a, pattern_len_b, pattern_len_c, pattern_len_d, pattern_len_e, pattern_len_f, pattern_len_g, pattern_len_h, pattern_len_i, pattern_len_j, pattern_len_k, pattern_len_l, pattern_len_m, pattern_len_n, pattern_len_o, pattern_len_p, pattern_len_q, pattern_len_r, pattern_len_s, pattern_len_t, pattern_len_u, pattern_len_v, pattern_len_w, pattern_len_x, pattern_len_y, pattern_len_z, pattern_len_a, pattern_len_b, pattern_len_c, pattern_len_d, pattern_len_e, pattern_len_f, pattern_len_g, pattern_len_h\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_samepatterns;",
            "assert.deepEqual(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]),true);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]),false);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given array to the given array.",
        "code": "function add_tuple(test_list, test_tup){\n    var test_tuple = test_tup.slice(0);\n    test_list.push(test_tuple);\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_tuple;",
            "assert.deepEqual(candidate([5, 6, 7], [9, 10]),[5, 6, 7, 9, 10]);",
            "assert.deepEqual(candidate([6, 7, 8], [10, 11]),[6, 7, 8, 10, 11]);",
            "assert.deepEqual(candidate([7, 8, 9], [11, 12]),[7, 8, 9, 11, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "function check_min_heap(arr){\n    var min_heap = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < arr[i+1]){\n            min_heap.push(arr[i]);\n        }\n    }\n    return min_heap;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_min_heap;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 10, 15]),true);",
            "assert.deepEqual(candidate([2, 10, 4, 5, 3, 15]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "function jacobsthal_num(n){\n    var jacobsthal = 0;\n    for(var i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            jacobsthal += i;\n        }\n    }\n    return jacobsthal;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = jacobsthal_num;",
            "assert.deepEqual(candidate(5),11);",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(4),5);",
            "assert.deepEqual(candidate(13),2731);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/jsthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cojs of test cases",
        "code": "function min_k(test_list, K){\n    var min_k = test_list[0];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i] < min_k){\n            min_k = test_list[i];\n        }\n    }\n    return min_k;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_k;",
            "assert.deepEqual(candidate([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]]);",
            "assert.deepEqual(candidate([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]]);",
            "assert.deepEqual(candidate([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.",
        "code": "function extract_index_list(l1, l2, l3){\n    var index_list = [];\n    for(var i=0; i<l1.length; i++){\n        for(var j=0; j<l2.length; j++){\n            for(var k=0; k<l3.length; k++){\n                if(l1[i]==l2[j]&&l1[i]==l3[k]){\n                    index_list.push(i);\n                }\n            }\n        }\n    }\n    return index_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_index_list;",
            "assert.deepEqual(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 7]);",
            "assert.deepEqual(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]),[1, 6]);",
            "assert.deepEqual(candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in an array.",
        "code": "function second_smallest(numbers){\n    var smallest = numbers[0];\n    for(var i = 1; i < numbers.length; i++){\n        if(smallest < numbers[i]){\n            smallest = numbers[i];\n        }\n    }\n    return smallest;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = second_smallest;",
            "assert.deepEqual(candidate([1, 2, -8, -2, 0, -2]),-2);",
            "assert.deepEqual(candidate([1, 1, -0.5, 0, 2, -2, -2]),-0.5);",
            "assert.deepEqual(candidate([2, 2]),undefined);",
            "assert.deepEqual(candidate([2, 2, 2]),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/jsthon-exercises/re/jsthon-re-exercise-3.php",
        "code": "function text_match_zero_one(text){\n    var match = text.match(/^(a|b)$/);\n    if(match){\n        return match[0];\n    }\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_zero_one;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "assert.deepEqual(candidate(\"dsabbbba\"),true);",
            "assert.deepEqual(candidate(\"asbbbba\"),false);",
            "assert.deepEqual(candidate(\"abaaa\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/jsthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "function count_reverse_pairs(test_list){\n    var test_list_length = test_list.length;\n    var test_list_i = 0;\n    var test_list_j = 0;\n    var test_list_k = 0;\n    var test_list_l = 0;\n    var test_list_m = 0;\n    var test_list_n = 0;\n    var test_list_o = 0;\n    var test_list_p = 0;\n    var test_list_q = 0;\n    var test_list_r = 0;\n    var test_list_s = 0;\n    var test_list_t = 0;\n    var test_list_u = 0;\n    var test_list_v = 0;\n    var test_list_w = 0;\n    var test_list_x = 0;\n    var test_list_y = 0;\n    var test_list_z = 0;\n    var test_list_a = 0;\n    var test_list_b = 0;\n    var test_list_c = 0;\n    var test_list_d = 0;\n    var test_list_e = 0;\n    var test_list_f = 0;\n    var test_list_g = 0;\n    var test_list_h = 0;\n    var test_list_i = 0;\n    var test_list_j = 0;\n    var test_list_k = 0;\n    var test_list_l = 0;\n    var test_list_m = 0;\n    var test_list_n = 0;\n    var test_list_o = 0;\n    var test_list_p = 0;\n    var test_list_q = 0;\n    var test_list_r = 0;\n    var test_list_s = 0;\n    var test_list_t = 0;\n    var test_list_u = 0;\n    var test_list\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_reverse_pairs;",
            "assert.deepEqual(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]),2);",
            "assert.deepEqual(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]),1);",
            "assert.deepEqual(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "function is_decimal(num){\n    var is_decimal = false;\n    var is_integer = false;\n    var is_float = false;\n    var is_number = false;\n    var is_string = false;\n    var is_integer_or_float = false;\n    var is_float_or_integer = false;\n    var is_string_or_integer = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or_float = false;\n    var is_integer_or_float = false;\n    var is_string_or_float = false;\n    var is_number_or\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_decimal;",
            "assert.deepEqual(candidate(\"123.11\"),true);",
            "assert.deepEqual(candidate(\"e666.86\"),false);",
            "assert.deepEqual(candidate(\"3.124587\"),false);",
            "assert.deepEqual(candidate(\"1.11\"),true);",
            "assert.deepEqual(candidate(\"1.1.11\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find arrays which have all elements divisible by k from the given array of arrays.",
        "code": "function find_tuples(test_list, K){\n    var tuples = [];\n    for(var i = 0; i < test_list.length; i++){\n        var test_array = test_list[i];\n        var test_array_length = test_array.length;\n        for(var j = 0; j < test_array_length; j++){\n            if(test_array[j] % K == 0){\n                tuples.push(test_array);\n            }\n        }\n    }\n    return tuples;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_tuples;",
            "assert.deepEqual(candidate([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6),[[6, 24, 12]]);",
            "assert.deepEqual(candidate([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5),[[5, 25, 30]]);",
            "assert.deepEqual(candidate([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4),[[8, 16, 4]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a jsthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "function unique_Element(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] === arr[i]){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = unique_Element;",
            "assert.deepEqual(candidate([1, 1, 1]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "function check_monthnumber_number(monthnum3){\n    var monthnum = monthnum3.toString();\n    var monthnum2 = monthnum.substring(0,2);\n    var monthnum3 = monthnum.substring(2,4);\n    var monthnum4 = monthnum.substring(4,6);\n    var monthnum5 = monthnum.substring(6,8);\n    var monthnum6 = monthnum.substring(8,10);\n    var monthnum7 = monthnum.substring(10,12);\n    var monthnum8 = monthnum.substring(12,14);\n    var monthnum9 = monthnum.substring(14,16);\n    var monthnum10 = monthnum.substring(16,18);\n    var monthnum11 = monthnum.substring(18,20);\n    var monthnum12 = monthnum.substring(20,22);\n    var monthnum13 = monthnum.substring(22,24);\n    var monthnum14 = monthnum.substring(24,26);\n    var monthnum15 = monthnum.substring(26,28);\n    var monthnum16 = monthnum.substring(28,30);\n    var monthnum17 = monthnum.substring(30,32);\n    var monthnum18 = monthnum.substring(32,34);\n    var monthnum19 = monthnum.substring(34,36);\n    var monthnum20 = monthnum.substring(36,38);\n    var monthnum21 = monthnum.substring(38,40);\n    var monthnum22 = monthnum.substring(40,42);\n    var monthnum23 = monthnum.substring(42,44);\n    var monthnum24 = monthnum.substring(44,46);\n    var monthnum25 = monthnum.substring(46,48);\n    var monthnum26 = monthnum.substring(48,50);\n    var monthnum27 = monthnum.substring(50,52);\n    var monthnum28 = monthnum.substring(52,54);\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_monthnumber_number;",
            "assert.deepEqual(candidate(6),true);",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(12),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a jsthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "function find_min_diff(arr, n){\n    var min = arr[0];\n    var max = arr[0];\n    for(var i = 1; i < n; i++){\n        if(arr[i] < min){\n            min = arr[i];\n        }\n        if(arr[i] > max){\n            max = arr[i];\n        }\n    }\n    return min - max;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_min_diff;",
            "assert.deepEqual(candidate([1, 5, 3, 19, 18, 25], 6),1);",
            "assert.deepEqual(candidate([4, 3, 2, 6], 4),1);",
            "assert.deepEqual(candidate([30, 5, 20, 9], 4),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a jsthon function to count number of digits in a given string.",
        "code": "function number_ctr(str){\n    var num = 0;\n    for(var i = 0; i < str.length; i++){\n        if(str.charAt(i) == '0'){\n            num++;\n        }\n    }\n    return num;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = number_ctr;",
            "assert.deepEqual(candidate(\"program2bedone\"),1);",
            "assert.deepEqual(candidate(\"3wonders\"),1);",
            "assert.deepEqual(candidate(\"123\"),3);",
            "assert.deepEqual(candidate(\"3wond-1ers2\"),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "function is_polite(n){\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n==3) return true;\n    if(n==4) return true;\n    if(n==5) return true;\n    if(n==6) return true;\n    if(n==7) return true;\n    if(n==8) return true;\n    if(n==9) return true;\n    if(n==10) return true;\n    if(n==11) return true;\n    if(n==12) return true;\n    if(n==13) return true;\n    if(n==14) return true;\n    if(n==15) return true;\n    if(n==16) return true;\n    if(n==17) return true;\n    if(n==18) return true;\n    if(n==19) return true;\n    if(n==20) return true;\n    if(n==21) return true;\n    if(n==22) return true;\n    if(n==23) return true;\n    if(n==24) return true;\n    if(n==25) return true;\n    if(n==26) return true;\n    if(n==27) return true;\n    if(n==28) return true;\n    if(n==29) return true;\n    if(n==30) return true;\n    if(n==31) return true;\n    if(n==32) return true;\n    if(n==33) return true;\n    if(n==34) return true;\n    if(n==35) return true;\n    if(n==36) return true;\n    if(n==37) return true;\n    if(n==38) return true;\n    if(n==39) return true;\n    if(n==40) return true;\n    if(n==41) return true;\n    if(n==42) return true;\n    if(n==43) return true;\n    if\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_polite;",
            "assert.deepEqual(candidate(7),11);",
            "assert.deepEqual(candidate(4),7);",
            "assert.deepEqual(candidate(9),13);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "function pair_wise(l1){\n    var l2 = [];\n    for(var i = 0; i < l1.length; i++){\n        l2.push(l1[i]);\n    }\n    return l2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pair_wise;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);",
            "assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a jsthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "function get_pairs_count(arr, sum){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == sum){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_pairs_count;",
            "assert.deepEqual(candidate([1, 1, 1, 1], 2),6);",
            "assert.deepEqual(candidate([1, 5, 7, -1, 5], 6),3);",
            "assert.deepEqual(candidate([1, -2, 3], 1),1);",
            "assert.deepEqual(candidate([-1, -2, 3], -3),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a jsthon function to get the difference between two arrays.",
        "code": "function Diff(li1, li2){\n    var diff = [];\n    for(var i = 0; i < li1.length; i++){\n        diff.push(li1[i] - li2[i]);\n    }\n    return diff;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Diff;",
            "assert.deepEqual(candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]),[10, 20, 30, 15]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 1]),[2, 3, 4, 5, 6, 7]);",
            "assert.deepEqual(candidate([1, 2, 3], [6, 7, 1]),[2, 3, 6, 7]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a jsthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "function odd_num_sum(n){\n    var sum = 0;\n    for(var i = 1; i <= n; i++){\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_num_sum;",
            "assert.deepEqual(candidate(2),82);",
            "assert.deepEqual(candidate(3),707);",
            "assert.deepEqual(candidate(4),3108);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "function check_expression(exp){\n    var result = true;\n    var stack = [];\n    var stack_length = 0;\n    var stack_index = 0;\n    var stack_index_max = 0;\n    var stack_index_min = 0;\n    var stack_index_min_max = 0;\n    var stack_index_min_max_length = 0;\n    var stack_index_min_max_length_length = 0;\n    var stack_index_min_max_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length_length_length_length_length = 0;\n    var stack_index_min_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_expression;",
            "assert.deepEqual(candidate(\"{()}[{}]\"),true);",
            "assert.deepEqual(candidate(\"{()}[{]\"),false);",
            "assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "function remove_length(test_str, K){\n    var test_str_len = test_str.length;\n    var test_str_k = K;\n    var test_str_len_k = test_str_len;\n    var test_str_k_len = test_str_len;\n    var test_str_k_len_len = test_str_len;\n    var test_str_k_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = test_str_len;\n    var test_str_k_len_len_len_len_len\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_length;",
            "assert.deepEqual(candidate(\"The person is most value tet\", 3),\"person is most value\");",
            "assert.deepEqual(candidate(\"If you told me about this ok\", 4),\"If you me about ok\");",
            "assert.deepEqual(candidate(\"Forces of darkeness is come into the play\", 4),\"Forces of darkeness is the\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return undefined if there is no match.",
        "code": "function occurance_substring(text, pattern){\n    var match = text.match(pattern);\n    if(match){\n        return match[0];\n    }\n    return undefined;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = occurance_substring;",
            "assert.deepEqual(candidate(\"python programming, python language\", \"python\"),[\"python\", 0, 6]);",
            "assert.deepEqual(candidate(\"python programming,programming language\", \"programming\"),[\"programming\", 7, 18]);",
            "assert.deepEqual(candidate(\"python programming,programming language\", \"language\"),[\"language\", 31, 39]);",
            "assert.deepEqual(candidate(\"c++ programming, c++ language\", \"python\"),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a jsthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "function odd_position(nums){\n    var odd = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] % 2 == 1){\n            odd += 1;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_position;",
            "assert.deepEqual(candidate([2, 1, 4, 3, 6, 7, 6, 3]),true);",
            "assert.deepEqual(candidate([4, 1, 2]),true);",
            "assert.deepEqual(candidate([1, 2, 3]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "function count_vowels(test_str){\n    var count = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str.charAt(i) == 'a'){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_vowels;",
            "assert.deepEqual(candidate(\"bestinstareels\"),7);",
            "assert.deepEqual(candidate(\"partofthejourneyistheend\"),12);",
            "assert.deepEqual(candidate(\"amazonprime\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a jsthon function to find the sum of non-repeated elements in a given array.",
        "code": "function find_sum(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]!= null){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_sum;",
            "assert.deepEqual(candidate([1, 2, 3, 1, 1, 4, 5, 6]),21);",
            "assert.deepEqual(candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]),71);",
            "assert.deepEqual(candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]),78);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given array elements into subarrays.",
        "code": "function pack_consecutive_duplicates(list1){\n    var list2 = [];\n    for(var i = 0; i < list1.length; i++){\n        if(i == list1.length - 1){\n            list2.push(list1[i]);\n        }\n        else{\n            list2.push(list1[i]);\n        }\n    }\n    return list2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pack_consecutive_duplicates;",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a jsthon function to find whether a number is divisible by 11.",
        "code": "function is_Diff(n){\n    var result = false;\n    var i = 0;\n    while(i < n){\n        if(n % i == 0){\n            result = true;\n            break;\n        }\n        i++;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Diff;",
            "assert.deepEqual(candidate(12345),false);",
            "assert.deepEqual(candidate(1212112),true);",
            "assert.deepEqual(candidate(1212),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/jsthon-combinations-of-sum-with-arrays-in-array-array/",
        "code": "function find_combinations(test_list){\n    var test_list_length = test_list.length;\n    var test_list_array = new Array(test_list_length);\n    for(var i = 0; i < test_list_length; i++){\n        test_list_array[i] = test_list[i];\n    }\n    var combination_array = new Array(test_list_length);\n    for(var i = 0; i < test_list_length; i++){\n        combination_array[i] = test_list_array[i];\n    }\n    var combination_array_length = combination_array.length;\n    var combination_array_array = new Array(combination_array_length);\n    for(var i = 0; i < combination_array_length; i++){\n        combination_array_array[i] = combination_array[i];\n    }\n    var combination_array_array_length = combination_array_array.length;\n    var combination_array_array_array = new Array(combination_array_array_length);\n    for(var i = 0; i < combination_array_array_array_length; i++){\n        combination_array_array_array[i] = combination_array_array_array[i];\n    }\n    var combination_array_array_array_length = combination_array_array_array.length;\n    var combination_array_array_array_array = new Array(combination_array_array_array_length);\n    for(var i = 0; i < combination_array_array_array_array_length; i++){\n        combination_array_array_array_array[i] = combination_array_array_array_array[i];\n    }\n    var combination_array_array_array_array_length = combination_array_array_array_array.length;\n    var combination_array_array_array_array_array = new Array(\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_combinations;",
            "assert.deepEqual(candidate([[2, 4], [6, 7], [5, 1], [6, 10]]),[[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]);",
            "assert.deepEqual(candidate([[3, 5], [7, 8], [6, 2], [7, 11]]),[[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]);",
            "assert.deepEqual(candidate([[4, 6], [8, 9], [7, 3], [8, 12]]),[[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a jsthon function to check whether the count of divisors is even. https://www.w3resource.com/jsthon-exercises/basic/jsthon-basic-1-exercise-24.php",
        "code": "function count_divisors(n){\n    var count = 0;\n    for(var i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_divisors;",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(100),false);",
            "assert.deepEqual(candidate(125),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a jsthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "function odd_length_sum(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 1){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_length_sum;",
            "assert.deepEqual(candidate([1, 2, 4]),14);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),15);",
            "assert.deepEqual(candidate([1, 7]),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "function rgb_to_hsv(r, g, b){\n    var h = 0, s = 0, v = 0;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var max_v = max;\n    var max_h = max;\n    var min_v = min;\n    var min_h = min;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var t = 0;\n    var r_v = max_v - min_v;\n    var g_v = max_h - min_h;\n    var b_v = max_v + min_v;\n    var r_h = max_h - min_h;\n    var g_h = max_h + min_h;\n    var b_h = max_h + min_h;\n    var r_v_h = r_v * g_v;\n    var g_v_h = g_v * b_v;\n    var b_v_h = b_v * r_v;\n    var r_h_h = r_h * g_h;\n    var g_h_h = g_h * b_h;\n    var b_h_h = b_h * r_h;\n    var r_v_h_h = r_v_h * g_v_h;\n    var g_v_h_h = g_v_h * b_v_h;\n    var b_v_h_h = b_v_h * r_v_h;\n    var r_h_h_h = r_h_h * g_h_h;\n    var g_h_h_h = g_h_h * b_h_h;\n    var b\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rgb_to_hsv;",
            "assert.deepEqual(candidate(255, 255, 255),[0.0, 0.0, 100.0]);",
            "assert.deepEqual(candidate(0, 215, 0),[120.0, 100.0, 84.31372549019608]);",
            "assert.deepEqual(candidate(10, 215, 110),[149.26829268292684, 95.34883720930233, 84.31372549019608]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array.",
        "code": "function mul_even_odd(list1){\n    var list2 = list1.slice(0,1);\n    var list3 = list1.slice(1,2);\n    var list4 = list1.slice(2,3);\n    var list5 = list1.slice(3,4);\n    var list6 = list1.slice(4,5);\n    var list7 = list1.slice(5,6);\n    var list8 = list1.slice(6,7);\n    var list9 = list1.slice(7,8);\n    var list10 = list1.slice(8,9);\n    var list11 = list1.slice(9,10);\n    var list12 = list1.slice(10,11);\n    var list13 = list1.slice(11,12);\n    var list14 = list1.slice(12,13);\n    var list15 = list1.slice(13,14);\n    var list16 = list1.slice(14,15);\n    var list17 = list1.slice(15,16);\n    var list18 = list1.slice(16,17);\n    var list19 = list1.slice(17,18);\n    var list20 = list1.slice(18,19);\n    var list21 = list1.slice(19,20);\n    var list22 = list1.slice(20,21);\n    var list23 = list1.slice(21,22);\n    var list24 = list1.slice(22,23);\n    var list25 = list1.slice(23,24);\n    var list26 = list1.slice(24,25);\n    var list27 = list1.slice(25,26);\n    var list28 = list1.slice(26,27);\n    var list29 = list1.slice(27,28);\n    var list30 = list1.slice(28,29);\n    var list31 = list1.slice(29,30);\n    var list32 = list1.slice(30,31);\n    var list33 = list1.slice(31,32);\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = mul_even_odd;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert array string to integer array.",
        "code": "function tuple_str_int(test_str){\n    var test_str_array = test_str.split(',');\n    var test_str_array_length = test_str_array.length;\n    var test_str_array_i = [];\n    for(var i = 0; i < test_str_array_length; i++){\n        test_str_array_i.push(parseInt(test_str_array[i]));\n    }\n    return test_str_array_i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_str_int;",
            "assert.deepEqual(candidate(\"(7, 8, 9)\"),[7, 8, 9]);",
            "assert.deepEqual(candidate(\"(1, 2, 3)\"),[1, 2, 3]);",
            "assert.deepEqual(candidate(\"(4, 5, 6)\"),[4, 5, 6]);",
            "assert.deepEqual(candidate(\"(7, 81, 19)\"),[7, 81, 19]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "function right_insertion(a, x){\n    var i = a.length - 1;\n    while(i >= 0 && a[i] < x){\n        i--;\n    }\n    a.splice(i+1, 0, x);\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = right_insertion;",
            "assert.deepEqual(candidate([1, 2, 4, 5], 6),4);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 3),2);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 7),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "function text_match_three(text){\n    var match = text.match(/^(.*?)b$/);\n    return match? match[1] : text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_three;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "assert.deepEqual(candidate(\"caacabbbba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new array from the given string and array.",
        "code": "function new_tuple(test_list, test_str){\n    var new_array = [];\n    for(var i = 0; i < test_list.length; i++){\n        new_array.push(test_list[i]);\n    }\n    return new_array;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = new_tuple;",
            "assert.deepEqual(candidate([\"WEB\", \"is\"], \"best\"),[\"WEB\", \"is\", \"best\"]);",
            "assert.deepEqual(candidate([\"We\", \"are\"], \"Developers\"),[\"We\", \"are\", \"Developers\"]);",
            "assert.deepEqual(candidate([\"Part\", \"is\"], \"Wrong\"),[\"Part\", \"is\", \"Wrong\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a jsthon function to check whether every even index contains even numbers of a given array.",
        "code": "function even_position(nums){\n    var i = 0;\n    var j = 0;\n    while(i < nums.length){\n        if(nums[i] % 2 == 0){\n            j++;\n        }\n        i++;\n    }\n    return j;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_position;",
            "assert.deepEqual(candidate([3, 2, 1]),false);",
            "assert.deepEqual(candidate([1, 2, 3]),false);",
            "assert.deepEqual(candidate([2, 1, 4]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove arrays from the given array.",
        "code": "function remove_nested(test_tup){\n    var test_tup_array = test_tup.split(',');\n    var test_tup_array_length = test_tup_array.length;\n    var test_tup_array_index = 0;\n    var test_tup_array_index_length = 0;\n    var test_tup_array_index_index = 0;\n    var test_tup_array_index_index_length = 0;\n    var test_tup_array_index_index_index = 0;\n    var test_tup_array_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index = 0;\n    var test_tup_array_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index = 0;\n    var test_tup_array_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length = 0;\n    var test_tup_array_index_index_index_index_index_index_length =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_nested;",
            "assert.deepEqual(candidate([1, 5, 7, [4, 6], 10]),[1, 5, 7, 10]);",
            "assert.deepEqual(candidate([2, 6, 8, [5, 7], 11]),[2, 6, 8, 11]);",
            "assert.deepEqual(candidate([3, 7, 9, [6, 8], 12]),[3, 7, 9, 12]);",
            "assert.deepEqual(candidate([3, 7, 9, [6, 8], [5, 12], 12]),[3, 7, 9, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a jsthon function to count the number of arrays in a given number of arrays.",
        "code": "function count_list(input_list){\n    var count = 0;\n    for(var i = 0; i < input_list.length; i++){\n        if(input_list[i] instanceof Array){\n            count += count_list(input_list[i]);\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_list;",
            "assert.deepEqual(candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]),4);",
            "assert.deepEqual(candidate([[1, 2], [2, 3], [4, 5]]),3);",
            "assert.deepEqual(candidate([[1, 0], [2, 0]]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a jsthon function to find the last position of an element in a sorted array.",
        "code": "function last(arr, x){\n    var i = arr.length - 1;\n    while(i >= 0 && arr[i] < x){\n        i--;\n    }\n    return i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last;",
            "assert.deepEqual(candidate([1, 2, 3], 1),0);",
            "assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);",
            "assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "function text_starta_endb(text){\n    var match = text.match(/^a/);\n    if(match){\n        return match[0];\n    }\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_starta_endb;",
            "assert.deepEqual(candidate(\"aabbbb\"),true);",
            "assert.deepEqual(candidate(\"aabAbbbc\"),false);",
            "assert.deepEqual(candidate(\"accddbbjjj\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given object.",
        "code": "function return_sum(dict){\n    var sum = 0;\n    for(var key in dict){\n        sum += dict[key];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = return_sum;",
            "assert.deepEqual(candidate({\"a\": 100, \"b\": 200, \"c\": 300}),600);",
            "assert.deepEqual(candidate({\"a\": 25, \"b\": 18, \"c\": 45}),88);",
            "assert.deepEqual(candidate({\"a\": 36, \"b\": 39, \"c\": 49}),124);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a jsthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "function sum_in_range(l, r){\n    var sum = 0;\n    for(var i = l; i <= r; i++){\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_in_range;",
            "assert.deepEqual(candidate(2, 5),8);",
            "assert.deepEqual(candidate(5, 7),12);",
            "assert.deepEqual(candidate(7, 13),40);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a jsthon function to find the sum of an array.",
        "code": "function _sum(arr){\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = _sum;",
            "assert.deepEqual(candidate([1, 2, 3]),6);",
            "assert.deepEqual(candidate([15, 12, 13, 10]),50);",
            "assert.deepEqual(candidate([0, 1, 2]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "function left_rotate(n, d){\n    var a = n % d;\n    var b = n / d;\n    return a << d | b;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = left_rotate;",
            "assert.deepEqual(candidate(16, 2),64);",
            "assert.deepEqual(candidate(10, 2),40);",
            "assert.deepEqual(candidate(99, 3),792);",
            "assert.deepEqual(candidate(99, 3),792);",
            "assert.deepEqual(candidate(1, 3),8);",
            "assert.deepEqual(candidate(5, 3),40);",
            "assert.deepEqual(candidate(29, 3),232);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a jsthon function to check whether the length of the word is odd or not.",
        "code": "function word_len(s){\n    var len = s.length;\n    if(len%2 == 0){\n        return len;\n    }\n    else{\n        return len+1;\n    }\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = word_len;",
            "assert.deepEqual(candidate(\"Hadoop\"),false);",
            "assert.deepEqual(candidate(\"great\"),true);",
            "assert.deepEqual(candidate(\"structure\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "function remove_all_spaces(text){\n    var re = /\\s+/g;\n    var text = text.replace(re, \"\");\n    return text;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_all_spaces;",
            "assert.deepEqual(candidate(\"python  program\"),\"pythonprogram\");",
            "assert.deepEqual(candidate(\"python   programming    language\"),\"pythonprogramminglanguage\");",
            "assert.deepEqual(candidate(\"python                     program\"),\"pythonprogram\");",
            "assert.deepEqual(candidate(\"   python                     program\"),\"pythonprogram\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a jsthon function to count the number of equal numbers from three given integers.",
        "code": "function test_three_equal(x, y, z){\n    var result = 0;\n    for(var i = 0; i < x; i++){\n        for(var j = 0; j < y; j++){\n            if(i == j){\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = test_three_equal;",
            "assert.deepEqual(candidate(1, 1, 1),3);",
            "assert.deepEqual(candidate(-1, -2, -3),0);",
            "assert.deepEqual(candidate(1, 2, 2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a jsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "function count_rotation(arr){\n    var count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 1){\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_rotation;",
            "assert.deepEqual(candidate([3, 2, 1]),1);",
            "assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);",
            "assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 2, 3]),0);",
            "assert.deepEqual(candidate([1, 3, 2]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "function is_perfect_square(n){\n    if(n==1) return true;\n    if(n==2) return true;\n    if(n==3) return true;\n    if(n==5) return true;\n    if(n==7) return true;\n    if(n==11) return true;\n    if(n==13) return true;\n    if(n==17) return true;\n    if(n==19) return true;\n    if(n==29) return true;\n    if(n==37) return true;\n    if(n==41) return true;\n    if(n==53) return true;\n    if(n==59) return true;\n    if(n==67) return true;\n    if(n==71) return true;\n    if(n==81) return true;\n    if(n==91) return true;\n    if(n==97) return true;\n    if(n==101) return true;\n    if(n==103) return true;\n    if(n==107) return true;\n    if(n==111) return true;\n    if(n==113) return true;\n    if(n==117) return true;\n    if(n==131) return true;\n    if(n==137) return true;\n    if(n==139) return true;\n    if(n==149) return true;\n    if(n==151) return true;\n    if(n==163) return true;\n    if(n==173) return true;\n    if(n==179) return true;\n    if(n==181) return true;\n    if(n==191) return true;\n    if(n==193) return true;\n    if(n==197) return true;\n    if(n==199) return true;\n    if(n==211) return true;\n    if(n==223) return true;\n    if(n==227) return true;\n    if(n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_perfect_square;",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(36),true);",
            "assert.deepEqual(candidate(14),false);",
            "assert.deepEqual(candidate(196),true);",
            "assert.deepEqual(candidate(125),false);",
            "assert.deepEqual(candidate(15625),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array is even or not.",
        "code": "function is_product_even(arr){\n    var odd = false;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            odd = true;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_product_even;",
            "assert.deepEqual(candidate([1, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 4]),true);",
            "assert.deepEqual(candidate([1, 1]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "function max_sum_list(lists){\n    var max_sum = lists[0][0];\n    for(var i = 1; i < lists.length; i++){\n        max_sum = Math.max(max_sum, lists[i][0]);\n    }\n    return max_sum;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum_list;",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);",
            "assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);",
            "assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "function max_run_uppercase(test_str){\n    var max_run = 0;\n    for(var i = 0; i < test_str.length; i++){\n        if(test_str[i] == test_str[i].toUpperCase()){\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_run_uppercase;",
            "assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);",
            "assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);",
            "assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a jsthon function to find the first odd number in a given array of numbers.",
        "code": "function first_odd(nums){\n    var odd = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] % 2 == 1){\n            odd = odd + 1;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_odd;",
            "assert.deepEqual(candidate([1, 3, 5]),1);",
            "assert.deepEqual(candidate([2, 4, 1, 3]),1);",
            "assert.deepEqual(candidate([8, 9, 1]),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given arrays contain the k or not.",
        "code": "function check_K(test_tup, K){\n    var k = 0;\n    for(var i = 0; i < test_tup.length; i++){\n        if(test_tup[i] == K){\n            k++;\n        }\n    }\n    return k;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_K;",
            "assert.deepEqual(candidate([10, 4, 5, 6, 8], 6),true);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 7),false);",
            "assert.deepEqual(candidate([7, 8, 9, 44, 11, 12], 11),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second array is smaller than its corresponding element in the first array.",
        "code": "function check_smaller(test_tup1, test_tup2){\n    var test_tup1_len = test_tup1.length;\n    var test_tup2_len = test_tup2.length;\n    var test_tup1_i = 0;\n    var test_tup2_i = 0;\n    while(test_tup1_i < test_tup1_len){\n        if(test_tup1[test_tup1_i] < test_tup2[test_tup2_i]){\n            test_tup1_i++;\n        }else{\n            test_tup2_i++;\n        }\n    }\n    return test_tup1_i;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_smaller;",
            "assert.deepEqual(candidate([1, 2, 3], [2, 3, 4]),false);",
            "assert.deepEqual(candidate([4, 5, 6], [3, 4, 5]),true);",
            "assert.deepEqual(candidate([11, 12, 13], [10, 11, 12]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "function tetrahedral_number(n){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 = 0;\n    var i37 = 0;\n    var i38 = 0;\n    \n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tetrahedral_number;",
            "assert.deepEqual(candidate(5),35);",
            "assert.deepEqual(candidate(6),56);",
            "assert.deepEqual(candidate(7),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a jsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "function get_Char(strr){\n    var char_str = strr.toString();\n    var char_str_len = char_str.length;\n    var char_str_mod = char_str_len % 26;\n    var char_str_mod_str = char_str_mod.toString();\n    var char_str_mod_len = char_str_mod_str.length;\n    var char_str_mod_mod = char_str_mod_len % 26;\n    var char_str_mod_mod_str = char_str_mod_mod.toString();\n    var char_str_mod_mod_len = char_str_mod_mod_str.length;\n    var char_str_mod_mod_mod = char_str_mod_mod_len % 26;\n    var char_str_mod_mod_mod_str = char_str_mod_mod_mod.toString();\n    var char_str_mod_mod_mod_len = char_str_mod_mod_mod_str.length;\n    var char_str_mod_mod_mod_mod = char_str_mod_mod_mod_len % 26;\n    var char_str_mod_mod_mod_mod_str = char_str_mod_mod_mod_mod.toString();\n    var char_str_mod_mod_mod_mod_len = char_str_mod_mod_mod_mod_str.length;\n    var char_str_mod_mod_mod_mod_mod = char_str_mod_mod_mod_mod_mod_str.toString();\n    var char_str_mod_mod_mod_mod_len = char_str_mod_mod_mod_mod_mod_str.length;\n    var char_str_mod_mod_mod_mod_mod_len = char_str_mod_mod_mod_mod_mod_str.length;\n    var char_str_mod_mod_mod_mod_mod_len = char_str_mod_mod_mod_mod_mod_str\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_Char;",
            "assert.deepEqual(candidate(\"abc\"),\"f\");",
            "assert.deepEqual(candidate(\"gfg\"),\"t\");",
            "assert.deepEqual(candidate(\"ab\"),\"c\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "function sequence(n){\n    var sequence = [];\n    for(var i = 0; i < n; i++){\n        sequence.push(i);\n    }\n    return sequence;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sequence;",
            "assert.deepEqual(candidate(10),6);",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(3),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "function centered_hexagonal_number(n){\n    var x = Math.floor(Math.random() * (n - 1));\n    var y = Math.floor(Math.random() * (n - 1));\n    return x + \" \" + y;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = centered_hexagonal_number;",
            "assert.deepEqual(candidate(10),271);",
            "assert.deepEqual(candidate(2),7);",
            "assert.deepEqual(candidate(9),217);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single object.",
        "code": "function merge_dictionaries_three(dict1, dict2, dict3){\n    var result = {};\n    for(var key in dict1){\n        result[key] = dict1[key];\n    }\n    for(var key in dict2){\n        result[key] = dict2[key];\n    }\n    for(var key in dict3){\n        result[key] = dict3[key];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge_dictionaries_three;",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}),{\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"});",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}),{\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"});",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}, {\"G\": \"Green\", \"W\": \"White\"}),{\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array, returned as an object.",
        "code": "function freq_count(list1){\n    var count = 0;\n    for(var i = 0; i < list1.length; i++){\n        count += list1[i];\n    }\n    return count;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = freq_count;",
            "assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});",
            "assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});",
            "assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "function closest_num(N){\n    var min = Infinity;\n    for(var i = 0; i < N; i++){\n        if(N - i < min){\n            min = N - i;\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = closest_num;",
            "assert.deepEqual(candidate(11),10);",
            "assert.deepEqual(candidate(7),6);",
            "assert.deepEqual(candidate(12),11);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array.",
        "code": "function square_nums(nums){\n    var result = [];\n    for(var i = 0; i < nums.length; i++){\n        result.push(nums[i] * nums[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert.deepEqual(candidate([10, 20, 30]),[100, 400, 900]);",
            "assert.deepEqual(candidate([12, 15]),[144, 225]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a jsthon function to find the length of the longest word.",
        "code": "function len_log(list1){\n    var len = 0;\n    for(var i = 0; i < list1.length; i++){\n        if(list1[i] ==''){\n            len++;\n        }\n    }\n    return len;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = len_log;",
            "assert.deepEqual(candidate([\"python\", \"PHP\", \"bigdata\"]),7);",
            "assert.deepEqual(candidate([\"a\", \"ab\", \"abc\"]),3);",
            "assert.deepEqual(candidate([\"small\", \"big\", \"tall\"]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "function find_substring(str1, sub_str){\n    var str2 = str1.substring(0, sub_str);\n    return str2;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_substring;",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "function is_undulating(n){\n    return n % 2 == 0;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_undulating;",
            "assert.deepEqual(candidate(1212121),true);",
            "assert.deepEqual(candidate(1991),false);",
            "assert.deepEqual(candidate(121),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "function power(a, b){\n    return a * b;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = power;",
            "assert.deepEqual(candidate(3, 4),81);",
            "assert.deepEqual(candidate(2, 3),8);",
            "assert.deepEqual(candidate(5, 5),3125);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array of arrays, write a function that returns the first value of the array with the smallest second value.",
        "code": "function index_minimum(test_list){\n    var min = test_list[0];\n    for(var i = 1; i < test_list.length; i++){\n        if(test_list[i] < min){\n            min = test_list[i];\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = index_minimum;",
            "assert.deepEqual(candidate([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]),\"Varsha\");",
            "assert.deepEqual(candidate([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]),\"Dawood\");",
            "assert.deepEqual(candidate([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]),\"Ayesha\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a jsthon function to find the length of the smallest array in an array of arrays.",
        "code": "function Find_Min_Length(lst){\n    var min = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Min_Length;",
            "assert.deepEqual(candidate([[1], [1, 2]]),1);",
            "assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);",
            "assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a jsthon function to find the number of divisors of a given integer.",
        "code": "function divisor(n){\n    var result = 1;\n    for(var i = 2; i <= n; i++){\n        if(n % i == 0){\n            result = i;\n            break;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = divisor;",
            "assert.deepEqual(candidate(15),4);",
            "assert.deepEqual(candidate(12),6);",
            "assert.deepEqual(candidate(9),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array of arrays, returned in an object.",
        "code": "function frequency_lists(list1){\n    var frequency_list = [];\n    for(var i = 0; i < list1.length; i++){\n        frequency_list.push(list1[i].length);\n    }\n    return frequency_list;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = frequency_lists;",
            "assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});",
            "assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});",
            "assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "function decimal_to_binary(n){\n    var result = '';\n    var i = 0;\n    while(i < n){\n        result += (n - i) + '0';\n        i++;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = decimal_to_binary;",
            "assert.deepEqual(candidate(8),\"1000\");",
            "assert.deepEqual(candidate(18),\"10010\");",
            "assert.deepEqual(candidate(7),\"111\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a jsthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "function find_Rotations(str){\n    var rotations = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var i3 = 0;\n    var i4 = 0;\n    var i5 = 0;\n    var i6 = 0;\n    var i7 = 0;\n    var i8 = 0;\n    var i9 = 0;\n    var i10 = 0;\n    var i11 = 0;\n    var i12 = 0;\n    var i13 = 0;\n    var i14 = 0;\n    var i15 = 0;\n    var i16 = 0;\n    var i17 = 0;\n    var i18 = 0;\n    var i19 = 0;\n    var i20 = 0;\n    var i21 = 0;\n    var i22 = 0;\n    var i23 = 0;\n    var i24 = 0;\n    var i25 = 0;\n    var i26 = 0;\n    var i27 = 0;\n    var i28 = 0;\n    var i29 = 0;\n    var i30 = 0;\n    var i31 = 0;\n    var i32 = 0;\n    var i33 = 0;\n    var i34 = 0;\n    var i35 = 0;\n    var i36 =\n",
        "test_list": [
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Rotations;",
            "assert.deepEqual(candidate(\"aaaa\"),1);",
            "assert.deepEqual(candidate(\"ab\"),2);",
            "assert.deepEqual(candidate(\"abc\"),3);",
            "}",
            "test();"
        ]
    }
]