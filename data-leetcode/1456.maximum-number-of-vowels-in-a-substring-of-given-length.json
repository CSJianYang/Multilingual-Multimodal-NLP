[
    {
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "question_content": "Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.\n&nbsp;\nExample 1:\n\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.\n\nExample 2:\n\nInput: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.\n\nExample 3:\n\nInput: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 105\n\ts consists of lowercase English letters.\n\t1 <= k <= s.length",
        "solutions": [
            {
                "id": 648370,
                "title": "c-sliding-window",
                "content": "Just a simple sliding window pattern: count vowels moving in and out of window, and keep track of the maximum.\\n\\n```cpp\\nint vowels[26] = {1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\nint maxVowels(string s, int k) {\\n    int max_vow = 0;\\n    for (auto i = 0, cur_vow = 0; i < s.size(); ++i) {\\n        cur_vow += vowels[s[i] - \\'a\\'];\\n        if (i >= k)\\n            cur_vow -= vowels[s[i - k] - \\'a\\'];\\n        max_vow = max(max_vow, cur_vow);\\n    }\\n    return max_vow;\\n}\\n```\\n\\n**Complexity Analysis**\\n- Time: O(n), we do through the string exactly once.\\n- Memory: O(1).",
                "solutionTags": [],
                "code": "```cpp\\nint vowels[26] = {1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\nint maxVowels(string s, int k) {\\n    int max_vow = 0;\\n    for (auto i = 0, cur_vow = 0; i < s.size(); ++i) {\\n        cur_vow += vowels[s[i] - \\'a\\'];\\n        if (i >= k)\\n            cur_vow -= vowels[s[i - k] - \\'a\\'];\\n        max_vow = max(max_vow, cur_vow);\\n    }\\n    return max_vow;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 648559,
                "title": "java-python-3-slide-window-o-n-codes",
                "content": "Maintain a sliding window of size `k`, `(i - k, i]`, and count in/out the vowels inside/outside during sliding;\\n\\n```java\\n    public int maxVowels(String s, int k) {\\n        int ans = 0;\\n        // Set<Character> vowels = new HashSet<>(Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'));\\n        var vowels = Set.of(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'); // Java 11 Collection factory method, credit to @Sithis\\n        for (int i = 0, winCnt = 0; i < s.length(); ++i) {\\n            if (vowels.contains(s.charAt(i))) {\\n                ++winCnt; \\n            }\\n            if (i >= k && vowels.contains(s.charAt(i - k))) {\\n                --winCnt;\\n            }\\n            ans = Math.max(winCnt, ans);\\n        }\\n        return ans;\\n    }\\n```\\n\\n```python\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        ans = cnt = 0\\n        for i, c in enumerate(s):\\n            if c in vowels:\\n                cnt += 1\\n            if i >= k and s[i - k] in vowels:\\n                cnt -= 1\\n            ans  = max(cnt, ans)\\n        return ans    \\n```\\n\\n**Analysis:**\\n\\nTime: `O(n)`, space: `O(1)`, where `n = s.length()`.",
                "solutionTags": [],
                "code": "```java\\n    public int maxVowels(String s, int k) {\\n        int ans = 0;\\n        // Set<Character> vowels = new HashSet<>(Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'));\\n        var vowels = Set.of(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'); // Java 11 Collection factory method, credit to @Sithis\\n        for (int i = 0, winCnt = 0; i < s.length(); ++i) {\\n            if (vowels.contains(s.charAt(i))) {\\n                ++winCnt; \\n            }\\n            if (i >= k && vowels.contains(s.charAt(i - k))) {\\n                --winCnt;\\n            }\\n            ans = Math.max(winCnt, ans);\\n        }\\n        return ans;\\n    }\\n```\n```python\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        ans = cnt = 0\\n        for i, c in enumerate(s):\\n            if c in vowels:\\n                cnt += 1\\n            if i >= k and s[i - k] in vowels:\\n                cnt -= 1\\n            ans  = max(cnt, ans)\\n        return ans    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 648458,
                "title": "c-py3-explained-w-diagram-sliding-window",
                "content": "# **Idea and Approach**\\nThe basic idea to solve this kind of problem is to create a window of the given size and keep on moving it till the end while maintaining the count of the vowels we *gain* and *lose* in this transition.\\n\\nBelow is the implementation and steps explained through diagram:\\n\\n* Traverse through all the elements of the first window and keep track of the vowels.\\n![image](https://assets.leetcode.com/users/luctivud/image_1590301154.png)\\n\\n\\n* Move the window to the right side without changing the size.\\n* Decrement the count in currentCount if any vowel is removed from the left side during transition\\n* Increase if vowel is added from the right side.\\n![image](https://assets.leetcode.com/users/luctivud/image_1590301197.png)\\n\\n\\n* The answer will be the maximum of all the counts encountered while moving the window.\\n![image](https://assets.leetcode.com/users/luctivud/image_1590301178.png)\\n\\n\\n# **Python 3 Code**\\n\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Maximum vowels i.e. ans\\n        ans: int = 0\\n            \\n        # Vowels in current window\\n        currCount: int = 0\\n            \\n        # String of vowels\\n        vowels: str = \"aeiou\"\\n            \\n        # Using sliding window technique to \\n        # calculate number of vowels in each window and \\n        # update the count\\n        for i, v in enumerate(s):\\n            if i >= k:\\n                if s[i-k] in vowels:\\n                    currCount -= 1\\n            if s[i] in vowels:\\n                currCount += 1\\n            ans = max(currCount, ans)\\n        return ans\\n```\\n\\n# **C++ Code**\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        // Store current count of vowels in currCount\\n        // and maximum currCount occurred in ans\\n        int currCount = 0;\\n        int ans = 0;\\n        \\n        // An array to mark all the vowels\\' position to true\\n        // for checking whether the char is vowel or not\\n        bool vowels[26] = {false};\\n        vowels[0] = vowels[4] = vowels[8] = vowels[14] = vowels[20] = true;\\n        \\n        // Sliding window implementation\\n        for (int i=0; i < s.length(); i++) {\\n            \\n            // if any vowel is removed from left-> decrement\\n            if (i >= k and vowels[s[i-k]-\\'a\\']) {\\n                currCount -= 1;\\n            }\\n            \\n            // if any vowel is inserted from right-> increment\\n            if (vowels[s[i]-\\'a\\']) {\\n                currCount += 1;\\n            }\\n            \\n            // Store maximum occurence of currCount in ans\\n            ans = max (ans, currCount);\\n        }\\n        \\n        return ans ;\\n    }\\n};\\n```\\n# **Complexity Analysis**:\\nTime Complexity: **O(n)**\\nSpace : O(1)\\n\\n*Plz Upvote if you like it.*",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Maximum vowels i.e. ans\\n        ans: int = 0\\n            \\n        # Vowels in current window\\n        currCount: int = 0\\n            \\n        # String of vowels\\n        vowels: str = \"aeiou\"\\n            \\n        # Using sliding window technique to \\n        # calculate number of vowels in each window and \\n        # update the count\\n        for i, v in enumerate(s):\\n            if i >= k:\\n                if s[i-k] in vowels:\\n                    currCount -= 1\\n            if s[i] in vowels:\\n                currCount += 1\\n            ans = max(currCount, ans)\\n        return ans\\n```\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        // Store current count of vowels in currCount\\n        // and maximum currCount occurred in ans\\n        int currCount = 0;\\n        int ans = 0;\\n        \\n        // An array to mark all the vowels\\' position to true\\n        // for checking whether the char is vowel or not\\n        bool vowels[26] = {false};\\n        vowels[0] = vowels[4] = vowels[8] = vowels[14] = vowels[20] = true;\\n        \\n        // Sliding window implementation\\n        for (int i=0; i < s.length(); i++) {\\n            \\n            // if any vowel is removed from left-> decrement\\n            if (i >= k and vowels[s[i-k]-\\'a\\']) {\\n                currCount -= 1;\\n            }\\n            \\n            // if any vowel is inserted from right-> increment\\n            if (vowels[s[i]-\\'a\\']) {\\n                currCount += 1;\\n            }\\n            \\n            // Store maximum occurence of currCount in ans\\n            ans = max (ans, currCount);\\n        }\\n        \\n        return ans ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487283,
                "title": "c-easy-explanation-generic-sliding-window-approach",
                "content": "# Approach\\nTo solve this We use `Start` and `End` Pointer which determines the window of Size K\\n\\nCheck each upcoming character whether it is a vowel or not and update the temp count accordingly\\n\\nIf the `window size == k+1 ` then increment the start pointer , if character at start pointer is a vowel then decrease the temp count\\n\\nFinally store max ans in each window of size k\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    // Helper function to check if a character is a vowel\\n    bool isVowel(char c){\\n        char t = tolower(c);\\n        return t == \\'a\\' or t == \\'e\\' or t==\\'i\\' or t==\\'o\\' or t==\\'u\\';\\n    }\\n    \\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int start = 0;\\n        int end = 0;\\n\\n        int ans = 0;  // Initialize the maximum number of vowels to 0\\n        int temp = 0;  // Initialize a temporary count of vowels in the current window\\n\\n        // Loop through the string with a sliding window approach\\n        while(end < n){\\n            // If the current character is a vowel, increment the temporary count\\n            if(isVowel(s[end])){\\n               temp++;\\n           }\\n          \\n           // If the window size is equal to k+1, slide the window by moving the start pointer\\n           if(end-start == k ){\\n               if(isVowel(s[start])){\\n                   temp--;  // Decrement the temporary count if the first character in the window is a vowel\\n               }\\n               start++;  \\n           }\\n           \\n           ans = max(ans, temp);  // Update the maximum number of vowels found so far\\n           end++;  // Move the end pointer to expand the window\\n        }\\n        \\n        return ans; \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    // Helper function to check if a character is a vowel\\n    bool isVowel(char c){\\n        char t = tolower(c);\\n        return t == \\'a\\' or t == \\'e\\' or t==\\'i\\' or t==\\'o\\' or t==\\'u\\';\\n    }\\n    \\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int start = 0;\\n        int end = 0;\\n\\n        int ans = 0;  // Initialize the maximum number of vowels to 0\\n        int temp = 0;  // Initialize a temporary count of vowels in the current window\\n\\n        // Loop through the string with a sliding window approach\\n        while(end < n){\\n            // If the current character is a vowel, increment the temporary count\\n            if(isVowel(s[end])){\\n               temp++;\\n           }\\n          \\n           // If the window size is equal to k+1, slide the window by moving the start pointer\\n           if(end-start == k ){\\n               if(isVowel(s[start])){\\n                   temp--;  // Decrement the temporary count if the first character in the window is a vowel\\n               }\\n               start++;  \\n           }\\n           \\n           ans = max(ans, temp);  // Update the maximum number of vowels found so far\\n           end++;  // Move the end pointer to expand the window\\n        }\\n        \\n        return ans; \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487875,
                "title": "java-simple-solution-o-n-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks to find the maximum number of vowels in any sub-string of length k in the given string s. To solve the problem, the solution uses a sliding window approach. We keep a window of size k and slide it through the string s to calculate the count of vowels in the current window. We maintain the maximum count of vowels found so far, which is the required answer.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInitialize the variables n, maxVowels, and count to 0. n is the length of the input string s, maxVowels will store the maximum number of vowels found so far, and count will store the number of vowels in the current window of size k.\\n\\nCreate an array vowels of size 128 to store the count of vowels for each character. Set the value of vowels[\\'a\\'], vowels[\\'e\\'], vowels[\\'i\\'], vowels[\\'o\\'], and vowels[\\'u\\'] to 1, and for all other characters, the value is 0.\\n\\nIterate from i = 0 to k-1 and calculate the number of vowels in the first window of size k. Update the count variable to store the number of vowels in the current window.\\n\\nSet the value of maxVowels to count, as this is the maximum number of vowels in any sub-string of length k that ends at the kth position.\\n\\nIterate from i = k to n-1, sliding the window of size k through the input string s. Update the count variable by subtracting the count of the first character in the previous window and adding the count of the last character in the current window.\\n\\nUpdate the maxVowels variable to store the maximum count of vowels found so far.\\n\\nIf the value of maxVowels equals k, we have found a sub-string that contains all k vowels, and we can return k.\\n\\nFinally, return the value of maxVowels as the answer.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int n = s.length();\\n        int maxVowels = 0;\\n        int count = 0;\\n\\n        int[] vowels = new int[128];\\n        vowels[\\'a\\'] = 1;\\n        vowels[\\'e\\'] = 1;\\n        vowels[\\'i\\'] = 1;\\n        vowels[\\'o\\'] = 1;\\n        vowels[\\'u\\'] = 1;\\n\\n        for (int i = 0; i < k; i++) {\\n            count += vowels[s.charAt(i)];\\n        }\\n\\n        maxVowels = count;\\n        for (int i = k; i < n; i++) {\\n            count += vowels[s.charAt(i)] - vowels[s.charAt(i - k)];\\n            maxVowels = Math.max(maxVowels, count);\\n            //System.out.println(Arrays.toString(vowels));\\n            if (maxVowels == k) {\\n                return maxVowels; \\n            }\\n        }\\n        return maxVowels;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int n = s.length();\\n        int maxVowels = 0;\\n        int count = 0;\\n\\n        int[] vowels = new int[128];\\n        vowels[\\'a\\'] = 1;\\n        vowels[\\'e\\'] = 1;\\n        vowels[\\'i\\'] = 1;\\n        vowels[\\'o\\'] = 1;\\n        vowels[\\'u\\'] = 1;\\n\\n        for (int i = 0; i < k; i++) {\\n            count += vowels[s.charAt(i)];\\n        }\\n\\n        maxVowels = count;\\n        for (int i = k; i < n; i++) {\\n            count += vowels[s.charAt(i)] - vowels[s.charAt(i - k)];\\n            maxVowels = Math.max(maxVowels, count);\\n            //System.out.println(Arrays.toString(vowels));\\n            if (maxVowels == k) {\\n                return maxVowels; \\n            }\\n        }\\n        return maxVowels;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 653707,
                "title": "java-100-faster-o-n-time-o-1-space-sliding-window",
                "content": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowel = 0;\\n        for(int i =0; i< k; i++)\\n            if(isVowel(s.charAt(i))) vowel++;\\n        int max = vowel;\\n        for(int i = k; i < s.length(); i++){\\n            if(isVowel(s.charAt(i))) vowel++;\\n            if(isVowel(s.charAt(i-k))) vowel--;\\n            max = Math.max(max, vowel);\\n        }\\n        return max;\\n    }\\n    private boolean isVowel(char c){\\n        if((c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')) return true;\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "class Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowel = 0;\\n        for(int i =0; i< k; i++)\\n            if(isVowel(s.charAt(i))) vowel++;\\n        int max = vowel;\\n        for(int i = k; i < s.length(); i++){\\n            if(isVowel(s.charAt(i))) vowel++;\\n            if(isVowel(s.charAt(i-k))) vowel--;\\n            max = Math.max(max, vowel);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 648272,
                "title": "java-straight-forward-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public static boolean check(char ch) {\\n        return (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' | ch == \\'o\\' || ch == \\'u\\');\\n    }\\n    public int maxVowels(String s, int k) {\\n        int max = 0, n = s.length();\\n        int count = 0;\\n        for(int i = 0; i < k; i++) {\\n            if(check(s.charAt(i))) count++;\\n        }\\n        max = count;\\n\\t\\t// build first window size k\\n        for(int  i = k; i < n; i++) {\\n\\t\\t\\t// remove the contribution of the (i - k)th character which is no longer in the window\\n            if(check(s.charAt(i - k))) count--;\\n\\t\\t\\t// add the contribution of the current character\\n            if(check(s.charAt(i))) count++;\\n\\t\\t\\t// update max at for each window of size k\\n            max = Math.max(max, count);\\n        }\\n        return max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public static boolean check(char ch) {\\n        return (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' | ch == \\'o\\' || ch == \\'u\\');\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3488221,
                "title": "efficient-java-solution-for-finding-maximum-number-of-vowels-in-substring-of-given-length",
                "content": "# Intuition\\nThe problem requires us to find the substring of length k in the given string s that contains the maximum number of vowels. We can use a sliding window approach to solve this problem efficiently.\\n\\nIn a sliding window approach, we consider a window of fixed size and move it through the string, one character at a time. We maintain some state related to the current window (e.g., the sum of elements in the window) and update this state as we move the window. \\n\\n# Approach\\nWe initialize two variables, maxVowels and windowVowels, to zero. maxVowels will hold the maximum number of vowels found in a substring of length k, and windowVowels will hold the number of vowels in the current window.\\n\\nWe create a set vowels that contains all the vowels. We will use this set to check if a character is a vowel.\\n\\nWe count the number of vowels in the first window of length k by iterating over the first k characters of s. If a character is a vowel, we increment windowVowels. We also set maxVowels to windowVowels, since this is the maximum number of vowels found so far.\\n\\nWe slide the window one character to the right at a time. For each new character, we update windowVowels by subtracting the number of vowels that just left the window (i.e., the character that was k characters ago) and adding the number of vowels that just entered the window (i.e., the current character). We also update maxVowels if windowVowels is greater than maxVowels.\\n\\nFinally, we return maxVowels.\\n\\nHere\\'s an example to illustrate how the sliding window approach works:\\n\\nSuppose s = \"leetcodeisawesome\" and k = 5. We want to find the substring of length k = 5 in s that contains the maximum number of vowels.\\n\\nWe start with the first window of length k, which is \"leetc\". There are two vowels (e and e) in this window, so we set maxVowels and windowVowels to 2.\\n\\nWe slide the window one character to the right to get the next window, which is \"eetco\". We subtract the vowel that just left the window (l) and add the vowel that just entered the window (o). There are still two vowels (e and e) in this window, so we don\\'t update maxVowels.\\n\\nWe slide the window one character to the right again to get the next window, which is \"etcoi\". We subtract the vowel that just left the window (e) and add the vowel that just entered the window (i). There are still two vowels (e and i) in this window, so we don\\'t update maxVowels.\\n\\nWe continue sliding the window one character to the right at a time and updating windowVowels and `max\\n\\n# Complexity\\n- Time complexity:\\n O(n)\\n\\n- Space complexity:\\n O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int windowVowels = 0;\\n        \\n        Set<Character> vowels = new HashSet<>();\\n        vowels.add(\\'a\\');\\n        vowels.add(\\'e\\');\\n        vowels.add(\\'i\\');\\n        vowels.add(\\'o\\');\\n        vowels.add(\\'u\\');\\n        // Count the number of vowels in the first window\\n        for (int i = 0; i < k; i++) {\\n            if (vowels.contains(s.charAt(i))) {\\n                windowVowels++;\\n            }\\n        }\\n        maxVowels = windowVowels;\\n        // Slide the window and update the maximum number of vowels\\n        for (int i = k; i < s.length(); i++) {\\n            if (vowels.contains(s.charAt(i - k))) {\\n                windowVowels--;\\n            }\\n            if (vowels.contains(s.charAt(i))) {\\n                windowVowels++;\\n            }\\n            maxVowels = Math.max(maxVowels, windowVowels);\\n        }\\n        \\n        return maxVowels;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int windowVowels = 0;\\n        \\n        Set<Character> vowels = new HashSet<>();\\n        vowels.add(\\'a\\');\\n        vowels.add(\\'e\\');\\n        vowels.add(\\'i\\');\\n        vowels.add(\\'o\\');\\n        vowels.add(\\'u\\');\\n        // Count the number of vowels in the first window\\n        for (int i = 0; i < k; i++) {\\n            if (vowels.contains(s.charAt(i))) {\\n                windowVowels++;\\n            }\\n        }\\n        maxVowels = windowVowels;\\n        // Slide the window and update the maximum number of vowels\\n        for (int i = k; i < s.length(); i++) {\\n            if (vowels.contains(s.charAt(i - k))) {\\n                windowVowels--;\\n            }\\n            if (vowels.contains(s.charAt(i))) {\\n                windowVowels++;\\n            }\\n            maxVowels = Math.max(maxVowels, windowVowels);\\n        }\\n        \\n        return maxVowels;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487688,
                "title": "python-short-and-clean-code",
                "content": "# Intuition\\nUse `cnt` to count the number of vowels in the window with the size of `k`. \\nAnd`ans` is the maximum of `cnt`.\\n\\n# Approach\\nWhen moving the window, check whether `s[i-k]` and `s[i]` are vowels.  And remember to update `ans`.\\n\\nNote : maximum of `ans` is `k`, we can break if `ans` == `k`\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        if ans != k:\\n            for i in range(k, len(s)):\\n                cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n                if (ans := max(cnt, ans)) == k:\\n                    break\\n        return ans\\n```\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        if ans != k:\\n            for i in range(k, len(s)):\\n                cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n                ans = max(cnt, ans)\\n        return ans\\n```\\n\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        for i in range(k, len(s)):\\n            cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n            ans = max(cnt, ans)\\n        return ans\\n```\\n\\n# Related Problems Solutions\\n1. [2090. K Radius Subarray Averages](https://leetcode.com/problems/k-radius-subarray-averages/solutions/3659083/python-short-and-clean-code-sliding-window/)\\n\\n\\n**THX for reading. \\nI would appreciate it very much if you would upvote this.**\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window",
                    "Counting"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        if ans != k:\\n            for i in range(k, len(s)):\\n                cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n                if (ans := max(cnt, ans)) == k:\\n                    break\\n        return ans\\n```\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        if ans != k:\\n            for i in range(k, len(s)):\\n                cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n                ans = max(cnt, ans)\\n        return ans\\n```\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = frozenset(\"aeiou\")\\n        cnt = ans = sum(s[i] in vowels for i in range(k))\\n        for i in range(k, len(s)):\\n            cnt += (s[i] in vowels) - (s[i - k] in vowels)\\n            ans = max(cnt, ans)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486544,
                "title": "java-sliding-window-8-lines-clean-simple",
                "content": "# Intuition\\nUse a sliding window of fixed size `k`, starting from index `0` till index `n-1-k`. Compute the count of vowels within the sliding window at each index, and keep track of the maximum value across all the windows.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  private boolean isVowel(char c) {\\n    return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n  }\\n\\n  public int maxVowels(String s, int k) {\\n    int cnt = 0, max = 0;\\n\\n    for (var i=0; i < s.length(); i++) {\\n      if (isVowel(s.charAt(i))) cnt++;\\n      if (i >= k && isVowel(s.charAt(i-k))) cnt--;\\n      \\n      max = Math.max(max, cnt);\\n    }\\n    return max;\\n  }\\n}\\n```\\nIf you like my solution, please upvote it!",
                "solutionTags": [
                    "Java",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n  private boolean isVowel(char c) {\\n    return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n  }\\n\\n  public int maxVowels(String s, int k) {\\n    int cnt = 0, max = 0;\\n\\n    for (var i=0; i < s.length(); i++) {\\n      if (isVowel(s.charAt(i))) cnt++;\\n      if (i >= k && isVowel(s.charAt(i-k))) cnt--;\\n      \\n      max = Math.max(max, cnt);\\n    }\\n    return max;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488146,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this code is to find the maximum number of vowels in any substring of length k in the given string s. To achieve this, we first create a HashSet of vowels, which will allow us to quickly check if a given character is a vowel or not.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst we initialize a variable vcount to 0 and iterate over the first k characters of s, counting the number of vowels in this substring. This gives us the initial value of vcount.\\n\\nNext, we initialize three variables: max to vcount (since this is the maximum number of vowels seen so far), left to 0, and right to k-1 (since these are the indices of the current substring we are examining).\\n\\nWe then enter a while loop that will continue as long as right is less than the length of the string minus 1 (i.e., there are still substrings of length k that we haven\\'t examined yet). Inside the loop, we first check if the character at index left is a vowel; if it is, we decrement vcount (since this vowel is no longer part of the current substring). We then increment left and right to move the substring to the right by one character. Finally, we check if the character at index right is a vowel; if it is, we increment vcount (since this vowel is now part of the current substring). We update max to be the maximum of its current value and vcount, since this gives us the maximum number of vowels seen in any substring so far.\\n\\nOnce the loop finishes, we return max as the answer.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        List<Character> v = Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\');\\n        Set<Character> vowels = new HashSet<Character>(v);\\n\\n        int vcount =0;\\n        for(int i=0 ;i<k; i++){\\n            if(vowels.contains(s.charAt(i))) vcount++;\\n        }\\n\\n        int max = vcount;\\n        int left =0;\\n        int right = k-1;\\n        while(right<s.length()-1){\\n            if(vowels.contains(s.charAt(left))) vcount--;\\n            left++;\\n            right++;\\n            if(vowels.contains(s.charAt(right))) vcount++;\\n            max = Math.max(max, vcount);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        List<Character> v = Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\');\\n        Set<Character> vowels = new HashSet<Character>(v);\\n\\n        int vcount =0;\\n        for(int i=0 ;i<k; i++){\\n            if(vowels.contains(s.charAt(i))) vcount++;\\n        }\\n\\n        int max = vcount;\\n        int left =0;\\n        int right = k-1;\\n        while(right<s.length()-1){\\n            if(vowels.contains(s.charAt(left))) vcount--;\\n            left++;\\n            right++;\\n            if(vowels.contains(s.charAt(right))) vcount++;\\n            max = Math.max(max, vcount);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486946,
                "title": "c-easy-solution-of-unordered-map-and-sliding-window",
                "content": "## **\\u2705\\u2705C++ Easy Solution of Unordered Map and Sliding window**\\n# **Please Upvote as it really motivates me**\\n\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size(),ans=0,cur=0;\\n        unordered_map<char,int>m;\\n        m[\\'a\\']++,m[\\'e\\']++,m[\\'i\\']++,m[\\'o\\']++,m[\\'u\\']++;\\n        for(int i=0;i<n;i++){\\n            if(i<k){\\n                cur+=m.count(s[i]);\\n            }\\n            else{\\n                cur+=m.count(s[i])-m.count(s[i-k]);\\n            }\\n            ans=max(ans,cur);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/7f423b57-81a2-46ce-9ab2-72ad38f668f7_1675480558.466273.png)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size(),ans=0,cur=0;\\n        unordered_map<char,int>m;\\n        m[\\'a\\']++,m[\\'e\\']++,m[\\'i\\']++,m[\\'o\\']++,m[\\'u\\']++;\\n        for(int i=0;i<n;i++){\\n            if(i<k){\\n                cur+=m.count(s[i]);\\n            }\\n            else{\\n                cur+=m.count(s[i])-m.count(s[i-k]);\\n            }\\n            ans=max(ans,cur);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648314,
                "title": "c-concise-solution-o-n-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        map<int, int> vow;\\n        vow[\\'a\\'] = 1;vow[\\'e\\'] = 1;vow[\\'i\\'] = 1;vow[\\'o\\'] = 1;vow[\\'u\\'] = 1;\\n        int ans = 0, cnt = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            cnt += vow[s[i]];\\n            if(i >= k)\\n                cnt -= vow[s[i-k]];\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        map<int, int> vow;\\n        vow[\\'a\\'] = 1;vow[\\'e\\'] = 1;vow[\\'i\\'] = 1;vow[\\'o\\'] = 1;vow[\\'u\\'] = 1;\\n        int ans = 0, cnt = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            cnt += vow[s[i]];\\n            if(i >= k)\\n                cnt -= vow[s[i-k]];\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648309,
                "title": "python3-easy-sliding-window",
                "content": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        res = j = vowels = 0\\n        for i, c in enumerate(s):\\n            vowels += c in \\'aeiou\\' \\n            if i - j + 1 > k:\\n                vowels -= s[j] in \\'aeiou\\'\\n                j += 1    \\n            if i - j + 1 == k:    \\n                res = max(res, vowels)\\n        return res \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        res = j = vowels = 0\\n        for i, c in enumerate(s):\\n            vowels += c in \\'aeiou\\' \\n            if i - j + 1 > k:\\n                vowels -= s[j] in \\'aeiou\\'\\n                j += 1    \\n            if i - j + 1 == k:    \\n                res = max(res, vowels)\\n        return res \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487120,
                "title": "short-and-concise-python-solution-sliding-window",
                "content": "# Code\\n```python3\\ndef maxVowels(self, s: str, k: int) -> int:\\n    VOWELS = \"aeiou\"\\n    window = res = 0\\n    for r in range(len(s)):\\n        window += s[r] in VOWELS\\n        if r >= k:\\n            window -= s[r - k] in VOWELS\\n        res = max(res, window)\\n    return res\\n```\\n\\n* `window` keeps track of how many vowels are in the current window.\\n* `res` keeps track of the maximum number of vowels that we have seen in a window.\\n* `if r >= k` condition helps restrict window size to `k`.\\n\\n[Prepping for an interview? Jump to the interview tips section.](#in-an-interview)\\n\\n# Intuition\\n\\n> Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\\n\\nThe words **\"substring\"** and **\"with length k\"** hints a sliding window solution. When moving from a new window `[i, i + k]` to `[i + 1, i + k + 1]`, it\\'s easy to calculate the number of vowels in the new window: we only need to consider the number of vowels in the current window and the characters at index `i` and `i + k + 1`.\\n\\n*(Please ignore the next paragraph if you\\'re only preparing for interviews. See **Interview** section for more hints.)*\\nChecking all substrings will likely cause TLE, because the length of the string is at most `10^5`, and `k` could be up to `10^5`. Doing a simple multiplication gives `10^10` (not accurate, more of an upper bound). Assuming a machine processes `10^6` operations per second, processing `10^10` operations takes `10^4` seconds (or, ~2 hours and 47 minutes).\\n\\n# Complexity\\n- Time complexity: `O(n)`, where `n` is the length of `s`.\\n\\n- Space complexity: `O(1)`\\n\\n# In an Interview?\\n\\n1. **Ask clarifying questions.** *e.g.,*\\n* Is the string `s` only containing lower case letters? If not, how to handle special characters?\\n* Are vowels case sensitive?\\n* Can `k` be 0? Can `k` be larger than the size of the string `s`?\\n* What happens if there is an empty string being passed in?\\n\\n2. **Do not make assumptions about the input; unless otherwise given.** *e.g.,*\\n* \"How will the input be given? Can I assume that it will be passed in as an array?\"\\n\\n3. **Start by mentioning the brute-force solution.** *e.g.,*\\n* \"The easiest way is to iterate over the string `s` and check every substring of size `k`. This will take `O(nk)` runtime, where `n` is the length of `s`.\\n\\n4. **Move on to the optimized solution.** *e.g.,*\\n* \"If we calculate the number of vowels for every substring of size `k`, we are doing a lot of repeated work. We can minimze this repeated work by using the result from a \\'previous\\' substring.\"\\n\\n5. **Think about how the data looks like; write some test cases.**\\n* Pass in an empty string, if applicable;\\n* Pass in `k=0`, if applicable;\\n* Pass in a string `s` with special characters, if applicable;\\n* ...\\n\\n**I appreciate your upvote! This helps good posts to be seen by more people, and motivates me to write more. Thanks for your time!**",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```python3\\ndef maxVowels(self, s: str, k: int) -> int:\\n    VOWELS = \"aeiou\"\\n    window = res = 0\\n    for r in range(len(s)):\\n        window += s[r] in VOWELS\\n        if r >= k:\\n            window -= s[r - k] in VOWELS\\n        res = max(res, window)\\n    return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3486912,
                "title": "easiest-sliding-window-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor a window of length k, we are keeping track of count of vowels in count variable.\\nFor each window, we are calculating the max/(maxi in our code) value of vowel count, and returning the answer at end.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis is how each iteration will look like.\\n![2.png](https://assets.leetcode.com/users/images/e13589b3-1275-428a-84a2-34eeba94f4bb_1683254981.145182.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n```\\nO(N)\\n```\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n```\\nO(1)\\n```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++){\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size()){\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nO(N)\\n```\n```\\nO(1)\\n```\n```\\nclass Solution {\\npublic:\\n    bool check(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++){\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size()){\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1504290,
                "title": "python3-simple-soluton",
                "content": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        x = 0\\n        for i in range(k):\\n            if s[i] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x += 1\\n        ans = x\\n        for i in range(k,len(s)):\\n            if s[i] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x += 1\\n            if s[i-k] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x -= 1\\n            ans = max(ans,x)\\n        return ans\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        x = 0\\n        for i in range(k):\\n            if s[i] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x += 1\\n        ans = x\\n        for i in range(k,len(s)):\\n            if s[i] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x += 1\\n            if s[i-k] in (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'):\\n                x -= 1\\n            ans = max(ans,x)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490026,
                "title": "sliding-window-implemented-in-o-n-k-c-solution",
                "content": "# **Approach:**\\nFirst, we take the count of the vowels in the \"k\" size window than move the window ahead by one and check the new symbol is vowel or not, if it is a vowel than increment count. Also, check the one alphabet which we let go from left if if that was vowel or not.\\n\\n**CODE:**\\n```\\nclass Solution {\\npublic:    \\n    int maxVowels(string str, int k) {\\n        \\n        int n=str.size(), count=0;\\n        for( int i=0 ; i<n&&i<k ; i++ ){\\n            \\n            if( str[i]==\\'a\\' or str[i]==\\'e\\' or str[i]==\\'i\\' or str[i]==\\'o\\' or str[i]==\\'u\\' ){\\n                cout << str[i] << \" \" ;\\n                count+=1;\\n            }\\n        }\\n        \\n        int maxval = count;\\n\\n        \\n        for( int i=1 ; i<n-k+1 ; i++ ){\\n            if( str[i-1]==\\'a\\' or str[i-1]==\\'e\\' or str[i-1]==\\'i\\' or str[i-1]==\\'o\\' or str[i-1]==\\'u\\' ){\\n                count-=1;\\n            } \\n            if( str[i+k-1]==\\'a\\' or str[i+k-1]==\\'e\\' or str[i+k-1]==\\'i\\' or str[i+k-1]==\\'o\\' or str[i+k-1]==\\'u\\'){\\n                count+=1;\\n            }\\n            maxval = max( maxval, count );\\n        }\\n        return maxval;\\n    }\\n};\\n```\\nIf you\\'ve made it here, please upvote.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Math",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:    \\n    int maxVowels(string str, int k) {\\n        \\n        int n=str.size(), count=0;\\n        for( int i=0 ; i<n&&i<k ; i++ ){\\n            \\n            if( str[i]==\\'a\\' or str[i]==\\'e\\' or str[i]==\\'i\\' or str[i]==\\'o\\' or str[i]==\\'u\\' ){\\n                cout << str[i] << \" \" ;\\n                count+=1;\\n            }\\n        }\\n        \\n        int maxval = count;\\n\\n        \\n        for( int i=1 ; i<n-k+1 ; i++ ){\\n            if( str[i-1]==\\'a\\' or str[i-1]==\\'e\\' or str[i-1]==\\'i\\' or str[i-1]==\\'o\\' or str[i-1]==\\'u\\' ){\\n                count-=1;\\n            } \\n            if( str[i+k-1]==\\'a\\' or str[i+k-1]==\\'e\\' or str[i+k-1]==\\'i\\' or str[i+k-1]==\\'o\\' or str[i+k-1]==\\'u\\'){\\n                count+=1;\\n            }\\n            maxval = max( maxval, count );\\n        }\\n        return maxval;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3488127,
                "title": "simple-and-easy-to-understand-c-solution",
                "content": "# Intuition\\n- Sliding Window Concept\\n- Select subsequent substring and count vowels in it.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First we will select first substring of length and count number of vowels in it.\\n- Then, we are going select next window. On moving to next window, we are going to remove first charcter of last substring and add next charcter. \\n- For example: if string s = \"aabcdee\", k = 3, first substring is \"aab\", no. of vowels(say vow) is 2, next substring is \"abc\", ie we have removed first \\'a\\' from substring \"aab\" and added (0+k)th element ie \\'c\\'. Now, on removing \\'a\\', vow = vow - 1 = 1, and adding \\'c\\' will not affect vow. Similarly we check through the string.\\nCode goes like : \\n    1. Run a for loop from i = 0 to k-1, calculate vow(i.e., no. of vowels).\\n    2. Run another for loop from i = 0 to n-k, if(s[i] is vowel) then vow is decreased by 1. Check if(s[i+k] is vowel) vow is increased by 1.\\n    3. Keep track of highest value of vow.\\n    4. Return answer\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.size(), vow = 0, ans;\\n        for(int i = 0; i < k; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\')\\n                vow++;\\n        }\\n        ans = vow;\\n        for(int i = 0; i < n-k; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') vow--;\\n            if(s[i+k] == \\'a\\' || s[i+k] == \\'e\\' || s[i+k] == \\'i\\' || s[i+k] == \\'o\\' || s[i+k] == \\'u\\') \\n                vow++;\\n            ans = max(ans, vow);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.size(), vow = 0, ans;\\n        for(int i = 0; i < k; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\')\\n                vow++;\\n        }\\n        ans = vow;\\n        for(int i = 0; i < n-k; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') vow--;\\n            if(s[i+k] == \\'a\\' || s[i+k] == \\'e\\' || s[i+k] == \\'i\\' || s[i+k] == \\'o\\' || s[i+k] == \\'u\\') \\n                vow++;\\n            ans = max(ans, vow);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487122,
                "title": "java-easy-solution-beginner-friendly-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code implements a sliding window approach to find the maximum number of vowels in a substring of length k in a given string. It uses a variable sum to keep track of the number of vowels in the current window and updates it at each step by adding the vowel count of the new character and subtracting the vowel count of the character that has just left the window. It also keeps track of the maximum sum seen so far in a variable ans and returns it at the end of the loop.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n![download (15).jfif](https://assets.leetcode.com/users/images/98d5121b-bd68-45d5-88cf-963020d28768_1683259142.9221802.jpeg)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ? 1 : 0;\\n    }\\n    public int maxVowels(String s, int k) {\\n        int sum = 0, ans = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (i < k)\\n                sum += isVowel(s.charAt(i));\\n            else {\\n                sum += isVowel(s.charAt(i));\\n                sum -= isVowel(s.charAt(i - k));\\n            }\\n            if (ans < sum)\\n                ans = sum;\\n            if (ans == k)\\n                return k;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ? 1 : 0;\\n    }\\n    public int maxVowels(String s, int k) {\\n        int sum = 0, ans = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (i < k)\\n                sum += isVowel(s.charAt(i));\\n            else {\\n                sum += isVowel(s.charAt(i));\\n                sum -= isVowel(s.charAt(i - k));\\n            }\\n            if (ans < sum)\\n                ans = sum;\\n            if (ans == k)\\n                return k;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1698949,
                "title": "javascript-sliding-window-explained-possible-early-exit",
                "content": "```\\nvar maxVowels = function(s, k) {\\n    let vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    let maxCount = 0;\\n    let start = 0; // the left edge of the window\\n    let count = 0; // count of vowels for current substring\\n\\t// expanding the right edge of the window one character at a time\\n    for (let end = 0; end < s.length; end++) {\\n\\t    // increment count of vowels for current substring if the current character is present in vowels array\\n        if (vowels.includes(s[end])) {\\n            count +=1;\\n        }\\n        // if substring is longer than K, let\\'s shrink the window by moving left edge\\n        if (end - start + 1 > k) {\\n\\t\\t\\t// reduce the current count by one if the character on the left edge is vowel\\n            if(vowels.includes(s[start])) {\\n                count -=1;\\n            }\\n\\t\\t\\t//shrinking the left edge of the window\\n            start +=1;\\n        }\\n\\t\\t// checking if current count is larger than current maximum count\\n        maxCount = Math.max(maxCount, count)\\n\\t\\t// if maxCount is equal to K, no need to check further, it is the max possible count\\n        if (maxCount == k) return maxCount;\\n    }\\n    return maxCount;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\nvar maxVowels = function(s, k) {\\n    let vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    let maxCount = 0;\\n    let start = 0; // the left edge of the window\\n    let count = 0; // count of vowels for current substring\\n\\t// expanding the right edge of the window one character at a time\\n    for (let end = 0; end < s.length; end++) {\\n\\t    // increment count of vowels for current substring if the current character is present in vowels array\\n        if (vowels.includes(s[end])) {\\n            count +=1;\\n        }\\n        // if substring is longer than K, let\\'s shrink the window by moving left edge\\n        if (end - start + 1 > k) {\\n\\t\\t\\t// reduce the current count by one if the character on the left edge is vowel\\n            if(vowels.includes(s[start])) {\\n                count -=1;\\n            }\\n\\t\\t\\t//shrinking the left edge of the window\\n            start +=1;\\n        }\\n\\t\\t// checking if current count is larger than current maximum count\\n        maxCount = Math.max(maxCount, count)\\n\\t\\t// if maxCount is equal to K, no need to check further, it is the max possible count\\n        if (maxCount == k) return maxCount;\\n    }\\n    return maxCount;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1248940,
                "title": "my-o-n-soln-c-begineer-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) \\n    {\\n        queue<char> q;\\n        int cnt=0;\\n        int maxi=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            q.push(s[i]);\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' ||s[i]==\\'i\\' ||s[i]==\\'o\\' ||s[i]==\\'u\\' )\\n            {\\n                cnt++;\\n            }\\n            if(q.size()==k)\\n            {\\n                maxi=max(maxi,cnt);\\n                char c= q.front();\\n                if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||c==\\'o\\' ||c==\\'u\\')\\n                {\\n                    cnt--;\\n                }\\n                q.pop();\\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Queue",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) \\n    {\\n        queue<char> q;\\n        int cnt=0;\\n        int maxi=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            q.push(s[i]);\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' ||s[i]==\\'i\\' ||s[i]==\\'o\\' ||s[i]==\\'u\\' )\\n            {\\n                cnt++;\\n            }\\n            if(q.size()==k)\\n            {\\n                maxi=max(maxi,cnt);\\n                char c= q.front();\\n                if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||c==\\'o\\' ||c==\\'u\\')\\n                {\\n                    cnt--;\\n                }\\n                q.pop();\\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487756,
                "title": "java-o-n-solution-with-explanation",
                "content": "# Please upvote if you like it :)\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEvery time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value **k** you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Example str = \"abciiidef\" k=\\'3\\'\\n- when our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\n- Now before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0. \\n- In next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\n- We have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\".\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nclass Solution {\\n    boolean isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int vowels = 0;\\n        for(int i = 0;i<s.length();i++) {\\n            if(isVowel(s.charAt(i))) vowels++;\\n            if((i+1)>=k) { //When the substring length is >=k then only we should start finding the max vowels.\\n                maxVowels = Math.max(maxVowels,vowels);\\n                if(i-(k-1)>=0) { //To check first character is vowel or not\\n                    if(isVowel(s.charAt(i-(k-1)))) vowels--;\\n                }\\n            }\\n        }\\n        return maxVowels;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    boolean isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int vowels = 0;\\n        for(int i = 0;i<s.length();i++) {\\n            if(isVowel(s.charAt(i))) vowels++;\\n            if((i+1)>=k) { //When the substring length is >=k then only we should start finding the max vowels.\\n                maxVowels = Math.max(maxVowels,vowels);\\n                if(i-(k-1)>=0) { //To check first character is vowel or not\\n                    if(isVowel(s.charAt(i-(k-1)))) vowels--;\\n                }\\n            }\\n        }\\n        return maxVowels;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3215394,
                "title": "sliding-window-aditya-verma-s-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- SLIDING WINDOW\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The given code implements a sliding window approach to find the maximum number of vowels in a substring of length k in the given string s.\\n\\n- The main idea is to use two pointers, i and j, to represent the left and right endpoints of the sliding window, respectively. The variable count is used to keep track of the number of vowels in the current window. The variable maxNo is used to store the maximum number of vowels seen so far in any window of size k.\\n\\n- The loop starts with both pointers i and j at the beginning of the string. The code then checks if the current character at j is a vowel or not. If it is a vowel, the count is incremented.\\n\\n- Next, the code checks if the size of the current window is less than k. If it is, then we move the j pointer to the right and continue.\\n\\n- When the window size becomes equal to k, we check if the current count of vowels is greater than the maxNo seen so far. If it is, then we update maxNo. We also check if the left endpoint of the window, s[i], is a vowel or not. If it is a vowel, then we decrement the count by 1.\\n\\n- We then move both the pointers i and j one step to the right and continue the loop until we have processed all the substrings of length k in the string.\\n\\n- Finally, we return the maxNo as the maximum number of vowels seen in any substring of length k in the given string s.\\n\\n# Complexity\\nTime complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- The time complexity of the given algorithm is O(n), where n is the length of the input string s. This is because we traverse the string s only once using the two pointers i and j, and at each step, we perform constant time operations such as comparing characters and updating variables.\\n\\nSpace complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- The space complexity of the given algorithm is O(1), as we use only a constant amount of extra space to store the variables i, j, count, and maxNo. We do not use any extra data structures to store the characters of the input string or the substrings of length k. Therefore, the space complexity does not depend on the size of the input string or the length of the substring k.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) \\n    {\\n        int n = s.size();\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        int maxNo = INT_MIN;\\n\\n        while(j < n)\\n        {\\n            if(s[j] == \\'a\\'||s[j] == \\'e\\'||s[j] == \\'i\\'||s[j] == \\'o\\'||s[j] == \\'u\\' )\\n                count++;\\n\\n            if(j - i + 1 < k)\\n                j++;\\n\\n            else if(j - i + 1 == k)\\n            {\\n                maxNo = max(count, maxNo);\\n\\n                if(s[i] == \\'a\\'||s[i] == \\'e\\'||s[i] == \\'i\\'||s[i] == \\'o\\'||s[i] == \\'u\\')\\n                    count--;\\n\\n                j++;\\n                i++;    \\n            }        \\n        }\\n        return maxNo;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) \\n    {\\n        int n = s.size();\\n        int i = 0;\\n        int j = 0;\\n        int count = 0;\\n        int maxNo = INT_MIN;\\n\\n        while(j < n)\\n        {\\n            if(s[j] == \\'a\\'||s[j] == \\'e\\'||s[j] == \\'i\\'||s[j] == \\'o\\'||s[j] == \\'u\\' )\\n                count++;\\n\\n            if(j - i + 1 < k)\\n                j++;\\n\\n            else if(j - i + 1 == k)\\n            {\\n                maxNo = max(count, maxNo);\\n\\n                if(s[i] == \\'a\\'||s[i] == \\'e\\'||s[i] == \\'i\\'||s[i] == \\'o\\'||s[i] == \\'u\\')\\n                    count--;\\n\\n                j++;\\n                i++;    \\n            }        \\n        }\\n        return maxNo;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489535,
                "title": "o-n-time-and-o-1-space-py",
                "content": "# Approach\\nSliding Window\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        def vow(n):\\n            return n==\\'a\\' or n==\\'e\\' or n==\\'i\\' or n==\\'o\\' or n==\\'u\\'\\n        ans=0\\n        for i in range(k):\\n            if vow(s[i]):\\n                ans+=1\\n        m_ans=ans\\n        for i in range(k,len(s),1):\\n            if vow(s[i-k]):ans-=1\\n            if vow(s[i]):ans+=1\\n            m_ans=max(ans,m_ans)\\n        return m_ans\\n\\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        def vow(n):\\n            return n==\\'a\\' or n==\\'e\\' or n==\\'i\\' or n==\\'o\\' or n==\\'u\\'\\n        ans=0\\n        for i in range(k):\\n            if vow(s[i]):\\n                ans+=1\\n        m_ans=ans\\n        for i in range(k,len(s),1):\\n            if vow(s[i-k]):ans-=1\\n            if vow(s[i]):ans+=1\\n            m_ans=max(ans,m_ans)\\n        return m_ans\\n\\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487862,
                "title": "c-easy-explanation-o-n-time",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe given code finds the maximum number of vowels in any k-length substring of a given string `s`. The approach used in the code is a sliding window technique:\\n\\n1. Initialize an unordered_map `uno` to count the number of vowels in the first k characters of the string `s`.\\n2. Sum up the number of vowels in the first k characters of `s`.\\n3. Use a sliding window to find the maximum number of vowels in any k-length substring of `s`:\\n   - Initialize two pointers, `start` and `end`, to the first and `k`th characters of `s`, respectively.\\n   - While `end` is less than the length of `s`, do the following:\\n     - Update the number of vowels in the current k-length substring by:\\n       - Setting a variable `local` to the previous vowel count.\\n       - Removing the first character from the current substring `a` and adding the next character from `s`.\\n       - Checking if the first and last characters of the substring `a` are vowels:\\n         - If the last character is a vowel, increment `local` if the first character is not a vowel.\\n         - If the last character is not a vowel, decrement `local` if the first character is a vowel.\\n       - Update the previous vowel count to the current vowel count by setting `pre` to `local`.\\n     - Update the maximum vowel count found so far by setting `count` to the maximum of `count` and `local`.\\n     - Move the sliding window by incrementing `start` and `end`.\\n4. Return the maximum vowel count found.\\n\\n\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        unordered_map<char,int> uno;\\n        string a=s.substr(0,k);\\n        // Count the number of vowels in the first k characters\\n        for(auto i:a)\\n        {\\n            if(i==\\'a\\' ||i==\\'e\\' || i==\\'i\\' || i==\\'o\\' || i==\\'u\\' )\\n            {\\n                uno[i]++;\\n            }\\n        }\\n        int count=0;\\n        // Sum up the number of vowels in the first k characters\\n        for(auto i:uno)\\n        {\\n            count += i.second;\\n        }\\n\\n        int start=0;\\n        int end=k;\\n        int pre=count;\\n\\n        // Use sliding window to find the maximum number of vowels in any k-length substring of s\\n        while(end<n)\\n        {\\n            // Update the number of vowels in the current k-length substring\\n            int local=pre;\\n            // Remove the first character from the substring\\n            a.erase(0,1);\\n            // Add the next character to the substring\\n            a += s[end];\\n            // Check if the first and last characters of the substring are vowels\\n            if(s[end]==\\'a\\' ||s[end]==\\'e\\' || s[end]==\\'i\\' || s[end]==\\'o\\' || s[end]==\\'u\\')\\n            {\\n                // If the first character was not a vowel, increment the vowel count\\n                if(!(s[start]==\\'a\\' ||s[start]==\\'e\\' || s[start]==\\'i\\' || s[start]==\\'o\\' || s[start]==\\'u\\'))\\n                {\\n                    local++;\\n                }\\n            }\\n            else\\n            {\\n                // If the first character was a vowel, decrement the vowel count\\n                if((s[start]==\\'a\\' ||s[start]==\\'e\\' || s[start]==\\'i\\' || s[start]==\\'o\\' || s[start]==\\'u\\'))\\n                {\\n                    local--;\\n                }\\n            }\\n            // Update the previous vowel count to the current vowel count\\n            pre=local;\\n            // Update the maximum vowel count found so far\\n            count=max(local,count);\\n            // Move the sliding window by one character\\n            start++;\\n            end++;\\n        }    \\n        // Return the maximum vowel count found\\n        return count;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        unordered_map<char,int> uno;\\n        string a=s.substr(0,k);\\n        // Count the number of vowels in the first k characters\\n        for(auto i:a)\\n        {\\n            if(i==\\'a\\' ||i==\\'e\\' || i==\\'i\\' || i==\\'o\\' || i==\\'u\\' )\\n            {\\n                uno[i]++;\\n            }\\n        }\\n        int count=0;\\n        // Sum up the number of vowels in the first k characters\\n        for(auto i:uno)\\n        {\\n            count += i.second;\\n        }\\n\\n        int start=0;\\n        int end=k;\\n        int pre=count;\\n\\n        // Use sliding window to find the maximum number of vowels in any k-length substring of s\\n        while(end<n)\\n        {\\n            // Update the number of vowels in the current k-length substring\\n            int local=pre;\\n            // Remove the first character from the substring\\n            a.erase(0,1);\\n            // Add the next character to the substring\\n            a += s[end];\\n            // Check if the first and last characters of the substring are vowels\\n            if(s[end]==\\'a\\' ||s[end]==\\'e\\' || s[end]==\\'i\\' || s[end]==\\'o\\' || s[end]==\\'u\\')\\n            {\\n                // If the first character was not a vowel, increment the vowel count\\n                if(!(s[start]==\\'a\\' ||s[start]==\\'e\\' || s[start]==\\'i\\' || s[start]==\\'o\\' || s[start]==\\'u\\'))\\n                {\\n                    local++;\\n                }\\n            }\\n            else\\n            {\\n                // If the first character was a vowel, decrement the vowel count\\n                if((s[start]==\\'a\\' ||s[start]==\\'e\\' || s[start]==\\'i\\' || s[start]==\\'o\\' || s[start]==\\'u\\'))\\n                {\\n                    local--;\\n                }\\n            }\\n            // Update the previous vowel count to the current vowel count\\n            pre=local;\\n            // Update the maximum vowel count found so far\\n            count=max(local,count);\\n            // Move the sliding window by one character\\n            start++;\\n            end++;\\n        }    \\n        // Return the maximum vowel count found\\n        return count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487175,
                "title": "js-ts-sets-sliding-windows-and-early-returns-beats-97-92-runtime-91-67-memory",
                "content": "# Intuition\\nSets, Sliding Windows, and Early Returns. Oh my!\\n\\n# Approach\\n\\n1. For simplicity and speed, we place the vowels in a `Set`. \\n2. Using a `for` loop, we get the initial `max` number of vowels in the first window. We set the `current` to `max` before continuing.\\n3. From there, we use the sliding window technique (see code comments) to determine the number of vowels in any given window.\\n4. We set the `max` if the `current` number is greater.\\n\\nWe attempt to return at multiple points in the code if `max` or `current` have hit `k`, seeing as there\\'s no point in continuing. \\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nfunction maxVowels(s: string, k: number): number {\\n  const vowels = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n\\n  let max = 0 // Max number of vowels in any window\\n  let current = 0 // Number of vowels in the current window\\n\\n  // Count the total number of vowels from the first window\\n  for (let i = 0; i < k; i++) {\\n    if (vowels.has(s[i])) max++\\n  }\\n  \\n  if (max === k) return max // Return if the `k` is hit\\n\\n  current = max // Set the current to the max\\n\\n  // Sliding window technique\\n  for (let i = 1; i <= s.length - k; i++) {\\n    if (vowels.has(s[i - 1])) current-- // Remove the left-most vowel\\n    if (vowels.has(s[i + k - 1])) current++ // Add the right-most vowel\\n\\n    if (current === k) return current // Return if the `k` is hit\\n    if (current > max) max = current // Set `max` to the `current` value, if greater\\n  }\\n\\n  return max\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction maxVowels(s: string, k: number): number {\\n  const vowels = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n\\n  let max = 0 // Max number of vowels in any window\\n  let current = 0 // Number of vowels in the current window\\n\\n  // Count the total number of vowels from the first window\\n  for (let i = 0; i < k; i++) {\\n    if (vowels.has(s[i])) max++\\n  }\\n  \\n  if (max === k) return max // Return if the `k` is hit\\n\\n  current = max // Set the current to the max\\n\\n  // Sliding window technique\\n  for (let i = 1; i <= s.length - k; i++) {\\n    if (vowels.has(s[i - 1])) current-- // Remove the left-most vowel\\n    if (vowels.has(s[i + k - 1])) current++ // Add the right-most vowel\\n\\n    if (current === k) return current // Return if the `k` is hit\\n    if (current > max) max = current // Set `max` to the `current` value, if greater\\n  }\\n\\n  return max\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486820,
                "title": "easy-java-solution-using-char-array-o-n-time",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\nn is size to string\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int count = 0;\\n        char arr[] = s.toCharArray();\\n        for(int i = 0; i<k; i++){\\n            if(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n                count++;\\n        }\\n        int max = count;\\n        for(int i = k; i<arr.length; i++){\\n            if(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n                count++;\\n            if(arr[i-k] == \\'a\\' || arr[i-k] == \\'e\\' || arr[i-k] == \\'i\\' || arr[i-k] == \\'o\\' || arr[i-k] == \\'u\\')\\n                count--;\\n            max = Math.max(count, max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int count = 0;\\n        char arr[] = s.toCharArray();\\n        for(int i = 0; i<k; i++){\\n            if(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n                count++;\\n        }\\n        int max = count;\\n        for(int i = k; i<arr.length; i++){\\n            if(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n                count++;\\n            if(arr[i-k] == \\'a\\' || arr[i-k] == \\'e\\' || arr[i-k] == \\'i\\' || arr[i-k] == \\'o\\' || arr[i-k] == \\'u\\')\\n                count--;\\n            max = Math.max(count, max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 828324,
                "title": "simple-c-code-beating-97",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int i=0,maxsum=0,sum=0,l=0;\\n        while(k--)\\n            if(isvovel(s[i++])) sum++;\\n        maxsum=sum;\\n        while(i<s.length()){\\n            if(isvovel(s[l++])) sum--;\\n            if(isvovel(s[i++])) sum++;\\n            maxsum= maxsum>sum ? maxsum: sum;\\n        }\\n        return maxsum;\\n    }\\n    bool isvovel(char ch){\\n        if(ch==\\'a\\'|| ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\') return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int i=0,maxsum=0,sum=0,l=0;\\n        while(k--)\\n            if(isvovel(s[i++])) sum++;\\n        maxsum=sum;\\n        while(i<s.length()){\\n            if(isvovel(s[l++])) sum--;\\n            if(isvovel(s[i++])) sum++;\\n            maxsum= maxsum>sum ? maxsum: sum;\\n        }\\n        return maxsum;\\n    }\\n    bool isvovel(char ch){\\n        if(ch==\\'a\\'|| ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\') return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911945,
                "title": "java-simple-solution-beginner-friendly-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn this solution, we employ a `sliding window` approach of a fixed size k, which slides from index 0 to index` n-1-k` within the given string. At each position of the window, we calculate the count of vowels contained within the window and continuously monitor the maximum count across all windows.\\n# Complexity\\n- Time complexity: `O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int currentVowelCount = 0, maxVowelCount = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (isVowel(s.charAt(i))) \\n                currentVowelCount++;\\n            if (i >= k && isVowel(s.charAt(i - k))) \\n                currentVowelCount--;\\n            maxVowelCount = Math.max(maxVowelCount, currentVowelCount);\\n        }\\n        return maxVowelCount;\\n    }\\n\\n    boolean isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int currentVowelCount = 0, maxVowelCount = 0;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (isVowel(s.charAt(i))) \\n                currentVowelCount++;\\n            if (i >= k && isVowel(s.charAt(i - k))) \\n                currentVowelCount--;\\n            maxVowelCount = Math.max(maxVowelCount, currentVowelCount);\\n        }\\n        return maxVowelCount;\\n    }\\n\\n    boolean isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489684,
                "title": "sliding-window-easiest-approach-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThink about the logic of what\\'s happening in the sliding window approach each time when we move move further.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* Sliding window\\n* keep track of number of vowels present in each k window and store the maximum count \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int isvowel(char ch)\\n    {\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int i;\\n        int curr_vow = 0;\\n        int max_vow = 0;\\n        for(i=0;i<s.length();i++)\\n        {\\n            curr_vow += isvowel(s[i]);\\n            if(i>=k)\\n            {\\n                curr_vow -= isvowel(s[i-k]);\\n            }\\n            max_vow = max(max_vow,curr_vow);\\n        }\\n        return max_vow;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int isvowel(char ch)\\n    {\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int i;\\n        int curr_vow = 0;\\n        int max_vow = 0;\\n        for(i=0;i<s.length();i++)\\n        {\\n            curr_vow += isvowel(s[i]);\\n            if(i>=k)\\n            {\\n                curr_vow -= isvowel(s[i-k]);\\n            }\\n            max_vow = max(max_vow,curr_vow);\\n        }\\n        return max_vow;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489565,
                "title": "c-easy-o-n-explaination",
                "content": "# Intuition\\n- We just have to maintain the k size window. \\n- Maintain the count of vowels present in the window.\\n- And take out the maximum from every window. \\n- Everytime we add one character and remove one character.\\n\\n# Approach\\n- To decrease the time complexity we need to solve the problem in linear time. \\n- Everytime we add and remove one character to form a window of k size.\\n- If removed character is vowel : then -1 from the vowel count.\\n- If added character is vowel : then +1 to the vowel count.\\n\\n\\n# Optimal Code \\n- Linear Time Complexity : O(n) \\n```\\nclass Solution {\\npublic:\\n\\n    bool isVowel( char c ){\\n        if( c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ) return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        \\n        int maxi = 0;\\n        int tmp = 0;\\n\\n        // count the number of vowels in first k size window \\n        for( int i=0 ; i<k ; i++ ){\\n            if( isVowel(s[i])) tmp++;\\n        }\\n\\n        maxi = max( maxi, tmp );\\n\\n        // add one character and remove one character from the window \\n        // if the removed character is vowel -1 from the vowel count \\n        // if the added character is vowel +1 in the vowel count \\n        for( int i=k ; i<s.size() ; i++ ){\\n\\n            if( isVowel(s[i-k]) ) tmp -= 1;\\n\\n            if( tmp < 0 ) tmp = 0;\\n\\n            if( isVowel(s[i]) ) tmp += 1;\\n\\n            maxi = max( maxi, tmp );\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```\\n# Brute Force Solution \\n- Time Limit Exceeded\\n- Test Cases Passed : 102/108\\n- Worst Time complexity: O(n^2) > 10^5 (Required)\\n```\\nclass Solution {\\npublic:\\n\\n    bool isVowel( char c ){\\n        if( c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ) return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        \\n        int maxi = 0;\\n\\n        for( int i=0 ; i<=s.size()-k ; i++ ){\\n\\n            int tmp = 0;\\n\\n            for( int j=i ; j<i+k ; j++ ){\\n\\n                if( isVowel(s[j]) ) tmp++;\\n            }\\n\\n            maxi = max( maxi, tmp );\\n\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    bool isVowel( char c ){\\n        if( c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ) return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        \\n        int maxi = 0;\\n        int tmp = 0;\\n\\n        // count the number of vowels in first k size window \\n        for( int i=0 ; i<k ; i++ ){\\n            if( isVowel(s[i])) tmp++;\\n        }\\n\\n        maxi = max( maxi, tmp );\\n\\n        // add one character and remove one character from the window \\n        // if the removed character is vowel -1 from the vowel count \\n        // if the added character is vowel +1 in the vowel count \\n        for( int i=k ; i<s.size() ; i++ ){\\n\\n            if( isVowel(s[i-k]) ) tmp -= 1;\\n\\n            if( tmp < 0 ) tmp = 0;\\n\\n            if( isVowel(s[i]) ) tmp += 1;\\n\\n            maxi = max( maxi, tmp );\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\n    bool isVowel( char c ){\\n        if( c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ) return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        \\n        int maxi = 0;\\n\\n        for( int i=0 ; i<=s.size()-k ; i++ ){\\n\\n            int tmp = 0;\\n\\n            for( int j=i ; j<i+k ; j++ ){\\n\\n                if( isVowel(s[j]) ) tmp++;\\n            }\\n\\n            maxi = max( maxi, tmp );\\n\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488765,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAll we need to do is to count number of vowels in every substring and find the maximum number of vowels that can be present in substring of size k.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nstep 1: initialize pointers i, j where i indicates start of window and j represents end. ALso store vowels in a list \"vowels\".\\n```\\ni, j = 0, 0\\nvowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\nc = 0\\n```\\nc is a vairiable that holds current count of vowels in present substring\\n\\nstep 2: Now we will iterate thorugh the string and check the count of vowels within the window of size k.\\n\\nstep 3: Until the window size k, \"j\" will increment at the same time check the s[j] is vowels or not. if so add 1 to c.\\n\\n```\\nif j-i<k:\\n    if s[j] in vowels:\\n        c+=1\\n    j+=1\\n```\\n\\nstep 4: If window size reaches k, then we will remove the 1st element in window and add new element by increment j and decrement i.\\nbefore that check s[i] is vowel. if so decrement c value and also.\\n```\\nelse:\\n    if s[i] in vowels:\\n        c-=1\\n    i+=1\\n```\\nstep 5: check current window vowel count is higher than max vowel count, if so update the max vowel count.\\n```\\nvows = max(vows, c)\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        vows = 0\\n        n = len(s)\\n        i = 0\\n        j = 0\\n        c = 0\\n        while j<n:\\n            if j-i<k:\\n                if s[j] in vowels:\\n                    c+=1\\n                j+=1\\n            else:\\n                if s[i] in vowels:\\n                    c-=1\\n                i+=1\\n            vows = max(vows, c)\\n        return vows\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\ni, j = 0, 0\\nvowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\nc = 0\\n```\n```\\nif j-i<k:\\n    if s[j] in vowels:\\n        c+=1\\n    j+=1\\n```\n```\\nelse:\\n    if s[i] in vowels:\\n        c-=1\\n    i+=1\\n```\n```\\nvows = max(vows, c)\\n```\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']\\n        vows = 0\\n        n = len(s)\\n        i = 0\\n        j = 0\\n        c = 0\\n        while j<n:\\n            if j-i<k:\\n                if s[j] in vowels:\\n                    c+=1\\n                j+=1\\n            else:\\n                if s[i] in vowels:\\n                    c-=1\\n                i+=1\\n            vows = max(vows, c)\\n        return vows\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487837,
                "title": "java-sliding-window-o-n-hashing-90",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    int[] vowels;\\n \\n   \\n    public int maxVowels(String s, int k) {\\n        \\n        int maxLen = 0;\\n        \\n        vowels = new int[26];\\n    vowels[\\'a\\' - \\'a\\']++;\\n    vowels[\\'e\\' - \\'a\\']++;\\n    vowels[\\'i\\' - \\'a\\']++;\\n    vowels[\\'o\\' - \\'a\\']++;\\n    vowels[\\'u\\' - \\'a\\']++;\\n       \\n       int vCnt = 0,l = 0;\\n        for(int i = 0;i < s.length();i++)\\n        {\\n             \\n             char c  = s.charAt(i);\\n             vCnt += (vowels[c - \\'a\\'] != 0)? 1 : 0;\\n             if(i >= k - 1)\\n             {\\n     \\n            maxLen = Math.max(maxLen,vCnt);\\n             \\n             if(vowels[s.charAt(l++) - \\'a\\'] != 0) vCnt--;\\n\\n             }\\n        }\\n\\n        return maxLen;\\n    }\\n\\n \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    int[] vowels;\\n \\n   \\n    public int maxVowels(String s, int k) {\\n        \\n        int maxLen = 0;\\n        \\n        vowels = new int[26];\\n    vowels[\\'a\\' - \\'a\\']++;\\n    vowels[\\'e\\' - \\'a\\']++;\\n    vowels[\\'i\\' - \\'a\\']++;\\n    vowels[\\'o\\' - \\'a\\']++;\\n    vowels[\\'u\\' - \\'a\\']++;\\n       \\n       int vCnt = 0,l = 0;\\n        for(int i = 0;i < s.length();i++)\\n        {\\n             \\n             char c  = s.charAt(i);\\n             vCnt += (vowels[c - \\'a\\'] != 0)? 1 : 0;\\n             if(i >= k - 1)\\n             {\\n     \\n            maxLen = Math.max(maxLen,vCnt);\\n             \\n             if(vowels[s.charAt(l++) - \\'a\\'] != 0) vCnt--;\\n\\n             }\\n        }\\n\\n        return maxLen;\\n    }\\n\\n \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487665,
                "title": "very-easy-intutive-code-sliding-window-in-c-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int i,j,c=0,vc=0,m=0;\\n        int n=s.size();\\n\\n        for(i=0;i<k;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            vc+=1;\\n        }\\n        m=vc;\\n        \\n\\n        for(i=k;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            vc++;\\n            if(s[i-k]==\\'a\\'||s[i-k]==\\'e\\'||s[i-k]==\\'i\\'||s[i-k]==\\'o\\'||s[i-k]==\\'u\\')\\n            vc-=1;\\n\\n            m=max(vc,m);\\n        }\\n        return m;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int i,j,c=0,vc=0,m=0;\\n        int n=s.size();\\n\\n        for(i=0;i<k;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            vc+=1;\\n        }\\n        m=vc;\\n        \\n\\n        for(i=k;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            vc++;\\n            if(s[i-k]==\\'a\\'||s[i-k]==\\'e\\'||s[i-k]==\\'i\\'||s[i-k]==\\'o\\'||s[i-k]==\\'u\\')\\n            vc-=1;\\n\\n            m=max(vc,m);\\n        }\\n        return m;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487398,
                "title": "c-easy-approach-without-using-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nasf\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int isVowel(char c){\\n        if(c==\\'a\\'||c==\\'e\\'||c==\\'i\\'||c==\\'o\\'||c==\\'u\\') return 1;\\n        return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n        int max=0;\\n        int c=0;\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s[i])==1) c++;\\n        }\\n        cout<<c<<endl;\\n        int i=0;\\n        max=c;\\n        int j=k;\\n        while(j<s.size()){\\n            c=c+isVowel(s[j++])-isVowel(s[i++]);\\n            cout<<c<<endl;\\n            if(c==k) return k;\\n            if(c>max) max=c;\\n        }\\n        return max;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int isVowel(char c){\\n        if(c==\\'a\\'||c==\\'e\\'||c==\\'i\\'||c==\\'o\\'||c==\\'u\\') return 1;\\n        return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n        int max=0;\\n        int c=0;\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s[i])==1) c++;\\n        }\\n        cout<<c<<endl;\\n        int i=0;\\n        max=c;\\n        int j=k;\\n        while(j<s.size()){\\n            c=c+isVowel(s[j++])-isVowel(s[i++]);\\n            cout<<c<<endl;\\n            if(c==k) return k;\\n            if(c>max) max=c;\\n        }\\n        return max;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 652924,
                "title": "javascript-easy-to-understand-3-solutions-from-96ms-to-64ms",
                "content": "## SOLUTION 1\\n\\nIt\\'s straight forward to think about using the sliding window algorithm to solve this problem.\\n\\nIn solution 1, we use a set to determine whether the char is a vowel. And then do the calculation.\\n\\n```js\\nconst maxVowels = (s, k) => {\\n  const VOWEL = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']);\\n  let max = 0;\\n  for (let i = 0; i < k; ++i) {\\n    VOWEL.has(s[i]) && ++max;\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    VOWEL.has(s[i]) && --cur;\\n    VOWEL.has(s[i + k]) && ++cur;\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```\\n\\n## SOLUTION 2\\n\\nIn solution 2, we use a fixed-length `Uint8Array` to improve the performance.\\n\\nWe init the weight value first, and then in the movements of slide window, we don\\'t need to check but just calculation.\\n\\n```js\\nconst maxVowels = (s, k) => {\\n  const weight = new Uint8Array(123);\\n  let max = 0;\\n  weight[97] = weight[101] = weight[105] = weight[111] = weight[117] = 1;\\n  for (let i = 0; i < k; ++i) {\\n    max += weight[s.charCodeAt(i)];\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    cur += weight[s.charCodeAt(i + k)] - weight[s.charCodeAt(i)];\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```\\n\\n## SOLUTION 3\\n\\nTo avoid using too much extra space, we could use an int32 value to store the weight since the count of lower case English letters is less than 32.\\n\\nAnd by the way, we need to use bit operations to get the weight from that int32 value.\\n\\n```js\\nconst maxVowels = (s, k) => {\\n  const BASE = 97;\\n  const weight = 1065233; // 1 + (1 << 4) + (1 << 8) + (1 << 14) + (1 << 20);\\n  let max = 0;\\n  for (let i = 0; i < k; ++i) {\\n    max += weight >> (s.charCodeAt(i) - BASE) & 1;\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    cur += (weight >> (s.charCodeAt(i + k) - BASE) & 1) - (weight >> (s.charCodeAt(i) - BASE) & 1);\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst maxVowels = (s, k) => {\\n  const VOWEL = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']);\\n  let max = 0;\\n  for (let i = 0; i < k; ++i) {\\n    VOWEL.has(s[i]) && ++max;\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    VOWEL.has(s[i]) && --cur;\\n    VOWEL.has(s[i + k]) && ++cur;\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```\n```js\\nconst maxVowels = (s, k) => {\\n  const weight = new Uint8Array(123);\\n  let max = 0;\\n  weight[97] = weight[101] = weight[105] = weight[111] = weight[117] = 1;\\n  for (let i = 0; i < k; ++i) {\\n    max += weight[s.charCodeAt(i)];\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    cur += weight[s.charCodeAt(i + k)] - weight[s.charCodeAt(i)];\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```\n```js\\nconst maxVowels = (s, k) => {\\n  const BASE = 97;\\n  const weight = 1065233; // 1 + (1 << 4) + (1 << 8) + (1 << 14) + (1 << 20);\\n  let max = 0;\\n  for (let i = 0; i < k; ++i) {\\n    max += weight >> (s.charCodeAt(i) - BASE) & 1;\\n  }\\n  for (let i = 0, cur = max; i < s.length - k; ++i) {\\n    cur += (weight >> (s.charCodeAt(i + k) - BASE) & 1) - (weight >> (s.charCodeAt(i) - BASE) & 1);\\n    cur > max && (max = cur);\\n  }\\n  return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 648714,
                "title": "simple-java-o-n-dynamic-programming-is-there-a-better-approach",
                "content": "```\\nclass Solution {\\n\\t    public int maxVowels(String s, int k) {\\n            \\n\\t        String V = \"aeiou\";\\n\\t        char[] t = s.toCharArray();\\n\\t        int n = t.length;\\n\\t        int[] dp= new int[n+1];\\n            \\n            \\n\\t        for(int i = 0;i < n;i++){\\n\\t        \\tdp[i+1] = dp[i] + (V.indexOf(t[i]) >= 0 ? 1 : 0);\\n\\t        }\\n            \\n\\t        int ans = 0;\\n            \\n            \\n\\t        for(int i = k;i <= n;i++){\\n\\t        \\tans = Math.max(ans, dp[i] - dp[i-k]);\\n\\t        }\\n            \\n            \\n\\t        return ans;\\n\\t    }\\n\\t}\\n\\t",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\n\\t    public int maxVowels(String s, int k) {\\n            \\n\\t        String V = \"aeiou\";\\n\\t        char[] t = s.toCharArray();\\n\\t        int n = t.length;\\n\\t        int[] dp= new int[n+1];\\n            \\n            \\n\\t        for(int i = 0;i < n;i++){\\n\\t        \\tdp[i+1] = dp[i] + (V.indexOf(t[i]) >= 0 ? 1 : 0);\\n\\t        }",
                "codeTag": "Java"
            },
            {
                "id": 3513100,
                "title": "most-optimized-c-easy-to-understand",
                "content": "count vowels all in all substrings\\nmaintain a sliding window for size k\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int x = 0,ans = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            if(i<k-1){\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                    x++;\\n                }\\n            }else{\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                    x++;\\n                }\\n                ans = max(ans,x);\\n                if(s[i-k+1]==\\'a\\'||s[i-k+1]==\\'e\\'||s[i-k+1]==\\'i\\'||s[i-k+1]==\\'o\\'||s[i-k+1]==\\'u\\'){\\n                    x--;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int x = 0,ans = 0;\\n        for(int i = 0; i < s.length(); i++){\\n            if(i<k-1){\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                    x++;\\n                }\\n            }else{\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                    x++;\\n                }\\n                ans = max(ans,x);\\n                if(s[i-k+1]==\\'a\\'||s[i-k+1]==\\'e\\'||s[i-k+1]==\\'i\\'||s[i-k+1]==\\'o\\'||s[i-k+1]==\\'u\\'){\\n                    x--;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490017,
                "title": "simple-java-beats-100-runtime-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to find the maximum number of vowels in any sub-string of length k.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will use a method similiar to how we calculate **the sum of sub-arrays of size k**. We have to use two-pointer approach here.\\n\\n**We subtract previous element and add next element to the current sum.**\\n\\nSimilarly, we substract previous vowel and add next vowel to current substring.\\n\\n    1. Initializie i, j from 0.\\n    2. Increment j while j < k and count vowels in that sub-string.\\n    3. Save this count in any variable, say \\'vowel\\'.\\n    4. In next loop, increment i and j by 1 to maintain a sub-string of length k.\\n    5. If ith character was vowel then decrement \\'vowel\\' and \\n       if jth character is a vowel then increment \\'vowel\\' count.\\n\\n    6. Save the maximum value of vowel in a variable, say max.    \\n    7. Finally, return the max.\\n**Follow the code below to understand the solution.**\\n\\n          **If this solution helped you, give it an up-vote to help others** \\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n\\n//      Initialize i and j from 0.\\n        int i = 0;\\n        int j = 0;\\n\\n//      vowel is vowel count in current substring.\\n//      max is the maximum vowel in any substring.\\n        int vowels = 0;\\n        int max = 0;\\n\\n//      we need ch variable to store ith and jth character.\\n        char ch;\\n\\n//      Iterate while we get a substring of length k.\\n        while(j < k)\\n        {\\n            ch = s.charAt(j);\\n\\n            //if ch is a vowel, then increase vowels count.\\n            \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels++;\\n            j++;\\n        }\\n//      we assume that the first substring has maximum vowels.\\n        max = vowels;\\n\\n//      Now j is equal to k.\\n\\n//      Iterate while j < string length.        \\n        while(j < s.length())\\n        {\\n            //ch stores ith character, (initially i = 0)\\n            ch = s.charAt(i);\\n\\n            //if ch is a vowel then decrement vowel count.\\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels--;\\n\\n            //ch stores the new jth character.\\n            ch = s.charAt(j);\\n            \\n            //if ch is vowel then \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels++;\\n\\n//          store the maximum vowel count in the max.\\n            max = Math.max(max, vowels);\\n            \\n//          Increment i and j variables.\\n            i++;\\n            j++;\\n        }\\n\\n//      Finally, return the max variable.\\n        return max;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n\\n//      Initialize i and j from 0.\\n        int i = 0;\\n        int j = 0;\\n\\n//      vowel is vowel count in current substring.\\n//      max is the maximum vowel in any substring.\\n        int vowels = 0;\\n        int max = 0;\\n\\n//      we need ch variable to store ith and jth character.\\n        char ch;\\n\\n//      Iterate while we get a substring of length k.\\n        while(j < k)\\n        {\\n            ch = s.charAt(j);\\n\\n            //if ch is a vowel, then increase vowels count.\\n            \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels++;\\n            j++;\\n        }\\n//      we assume that the first substring has maximum vowels.\\n        max = vowels;\\n\\n//      Now j is equal to k.\\n\\n//      Iterate while j < string length.        \\n        while(j < s.length())\\n        {\\n            //ch stores ith character, (initially i = 0)\\n            ch = s.charAt(i);\\n\\n            //if ch is a vowel then decrement vowel count.\\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels--;\\n\\n            //ch stores the new jth character.\\n            ch = s.charAt(j);\\n            \\n            //if ch is vowel then \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                vowels++;\\n\\n//          store the maximum vowel count in the max.\\n            max = Math.max(max, vowels);\\n            \\n//          Increment i and j variables.\\n            i++;\\n            j++;\\n        }\\n\\n//      Finally, return the max variable.\\n        return max;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489012,
                "title": "golang",
                "content": "# Intuition\\n\\u0414\\u043E\\u0441\\u0442\\u0430\\u0442\\u043E\\u0447\\u043D\\u043E \\u043F\\u0440\\u043E\\u0441\\u0442\\u0430\\u044F \\u0437\\u0430\\u0434\\u0430\\u0447\\u0430, \\u0430\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0441\\u0432\\u043E\\u0435\\u0433\\u043E \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u044F \\u0438 \\u043E\\u0431\\u044A\\u044F\\u0441\\u043D\\u0435\\u043D\\u0438\\u0435 \\u043E\\u0441\\u0442\\u0430\\u0432\\u043B\\u044E \\u043D\\u0438\\u0436\\u0435!\\n\\n\\u0414\\u0430\\u043D\\u043D\\u0430\\u044F \\u0437\\u0430\\u0434\\u0430\\u0447\\u0430 \\u0441\\u043E\\u0441\\u0442\\u043E\\u0438\\u0442 \\u0432 \\u0442\\u043E\\u043C, \\u0447\\u0442\\u043E\\u0431\\u044B \\u043D\\u0430\\u0439\\u0442\\u0438 \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \\u0434\\u043B\\u0438\\u043D\\u044B k \\u0432 \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0439 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 s.\\n# Approach\\n\\n#### \\u041C\\u0435\\u0442\\u043E\\u0434 \\u0441\\u043A\\u043E\\u043B\\u044C\\u0437\\u044F\\u0449\\u0435\\u0433\\u043E \\u043E\\u043A\\u043D\\u0430\\n\\u041C\\u0435\\u0442\\u043E\\u0434 \\u0441\\u043A\\u043E\\u043B\\u044C\\u0437\\u044F\\u0449\\u0435\\u0433\\u043E \\u043E\\u043A\\u043D\\u0430 **(sliding window)** - \\u044D\\u0442\\u043E \\u043E\\u0434\\u0438\\u043D \\u0438\\u0437 \\u043F\\u043E\\u0434\\u0445\\u043E\\u0434\\u043E\\u0432 \\u0434\\u043B\\u044F \\u043E\\u0431\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0432 \\u043F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0438. \\u041E\\u043D \\u0437\\u0430\\u043A\\u043B\\u044E\\u0447\\u0430\\u0435\\u0442\\u0441\\u044F \\u0432 \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0438 \\u043E\\u043A\\u043D\\u0430 \\u0444\\u0438\\u043A\\u0441\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043D\\u043E\\u0433\\u043E \\u0440\\u0430\\u0437\\u043C\\u0435\\u0440\\u0430 \\u0438 \\u043F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u043C \\u043F\\u0440\\u043E\\u0441\\u043C\\u043E\\u0442\\u0440\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 \\u044D\\u0442\\u043E\\u0433\\u043E \\u043E\\u043A\\u043D\\u0430.\\n\\n\\u0412 \\u043A\\u043E\\u043D\\u0442\\u0435\\u043A\\u0441\\u0442\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u043D\\u0430\\u0445\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0433\\u043E \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430 \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \\u0434\\u043B\\u0438\\u043D\\u044B **k** \\u0432 \\u0437\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0439 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0435, \\u043C\\u0435\\u0442\\u043E\\u0434 \\u0441\\u043A\\u043E\\u043B\\u044C\\u0437\\u044F\\u0449\\u0435\\u0433\\u043E \\u043E\\u043A\\u043D\\u0430 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u043D \\u0441\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0438\\u043C \\u043E\\u0431\\u0440\\u0430\\u0437\\u043E\\u043C:\\n\\n1. \\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043E\\u043A\\u043D\\u043E \\u0440\\u0430\\u0437\\u043C\\u0435\\u0440\\u043E\\u043C **k** \\u0438 \\u043F\\u043E\\u043C\\u0435\\u0441\\u0442\\u0438\\u0442\\u044C \\u0435\\u0433\\u043E \\u0432 \\u043D\\u0430\\u0447\\u0430\\u043B\\u043E \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438.\\n2. \\u041F\\u043E\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 \\u043E\\u043A\\u043D\\u0430.\\n3. \\u0421\\u0434\\u0432\\u0438\\u043D\\u0443\\u0442\\u044C \\u043E\\u043A\\u043D\\u043E \\u043D\\u0430 \\u043E\\u0434\\u043D\\u0443 \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044E \\u0432\\u043F\\u0440\\u0430\\u0432\\u043E \\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 \\u043E\\u043A\\u043D\\u0430.\\n4. \\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0430\\u0442\\u044C \\u0441\\u0434\\u0432\\u0438\\u0433\\u0430\\u0442\\u044C \\u043E\\u043A\\u043D\\u043E \\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u044F\\u0442\\u044C \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0434\\u043E \\u0442\\u0435\\u0445 \\u043F\\u043E\\u0440, \\u043F\\u043E\\u043A\\u0430 \\u043E\\u043A\\u043D\\u043E \\u043D\\u0435 \\u0434\\u043E\\u0439\\u0434\\u0435\\u0442 \\u0434\\u043E \\u043A\\u043E\\u043D\\u0446\\u0430 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438.\\n5. \\u0417\\u0430\\u043F\\u043E\\u043C\\u043D\\u0438\\u0442\\u044C \\u043F\\u043E\\u0437\\u0438\\u0446\\u0438\\u044E \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430 \\u043E\\u043A\\u043D\\u0430, \\u0432 \\u043A\\u043E\\u0442\\u043E\\u0440\\u043E\\u0439 \\u0431\\u044B\\u043B\\u043E \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432.\\n\\n\\u0422\\u0430\\u043A\\u0438\\u043C \\u043E\\u0431\\u0440\\u0430\\u0437\\u043E\\u043C, \\u043C\\u044B \\u043C\\u043E\\u0436\\u0435\\u043C \\u043D\\u0430\\u0445\\u043E\\u0434\\u0438\\u0442\\u044C \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0430\\u0445 \\u0434\\u043B\\u0438\\u043D\\u044B **k**, \\u043F\\u0440\\u043E\\u0445\\u043E\\u0434\\u044F \\u0432\\u0441\\u044E \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443 \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043E\\u0434\\u0438\\u043D \\u0440\\u0430\\u0437, \\u0447\\u0442\\u043E \\u0437\\u043D\\u0430\\u0447\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0443\\u0441\\u043A\\u043E\\u0440\\u044F\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0446\\u0435\\u0441\\u0441.\\n\\n#### \\u0410\\u043B\\u0433\\u043E\\u0440\\u0438\\u0442\\u043C \\u0440\\u0435\\u0448\\u0435\\u043D\\u0438\\u044F \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438 \\u0441\\u043E\\u0441\\u0442\\u043E\\u0438\\u0442 \\u0438\\u0437 \\u043D\\u0435\\u0441\\u043A\\u043E\\u043B\\u044C\\u043A\\u0438\\u0445 \\u0448\\u0430\\u0433\\u043E\\u0432:\\n1. \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043C\\u0430\\u043F\\u044B **vowels**, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0430\\u044F \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0438\\u0442 \\u0432\\u0441\\u0435 \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0435 \\u0431\\u0443\\u043A\\u0432\\u044B \\u0430\\u043D\\u0433\\u043B\\u0438\\u0439\\u0441\\u043A\\u043E\\u0433\\u043E \\u0430\\u043B\\u0444\\u0430\\u0432\\u0438\\u0442\\u0430;\\n2. \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 **n**, \\u043A\\u043E\\u0442\\u043E\\u0440\\u0430\\u044F \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0438\\u0442 \\u0434\\u043B\\u0438\\u043D\\u0443 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438 **s**;\\n3. \\u0421\\u043E\\u0437\\u0434\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u044B\\u0445 **maxCount** \\u0438 **currCount**, \\u043A\\u043E\\u0442\\u043E\\u0440\\u044B\\u0435 \\u0431\\u0443\\u0434\\u0443\\u0442 \\u0438\\u0441\\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F \\u0434\\u043B\\u044F \\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u044F \\u043D\\u0430\\u0438\\u0431\\u043E\\u043B\\u044C\\u0448\\u0435\\u0433\\u043E \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430 \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0438 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u0430 \\u0442\\u0435\\u043A\\u0443\\u0449\\u0438\\u0445 \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0441\\u043E\\u043E\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0435\\u043D\\u043D\\u043E;\\n4. \\u0418\\u0442\\u0435\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u043E \\u043F\\u0435\\u0440\\u0432\\u044B\\u043C **k** \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u0430\\u043C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438 **s** \\u0438 \\u0443\\u0432\\u0435\\u043B\\u0438\\u0447\\u0435\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 **currCount**, \\u0435\\u0441\\u043B\\u0438 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B \\u044F\\u0432\\u043B\\u044F\\u0435\\u0442\\u0441\\u044F \\u0433\\u043B\\u0430\\u0441\\u043D\\u043E\\u0439 \\u0431\\u0443\\u043A\\u0432\\u043E\\u0439;\\n5. \\u041F\\u0440\\u0438\\u0441\\u0432\\u043E\\u0435\\u043D\\u0438\\u0435 \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 **maxCount** \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u044F **currCount**;\\n6. \\u0418\\u0442\\u0435\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u043E \\u043E\\u0441\\u0442\\u0430\\u0432\\u0448\\u0435\\u0439\\u0441\\u044F \\u0447\\u0430\\u0441\\u0442\\u0438 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0438 **s** **(\\u043E\\u0442 k \\u0434\\u043E \\u043A\\u043E\\u043D\\u0446\\u0430)** \\u0441 \\u043F\\u043E\\u043C\\u043E\\u0449\\u044C\\u044E \\u0434\\u0432\\u0443\\u0445 \\u0443\\u043A\\u0430\\u0437\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 **(i \\u0438 i+k-1)**;\\n7. \\u0415\\u0441\\u043B\\u0438 \\u043F\\u0435\\u0440\\u0432\\u044B\\u0439 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B \\u0438\\u0437 \\u0440\\u0430\\u0441\\u0441\\u043C\\u0430\\u0442\\u0440\\u0438\\u0432\\u0430\\u0435\\u043C\\u043E\\u0433\\u043E \\u0434\\u0438\\u0430\\u043F\\u0430\\u0437\\u043E\\u043D\\u0430 \\u044F\\u0432\\u043B\\u044F\\u0435\\u0442\\u0441\\u044F \\u0433\\u043B\\u0430\\u0441\\u043D\\u043E\\u0439 \\u0431\\u0443\\u043A\\u0432\\u043E\\u0439, \\u0442\\u043E \\u0443\\u043C\\u0435\\u043D\\u044C\\u0448\\u0430\\u0435\\u043C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **currCount** \\u043D\\u0430 **1**;\\n8. \\u0415\\u0441\\u043B\\u0438 \\u043F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0438\\u0439 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B \\u0438\\u0437 \\u0440\\u0430\\u0441\\u0441\\u043C\\u0430\\u0442\\u0440\\u0438\\u0432\\u0430\\u0435\\u043C\\u043E\\u0433\\u043E \\u0434\\u0438\\u0430\\u043F\\u0430\\u0437\\u043E\\u043D\\u0430 \\u044F\\u0432\\u043B\\u044F\\u0435\\u0442\\u0441\\u044F \\u0433\\u043B\\u0430\\u0441\\u043D\\u043E\\u0439 \\u0431\\u0443\\u043A\\u0432\\u043E\\u0439, \\u0442\\u043E \\u0443\\u0432\\u0435\\u043B\\u0438\\u0447\\u0438\\u0432\\u0430\\u0435\\u043C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **currCount** \\u043D\\u0430 **1**;\\n9. \\u0415\\u0441\\u043B\\u0438 \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **currCount** \\u043E\\u043A\\u0430\\u0437\\u0430\\u043B\\u043E\\u0441\\u044C \\u0431\\u043E\\u043B\\u044C\\u0448\\u0438\\u043C, \\u0447\\u0435\\u043C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **maxCount**, \\u0442\\u043E \\u043F\\u0440\\u0438\\u0441\\u0432\\u0430\\u0438\\u0432\\u0430\\u0435\\u043C \\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u043D\\u043E\\u0439 **maxCount** \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **currCount**;\\n10. \\u0412\\u043E\\u0437\\u0432\\u0440\\u0430\\u0449\\u0430\\u0435\\u043C \\u0437\\u043D\\u0430\\u0447\\u0435\\u043D\\u0438\\u0435 **maxCount**.\\n\\n#### \\u0414\\u0430\\u0432\\u0430\\u0439 \\u0440\\u0430\\u0441\\u0441\\u043C\\u043E\\u0442\\u0440\\u0438\\u043C \\u043F\\u0440\\u0438\\u043C\\u0435\\u0440 \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B \\u0444\\u0443\\u043D\\u043A\\u0446\\u0438\\u0438 maxVowels \\u043D\\u0430 \\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"leetcode\" \\u0438 \\u0434\\u043B\\u0438\\u043D\\u0435 k = 3:\\n**\\u0418\\u0442\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F 1:**\\n**s = \"leetcode\", k = 3**\\ncurrCount = 2 (\\u044D\\u0442\\u043E \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"lee\")\\nmaxCount = 2 (\\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442)\\n\\n**\\u0418\\u0442\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F 2:**\\n**s = \"leetcode\", k = 3**\\ncurrCount = 2 (\\u044D\\u0442\\u043E \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"eet\")\\nmaxCount = 2 (\\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442)\\n\\n**\\u0418\\u0442\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F 3:**\\n**s = \"leetcode\", k = 3**\\ncurrCount = 1 (\\u044D\\u0442\\u043E \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"etc\")\\nmaxCount = 2 (\\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442)\\n\\n**\\u0418\\u0442\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F 4:**\\n**s = \"leetcode\", k = 3**\\ncurrCount = 1 (\\u044D\\u0442\\u043E \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"tco\")\\nmaxCount = 2 (\\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442)\\n\\n**\\u0418\\u0442\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F 5:**\\n**s = \"leetcode\", k = 3**\\ncurrCount = 1 (\\u044D\\u0442\\u043E \\u0442\\u0435\\u043A\\u0443\\u0449\\u0435\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0431\\u0443\\u043A\\u0432 \\u0432 \\u043F\\u043E\\u0434\\u0441\\u0442\\u0440\\u043E\\u043A\\u0435 \"cod\")\\nmaxCount = 2 (\\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u043D\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442)\\n\\n\\u041C\\u044B \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u043B\\u0438 \\u043C\\u0430\\u043A\\u0441\\u0438\\u043C\\u0430\\u043B\\u044C\\u043D\\u043E\\u0435 \\u043A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u0433\\u043B\\u0430\\u0441\\u043D\\u044B\\u0445 \\u0440\\u0430\\u0432\\u043D\\u043E\\u0435 2.\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nfunc maxVowels(s string, k int) int {\\n\\n\\tn, maxCount := len(s), 0\\n\\tvowels := map[byte]bool{\\n\\t\\t\\'a\\': true,\\n\\t\\t\\'e\\': true,\\n\\t\\t\\'i\\': true,\\n\\t\\t\\'o\\': true,\\n\\t\\t\\'u\\': true,\\n\\t}\\n\\n\\tcurrCount := 0\\n\\tfor i := 0; i < k; i++ {\\n\\t\\tif vowels[s[i]] {\\n\\t\\t\\tcurrCount++\\n\\t\\t}\\n\\t}\\n\\n\\tmaxCount = currCount\\n\\n\\tfor i := 1; i <= n-k; i++ {\\n\\t\\tif vowels[s[i-1]] {\\n\\t\\t\\tcurrCount--\\n\\t\\t}\\n\\t\\tif vowels[s[i+k-1]] {\\n\\t\\t\\tcurrCount++\\n\\t\\t}\\n\\t\\tif currCount > maxCount {\\n\\t\\t\\tmaxCount = currCount\\n\\t\\t}\\n\\t}\\n\\n\\treturn maxCount\\n}\\n\\n```",
                "solutionTags": [
                    "Go",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nfunc maxVowels(s string, k int) int {\\n\\n\\tn, maxCount := len(s), 0\\n\\tvowels := map[byte]bool{\\n\\t\\t\\'a\\': true,\\n\\t\\t\\'e\\': true,\\n\\t\\t\\'i\\': true,\\n\\t\\t\\'o\\': true,\\n\\t\\t\\'u\\': true,\\n\\t}\\n\\n\\tcurrCount := 0\\n\\tfor i := 0; i < k; i++ {\\n\\t\\tif vowels[s[i]] {\\n\\t\\t\\tcurrCount++\\n\\t\\t}\\n\\t}\\n\\n\\tmaxCount = currCount\\n\\n\\tfor i := 1; i <= n-k; i++ {\\n\\t\\tif vowels[s[i-1]] {\\n\\t\\t\\tcurrCount--\\n\\t\\t}\\n\\t\\tif vowels[s[i+k-1]] {\\n\\t\\t\\tcurrCount++\\n\\t\\t}\\n\\t\\tif currCount > maxCount {\\n\\t\\t\\tmaxCount = currCount\\n\\t\\t}\\n\\t}\\n\\n\\treturn maxCount\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488620,
                "title": "java-full-explaination-comments-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**Its a Window Sliding Questions\\nHere\\'s the intuition behind the code:**\\n1. Initialize \\'vowelCount\\' and \\'maxCount\\' variables to keep track of the current vowel count and the maximum vowel count encountered so far, respectively.\\n2. The first \\'for\\' loop iterates from 0 to \\'k\\' (exclusive) to count the number of vowels in the first substring of length \\'k\\'. It calls the \\'isVowel\\' function to check if each character is a vowel and increments \\'vowelCount\\' accordingly.\\n3. Update \\'maxCount\\' by taking the maximum between \\'maxCount\\' and \\'vowelCount\\'. This is done to keep track of the maximum vowel count encountered so far.\\n4. The second \\'for\\' loop starts from \\'k\\' and iterates through the remaining characters in the string \\'s\\'. It checks if the previous character (i-k) was a vowel and decrements \\'vowelCount\\' accordingly. Then it checks if the current character (i) is a vowel and increments \\'vowelCount\\' if it is.\\n5. Again, update \\'maxCount\\' by taking the maximum between \\'maxCount\\' and \\'vowelCount\\'. This is done to update the maximum vowel count if the current substring has a higher count than the previous substrings.\\n6. Finally, return \\'maxCount\\' as the result, which represents the maximum vowel count found in any substring of length \\'k\\' within the given string \\'s\\'.\\n\\nNote :- The code efficiently maintains the vowel count by subtracting the count of the oldest character in the sliding window (i-k) and adding the count of the newest character (i). By keeping track of the maximum vowel count encountered, it avoids unnecessary computations when the maximum count is already equal to \\'k\\'.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowelCount = 0;\\n        int maxCount = 0;\\n        //to count the number of vowels in the first substring of length \\'k\\'\\n        for(int i = 0 ;i < k ; i ++){\\n            if(isVowel(s.charAt(i))){\\n                vowelCount ++;\\n            }\\n        }\\n        maxCount = Math.max(maxCount,vowelCount);\\n        for(int i = k; i < s.length(); i ++){\\n            //to avoids unnecessary computations when the maximum count is already equal to \\'k\\'.\\n            if(maxCount == k){\\n                return maxCount;\\n            }\\n            //to remove the first element from substring so that we can move our sliding boundary one step forward\\n            if(isVowel(s.charAt(i-k))){\\n                vowelCount--;\\n            }\\n            //adding new element into the sliding boundary\\n            if(isVowel(s.charAt(i))){\\n                vowelCount++;\\n            }\\n            //to keep track of maxCount\\n            maxCount = Math.max(maxCount,vowelCount);\\n        }\\n        return maxCount;\\n    }\\n    //it return true if the character is vowel\\n    public boolean isVowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```\\n**Please UpVote If you like it Happy Coding :)\\nIf you really found my solution helpful please upvote it, as it motivates me to post such kind of codes and help the coding community, if you have some queries or some improvements please feel free to comment and share your views.**",
                "solutionTags": [
                    "Java",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowelCount = 0;\\n        int maxCount = 0;\\n        //to count the number of vowels in the first substring of length \\'k\\'\\n        for(int i = 0 ;i < k ; i ++){\\n            if(isVowel(s.charAt(i))){\\n                vowelCount ++;\\n            }\\n        }\\n        maxCount = Math.max(maxCount,vowelCount);\\n        for(int i = k; i < s.length(); i ++){\\n            //to avoids unnecessary computations when the maximum count is already equal to \\'k\\'.\\n            if(maxCount == k){\\n                return maxCount;\\n            }\\n            //to remove the first element from substring so that we can move our sliding boundary one step forward\\n            if(isVowel(s.charAt(i-k))){\\n                vowelCount--;\\n            }\\n            //adding new element into the sliding boundary\\n            if(isVowel(s.charAt(i))){\\n                vowelCount++;\\n            }\\n            //to keep track of maxCount\\n            maxCount = Math.max(maxCount,vowelCount);\\n        }\\n        return maxCount;\\n    }\\n    //it return true if the character is vowel\\n    public boolean isVowel(char ch){\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488531,
                "title": "solution-using-sliding-window-approach-c-solution-time-and-space-complexity-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe approach is intuitive as we are simply counting the number of vowels in each substring of length k and keeping track of the maximum count seen so far. By using the sliding window technique, we can optimize the solution by reusing the count of the first character in the previous substring and only updating the count of the new character that entered the window.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach to this problem is to iterate over all the substrings of length k in the given string s. For each substring, we count the number of vowels and keep track of the maximum number of vowels seen so far. Finally, we return the maximum count of vowels seen in any substring.\\n\\nWe can optimize this approach by using sliding window technique. We can count the number of vowels in the first substring of length k and keep track of the maximum count seen so far. Then, we move the window by 1 character at a time, and for each new substring, we subtract the vowel count of the first character that is no longer part of the window, and add the vowel count of the new character that just entered the window. We update the maximum count seen so far at each step.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N):\\nThe time complexity of this approach is O(n), where n is the length of the string s. This is because we are iterating over all substrings of length k, and there can be at most n-k+1 such substrings. Within each iteration, we are checking if each character is a vowel, which takes constant time.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1):\\nThe space complexity of this approach is O(1), as we are only using constant amount of extra space to store the counts of vowels and the maximum count seen so far. We are not using any extra data structures that depend on the length of the string s or the length of the substring k.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n    int n = s.size();\\n    int maxCount = 0, count = 0;\\n    for (int i = 0; i < k; i++) {\\n        if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n            count++;\\n        }\\n    }\\n    maxCount = count;\\n    for (int i = k; i < n; i++) {\\n        if (s[i-k] == \\'a\\' || s[i-k] == \\'e\\' || s[i-k] == \\'i\\' || s[i-k] == \\'o\\' || s[i-k] == \\'u\\') {\\n            count--;\\n        }\\n        if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n            count++;\\n        }\\n        maxCount = max(maxCount, count);\\n    }\\n    return maxCount;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n    int n = s.size();\\n    int maxCount = 0, count = 0;\\n    for (int i = 0; i < k; i++) {\\n        if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n            count++;\\n        }\\n    }\\n    maxCount = count;\\n    for (int i = k; i < n; i++) {\\n        if (s[i-k] == \\'a\\' || s[i-k] == \\'e\\' || s[i-k] == \\'i\\' || s[i-k] == \\'o\\' || s[i-k] == \\'u\\') {\\n            count--;\\n        }\\n        if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n            count++;\\n        }\\n        maxCount = max(maxCount, count);\\n    }\\n    return maxCount;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487971,
                "title": "easiest-java-solution-in-o-n-sliding-window",
                "content": "# Intuition\\nJust keep count of all vovels in window k\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFirstly count the number of vavels on first k length of string.\\nThen iterate from kth index to last character and check i-kth character and ith character.\\nIf ith character is vovel increase the count by one.\\nIf i-kth character is vovel then decrease the count by one.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int n = s.length();\\n        int ans = 0;\\n        int count = 0;\\n        for(int i=0;i<n && i<k;i++){\\n            if(s.charAt(i)==\\'a\\' || s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                count++;\\n            }\\n        }\\n        ans = count;\\n        for(int i=k;i<n;i++){\\n            if(s.charAt(i)==\\'a\\' || s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                count++;\\n            }\\n            if(s.charAt(i-k)==\\'a\\' || s.charAt(i-k)==\\'e\\' || s.charAt(i-k)==\\'i\\' || s.charAt(i-k)==\\'o\\' || s.charAt(i-k)==\\'u\\'){\\n                count--;\\n            }\\n            if(count> ans) ans = count;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int n = s.length();\\n        int ans = 0;\\n        int count = 0;\\n        for(int i=0;i<n && i<k;i++){\\n            if(s.charAt(i)==\\'a\\' || s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                count++;\\n            }\\n        }\\n        ans = count;\\n        for(int i=k;i<n;i++){\\n            if(s.charAt(i)==\\'a\\' || s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                count++;\\n            }\\n            if(s.charAt(i-k)==\\'a\\' || s.charAt(i-k)==\\'e\\' || s.charAt(i-k)==\\'i\\' || s.charAt(i-k)==\\'o\\' || s.charAt(i-k)==\\'u\\'){\\n                count--;\\n            }\\n            if(count> ans) ans = count;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487789,
                "title": "easy-js-solution-beats-97-online-submissions",
                "content": "# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let c=0;;\\n    let maxCount=0;\\n    let i = 0, j = 0;\\n    while(i < k){\\n        if(checkString(s[i++])){\\n            c++\\n        }\\n    }\\n    maxCount=Math.max(maxCount,c)\\n    while(i < s.length){\\n        if(checkString(s[j++])){\\n            c--\\n        }\\n        if(checkString(s[i++])){\\n            c++\\n        }\\n       maxCount=Math.max(maxCount,c)\\n    }\\n    return maxCount\\n};\\nconst checkString = (ch)=>{\\n    if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n        return true\\n    }\\n    return false\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let c=0;;\\n    let maxCount=0;\\n    let i = 0, j = 0;\\n    while(i < k){\\n        if(checkString(s[i++])){\\n            c++\\n        }\\n    }\\n    maxCount=Math.max(maxCount,c)\\n    while(i < s.length){\\n        if(checkString(s[j++])){\\n            c--\\n        }\\n        if(checkString(s[i++])){\\n            c++\\n        }\\n       maxCount=Math.max(maxCount,c)\\n    }\\n    return maxCount\\n};\\nconst checkString = (ch)=>{\\n    if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n        return true\\n    }\\n    return false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487586,
                "title": "cpp-easy-approach-sliding-window-and-prefix-sum",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n\\n    bool isvowel(char ch) { return (ch == \\'a\\') || (ch == \\'e\\') ||(ch == \\'i\\') ||(ch == \\'o\\') ||(ch == \\'u\\'); }\\n    int maxVowels(string s, int k) {\\n        vector<int>pre(s.length()+1,0);\\n        pre[0]=isvowel(s[0]);\\n        for(int i=1;i<s.length();i++)\\n        {\\n            pre[i]+=pre[i-1]+isvowel(s[i]);\\n        }\\n\\n        int i=0,j=k-1;\\n        int ans=0;\\n        while(j<s.length())\\n        {\\n            ans=max(ans,pre[j]-pre[i]+isvowel(s[i]));\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    bool isvowel(char ch) { return (ch == \\'a\\') || (ch == \\'e\\') ||(ch == \\'i\\') ||(ch == \\'o\\') ||(ch == \\'u\\'); }\\n    int maxVowels(string s, int k) {\\n        vector<int>pre(s.length()+1,0);\\n        pre[0]=isvowel(s[0]);\\n        for(int i=1;i<s.length();i++)\\n        {\\n            pre[i]+=pre[i-1]+isvowel(s[i]);\\n        }\\n\\n        int i=0,j=k-1;\\n        int ans=0;\\n        while(j<s.length())\\n        {\\n            ans=max(ans,pre[j]-pre[i]+isvowel(s[i]));\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486905,
                "title": "simple-solution-with-using-only-1loop-includes-method",
                "content": "**Made by** Seeker Of Miracle\\n\\n# Approach\\n1. Initialize a vowel array with all the vowels (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\').\\n2. Initialize variables maxCount and count to 0.\\n3. Iterate through each character in the input string s.\\n4. If the current character is a vowel, increment count by 1.\\n5. If the current character is not a vowel or we have reached the end of the string, check if count is greater than maxCount.\\n6. If count is greater than maxCount, update maxCount to count.\\n7. Reset count to 0.\\n8. Return maxCount.\\n# Complexity\\n- Time complexity:o(n)\\n\\n- Space complexity:o(1)\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let maxCount=0,count=0;\\n    const vowel=[\\'a\\',\"e\", \"i\", \"o\", \"u\"]\\n    for(let i=0;i<s.length;i++)\\n    {\\n        if(vowel.includes(s[i]))   count++\\n\\n        if(i>=k && vowel.includes(s[i-k])) count--\\n\\n        if(count==k)\\n        return k;\\n\\n        if(maxCount<count)\\n        maxCount=count\\n    }\\n    return maxCount\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let maxCount=0,count=0;\\n    const vowel=[\\'a\\',\"e\", \"i\", \"o\", \"u\"]\\n    for(let i=0;i<s.length;i++)\\n    {\\n        if(vowel.includes(s[i]))   count++\\n\\n        if(i>=k && vowel.includes(s[i-k])) count--\\n\\n        if(count==k)\\n        return k;\\n\\n        if(maxCount<count)\\n        maxCount=count\\n    }\\n    return maxCount\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486697,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        best=0\\n        count=0\\n        for i,x in enumerate(s):\\n            if x in \"aeiou\":\\n                count+=1\\n\\n            if i>=k and s[i-k] in \"aeiou\":\\n                count-=1\\n\\n            best=max(best,count)\\n\\n        return best            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        best=0\\n        count=0\\n        for i,x in enumerate(s):\\n            if x in \"aeiou\":\\n                count+=1\\n\\n            if i>=k and s[i-k] in \"aeiou\":\\n                count-=1\\n\\n            best=max(best,count)\\n\\n        return best            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486667,
                "title": "functional-rust-iterators-fold-100-faster-one-pass-no-extra-memory-used",
                "content": "# Intuition\\nRust iterators + fold()\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfn is_vowel(ch: u8) -> bool {\\n    match ch {\\n        105 | 111 | 97 | 117 | 101 => true,\\n        _ => false,\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn max_vowels(s: String, k: i32) -> i32 {\\n        let s = s.as_bytes();\\n        let k = k as usize;\\n        let count: usize = s.iter().take(k).filter(|&x| is_vowel(*x)).count();\\n        s.iter()\\n         .skip(k)\\n         .zip(s.iter())\\n         .fold(\\n             (count, count),\\n             |a, x| {\\n                 let (max, count) = a;\\n                 let (cur, left) = x;\\n                 match (is_vowel(*left), is_vowel(*cur)) {\\n                     (false, true) => (max.max(count + 1), count + 1),\\n                     (true, false) => (max, count - 1),\\n                     _ => (max, count),\\n                 }\\n             }\\n         ).0 as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nfn is_vowel(ch: u8) -> bool {\\n    match ch {\\n        105 | 111 | 97 | 117 | 101 => true,\\n        _ => false,\\n    }\\n}\\n\\nimpl Solution {\\n    pub fn max_vowels(s: String, k: i32) -> i32 {\\n        let s = s.as_bytes();\\n        let k = k as usize;\\n        let count: usize = s.iter().take(k).filter(|&x| is_vowel(*x)).count();\\n        s.iter()\\n         .skip(k)\\n         .zip(s.iter())\\n         .fold(\\n             (count, count),\\n             |a, x| {\\n                 let (max, count) = a;\\n                 let (cur, left) = x;\\n                 match (is_vowel(*left), is_vowel(*cur)) {\\n                     (false, true) => (max.max(count + 1), count + 1),\\n                     (true, false) => (max, count - 1),\\n                     _ => (max, count),\\n                 }\\n             }\\n         ).0 as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486565,
                "title": "c-easy-sliding-window",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool c(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        int mx=0;\\n        for(int i=0;i<k;i++){\\n            if(c(s[i]))mx++;\\n        }\\n        ans=mx;\\n        int j=k,i=0;\\n        while(j<s.size()){\\n            if(c(s[j]))mx++;\\n            if(c(s[i]))mx--;\\n            ans=max(ans,mx);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote (3).jpg](https://assets.leetcode.com/users/images/6b5c4f4c-e79e-4532-80ff-900d5094f407_1683245981.899174.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool c(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        int mx=0;\\n        for(int i=0;i<k;i++){\\n            if(c(s[i]))mx++;\\n        }\\n        ans=mx;\\n        int j=k,i=0;\\n        while(j<s.size()){\\n            if(c(s[j]))mx++;\\n            if(c(s[i]))mx--;\\n            ans=max(ans,mx);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486530,
                "title": "daily-leetcoding-challenge-may-day-5",
                "content": "This problem is the Daily LeetCoding Challenge for May, Day 5.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Sliding Window\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 3067867,
                "title": "easy-js-solution-with-explaination",
                "content": "# Intuition\\nusing Concept of fixed sliding window.\\n\\n# Approach\\n1. Make a function which will check if a character is vowel or not. \\n2. Declare required variables. max for storing maximum, count for the currnt count.\\n3. First for loop will run till k to count all the vowels in our window.\\n4. Second Loop will start from k and we will just move window one char ahead checking if its a vowel if yes count increases. we will also check the leaving element is it vowel or not if it is vowel we will decrease the count to keep the count consistent. \\n5. We will check if count is greater than max. \\n6. return max.\\n\\nHope you like the answer, Upvote if you like it motivates me to write more answers.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction check(s){\\n    if(s==\"a\" ||s==\"e\"||s==\"i\"||s==\"o\"||s==\"u\"){\\n        return true\\n    }\\n    return false\\n}\\nvar maxVowels = function(s, k) {\\n    let max =0, count=0; \\n    for(let i=0;i<k;i++){\\n        if(check(s[i])){\\n            count++\\n        }\\n\\n    }\\n    max = count\\n    for(let i=k; i<s.length; i++){\\n        if(check(s[i])){\\n            count++\\n        }\\n        if(check(s[i-k])){\\n            count--\\n        }\\n        max = Math.max(max, count)\\n    }\\n    return max\\n\\n    \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Two Pointers",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nfunction check(s){\\n    if(s==\"a\" ||s==\"e\"||s==\"i\"||s==\"o\"||s==\"u\"){\\n        return true\\n    }\\n    return false\\n}\\nvar maxVowels = function(s, k) {\\n    let max =0, count=0; \\n    for(let i=0;i<k;i++){\\n        if(check(s[i])){\\n            count++\\n        }\\n\\n    }\\n    max = count\\n    for(let i=k; i<s.length; i++){\\n        if(check(s[i])){\\n            count++\\n        }\\n        if(check(s[i-k])){\\n            count--\\n        }\\n        max = Math.max(max, count)\\n    }\\n    return max\\n\\n    \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1795853,
                "title": "c-sliding-window-easy",
                "content": "class Solution {\\npublic:\\n    \\n\\tint maxVowels(string s, int k) {\\n        int n = s.size();\\n        int i = 0,j = 0,x = 0,c = 0;\\n        while(j<n){\\n            if(s[j]==\\'a\\' || s[j]==\\'e\\' || s[j]==\\'i\\' || s[j]==\\'o\\' || s[j]==\\'u\\'){\\n                x++;\\n            }\\n            if(j-i+1<k) j++;\\n            else if(j-i+1==k){\\n                c = max(c,x);\\n                if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                    x--;\\n                }\\n                i++;\\n                j++;\\n            }\\n        }\\n        return c;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n    \\n\\tint maxVowels(string s, int k) {\\n        int n = s.size();\\n        int i = 0,j = 0,x = 0,c = 0;\\n        while(j<n){\\n            if(s[j]==\\'a\\' || s[j]==\\'e\\' || s[j]==\\'i\\' || s[j]==\\'o\\' || s[j]==\\'u\\'){\\n                x++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 659593,
                "title": "java-simple-sliding-window",
                "content": "```\\n    public int maxVowels(String s, int k) {\\n        Set<Character> st = Set.of(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\');\\n        int res = 0;\\n        for (int l = 0, r = 0, cnt = 0; r < s.length(); r++) {\\n            if (st.contains(s.charAt(r))) cnt++;\\n            if (r >= k && st.contains(s.charAt(l++))) cnt--;\\n            res = Math.max(res, cnt);\\n            if (res == k) return res;\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxVowels(String s, int k) {\\n        Set<Character> st = Set.of(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\');\\n        int res = 0;\\n        for (int l = 0, r = 0, cnt = 0; r < s.length(); r++) {\\n            if (st.contains(s.charAt(r))) cnt++;\\n            if (r >= k && st.contains(s.charAt(l++))) cnt--;\\n            res = Math.max(res, cnt);\\n            if (res == k) return res;\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 657618,
                "title": "java-sliding-window-o-n-time-complexity",
                "content": "```\\nclass Solution {\\n\\t\\n\\tprivate boolean isVowel(char vowel) {\\n\\t\\treturn vowel == \\'a\\' || vowel == \\'e\\' || vowel == \\'i\\' || vowel == \\'o\\' || vowel== \\'u\\';\\n\\t}\\n \\n\\tpublic int maxVowels(String s, int k) {\\n \\n\\t\\tint maxLen = 0;\\n\\t\\tfor(int i = 0, count = 0; i < s.length(); ++i) {\\n\\t\\t\\tif(isVowel(s.charAt(i))) ++count;\\n            maxLen = Math.max(maxLen, count);\\n\\t\\t\\tif(i >= k - 1 && isVowel(s.charAt(i - k + 1))) -- count;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn maxLen;\\n\\t}\\n}\\n```\\n\\nPlease help to **UPVOTE** if this post is useful for you.\\nIf you have any questions, feel free to comment below.\\n**HAPPY CODING :)\\nLOVE CODING :)**\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\t\\n\\tprivate boolean isVowel(char vowel) {\\n\\t\\treturn vowel == \\'a\\' || vowel == \\'e\\' || vowel == \\'i\\' || vowel == \\'o\\' || vowel== \\'u\\';\\n\\t}\\n \\n\\tpublic int maxVowels(String s, int k) {\\n \\n\\t\\tint maxLen = 0;\\n\\t\\tfor(int i = 0, count = 0; i < s.length(); ++i) {\\n\\t\\t\\tif(isVowel(s.charAt(i))) ++count;\\n            maxLen = Math.max(maxLen, count);\\n\\t\\t\\tif(i >= k - 1 && isVowel(s.charAt(i - k + 1))) -- count;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn maxLen;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648777,
                "title": "java-sliding-window",
                "content": "```\\npublic int maxVowels(String s, int k) {\\n\\tSet<Character> set = new HashSet<>();\\n\\tset.add(\\'a\\');set.add(\\'e\\');set.add(\\'i\\');set.add(\\'o\\');set.add(\\'u\\');\\n\\tint[] count = new int[26]; //character count\\n\\tint max = 0, currentVowels = 0;\\n\\tfor (int right = 0; right < s.length(); right++) {\\n\\t\\tif(set.contains(s.charAt(right)))  currentVowels++; //Add (right) th char\\n\\t\\tif(right >= k && set.contains(s.charAt(right - k))) currentVowels--; // Remove (left-1) th char\\n\\t\\tmax = Math.max(currentVowels, max);\\n\\t}\\n\\treturn max;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int maxVowels(String s, int k) {\\n\\tSet<Character> set = new HashSet<>();\\n\\tset.add(\\'a\\');set.add(\\'e\\');set.add(\\'i\\');set.add(\\'o\\');set.add(\\'u\\');\\n\\tint[] count = new int[26]; //character count\\n\\tint max = 0, currentVowels = 0;\\n\\tfor (int right = 0; right < s.length(); right++) {\\n\\t\\tif(set.contains(s.charAt(right)))  currentVowels++; //Add (right) th char\\n\\t\\tif(right >= k && set.contains(s.charAt(right - k))) currentVowels--; // Remove (left-1) th char\\n\\t\\tmax = Math.max(currentVowels, max);\\n\\t}\\n\\treturn max;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003024,
                "title": "python3-sliding-window-fixed-size-o-n-time-o-1-space",
                "content": "# Intuition\\nThe question asks us to do something in a subarray of size `k`. This is quite standard with **Sliding Window** - *fixed size* problems, where `k` is the fixed size of the window.\\n\\n### What is a Sliding Window of fixed size ?\\n> The fixed-size sliding window technique is a computer science algorithm that uses a predefined window size that remains constant throughout the problem-solving process. The window size is usually stated in the problem, for example, \"find the highest sum of three contiguous numbers in the following array\". The window size will be three, and the action will be summing and comparing. \\n> \\n> The fixed-size sliding window technique is often used to deal with problems involving subarrays of a fixed size. These problems may include finding the maximum or minimum sum of consecutive `k` elements in an array. \\n\\n# Approach\\nThe idea behind having a fixed sliding window is to maintain two pointers that are k apart from each other and fit a certain constraint.\\n\\n1. Keep two pointers `l`, `r` which we will use to expand/close window of size k. We also want to have the vowels as a `hashset` that will ive us constant time lookup.\\n2. Use a for loop to expand the right side of the window.\\n3. At each position, check if the size of the current window is > k. If yes, we will close the left side of the window by incrementing l by 1. Keep in mind we will also need to decrement vowel count if the place where `l` is currently is a vowel\\n4. The window will keep expanding towards right as we are using a regualr for loop to maintain and move `r`. At each step, we will see if char at index r `s[r]` is a vowel. If true, we will increment `vowelCount` by one. We will also check and update `maxCount` to check if we found a window with max vowel count.\\n\\n# Complexity\\n- Time complexity:\\nO(N) - We traverse the array only once\\n\\n- Space complexity:\\nO(1) - Extra space to keep vowels and the 3 variables is constant\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n        l, vowelCount, maxCount = 0, 0, 0\\n\\n        for r in range(len(s)):\\n\\n            # close window\\n            if r - l + 1 > k:\\n                if s[l] in vowels:\\n                    vowelCount -= 1\\n                l += 1\\n\\n            # open window\\n            if s[r] in vowels:\\n                    vowelCount += 1\\n                    maxCount = max(maxCount, vowelCount)\\n        return maxCount\\n        \\n```\\n\\n\\n#### Note:\\nPlease leave a comment if you think something is incorrect. \\n\\n\\uD83D\\uDC4D **Upvote if you like the approach.** \\n",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])\\n        l, vowelCount, maxCount = 0, 0, 0\\n\\n        for r in range(len(s)):\\n\\n            # close window\\n            if r - l + 1 > k:\\n                if s[l] in vowels:\\n                    vowelCount -= 1\\n                l += 1\\n\\n            # open window\\n            if s[r] in vowels:\\n                    vowelCount += 1\\n                    maxCount = max(maxCount, vowelCount)\\n        return maxCount\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880517,
                "title": "straightforward-and-fast-99-sliding-window-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe want the maximum count of any k-length substring of s. A sliding window seems appropriate.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nReplace each of the characters in s with an int value: 1 for vowels, 0 otherwise (s will now be a list of ints). After that, the sum of all the elements of a k-length slice will be the count of vowels in that slice.\\n\\nWe\\'ll return the maximum sum of any k-length slice (window) on s. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO($$n$$) for an n-character string as we traverse s once to make the list of 1 and 0 values, and again to find the maximum sum of k consecutive elements.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO($$n$$). The list of 1\\'s and 0\\'s has length n for n input characters. Even though we replace the original s with the list of ints, that list is newly created (by a list comprehension) and doesn\\'t allow the input string to be garbage collected as it still exists in the caller\\'s scope.\\n\\n# Code\\n```\\n# Constant Dictionary of characters: vowels are 1, others are 0 (default)\\nVOWELS = defaultdict(int)\\nVOWELS[\\'a\\'] = VOWELS[\\'e\\'] = VOWELS[\\'i\\'] = VOWELS[\\'o\\'] = VOWELS[\\'u\\'] = 1\\n\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\'\\'\\'\\n        Replace characters in s with an int value: 1 for vowels, 0 otherwise.\\n        We\\'ll return the maximum sum of any k-length window on s. \\n        \\'\\'\\'\\n        s = [VOWELS[c] for c in s]\\n        max_count = count = sum(s[:k])      # Both counts hold the initial sum\\n        for i in range(len(s) - k):         # Advance the window\\n            count += s[i + k] - s[i]        # Adjust the count\\n            if count > max_count:           # Keep the higher count\\n                max_count = count\\n        return max_count\\n\\n            \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\n# Constant Dictionary of characters: vowels are 1, others are 0 (default)\\nVOWELS = defaultdict(int)\\nVOWELS[\\'a\\'] = VOWELS[\\'e\\'] = VOWELS[\\'i\\'] = VOWELS[\\'o\\'] = VOWELS[\\'u\\'] = 1\\n\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\'\\'\\'\\n        Replace characters in s with an int value: 1 for vowels, 0 otherwise.\\n        We\\'ll return the maximum sum of any k-length window on s. \\n        \\'\\'\\'\\n        s = [VOWELS[c] for c in s]\\n        max_count = count = sum(s[:k])      # Both counts hold the initial sum\\n        for i in range(len(s) - k):         # Advance the window\\n            count += s[i + k] - s[i]        # Adjust the count\\n            if count > max_count:           # Keep the higher count\\n                max_count = count\\n        return max_count\\n\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694201,
                "title": "tc-o-n-sc-o-1-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nsliding Window\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nO(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char s){\\n        if(s == \\'a\\' ||s == \\'e\\' ||s == \\'i\\' ||s == \\'o\\' ||s == \\'u\\') return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        int ans = 0;\\n        int vowelCount = 0;\\n        for(int i =0;i<k;i++){\\n            if(isVowel(s[i])){\\n                vowelCount++;\\n            }\\n        }\\n        int i = k;\\n        int n = s.size();\\n        ans = vowelCount;\\n        while(i<n){\\n            if(isVowel(s[i-k])) vowelCount--;\\n            if(isVowel(s[i])) vowelCount++;\\n            ans = max(ans,vowelCount);\\n            i++;\\n        }\\n        \\n        return ans;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char s){\\n        if(s == \\'a\\' ||s == \\'e\\' ||s == \\'i\\' ||s == \\'o\\' ||s == \\'u\\') return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n        int ans = 0;\\n        int vowelCount = 0;\\n        for(int i =0;i<k;i++){\\n            if(isVowel(s[i])){\\n                vowelCount++;\\n            }\\n        }\\n        int i = k;\\n        int n = s.size();\\n        ans = vowelCount;\\n        while(i<n){\\n            if(isVowel(s[i-k])) vowelCount--;\\n            if(isVowel(s[i])) vowelCount++;\\n            ans = max(ans,vowelCount);\\n            i++;\\n        }\\n        \\n        return ans;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3681671,
                "title": "o-n-explained-python-java-solution-faster-than-90-using-set-very-intuitive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe are using the property of HashSet which guarantee us that element in our Set in O(1) time.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are creating Set that will contain all vowel letters. Go through k first letters and update count if it\\'s needed. Than by using sliding windows technique we are getting right answer. Adventages of this solution is that we can easily update vowels set(adding uppercase vowel letters) by not affecting the main code. This solution is more generic.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Java solution\\n```\\nclass Solution {\\n    Set<Character> vowelsSet = Set.of(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\');\\n    public int maxVowels(String s, int k) {\\n        var vowelsCount = 0;\\n\\n        for (var i = 0; i < k; ++i) {\\n            if (vowelsSet.contains(s.charAt(i))) {\\n                ++vowelsCount;\\n            }\\n        }\\n        var res = vowelsCount;\\n        for (var i = k; i < s.length(); ++i) {\\n            if (vowelsSet.contains(s.charAt(i))) {\\n                ++vowelsCount;\\n            }\\n            if (vowelsSet.contains(s.charAt(i-k))) {\\n                --vowelsCount;\\n            }\\n            res = Math.max(res, vowelsCount);\\n        }\\n        return res;\\n    }\\n}\\n```\\n# Python solution\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        curr_count = 0\\n        for i in range(k):\\n            if s[i] in vowels:\\n                curr_count += 1\\n        \\n        res = curr_count\\n\\n        for i in range(k, len(s)):\\n            if s[i] in vowels:\\n                curr_count += 1\\n            if s[i-k] in vowels:\\n                curr_count -= 1\\n            res = max(res, curr_count)\\n        return res\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "Hash Table",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    Set<Character> vowelsSet = Set.of(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\');\\n    public int maxVowels(String s, int k) {\\n        var vowelsCount = 0;\\n\\n        for (var i = 0; i < k; ++i) {\\n            if (vowelsSet.contains(s.charAt(i))) {\\n                ++vowelsCount;\\n            }\\n        }\\n        var res = vowelsCount;\\n        for (var i = k; i < s.length(); ++i) {\\n            if (vowelsSet.contains(s.charAt(i))) {\\n                ++vowelsCount;\\n            }\\n            if (vowelsSet.contains(s.charAt(i-k))) {\\n                --vowelsCount;\\n            }\\n            res = Math.max(res, vowelsCount);\\n        }\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}\\n        curr_count = 0\\n        for i in range(k):\\n            if s[i] in vowels:\\n                curr_count += 1\\n        \\n        res = curr_count\\n\\n        for i in range(k, len(s)):\\n            if s[i] in vowels:\\n                curr_count += 1\\n            if s[i-k] in vowels:\\n                curr_count -= 1\\n            res = max(res, curr_count)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493014,
                "title": "was-beating-100-java-6ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSolution must be simple and straightforward to avoid any inefficiency.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nchar -> isVowel mapping using simple array.\\nExclude any other idle or duplicated operation.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\npublic int maxVowels(String s, int k) {\\n\\tboolean[] vowels = new boolean[\\'z\\' + 1];\\n\\t\\tvowels[\\'u\\'] = true;\\n\\t\\tvowels[\\'e\\'] = true;\\n\\t\\tvowels[\\'i\\'] = true;\\n\\t\\tvowels[\\'o\\'] = true;\\n\\t\\tvowels[\\'a\\'] = true;\\n\\n\\tchar[] chars = s.toCharArray();\\n\\tint r = 0, maxN = 0;\\n\\tfor (;r < k; r++)\\n\\t\\tif (vowels[chars[r]])\\n\\t\\t\\tmaxN++;\\n\\n\\tint len = s.length(), l = 0, n = maxN;\\n\\tfor (;r < len; l++, r++) {\\n\\t\\tif (vowels[chars[l]])\\n\\t\\t\\tn--;\\n\\t\\tif (vowels[chars[r]])\\n\\t\\t\\tn++;\\n\\t\\tif (n > maxN)\\n\\t\\t\\tmaxN = n;\\n\\t}\\n\\treturn maxN;\\n}\\n\\n}\\n```\\n[Submission Detail](https://leetcode.com/submissions/detail/945450700).\\n\\nP.S. Upgraded to [4-ms solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3493619/beats-100-java-solutions-4-ms-runtime).",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n\\npublic int maxVowels(String s, int k) {\\n\\tboolean[] vowels = new boolean[\\'z\\' + 1];\\n\\t\\tvowels[\\'u\\'] = true;\\n\\t\\tvowels[\\'e\\'] = true;\\n\\t\\tvowels[\\'i\\'] = true;\\n\\t\\tvowels[\\'o\\'] = true;\\n\\t\\tvowels[\\'a\\'] = true;\\n\\n\\tchar[] chars = s.toCharArray();\\n\\tint r = 0, maxN = 0;\\n\\tfor (;r < k; r++)\\n\\t\\tif (vowels[chars[r]])\\n\\t\\t\\tmaxN++;\\n\\n\\tint len = s.length(), l = 0, n = maxN;\\n\\tfor (;r < len; l++, r++) {\\n\\t\\tif (vowels[chars[l]])\\n\\t\\t\\tn--;\\n\\t\\tif (vowels[chars[r]])\\n\\t\\t\\tn++;\\n\\t\\tif (n > maxN)\\n\\t\\t\\tmaxN = n;\\n\\t}\\n\\treturn maxN;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490517,
                "title": "c-solution-easy-sliding-window-explained",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isV(char c){  // Just for checking if the char is vowel or not\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'); \\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        for(int i=0,no=0;i<s.length();i++){\\n            if(i >= k && isV(s[i-k]))   no--; // I our window exceed the k that means we remove the last element i.e. if it\\'s vowel then we decrease the no(Current vowel in window)\\n            if(isV(s[i]))   no++;  // now we check if the current char is vowel or not. if its is we increase the no\\n            ans = max(ans,no);  // We take the maximum of the vowels in the any window\\n        }        \\n        return ans;\\n    }\\n};\\n```\\n![upvote cat.jpeg](https://assets.leetcode.com/users/images/079cde0c-5a80-4fd8-8afd-79ab413641e2_1683311237.3900177.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isV(char c){  // Just for checking if the char is vowel or not\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\'); \\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=0;\\n        for(int i=0,no=0;i<s.length();i++){\\n            if(i >= k && isV(s[i-k]))   no--; // I our window exceed the k that means we remove the last element i.e. if it\\'s vowel then we decrease the no(Current vowel in window)\\n            if(isV(s[i]))   no++;  // now we check if the current char is vowel or not. if its is we increase the no\\n            ans = max(ans,no);  // We take the maximum of the vowels in the any window\\n        }        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490347,
                "title": "sliding-window-golang-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ where n is the length of the string\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$ because we are using constant space.\\n\\n\\n# Code\\n```\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    return b\\n}\\n\\nfunc maxVowels(s string, k int) int {\\n    vowels := map[rune]bool{\\'a\\': true, \\'e\\': true, \\'i\\': true, \\'o\\': true, \\'u\\': true}\\n    count := 0\\n\\n    for i := 0; i < k; i++ {\\n        if vowels[rune(s[i])] {\\n            count++\\n        }\\n    }\\n\\n    ans := count\\n\\n    for i := k; i < len(s); i++ {\\n        if vowels[rune(s[i])] {\\n            count++\\n        }\\n        if vowels[rune(s[i-k])] {\\n            count--\\n        }\\n\\n        ans = max(ans, count)\\n    }\\n\\n    return ans\\n}\\n\\n```",
                "solutionTags": [
                    "Go",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nfunc max(a, b int) int {\\n    if a > b {\\n        return a\\n    }\\n    return b\\n}\\n\\nfunc maxVowels(s string, k int) int {\\n    vowels := map[rune]bool{\\'a\\': true, \\'e\\': true, \\'i\\': true, \\'o\\': true, \\'u\\': true}\\n    count := 0\\n\\n    for i := 0; i < k; i++ {\\n        if vowels[rune(s[i])] {\\n            count++\\n        }\\n    }\\n\\n    ans := count\\n\\n    for i := k; i < len(s); i++ {\\n        if vowels[rune(s[i])] {\\n            count++\\n        }\\n        if vowels[rune(s[i-k])] {\\n            count--\\n        }\\n\\n        ans = max(ans, count)\\n    }\\n\\n    return ans\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489989,
                "title": "simple-sliding-window-technique-java",
                "content": "# Sliding Window Technique : \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$ \\n\\n# Instruction : Read and trace the code properly... you\\'ll get the Intuition of the problem.\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int ans = Integer.MIN_VALUE;\\n        int count = 0;\\n        for(int i = 0;i<k;i++)\\n        {\\n            char c = s.charAt(i);\\n            if(\"aeiou\".indexOf(c)!=-1)\\n            {\\n                count++;\\n            }\\n        }\\n        ans = Math.max(ans,count);\\n        for(int i = k;i<s.length();i++)\\n        {\\n            if(\"aeiou\".indexOf(s.charAt(i-k))!=-1)\\n            {\\n                count--;\\n            }\\n            if(\"aeiou\".indexOf(s.charAt(i))!=-1)\\n            {\\n                count++;\\n            }\\n            ans = Math.max(ans,count);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int ans = Integer.MIN_VALUE;\\n        int count = 0;\\n        for(int i = 0;i<k;i++)\\n        {\\n            char c = s.charAt(i);\\n            if(\"aeiou\".indexOf(c)!=-1)\\n            {\\n                count++;\\n            }\\n        }\\n        ans = Math.max(ans,count);\\n        for(int i = k;i<s.length();i++)\\n        {\\n            if(\"aeiou\".indexOf(s.charAt(i-k))!=-1)\\n            {\\n                count--;\\n            }\\n            if(\"aeiou\".indexOf(s.charAt(i))!=-1)\\n            {\\n                count++;\\n            }\\n            ans = Math.max(ans,count);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489206,
                "title": "maxvowels-in-k-substring-python-beats-97-on-runtime",
                "content": "# Intuition\\nWhile the question asks what\\'s the maximum across all the substrings, iterating over each substring will be inefficient. Two adjacent substrings, `s[i:(i+k)]` and `s[(i+1):(i+k+1)]`, have a significant overlap of $k-1$ characters. This means if we do any kind of check or operation on all the characters in a substring, we\\'ll have done that same check or operation on all the overlapping the characters previously.\\n\\nOnce we\\'ve done our check or operation on the initial substring, `s[0:k]`, in any subsequent substrings all that matters to us is whether the character that\\'s left the substring was a vowel and whether the character that\\'s new to the substring is a vowel.\\n\\nWe can also avoid double-checking whether a character is a vowel (first when it enters the substring and again when it leaves) by checking whether each character is a vowel once at the start.\\n\\n# Approach\\n\\n1. Create a boolean list indicating whether each character in `s` is a vowel.\\n\\n2. Count how many vowels are in the initial $k$-substring, `s[0:k]` to initalise a running total of vowels and an initial maximum.\\n\\n3. For each subsequent substring:\\n\\n    1. If the character that\\'s no longer in the substring was a vowel, decrease our running total by one.\\n    \\n    2. If the character new to the substring is a vowel, increase our running total by one.\\n    \\n    3. Update our maximum if our running total exceeds the current maximum.\\n    \\n4. If at any point the running total is equal to the length of the substring, we return $k$; it\\'s not possible to have $k+1$ vowels in only $k$ characters.\\n\\n\\n# Complexity\\nWe do $n$ inclusion checks to produce `isVowel`, each of which is $O(1)$ on average [[1]](https://wiki.python.org/moin/TimeComplexity). There are also at most $2n - k - 1$ binary operations and $3n-3k$ comparisons. This means our **time complexity is $O(n)$**.\\n\\nWe create a new boolean vector of length $n$ plus two additional integer variables. This means our **space complexity is $O(n)$**.\\n\\n# Code\\n```python\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \"\"\"\\n        Takes a string s and an integer k as inputs, and then\\n        returns the maximum number of vowels that appear in\\n        any substring of s with length k.\\n        \"\"\"\\n        # do all the inclusion checks once at the start\\n        isVowel = [c in {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'} for c in s]\\n        # get initial number (which is also initial max)\\n        maxVowels = nowVowels = sum(isVowel[:k])\\n        # highest possible is substring of all vowels\\n        if maxVowels == k: return k\\n        # iterate over remaining characters\\n        for i in range(k,len(s)):\\n            # check if character leaving substring is vowel\\n            if isVowel[i-k]: nowVowels -=1\\n            # check if character entering substring is vowel\\n            if isVowel[i]: nowVowels += 1\\n            # check if found a new maximum\\n            if nowVowels > maxVowels: maxVowels = nowVowels\\n            # check if reached highest possible\\n            if maxVowels == k: return k\\n        # if never reached highest possible, return max\\n        return maxVowels\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```python\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \"\"\"\\n        Takes a string s and an integer k as inputs, and then\\n        returns the maximum number of vowels that appear in\\n        any substring of s with length k.\\n        \"\"\"\\n        # do all the inclusion checks once at the start\\n        isVowel = [c in {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'} for c in s]\\n        # get initial number (which is also initial max)\\n        maxVowels = nowVowels = sum(isVowel[:k])\\n        # highest possible is substring of all vowels\\n        if maxVowels == k: return k\\n        # iterate over remaining characters\\n        for i in range(k,len(s)):\\n            # check if character leaving substring is vowel\\n            if isVowel[i-k]: nowVowels -=1\\n            # check if character entering substring is vowel\\n            if isVowel[i]: nowVowels += 1\\n            # check if found a new maximum\\n            if nowVowels > maxVowels: maxVowels = nowVowels\\n            # check if reached highest possible\\n            if maxVowels == k: return k\\n        # if never reached highest possible, return max\\n        return maxVowels\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488941,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488590,
                "title": "easy-o-n-tc-o-1-sc-sliding-window-c-solution-you-should-look-once",
                "content": "> [# Intuition]()\\nSliding Window\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nJust increase the count when vowel encounters in current window and decrease cnt when a vowel released by window, and maximise ans in each iteration.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, cnt = 0, n = s.length();\\n        unordered_map<char, bool> mp;\\n        mp[\\'a\\'] = mp[\\'e\\'] = mp[\\'i\\'] = mp[\\'o\\'] = mp[\\'u\\'] = 1;\\n        for(int i = 0; i< n; ++i)\\n        {\\n            if(mp.count(s[i])) ++cnt;\\n            if(i>=k && mp.count(s[i-k])) --cnt;\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, cnt = 0, n = s.length();\\n        unordered_map<char, bool> mp;\\n        mp[\\'a\\'] = mp[\\'e\\'] = mp[\\'i\\'] = mp[\\'o\\'] = mp[\\'u\\'] = 1;\\n        for(int i = 0; i< n; ++i)\\n        {\\n            if(mp.count(s[i])) ++cnt;\\n            if(i>=k && mp.count(s[i-k])) --cnt;\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488338,
                "title": "bhai-tere-liye-hi-hai-easy-c-sliding",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf you know the Sliding Window Technique then ```jake solve karo  na yaha kya karne aaye ho``` and If you don\\'t then read below\\uD83D\\uDC47\\uD83D\\uDC47:\\n\\n1. Just calculate the number of vowels (count) for the first ```k``` char of string.\\n2. Now store it in a new variable ```max_val```(this the window size).\\n3. Iterate over string from i=k to i<n.\\n4. Every time check s[i-k] is vowel or not, if it is the count-- and check s[i] also if it is vowel then count++.\\n5. Store max of count in ```max_val```.\\n6. Return it.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int count=0;\\n        char x;\\n\\n        for(int i=0;i<k;i++){\\n            x = s[i];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count++;\\n        }\\n\\n        int max_val = count;\\n\\n        for(int i=k;i<n;i++){\\n            x = s[i-k];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count--;\\n            \\n            x = s[i];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count++;\\n\\n            max_val = max(max_val, count);\\n        }\\n\\n        return max_val;\\n    }\\n};\\n```\\n\\n![please upvote.png](https://assets.leetcode.com/users/images/d3233765-9c64-4959-b78e-70570317566a_1683275278.4116118.png)\\n\\n",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```jake solve karo  na yaha kya karne aaye ho```\n```k```\n```max_val```\n```max_val```\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int count=0;\\n        char x;\\n\\n        for(int i=0;i<k;i++){\\n            x = s[i];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count++;\\n        }\\n\\n        int max_val = count;\\n\\n        for(int i=k;i<n;i++){\\n            x = s[i-k];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count--;\\n            \\n            x = s[i];\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') count++;\\n\\n            max_val = max(max_val, count);\\n        }\\n\\n        return max_val;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487984,
                "title": "swift-easy-linear-solution",
                "content": "# Intuition\\nSliding window: \\n1) map string of chars to array of `1`(for vowel) and `0`(for other)\\n2) calculate `1`(vowels) from 0 to k\\n3) from k to end subtract old value `array[i - k]` and add new value `array[i]`\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    func maxVowels(_ s: String, _ k: Int) -> Int {\\n        \\n        var array: [Int] = s.map { [\"a\",\"e\",\"i\",\"o\",\"u\"].contains($0) ? 1 : 0 }\\n        var count = array.prefix(k).reduce(0, +)\\n\\n        if array.count <= k { return count }\\n        var maxCount = count\\n        for i in (k..<array.count) {\\n            count = count - array[i - k] + array[i]\\n            maxCount = max(maxCount, count)\\n        } \\n        return maxCount\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func maxVowels(_ s: String, _ k: Int) -> Int {\\n        \\n        var array: [Int] = s.map { [\"a\",\"e\",\"i\",\"o\",\"u\"].contains($0) ? 1 : 0 }\\n        var count = array.prefix(k).reduce(0, +)\\n\\n        if array.count <= k { return count }\\n        var maxCount = count\\n        for i in (k..<array.count) {\\n            count = count - array[i - k] + array[i]\\n            maxCount = max(maxCount, count)\\n        } \\n        return maxCount\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487419,
                "title": "python-short-1-liner-functional-programming",
                "content": "# Approach\\n1. Maintain 2 strings, `s_start` and `s_end`, where `s_start` is `k` characters behind of `s_end`, i.e when `s_end[i] = s[i]` and `s_start[i] = s[i - k]`.\\n\\n2. To achieve this, set `s_end` to `s` and prepend a consonant `k` times to `s_start`.\\n    Example:\\n    ```python\\n    s_end = s\\n    s_start = chain(repeat(\\'z\\', k), s) # (Avoiding string addition)\\n    ```\\n\\n3. Loop through the strings one character pair at a time using `zip(s_start, s_end)`.\\n    This gives the ends of the current sliding window.\\n\\n4. Keep a running `count` of vowels, and for each window pair `[a, b]`, slide the window to drop `a` and include `b` and update the count.\\n    `count = count - (a is vowel) + (b is vowel)`.\\n\\n5. Return the `max` of all counts.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\nwhere, `n is the length of s`.\\n\\n# Code\\n```python\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        return max(accumulate(\\n            zip(chain(repeat(\\'z\\', k), s), s),\\n            lambda a, x: a - (x[0] in \\'aeiou\\') + (x[1] in \\'aeiou\\'),\\n            initial=0,\\n        ))\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Sliding Window"
                ],
                "code": "```python\\n    s_end = s\\n    s_start = chain(repeat(\\'z\\', k), s) # (Avoiding string addition)\\n    ```\n```python\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        return max(accumulate(\\n            zip(chain(repeat(\\'z\\', k), s), s),\\n            lambda a, x: a - (x[0] in \\'aeiou\\') + (x[1] in \\'aeiou\\'),\\n            initial=0,\\n        ))\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487371,
                "title": "very-easy-and-simple-solution-almost-looks-like-with-editorial-version-of-solution-but-in-js",
                "content": "\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let array = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n    let count = 0\\n    for(let i = 0; i < k; i++) {\\n        if(array.includes(s[i])) {\\n            count++\\n        }\\n    }\\n    let max = count\\n    for(let i = k; i < s.length; i++) {\\n        if(array.includes(s[i])) {\\n            count++\\n        }\\n        if(array.includes(s[i - k])) {\\n            count--\\n        }\\n        max = Math.max(max, count)\\n    }\\n    return max\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let array = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n    let count = 0\\n    for(let i = 0; i < k; i++) {\\n        if(array.includes(s[i])) {\\n            count++\\n        }\\n    }\\n    let max = count\\n    for(let i = k; i < s.length; i++) {\\n        if(array.includes(s[i])) {\\n            count++\\n        }\\n        if(array.includes(s[i - k])) {\\n            count--\\n        }\\n        max = Math.max(max, count)\\n    }\\n    return max\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487339,
                "title": "optimal-solution-using-sliding-window-clean-well-defined-and-well-explained-code",
                "content": "\\n\\n# Approach\\nThe idea is to use a sliding window of length k to iterate through the string and count the number of vowels in each substring of length k. We initialize maxVowels and currVowels to 0, and then iterate through the first k characters of the string to count the number of vowels. We update maxVowels to be the maximum of maxVowels and currVowels.\\n\\nThen, we iterate through the rest of the string using a sliding window of length k. At each step, we subtract the count of the vowel that is leaving the window (i.e., the vowel at position i-k) and add the count of the vowel that is entering the window (i.e., the vowel at position i). We update maxVowels to be the maximum of maxVowels and currVowels at each step. Finally, we return maxVowels.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int maxVowels = 0, currVowels = 0;\\n        for(int i = 0; i < k; i++) {\\n            if(isVowel(s[i])) currVowels++;\\n        }\\n        maxVowels = currVowels;\\n        for(int i = k; i < s.length(); i++) {\\n            if(isVowel(s[i-k])) currVowels--;\\n            if(isVowel(s[i])) currVowels++;\\n            maxVowels = max(maxVowels, currVowels);\\n        }\\n        return maxVowels;\\n    }\\n    \\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int maxVowels = 0, currVowels = 0;\\n        for(int i = 0; i < k; i++) {\\n            if(isVowel(s[i])) currVowels++;\\n        }\\n        maxVowels = currVowels;\\n        for(int i = k; i < s.length(); i++) {\\n            if(isVowel(s[i-k])) currVowels--;\\n            if(isVowel(s[i])) currVowels++;\\n            maxVowels = max(maxVowels, currVowels);\\n        }\\n        return maxVowels;\\n    }\\n    \\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487214,
                "title": "simple-c-solution-with-explanation-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic intuition that comes in mind to iterate for k size and keep count of vowel in first window then from that position start sliding the window check the incoming and outgoing element form the window and in each iteration keep updating the answer count.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Created a function to check for vowel characters.\\n- `ans` having the final answer, `n` for the size of string, `temp` to store the count of each window.\\n- Iterate firstly for first window and have a starting count.\\n- Updata `ans` then iterate in string from that position and check whether the incoming character is vowel or not, also check for outgoing character.\\n- Updata the `ans` in each k size window.\\n- Return `ans`;\\n# IF YOU LIKE THE SOLUTION PLEASE UPVOTE \\uD83D\\uDE07\\uD83D\\uDE42\\n# Complexity\\n- Time complexity:`O(N)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:`O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    bool checkVowel(char x){\\n        if(x == \\'a\\'||x == \\'e\\'||x == \\'i\\'||x == \\'o\\'||x == \\'u\\')    return true;\\n        return false;\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, n = s.length(), temp = 0;\\n        for(int i = 0; i<n && i<k; i++){\\n            if(checkVowel(s[i]))    temp++;\\n        }\\n        ans = max(ans,temp);\\n        for(int i=k; i<n; i++){\\n            if(checkVowel(s[i]))    temp++;\\n            if(checkVowel(s[i-k]))  temp--;\\n            ans = max(ans,temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    bool checkVowel(char x){\\n        if(x == \\'a\\'||x == \\'e\\'||x == \\'i\\'||x == \\'o\\'||x == \\'u\\')    return true;\\n        return false;\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, n = s.length(), temp = 0;\\n        for(int i = 0; i<n && i<k; i++){\\n            if(checkVowel(s[i]))    temp++;\\n        }\\n        ans = max(ans,temp);\\n        for(int i=k; i<n; i++){\\n            if(checkVowel(s[i]))    temp++;\\n            if(checkVowel(s[i-k]))  temp--;\\n            ans = max(ans,temp);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487004,
                "title": "simple-c-solution-easy-to-read",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n       int result = 0;\\n       int count =0;\\n       for(int i = 0; i < k; i++)\\n       {\\n            if(isVowel(s[i]))\\n                count++;\\n       }\\n       result = count;\\n       for(int j = k; j < s.Length; j++)\\n       {\\n            if(isVowel(s[j-k]))\\n                count--;\\n            if(isVowel(s[j]))\\n                count++;\\n            result = Math.Max(result, count);\\n       }\\n       return result;\\n    }\\n     public bool isVowel(char c)\\n    {\\n        return (c==\\'a\\') || (c==\\'e\\') || (c==\\'i\\') || (c==\\'o\\') || (c==\\'u\\');\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n       int result = 0;\\n       int count =0;\\n       for(int i = 0; i < k; i++)\\n       {\\n            if(isVowel(s[i]))\\n                count++;\\n       }\\n       result = count;\\n       for(int j = k; j < s.Length; j++)\\n       {\\n            if(isVowel(s[j-k]))\\n                count--;\\n            if(isVowel(s[j]))\\n                count++;\\n            result = Math.Max(result, count);\\n       }\\n       return result;\\n    }\\n     public bool isVowel(char c)\\n    {\\n        return (c==\\'a\\') || (c==\\'e\\') || (c==\\'i\\') || (c==\\'o\\') || (c==\\'u\\');\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486941,
                "title": "java-solution-for-number-of-vowels-in-a-substring-of-given-length-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given solution traverses the input string s and counts the number of vowels in a sliding window of size k. At each index i, it checks if the character s[i-k] that is going out of the window is a vowel and decrements the count accordingly. It then checks if the character s[i] that is coming into the window is a vowel and increments the count accordingly. Finally, it keeps track of the maximum count seen so far and returns it as the answer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is to use a sliding window of size k to iterate over all substrings of s with length k, while keeping track of the count of vowels in the current substring. We start with the first k characters of s and count the number of vowels. Then, we slide the window one character to the right and update the vowel count by subtracting the vowel count of the character that just went out of the window (if it was a vowel) and adding the vowel count of the character that just came into the window (if it is a vowel). We repeat this process until we reach the end of s, and return the maximum vowel count that we encountered during the process.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n), where n is the length of s, since we only iterate over s once\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1), since we only use a constant amount of extra memory to store the vowel count and the maximum count.\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) \\n    {\\n        int maxCount = 0;\\n        int count = 0;\\n        for (int i = 0; i < s.length(); i++) \\n        {\\n            char c = s.charAt(i);\\n            if (isVowel(c)) \\n            {\\n                count++;\\n            }\\n            if (i >= k && isVowel(s.charAt(i - k))) \\n            {\\n                count--;\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }\\n    private boolean isVowel(char c) \\n    {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) \\n    {\\n        int maxCount = 0;\\n        int count = 0;\\n        for (int i = 0; i < s.length(); i++) \\n        {\\n            char c = s.charAt(i);\\n            if (isVowel(c)) \\n            {\\n                count++;\\n            }\\n            if (i >= k && isVowel(s.charAt(i - k))) \\n            {\\n                count--;\\n            }\\n            maxCount = Math.max(maxCount, count);\\n        }\\n        return maxCount;\\n    }\\n    private boolean isVowel(char c) \\n    {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326143,
                "title": "java-easy-sliding-window",
                "content": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int max=0,cnt=0;\\n        for(int i=0,j=0;j<s.length();j++){\\n            if(j-i+1<k){\\n                if(s.charAt(j)==\\'a\\' ||s.charAt(j)==\\'e\\' || s.charAt(j)==\\'i\\' || s.charAt(j)==\\'o\\' || s.charAt(j)==\\'u\\' ){\\n                    cnt++;\\n                }\\n            }\\n            else{\\n                if(s.charAt(j)==\\'a\\' ||s.charAt(j)==\\'e\\' || s.charAt(j)==\\'i\\' || s.charAt(j)==\\'o\\' || s.charAt(j)==\\'u\\'){\\n                    cnt++;\\n                }\\n                max=Math.max(max,cnt);\\n                if(s.charAt(i)==\\'a\\' ||s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                    cnt--;\\n                }\\n                i++;\\n            }\\n            \\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int max=0,cnt=0;\\n        for(int i=0,j=0;j<s.length();j++){\\n            if(j-i+1<k){\\n                if(s.charAt(j)==\\'a\\' ||s.charAt(j)==\\'e\\' || s.charAt(j)==\\'i\\' || s.charAt(j)==\\'o\\' || s.charAt(j)==\\'u\\' ){\\n                    cnt++;\\n                }\\n            }\\n            else{\\n                if(s.charAt(j)==\\'a\\' ||s.charAt(j)==\\'e\\' || s.charAt(j)==\\'i\\' || s.charAt(j)==\\'o\\' || s.charAt(j)==\\'u\\'){\\n                    cnt++;\\n                }\\n                max=Math.max(max,cnt);\\n                if(s.charAt(i)==\\'a\\' ||s.charAt(i)==\\'e\\' || s.charAt(i)==\\'i\\' || s.charAt(i)==\\'o\\' || s.charAt(i)==\\'u\\'){\\n                    cnt--;\\n                }\\n                i++;\\n            }\\n            \\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1485108,
                "title": "brute-force-to-optimal-approach-thought-process",
                "content": "Hi Everyone,\\n\\nLet us try to move from ***Brute Force Solution to an Optimal Solution*** to understand the completeness of our approach. I will try to explain the thought process behind each appraoch, and have added the code below for reference. Feel free to point out any improvements. \\n\\nOptimal Solution uses *Sliding Window Approach* - I will try to explain it step by step.\\n\\n-----------**Brute Force Approach** - **This clears 99/106 test cases and then leads to TLE**------------\\n\\nThe steps have been marked below as well as in code for understanding.\\n\\n* **STEP 1** : In this, we can traverse over the array and generate all the substrings of length *k* and store them in an array named ***arr*** . Since we are traversing the entire array, the arrays generated at the last may not be of size k. We will handle this situation later.\\n\\n* **STEP 2** : After this, we can traverse over the new array containing all the substrings, and put a condition that if length of the substring == k, we can iterate over this again and count the number of vowels inside it, which we can store it in another array named as ***arr1***.\\n\\n* **STEP 3** : Now, we can simply return the maximum value inside arr1, which is the maximum number of vowels in a substring of size k. If arr1 is empty, we can return 0.\\n\\n***Complexity Analysis*** : \\n\\n ***Time Complexity  - O(N^2)***\\n ***Space Complexity  - O(N)***\\n \\n \\n\\n**Here is the code for Brute Force Approach** : \\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\n        n = len(s)\\n       \\n        #STEP 1\\n        arr = []\\n        for i in range(0, n):\\n                arr.append(s[i : i + k])\\n        \\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n        arr1 = []\\n        \\n\\t\\t#STEP 2\\n        for i in arr:\\n            count = 0 \\n            if len(i) == k:\\n                for j in i:\\n                    if j in vowels:\\n                        count += 1 \\n                arr1.append(count)\\n        \\n\\t\\t#STEP 3\\n        if len(arr1) != 0:\\n            value = max(arr1)\\n            return value\\n        else:\\n            return 0\\n```\\n\\n\\n--------------**Optimal Approach** - Help taken from Discussions - Clears all test cases-----------------\\n\\nVery often, I have seen that optimising the solution requires use of certain observations which we did not use in our Brute Force solution. One of them could be : **We know that maximum number of vowels can never be greater than k as all substrings of length k are only being considered**.  Now, our main concern is to move from O(N^2) Time Complexity to something more optimal, or in simple words, we have to get rid of two nested loops. Let us see Step by Step on what can be done.\\n\\n* First, let us store the number of vowels in the first substring of length k, that is, substring starting from 0th index and till (k-1)th index and store it in a variable named ***count*** \\n\\n*  After this, let us inititalise a variable named ***max_vowel_count*** to count, which will keep the value of maximum number of vowels in a substring of length k.\\n\\n*   Now, we will slide by 1 unit, that is, we will iterate from kth index till the last. (Slide by 1 unit because earlier, we traversed from 0th index till (n-1)th index \\n\\n* Now, we can simply assign and deassign and continue moving by 1 unit each.  \\n\\nNote : It is taking time for me to entirely absorb this approach but slowly and steadily, I will try to explain this approach in even simpler words. ***Dry running the given code will be helpful***\\n\\n\\n***Complexity Analysis*** : \\n\\n***Time Complexity - O(N)\\nSpace Complexity - O(1)***\\n\\n\\n\\n**Here is the code for Optimal Approach** : \\n\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n \\n        n = len(s)\\n        \\n        vowels = { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' }\\n        count = 0 \\n        # Step 1 : We will find number of vowels in the first substring of length k : from 0th index till (k-1)th index\\n        for i in range(0, k):\\n            if s[i] in vowels:\\n                count += 1\\n        \\n        \\n        # record for maximum vowel count in substring\\n        max_vowel_count = count\\n        \\n        \\n        # sliding window of size k\\n        # starts from k and window from [0, k-1] inclusive is already considered\\n        for tail_index in range(k, n):\\n            \\n            head_index = tail_index - k\\n            head_char, tail_char = s[head_index], s[tail_index]\\n            \\n            if head_char in vowels:\\n                count -= 1\\n                \\n            if tail_char in vowels:\\n                count += 1\\n                \\n            max_vowel_count = max(max_vowel_count, count)\\n            \\n        \\n        return max_vowel_count\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\n        n = len(s)\\n       \\n        #STEP 1\\n        arr = []\\n        for i in range(0, n):\\n                arr.append(s[i : i + k])\\n        \\n        vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n        arr1 = []\\n        \\n\\t\\t#STEP 2\\n        for i in arr:\\n            count = 0 \\n            if len(i) == k:\\n                for j in i:\\n                    if j in vowels:\\n                        count += 1 \\n                arr1.append(count)\\n        \\n\\t\\t#STEP 3\\n        if len(arr1) != 0:\\n            value = max(arr1)\\n            return value\\n        else:\\n            return 0\\n```\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n \\n        n = len(s)\\n        \\n        vowels = { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' }\\n        count = 0 \\n        # Step 1 : We will find number of vowels in the first substring of length k : from 0th index till (k-1)th index\\n        for i in range(0, k):\\n            if s[i] in vowels:\\n                count += 1\\n        \\n        \\n        # record for maximum vowel count in substring\\n        max_vowel_count = count\\n        \\n        \\n        # sliding window of size k\\n        # starts from k and window from [0, k-1] inclusive is already considered\\n        for tail_index in range(k, n):\\n            \\n            head_index = tail_index - k\\n            head_char, tail_char = s[head_index], s[tail_index]\\n            \\n            if head_char in vowels:\\n                count -= 1\\n                \\n            if tail_char in vowels:\\n                count += 1\\n                \\n            max_vowel_count = max(max_vowel_count, count)\\n            \\n        \\n        return max_vowel_count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1187285,
                "title": "c-solution-sliding-window-aditya-verma-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||c==\\'o\\' ||c==\\'u\\');\\n    }\\n    int maxVowels(string s, int k) {\\n        int i=0,j=0;\\n        int numVowels =0;\\n        int maxm=0;\\n        while(j<s.size()){\\n            // increase the count of vowels, if the character pointing at j is a vowel\\n            if(isVowel(s[j]))\\n                numVowels++;\\n            // increase the window size\\n            if(j-i+1<k)\\n                j++;\\n            // if the window size hits, check if the current number of vowels is maximum\\n            else if(j-i+1 == k){\\n                maxm=max(maxm,numVowels);\\n                if(isVowel(s[i]))\\n                    numVowels--;// remove the calculation for the character pointing at i, if it is a vowel\\n                i++;\\n                j++;\\n            }\\n        }\\n        return maxm;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||c==\\'o\\' ||c==\\'u\\');\\n    }\\n    int maxVowels(string s, int k) {\\n        int i=0,j=0;\\n        int numVowels =0;\\n        int maxm=0;\\n        while(j<s.size()){\\n            // increase the count of vowels, if the character pointing at j is a vowel\\n            if(isVowel(s[j]))\\n                numVowels++;\\n            // increase the window size\\n            if(j-i+1<k)\\n                j++;\\n            // if the window size hits, check if the current number of vowels is maximum\\n            else if(j-i+1 == k){\\n                maxm=max(maxm,numVowels);\\n                if(isVowel(s[i]))\\n                    numVowels--;// remove the calculation for the character pointing at i, if it is a vowel\\n                i++;\\n                j++;\\n            }\\n        }\\n        return maxm;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693510,
                "title": "c-sliding-window",
                "content": "class Solution {\\n```\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count = 0;\\n        int j = 0;\\n        int ans = 0, res = 0;\\n        for(int i=0; i< s.size(); i++){\\n            count++;                                // count characters\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                ans++;\\n            }\\n            res = max(res, ans);\\n\\t\\t\\twhile(count>=k && j< s.size()){\\n                count--;\\n                if(s[j]==\\'a\\' || s[j]==\\'e\\' || s[j]==\\'i\\' || s[j]==\\'o\\' || s[j]==\\'u\\'){\\n                    ans--;                                                                 \\n                }\\n                j++;\\n            }\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\n```\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count = 0;\\n        int j = 0;\\n        int ans = 0, res = 0;\\n        for(int i=0; i< s.size(); i++){\\n            count++;                                // count characters\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                ans++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 670258,
                "title": "o-n-solution-in-python3-using-suffix-array",
                "content": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        suffix = []\\n        result = 0\\n        vowels = set(\"aeiou\")\\n        if s[0] in vowels:\\n            suffix.append(1)\\n        else:\\n            suffix.append(0)\\n        length = len(s)\\n        for i in range(1,length):\\n            if s[i] in vowels:\\n                suffix.append(1+suffix[-1])\\n            else:\\n                suffix.append(suffix[-1])\\n        if length==k:\\n            return suffix[-1]\\n        maximum = 0\\n        for i in range(length-k+1):\\n            if i==0:\\n                maximum = max(maximum,suffix[i+(k-1)])\\n            else:\\n                maximum = max(maximum,suffix[i+(k-1)]-suffix[i-1])\\n        return maximum\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        suffix = []\\n        result = 0\\n        vowels = set(\"aeiou\")\\n        if s[0] in vowels:\\n            suffix.append(1)\\n        else:\\n            suffix.append(0)\\n        length = len(s)\\n        for i in range(1,length):\\n            if s[i] in vowels:\\n                suffix.append(1+suffix[-1])\\n            else:\\n                suffix.append(suffix[-1])\\n        if length==k:\\n            return suffix[-1]\\n        maximum = 0\\n        for i in range(length-k+1):\\n            if i==0:\\n                maximum = max(maximum,suffix[i+(k-1)])\\n            else:\\n                maximum = max(maximum,suffix[i+(k-1)]-suffix[i-1])\\n        return maximum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 649196,
                "title": "java-sliding-window-o-n-solution-easy-to-understand",
                "content": "```\\nprivate boolean isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n                return true;\\n            }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n        if(s.length()==0)\\n            return 0;\\n        int res=0;//response to return\\n        char st=s.charAt(0);//starting character in our window of size k\\n        char en=s.charAt(k-1);//ending character in our window\\n        int ans=0;//no. of vowels in current substring\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s.charAt(i))){\\n                ans++;\\n            }\\n        }\\n        res=Math.max(res,ans);//update res if current ans is bigger\\n        for(int i=k;i<s.length();i++){//loop on remaining n-k elements to find a better substring\\n            char ch=s.charAt(i);\\n            if(isVowel(st)){// if starting char of prev window is a vowel, decrease count\\n                ans--;\\n            }\\n            if(isVowel(ch)){// if curr char is vowel, increase count\\n                ans++;\\n            }\\n\\t\\t\\t// update window\\n            st=s.charAt(i-k+1);\\n            en=s.charAt(i);\\n            res=Math.max(res,ans);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nprivate boolean isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\'){\\n                return true;\\n            }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n        if(s.length()==0)\\n            return 0;\\n        int res=0;//response to return\\n        char st=s.charAt(0);//starting character in our window of size k\\n        char en=s.charAt(k-1);//ending character in our window\\n        int ans=0;//no. of vowels in current substring\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s.charAt(i))){\\n                ans++;\\n            }\\n        }\\n        res=Math.max(res,ans);//update res if current ans is bigger\\n        for(int i=k;i<s.length();i++){//loop on remaining n-k elements to find a better substring\\n            char ch=s.charAt(i);\\n            if(isVowel(st)){// if starting char of prev window is a vowel, decrease count\\n                ans--;\\n            }\\n            if(isVowel(ch)){// if curr char is vowel, increase count\\n                ans++;\\n            }\\n\\t\\t\\t// update window\\n            st=s.charAt(i-k+1);\\n            en=s.charAt(i);\\n            res=Math.max(res,ans);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 648790,
                "title": "c-concise-code",
                "content": "```\\npublic class Solution\\n{\\n    private HashSet<char> vowels = new HashSet<char>() { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' };\\n    public int MaxVowels(string s, int k)\\n    {\\n        int res = 0, len = 0, start = 0, end = 0;\\n        while (end < s.Length)\\n        {\\n            if (vowels.Contains(s[end++]))\\n                len++;\\n            if (end - start > k && vowels.Contains(s[start++]))\\n                len--;\\n            res = Math.Max(res, len);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution\\n{\\n    private HashSet<char> vowels = new HashSet<char>() { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' };\\n    public int MaxVowels(string s, int k)\\n    {\\n        int res = 0, len = 0, start = 0, end = 0;\\n        while (end < s.Length)\\n        {\\n            if (vowels.Contains(s[end++]))\\n                len++;\\n            if (end - start > k && vowels.Contains(s[start++]))\\n                len--;\\n            res = Math.Max(res, len);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648451,
                "title": "python-sliding-window-simple-solution-one-pass",
                "content": "```\\ndef maxVowels(self, s: str, k: int) -> int:\\n\\tvowels = \\'aeiou\\'\\n\\tn = len(s)\\n\\tif n < k: \\n\\t\\treturn -1\\n\\n\\tres = 0\\n\\tfor i in range(k): \\n\\t\\tres += 1 if s[i] in vowels else 0\\n\\n\\tcurr = res \\n\\tfor i in range(k, n): \\n\\t\\tcurr += ((1 if s[i] in vowels else 0) - (1 if s[i-k] in vowels else 0))\\n\\t\\tres = max(res, curr) \\n\\n\\treturn res",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\ndef maxVowels(self, s: str, k: int) -> int:\\n\\tvowels = \\'aeiou\\'\\n\\tn = len(s)\\n\\tif n < k: \\n\\t\\treturn -1\\n\\n\\tres = 0\\n\\tfor i in range(k): \\n\\t\\tres += 1 if s[i] in vowels else 0\\n\\n\\tcurr = res \\n\\tfor i in range(k, n): \\n\\t\\tcurr += ((1 if s[i] in vowels else 0) - (1 if s[i-k] in vowels else 0))\\n\\t\\tres = max(res, curr) \\n\\n\\treturn res",
                "codeTag": "Python3"
            },
            {
                "id": 4031885,
                "title": "maximum-number-of-vowels-in-a-substring-of-given-length-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3774524,
                "title": "easy-to-understand-java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowel = 0;\\n        for(int i=0;i<k;i++) {\\n            if(isVowel(s.charAt(i))) vowel++;\\n        }\\n        int max = vowel;\\n        for(int i=k;i<s.length();i++) {\\n            if(isVowel(s.charAt(i))) vowel++;\\n            if(isVowel(s.charAt(i-k))) vowel--;\\n            max = Math.max(max,vowel);\\n        }\\n        return max;\\n    }\\n    public boolean isVowel(char ch) {\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int vowel = 0;\\n        for(int i=0;i<k;i++) {\\n            if(isVowel(s.charAt(i))) vowel++;\\n        }\\n        int max = vowel;\\n        for(int i=k;i<s.length();i++) {\\n            if(isVowel(s.charAt(i))) vowel++;\\n            if(isVowel(s.charAt(i-k))) vowel--;\\n            max = Math.max(max,vowel);\\n        }\\n        return max;\\n    }\\n    public boolean isVowel(char ch) {\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3755426,
                "title": "python-solution-sliding-window-beats-91-36-in-memory",
                "content": "# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n\\n        start = 0\\n        end = 0\\n        n = len(s)\\n        max_num = 0\\n        count=0\\n\\n        while k >= (end-start) and end <n:\\n            if s[end] in vowels:\\n                count+=1\\n                max_num = max(max_num,count)\\n            if k==(end-start+1):\\n                if s[start] in vowels:\\n                    count-=1\\n                start+=1\\n            end+=1\\n        return max_num\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']\\n\\n        start = 0\\n        end = 0\\n        n = len(s)\\n        max_num = 0\\n        count=0\\n\\n        while k >= (end-start) and end <n:\\n            if s[end] in vowels:\\n                count+=1\\n                max_num = max(max_num,count)\\n            if k==(end-start+1):\\n                if s[start] in vowels:\\n                    count-=1\\n                start+=1\\n            end+=1\\n        return max_num\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3728518,
                "title": "efficient-solution-using-sliding-window",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nWe are given a string s and an integer k. We need to find the maximum number of vowels in any substring of length k in the given string. We will use the sliding window technique to solve this problem. The sliding window is like a moving frame of fixed length (k) that slides through the string.\\n# Approach\\n1. Initialize a string vowel containing all the vowel characters.\\n1. Convert the input string s to a character array for easy access to individual characters.\\n1. Initialize variables max and count to keep track of the maximum count and current count of vowels, respectively.\\n1. Count the number of vowels in the first k characters of the string.\\n1. If k is greater than or equal to the length of the string, return the current count since the whole string is considered a substring.\\n1. Initialize two pointers, start and end, to represent the start and end indices of the sliding window.\\n1. Slide the window by incrementing start and end one step at a time.\\n1. Decrement the count if the character at the start of the window is a vowel and increment the count if the character at the end of the window is a vowel.\\n1. Update the maximum count whenever a new maximum is found.\\n1. Repeat steps 7-9 until the end of the string is reached.\\n1. Return the maximum count as the result.\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is $$O(n)$$, where n is the length of the input string. We slide the window through the string once, and the operations inside the loop take constant time.\\n\\n- Space complexity:\\nThe space complexity of your solution is $$O(n)$$, where n is the length of the input string s. This is because you are converting the string to a char array, which requires additional space to store the characters\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        // Define the string of vowels\\n        String vowel = \"aeiouAEIOU\";\\n\\n        // Convert the input string to a character array\\n        char[] word = s.toCharArray();\\n\\n        // Initialize variables to track maximum count and current count of vowels\\n        int max = 0;\\n        int count = 0;\\n\\n        // Count the vowels in the first k characters\\n        for (int i = 0; i < k; i++) {\\n            if (vowel.indexOf(word[i]) != -1) {\\n                count++;\\n            }\\n        }\\n\\n        // If k is greater than or equal to the length of the string, return the current count\\n        if (k >= word.length) {\\n            return count;\\n        }\\n\\n        // Initialize pointers for sliding window\\n        int start = 0;\\n        int end = k;\\n\\n        // Update the maximum count with the initial count\\n        max = Math.max(max, count);\\n\\n        // Slide the window and update the count of vowels\\n        while (end < word.length) {\\n            // Decrement count if the character at the start of the window is a vowel\\n            if (vowel.indexOf(word[start++]) != -1) {\\n                count--;\\n            }\\n\\n            // Increment count if the character at the end of the window is a vowel\\n            if (vowel.indexOf(word[end++]) != -1) {\\n                count++;\\n            }\\n\\n            // Update the maximum count\\n            max = Math.max(max, count);\\n        }\\n\\n        // Return the maximum count of vowels\\n        return max;\\n    }\\n}\\n```\\n```python []\\nclass Solution(object):\\n    def maxVowels(self, s, k):\\n        # Define the vowels\\n        vowel = \"aeiouAEIOU\"\\n\\n        # Convert the input string to a list of characters\\n        word = list(s)\\n\\n        # Initialize variables\\n        max_count = 0\\n        count = 0\\n\\n        # Iterate over the first k characters\\n        for i in range(k):\\n            # Check if the character is a vowel\\n            if word[i] in vowel:\\n                count += 1\\n\\n        # If k is greater than or equal to the length of the string, return the current count\\n        if k >= len(word):\\n            return count\\n\\n        # Set the start and end indices for the sliding window\\n        start = 0\\n        end = k\\n\\n        # Update the maximum count\\n        max_count = max(max_count, count)\\n\\n        # Slide the window through the remaining characters\\n        while end < len(word):\\n            # Check if the character at the start index is a vowel and decrement the count if necessary\\n            if word[start] in vowel:\\n                count -= 1\\n\\n            # Check if the character at the end index is a vowel and increment the count if necessary\\n            if word[end] in vowel:\\n                count += 1\\n\\n            # Update the maximum count\\n            max_count = max(max_count, count)\\n\\n            # Move the window by incrementing the start and end indices\\n            start += 1\\n            end += 1\\n\\n        # Return the maximum count\\n        return max_count\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        // Define the vowels\\n        string vowel = \"aeiouAEIOU\";\\n\\n        // Convert the input string to a character array\\n        const char* word = s.c_str();\\n\\n        // Initialize variables\\n        int max_count = 0;\\n        int count = 0;\\n\\n        // Iterate over the first k characters\\n        for (int i = 0; i < k; i++) {\\n            // Check if the character is a vowel\\n            if (vowel.find(word[i]) != string::npos) {\\n                count++;\\n            }\\n        }\\n\\n        // If k is greater than or equal to the length of the string, return the current count\\n        if (k >= s.length()) {\\n            return count;\\n        }\\n\\n        // Set the start and end indices for the sliding window\\n        int start = 0;\\n        int end = k;\\n\\n        // Update the maximum count\\n        max_count = max(max_count, count);\\n\\n        // Slide the window through the remaining characters\\n        while (end < s.length()) {\\n            // Check if the character at the start index is a vowel and decrement the count if necessary\\n            if (vowel.find(word[start]) != string::npos) {\\n                count--;\\n            }\\n\\n            // Check if the character at the end index is a vowel and increment the count if necessary\\n            if (vowel.find(word[end]) != string::npos) {\\n                count++;\\n            }\\n\\n            // Update the maximum count\\n            max_count = max(max_count, count);\\n\\n            // Move the window by incrementing the start and end indices\\n            start++;\\n            end++;\\n        }\\n\\n        // Return the maximum count\\n        return max_count;\\n    }\\n};\\n\\n```\\n## ***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/e1bd93a0-9cc1-4654-8db2-43bf4fef8ea5_1688664287.6243436.jpeg)\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "String",
                    "Sliding Window"
                ],
                "code": "```java []\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        // Define the string of vowels\\n        String vowel = \"aeiouAEIOU\";\\n\\n        // Convert the input string to a character array\\n        char[] word = s.toCharArray();\\n\\n        // Initialize variables to track maximum count and current count of vowels\\n        int max = 0;\\n        int count = 0;\\n\\n        // Count the vowels in the first k characters\\n        for (int i = 0; i < k; i++) {\\n            if (vowel.indexOf(word[i]) != -1) {\\n                count++;\\n            }\\n        }\\n\\n        // If k is greater than or equal to the length of the string, return the current count\\n        if (k >= word.length) {\\n            return count;\\n        }\\n\\n        // Initialize pointers for sliding window\\n        int start = 0;\\n        int end = k;\\n\\n        // Update the maximum count with the initial count\\n        max = Math.max(max, count);\\n\\n        // Slide the window and update the count of vowels\\n        while (end < word.length) {\\n            // Decrement count if the character at the start of the window is a vowel\\n            if (vowel.indexOf(word[start++]) != -1) {\\n                count--;\\n            }\\n\\n            // Increment count if the character at the end of the window is a vowel\\n            if (vowel.indexOf(word[end++]) != -1) {\\n                count++;\\n            }\\n\\n            // Update the maximum count\\n            max = Math.max(max, count);\\n        }\\n\\n        // Return the maximum count of vowels\\n        return max;\\n    }\\n}\\n```\n```python []\\nclass Solution(object):\\n    def maxVowels(self, s, k):\\n        # Define the vowels\\n        vowel = \"aeiouAEIOU\"\\n\\n        # Convert the input string to a list of characters\\n        word = list(s)\\n\\n        # Initialize variables\\n        max_count = 0\\n        count = 0\\n\\n        # Iterate over the first k characters\\n        for i in range(k):\\n            # Check if the character is a vowel\\n            if word[i] in vowel:\\n                count += 1\\n\\n        # If k is greater than or equal to the length of the string, return the current count\\n        if k >= len(word):\\n            return count\\n\\n        # Set the start and end indices for the sliding window\\n        start = 0\\n        end = k\\n\\n        # Update the maximum count\\n        max_count = max(max_count, count)\\n\\n        # Slide the window through the remaining characters\\n        while end < len(word):\\n            # Check if the character at the start index is a vowel and decrement the count if necessary\\n            if word[start] in vowel:\\n                count -= 1\\n\\n            # Check if the character at the end index is a vowel and increment the count if necessary\\n            if word[end] in vowel:\\n                count += 1\\n\\n            # Update the maximum count\\n            max_count = max(max_count, count)\\n\\n            # Move the window by incrementing the start and end indices\\n            start += 1\\n            end += 1\\n\\n        # Return the maximum count\\n        return max_count\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        // Define the vowels\\n        string vowel = \"aeiouAEIOU\";\\n\\n        // Convert the input string to a character array\\n        const char* word = s.c_str();\\n\\n        // Initialize variables\\n        int max_count = 0;\\n        int count = 0;\\n\\n        // Iterate over the first k characters\\n        for (int i = 0; i < k; i++) {\\n            // Check if the character is a vowel\\n            if (vowel.find(word[i]) != string::npos) {\\n                count++;\\n            }\\n        }\\n\\n        // If k is greater than or equal to the length of the string, return the current count\\n        if (k >= s.length()) {\\n            return count;\\n        }\\n\\n        // Set the start and end indices for the sliding window\\n        int start = 0;\\n        int end = k;\\n\\n        // Update the maximum count\\n        max_count = max(max_count, count);\\n\\n        // Slide the window through the remaining characters\\n        while (end < s.length()) {\\n            // Check if the character at the start index is a vowel and decrement the count if necessary\\n            if (vowel.find(word[start]) != string::npos) {\\n                count--;\\n            }\\n\\n            // Check if the character at the end index is a vowel and increment the count if necessary\\n            if (vowel.find(word[end]) != string::npos) {\\n                count++;\\n            }\\n\\n            // Update the maximum count\\n            max_count = max(max_count, count);\\n\\n            // Move the window by incrementing the start and end indices\\n            start++;\\n            end++;\\n        }\\n\\n        // Return the maximum count\\n        return max_count;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3685518,
                "title": "go-solution-great-explanation-and-full-description",
                "content": "# Intuition\\nThe problem asks for the maximum number of vowels that can be found in a substring of the given string `s` of length `k`. This can be solved by using a sliding window approach where we slide a window of length `k` through the string and keep track of the number of vowels in the window.\\n\\n# Approach\\nWe initialize two pointers `l` and `r` to `0`, a variable `sumVow` to keep track of the number of vowels in the current window, and a variable `result` to store the maximum number of vowels found so far.\\n\\nWe then start a loop where we move the right pointer `r` through the string. If the current character is a vowel and `sumVow` is less than `k`, we increment `sumVow`.\\n\\nOnce the window size exceeds `k`, we move the left pointer `l` to the right. If the character at `l` is a vowel, we decrement `sumVow`.\\n\\nAfter each iteration, we update `result` to be the maximum of `result` and `sumVow`.\\n\\nFinally, we return `result`, which is the maximum number of vowels that can be found in a substring of length `k`.\\n\\n# Complexity\\n- Time complexity: The time complexity for this algorithm is O(n), where `n` is the length of `s`. This is because we perform a single pass over the `s`.\\n\\n- Space complexity: The space complexity is O(1), as we use a constant amount of space to store the pointers, `sumVow`, and `result`.\\n\\n# Code\\n```\\n\\nfunc maxVowels(s string, k int) int {\\n\\tvar r, l, sumVow, result int\\n\\tfor ; r < len(s); r++ {\\n\\t\\tif isVowel(s[r]) && sumVow < k {\\n\\t\\t\\tsumVow++\\n\\t\\t}\\n\\t\\tfor r-l >= k {\\n\\t\\t\\tif isVowel(s[l]) {\\n\\t\\t\\t\\tsumVow--\\n\\t\\t\\t}\\n\\t\\t\\tl++\\n\\t\\t}\\n\\t\\tresult = max(result, sumVow)\\n\\t}\\n\\treturn result\\n}\\n\\nfunc max(x, y int) int {\\n\\tif x > y {\\n\\t\\treturn x\\n\\t}\\n\\treturn y\\n}\\n\\nfunc isVowel(ch byte) bool {\\n\\tswitch ch {\\n\\tcase \\'a\\':\\n\\t\\treturn true\\n\\tcase \\'e\\':\\n\\t\\treturn true\\n\\tcase \\'i\\':\\n\\t\\treturn true\\n\\tcase \\'o\\':\\n\\t\\treturn true\\n\\tcase \\'u\\':\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\n\\nfunc maxVowels(s string, k int) int {\\n\\tvar r, l, sumVow, result int\\n\\tfor ; r < len(s); r++ {\\n\\t\\tif isVowel(s[r]) && sumVow < k {\\n\\t\\t\\tsumVow++\\n\\t\\t}\\n\\t\\tfor r-l >= k {\\n\\t\\t\\tif isVowel(s[l]) {\\n\\t\\t\\t\\tsumVow--\\n\\t\\t\\t}\\n\\t\\t\\tl++\\n\\t\\t}\\n\\t\\tresult = max(result, sumVow)\\n\\t}\\n\\treturn result\\n}\\n\\nfunc max(x, y int) int {\\n\\tif x > y {\\n\\t\\treturn x\\n\\t}\\n\\treturn y\\n}\\n\\nfunc isVowel(ch byte) bool {\\n\\tswitch ch {\\n\\tcase \\'a\\':\\n\\t\\treturn true\\n\\tcase \\'e\\':\\n\\t\\treturn true\\n\\tcase \\'i\\':\\n\\t\\treturn true\\n\\tcase \\'o\\':\\n\\t\\treturn true\\n\\tcase \\'u\\':\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3610614,
                "title": "easy-implementation-of-sliding-window-algorithm",
                "content": "# Approach\\nCalculate the vowelCount in the first window - substring(0, k)\\nOn each iteration - decrement vowelCount if left window char is vowel and incremenet vowelCount if rightWindow char is vowel\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\nConstant space complexity - hashset with size 5 to store all the vowels and two variables for storing max vowelCount value and current vowelCount value. Constant space complexity can be considered as - $$O(1)$$\\n# Code\\n```\\nclass Solution {\\n\\n    private val vowels = hashSetOf(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\')\\n\\n        fun maxVowels(string: String, count: Int): Int {\\n        var max = string.substring(0, count).count { vowels.contains(it) }\\n        var current = max\\n        for (i in 1 .. string.lastIndex.minus(count - 1)) {\\n            if (string[i - 1] in vowels) {\\n                current--\\n            }\\n            if (string[i + count - 1] in vowels) {\\n                current++\\n            }\\n            if (current > max) {\\n                max = current\\n            }\\n        }\\n        return max\\n    }\\n\\n\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n\\n    private val vowels = hashSetOf(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\')\\n\\n        fun maxVowels(string: String, count: Int): Int {\\n        var max = string.substring(0, count).count { vowels.contains(it) }\\n        var current = max\\n        for (i in 1 .. string.lastIndex.minus(count - 1)) {\\n            if (string[i - 1] in vowels) {\\n                current--\\n            }\\n            if (string[i + count - 1] in vowels) {\\n                current++\\n            }\\n            if (current > max) {\\n                max = current\\n            }\\n        }\\n        return max\\n    }\\n\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3561182,
                "title": "99-87-beats-java-sliding-window",
                "content": "# Approach\\nSliding Window\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n   \\n     public int maxVowels(String s, int k) {\\n        \\n        byte vowel[]=new byte[\\'z\\'+1];\\n        vowel[\\'a\\']=1;\\n        vowel[\\'e\\']=1;\\n        vowel[\\'i\\']=1;\\n        vowel[\\'o\\']=1;\\n        vowel[\\'u\\']=1;\\n\\n\\n        char c[]=s.toCharArray();\\n        int count=0;\\n        int l=s.length();\\n        for(int i=0;i<k;i++)\\n        {\\n            \\n            count+=vowel[c[i]];\\n        }\\n        int res=count;\\n        for(int i=k;i<l;i++)\\n        {\\n            int p=vowel[c[i-k]];\\n            int q=vowel[c[i]];\\n            count+=q-p;\\n    \\n            if(res<count)\\n            {\\n                res=count;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n   \\n     public int maxVowels(String s, int k) {\\n        \\n        byte vowel[]=new byte[\\'z\\'+1];\\n        vowel[\\'a\\']=1;\\n        vowel[\\'e\\']=1;\\n        vowel[\\'i\\']=1;\\n        vowel[\\'o\\']=1;\\n        vowel[\\'u\\']=1;\\n\\n\\n        char c[]=s.toCharArray();\\n        int count=0;\\n        int l=s.length();\\n        for(int i=0;i<k;i++)\\n        {\\n            \\n            count+=vowel[c[i]];\\n        }\\n        int res=count;\\n        for(int i=k;i<l;i++)\\n        {\\n            int p=vowel[c[i-k]];\\n            int q=vowel[c[i]];\\n            count+=q-p;\\n    \\n            if(res<count)\\n            {\\n                res=count;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3524811,
                "title": "1456-maximum-number-of-vowels-in-a-substring-of-given-length",
                "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, cnt = 0, n = s.size(), i = 0;\\n        unordered_set<char> v = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n\\n        for(int j=0; j<n; j++) {\\n            if(v.find(s[j]) != v.end()) cnt++;\\n            if(j - i + 1 == k) {\\n                ans = max(ans, cnt);\\n                if(v.find(s[i]) != v.end()) cnt--;\\n                i++;\\n            }\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, cnt = 0, n = s.size(), i = 0;\\n        unordered_set<char> v = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'}",
                "codeTag": "Java"
            },
            {
                "id": 3494953,
                "title": "c-easy-explanation-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\nTo solve this We use curr variable which determines the window of Size K\\n\\nCheck each upcoming character whether it is a vowel or not and update the curr count accordingly\\n\\nIf the window size == k+1 then increment the i pointer , if character at start pointer is a vowel then decrease the curr count\\n\\nFinally store max ans in each window of size k\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int vowels[26] = {1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int maxi=0;\\n\\n       for(int i=0, curr=0;i<n;i++)\\n       {\\n           curr+=vowels[s[i]-\\'a\\'];\\n           if(i>=k)\\n            curr-=vowels[s[i-k]-\\'a\\'];\\n\\n            maxi=max(maxi,curr);\\n       }\\n       return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int vowels[26] = {1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int maxi=0;\\n\\n       for(int i=0, curr=0;i<n;i++)\\n       {\\n           curr+=vowels[s[i]-\\'a\\'];\\n           if(i>=k)\\n            curr-=vowels[s[i-k]-\\'a\\'];\\n\\n            maxi=max(maxi,curr);\\n       }\\n       return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3493619,
                "title": "was-beating-100-java-solutions-4-ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSolution must be simple and straightforward to avoid any inefficiency.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nchar -> isVowel mapping using simple array.\\nboolean type [from previous solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3493014/was-beating-100-java-6ms-runtime) replaced by byte to reduce branching operations.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n\\npublic int maxVowels(String s, int k) {\\n\\tbyte[] isVowel = new byte[\\'z\\' + 1];\\n\\t\\tisVowel[\\'a\\'] = 1;\\n\\t\\tisVowel[\\'e\\'] = 1;\\n\\t\\tisVowel[\\'i\\'] = 1;\\n\\t\\tisVowel[\\'o\\'] = 1;\\n\\t\\tisVowel[\\'u\\'] = 1;\\n\\n\\tchar[] chars = s.toCharArray();\\n\\tint r = 0, max = 0;\\n\\twhile (r < k)\\n\\t\\tmax += isVowel[chars[r++]];\\n\\n\\tint l = 0, n = max;\\n\\twhile (r < chars.length) {\\n\\t\\tn += isVowel[chars[r++]] - isVowel[chars[l++]];\\n\\t\\tif (n > max)\\n\\t\\t\\tmax = n;\\n\\t}\\n\\treturn max;\\n}\\n\\n}\\n```\\n[Submission Detail](https://leetcode.com/submissions/detail/945880006)\\n\\nP.S. Upgraded to the [3-ms solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3518754/beats-100-java-solutions-simple-3-ms-runtime).",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n\\npublic int maxVowels(String s, int k) {\\n\\tbyte[] isVowel = new byte[\\'z\\' + 1];\\n\\t\\tisVowel[\\'a\\'] = 1;\\n\\t\\tisVowel[\\'e\\'] = 1;\\n\\t\\tisVowel[\\'i\\'] = 1;\\n\\t\\tisVowel[\\'o\\'] = 1;\\n\\t\\tisVowel[\\'u\\'] = 1;\\n\\n\\tchar[] chars = s.toCharArray();\\n\\tint r = 0, max = 0;\\n\\twhile (r < k)\\n\\t\\tmax += isVowel[chars[r++]];\\n\\n\\tint l = 0, n = max;\\n\\twhile (r < chars.length) {\\n\\t\\tn += isVowel[chars[r++]] - isVowel[chars[l++]];\\n\\t\\tif (n > max)\\n\\t\\t\\tmax = n;\\n\\t}\\n\\treturn max;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490829,
                "title": "solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n___\\n    Sliding window:\\n    -\\n    \\uD83C\\uDF88For a window of length k, we are keeping track of count of vowels in local variable.\\n    \\uD83C\\uDF88For each window, we are calculating the max value of vowel count, and returning the answer at end.\\n___\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n     O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowel = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int end = 0;\\n        int v = 0;\\n        while(end < k) {\\n            if(vowel.count(s[end]) > 0) ++v;\\n            ++end;\\n        }\\n        \\n        int res = v;\\n        // sliding widnow invariant: [end -k, k) is the window and it has v vowels\\n        while(end < s.size()) {\\n            if(vowel.count(s[end - k]) > 0) --v;\\n            if(vowel.count(s[end]) > 0) {\\n                ++v;\\n                res = max(res, v);\\n            }\\n            ++end;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowel = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int end = 0;\\n        int v = 0;\\n        while(end < k) {\\n            if(vowel.count(s[end]) > 0) ++v;\\n            ++end;\\n        }\\n        \\n        int res = v;\\n        // sliding widnow invariant: [end -k, k) is the window and it has v vowels\\n        while(end < s.size()) {\\n            if(vowel.count(s[end - k]) > 0) --v;\\n            if(vowel.count(s[end]) > 0) {\\n                ++v;\\n                res = max(res, v);\\n            }\\n            ++end;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490735,
                "title": "easy-solution-sliding-window-approach-c-o-n",
                "content": "# Intuition\\nSince, we are given with a fixed value of k so we can use sliding window here. What sliding window actually is?\\nWe take 2 pointer whose difference should be equal to K. when that is the case then we cal the maximum and increment the previous pointer. \\n\\n# Approach\\nHere I have taken 2 pointer i and j. Both are initailized to 0.\\nAfter, that I ran a for loop for(j->n) (which is the size of the string). \\n\\nEach time when the char is equal to a vowel then I increment the value of count by one.\\n\\nNow when the difference of j-i+1 becames equal to k, at that moment I cal the maximum of the two counters which I have used \\nmaxi = max(maxi, count); \\nI also need to increase the value of i to check for entire array. Along with that count-- if i was at a vowel.two\\n\\n# Complexity\\n- Time complexity:\\nThis Algorithm has Time Complexity if O(N).\\n\\n- Space complexity:\\nConstant Space Complexity O(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool vowel(char a){\\n        if(a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\')\\n        return 1;\\n        else return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n        int maxi = 0;\\n        int count = 0;\\n        int i = 0;\\n        int n = s.size();\\n        for(int j = 0; j<n; j++){\\n            if(vowel(s[j])) count++;\\n            if(j-i+1 == k){\\n                maxi = max(maxi, count);\\n                if(vowel(s[i])) count--;\\n                i++;\\n            } \\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool vowel(char a){\\n        if(a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\')\\n        return 1;\\n        else return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n        int maxi = 0;\\n        int count = 0;\\n        int i = 0;\\n        int n = s.size();\\n        for(int j = 0; j<n; j++){\\n            if(vowel(s[j])) count++;\\n            if(j-i+1 == k){\\n                maxi = max(maxi, count);\\n                if(vowel(s[i])) count--;\\n                i++;\\n            } \\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490306,
                "title": "very-easy-to-understand-beginner-friendly-code-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGeneric sliding Window problem\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst created a window of size and k and moved the window until it reaches the end of the string. Check the next character if it is a vowel, if it is a vowel increment the counter of the vowels and now to maintain the size of the window, remove one element from the last. \\nCheck if it is a vowel, if it is then decrement the counter.\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char ch){\\n        vector<char> vow = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int j = 0; j< vow.size(); j++){\\n            if(ch == vow[j]) return true;\\n        }\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n    \\n        int cnt = 0;\\n        for(int i = 0; i< k; i++){\\n            if(check(s[i])) cnt++;\\n        }\\n        int ans = cnt;\\n        int j = k, i = 0;\\n        while(j < s.length()){\\n            if(check(s[j])){\\n                cnt++;\\n            }\\n            if(check(s[i])){\\n                cnt--;\\n            }\\n            ans = max(cnt, ans);\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(char ch){\\n        vector<char> vow = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(int j = 0; j< vow.size(); j++){\\n            if(ch == vow[j]) return true;\\n        }\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n    \\n        int cnt = 0;\\n        for(int i = 0; i< k; i++){\\n            if(check(s[i])) cnt++;\\n        }\\n        int ans = cnt;\\n        int j = k, i = 0;\\n        while(j < s.length()){\\n            if(check(s[j])){\\n                cnt++;\\n            }\\n            if(check(s[i])){\\n                cnt--;\\n            }\\n            ans = max(cnt, ans);\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490296,
                "title": "fast-readable-c-solution-and-a-faster-bitmask-solution",
                "content": "# Intuition\\nThe intuition to solving this problem is to use a sliding window of size k. Count the number of vowels in the initial window, then subtract and vowels that fall outside of the window each iteration and add any new vowels that come into the window.\\n\\n# Approach\\nThere are two ways I solved this problem. One is more simple to think about and one is faster. The more simple to think about version is to create a hash set that contains all vowel letters. Each iteration check if `s[i]` is in the hash set, if it is add it to the running total. On each iteration after the first `k` iterations check `s[i-k]` to see if it is in the set. If it is in the set subtract `1` from the running total.\\nThe improved version to this is the same approach, but to use a bitmask to check if the current `char` is a vowel instead of looking it up in the hash set. This improves runtime marginally (it has the same time complexity) since computers are much better at performing bitwise operations.\\n\\n# Complexity\\n- Time complexity:\\n*O(n)*\\n\\n- Space complexity:\\n*O(1)*\\n\\n# Code\\n## Hashset solution\\n```cpp\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int max_total = 0;\\n        int running_total = 0;\\n        for (int i = 0; i < s.size(); ++i) {\\n            running_total += vowels.find(s[i]) != vowels.end() ? 1 : 0;\\n            if (i - k >= 0) {\\n                running_total -= vowels.find(s[i - k]) != vowels.end() ? 1 : 0;\\n            }\\n            max_total = max(max_total, running_total);\\n        }\\n        return max_total;\\n    }\\n};\\n```\\n\\n## Bitwise solution\\n```cpp\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        auto is_vowel = [](char c) {\\n            static const uint32_t b1 = 0x208222;\\n            static const uint8_t b2 = 0x1f;\\n            static const uint8_t b3 = 0x1;\\n            return (b1 >> (c & b2)) & b3; \\n        };\\n        int running_total = 0;\\n        int max_total = 0;\\n        for(int i = 0, j = i - k; i < s.size(); ++i, ++j){\\n            running_total += is_vowel(s[i]);\\n            if (i >= k) {\\n                running_total -= is_vowel(s[j]);\\n            }\\n            max_total = max(max_total, running_total); \\n        }\\n\\n        return max_total;\\n    };\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Bitmask"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowels = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int max_total = 0;\\n        int running_total = 0;\\n        for (int i = 0; i < s.size(); ++i) {\\n            running_total += vowels.find(s[i]) != vowels.end() ? 1 : 0;\\n            if (i - k >= 0) {\\n                running_total -= vowels.find(s[i - k]) != vowels.end() ? 1 : 0;\\n            }\\n            max_total = max(max_total, running_total);\\n        }\\n        return max_total;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        auto is_vowel = [](char c) {\\n            static const uint32_t b1 = 0x208222;\\n            static const uint8_t b2 = 0x1f;\\n            static const uint8_t b3 = 0x1;\\n            return (b1 >> (c & b2)) & b3; \\n        };\\n        int running_total = 0;\\n        int max_total = 0;\\n        for(int i = 0, j = i - k; i < s.size(); ++i, ++j){\\n            running_total += is_vowel(s[i]);\\n            if (i >= k) {\\n                running_total -= is_vowel(s[j]);\\n            }\\n            max_total = max(max_total, running_total); \\n        }\\n\\n        return max_total;\\n    };\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490142,
                "title": "maximum-number-of-vowel-in-a-substring-of-given-length-using-window-sliding-in-tc-o-n-sc-o-1",
                "content": "# Intuition\\nTaking Length k and by sliding window updating max count of vowel in that length of substring.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach:\\nSliding Window\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n//fuction checks if that char present in substring is vowel or not.\\n    int isvowel(char a)\\n        {\\n           return (a==\\'a\\' || a==\\'e\\' || a==\\'i\\' || a==\\'o\\' || a==\\'u\\')?1:0;\\n        }\\n    int maxVowels(string s, int k) {\\n        //sliding window \\n        int left=0,right=0,result=0,window=0;\\n        //checking in lenght of k substring\\n        for(;right<k;right++)\\n        {\\n            window+=isvowel(s[right]);\\n        }\\n\\n        result=window;\\n\\n        //checking untill we reached last of the substring of given length\\n        while(right<s.length())\\n        {\\n            //in loop we need to increment left and right pointer.\\n            //removing left s[0] and adding s[0] from right to check next substring formed.\\n            window-=isvowel(s[left++]);\\n            window+=isvowel(s[right++]);\\n            //storing maximum count of vowel in our result till we get.\\n            result=max(result,window);\\n        }\\n        return result;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n//fuction checks if that char present in substring is vowel or not.\\n    int isvowel(char a)\\n        {\\n           return (a==\\'a\\' || a==\\'e\\' || a==\\'i\\' || a==\\'o\\' || a==\\'u\\')?1:0;\\n        }\\n    int maxVowels(string s, int k) {\\n        //sliding window \\n        int left=0,right=0,result=0,window=0;\\n        //checking in lenght of k substring\\n        for(;right<k;right++)\\n        {\\n            window+=isvowel(s[right]);\\n        }\\n\\n        result=window;\\n\\n        //checking untill we reached last of the substring of given length\\n        while(right<s.length())\\n        {\\n            //in loop we need to increment left and right pointer.\\n            //removing left s[0] and adding s[0] from right to check next substring formed.\\n            window-=isvowel(s[left++]);\\n            window+=isvowel(s[right++]);\\n            //storing maximum count of vowel in our result till we get.\\n            result=max(result,window);\\n        }\\n        return result;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489843,
                "title": "c-beginner-friendly-o-n-easy-to-understand-check-the-previous-and-the-next-element",
                "content": "\\n# Approach\\n- Create a sub string of length K from the 0th index and count the number of vowels in it.\\n- After that just check traverse the whole string and add elements one by one while checking if they are vowels.\\n- Delete the count of the previous element if it was a vowel by using a pointer.\\n- Return the max count.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n\\n\\n        int count=0;\\n\\n        string s1=s.substr(0,k);\\n        for(char x:s1){\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\'|| x==\\'o\\'|| x==\\'u\\'){\\n                count++;       \\n            }\\n        }\\n        if(count==k){\\n            return k;\\n        }\\n\\n        int maxcount=count;\\n        int j=0;\\n\\n        for(int i=k;i<s.size();i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\'|| s[i]==\\'o\\'|| s[i]==\\'u\\'){\\n                count++;       \\n            }\\n            if(s[j]==\\'a\\' || s[j]==\\'e\\' || s[j]==\\'i\\'|| s[j]==\\'o\\'|| s[j]==\\'u\\'){\\n                count--;       \\n            }\\n            j++;\\n            maxcount=max(maxcount,count);\\n            if(maxcount==k){\\n                return maxcount;\\n            }\\n        }\\n\\n        return maxcount;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n\\n\\n        int count=0;\\n\\n        string s1=s.substr(0,k);\\n        for(char x:s1){\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\'|| x==\\'o\\'|| x==\\'u\\'){\\n                count++;       \\n            }\\n        }\\n        if(count==k){\\n            return k;\\n        }\\n\\n        int maxcount=count;\\n        int j=0;\\n\\n        for(int i=k;i<s.size();i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\'|| s[i]==\\'o\\'|| s[i]==\\'u\\'){\\n                count++;       \\n            }\\n            if(s[j]==\\'a\\' || s[j]==\\'e\\' || s[j]==\\'i\\'|| s[j]==\\'o\\'|| s[j]==\\'u\\'){\\n                count--;       \\n            }\\n            j++;\\n            maxcount=max(maxcount,count);\\n            if(maxcount==k){\\n                return maxcount;\\n            }\\n        }\\n\\n        return maxcount;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489796,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int cnt = 0;\\n        for (int i = 0; i < k; i++) cnt += vowels.count(s[i]);\\n        int ans = cnt;\\n        for (int i = k; i < s.length(); i++) {\\n            cnt += vowels.count(s[i]) - vowels.count(s[i - k]);\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        int cnt = 0;\\n        for (int i = 0; i < k; i++) cnt += vowels.count(s[i]);\\n        int ans = cnt;\\n        for (int i = k; i < s.length(); i++) {\\n            cnt += vowels.count(s[i]) - vowels.count(s[i - k]);\\n            ans = max(ans, cnt);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489664,
                "title": "java-solution-using-sliding-window-with-comments",
                "content": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        \\n        int ans=0,cnt=0;\\n        \\n        for(int i=0;i<k;i++){   // first  count vowel in first window (size of window will be of k)\\n            char ch = s.charAt(i);\\n            if(isVowel(ch))cnt++;\\n        }\\n        ans = cnt;\\n        \\n        for(int i=k;i<s.length();i++){\\n            char currentChar = s.charAt(i); \\n            char previousChar = s.charAt(i-k);\\n            if(isVowel(currentChar))cnt++;   // if our current character is vowel then increment cnt\\n            if(isVowel(previousChar))cnt--;  // if our previous character is  vowel then decrement cnt because we loose our one vowel\\n            ans = Math.max(ans,cnt);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n    public boolean isVowel(Character c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        \\n        int ans=0,cnt=0;\\n        \\n        for(int i=0;i<k;i++){   // first  count vowel in first window (size of window will be of k)\\n            char ch = s.charAt(i);\\n            if(isVowel(ch))cnt++;\\n        }\\n        ans = cnt;\\n        \\n        for(int i=k;i<s.length();i++){\\n            char currentChar = s.charAt(i); \\n            char previousChar = s.charAt(i-k);\\n            if(isVowel(currentChar))cnt++;   // if our current character is vowel then increment cnt\\n            if(isVowel(previousChar))cnt--;  // if our previous character is  vowel then decrement cnt because we loose our one vowel\\n            ans = Math.max(ans,cnt);\\n        }\\n        \\n        return ans;\\n        \\n    }\\n    public boolean isVowel(Character c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\'){\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489284,
                "title": "solving-using-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        res=0\\n        fin_res=0\\n        for i in range(len(s)):\\n            if(s[i] in \\'aeiou\\'):res+=1\\n            if(i-k>=0):\\n                if(s[i-k] in \\'aeiou\\'):\\n                    res-=1\\n            fin_res=max(res,fin_res)\\n        return fin_res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        res=0\\n        fin_res=0\\n        for i in range(len(s)):\\n            if(s[i] in \\'aeiou\\'):res+=1\\n            if(i-k>=0):\\n                if(s[i-k] in \\'aeiou\\'):\\n                    res-=1\\n            fin_res=max(res,fin_res)\\n        return fin_res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489268,
                "title": "java-solution-sliding-window",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int vowelsOfPreviousSubstring = 0;\\n\\n        for(int i = 0; i < k; i++) {\\n            if(isVowel(s.charAt(i))) {\\n                maxVowels++;\\n            }\\n        }\\n\\n        vowelsOfPreviousSubstring = maxVowels;\\n\\n        for(int start = 1, end = k; end < s.length(); start++, end++) {\\n            int vowelsInCurrentSubstring = vowelsOfPreviousSubstring;\\n\\n            if(isVowel(s.charAt(start-1))) {\\n                vowelsInCurrentSubstring--;\\n            }\\n\\n            if(isVowel(s.charAt(end))) {\\n                vowelsInCurrentSubstring++;\\n            }\\n\\n            vowelsOfPreviousSubstring = vowelsInCurrentSubstring;\\n            maxVowels = Math.max(maxVowels, vowelsInCurrentSubstring);\\n        }\\n\\n        return maxVowels;\\n    }\\n\\n    private boolean isVowel(char ch) {\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int maxVowels = 0;\\n        int vowelsOfPreviousSubstring = 0;\\n\\n        for(int i = 0; i < k; i++) {\\n            if(isVowel(s.charAt(i))) {\\n                maxVowels++;\\n            }\\n        }\\n\\n        vowelsOfPreviousSubstring = maxVowels;\\n\\n        for(int start = 1, end = k; end < s.length(); start++, end++) {\\n            int vowelsInCurrentSubstring = vowelsOfPreviousSubstring;\\n\\n            if(isVowel(s.charAt(start-1))) {\\n                vowelsInCurrentSubstring--;\\n            }\\n\\n            if(isVowel(s.charAt(end))) {\\n                vowelsInCurrentSubstring++;\\n            }\\n\\n            vowelsOfPreviousSubstring = vowelsInCurrentSubstring;\\n            maxVowels = Math.max(maxVowels, vowelsInCurrentSubstring);\\n        }\\n\\n        return maxVowels;\\n    }\\n\\n    private boolean isVowel(char ch) {\\n        if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489009,
                "title": "simple-and-easy-python-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowel, count = 0, 0\\n        for i in range(k):\\n            c = s[i]\\n            if c in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count += 1\\n        if count > vowel:\\n            vowel = count\\n        for i in range(k, len(s)):\\n            c = s[i]\\n            ch = s[i-k]\\n            if c in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count += 1\\n            if ch in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count -= 1\\n            if count >= k:\\n                return k\\n            if count > vowel:\\n                vowel = count\\n        return vowel\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowel, count = 0, 0\\n        for i in range(k):\\n            c = s[i]\\n            if c in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count += 1\\n        if count > vowel:\\n            vowel = count\\n        for i in range(k, len(s)):\\n            c = s[i]\\n            ch = s[i-k]\\n            if c in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count += 1\\n            if ch in [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']:\\n                count -= 1\\n            if count >= k:\\n                return k\\n            if count > vowel:\\n                vowel = count\\n        return vowel\\n\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488946,
                "title": "sliding-window-solution-tc-o-n-sc-o-1",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, we can use a sliding window approach.\\nWe should consider all possible substrings of length $$k$$ of $$s$$ one by one. We can slide a window of size $$k$$ through the string and at each position, count the number of vowels in the window. We can then keep track of the maximum count of vowels seen so far.\\n# Complexity\\n- Time complexity: O(n), where n is the length of $$s$$.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: constant or O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    bool isVowel(char c) {\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.length();\\n        int count = 0, maxCount = 0;\\n\\n        // count the number of vowels in the first window of length k\\n        for (int i = 0; i < k; i++)\\n            if (isVowel(s[i])) count++;\\n        maxCount = count;\\n\\n        // slide the window through the string and count the number of vowels in each window\\n        for (int i = k; i < n; i++) {\\n            if (isVowel(s[i])) count++;\\n            if (isVowel(s[i-k])) count--;\\n            maxCount = max(maxCount, count);\\n        }\\n        \\n        return maxCount;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n\\n    bool isVowel(char c) {\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.length();\\n        int count = 0, maxCount = 0;\\n\\n        // count the number of vowels in the first window of length k\\n        for (int i = 0; i < k; i++)\\n            if (isVowel(s[i])) count++;\\n        maxCount = count;\\n\\n        // slide the window through the string and count the number of vowels in each window\\n        for (int i = k; i < n; i++) {\\n            if (isVowel(s[i])) count++;\\n            if (isVowel(s[i-k])) count--;\\n            maxCount = max(maxCount, count);\\n        }\\n        \\n        return maxCount;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488937,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) \\n    {\\n        int ans=0;\\n        int count=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(check(s[i]))count++;\\n        }\\n        ans=count;\\n        int i=0,j=k;\\n        while(j<s.size())\\n        {\\n            if(check(s[j]))count++;\\n            if(check(s[i]))count--;\\n            ans=max(ans,count);\\n            j++;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488934,
                "title": "easy-to-understand-solution",
                "content": "```\\nconst VOWELS = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let max = 0;\\n    let counter = 0;\\n\\n    // go through the string, but the last index should be s.length - k, \\n    // as i represents the start index of the substring with length k\"\\n    for (let i = 0; i < s.length - k + 1; i++) {\\n\\n        // if it\\'s the start of the string, then we need to define our counter for the first time\\n        // so we won\\'t need to calculate it over and over again later\\n        if (i === 0) {\\n            for (let j = 0; j < k; j++) {\\n                if (VOWELS.includes(s[j])){\\n                    counter++;\\n                }\\n            }\\n        // if it\\'s the rest of the string, then we just update the counter by analyzing \\n        // the removed first character of the string and the last added character\\n        } else {\\n            // if the removed first character was vowel then we decrease counter\\n            if (VOWELS.includes(s[i - 1])) {\\n                counter--;\\n            }\\n            // if the last added character is vowel then we increase counter\\n            if (VOWELS.includes(s[i + k - 1])) {\\n                counter++;\\n            }\\n        }\\n\\n        // if the counter is greater than the max, we update the max value\\n        if (counter > max) {\\n            max = counter; \\n        }\\n        // if the max value is equal to k, we return the result, as the max value cannot be greater than k.\\n        if (max === k) {\\n            return max;\\n        }\\n    }\\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst VOWELS = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let max = 0;\\n    let counter = 0;\\n\\n    // go through the string, but the last index should be s.length - k, \\n    // as i represents the start index of the substring with length k\"\\n    for (let i = 0; i < s.length - k + 1; i++) {\\n\\n        // if it\\'s the start of the string, then we need to define our counter for the first time\\n        // so we won\\'t need to calculate it over and over again later\\n        if (i === 0) {\\n            for (let j = 0; j < k; j++) {\\n                if (VOWELS.includes(s[j])){\\n                    counter++;\\n                }\\n            }\\n        // if it\\'s the rest of the string, then we just update the counter by analyzing \\n        // the removed first character of the string and the last added character\\n        } else {\\n            // if the removed first character was vowel then we decrease counter\\n            if (VOWELS.includes(s[i - 1])) {\\n                counter--;\\n            }\\n            // if the last added character is vowel then we increase counter\\n            if (VOWELS.includes(s[i + k - 1])) {\\n                counter++;\\n            }\\n        }\\n\\n        // if the counter is greater than the max, we update the max value\\n        if (counter > max) {\\n            max = counter; \\n        }\\n        // if the max value is equal to k, we return the result, as the max value cannot be greater than k.\\n        if (max === k) {\\n            return max;\\n        }\\n    }\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488816,
                "title": "python-solution-explained-in-detail-solved-using-sliding-window-concept",
                "content": "It is an excellent question to understand the concept of sliding window. Well, at very first try, I solved the question using naive approach that is count vowels for each substring of length `k` and update `maximum_vowel` counter, if a substring has more number of vowels than previously encountered substrings. But, soon after 1st submission I got an TLE error, because there was a `nested if` which made the time complexity of the solution: $$O(k*n)$$.\\nThus Optimization was required.\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSo, for next approach i thought of creating a window string of length `k`, and update it on each iteration, and update the `count_vowels` and `maximum_vowels` accordingly, but in this way also updating the window everytime adds overhead to the solution which again results in TLE\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThus, now to solve this, imagine a substring of the given string of length k from index 0, lets call it as sub_string1, thus `sub_string1 = s[i:k]`, we will count the number of vowels in it and store its value in `maximum_vowel`.\\nNow moving to next substring what we would do is actually include `s[k]` in the `sub_string1` and remove `s[0]` from `sub_string1`, thus we get our next substring and so on, but here we dont need to actually traverse throught the whole new substring to count the updated value of `count_vowels`.\\nInstead we can check that the character we are removing from substring to get the next substring is a vowel than we will decrease the `count_vowels` by 1 and if the character we are adding to get the next substring is a vowel we will increase the `count_vowels` by 1.\\nwe will keep on doing this until we reach the end of the given string.\\nNote: In the given code, the sub_string is denoted as window to make help visualize the concept of Sliding Window.\\n# Complexity\\n- Time complexity: $$O(n)$$ because we traverse the given string once.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nHere, space complexity will be of $$O(k)$$, which is the length of window, The `count_vowels` and `maximum_vowels` variables occupy constant space, so they do not contribute to the overall space complexity of the code.\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        count_vowels = 0\\n        maximum_vowels = 0\\n        window = [0,k]\\n        for i in window:\\n            if i in \"aeiou\":\\n                count_vowels+=1\\n        maximum_vowels = max(maximum_vowels,count_vowels)\\n        j = 0\\n        for i in range(k, len(s)):\\n            if s[i] in \"aeiou\":\\n                count_vowels+=1\\n            if s[j] in \"aeiou\":\\n                count_vowels-=1\\n            j+=1\\n\\n            maximum_vowels = max(maximum_vowels,count_vowels)\\n            \\n        return maximum_vowels\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        count_vowels = 0\\n        maximum_vowels = 0\\n        window = [0,k]\\n        for i in window:\\n            if i in \"aeiou\":\\n                count_vowels+=1\\n        maximum_vowels = max(maximum_vowels,count_vowels)\\n        j = 0\\n        for i in range(k, len(s)):\\n            if s[i] in \"aeiou\":\\n                count_vowels+=1\\n            if s[j] in \"aeiou\":\\n                count_vowels-=1\\n            j+=1\\n\\n            maximum_vowels = max(maximum_vowels,count_vowels)\\n            \\n        return maximum_vowels\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488733,
                "title": "sliding-window-and-naive-approach-in-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Sliding Window\\n        vowels = \\'aeiou\\'\\n        \\n        # Take the initial substring to make a note of initial number of vowels\\n        s1 = s[:k]\\n        currVowels, maxVowels = 0, 0\\n        for i in s1:\\n            if i in vowels:\\n                currVowels += 1\\n        # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n        if currVowels == k:\\n            return k\\n        # Else, keep track of the highest number of vowels            \\n        if currVowels > maxVowels:\\n            maxVowels = currVowels\\n        i = 1\\n\\n        # Increase the sliding window one by one until last k characters of the string\\n        while i < len(s)-k+1:\\n            # Decrease current number of vowels if the removed character is a vowel\\n            if s[i-1] in vowels:\\n                currVowels -= 1\\n            # Increase current number of vowels if the added character is a vowel\\n            if s[i+k-1] in vowels:\\n                currVowels += 1\\n            \\n            # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n            if currVowels == k:\\n                return k\\n            # Else, keep track of the highest number of vowels            \\n            if currVowels > maxVowels:\\n                maxVowels = currVowels\\n\\n            i += 1\\n        return maxVowels\\n\\n        \\'\\'\\'\\n        # Naive Approach - 96/106\\n        vowels, maxVowels = \\'aeiou\\', 0\\n        for i in range(len(s)-k+1):\\n            # Get the substring\\n            s1 = s[i:i+k]\\n            # Check number of vowels\\n            numOfVowels = 0\\n            for i in s1:\\n                if i in vowels:\\n                    numOfVowels+=1\\n            # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n            if numOfVowels == k:\\n                return k\\n            # Else, keep track of the highest number of vowels\\n            if numOfVowels > maxVowels:\\n                maxVowels = numOfVowels\\n        return maxVowels\\n        \\'\\'\\'\\n```\\n\\n\\n                ```Please Upvote if you like my content.```\\n\\n.\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Sliding Window\\n        vowels = \\'aeiou\\'\\n        \\n        # Take the initial substring to make a note of initial number of vowels\\n        s1 = s[:k]\\n        currVowels, maxVowels = 0, 0\\n        for i in s1:\\n            if i in vowels:\\n                currVowels += 1\\n        # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n        if currVowels == k:\\n            return k\\n        # Else, keep track of the highest number of vowels            \\n        if currVowels > maxVowels:\\n            maxVowels = currVowels\\n        i = 1\\n\\n        # Increase the sliding window one by one until last k characters of the string\\n        while i < len(s)-k+1:\\n            # Decrease current number of vowels if the removed character is a vowel\\n            if s[i-1] in vowels:\\n                currVowels -= 1\\n            # Increase current number of vowels if the added character is a vowel\\n            if s[i+k-1] in vowels:\\n                currVowels += 1\\n            \\n            # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n            if currVowels == k:\\n                return k\\n            # Else, keep track of the highest number of vowels            \\n            if currVowels > maxVowels:\\n                maxVowels = currVowels\\n\\n            i += 1\\n        return maxVowels\\n\\n        \\'\\'\\'\\n        # Naive Approach - 96/106\\n        vowels, maxVowels = \\'aeiou\\', 0\\n        for i in range(len(s)-k+1):\\n            # Get the substring\\n            s1 = s[i:i+k]\\n            # Check number of vowels\\n            numOfVowels = 0\\n            for i in s1:\\n                if i in vowels:\\n                    numOfVowels+=1\\n            # If the number of vowels are equal to k, we cannot get any higher, so we return it\\n            if numOfVowels == k:\\n                return k\\n            # Else, keep track of the highest number of vowels\\n            if numOfVowels > maxVowels:\\n                maxVowels = numOfVowels\\n        return maxVowels\\n        \\'\\'\\'\\n```\n```Please Upvote if you like my content.```",
                "codeTag": "Java"
            },
            {
                "id": 3488703,
                "title": "sliding-window-using-two-pointer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n  In this question we need to find the maximum vowel , and the sliding window technique is a powerful approach to solve a wide range of problems where we need to find a maximum or minimum value in a substring of a given size.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize two pointers left and right to the beginning of the     string s.\\n\\n    Calculate the vowel count for the first k characters in the string.\\n\\n2. Initialize a variable \"max_vowel\" to the vowel count of the first k characters.\\n\\n3. Move the window one character to the right by incrementing left and right pointers and updating the vowel count of the window.\\n\\n4. Update \"max_vowel\" if the current vowel count is greater than the maximum seen so far.\\n\\n5. Repeat step 4 and 5 until the end of the string is reached.\\n\\n6. Return the maximum vowel count.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n  The time complexity of the above code is O(n) as we are iterating over the string only once. \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) as we are only using a constant amount of extra space.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int max_vowel = 0 ; \\n        int vowel_count = 0 ; \\n        int right = 0 , left = 0 ; \\n\\n        while(right< n ){\\n            if(right - left < k ){\\n                if(s[right] ==\\'a\\'|| s[right] == \\'e\\' || s[right] ==\\'i\\' || s[right] ==\\'o\\' ||s[right] ==\\'u\\'){\\n                    vowel_count++;}\\n\\n                 right++;\\n            } else \\n                   {\\n                max_vowel = max(max_vowel , vowel_count);\\n                if(s[left] ==\\'a\\'|| s[left] == \\'e\\' || s[left] ==\\'i\\' || s[left] ==\\'o\\' ||s[left] ==\\'u\\')vowel_count--;\\n                left++;\\n            }\\n            \\n        }\\n\\n       return max(max_vowel , vowel_count);\\n    }\\n};\\n```",
                "solutionTags": [
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int max_vowel = 0 ; \\n        int vowel_count = 0 ; \\n        int right = 0 , left = 0 ; \\n\\n        while(right< n ){\\n            if(right - left < k ){\\n                if(s[right] ==\\'a\\'|| s[right] == \\'e\\' || s[right] ==\\'i\\' || s[right] ==\\'o\\' ||s[right] ==\\'u\\'){\\n                    vowel_count++;}\\n\\n                 right++;\\n            } else \\n                   {\\n                max_vowel = max(max_vowel , vowel_count);\\n                if(s[left] ==\\'a\\'|| s[left] == \\'e\\' || s[left] ==\\'i\\' || s[left] ==\\'o\\' ||s[left] ==\\'u\\')vowel_count--;\\n                left++;\\n            }\\n            \\n        }\\n\\n       return max(max_vowel , vowel_count);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488664,
                "title": "solving-the-problem-using-sliding-window-c-and-java",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n       int vowel = 0, count = 0;\\n        \\n        // Initialize cumulative vowel count for the first k characters\\n        for (int i = 0; i < k; i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') {\\n                vowel++;\\n            }\\n        }\\n        count = vowel;\\n        \\n        // Update cumulative vowel count for each subsequent window of size k\\n        for (int i = k; i < s.length(); i++) {\\n            char c1 = s.charAt(i-k), c2 = s.charAt(i);\\n            if (c1 == \\'a\\' || c1 == \\'e\\' || c1 == \\'i\\' || c1 == \\'o\\' || c1 == \\'u\\') {\\n                vowel--;\\n            }\\n            if (c2 == \\'a\\' || c2 == \\'e\\' || c2 == \\'i\\' || c2 == \\'o\\' || c2 == \\'u\\') {\\n                vowel++;\\n            }\\n            count = Math.max(count, vowel);\\n        }\\n        \\n        return count;\\n    \\n        \\n    }\\n}\\n```\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(0);\\n        cout.tie(0);\\n        \\n        int vowel = 0, count = 0;\\n        \\n        // Initialize cumulative vowel count for the first k characters\\n        for (int i = 0; i < k; i++) {\\n            char c = s[i];\\n            if (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') {\\n                vowel++;\\n            }\\n        }\\n        count = vowel;\\n        \\n        // Update cumulative vowel count for each subsequent window of size k\\n        for (int i = k; i < s.length(); i++) {\\n            char c1 = s[i-k], c2 = s[i];\\n            if (c1 == \\'a\\' || c1 == \\'e\\' || c1 == \\'i\\' || c1 == \\'o\\' || c1 == \\'u\\') {\\n                vowel--;\\n            }\\n            if (c2 == \\'a\\' || c2 == \\'e\\' || c2 == \\'i\\' || c2 == \\'o\\' || c2 == \\'u\\') {\\n                vowel++;\\n            }\\n            count = max(count, vowel);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n       int vowel = 0, count = 0;\\n        \\n        // Initialize cumulative vowel count for the first k characters\\n        for (int i = 0; i < k; i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') {\\n                vowel++;\\n            }\\n        }\\n        count = vowel;\\n        \\n        // Update cumulative vowel count for each subsequent window of size k\\n        for (int i = k; i < s.length(); i++) {\\n            char c1 = s.charAt(i-k), c2 = s.charAt(i);\\n            if (c1 == \\'a\\' || c1 == \\'e\\' || c1 == \\'i\\' || c1 == \\'o\\' || c1 == \\'u\\') {\\n                vowel--;\\n            }\\n            if (c2 == \\'a\\' || c2 == \\'e\\' || c2 == \\'i\\' || c2 == \\'o\\' || c2 == \\'u\\') {\\n                vowel++;\\n            }\\n            count = Math.max(count, vowel);\\n        }\\n        \\n        return count;\\n    \\n        \\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(0);\\n        cout.tie(0);\\n        \\n        int vowel = 0, count = 0;\\n        \\n        // Initialize cumulative vowel count for the first k characters\\n        for (int i = 0; i < k; i++) {\\n            char c = s[i];\\n            if (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') {\\n                vowel++;\\n            }\\n        }\\n        count = vowel;\\n        \\n        // Update cumulative vowel count for each subsequent window of size k\\n        for (int i = k; i < s.length(); i++) {\\n            char c1 = s[i-k], c2 = s[i];\\n            if (c1 == \\'a\\' || c1 == \\'e\\' || c1 == \\'i\\' || c1 == \\'o\\' || c1 == \\'u\\') {\\n                vowel--;\\n            }\\n            if (c2 == \\'a\\' || c2 == \\'e\\' || c2 == \\'i\\' || c2 == \\'o\\' || c2 == \\'u\\') {\\n                vowel++;\\n            }\\n            count = max(count, vowel);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3488382,
                "title": "c-easy-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMake a window of k substrings. calculate the vowels present in it using the vowel count from previous window.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- first calculate the number of vowels in first k size window and store it in c\\n- then slide the window upto (n-k) `first index of last possible window ` by stepsize of 1\\n- If the letter we eleminated while sliding is a vowel then make c=c-1\\n- Else if the new letter included in the window is a vowel then make c=c+1\\n- make ans as the maximum between ans and c\\n- return ans\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\') return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=INT_MIN; int c=0;\\n        int n=s.length();\\n        for(int i=0;i<k;i++) if(isVowel(s[i])) c++;\\n        ans=max(ans,c);\\n        for(int i=1;i<n-k+1;i++){\\n            if(isVowel(s[i-1])) c--;\\n            if(isVowel(s[i+k-1])) c++;\\n            ans=max(ans,c);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\') return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        int ans=INT_MIN; int c=0;\\n        int n=s.length();\\n        for(int i=0;i<k;i++) if(isVowel(s[i])) c++;\\n        ans=max(ans,c);\\n        for(int i=1;i<n-k+1;i++){\\n            if(isVowel(s[i-1])) c--;\\n            if(isVowel(s[i+k-1])) c++;\\n            ans=max(ans,c);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488218,
                "title": "1456-maximum-number-of-vowels-in-a-substring-of-given-length",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe are given a string \\'s\\' and an integer \\'k\\'. We need to find the maximum number of vowels in any substring of \\'s\\' with length \\'k\\'. We can use a sliding window approach to solve this problem. We can initialize a window of size \\'k\\' at the beginning of the string and move it to the right one character at a time. At each step, we can count the number of vowels in the current window and update the maximum number of vowels seen so far.\\n\\n---\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, we need to find all the substrings of length k in the given string s and then count the number of vowels in each substring. We will return the maximum count of vowels found among all the substrings.\\n\\n1. First, we will define a function to count the number of vowels in a given string. This function will take a string as input and return the count of vowels in the string.\\n2. Next, we will loop through all the substrings of length k in the given string s using a sliding window approach.\\n3. For each substring, we will count the number of vowels using the function defined in step 1.\\n4. We will keep track of the maximum count of vowels found among all the substrings.\\n5. Finally, we will return the maximum count of vowels found among all the substrings.\\n\\n---\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n), where n is the length of the input string. \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1), since we only use a constant amount of space to store the variables.\\n\\n---\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char& c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    \\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int maxct = 0;\\n        int ct = 0;\\n        \\n        // Count vowels in first substring of length k\\n        for (int i = 0; i < k; i++) {\\n            if (isVowel(s[i])) {\\n                ct++;\\n            }\\n        }\\n        maxct = ct;\\n        \\n        // Slide the window of size k over the string s\\n        for (int i = k; i < n; i++) {\\n            // Subtract the count of vowel at the start of the previous window\\n            if (isVowel(s[i - k])) {\\n                ct--;\\n            }\\n            // Add the count of vowel at the end of the current window\\n            if (isVowel(s[i])) {\\n                ct++;\\n            }\\n            // Update the maximum count of vowels found so far\\n            maxct = max(maxct, ct);\\n        }\\n        return maxct;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char& c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    \\n    int maxVowels(string s, int k) {\\n        int n = s.size();\\n        int maxct = 0;\\n        int ct = 0;\\n        \\n        // Count vowels in first substring of length k\\n        for (int i = 0; i < k; i++) {\\n            if (isVowel(s[i])) {\\n                ct++;\\n            }\\n        }\\n        maxct = ct;\\n        \\n        // Slide the window of size k over the string s\\n        for (int i = k; i < n; i++) {\\n            // Subtract the count of vowel at the start of the previous window\\n            if (isVowel(s[i - k])) {\\n                ct--;\\n            }\\n            // Add the count of vowel at the end of the current window\\n            if (isVowel(s[i])) {\\n                ct++;\\n            }\\n            // Update the maximum count of vowels found so far\\n            maxct = max(maxct, ct);\\n        }\\n        return maxct;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488182,
                "title": "it-does-run-simple-code-explanation",
                "content": "# Description\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGiven a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\\n\\nVowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\\n\\n```\\nInput: s = \"abciiidef\", k = 3\\nOutput: 3\\nExplanation: The substring \"iii\" contains 3 vowel letters.\\n```\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe function maxVowels takes a string str and an integer k as input and returns the maximum number of vowels in any substring of length k in the input string.\\n\\nThe code initializes a counter variable cnt to zero and a maximum count variable ans to zero.\\n\\nThe code creates a set s containing all the vowels (\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\').\\n\\nThe code checks the first k characters of the input string and counts the number of vowels in that substring. This count is stored in the cnt variable and compared with the current maximum count ans. If cnt is greater than ans, ans is updated to cnt.\\n\\nThe code enters a loop that processes the remaining characters of the input string.\\n\\nIn each iteration of the loop, the code removes the leftmost character of the current substring (at position i) from the count cnt if it is a vowel.\\n\\nThe code then adds the next character in the string (at position j) to the count cnt if it is a vowel.\\n\\nThe code updates the maximum count ans if cnt is greater than ans.\\nFinally, the function returns the maximum count ans.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is O(n), where n is the length of the input string str.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n space complexity is O(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string str, int k) {\\n       int cnt = 0, ans=0, n=str.length();\\n       set<char> s;\\n       s.insert(\\'a\\');s.insert(\\'e\\');s.insert(\\'i\\');s.insert(\\'o\\');s.insert(\\'u\\');\\n       int j;\\n       for(j=0; j<k; j++)\\n       {\\n           if(s.count(str[j])!=0)\\n           cnt++;\\n       }\\n       ans=max(ans,cnt);\\n       int i=0;\\n       while(j<n)\\n       {\\n         if(s.count(str[i])!=0)\\n         cnt--;\\n         if(s.count(str[j])!=0)\\n         cnt++;\\n         i++;\\n         j++;\\n         ans = max(ans,cnt);\\n       }\\n       return ans;\\n    }\\n};\\n```\\n![coderuns.jpeg](https://assets.leetcode.com/users/images/34704108-41e5-4c36-8ac7-c57dc7c1330a_1683272420.67118.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nInput: s = \"abciiidef\", k = 3\\nOutput: 3\\nExplanation: The substring \"iii\" contains 3 vowel letters.\\n```\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string str, int k) {\\n       int cnt = 0, ans=0, n=str.length();\\n       set<char> s;\\n       s.insert(\\'a\\');s.insert(\\'e\\');s.insert(\\'i\\');s.insert(\\'o\\');s.insert(\\'u\\');\\n       int j;\\n       for(j=0; j<k; j++)\\n       {\\n           if(s.count(str[j])!=0)\\n           cnt++;\\n       }\\n       ans=max(ans,cnt);\\n       int i=0;\\n       while(j<n)\\n       {\\n         if(s.count(str[i])!=0)\\n         cnt--;\\n         if(s.count(str[j])!=0)\\n         cnt++;\\n         i++;\\n         j++;\\n         ans = max(ans,cnt);\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488167,
                "title": "best-window-shift-problem-in-python-3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        mx_cnt = cur_cnt = 0\\n        vows = set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])        \\n        for i in range(k):\\n            if (s[i] in vows):\\n                cur_cnt += 1\\n        if cur_cnt == k:\\n            return k\\n        \\n        mx_cnt = cur_cnt\\n\\n        for i in range(k,len(s)):\\n            if s[i-k] in vows:\\n               cur_cnt -= 1\\n            if s[i] in vows:\\n                cur_cnt += 1\\n            mx_cnt = max(mx_cnt,cur_cnt)\\n            if mx_cnt == k:\\n                return k\\n\\n        return mx_cnt\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        mx_cnt = cur_cnt = 0\\n        vows = set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'])        \\n        for i in range(k):\\n            if (s[i] in vows):\\n                cur_cnt += 1\\n        if cur_cnt == k:\\n            return k\\n        \\n        mx_cnt = cur_cnt\\n\\n        for i in range(k,len(s)):\\n            if s[i-k] in vows:\\n               cur_cnt -= 1\\n            if s[i] in vows:\\n                cur_cnt += 1\\n            mx_cnt = max(mx_cnt,cur_cnt)\\n            if mx_cnt == k:\\n                return k\\n\\n        return mx_cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487970,
                "title": "easy-sliding-window-concept",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTake one unordered_map and insert first k characters with their frequency. While inserting keep checking if the character is vowel or not, if yes then increae count. update ans variable (max(ans, count)). Now start another loop from k to n and decrease the frequency of 0\\'th character and if it is vowel then decrease the count variable by 1. Insert the kth character and increase the count if it is a vowel, update ans. Then return the ans.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(k)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    static bool isVowel(char x){\\n        if(x == \\'a\\' || x == \\'e\\' || x == \\'i\\' || x == \\'o\\' || x == \\'u\\')\\n            return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        unordered_map<char, int> mp;\\n        int n = s.size();\\n        int ans = INT_MIN, count = 0;\\n        for(int i=0;i<k;i++){\\n            mp[s[i]]++;\\n            if(isVowel(s[i]))\\n                count++;\\n        }\\n        int p =0;\\n        for(int i=k;i<n;i++){\\n            ans = max(ans, count);\\n            mp[s[p]]--;\\n            if(isVowel(s[p]))\\n                count--;\\n            mp[s[i]]++;\\n            if(isVowel(s[i]))\\n                count++;\\n            p++;\\n        }\\n        ans = max(ans, count);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    static bool isVowel(char x){\\n        if(x == \\'a\\' || x == \\'e\\' || x == \\'i\\' || x == \\'o\\' || x == \\'u\\')\\n            return true;\\n        return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        unordered_map<char, int> mp;\\n        int n = s.size();\\n        int ans = INT_MIN, count = 0;\\n        for(int i=0;i<k;i++){\\n            mp[s[i]]++;\\n            if(isVowel(s[i]))\\n                count++;\\n        }\\n        int p =0;\\n        for(int i=k;i<n;i++){\\n            ans = max(ans, count);\\n            mp[s[p]]--;\\n            if(isVowel(s[p]))\\n                count--;\\n            mp[s[i]]++;\\n            if(isVowel(s[i]))\\n                count++;\\n            p++;\\n        }\\n        ans = max(ans, count);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487965,
                "title": "c-easy-solution-using-sliding-window-t-c-o-n",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVovel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n\\n        int ans = 0;\\n        int cnt =0;\\n\\n        for(int i = 0 ; i < k ; i++){\\n            if(isVovel(s[i]))cnt++;\\n        }\\n        \\n        if(cnt == k)return k;\\n\\n        ans = max(ans,cnt);\\n\\n        for(int i = k ; i<s.length(); i++){\\n            if(isVovel(s[i-k]))cnt--;\\n            if(isVovel(s[i]))cnt++;\\n            ans = max(ans,cnt);\\n            if(cnt==k)return k;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVovel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\n\\n    int maxVowels(string s, int k) {\\n\\n        int ans = 0;\\n        int cnt =0;\\n\\n        for(int i = 0 ; i < k ; i++){\\n            if(isVovel(s[i]))cnt++;\\n        }\\n        \\n        if(cnt == k)return k;\\n\\n        ans = max(ans,cnt);\\n\\n        for(int i = k ; i<s.length(); i++){\\n            if(isVovel(s[i-k]))cnt--;\\n            if(isVovel(s[i]))cnt++;\\n            ans = max(ans,cnt);\\n            if(cnt==k)return k;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487833,
                "title": "c-pure-implementation-using-map",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int res=0;\\n        map<char,int> mp;\\n        for(int i=0;i<k;i++){\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\'){\\n                mp[s[i]]++;\\n            }\\n        }\\n        res=max(res,mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\']);\\n        int j=0;\\n        for(int i=k;i<(int)s.size();i++){\\n            mp[s[j]]--;\\n            mp[s[j]]=max(0,mp[s[j]]);\\n            mp[s[i]]++;\\n            res=max(res,mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\']);\\n            j++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int res=0;\\n        map<char,int> mp;\\n        for(int i=0;i<k;i++){\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\'){\\n                mp[s[i]]++;\\n            }\\n        }\\n        res=max(res,mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\']);\\n        int j=0;\\n        for(int i=k;i<(int)s.size();i++){\\n            mp[s[j]]--;\\n            mp[s[j]]=max(0,mp[s[j]]);\\n            mp[s[i]]++;\\n            res=max(res,mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\']);\\n            j++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487786,
                "title": "simple-sliding-window-with-80-beats-easy-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple Sliding Window\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Create a window of size k and count number of Vowels in that.\\n2. save the result in a Variable.\\n3. slide the window and update Answer with respect to first window element and last window element.\\n4. return max of answer\\n \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        ans=0\\n        r=0\\n        for i in range(k):\\n            if s[i] in \"aeiou\":\\n                ans+=1\\n        r=ans\\n        for i in range(k,len(s)):\\n            if s[i-k] in \"aeiou\":\\n                ans-=1\\n            if s[i] in \"aeiou\":\\n                ans+=1\\n            r=max(r,ans)\\n        return r\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        ans=0\\n        r=0\\n        for i in range(k):\\n            if s[i] in \"aeiou\":\\n                ans+=1\\n        r=ans\\n        for i in range(k,len(s)):\\n            if s[i-k] in \"aeiou\":\\n                ans-=1\\n            if s[i] in \"aeiou\":\\n                ans+=1\\n            r=max(r,ans)\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487590,
                "title": "easy-simple-and-concise-c-code-7ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    bool isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\'|| ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count =0, n= s.size();\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s[i])) count++;\\n        }\\n        int maxi = count ;\\n        for(int i=k;i<n;i++){\\n            if(isVowel(s[i])) count++;\\n            if(isVowel(s[i-k]))count--;\\n            maxi = max(maxi, count);\\n        }\\n        return maxi;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    bool isVowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\'|| ch==\\'o\\' || ch==\\'u\\')return true;\\n        return false;\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count =0, n= s.size();\\n        for(int i=0;i<k;i++){\\n            if(isVowel(s[i])) count++;\\n        }\\n        int maxi = count ;\\n        for(int i=k;i<n;i++){\\n            if(isVowel(s[i])) count++;\\n            if(isVowel(s[i-k]))count--;\\n            maxi = max(maxi, count);\\n        }\\n        return maxi;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487399,
                "title": "sliding-window-using-cpp",
                "content": "![UPvote.jpg](https://assets.leetcode.com/users/images/9ae406a1-6878-4d76-83f7-d9899a7e929c_1683263352.7406516.jpeg)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int count(char i){\\n      if(i==\\'a\\'||i==\\'e\\'||i==\\'i\\'||i==\\'o\\'||i==\\'u\\') return 1;\\n      return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n      int mv = 0,cv = 0;\\n      for(int i =0;i<s.size();i++){\\n        cv += count(s[i]);\\n        if(i>=k) cv -= count(s[i-k]);\\n        mv = max(mv,cv);\\n      }\\n      return mv;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int count(char i){\\n      if(i==\\'a\\'||i==\\'e\\'||i==\\'i\\'||i==\\'o\\'||i==\\'u\\') return 1;\\n      return 0;\\n    }\\n    int maxVowels(string s, int k) {\\n      int mv = 0,cv = 0;\\n      for(int i =0;i<s.size();i++){\\n        cv += count(s[i]);\\n        if(i>=k) cv -= count(s[i-k]);\\n        mv = max(mv,cv);\\n      }\\n      return mv;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487125,
                "title": "simple-python3-solution-upto-98-faster-o-n-explained-commented",
                "content": "# Approach\\nWe Store 1 or 0 in a vow_num_list in in place of a vowel or consonant respectively.\\n\\nWe keep track of left most element using a (pointer ind).\\n\\nWe count the number of vowels and store the max count in max_vow.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Checklist of vowels\\n        vow = {\\'a\\':1,\\'e\\':2,\\'i\\':3,\\'o\\':4,\\'u\\':5}  \\n\\n        # We keep a list respective to s where:\\n        # If s[i] is a vowel we append 1 else 0\\n        vow_num_list = []\\n        max_vow = 0\\n        for i in range(k):    # First we do it with k letters.\\n            if s[i] in vow:\\n                vow_num_list.append(1)\\n            else:\\n                vow_num_list.append(0)\\n    \\n        # check the count of vowels and store in max_vow\\n        count = sum(vow_num_list)\\n        if max_vow < count:\\n            max_vow = count\\n\\n        # We need this index value to keep track of  \\n        # left most element we count in our vow_num_list \\n        ind = 0\\n        \\n        # Now we check for the rest of the element in s\\n        for i in range(k,len(s)):\\n            \\n            # Similar to popleft() but instead just decrement the count \\n            # as we keep track of left most element \\n            if vow_num_list[ind] == 1:\\n                count -= 1\\n            ind += 1\\n\\n            # As we check new element s[i] we append 1 to list \\n            if s[i] in vow:\\n                vow_num_list.append(1)\\n                count += 1\\n            else:\\n                vow_num_list.append(0)\\n            \\n            # check the count of vowels and store in max_vow\\n            if max_vow < count:\\n                max_vow = count\\n            \\n        return max_vow\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        # Checklist of vowels\\n        vow = {\\'a\\':1,\\'e\\':2,\\'i\\':3,\\'o\\':4,\\'u\\':5}  \\n\\n        # We keep a list respective to s where:\\n        # If s[i] is a vowel we append 1 else 0\\n        vow_num_list = []\\n        max_vow = 0\\n        for i in range(k):    # First we do it with k letters.\\n            if s[i] in vow:\\n                vow_num_list.append(1)\\n            else:\\n                vow_num_list.append(0)\\n    \\n        # check the count of vowels and store in max_vow\\n        count = sum(vow_num_list)\\n        if max_vow < count:\\n            max_vow = count\\n\\n        # We need this index value to keep track of  \\n        # left most element we count in our vow_num_list \\n        ind = 0\\n        \\n        # Now we check for the rest of the element in s\\n        for i in range(k,len(s)):\\n            \\n            # Similar to popleft() but instead just decrement the count \\n            # as we keep track of left most element \\n            if vow_num_list[ind] == 1:\\n                count -= 1\\n            ind += 1\\n\\n            # As we check new element s[i] we append 1 to list \\n            if s[i] in vow:\\n                vow_num_list.append(1)\\n                count += 1\\n            else:\\n                vow_num_list.append(0)\\n            \\n            # check the count of vowels and store in max_vow\\n            if max_vow < count:\\n                max_vow = count\\n            \\n        return max_vow\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487108,
                "title": "java-easy-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int length = s.length();\\n        if(length<k) return 0;\\n        int count = 0;\\n        \\n        for(int i=0;i<k;i++){\\n            if(isVowel(s.charAt(i))) count++;    \\n        }\\n\\n        int max = count;\\n\\n        int end = k-1;\\n        int start = 0;\\n        \\n        while(end<length-1){\\n            if(isVowel(s.charAt(start)) && count>0) count--;\\n            if(isVowel(s.charAt(end+1))) count++;\\n            start++;\\n            end++;\\n            max = Math.max(count,max);\\n        }\\n\\n        return max;\\n\\n    }\\n\\n\\n    public boolean isVowel(Character c){\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int length = s.length();\\n        if(length<k) return 0;\\n        int count = 0;\\n        \\n        for(int i=0;i<k;i++){\\n            if(isVowel(s.charAt(i))) count++;    \\n        }\\n\\n        int max = count;\\n\\n        int end = k-1;\\n        int start = 0;\\n        \\n        while(end<length-1){\\n            if(isVowel(s.charAt(start)) && count>0) count--;\\n            if(isVowel(s.charAt(end+1))) count++;\\n            start++;\\n            end++;\\n            max = Math.max(count,max);\\n        }\\n\\n        return max;\\n\\n    }\\n\\n\\n    public boolean isVowel(Character c){\\n        return (c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\');\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487011,
                "title": "easiest-solution-using-javascript",
                "content": "\\n# JavaScript Code\\n```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    let maxCount = 0;\\n    let start = 0;\\n    let count = 0;\\n    for (let end = 0; end < s.length; end++) {\\n        if (vowels.includes(s[end])) {\\n            count +=1;\\n        }\\n        if (end - start + 1 > k) {\\n            if(vowels.includes(s[start])) {\\n                count -=1;\\n            }\\n            start +=1;\\n        }\\n        maxCount = Math.max(maxCount, count)\\n        if (maxCount == k) return maxCount;\\n    }\\n    return maxCount;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar maxVowels = function(s, k) {\\n    let vowels = [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'];\\n    let maxCount = 0;\\n    let start = 0;\\n    let count = 0;\\n    for (let end = 0; end < s.length; end++) {\\n        if (vowels.includes(s[end])) {\\n            count +=1;\\n        }\\n        if (end - start + 1 > k) {\\n            if(vowels.includes(s[start])) {\\n                count -=1;\\n            }\\n            start +=1;\\n        }\\n        maxCount = Math.max(maxCount, count)\\n        if (maxCount == k) return maxCount;\\n    }\\n    return maxCount;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486937,
                "title": "easy-c-sliding-window-solution",
                "content": "# Intuition\\nAfter Seeing this problem concept of Sliding Window has came in my mind.\\nhere we are given window size of k\\n# Approach\\nhere we have traversed through every window of size k\\nwe can use here map to keep the count of vowels .and simetaneously delete the elements of previous window when moving for new window.\\n# Complexity\\n- Time complexity:\\nO(n+k)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n= s.size();\\n        map<char,int> mp;\\n        for(int i=0;i<k;i++){\\n            mp[s[i]]++;\\n        }\\n        int res= mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\'];\\n        int c=0;\\n        for(int i=k;i<n;i++){\\n            mp[s[i]]++;\\n            mp[s[c]]--;\\n            if(mp[s[c]]==0){\\n                mp.erase(s[c]);\\n            }\\n            c++;\\n            res= max(res,mp[\\'a\\']+mp[\\'e\\']+mp[\\'i\\']+mp[\\'o\\']+mp[\\'u\\']);\\n        }\\n        return res;\\n    }\\n};\\n// If Found Helpful please upvote....\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int n= s.size();\\n        map<char,int> mp;\\n        for(int i=0;i<k;i++){\\n            mp[s[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3486878,
                "title": "c-sliding-window-faster-easy-to-understand",
                "content": "* ***Sliding Window***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    // function for checking vowel \\n    \\n    bool is_vowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        {\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    int maxVowels(string str, int k) {\\n        \\n        int n = str.size();\\n        \\n        int count_vowel = 0;\\n        \\n        // traverse over the str\\n        \\n        int maxi = INT_MIN;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(i < k)\\n            {\\n                if(is_vowel(str[i]))\\n                {\\n                    count_vowel++;\\n                }\\n            }\\n            else\\n            {\\n                // update maxi\\n                \\n                maxi = max(maxi, count_vowel);\\n                \\n                if(is_vowel(str[i]))\\n                {\\n                    count_vowel++;\\n                }\\n                \\n                if(is_vowel(str[i - k]))\\n                {\\n                    count_vowel--;\\n                }\\n            }\\n        }\\n        \\n        maxi = max(maxi, count_vowel);\\n        \\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    // function for checking vowel \\n    \\n    bool is_vowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        {\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    int maxVowels(string str, int k) {\\n        \\n        int n = str.size();\\n        \\n        int count_vowel = 0;\\n        \\n        // traverse over the str\\n        \\n        int maxi = INT_MIN;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(i < k)\\n            {\\n                if(is_vowel(str[i]))\\n                {\\n                    count_vowel++;\\n                }\\n            }\\n            else\\n            {\\n                // update maxi\\n                \\n                maxi = max(maxi, count_vowel);\\n                \\n                if(is_vowel(str[i]))\\n                {\\n                    count_vowel++;\\n                }\\n                \\n                if(is_vowel(str[i - k]))\\n                {\\n                    count_vowel--;\\n                }\\n            }\\n        }\\n        \\n        maxi = max(maxi, count_vowel);\\n        \\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486708,
                "title": "damn-easy-basic-sliding-window-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool isvowel(char ch)\\n{\\n    if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n    return true;\\n    return false;\\n}\\n    int maxVowels(string s, int k) {\\n       int i=0,j=0;\\n       int n=s.size();\\n       int vowel=0;\\n       int ans=INT_MIN;\\n       while(j<n) \\n       {\\n           if(isvowel(s[j]))\\n           {\\n               vowel++;\\n           }\\n           if(j-i+1==k)\\n           {\\n               ans=max(ans,vowel);\\n              if(isvowel(s[i]))\\n              {\\n                  vowel--;\\n              }\\n              i++;\\n           }\\n           j++;\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool isvowel(char ch)\\n{\\n    if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n    return true;\\n    return false;\\n}\\n    int maxVowels(string s, int k) {\\n       int i=0,j=0;\\n       int n=s.size();\\n       int vowel=0;\\n       int ans=INT_MIN;\\n       while(j<n) \\n       {\\n           if(isvowel(s[j]))\\n           {\\n               vowel++;\\n           }\\n           if(j-i+1==k)\\n           {\\n               ans=max(ans,vowel);\\n              if(isvowel(s[i]))\\n              {\\n                  vowel--;\\n              }\\n              i++;\\n           }\\n           j++;\\n       }\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443736,
                "title": "sliding-window-c",
                "content": "`Please Upvote If you Like !!!`\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int mx = 0;\\n        for(int i=0;i<k;i++) {\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\') mx++;\\n        }\\n        int ans = mx;\\n        for(int i=k;i<s.size();i++) {\\n            int j = i-k;\\n            if(s[j]==\\'a\\' or s[j]==\\'e\\' or s[j]==\\'i\\' or s[j]==\\'o\\' or s[j]==\\'u\\') mx--;\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\') mx++;\\n            ans = max(ans,mx);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int mx = 0;\\n        for(int i=0;i<k;i++) {\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\') mx++;\\n        }\\n        int ans = mx;\\n        for(int i=k;i<s.size();i++) {\\n            int j = i-k;\\n            if(s[j]==\\'a\\' or s[j]==\\'e\\' or s[j]==\\'i\\' or s[j]==\\'o\\' or s[j]==\\'u\\') mx--;\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'i\\' or s[i]==\\'o\\' or s[i]==\\'u\\') mx++;\\n            ans = max(ans,mx);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3324738,
                "title": "easy-c-clean-code-sliding-window-fastest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n   use sliding window technique and assume a counter for counting vowels in the given size of window and store its max size in ans variable.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n       o(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n      o(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, count = 0, j = 0;\\n        for(int i = 0; i < s.size(); i++) {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n                count++;\\n            }\\n            if(i >= k) {\\n                if(s[j] == \\'a\\' || s[j] == \\'e\\' || s[j] == \\'i\\' || s[j] == \\'o\\' || s[j] == \\'u\\') {\\n                    count--;\\n                }\\n                j++;\\n            }\\n            ans = max(ans, count);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans = 0, count = 0, j = 0;\\n        for(int i = 0; i < s.size(); i++) {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\' || s[i] == \\'o\\' || s[i] == \\'u\\') {\\n                count++;\\n            }\\n            if(i >= k) {\\n                if(s[j] == \\'a\\' || s[j] == \\'e\\' || s[j] == \\'i\\' || s[j] == \\'o\\' || s[j] == \\'u\\') {\\n                    count--;\\n                }\\n                j++;\\n            }\\n            ans = max(ans, count);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3323198,
                "title": "c-o-n-time-o-1-space-5-lines-only",
                "content": "**Intuition**\\n- Sliding window\\n- For a window of length `k`, we are keeping track of count of vowels in `local` variable\\n- For each window, we are calculating the `max value` of vowel count, and returning the answer at end\\n\\n**Code**\\n```c++\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count = 0, counting = 0;\\n        unordered_set<char> bag = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        for (int i = 0, local = 0; i < s.size(); i++) {\\n            local += bag.count(s[i]);\\n            if (i - k >= 0) local -= bag.count(s[i-k]);\\n            count = max(count, local);\\n        }\\n        return count;\\n    }\\n};\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int count = 0, counting = 0;\\n        unordered_set<char> bag = {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        for (int i = 0, local = 0; i < s.size(); i++) {\\n            local += bag.count(s[i]);\\n            if (i - k >= 0) local -= bag.count(s[i-k]);\\n            count = max(count, local);\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878029,
                "title": "python-93-10-faster-sliding-window-o-n-solution",
                "content": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        i,c,m,n=0,0,0,len(s)\\n        for j in range(n):\\n            if s[j] in \\'aeiou\\':\\n                c+=1\\n            if j-i+1==k:\\n                m=max(m,c)\\n                if s[i] in \\'aeiou\\':\\n                    c-=1\\n                i+=1\\n        return m\\n```\\n\\n**An upvote will be encouraging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        i,c,m,n=0,0,0,len(s)\\n        for j in range(n):\\n            if s[j] in \\'aeiou\\':\\n                c+=1\\n            if j-i+1==k:\\n                m=max(m,c)\\n                if s[i] in \\'aeiou\\':\\n                    c-=1\\n                i+=1\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2865245,
                "title": "o-n-time-and-o-1-space-easy-solution-c",
                "content": "# Intuition\\nAditya vermas concept of sliding window \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFirst I took two pointer i and j both starting from begining only.took two var counter c to count current vowel counts and var m which will store over all maximum count than iterating them over the string for string length if *j th index* has the vowel increase counter till window size of k isnt formed, once window size is reached check if current vowel count is max or not update m. \\n<b>most imp</b> if your ith element is vowel you must decrement the counter and than continue your window size\\nat last return m.<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int c=0,m=0;\\n        int i=0,j=0;\\n        while(j<s.length()){\\n            if(s[j]==\\'a\\'||s[j]==\\'e\\'||s[j]==\\'i\\'||s[j]==\\'o\\'||s[j]==\\'u\\')\\n            c++;\\n            if(j-i+1<k)j++;\\n            else if(j-i+1==k){\\n                m=max(c,m);\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n                c--;\\n                i++;j++;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int c=0,m=0;\\n        int i=0,j=0;\\n        while(j<s.length()){\\n            if(s[j]==\\'a\\'||s[j]==\\'e\\'||s[j]==\\'i\\'||s[j]==\\'o\\'||s[j]==\\'u\\')\\n            c++;\\n            if(j-i+1<k)j++;\\n            else if(j-i+1==k){\\n                m=max(c,m);\\n                if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n                c--;\\n                i++;j++;\\n            }\\n        }\\n        return m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2779134,
                "title": "cpp-c-easy-to-understand",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans=0,curr=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            curr++;\\n        }\\n        ans = max(ans,curr);\\n        for(int i=k;i<s.length();i++)\\n        {\\n            if(( s[i]==\\'a\\'  ||  s[i]==\\'e\\'  ||  s[i]==\\'i\\'  ||  s[i]==\\'o\\'  ||  s[i]==\\'u\\' )  &&  (  s[i-k]!=\\'a\\'  &&  s[i-k]!=\\'e\\'  &&  s[i-k]!=\\'i\\'  &&  s[i-k]!=\\'o\\'  &&  s[i-k]!=\\'u\\' ))\\n            curr++;\\n            else if((s[i]!=\\'a\\' && s[i]!=\\'e\\' && s[i]!=\\'i\\'  &&  s[i]!=\\'o\\'  &&  s[i]!=\\'u\\')  &&  (s[i-k]==\\'a\\'  ||  s[i-k]==\\'e\\'  ||  s[i-k]==\\'i\\'  ||  s[i-k]==\\'o\\'  ||  s[i-k]==\\'u\\'))\\n            curr--;\\n            ans = max(ans,curr);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        int ans=0,curr=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n            curr++;\\n        }\\n        ans = max(ans,curr);\\n        for(int i=k;i<s.length();i++)\\n        {\\n            if(( s[i]==\\'a\\'  ||  s[i]==\\'e\\'  ||  s[i]==\\'i\\'  ||  s[i]==\\'o\\'  ||  s[i]==\\'u\\' )  &&  (  s[i-k]!=\\'a\\'  &&  s[i-k]!=\\'e\\'  &&  s[i-k]!=\\'i\\'  &&  s[i-k]!=\\'o\\'  &&  s[i-k]!=\\'u\\' ))\\n            curr++;\\n            else if((s[i]!=\\'a\\' && s[i]!=\\'e\\' && s[i]!=\\'i\\'  &&  s[i]!=\\'o\\'  &&  s[i]!=\\'u\\')  &&  (s[i-k]==\\'a\\'  ||  s[i-k]==\\'e\\'  ||  s[i-k]==\\'i\\'  ||  s[i-k]==\\'o\\'  ||  s[i-k]==\\'u\\'))\\n            curr--;\\n            ans = max(ans,curr);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2737083,
                "title": "java-tle-to-optimized-approach",
                "content": "# TLE approach -->\\n\\n```\\nclass Solution {\\n    public boolean isVowel(char ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    public int countFunc(String s){\\n        int count = 0;\\n        for(char c : s.toCharArray()){\\n            if(isVowel(c)){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public int maxVowels(String s, int k) {\\n        int max = 0, i = 0;\\n        while(i<=s.length() - k){\\n            String generator = s.substring(i, i+k);\\n            int vowelCounter = countFunc(generator);\\n            max = Math.max(max, vowelCounter);\\n            i++;\\n        }\\n        return max;\\n    }\\n}\\n```\\n\\n\\n# Working approach-->\\n```\\nclass Solution {\\n    public boolean isVowel(char ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    public int maxVowels(String s, int k) {\\n        int max = 0, i = 0, counter = 0;\\n        String generator = s.substring(i, i+k);\\n        for(char c : generator.toCharArray()){\\n            if(isVowel(c)){\\n                counter++;\\n            }\\n        }\\n        max = Math.max(counter, max);\\n        while(i < s.length() - k){\\n            if(isVowel(generator.charAt(0))){\\n                counter--;\\n            }\\n            i++;\\n            generator = s.substring(i, i+k);\\n            if(isVowel(generator.charAt(generator.length()-1))){\\n                counter++;\\n            }\\n            max = Math.max(counter, max);\\n        }\\n        return max;\\n    }\\n}\\n```\\n\\n# Please upvote if you like the approach and comment if you could suggest a better approach as it\\'s runtime is showing quite high",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isVowel(char ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    public int countFunc(String s){\\n        int count = 0;\\n        for(char c : s.toCharArray()){\\n            if(isVowel(c)){\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n    public int maxVowels(String s, int k) {\\n        int max = 0, i = 0;\\n        while(i<=s.length() - k){\\n            String generator = s.substring(i, i+k);\\n            int vowelCounter = countFunc(generator);\\n            max = Math.max(max, vowelCounter);\\n            i++;\\n        }\\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isVowel(char ch){\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    public int maxVowels(String s, int k) {\\n        int max = 0, i = 0, counter = 0;\\n        String generator = s.substring(i, i+k);\\n        for(char c : generator.toCharArray()){\\n            if(isVowel(c)){\\n                counter++;\\n            }\\n        }\\n        max = Math.max(counter, max);\\n        while(i < s.length() - k){\\n            if(isVowel(generator.charAt(0))){\\n                counter--;\\n            }\\n            i++;\\n            generator = s.substring(i, i+k);\\n            if(isVowel(generator.charAt(generator.length()-1))){\\n                counter++;\\n            }\\n            max = Math.max(counter, max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1512948,
                "title": "sliding-window-prefix-sum-easy-c-implementation",
                "content": "class Solution {\\npublic:\\n\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int a[n];\\n        for(int i=0;i<n;i++)\\n        {\\n             if(s[i]==\\'a\\' ||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n                 a[i]=1;\\n            else\\n                a[i]=0;\\n        }\\n        int pre[n+1];\\n        pre[0]=0;\\n        for(int i=1;i<n+1;i++)\\n        {\\n            pre[i]=pre[i-1]+a[i-1];\\n        }\\n        int ans=0;\\n        int i=0,j=k;\\n        while(j<n+1)\\n        {\\n            int len=pre[j]-pre[i];\\n            ans=max(ans,len);\\n            i++;\\n            j++;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int maxVowels(string s, int k) {\\n        int n=s.size();\\n        int a[n];\\n        for(int i=0;i<n;i++)\\n        {\\n             if(s[i]==\\'a\\' ||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\')\\n                 a[i]=1;\\n            else\\n                a[i]=0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1290850,
                "title": "python-3-one-line-faster-than-100-of-other-submissions",
                "content": "# Two lines\\n\\nInstead of the typical sliding window:\\n1. Transform `s` into an array where a vowel is a `1` and a non-vowel is a `0`\\n2. Build an accumulation array of these values ... and pad a `0` at the beginning of it\\n3. Then perform the sliding window\\n\\nBecause we\\'re only performing the vowel logic in one pass, we save a boatload of processing.\\n\\nAlso, utilizing `map` for the vowel logic AND the sliding window runs the slow parts of the code in CPython.\\n\\n```python\\nclass Solution:\\n  def maxVowels(self, s: str, k: int) -> int:\\n    X = [*accumulate(map(set(\\'aeiou\\').__contains__, s), initial=0)]\\n    return max(map(sub, X[k:], X))\\n```\\n\\n# In one line\\n\\n```python\\nclass Solution:\\n  def maxVowels(self, s: str, k: int) -> int:\\n    return max(map(sub, (X := [*accumulate(map(set(\\'aeiou\\').__contains__, s), initial=0)])[k:], X))\\n```\\n\\n![image](https://assets.leetcode.com/users/images/a978785f-0e7e-4e72-adef-d4edd487dafb_1624398892.8983383.png)\\n",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n  def maxVowels(self, s: str, k: int) -> int:\\n    X = [*accumulate(map(set(\\'aeiou\\').__contains__, s), initial=0)]\\n    return max(map(sub, X[k:], X))\\n```\n```python\\nclass Solution:\\n  def maxVowels(self, s: str, k: int) -> int:\\n    return max(map(sub, (X := [*accumulate(map(set(\\'aeiou\\').__contains__, s), initial=0)])[k:], X))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1210283,
                "title": "c-solution",
                "content": "```\\n    string s1=\"aeiou\";\\n    map<char,int>m;\\n    \\n int maxVowels(string s, int k) {\\n     for(int i=0;i<5;i++){\\n        m[s1[i]]++;\\n    }     \\n   int n=s.size();\\n   \\n   int sum=0; \\n        \\n      int a=0;\\n   for(int i=0;i<k;i++){\\n       if(m[s[i]]>0){\\n           a++;\\n       }\\n    }\\n   \\n    sum=max(sum,a);\\n     int b=0;\\n   for(int i=k;i<n;i++){\\n       if(m[s[i]]>0){\\n           a++;\\n       }\\n       if(m[s[b]]>0){\\n           a--;\\n       }\\n       b++;\\n     sum=max(sum,a);  \\n   }  \\n     \\n     return sum;\\n  } \\n```",
                "solutionTags": [],
                "code": "```\\n    string s1=\"aeiou\";\\n    map<char,int>m;\\n    \\n int maxVowels(string s, int k) {\\n     for(int i=0;i<5;i++){\\n        m[s1[i]]++;\\n    }     \\n   int n=s.size();\\n   \\n   int sum=0; \\n        \\n      int a=0;\\n   for(int i=0;i<k;i++){\\n       if(m[s[i]]>0){\\n           a++;\\n       }\\n    }\\n   \\n    sum=max(sum,a);\\n     int b=0;\\n   for(int i=k;i<n;i++){\\n       if(m[s[i]]>0){\\n           a++;\\n       }\\n       if(m[s[b]]>0){\\n           a--;\\n       }\\n       b++;\\n     sum=max(sum,a);  \\n   }  \\n     \\n     return sum;\\n  } \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1169774,
                "title": "javascript-faster-than-98-80-of-javascript-online-submissions",
                "content": "```\\nvar maxVowels = function (s, k) {\\n    let best = 0, count = 0;\\n    for (let i = 0; i < s.length; i++) {\\n        if (\"aeiou\".includes(s[i])) count++;\\n        if (i >= k && \"aeiou\".includes(s[i - k])) count--;\\n        best = Math.max(best, count);\\n    }\\n    return best;\\n};\\n```\\n\\nRuntime: 88 ms, faster than 98.80% of JavaScript online submissions for Maximum Number of Vowels in a Substring of Given Length.\\nMemory Usage: 41.6 MB, less than 91.57% of JavaScript online submissions for Maximum Number of Vowels in a Substring of Given Length.",
                "solutionTags": [],
                "code": "```\\nvar maxVowels = function (s, k) {\\n    let best = 0, count = 0;\\n    for (let i = 0; i < s.length; i++) {\\n        if (\"aeiou\".includes(s[i])) count++;\\n        if (i >= k && \"aeiou\".includes(s[i - k])) count--;\\n        best = Math.max(best, count);\\n    }\\n    return best;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1166993,
                "title": "sliding-window-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        int c=0,i=0,max=0;\\n        \\n        \\n        for( ; i<k ; i++)\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'|| s[i] == \\'o\\' || s[i] == \\'u\\' ) c++;\\n\\n        max=c;\\n      \\n        \\n        for( ; i<s.length() ; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'|| s[i] == \\'o\\' || s[i] == \\'u\\' ) c++;\\n            if(s[i-k] == \\'a\\' || s[i-k] == \\'e\\' || s[i-k] == \\'i\\'|| s[i-k] == \\'o\\' || s[i-k] == \\'u\\' ) c--;\\n            if(max<c)\\n                max=c;\\n            \\n            \\n        }\\n        \\n        return max;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        int c=0,i=0,max=0;\\n        \\n        \\n        for( ; i<k ; i++)\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'|| s[i] == \\'o\\' || s[i] == \\'u\\' ) c++;\\n\\n        max=c;\\n      \\n        \\n        for( ; i<s.length() ; i++)\\n        {\\n            if(s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'|| s[i] == \\'o\\' || s[i] == \\'u\\' ) c++;\\n            if(s[i-k] == \\'a\\' || s[i-k] == \\'e\\' || s[i-k] == \\'i\\'|| s[i-k] == \\'o\\' || s[i-k] == \\'u\\' ) c--;\\n            if(max<c)\\n                max=c;\\n            \\n            \\n        }\\n        \\n        return max;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1127928,
                "title": "sliding-window-o-n-solution",
                "content": "JAVA CODE IS:\\n# \\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n      Set<Character>vowel=Set.of(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\');\\n      int i=0,count=0,res=0;\\n      char arr[]=s.toCharArray();  \\n      for(int j=0;j<arr.length;j++){\\n          if(vowel.contains(s.charAt(j))) count++;\\n          while(j-i+1>k)\\n              if(vowel.contains(s.charAt(i++))) count--;\\n         res=Math.max(res,count);   \\n      }\\n        return res;\\n    }\\n}\\n```\\nTIME : O(n)\\nSPACE : O(n)\\n***PLEASE,UPVOTE IF THIS IS HELPFUL***",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n      Set<Character>vowel=Set.of(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\');\\n      int i=0,count=0,res=0;\\n      char arr[]=s.toCharArray();  \\n      for(int j=0;j<arr.length;j++){\\n          if(vowel.contains(s.charAt(j))) count++;\\n          while(j-i+1>k)\\n              if(vowel.contains(s.charAt(i++))) count--;\\n         res=Math.max(res,count);   \\n      }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1075818,
                "title": "java-sliding-window-beats-98-7ms-o-s-length",
                "content": "\\n    public int maxVowels(String s, int k) {\\n        int ptr1 = 0, ptr2 = 0, ans = 0, count = 0, len = s.length(), size = 0;\\n\\n\\t\\twhile (size < k - 1) {\\n\\t\\t\\tsize++;\\n\\t\\t\\tchar ch = s.charAt(ptr1);\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tptr1++;\\n\\t\\t}\\n\\n\\t\\twhile (ptr1 < len) {\\n\\n\\t\\t\\t// acquire\\n\\t\\t\\tsize++;\\n\\t\\t\\tchar ch = s.charAt(ptr1);\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tptr1++;\\n\\n\\t\\t\\tans = Math.max(ans, count);\\n\\t\\t\\t// release\\n\\t\\t\\tch = s.charAt(ptr2);\\n\\t\\t\\tsize--;\\n\\t\\t\\tptr2++;\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount--;\\n\\t\\t}\\n\\n\\t\\treturn ans;\\n    }\\n",
                "solutionTags": [],
                "code": "\\n    public int maxVowels(String s, int k) {\\n        int ptr1 = 0, ptr2 = 0, ans = 0, count = 0, len = s.length(), size = 0;\\n\\n\\t\\twhile (size < k - 1) {\\n\\t\\t\\tsize++;\\n\\t\\t\\tchar ch = s.charAt(ptr1);\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tptr1++;\\n\\t\\t}\\n\\n\\t\\twhile (ptr1 < len) {\\n\\n\\t\\t\\t// acquire\\n\\t\\t\\tsize++;\\n\\t\\t\\tchar ch = s.charAt(ptr1);\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tptr1++;\\n\\n\\t\\t\\tans = Math.max(ans, count);\\n\\t\\t\\t// release\\n\\t\\t\\tch = s.charAt(ptr2);\\n\\t\\t\\tsize--;\\n\\t\\t\\tptr2++;\\n\\t\\t\\tif (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n\\t\\t\\t\\tcount--;\\n\\t\\t}\\n\\n\\t\\treturn ans;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1006135,
                "title": "python-easy-to-undestand-sliding-window-using-deque",
                "content": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}\\n        curr, counts, ans = collections.deque(), 0, 0\\n        for a in s:\\n            if a in vowels:\\n                counts += 1\\n            curr.append(a)\\n            if len(curr) == k:\\n                ans = max(ans, counts)\\n                if curr[0] in vowels:\\n                    counts -= 1\\n                curr.popleft()\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Queue"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}\\n        curr, counts, ans = collections.deque(), 0, 0\\n        for a in s:\\n            if a in vowels:\\n                counts += 1\\n            curr.append(a)\\n            if len(curr) == k:\\n                ans = max(ans, counts)\\n                if curr[0] in vowels:\\n                    counts -= 1\\n                curr.popleft()\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 773413,
                "title": "clean-c-solution-sliding-window",
                "content": "```\\nbool isVowel(char c){\\n\\tif(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n\\t\\treturn true;\\n\\treturn false;\\n}\\nint maxVowels(string s, int k) {\\n\\tint maxCount = 0, c = 0;\\n\\tfor(int i=0; i < k; i++){\\n\\t\\tif(isVowel(s[i]))\\n\\t\\t\\tc++;\\n\\t}\\n\\tmaxCount = max(maxCount, c);\\n\\tfor(int i=k; i < s.size(); i++){\\n\\t\\tif(isVowel(s[i-k]))\\n\\t\\t\\tc--;\\n\\t\\tif(isVowel(s[i]))\\n\\t\\t\\tc++;\\n\\t\\tmaxCount = max(c, maxCount);\\n\\t}\\n\\n\\treturn maxCount;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool isVowel(char c){\\n\\tif(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n\\t\\treturn true;\\n\\treturn false;\\n}\\nint maxVowels(string s, int k) {\\n\\tint maxCount = 0, c = 0;\\n\\tfor(int i=0; i < k; i++){\\n\\t\\tif(isVowel(s[i]))\\n\\t\\t\\tc++;\\n\\t}\\n\\tmaxCount = max(maxCount, c);\\n\\tfor(int i=k; i < s.size(); i++){\\n\\t\\tif(isVowel(s[i-k]))\\n\\t\\t\\tc--;\\n\\t\\tif(isVowel(s[i]))\\n\\t\\t\\tc++;\\n\\t\\tmaxCount = max(c, maxCount);\\n\\t}\\n\\n\\treturn maxCount;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 689792,
                "title": "python-o-n-by-sliding-window-w-comment",
                "content": "Maintain a sliding window of size k to update max vowel count\\n\\n---\\n\\n**Implementation** by sliding window:\\n\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\n        vowels = { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' }\\n        \\n        substring = s[:k]\\n        \\n        vowel_count = sum( 1 for char in substring if char in vowels )\\n        \\n        # record for max vowel count in substring\\n        max_vowel_count = vowel_count\\n        \\n        \\n        # sliding window of size k\\n        for tail_index in range(k, len(s)):\\n            \\n            head_index = tail_index - k\\n            head_char, tail_char = s[head_index], s[tail_index]\\n            \\n            if head_char in vowels:\\n                vowel_count -= 1\\n                \\n            if tail_char in vowels:\\n                vowel_count += 1\\n                \\n            max_vowel_count = max( max_vowel_count, vowel_count)\\n            \\n        \\n        return max_vowel_count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Sliding Window",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        \\n        vowels = { \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\' }\\n        \\n        substring = s[:k]\\n        \\n        vowel_count = sum( 1 for char in substring if char in vowels )\\n        \\n        # record for max vowel count in substring\\n        max_vowel_count = vowel_count\\n        \\n        \\n        # sliding window of size k\\n        for tail_index in range(k, len(s)):\\n            \\n            head_index = tail_index - k\\n            head_char, tail_char = s[head_index], s[tail_index]\\n            \\n            if head_char in vowels:\\n                vowel_count -= 1\\n                \\n            if tail_char in vowels:\\n                vowel_count += 1\\n                \\n            max_vowel_count = max( max_vowel_count, vowel_count)\\n            \\n        \\n        return max_vowel_count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 649879,
                "title": "rust-sliding-window-4ms",
                "content": "A simple sliding window pattern: count vowels moving in and out of window with size `k`, and keep track of the maximum.\\n\\n```rust\\nimpl Solution {\\n    pub fn is_vowel(c: char) -> bool{\\n        [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'].iter().any(|&_c| c == _c)\\n    }\\n    pub fn max_vowels(s: String, k: i32) -> i32 {\\n        let k = k as usize;\\n        let mut res = 0; \\n        let mut cnt = 0; \\n        let cs = s.chars().collect::<Vec<_>>();\\n        for (i, c) in s.chars().enumerate() {\\n            if Self::is_vowel(c) { cnt +=1 ; }\\n            if i >= k && Self::is_vowel(cs[i-k]) { cnt -= 1;}\\n            res = max(res, cnt);\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn is_vowel(c: char) -> bool{\\n        [\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'].iter().any(|&_c| c == _c)\\n    }\\n    pub fn max_vowels(s: String, k: i32) -> i32 {\\n        let k = k as usize;\\n        let mut res = 0; \\n        let mut cnt = 0; \\n        let cs = s.chars().collect::<Vec<_>>();\\n        for (i, c) in s.chars().enumerate() {\\n            if Self::is_vowel(c) { cnt +=1 ; }\\n            if i >= k && Self::is_vowel(cs[i-k]) { cnt -= 1;}\\n            res = max(res, cnt);\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 649266,
                "title": "c-sliding-window",
                "content": "**Intuition:**\\n\\nCount the vowel in first window of length k and then keep on moving the window to the right. Check the character moving out the window.\\nIf outgoing character is vowel, reduce the count.  Add one to count if new incoming character is vowel.\\n\\n**Solution:**\\n\\n```\\nclass Solution {\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        int n = s.length();\\n        \\n        int i = 0, vcount = 0;\\n        for (i = 0; i < k; i++) {\\n            if (isVowel(s[i]))\\n                vcount++;\\n        }\\n        \\n        int res = vcount;\\n        for (; i < n; i++) {\\n            if (isVowel(s[i-k]))\\n                vcount--;\\n            if (isVowel(s[i]))\\n                vcount++;\\n            res = max(res, vcount);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\npublic:\\n    int maxVowels(string s, int k) {\\n        \\n        int n = s.length();\\n        \\n        int i = 0, vcount = 0;\\n        for (i = 0; i < k; i++) {\\n            if (isVowel(s[i]))\\n                vcount++;\\n        }\\n        \\n        int res = vcount;\\n        for (; i < n; i++) {\\n            if (isVowel(s[i-k]))\\n                vcount--;\\n            if (isVowel(s[i]))\\n                vcount++;\\n            res = max(res, vcount);\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648857,
                "title": "c-sliding-window-with-simple-pruning",
                "content": "Solution 1:\\n```\\nclass Solution {// Sliding Window\\npublic://Time/Space: O(N); O(1)\\n    int maxVowels(string_view s, int k) {\\n        static int dict[26]={1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\n        int ans = 0;\\n        for(int i = 0, cnt = 0; i < s.size() && ans < k; i++){   // ans < k is pruning          \\n            if(dict[s[i] - \\'a\\']) ans = max(ans, ++cnt);            \\n            if(i >= k - 1 && dict[s[i -k + 1]  - \\'a\\']) cnt--;            \\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\nSolution 2:\\n```\\nclass Solution {// Sliding Window\\npublic://Time/Space: O(N); O(1)\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> dict{\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        int ans = 0;\\n        for(int i = 0, cnt = 0; i < s.size() && ans < k; i++){  // ans < k is pruning \\n            if(dict.count(s[i])) cnt++;\\n            if(i >= k - 1) ans = max(ans, cnt);\\n            if(i >= k - 1 && dict.count(s[i -k + 1])) cnt--;            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {// Sliding Window\\npublic://Time/Space: O(N); O(1)\\n    int maxVowels(string_view s, int k) {\\n        static int dict[26]={1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};\\n        int ans = 0;\\n        for(int i = 0, cnt = 0; i < s.size() && ans < k; i++){   // ans < k is pruning          \\n            if(dict[s[i] - \\'a\\']) ans = max(ans, ++cnt);            \\n            if(i >= k - 1 && dict[s[i -k + 1]  - \\'a\\']) cnt--;            \\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {// Sliding Window\\npublic://Time/Space: O(N); O(1)\\n    int maxVowels(string s, int k) {\\n        unordered_set<char> dict{\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        int ans = 0;\\n        for(int i = 0, cnt = 0; i < s.size() && ans < k; i++){  // ans < k is pruning \\n            if(dict.count(s[i])) cnt++;\\n            if(i >= k - 1) ans = max(ans, cnt);\\n            if(i >= k - 1 && dict.count(s[i -k + 1])) cnt--;            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648378,
                "title": "clean-python-3-sliding-window",
                "content": "Time: `O(N)`\\nSpace: `O(1)`\\n```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = set(\\'aeiou\\')\\n        count, m = 0, 0\\n        for i, c in enumerate(s):\\n            count += (c in vowels)\\n            if i >= k: count -= (s[i-k] in vowels)\\n            m = max(m, count)\\n        return m\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxVowels(self, s: str, k: int) -> int:\\n        vowels = set(\\'aeiou\\')\\n        count, m = 0, 0\\n        for i, c in enumerate(s):\\n            count += (c in vowels)\\n            if i >= k: count -= (s[i-k] in vowels)\\n            m = max(m, count)\\n        return m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 648336,
                "title": "c-simple-sliding-window-solution",
                "content": "```\\nint maxVowels(string s, int k) {\\n    int n = s.size();\\n    int left = 0; int count = 0; int res = 0;\\n    for(int right = 0; right < n; ++right) {\\n        while (right - left + 1 > k) {\\n            if (isVowel(s[left])) count--;\\n            left++;\\n        }\\n        if (isVowel(s[right])) count++;\\n        res = max(res, count);\\n    }\\n    return res;\\n}\\nbool isVowel(char ch) {\\n    return ch == \\'a\\' || ch == \\'i\\' || ch == \\'u\\' || ch == \\'e\\' || ch == \\'o\\';\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nint maxVowels(string s, int k) {\\n    int n = s.size();\\n    int left = 0; int count = 0; int res = 0;\\n    for(int right = 0; right < n; ++right) {\\n        while (right - left + 1 > k) {\\n            if (isVowel(s[left])) count--;\\n            left++;\\n        }\\n        if (isVowel(s[right])) count++;\\n        res = max(res, count);\\n    }\\n    return res;\\n}\\nbool isVowel(char ch) {\\n    return ch == \\'a\\' || ch == \\'i\\' || ch == \\'u\\' || ch == \\'e\\' || ch == \\'o\\';\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051068,
                "title": "java-solution-o-n-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int i = 1;\\n        int j = k;\\n        int max = 0;\\n        int count = 0;\\n        HashSet<Character> hs = new HashSet<>();\\n\\n        hs.add(\\'a\\');\\n        hs.add(\\'e\\');\\n        hs.add(\\'i\\');\\n        hs.add(\\'o\\');\\n        hs.add(\\'u\\');\\n\\n        for(int l = 0; l < k; l++)\\n            if(hs.contains(s.charAt(l)))\\n                count++;\\n\\n        max = count;\\n\\n        while(j < s.length()){\\n            if(hs.contains(s.charAt(i-1)))\\n                count--;\\n            if(hs.contains(s.charAt(j)))\\n                count++;\\n            \\n            i++;\\n            j++;\\n            max = Math.max(count, max);\\n        }\\n\\n        return max;\\n    }\\n}\\n// UP-VOTE IF HELPFUL\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxVowels(String s, int k) {\\n        int i = 1;\\n        int j = k;\\n        int max = 0;\\n        int count = 0;\\n        HashSet<Character> hs = new HashSet<>();\\n\\n        hs.add(\\'a\\');\\n        hs.add(\\'e\\');\\n        hs.add(\\'i\\');\\n        hs.add(\\'o\\');\\n        hs.add(\\'u\\');\\n\\n        for(int l = 0; l < k; l++)\\n            if(hs.contains(s.charAt(l)))\\n                count++;\\n\\n        max = count;\\n\\n        while(j < s.length()){\\n            if(hs.contains(s.charAt(i-1)))\\n                count--;\\n            if(hs.contains(s.charAt(j)))\\n                count++;\\n            \\n            i++;\\n            j++;\\n            max = Math.max(count, max);\\n        }\\n\\n        return max;\\n    }\\n}\\n// UP-VOTE IF HELPFUL\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1882755,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882742,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883138,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882727,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1573805,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882776,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883045,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1750787,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882979,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883593,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882755,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882742,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883138,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882727,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1573805,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882776,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883045,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1750787,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1882979,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1883593,
                "content": [
                    {
                        "username": "yshrini",
                        "content": "### Rule Of Thumb:\n`Counting in substring` ==  `Sliding Window` Problem"
                    },
                    {
                        "username": "naga_k",
                        "content": "is this too easy or am i getting better?"
                    },
                    {
                        "username": "narasimhakamath",
                        "content": "It\\'s easier because you are getting better!"
                    },
                    {
                        "username": "Casardo",
                        "content": "[@psionl0](/psionl0) The more I leetcode, the easier it is to identify patterns. But I wonder how long I would take to figure this out some years ago haha"
                    },
                    {
                        "username": "abhishek8933",
                        "content": "you are getting better day by day man just keep up the hard work!! "
                    },
                    {
                        "username": "rajeshsingh505",
                        "content": "It\\'s easier. Even I coded in 5 min "
                    },
                    {
                        "username": "jaiyadav",
                        "content": "It\\'s easy bro"
                    },
                    {
                        "username": "barvin04",
                        "content": "You are getting better, champ!  \\uD83D\\uDCAA"
                    },
                    {
                        "username": "psionl0",
                        "content": "[@Casardo](/Casardo) It looks like you have mastered the sliding window too."
                    },
                    {
                        "username": "Casardo",
                        "content": "maybe both xD"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "\"Time Limit Exceeded\"\n\ns = \n\n^^ \nI even added \"if s == None:\n                          return None\"\n\nEdit: It also says 106/106 testcases passed but stops me here :( I want my hit of dopamine, dang it"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@njalgo](/njalgo) Understood. Thanks for pointing that out :)"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Got it! Thanks :)"
                    },
                    {
                        "username": "njalgo",
                        "content": "[@coderGtm](/coderGtm) Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(nkk) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "njalgo",
                        "content": "Try to differentiate between Brute force solution and Sliding Window. Brute force will cause TLE because its time complexity will be O(n*k*k) however Sliding Window solution will run in O(n)."
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) Your code isn't optimized. For each iteration of the for loop you are counting the number of vowels in the window from scratch. Refer to my [solution](https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3486544/java-sliding-window-8-lines-clean-simple/). You'll see that we don't need to go through all the elements in the window each time. We just need to check the first and last element for each iteration of `i`."
                    },
                    {
                        "username": "wuheuuu65",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) i\\'ve tried, it didn\\'t work"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Sure\n```\nclass Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        if s == None:\n            return 0\n        ans = 0\n        for i in range(len(s)-k+1):\n            window = s[i:i+k]\n            vovels = 0\n            vovels += window.count('a')\n            vovels += window.count('e')\n            vovels += window.count('i')\n            vovels += window.count('o')\n            vovels += window.count('u')\n            if vovels > ans:\n                ans = vovels\n\n        return ans\n```\n\nAlthough now it passed once after a few hours....but trying again gives TLE.\nStrange but my streak got saved : )"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) If there wasn\\'t 106/106 passed cases my money would be on me screwing up something but everything being passed makes it weird. Gonna report. Cheers."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "[@emrecoltu](/emrecoltu) maybe try reporting a bug? As the constraints say s.length should at-least be 1. A test case could be broken. \nRust doesn't have that test case, and a custom case with `s=` or `s=\"\"` fails as Invalid Testcase."
                    },
                    {
                        "username": "emrecoltu",
                        "content": "[@pratyushchoudhary57](/pratyushchoudhary57) I tried both, neither worked."
                    },
                    {
                        "username": "pratyushchoudhary57",
                        "content": "Did you try returning 0 instead of None?"
                    },
                    {
                        "username": "emrecoltu",
                        "content": "I\\'m having the same problem. Tried many tweaks but still 106/106 passed hits TLE with \"s=\""
                    },
                    {
                        "username": "judgementdey",
                        "content": "[@coderGtm](/coderGtm) can you post your solution code here?"
                    },
                    {
                        "username": "coderGtm",
                        "content": "[@judgementdey](/judgementdey) Tried comparing both (even trimmed version of string) but still shows TLE...even after passing 106/106 test cases"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "[@judgementdey](/judgementdey) s is null/None I believe. If it were an empty string it would be s = \"\", but it just says s ="
                    },
                    {
                        "username": "judgementdey",
                        "content": "Is s null or an empty string in the test cae?"
                    },
                    {
                        "username": "UchihaKim",
                        "content": "I was worried about tackling a difficult problem, but I'm grateful that LeetCode presented a manageable challenge this time. thank you!!!\nEdit: I know what's waiting for us tomorrow, but let's celebrate what we have now."
                    },
                    {
                        "username": "Jobababa",
                        "content": "so much cheerful"
                    },
                    {
                        "username": "xu932",
                        "content": "it is a straight forward rolling window with no tricks"
                    },
                    {
                        "username": "BrownCarter",
                        "content": "i did that but am getting TLE"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "I have a straightforward implementation but it is double counting lol. Not that simple."
                    },
                    {
                        "username": "muskankdkd",
                        "content": "Should have been easy "
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "This should be easy so that more people can approach it. Many people just see the medium tag and assume its too hard for them, while this is actually and easy question."
                    },
                    {
                        "username": "_teh_",
                        "content": "[@anubhavanand](/anubhavanand) sliding window is easy the real challenge for beginners is the \"Time Limit Exceeded\" one"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "I agree, but sliding window approach would be medium easy for beginners"
                    },
                    {
                        "username": "ajinkode",
                        "content": "A typical Sliding Window problem."
                    },
                    {
                        "username": "Msey",
                        "content": "I\\'d say it\\'s a \"getting started\" with sliding window problems"
                    },
                    {
                        "username": "dtaskara",
                        "content": "Someone explain me please why \"weallloveyou\" is 4 vowels ? But \"rhythms\" is 0 vowels ? \\n\\nFrom task description:\\n\"Vowel letters in English are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\'.\""
                    },
                    {
                        "username": "harsh_na710",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) how weallloveyou has 4 vowel length in obtained subset "
                    },
                    {
                        "username": "dtaskara",
                        "content": "[@chiragsanghvi18](/chiragsanghvi18) thank you ,it was my mistake ,i confused length of substring"
                    },
                    {
                        "username": "chiragsanghvi18",
                        "content": "if you check the last substring of \"weallloveyou\" i.e. \"loveyou\" you will find 4 vowels, \"o\",\"e\",\"o\",\"u\"\\nand in rhythms there are no vowels at all at any place, so 0 vowels."
                    },
                    {
                        "username": "StopNGo",
                        "content": "JS/TS: using RegExp('a|e|i|o|u','g') leads to the Time Limit Exceeded error in the 102nd (from 106) test case.\nJust in case :)"
                    },
                    {
                        "username": "dineshreddy0521",
                        "content": "same bro"
                    }
                ]
            },
            {
                "id": 1897058,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883621,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1882948,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1997228,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1979351,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883709,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883678,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883492,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883114,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1883038,
                "content": [
                    {
                        "username": "Ayushas1525",
                        "content": "Can anybody tell me  that how s=\"weallloveyou\" and k=7 has ouput 4?\\n"
                    },
                    {
                        "username": "Jaga-11",
                        "content": "[@kunjanvaghela](/kunjanvaghela) \\nI encountered with this issue ,try to traverse with this as range \\n```\\n for(int i=0;i<=s.length()-k;i++){\\n}\\n```"
                    },
                    {
                        "username": "kunjanvaghela",
                        "content": "k is substring length. So in the substring \\'loveyou\\', there are 4 vowels [o,e,o,u].\\nNote that we have to check for maximum number of vowels in substring of given length only for the input string s."
                    },
                    {
                        "username": "parmarrinila2002",
                        "content": "Same bruh, I am also not getting that testcase."
                    },
                    {
                        "username": "macrescu",
                        "content": "The \"hard\" part of this one is making it in a single for loop."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "its a straight forward, sliding window question.\\n5 easy questions in a row or am I becoming good coder?"
                    },
                    {
                        "username": "swapedoc",
                        "content": "I was getting memory limit exceeded for my implementation as I was passing the string by value in function to check if its a vowel . Lesson there: Always pass string by reference when doing read only operations atleast. a 10k size string when passed by value , exceeds 1-8MB memory of stack and you will get Memory limit exceeded error"
                    },
                    {
                        "username": "verticalcow",
                        "content": "it do be slidy windoh"
                    },
                    {
                        "username": "the_kalakar",
                        "content": "This felt super easy, and I am sure we are going to have a \"Hard\" tomorrow. Leetcode never fails us :)"
                    },
                    {
                        "username": "eric1152001",
                        "content": "I used closure instead of for loop, and regex to check but still reach Time Limit Exceeded at testcase 102. Any other ways could I try? Thank you"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "Try a two pointer sliding window approach."
                    },
                    {
                        "username": "natitati",
                        "content": "Brace yourself guys... Hard graph dp problem coming tommorow"
                    },
                    {
                        "username": "ikorpse",
                        "content": "tasks on weekend are going to be brutal"
                    },
                    {
                        "username": "layyy",
                        "content": "Should have written easy for this problem"
                    }
                ]
            },
            {
                "id": 1882795,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1882791,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1882764,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1882746,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 2038433,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 2038067,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1998952,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1994248,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1987117,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1947305,
                "content": [
                    {
                        "username": "gadmo",
                        "content": "level is clearly not medium "
                    },
                    {
                        "username": "Panda_2397",
                        "content": "is it possible to do with dynamic programming if the given s.length is only 10^4"
                    },
                    {
                        "username": "namandt",
                        "content": "sliding window inherently dynamic in sense"
                    },
                    {
                        "username": "Casardo",
                        "content": "shouldnt it be easy?"
                    },
                    {
                        "username": "psionl0",
                        "content": "Not unless you are familiar with the sliding window approach."
                    },
                    {
                        "username": "jekatigr",
                        "content": "Pattern broken!\\n\\neasy-easy-easy-medium-~hard~-hard-hard"
                    },
                    {
                        "username": "partTime",
                        "content": "why this gives TLE\n\nbool isvowel(char ch){\n     return ch=='a' || ch=='e' || ch == 'i' || ch =='o'|| ch== 'u';\n }\n    int maxVowels(string s, int k) {\n        queue<char>q;\n     int count = 0;\n        //process first k size window\n        for(int i= 0;i<k;i++){\n            if(isvowel(s[i])){\n                count++;\n            }       \n         q.push(s[i]);\n        }\n          int maxi =INT_MIN;\n          maxi = max(maxi,count);\n          count = 0;\n          for(int i = k;i<s.length();i++){\n               q.pop();\n               q.push(s[i]);\n               int k1 = k;\n             while(!q.empty() and k--){\n               char ch = q.front();\n               if(isvowel(ch)){\n                   count++;\n               }\n               q.pop();\n               q.push(ch); \n           }\n           k = k1;\n           maxi = max(maxi,count);\n           count = 0;\n\n          }       \n         // process\n\nreturn maxi;\n    }\n}; \n"
                    },
                    {
                        "username": "lordrsling",
                        "content": "C#: I think I wrote really optimized code but I have Time Limit Exceeded. Passed 99/106. Any help appreciated.\\n```    \\n    public int MaxVowels(string s, int k) {\\n        int max = 0;\\n        int curr = 0;\\n        Func<char, int> vowels = c=>(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')?1:0;\\n \\n        for (int i = 0; i < k; ++i) {\\n            curr+=vowels(s[i]);\\n        }\\n        max = curr;\\n        \\n        for (int i = k; i < s.Count(); ++i) {\\n           curr+=vowels(s[i]);\\n           curr-=vowels(s[i-k]);\\n           if (curr>max) max=curr;\\n        }\\n        return max;\\n    }\\n```"
                    },
                    {
                        "username": "lordrsling",
                        "content": "Ok I found it. Apparently .Count() takes much longer that .Length.\\nThat was it. Crazy."
                    },
                    {
                        "username": "Eckhart01",
                        "content": "should be Easy instead of Medium"
                    },
                    {
                        "username": "parth33998",
                        "content": "class Solution {\\n\\n    public boolean isVowel(Character ch)\\n    {\\n        if(ch==\\'a\\'||ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n    public int maxVowels(String s, int k) {\\n\\n        int i=0; \\n        int j=0;\\n\\n        int max=0;\\n        int count=0;\\n\\n        while(j<s.length())\\n        {\\n                if(isVowel(s.charAt(j)))\\n                count++;\\n        }\\n        while(j-i+1>k)\\n        {\\n            if(isVowel(s.charAt(i)))\\n            \\n                count--;\\n                i++;\\n                j++;\\n            \\n        }\\n        max= Math.max(count,max);\\n        j++;\\n\\n\\n        return max;\\n        \\n    }\\n}\\n\\n\\n\\nIts showing TLE ......\\n\\nAnyone ? correct me where i went wrong. "
                    },
                    {
                        "username": "Jobababa",
                        "content": "Can you describe more about what you want to do with both while-loops?"
                    },
                    {
                        "username": "espinosarennieljun",
                        "content": "I thought I\\'m the only one who thinks that this problem is too easy. But we are just getting better so keep it up cheers to all leetcoders\\uD83C\\uDF7B"
                    },
                    {
                        "username": "cycv5",
                        "content": "This one is an easy question but on the harder end. \\nSimilar to [643. Maximum Average Subarray I](https://leetcode.com/problems/maximum-average-subarray-i/description/)"
                    }
                ]
            },
            {
                "id": 1931673,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1928898,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1899979,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1884040,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883991,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883956,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883896,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883880,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883783,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883640,
                "content": [
                    {
                        "username": "Shashank2707",
                        "content": "C++ Simple and real optimized solution Time complexity O(n) and Space complexity O(1). Without using any extra space. \\n\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c)\\n    {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n        return true;\\n       return false;\\n    }\\n    int maxVowels(string s, int k) {\\n        \\n        int count = 0,maxcount = 0;\\n        for(int i=0;i<k;i++)\\n        {\\n           if(isVowel(s[i]))\\n           count++;\\n        }\\n        maxcount = count;\\n\\n        for(int i=0;i<s.length() - k; i++)\\n        {\\n            if(!isVowel(s[i]) && isVowel(s[i+k]))\\n            {\\n                count = count + 1;\\n            }\\n            else if(isVowel(s[i]) && !isVowel(s[i+k]))\\n            {\\n                count = count - 1;\\n            }\\n            else{\\n                \\n                count = count;\\n            }\\n            maxcount = max(maxcount,count);\\n        }\\n        return maxcount;\\n    }\\n};\\n"
                    },
                    {
                        "username": "TeoMeo",
                        "content": "Finally got a medium with no hints"
                    },
                    {
                        "username": "sainath81061",
                        "content": "//using program in c#...\\npublic class Solution {\\n    public int MaxVowels(string s, int k) {\\n        int i,count=0,max=0;\\n\\n       for(i=0;i< s.Length;i++){\\n           count = count + IsVowel(s[i]);\\n           if(i >= k){\\n               count = count - IsVowel(s[i - k]);               \\n           }\\n           max = Math.Max(max , count);\\n       }\\n       return max;\\n    }\\n    public int IsVowel(char ch){\\n        if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n        {\\n            return 1;\\n        }\\n        else\\n        {\\n            return 0;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "rahpuser",
                        "content": "Somebody knows why the \"beats %\" change if I just resubmit the same code.. it changes kind of randomly, somethings go up and sometimes go down, I don\\'t think that a lot of people is pushing new versions, I suspect that the run is not fully isolated or regular each time.. anybody knows ? I\\'m starting to think that that metrics is worthless.. do you know a tool that calculate big O notation based on code ? "
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "Standard problem of fixed sized sliding window ,\ntraverse , if finding  vowels maintain the count .\nmain observation is what would you do with count when window size is exceeded .\ngood problem for practice \n"
                    },
                    {
                        "username": "macrescu",
                        "content": "I just do not get how can I get pass the 102nd (from 106) test at which it says the time limit exceeded. I use only one for loop."
                    },
                    {
                        "username": "StopNGo",
                        "content": "Probably you are using some standard search/match function that of course has its own loops"
                    },
                    {
                        "username": "RDX0160",
                        "content": "I\\'m getting a runtime error, but the code runs on my IDE?"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "Any Idea why I am getting this error ?\\n`process exited with Signal SIGSEGV` \\n"
                    },
                    {
                        "username": "MrBeverage",
                        "content": "I\\'ll concur that I\\'m surprised this is in the Medium category, but judging from a lot of comments in the discussion it may just be that for a lot of us we might be particularly good at sliding window problems.  I am always happy when I see them come up as Mediums.\\n\\nFor those that are struggling, don\\'t forget you need to update two values as you slide over the word, not one."
                    },
                    {
                        "username": "Ayush_Singh_610",
                        "content": "Is it just me or anyone else getting crash report while adding more test case using the source ?"
                    }
                ]
            },
            {
                "id": 1883611,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883590,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883390,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883341,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883336,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883267,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883218,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883199,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883126,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883091,
                "content": [
                    {
                        "username": "juleshwar",
                        "content": "### Testcases I tested with\n```\n\"abciiidef\"\n3\n\"aeiou\"\n2\n\"leetcode\"\n3\n\"aeiuo\"\n5\n\"smaoortooo\"\n7\n\"ooookaushdikuashas\"\n4\n\"singasong\"\n1\n\"singasong\"\n2\n\"abciiidef\"\n9\n\"a\"\n1\n\"ab\"\n1\n\"ba\"\n1\n```"
                    },
                    {
                        "username": "beresnw",
                        "content": "I need help. where I did wrong. The test fails, returns \"Time Limit Exceeded\" :(\n\nl = len(s)\n        max_number, number = 0, 0\n        for i in range(l):\n            number = 0\n            for m in range(i, i + k):\n                if m + 1 <= l:\n                    if s[m] in 'aeiou':\n                        number += 1\n                max_number = max(max_number, number) \n        return max_number"
                    },
                    {
                        "username": "beresnw",
                        "content": "[@macrescu](/macrescu) hm, thank u. remember it for the future"
                    },
                    {
                        "username": "macrescu",
                        "content": "You have 2 for loops, that is why. Try to do it only with only one."
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "People who found this problem too easy can attempt Maximum White Tiles Covered By Carpet. Its part of similar questions of this question."
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "class Solution {\\npublic:\\n    int maxVowels(string s, int k) {\\n       int n=s.size();\\n       int j=0;\\n       int l=k;\\n       int count=0;\\n        while(j<n && l<n){\\n             int c=0;\\n           for(int i=j;i<l;i++){\\n              if(s[i]==\\'a\\'|| s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\'){\\n                   c++;\\n               }\\n            }\\n           count=max(count,c);\\n           j++;\\n           l++;\\n\\n        }\\n        return count;\\n     }\\n};\\n\\n\\nDoes anyone know why this code is not working ?"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@Krishrx](/Krishrx) thank you :)"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616)  Keep a variable to store the number of vowels in the previous substring and from that try to compute the vowel count for current window.\nThere is a slight change you need to make [@Pankhuri Srivastava](/pankhurishrivastava)\nCheck out my Solution its in java but you'll understand \nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488395/simple-self-understandable-java-code-o-n/?orderBy=most_votes\nLet me know if you have any doubts :)"
                    },
                    {
                        "username": "pankhurishrivastava",
                        "content": "[@tiwaridiwakar616](/tiwaridiwakar616) i am using two loops that\\'s why its getting TLE. i think we have to optimize the code."
                    },
                    {
                        "username": "tiwaridiwakar616",
                        "content": "[@Krishrx](/Krishrx) how can we tackle that TLE"
                    },
                    {
                        "username": "Krishrx",
                        "content": "[@Pankhuri Srivastava](/pankhurishrivastava)The while condition should be  while(l<=n) now the code works\nbut still you'll get a TLE !"
                    },
                    {
                        "username": "Krishrx",
                        "content": "For the first time solving POTD 5 days in a row :)"
                    },
                    {
                        "username": "shashwat963",
                        "content": "this problem can be solved using sliding window algorithm.\\nfor complete explaination with visuals check out my solution-https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3488278/c-with-image-explanation-100-faster-and-95-less-memory-using-sliding-window-algorithm/"
                    },
                    {
                        "username": "SuriyaT",
                        "content": "how to use sliding window method for long string ..i got TimeLimit Exceeded 102/106 cases passed .\\npls Let me know"
                    },
                    {
                        "username": "chailattewithcream",
                        "content": "Have u actually adopted sliding window? I don't see how else u'd get TLE. Are you counting the number of vowels from scratch every time u get a new window? If u just add the incoming letter and remove the outgoing letter you should get AC."
                    },
                    {
                        "username": "judgementdey",
                        "content": "You must be doing some sub optimal operation in your code. Sliding window by itself as a concept works fine to solve this problem."
                    },
                    {
                        "username": "Coder_Rookie08",
                        "content": "Can someone tell is it good to write a code with more lines , or the same code in few lines .\nwell I am not a expert but  I see people writing short codes , should I also develop  a habit of writing code in fewer lines , or is it enough to focus on only Time and space complexity"
                    },
                    {
                        "username": "judgementdey",
                        "content": "Focus on optimizing time and space complexity first. Short code is only for better readability. It is an added bonus if you can write short and simple code, but is not an absolute necessity to succeed in interviews."
                    },
                    {
                        "username": "Mjashwanth",
                        "content": "Every time check a character is vowel or not.If it is a vowel then increase your count of vowel.When the substring size is greater than or equal to given value k you can find max vowels in the substring in each pass, after that find the first character of the substring is vowel or not.If it is vowel then decrease the count of vowel for the next pass.\\n\\nApproach\\nExample str = \"abciiidef\" k=\\'3\\'\\nwhen our pointer at \\'c\\' the index value is 2 & substring is \"abc\" now number of vowels are 1.\\nNow before going to next pass we have to check the first character of our substring is vowel or not.Our substring is \"abc\" our first character is \\'a\\' it is vowel so we have to decrease the count of vowel by one.Now our vowel count is 0.\\nIn next step our substring is \"bci\" number of vowels are now 1 because we have vowel at \\'3rd\\' index i.e \\'i\\'.\\nWe have to follow the above step till end of the string , we get max vowels of substring as \\'3\\' i.e \"iii\"."
                    },
                    {
                        "username": "anubhavanand",
                        "content": "Leet code is simply changing the tag of question to medium this week, while the questions are still easy in daily challenge.\\nMINDGAME!"
                    }
                ]
            },
            {
                "id": 1883065,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1883053,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1883051,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882988,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882942,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882907,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882898,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882868,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882858,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            },
            {
                "id": 1882821,
                "content": [
                    {
                        "username": "pushpendra3000",
                        "content": "In the question is explicitly mentioned that length of substring should be of length k. However, in the testcases, it is also counting substrings whose length is less than k.\\n\\nPlease correct this. "
                    },
                    {
                        "username": "gc-leetcode",
                        "content": "there cannot be a substring with length < k that has more vowels than a the max substring of length k..."
                    },
                    {
                        "username": "Peet_code",
                        "content": "it\\'s medium  easy problem"
                    },
                    {
                        "username": "dineshkumar_1708",
                        "content": "what would be the required TC ?"
                    },
                    {
                        "username": "anubhavanand",
                        "content": "O(n)"
                    },
                    {
                        "username": "Xoxo_szn",
                        "content": "Medium Question on a change,  I think I\\'m getting better :)"
                    },
                    {
                        "username": "rrabbi",
                        "content": "Tried the naïve approach but did not pass the 102nd test case haha\nGot to know about the sliding window algorithm for the first time through discussion, pretty straight forward from there!"
                    },
                    {
                        "username": "rahulrauki",
                        "content": "LC gods have shown mercy this week"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "Looks like easy problem under sliding window\n```String         CurrentVowelCount\nabciiidef      0 //initially\nabc            0+1(a)\n bci           1+1(i) -1(a)=1\n  cii          1+1(i) =2\n   iii         2+1(i) =3    (maximum -> Answer)\n    iid        3-1(i) =2\n     ide       2-1(i)+1(e) =2\n      def      2-1(i) =1  ```\n\nPlease try to solve yourself first and can refer hint and solution to the problem:\nhttps://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/3487005/easy-java-sliding-window-approach/"
                    },
                    {
                        "username": "jayamrutkar",
                        "content": "leetcode will put bigger hard problems on month end..."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "#### Leetcode Planning Big for this Weekend!"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "EASY Sliding Window. No trick applied. It works with simple and intuitive approach "
                    },
                    {
                        "username": "SuyashSingh_1",
                        "content": "Use Sliding window."
                    }
                ]
            }
        ]
    }
]