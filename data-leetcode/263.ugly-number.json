[
    {
        "title": "Ugly Number",
        "question_content": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.\n&nbsp;\nExample 1:\n\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 &times; 3\n\nExample 2:\n\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\nExample 3:\n\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.\n\n&nbsp;\nConstraints:\n\n\t-231 <= n <= 231 - 1",
        "solutions": [
            {
                "id": 69214,
                "title": "2-4-lines-every-language",
                "content": "Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1. Also try divisor 4 if that makes the code simpler / less repetitive.\\n\\n**C++ / C**\\n\\n    for (int i=2; i<6 && num; i++)\\n        while (num % i == 0)\\n            num /= i;\\n    return num == 1;\\n\\n**Ruby**\\n\\n    (2..5).each { |i| num /= i while num % i == 0 } if num > 0\\n    num == 1\\n\\nOr:\\n\\n    require 'prime'\\n    num > 0 && num.prime_division.all? { |p, _| p < 6 }\\n\\n**Python**\\n\\n    for p in 2, 3, 5:\\n        while num % p == 0 < num:\\n            num /= p\\n    return num == 1\\n\\n**Java / C#**\\n\\n    for (int i=2; i<6 && num>0; i++)\\n        while (num % i == 0)\\n            num /= i;\\n    return num == 1;\\n\\n**Javascript**\\n\\n    for (var p of [2, 3, 5])\\n        while (num && num % p == 0)\\n            num /= p;\\n    return num == 1;\\n\\n---\\n\\n**General**\\n\\nWould be a bit cleaner if I did the zero-test outside, and discarding negative numbers right away can speed things up a little, but meh... I don't want to add another line and indentation level :-)\\n\\n    if (num > 0)\\n        for (int i=2; i<6; i++)\\n            while (num % i == 0)\\n                num /= i;\\n    return num == 1;",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python"
                ],
                "code": "Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1. Also try divisor 4 if that makes the code simpler / less repetitive.\\n\\n**C++ / C**\\n\\n    for (int i=2; i<6 && num; i++)\\n        while (num % i == 0)\\n            num /= i;\\n    return num == 1;\\n\\n**Ruby**\\n\\n    (2..5).each { |i| num /= i while num % i == 0 } if num > 0\\n    num == 1\\n\\nOr:\\n\\n    require 'prime'\\n    num > 0 && num.prime_division.all? { |p, _| p < 6 }\\n\\n**Python**\\n\\n    for p in 2, 3, 5:\\n        while num % p == 0 < num:\\n            num /= p\\n    return num == 1\\n\\n**Java / C#**\\n\\n    for (int i=2; i<6 && num>0; i++)\\n        while (num % i == 0)\\n            num /= i;\\n    return num == 1;\\n\\n**Javascript**\\n\\n    for (var p of [2, 3, 5])\\n        while (num && num % p == 0)\\n            num /= p;\\n    return num == 1;\\n\\n---\\n\\n**General**\\n\\nWould be a bit cleaner if I did the zero-test outside, and discarding negative numbers right away can speed things up a little, but meh... I don't want to add another line and indentation level :-)\\n\\n    if (num > 0)\\n        for (int i=2; i<6; i++)\\n            while (num % i == 0)\\n                num /= i;\\n    return num == 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 69225,
                "title": "my-2ms-java-solution",
                "content": "    public boolean isUgly(int num) {\\n        if(num==1) return true;\\n        if(num==0) return false;\\n    \\twhile(num%2==0) num=num>>1;\\n    \\twhile(num%3==0) num=num/3;\\n    \\twhile(num%5==0) num=num/5;\\n        return num==1;\\n    }",
                "solutionTags": [],
                "code": "    public boolean isUgly(int num) {\\n        if(num==1) return true;\\n        if(num==0) return false;\\n    \\twhile(num%2==0) num=num>>1;\\n    \\twhile(num%3==0) num=num/3;\\n    \\twhile(num%5==0) num=num/5;\\n        return num==1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2825504,
                "title": "python3-one-liner-o-1",
                "content": "**Supper cool O(1) one-liner** from [chuilinux](https://leetcode.com/problems/ugly-number/discuss/69232/Python%3A-1-line-solution)\\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        return False if n<=0 else (2*3*5)**32 % n == 0\\n```\\n\\n**A normal O(log N) algorithm:**\\n(1) ```n``` needs to be a positive integer, so return False ```if n<=0```.\\n(2) divide ```n``` by ```2,3,5``` as much as possible to see if there are any other prime factor left.\\n**Time complexity:** O (log n) since there are at most log n divisions.\\n\\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        while n%2==0: n/=2\\n        while n%3==0: n/=3\\n        while n%5==0: n/=5\\n        return n==1\\n```\\n\\n**Skip the iteration for 2**, and check if ```n``` is the power of 2 at the end.\\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        while n%3==0: n//=3\\n        while n%5==0: n//=5\\n        return ( n & (n-1) ) == 0\\n```\\n\\n**O(logN\\\\*logN\\\\*logN)** To make it more inefficient and longer.\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        @cache\\n        def dfs(cur):\\n            if cur==n: return True\\n            if cur>n: return False\\n            for k in (5,3,2):\\n                if dfs(cur*k): return True\\n        return dfs(1)\\n```\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        return False if n<=0 else (2*3*5)**32 % n == 0\\n```\n```n```\n```if n<=0```\n```n```\n```2,3,5```\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        while n%2==0: n/=2\\n        while n%3==0: n/=3\\n        while n%5==0: n/=5\\n        return n==1\\n```\n```n```\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        while n%3==0: n//=3\\n        while n%5==0: n//=5\\n        return ( n & (n-1) ) == 0\\n```\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: return False\\n        @cache\\n        def dfs(cur):\\n            if cur==n: return True\\n            if cur>n: return False\\n            for k in (5,3,2):\\n                if dfs(cur*k): return True\\n        return dfs(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825523,
                "title": "c-easy-to-understand-explained",
                "content": "![image](https://assets.leetcode.com/users/images/05372639-7b10-4a4b-adb9-d37e8dd7d302_1668731694.9255648.jpeg)\\n\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) \\n    {\\n        if (n <= 0) return false;\\n        while(n > 1)\\n        {\\n            if (n % 2 == 0) n = n / 2;\\n            else if (n % 3 == 0) n = n / 3;\\n            else if (n % 5 == 0) n = n / 5;\\n            else break;\\n        }\\n        return (n == 1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) \\n    {\\n        if (n <= 0) return false;\\n        while(n > 1)\\n        {\\n            if (n % 2 == 0) n = n / 2;\\n            else if (n % 3 == 0) n = n / 3;\\n            else if (n % 5 == 0) n = n / 5;\\n            else break;\\n        }\\n        return (n == 1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 69305,
                "title": "my-python-solution",
                "content": "\\n    def isUgly(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num <= 0:\\n            return False\\n        for x in [2, 3, 5]:\\n            while num % x == 0:\\n                num = num / x\\n        return num == 1",
                "solutionTags": [],
                "code": "\\n    def isUgly(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num <= 0:\\n            return False\\n        for x in [2, 3, 5]:\\n            while num % x == 0:\\n                num = num / x\\n        return num == 1",
                "codeTag": "Python3"
            },
            {
                "id": 69332,
                "title": "simple-java-solution-with-explanation",
                "content": "    public boolean isUgly(int num) {\\n        if (num <= 0) {return false;}\\n        if (num == 1) {return true;}\\n        if (num % 2 == 0) {\\n            return isUgly(num/2);\\n        }\\n        if (num % 3 == 0) {\\n            return isUgly(num/3);\\n        }\\n        if (num % 5 == 0) {\\n            return isUgly(num/5);\\n        }\\n        return false;\\n    }\\n\\n\\n----------\\nidea: \\n\\n - (1) basic cases: <= 0 and == 1\\n - (2) other cases: since the number can contain the factors of 2, 3, 5, I just remove those factors. So now, I have a number without any factors of 2, 3, 5. \\n - (3) after the removing, the number (new number) can contain a) the factor that is prime and meanwhile it is >= 7, or b) the factor that is not the prime and the factor is not comprised of 2, 3 or 5. In both cases, it is false (not ugly number). \\n\\nFor example, new number can be 11, 23 --> not ugly number (case a)). new number also can be 49, 121 --> not ugly number (case b))",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public boolean isUgly(int num) {\\n        if (num <= 0) {return false;}\\n        if (num == 1) {return true;}\\n        if (num % 2 == 0) {\\n            return isUgly(num/2);\\n        }\\n        if (num % 3 == 0) {\\n            return isUgly(num/3);\\n        }\\n        if (num % 5 == 0) {\\n            return isUgly(num/5);\\n        }\\n        return false;\\n    }\\n\\n\\n----------\\nidea: \\n\\n - (1) basic cases: <= 0 and == 1\\n - (2) other cases: since the number can contain the factors of 2, 3, 5, I just remove those factors. So now, I have a number without any factors of 2, 3, 5. \\n - (3) after the removing, the number (new number) can contain a) the factor that is prime and meanwhile it is >= 7, or b) the factor that is not the prime and the factor is not comprised of 2, 3 or 5. In both cases, it is false (not ugly number). \\n\\nFor example, new number can be 11, 23 --> not ugly number (case a)). new number also can be 49, 121 --> not ugly number (case b))",
                "codeTag": "Unknown"
            },
            {
                "id": 69308,
                "title": "java-solution-greatest-divide-by-2-3-5",
                "content": "clean solution to greatest divide the num using 2, 3, and 5.\\n\\n    public class Solution {\\n        public static boolean isUgly(int num) {\\n            if (num <= 0) {\\n                return false;\\n            }\\n            \\n            int[] divisors = {2, 3, 5};\\n            \\n            for(int d : divisors) {\\n                while (num % d == 0) {\\n                    num /= d;\\n                }\\n            }\\n            return num == 1;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public static boolean isUgly(int num) {\\n            if (num <= 0) {\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 69353,
                "title": "simple-c-solution",
                "content": "    bool isUgly(int num) {\\n        if(num == 0) return false;\\n        \\n        while(num%2 == 0) num/=2;\\n        while(num%3 == 0) num/=3;\\n        while(num%5 == 0) num/=5;\\n        \\n        return num == 1;\\n    }",
                "solutionTags": [],
                "code": "    bool isUgly(int num) {\\n        if(num == 0) return false;\\n        \\n        while(num%2 == 0) num/=2;\\n        while(num%3 == 0) num/=3;\\n        while(num%5 == 0) num/=5;\\n        \\n        return num == 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2825480,
                "title": "python-c-java-rust-apply-2nd-3rd-5th-grades-school-arithmetics-bonus-one-liner-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs simple school arithmetics. Time complexity is logarithmic: **O(logN)**. Space complexity is constant: **O(1)**.\\n****\\n\\n**Comment.** Numbers we\\'re looking for are precisely those of the form `n = 2**i * 3**j * 5**k` (where `**` is Python\\'s power operator), i.e., `2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, ...` . To detect such a number, we should (completely) divide out each of it\\'s prime divisors (i.e., `2`, `3` and `5`) and see what remains. If it\\'s `1` then it\\'s ugly :) \\n\\n**Proof of complexity.** When dividing out factors `2`, `3` and `5`, the amount of operations performed is equal to the sum `i + j + k` where `i`,`j` and `k` are the respective powers in the prime number decomposition of `n`. The following is true: `n = 2**i * 3**j * 5**k <= 5**(i+j+k)`, thus, we conclude that the time complexity is logarithmic **O(logN)**, because it\\'ll take at most `i+j+k` steps (i.e. the logarithm of `n`) for the algorithm to terminate.\\n\\n**Python #1.** Dividing out each of primes.\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\t\\tif n == 0 : return False\\n        for p in 2, 3, 5:\\n            while n % p == 0:     # if divisible by a prime...\\n                n /= p            # ...then divide it out\\n        return n == 1             # non-ugly numbers will have it != 1\\n```\\n\\n**Python #2.** Using the walrus operator with `pass` instead of the cycle body. Compare this to the C++ solution below.\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\n        for p in 2, 3, 5: \\n            while n % p == 0 and (n := n / p):\\n                pass\\n        return n == 1\\n```\\n\\n<iframe src=\"https://leetcode.com/playground/fwk2ULog/shared\" frameBorder=\"0\" width=\"800\" height=\"260\"></iframe>\\n\\n**\\u2705 YOU MADE IT TILL THE BONUS SECTION... YOUR GREAT EFFORT DESERVES UPVOTING THIS POST!**\\n\\n**Python.** If `n` is of the form `2**i * 3**j * 5**k` then, given a constraint `n < 2**31 - 1`, it should be a divisor of this enormous number. Thanks Python, large-number arithmetics is here by default.\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        return n > 0 and (2**30)*(3**20)*(5**13) % n == 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\t\\tif n == 0 : return False\\n        for p in 2, 3, 5:\\n            while n % p == 0:     # if divisible by a prime...\\n                n /= p            # ...then divide it out\\n        return n == 1             # non-ugly numbers will have it != 1\\n```\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\n        for p in 2, 3, 5: \\n            while n % p == 0 and (n := n / p):\\n                pass\\n        return n == 1\\n```\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        return n > 0 and (2**30)*(3**20)*(5**13) % n == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 698739,
                "title": "c-100-time-easy-and-explained-solution",
                "content": "The idea is simple; you have a base of 3 prime numbers conveniently stored in `primes`, you loop through them, progressively reducing the initially provided number, if and only as long each of the primes is a divisor of it.\\n\\nAt the end of the run, if what you are left with is `== 1`, then you had an ugly number, `false` otherwise (and note that it would also rule out non-positive numbers, but I prefer to just save computation and check initially for it).\\n\\nIncidentally, the order by which the algorithm checks the primes is irrelevant, but I preferred to keep them in increasing order.\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    vector<int> primes = {2, 3, 5};\\n    bool isUgly(int n) {\\n        if (n < 1) return false;\\n        for (int p: primes) while (n % p == 0) n /=p;\\n        return n == 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<int> primes = {2, 3, 5};\\n    bool isUgly(int n) {\\n        if (n < 1) return false;\\n        for (int p: primes) while (n % p == 0) n /=p;\\n        return n == 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 69232,
                "title": "python-1-line-solution",
                "content": "    class Solution(object):\\n        def isUgly(self, num):\\n            \"\"\"\\n            :type num: int\\n            :rtype: bool\\n            \"\"\"\\n            #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L\\n            return False if num < 1 or (4570198050078720000000000000L)%num != 0 else True\\n\\n\\nbut my runtime is 60 ms.How should i improve it?",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n        def isUgly(self, num):\\n            \"\"\"\\n            :type num: int\\n            :rtype: bool\\n            \"\"\"\\n            #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L\\n            return False if num < 1 or (4570198050078720000000000000L)%num != 0 else True\\n\\n\\nbut my runtime is 60 ms.How should i improve it?",
                "codeTag": "Java"
            },
            {
                "id": 2825785,
                "title": "java-ugly-solution-recursive-approach-80-100-faster",
                "content": "Recursively divide with either 2 , 3 or 5 ,if at any stage not possible to divide by any of these three numbers then its not Ugly number(return false) . If we end up with 1 at the end than its Ugly Number(return true). 0 is not divisible & hence its NotUgly by default.!\\n\\n\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0)return false;\\n        if(n==1)return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else   if(n%5==0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0)return false;\\n        if(n==1)return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else   if(n%5==0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2279296,
                "title": "short-javascript-solution",
                "content": "Found this solution helpful? Consider showing support by upvoting this post.\\nHave a question? Kindly leave a comment below.\\nThank you and happy hacking!\\n```\\nvar isUgly = function (n) {\\n    if(n <= 0) return false\\n\\n    while (n != 1) {\\n        if (n % 2 === 0) {\\n            n /= 2\\n        } else if (n % 3 === 0) {\\n            n /= 3\\n        } else if (n % 5 === 0) {\\n            n /= 5\\n        } else {\\n            return false\\n        }\\n    }\\n\\n    return true\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isUgly = function (n) {\\n    if(n <= 0) return false\\n\\n    while (n != 1) {\\n        if (n % 2 === 0) {\\n            n /= 2\\n        } else if (n % 3 === 0) {\\n            n /= 3\\n        } else if (n % 5 === 0) {\\n            n /= 5\\n        } else {\\n            return false\\n        }\\n    }\\n\\n    return true\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1442337,
                "title": "clean-c-solution-and-easy-understanding-100-time-and-space",
                "content": "**Do upvote me so that I can ulpoad more solutions**\\n```\\nbool isUgly(int n) {\\n        if(n==0){\\n            return false;\\n        }\\n        if(n==1){\\n            return true;\\n        }\\n        if(n%2==0){\\n            return isUgly(n/2);\\n        }\\n        if(n%3==0){\\n            return isUgly(n/3);\\n        }\\n        if(n%5==0){\\n            return isUgly(n/5);\\n        }\\n        return false;\\n    }\\n\\t",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "**Do upvote me so that I can ulpoad more solutions**\\n```\\nbool isUgly(int n) {\\n        if(n==0){\\n            return false;\\n        }\\n        if(n==1){\\n            return true;\\n        }\\n        if(n%2==0){\\n            return isUgly(n/2);\\n        }\\n        if(n%3==0){\\n            return isUgly(n/3);\\n        }\\n        if(n%5==0){\\n            return isUgly(n/5);\\n        }\\n        return false;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 336227,
                "title": "solution-in-python-3-beats-99-five-lines",
                "content": "```\\nclass Solution:\\n    def isUgly(self, num: int) -> bool:\\n        if num == 0: return False\\n        while num % 5 == 0: num /= 5\\n        while num % 3 == 0: num /= 3\\n        while num % 2 == 0: num /= 2\\n        return num == 1\\n\\t\\t\\n\\n- Junaid Mansuri",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, num: int) -> bool:\\n        if num == 0: return False\\n        while num % 5 == 0: num /= 5\\n        while num % 3 == 0: num /= 3\\n        while num % 2 == 0: num /= 2\\n        return num == 1\\n\\t\\t\\n\\n- Junaid Mansuri",
                "codeTag": "Java"
            },
            {
                "id": 1764482,
                "title": "python3-faster-solution-basic-logic-with-maths",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: \\n            return False\\n        for i in [2,3,5]:\\n            while n%i==0:\\n                n=n//i\\n        return n==1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0: \\n            return False\\n        for i in [2,3,5]:\\n            while n%i==0:\\n                n=n//i\\n        return n==1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 69235,
                "title": "share-my-simple-java-solution",
                "content": "Continually divide the number by 2,3,5. If it's ugly, the result must be 1.\\n\\n    public class Solution {\\n        public boolean isUgly(int num) {\\n            if(num <= 0) return false;\\n            while((num % 2) == 0) num /= 2;\\n            while((num % 3) == 0) num /= 3;\\n            while((num % 5) == 0) num /= 5;\\n            return num == 1;\\n        }\\n    }\\n\\nThanks to braydenCN's advice. Revised some code.",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public boolean isUgly(int num) {\\n            if(num <= 0) return false;\\n            while((num % 2) == 0) num /= 2;\\n            while((num % 3) == 0) num /= 3;\\n            while((num % 5) == 0) num /= 5;\\n            return num == 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2826123,
                "title": "java-beats-100-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ndivide a number continuously by 2,3,5 till it\\'s greater than 0, then if number is 1 return true, else false;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        while(n>0 && n%5==0){\\n            n=n/5;\\n        }\\n        while(n>0 && n%3==0){\\n            n=n/3;\\n        }\\n        while(n>0 && n%2==0){\\n            n=n/2;\\n        }\\n        return n==1;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        while(n>0 && n%5==0){\\n            n=n/5;\\n        }\\n        while(n>0 && n%3==0){\\n            n=n/3;\\n        }\\n        while(n>0 && n%2==0){\\n            n=n/2;\\n        }\\n        return n==1;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 69279,
                "title": "java-clean-solution-is-this-o-logn-time",
                "content": "    public class Solution {\\n        public boolean isUgly(int num) {\\n            if (num == 0) {\\n                return false;\\n            }\\n            int[] divisors = {2, 3, 5};\\n            for (int divisor : divisors) {\\n                while(num % divisor == 0) {\\n                    num /= divisor;\\n                }\\n            }\\n            return num == 1;\\n        }\\n    }\\n\\nif the num == 2^30, then we divide it by 2, 30 times which is log2(n). but what if it has all 2,3,5 factors.\\nStill log(n) ?",
                "solutionTags": [],
                "code": "class Solution {\\n        public boolean isUgly(int num) {\\n            if (num == 0) {\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 69327,
                "title": "4ms-short-c-solution",
                "content": "    class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if (num == 1) return true;\\n            if (num <= 0) return false;\\n            while (num % 2 == 0) num /= 2;\\n            while (num % 3 == 0) num /= 3;\\n            while (num % 5 == 0) num /= 5;\\n            return num == 1;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if (num == 1) return true;\\n            if (num <= 0) return false;\\n            while (num % 2 == 0) num /= 2;\\n            while (num % 3 == 0) num /= 3;\\n            while (num % 5 == 0) num /= 5;\\n            return num == 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 69342,
                "title": "simplest-java-solution",
                "content": "    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n        while (num % 2 == 0) num /= 2;\\n        while (num % 3 == 0) num /= 3;\\n        while (num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n        while (num % 2 == 0) num /= 2;\\n        while (num % 3 == 0) num /= 3;\\n        while (num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2826707,
                "title": "c-non-ugly-code",
                "content": "# Approach 1: math, just divide as long as possible\\nWe just divide with each factor as long as this is possible and if only one remains the number is ugly.\\n\\n```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        while (n % 2 == 0) n /= 2;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n        return n == 1;\\n    }\\n```\\n\\nIf we want to do something slighlty more generic, we could do something like this:\\n\\n```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        for (const int d : {2, 3, 5})\\n            while (n % d == 0) n /= d;\\n\\n        return n == 1;\\n    }\\n```\\n\\nIn case you are wondering if you should be using bit masking and shifting for the \"divisible by 2\" test and write code like this:\\n\\n```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        while ((n & 1) == 0) n >>=1;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n        return n == 1;\\n    }\\n```\\n\\nLooks like clang is smart enough to see through this and generate the same code: https://godbolt.org/z/YhTEYeMre -- and FWIW the generated assemble doesn\\'t look like at all to what I expected, e.g. the generated code doesn\\'t have a single \"div\" instruction.\\n\\n**Complexity Analysis**\\n  * Time Complexity: $$O(\\\\log n)$$\\n  * Space Complexity: $$O(1)$$\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        while (n % 2 == 0) n /= 2;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n        return n == 1;\\n    }\\n```\n```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        for (const int d : {2, 3, 5})\\n            while (n % d == 0) n /= d;\\n\\n        return n == 1;\\n    }\\n```\n```cpp\\n    static bool isUgly(int n) {\\n        if (n <= 0) return false;\\n\\n        while ((n & 1) == 0) n >>=1;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n        return n == 1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1804787,
                "title": "c-solution",
                "content": "\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t** upvote if it helped**\\n\\t\\t\\t\\t\\t\\t\\t\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false ;\\n        while (n%5 == 0 ) n/=5;\\n        while (n%3 == 0 ) n/=3;\\n        while (n%2 == 0 ) n/=2;\\n        return n == 1;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false ;\\n        while (n%5 == 0 ) n/=5;\\n        while (n%3 == 0 ) n/=3;\\n        while (n%2 == 0 ) n/=2;\\n        return n == 1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1638899,
                "title": "c-easyto-understand-2-solutions",
                "content": "**Approach 1**\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        int prev=n;\\n        if(n==1)\\n         return true; \\n        if(n<0||n==0)\\n           return false; \\n       while(n!=1)\\n       {\\n           prev=n;\\n           if(n%2==0)\\n           {\\n            n=n/2;   \\n           }\\n           if(n%3==0)\\n           {\\n               n=n/3;\\n           }\\n           if(n%5==0)\\n           {\\n               n=n/5;\\n           }\\n           if(prev==n)\\n             return false;  \\n       } \\n        return true;\\n    }\\n};\\n```\\n**Approach 2**\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)\\n        return false;\\n        while(n%2==0)\\n        n/=2;\\n        while(n%3==0)\\n        n/=3;\\n        while(n%5==0)\\n        n/=5;\\n        return n==1;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        int prev=n;\\n        if(n==1)\\n         return true; \\n        if(n<0||n==0)\\n           return false; \\n       while(n!=1)\\n       {\\n           prev=n;\\n           if(n%2==0)\\n           {\\n            n=n/2;   \\n           }\\n           if(n%3==0)\\n           {\\n               n=n/3;\\n           }\\n           if(n%5==0)\\n           {\\n               n=n/5;\\n           }\\n           if(prev==n)\\n             return false;  \\n       } \\n        return true;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)\\n        return false;\\n        while(n%2==0)\\n        n/=2;\\n        while(n%3==0)\\n        n/=3;\\n        while(n%5==0)\\n        n/=5;\\n        return n==1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 541479,
                "title": "easy-js-solution",
                "content": "```\\nvar isUgly = function(num) {\\n    if (!num) return false;\\n    while (num > 1) {\\n        if (num % 2 == 0) num /= 2;\\n        else if (num % 3 == 0) num /= 3;\\n        else if (num % 5 == 0) num /= 5;\\n        else return false;\\n    }\\n    return num == 1;\\n    // To check if a number is ugly, we keep dividing it by either 2,3 or 5\\n    // until it becomes 1. If it cannot become 1 (no more divisible by 2,3 or 5),\\n    // then return false;\\n    // Time Complexity: O(n)\\n    // Space Complexity: O(1)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isUgly = function(num) {\\n    if (!num) return false;\\n    while (num > 1) {\\n        if (num % 2 == 0) num /= 2;\\n        else if (num % 3 == 0) num /= 3;\\n        else if (num % 5 == 0) num /= 5;\\n        else return false;\\n    }\\n    return num == 1;\\n    // To check if a number is ugly, we keep dividing it by either 2,3 or 5\\n    // until it becomes 1. If it cannot become 1 (no more divisible by 2,3 or 5),\\n    // then return false;\\n    // Time Complexity: O(n)\\n    // Space Complexity: O(1)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3424256,
                "title": "logarithmic-solution-best-approach-in-python-python3",
                "content": "\\n\\n# Approach\\nThe solution can be done by dividing the given number by 2, 3, or 5 as long as it is divisible, and then checking if the resulting number is 1 (which means it is an ugly number) or not.\\n\\nThe time complexity of this algorithm is O(log n), since we divide the input number by 2, 3, or 5 repeatedly until we get a result, which takes logarithmic time. The space complexity is O(1), since we are not using any additional data structures.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n==0:\\n            return 0\\n        for i in 2,3,5:\\n            while n%i==0:\\n                n//=i\\n        return n==1\\n```\\n\\n# Upvote if you like the solution or ask if there is any query",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n==0:\\n            return 0\\n        for i in 2,3,5:\\n            while n%i==0:\\n                n//=i\\n        return n==1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825633,
                "title": "in-log-n-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:log(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:1\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        while(n%2==0 and n!=0):\\n            n=n//2\\n        while(n%3==0 and n!=0):\\n            n=n//3\\n        while(n%5==0 and n!=0):\\n            n=n//5\\n        return(n==1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        while(n%2==0 and n!=0):\\n            n=n//2\\n        while(n%3==0 and n!=0):\\n            n=n//3\\n        while(n%5==0 and n!=0):\\n            n=n//5\\n        return(n==1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825554,
                "title": "4-lines-of-code",
                "content": "\\njust keep dividing by 2,3 5\\n\\n\\n```\\n\\n    public boolean isUgly(int n) {\\n\\n        if(n==0) return false;\\n        \\n        while( n%2==0) n=n/2;\\n\\n        while( n%3==0) n=n/3;\\n\\n        while( n%5==0) n=n/5;\\n\\n        return n==1 ;\\n\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    public boolean isUgly(int n) {\\n\\n        if(n==0) return false;\\n        \\n        while( n%2==0) n=n/2;\\n\\n        while( n%3==0) n=n/3;\\n\\n        while( n%5==0) n=n/5;\\n\\n        return n==1 ;\\n\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 593940,
                "title": "c-solution-beats-100",
                "content": "The intuition that first comes to our minds is that if(num%2==0||num%3==0||num%5==0)return true\\nWell this might pass some test cases but it is absolutely wrong.\\nlet me demonstrate:\\nLet num=14;\\nits prime factors are:1,2,7,14\\nbut the questions says apart from 1 and the number itself only 2,3,5 are allowed\\nSo how do we tackle this problem?\\nWe try to keep dividing the by 2 as long as the number is divisble by 2\\nThen with the current number we keep dividing by 3 as long as its divisble by 3\\nsimilarly for 5.\\nIf the final number that we get is 1 then we have got the result.\\nLet me demonstrate:\\nLet us take the same number\\nnum=14<-----divisible by 2 so keep dividing\\n14/2=7<-----not divisible by 2 so stop\\n7<----------not divisble by 3 so stop\\n7<----------not divisble by 5 so stop\\nthe final answer we got is 7 which is not equal to 1 so return false.\\nLets take another example\\nnum=30<-----divisble by 2 so keep dividing by 2\\nnum=15<-----not divisible by 2 so stop\\nnum=15<-----divisble by 3 so keep dividing by 3\\nnum=5<------not divisible by 3 so stop\\nnum=5<------divisble by 5 so keep dividing by 5\\nnum=1<------not divisible by 5 so stop\\nas 1==1 return true\\n```\\nbool isUgly(int num) {\\n        if(num==0)return false;//<-----0 is neither divisble by 2,3 nor 5\\n        while(num%2==0)num/=2;\\n        while(num%3==0)num/=3;\\n        while(num%5==0)num/=5;\\n        return num==1;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nbool isUgly(int num) {\\n        if(num==0)return false;//<-----0 is neither divisble by 2,3 nor 5\\n        while(num%2==0)num/=2;\\n        while(num%3==0)num/=3;\\n        while(num%5==0)num/=5;\\n        return num==1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 69298,
                "title": "javascript-solution-5-lines-clean-short",
                "content": "    var isUgly = function(num) {\\n        if(num<=0) return false; \\n        while(parseInt(num/2)===num/2) { num/=2; }  // using the fact that \\n        while(parseInt(num/3)===num/3) { num/=3; }  // multiplication is commutative, \\n        while(parseInt(num/5)===num/5) { num/=5; }  // hence the order doesn't matter\\n        return num===1;\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var isUgly = function(num) {\\n        if(num<=0) return false; \\n        while(parseInt(num/2)===num/2) { num/=2; }  // using the fact that \\n        while(parseInt(num/3)===num/3) { num/=3; }  // multiplication is commutative, \\n        while(parseInt(num/5)===num/5) { num/=5; }  // hence the order doesn't matter\\n        return num===1;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 69289,
                "title": "2ms-solution-in-java",
                "content": "public class Solution {\\n    \\n    public boolean isUgly(int num) {\\n        if(num == 0) {\\n            return false;\\n        }\\n        while(num % 5 == 0) {\\n            num /= 5;\\n        }\\n        while(num % 3 == 0) {\\n            num /= 3;\\n        }\\n        while(num % 2 == 0) {\\n            num /= 2;\\n        }\\n        if(num == 1) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n    public boolean isUgly(int num) {\\n        if(num == 0) {\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 69282,
                "title": "5-line-java-solution-2ms",
                "content": "    public boolean isUgly(int num) {\\n        if(num <= 0) return false;\\n        while(num % 2 == 0) num /= 2;\\n        while(num % 3 == 0) num /= 3;\\n        while(num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public boolean isUgly(int num) {\\n        if(num <= 0) return false;\\n        while(num % 2 == 0) num /= 2;\\n        while(num % 3 == 0) num /= 3;\\n        while(num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3119297,
                "title": "c-c-java-python-code-with-explanation",
                "content": "Given: the number must be divisible only by 2, 3, 5 ( 1 and itself) not more than this number.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing modulo operator, check whether the given number is divisible by 2 if yes, divide untill it becomes not divisible by 2.\\n\\ncheck whether the given number is divisible by 3 if yes, divide untill it becomes not divisible by 3.\\n\\ncheck whether the given number is divisible by 5 if yes, divide untill it becomes not divisible by 5.\\n\\nFor example : given number : 14 \\n    STEP 1 : if 14 modulo 2 is 0.\\n    STEP 2 : then divide it by 2, (then n becomes 7.)\\n    STEP 3 : if 7 modulo 2 is 0, go to STEP 2, \\n    STEP 4 : if 7 modulo 3 is 0, then divide it by 3. (n is still 7)\\n    STEP 5 : if 7 modulo 5 is 0. then divide it by 5. (n is still 7)\\n    STEP 6 : if n == 1, return true.\\n    STEP 7 : else, return false.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n**C**\\n\\nbool isUgly(int n){\\n    \\n    while(n % 2 == 0 && (n = n / 2));\\n    while(n % 3 == 0 && (n = n / 3));\\n    while(n % 5 == 0 && (n = n / 5));\\n\\n    return n==1;\\n\\n}\\n\\n**C++**\\n\\nbool isUgly(int n) {\\n        \\n        while(n % 2 == 0 && (n = n / 2));\\n        while(n % 3 == 0 && (n = n / 3));\\n        while(n % 5 == 0 && (n = n / 5));\\n\\n        return n==1;\\n    }\\n\\n**JAVA**\\n\\n public boolean isUgly(int n) {\\n        if(n <= 0) return false;\\n\\n        while(n % 2 == 0) \\n            n = n / 2;\\n        while(n % 3 == 0)\\n            n = n / 3;\\n        while(n % 5 == 0)\\n            n = n / 5;\\n\\n        return n==1;\\n    }\\n\\n**Python**\\n\\ndef isUgly(self, n):\\n        if n <= 0 :\\n            return 0\\n        while n % 2 == 0:\\n            n = n / 2\\n        while n % 3 == 0:\\n            n = n / 3\\n        while n % 5 == 0:\\n            n = n / 5\\n\\n        return n==1\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n**C**\\n\\nbool isUgly(int n){\\n    \\n    while(n % 2 == 0 && (n = n / 2));\\n    while(n % 3 == 0 && (n = n / 3));\\n    while(n % 5 == 0 && (n = n / 5));\\n\\n    return n==1;\\n\\n}\\n\\n**C++**\\n\\nbool isUgly(int n) {\\n        \\n        while(n % 2 == 0 && (n = n / 2));\\n        while(n % 3 == 0 && (n = n / 3));\\n        while(n % 5 == 0 && (n = n / 5));\\n\\n        return n==1;\\n    }\\n\\n**JAVA**\\n\\n public boolean isUgly(int n) {\\n        if(n <= 0) return false;\\n\\n        while(n % 2 == 0) \\n            n = n / 2;\\n        while(n % 3 == 0)\\n            n = n / 3;\\n        while(n % 5 == 0)\\n            n = n / 5;\\n\\n        return n==1;\\n    }\\n\\n**Python**\\n\\ndef isUgly(self, n):\\n        if n <= 0 :\\n            return 0\\n        while n % 2 == 0:\\n            n = n / 2\\n        while n % 3 == 0:\\n            n = n / 3\\n        while n % 5 == 0:\\n            n = n / 5\\n\\n        return n==1\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3318657,
                "title": "2-lines-of-code-awesome-approach",
                "content": "# Math formula Approach\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<1:\\n            return False\\n        multiple=2*3*5\\n        return (multiple**20)%n==0\\n\\n    //please upvote me it would encourage me alot\\n\\n\\n```\\n# Chack with each ugly factor\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<1: return False\\n        for num in [2,3,5]:\\n            while n%num==0:\\n                n=n//num\\n        return n==1\\n\\n    //please upvote me it would encourage me alot\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<1:\\n            return False\\n        multiple=2*3*5\\n        return (multiple**20)%n==0\\n\\n    //please upvote me it would encourage me alot\\n\\n\\n```\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<1: return False\\n        for num in [2,3,5]:\\n            while n%num==0:\\n                n=n//num\\n        return n==1\\n\\n    //please upvote me it would encourage me alot\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3216194,
                "title": "best-c-solution-ever-100-faster-math-one-stop-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this problem using Math.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can easily understand the approach by seeing the code which is easy to understand with comments.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime Complecity : O(logN), We are dividing the integer by 2, 3, and 5 and terminating when it is not divisible by any of them. Where N is the number n.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace Complexity : O(1), Constant Space.\\n\\n# Code\\n```\\n/*\\n\\n    Time Complecity : O(logN), We are dividing the integer by 2, 3, and 5 and terminating when it is not divisible\\n    by any of them. Where N is the number n.\\n\\n    Space Complexity : O(1), Constant Space.\\n\\n    Solved using Math.\\n\\n*/\\n\\nclass Solution {\\nprivate:\\n    int keepsOndividingUntilPossible(int dividend, int divisor){\\n        while(dividend % divisor == 0){\\n            dividend /= divisor;\\n        }\\n        return dividend;\\n    }\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        for(auto factor : {2,3,5}){\\n            n = keepsOndividingUntilPossible(n, factor);\\n        }\\n        return n == 1;\\n    }\\n};\\n\\n```\\n\\n***IF YOU LIKE THE SOLUTION THEN PLEASE UPVOTE MY SOLUTION BECAUSE IT GIVES ME MOTIVATION TO REGULARLY POST THE SOLUTION.***\\n\\n![WhatsApp Image 2023-02-10 at 19.01.02.jpeg](https://assets.leetcode.com/users/images/0a95fea4-64f4-4502-82aa-41db6d77c05c_1676054939.8270252.jpeg)",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\n/*\\n\\n    Time Complecity : O(logN), We are dividing the integer by 2, 3, and 5 and terminating when it is not divisible\\n    by any of them. Where N is the number n.\\n\\n    Space Complexity : O(1), Constant Space.\\n\\n    Solved using Math.\\n\\n*/\\n\\nclass Solution {\\nprivate:\\n    int keepsOndividingUntilPossible(int dividend, int divisor){\\n        while(dividend % divisor == 0){\\n            dividend /= divisor;\\n        }\\n        return dividend;\\n    }\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        for(auto factor : {2,3,5}){\\n            n = keepsOndividingUntilPossible(n, factor);\\n        }\\n        return n == 1;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827599,
                "title": "beats-100-upvote-if-you-like",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) \\n    {\\n        if (n <= 0) return false;\\n        while(n > 1)\\n        {\\n            if (n % 2 == 0) n = n / 2;\\n            else if (n % 3 == 0) n = n / 3;\\n            else if (n % 5 == 0) n = n / 5;\\n            else break;\\n        }\\n        return (n == 1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) \\n    {\\n        if (n <= 0) return false;\\n        while(n > 1)\\n        {\\n            if (n % 2 == 0) n = n / 2;\\n            else if (n % 3 == 0) n = n / 3;\\n            else if (n % 5 == 0) n = n / 5;\\n            else break;\\n        }\\n        return (n == 1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826338,
                "title": "short-c-explained-solution-beginner-friendly-by-mr-coder",
                "content": "\\n**Watch this video for the better explanation of the code.**\\nhttps://www.youtube.com/watch?v=5bM0BHgetEs\\n\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**\\n**C++**\\n```\\nclass Solution {\\npublic:\\n \\n    bool isUgly(int n) {\\n         if (n <= 0) return false;\\n        while(1){\\n            if(n==1)return true;\\n      if(n%2==0)while(n%2==0){n= n/2; }  \\n         else if(n%3==0) while(n%3==0) n= n/3;\\n          else if(n%5==0) while(n%5==0) n= n/5;\\n            else return false;\\n        } \\n    }\\n};\\n\\n\\n```\\n**If you find my solution helpful please upvote it.**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n \\n    bool isUgly(int n) {\\n         if (n <= 0) return false;\\n        while(1){\\n            if(n==1)return true;\\n      if(n%2==0)while(n%2==0){n= n/2; }  \\n         else if(n%3==0) while(n%3==0) n= n/3;\\n          else if(n%5==0) while(n%5==0) n= n/5;\\n            else return false;\\n        } \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2666411,
                "title": "100-runtime-0-ms-c-through-recursion-easy-as-hell-6-liner-3",
                "content": "Hi Future Developers && Beginners,\\nWould appreciate it if you could share & upvote <3\\n\\n\"\"\"\\nbool isUgly(int n) {\\n        \\n        if (n < 1) return false; //If provided n 0 or negative\\n        else if (n == 1) return true; //If provided n equals 1 -> positive case\\n        else if (n % 2 == 0) return isUgly(n/2); //meaning provided n can be divided by 2 with no rest\\n        else if (n % 3 == 0) return isUgly(n/3); //meaning provided n can be divided by 3 with no rest\\n        else if (n % 5 == 0) return isUgly(n/5); //meaning provided n can be divided by 5 with no rest\\n        else return false; // if provided n is neither negative, 0, nor it can be divided by 2/3/5 with no rest\\n\"\"\"\\n    }\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "Hi Future Developers && Beginners,\\nWould appreciate it if you could share & upvote <3\\n\\n\"\"\"\\nbool isUgly(int n) {\\n        \\n        if (n < 1) return false; //If provided n 0 or negative\\n        else if (n == 1) return true; //If provided n equals 1 -> positive case\\n        else if (n % 2 == 0) return isUgly(n/2); //meaning provided n can be divided by 2 with no rest\\n        else if (n % 3 == 0) return isUgly(n/3); //meaning provided n can be divided by 3 with no rest\\n        else if (n % 5 == 0) return isUgly(n/5); //meaning provided n can be divided by 5 with no rest\\n        else return false; // if provided n is neither negative, 0, nor it can be divided by 2/3/5 with no rest\\n\"\"\"\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1758971,
                "title": "javascript-easy-understanding",
                "content": "\\n```\\n// Please upvote if you like the solution  . Thanks\\n\\nvar isUgly = function(n) {\\n    while(n>1){\\n        if(n%2==0){\\n            n=n/2\\n        }\\n         else if(n%3==0){\\n             n=n/3\\n         }\\n        else if(n%5==0){\\n             n=n/5\\n         }\\n        else{\\n            return false\\n        }\\n    }\\n    if(n==1){\\n        return true\\n    }\\n    else\\n        {\\n        return false\\n    } \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Please upvote if you like the solution  . Thanks\\n\\nvar isUgly = function(n) {\\n    while(n>1){\\n        if(n%2==0){\\n            n=n/2\\n        }\\n         else if(n%3==0){\\n             n=n/3\\n         }\\n        else if(n%5==0){\\n             n=n/5\\n         }\\n        else{\\n            return false\\n        }\\n    }\\n    if(n==1){\\n        return true\\n    }\\n    else\\n        {\\n        return false\\n    } \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1601360,
                "title": "my-0ms-most-optimized-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n < 1) return 0;\\n        if(n < 7) return 1;\\n        if((n & 1) == 0) return isUgly(n / 2);\\n        if((n % 3) == 0) return isUgly(n / 3);\\n        if((n % 5) == 0) return isUgly(n / 5);\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n < 1) return 0;\\n        if(n < 7) return 1;\\n        if((n & 1) == 0) return isUgly(n / 2);\\n        if((n % 3) == 0) return isUgly(n / 3);\\n        if((n % 5) == 0) return isUgly(n / 5);\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1363472,
                "title": "java-math-1ms-beats-100-t-c-o-logn-s-c-o-1",
                "content": "\\n\\n\\t// O(log2(n)) O(1)\\n\\tpublic boolean isUgly(int n) {\\n\\n\\t\\tif (n == 0 || n < 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\tn = divisible(n, 2); // log2(n)\\n\\t\\tn = divisible(n, 3); // log3(n)\\n\\t\\tn = divisible(n, 5); // log5(n)\\n\\n\\t\\treturn n == 1;\\n\\t}\\n\\n\\t// O(logb(n)) O(1)\\n\\tpublic int divisible(int n, int div) {\\n\\t\\twhile (n % div == 0)\\n\\t\\t\\tn = n / div;\\n\\t\\treturn n;\\n\\t}",
                "solutionTags": [],
                "code": "\\n\\n\\t// O(log2(n)) O(1)\\n\\tpublic boolean isUgly(int n) {\\n\\n\\t\\tif (n == 0 || n < 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\tn = divisible(n, 2); // log2(n)\\n\\t\\tn = divisible(n, 3); // log3(n)\\n\\t\\tn = divisible(n, 5); // log5(n)\\n\\n\\t\\treturn n == 1;\\n\\t}\\n\\n\\t// O(logb(n)) O(1)\\n\\tpublic int divisible(int n, int div) {\\n\\t\\twhile (n % div == 0)\\n\\t\\t\\tn = n / div;\\n\\t\\treturn n;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1328164,
                "title": "recursive-approach-to-a-simple-question-beginner-friendly-c",
                "content": "Simple Recursive approach,\\nNot an efficient runtime approach, but a beginner can observe the beauty of recursion ;)\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if (n == 1) return true;\\n        if (n < 1) return false;\\n        if (n % 2 == 0)\\n            return isUgly(n/2);\\n        if (n % 3 == 0)\\n            return isUgly(n/3);\\n        if (n % 5 == 0)\\n            return isUgly(n/5);\\n        return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if (n == 1) return true;\\n        if (n < 1) return false;\\n        if (n % 2 == 0)\\n            return isUgly(n/2);\\n        if (n % 3 == 0)\\n            return isUgly(n/3);\\n        if (n % 5 == 0)\\n            return isUgly(n/5);\\n        return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1293434,
                "title": "js-faster-than-100-easy-solution",
                "content": "```\\nvar isUgly = function(n) {\\n  if(n<=0) return false\\n    \\n  while(1<n){\\n    if(n%2===0){\\n      n=n/2\\n    }\\n     else if(n%3===0){\\n      n =  n/3\\n    } \\n      else if(n%5===0){\\n      n=n/5\\n    }else {\\n      return false\\n    }\\n  }\\n  \\n return  true\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isUgly = function(n) {\\n  if(n<=0) return false\\n    \\n  while(1<n){\\n    if(n%2===0){\\n      n=n/2\\n    }\\n     else if(n%3===0){\\n      n =  n/3\\n    } \\n      else if(n%5===0){\\n      n=n/5\\n    }else {\\n      return false\\n    }\\n  }\\n  \\n return  true\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 846790,
                "title": "99-pyhton-solution",
                "content": "```\\n        if n == 0:\\n            return False\\n        \\n        while n%2 == 0:\\n            n = n/2\\n        \\n        while n%3 == 0:\\n            n = n/3\\n        \\n        while n%5 == 0:\\n            n = n/5\\n\\n        if n == 1:\\n            return True\\n\\t\\t\\t\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n        if n == 0:\\n            return False\\n        \\n        while n%2 == 0:\\n            n = n/2\\n        \\n        while n%3 == 0:\\n            n = n/3\\n        \\n        while n%5 == 0:\\n            n = n/5\\n\\n        if n == 1:\\n            return True\\n\\t\\t\\t\\n        return False\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 511887,
                "title": "python-o-log-n-sol-by-integer-division-93-with-hint-comment",
                "content": "Python O( log n ) sol by integer division.\\n\\n---\\n\\nHint:\\nThink of **prime factor decomposition** of number = (**2**^i) * (**3**^j) * (**5**^k),\\nand use **integer division** ( the **//** operator in python) to decompose input number for judgement.\\n\\n---\\nAlgorithm:\\n\\nStep_#1:\\nUse integer division to decompose input number.\\n\\nStep_#2:\\nAfter factor decomposition of 2, 3, 5.\\nif there are any prime factor other than 2, 3, 5, then reject and return False.\\nOtherwise, accept and return True.\\n\\n\\n---\\n\\n```\\nclass Solution:\\n    def isUgly(self, num: int) -> bool:\\n        \\n        if num == 0:\\n            # Corner case handle for input 0\\n            return False\\n        \\n        \\n        given_prime = [2, 3, 5]\\n        \\n        for p in given_prime:\\n        \\n            while num % p == 0:\\n                num //= p\\n\\n\\n        return num == 1\\n```\\n\\n---\\n\\nReference:\\n[1] [Wiki: Prime factor decomposition](https://en.wikipedia.org/wiki/Integer_factorization)\\n\\n[2] [Python official docs about integer division operation, \"//\"](https://docs.python.org/3/library/stdtypes.html?highlight=integer%20division#numeric-types-int-float-complex)\\n\\n---\\n\\nRelated leetcode challenge:\\n\\n[Leetcode #264 Ugly Number II](https://leetcode.com/problems/ugly-number-ii/)",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, num: int) -> bool:\\n        \\n        if num == 0:\\n            # Corner case handle for input 0\\n            return False\\n        \\n        \\n        given_prime = [2, 3, 5]\\n        \\n        for p in given_prime:\\n        \\n            while num % p == 0:\\n                num //= p\\n\\n\\n        return num == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 475123,
                "title": "c",
                "content": "```\\npublic bool IsUgly(int num) {\\n\\tif (num < 1)\\n\\t\\treturn false;\\n\\n\\twhile (num > 1)\\n\\t\\tif (num % 2 == 0)\\n\\t\\t\\tnum /= 2;\\n\\t\\telse if (num % 3 == 0)\\n\\t\\t\\tnum /= 3;\\n\\t\\telse if (num % 5 == 0)\\n\\t\\t\\tnum /= 5;\\n\\t\\telse\\n\\t\\t\\treturn false;\\n\\n\\treturn true;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic bool IsUgly(int num) {\\n\\tif (num < 1)\\n\\t\\treturn false;\\n\\n\\twhile (num > 1)\\n\\t\\tif (num % 2 == 0)\\n\\t\\t\\tnum /= 2;\\n\\t\\telse if (num % 3 == 0)\\n\\t\\t\\tnum /= 3;\\n\\t\\telse if (num % 5 == 0)\\n\\t\\t\\tnum /= 5;\\n\\t\\telse\\n\\t\\t\\treturn false;\\n\\n\\treturn true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 69265,
                "title": "simple-c-solution-4ms",
                "content": "    bool isUgly(int num) {\\n            if(num == 1){\\n                return true;\\n            }\\n            if(num <=0){\\n                return false;\\n            }\\n            while(num % 2 == 0){\\n                num /= 2;\\n            }\\n            while(num % 3 == 0){\\n                num /= 3;\\n            }\\n            while(num % 5 == 0){\\n                num /= 5;\\n            }\\n        return num == 1;\\n    }",
                "solutionTags": [],
                "code": "    bool isUgly(int num) {\\n            if(num == 1){\\n                return true;\\n            }\\n            if(num <=0){\\n                return false;\\n            }\\n            while(num % 2 == 0){\\n                num /= 2;\\n            }\\n            while(num % 3 == 0){\\n                num /= 3;\\n            }\\n            while(num % 5 == 0){\\n                num /= 5;\\n            }\\n        return num == 1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3892044,
                "title": "beats-100-clean-code-c",
                "content": "\\n# Complexity\\n- Time complexity: O(logN) : O(log\\u2082N) + O(log\\u2083N) + O(log\\u2085N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if (n < 1)\\n        {\\n            return false;\\n        }\\n        std::array<int, 3> uglyPrimes = { 2, 3, 5 };\\n        for (int prime : uglyPrimes)\\n        {\\n            while (n % prime == 0)\\n            {\\n                n /= prime;\\n            }\\n        }\\n        return n == 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if (n < 1)\\n        {\\n            return false;\\n        }\\n        std::array<int, 3> uglyPrimes = { 2, 3, 5 };\\n        for (int prime : uglyPrimes)\\n        {\\n            while (n % prime == 0)\\n            {\\n                n /= prime;\\n            }\\n        }\\n        return n == 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3689534,
                "title": "easy-cpp-solution-using-loops-with-detailed-stepwise-explanation-beginner-friendly",
                "content": "# Intuition\\nTo make a function to check if the number is divisible by 2,3,5 or not.\\n\\n# Approach\\n1. The `checkPrime` function takes an integer `n` as input and checks if it is a prime number or not.\\n\\n2. The function initializes a while loop that continues as long as `n` is greater than 0.\\n\\n3. Inside the loop, it checks if `n` is divisible by 2, 3, or 5 using the modulo operator (`%`).\\n\\n4. If `n` is divisible by 2, it updates the value of `n` by dividing it by 2 (`n = n / 2`).\\n\\n5. If `n` is divisible by 3, it updates the value of `n` by dividing it by 3 (`n = n / 3`).\\n\\n6. If `n` is divisible by 5, it updates the value of `n` by dividing it by 5 (`n = n / 5`).\\n\\n7. If none of the above conditions are satisfied, it breaks out of the loop using the `break` statement.\\n\\n8. After the loop, the function checks if `n` is equal to 1. If it is, it means that all the prime factors of the original number have been divided out, and hence, it is a prime number. The function returns `true` in this case. Otherwise, it returns `false`.\\n\\n9. The `isUgly` function takes an integer `n` as input and checks if it is an \"ugly\" number.\\n\\n10. Inside the function, it calls the `checkPrime` function with `n` as an argument to check if `n` is a prime number.\\n\\n11. If `n` is determined to be a prime number by the `checkPrime` function, the `isUgly` function returns `true`, indicating that `n` is an ugly number.\\n\\n12. If `n` is not determined to be a prime number, the `isUgly` function returns `false`, indicating that `n` is not an ugly number.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool checkPrime(int n)  \\n        {\\n            while(n>0)\\n            {\\n                if(n%2==0) n=n/2;\\n                else if(n%3==0) n=n/3;\\n                else if(n%5==0) n=n/5;\\n                else{break;}\\n            }\\n            return (n==1);\\n        }\\n\\n    bool isUgly(int n) {\\n            if(checkPrime(n))\\n            {\\n                return true;\\n            }\\n            return false;\\n    }\\n};\\n```\\n# Please upvote :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool checkPrime(int n)  \\n        {\\n            while(n>0)\\n            {\\n                if(n%2==0) n=n/2;\\n                else if(n%3==0) n=n/3;\\n                else if(n%5==0) n=n/5;\\n                else{break;}\\n            }\\n            return (n==1);\\n        }\\n\\n    bool isUgly(int n) {\\n            if(checkPrime(n))\\n            {\\n                return true;\\n            }\\n            return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235170,
                "title": "263-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe solution can be done by dividing the given number by 2, 3, or 5 as long as it is divisible, and then checking if the resulting number is 1 (which means it is an ugly number) or not.\\n\\nThe time complexity of this algorithm is O(log n), since we divide the input number by 2, 3, or 5 repeatedly until we get a result, which takes logarithmic time. The space complexity is O(1), since we are not using any additional data structures.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0: # Non-positive numbers are not ugly\\n            return False\\n        while n % 2 == 0: # Check if n is divisible by 2, keep dividing until it\\'s not\\n            n /= 2\\n        while n % 3 == 0: # Check if n is divisible by 3, keep dividing until it\\'s not\\n            n /= 3\\n        while n % 5 == 0: # Check if n is divisible by 5, keep dividing until it\\'s not\\n            n /= 5\\n        return n == 1 # If n is not 1, then it\\'s not an ugly number\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0: # Non-positive numbers are not ugly\\n            return False\\n        while n % 2 == 0: # Check if n is divisible by 2, keep dividing until it\\'s not\\n            n /= 2\\n        while n % 3 == 0: # Check if n is divisible by 3, keep dividing until it\\'s not\\n            n /= 3\\n        while n % 5 == 0: # Check if n is divisible by 5, keep dividing until it\\'s not\\n            n /= 5\\n        return n == 1 # If n is not 1, then it\\'s not an ugly number\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826294,
                "title": "c-o-logn",
                "content": "Approach is to remove all the factors of 2,3,5 from the number \\nIf result not equal to one then the number has prime factors other than 2,3,5 then return false \\nelse if return equal to 1 return true\\t\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0) return false;\\n\\t\\t\\twhile(n%2==0) n/=2;\\n\\t\\t\\twhile(n%3==0) n/=3;\\n\\t\\t\\twhile(n%5==0) n/=5;\\n\\t\\t\\treturn n==1;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0) return false;\\n\\t\\t\\twhile(n%2==0) n/=2;\\n\\t\\t\\twhile(n%3==0) n/=3;\\n\\t\\t\\twhile(n%5==0) n/=5;\\n\\t\\t\\treturn n==1;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2825750,
                "title": "js-multiple-approaches-easy-to-understand",
                "content": "I just found this Blog and Github repository with solutions to Leetcode problems.\\nhttps://leet-codes.blogspot.com/2022/11/ugly-number.html\\nIt has solutions to almost every problem on Leetcode, and I recommend checking it out.\\nNote: You can bookmark it as a resource, and approach. Other approaches are in above blog\\n<br>\\n\\n```\\n/**\\n * @param {number} n\\n * @return {boolean}\\n */\\nconst isUgly = (n) => {\\n    // Handle all non positive nos\\n    if(n <= 0) return false;\\n    // Anything below 5 is ugly\\n    if(n <= 5) return true;\\n    \\n    // Start dividing recursively\\n    for(const divider of [2, 3, 5]) {\\n        if(n % divider === 0) {\\n            return isUgly(n / divider);\\n        }\\n    }\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {boolean}\\n */\\nconst isUgly = (n) => {\\n    // Handle all non positive nos\\n    if(n <= 0) return false;\\n    // Anything below 5 is ugly\\n    if(n <= 5) return true;\\n    \\n    // Start dividing recursively\\n    for(const divider of [2, 3, 5]) {\\n        if(n % divider === 0) {\\n            return isUgly(n / divider);\\n        }\\n    }\\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2825551,
                "title": "python-3-4-lines-iteration-t-m-99-9-61",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\n        if n<=0: return False\\n\\n        for k in (2,3,5):\\n            while n%k==0: n//=k\\n        \\n        return n==1 \\n```\\n    \\n [https://leetcode.com/submissions/detail/845508280/](http://)\\n \\n I could be wrong, but now I think it\\'s *O*(log*N*) / *O*(1).",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n\\n        if n<=0: return False\\n\\n        for k in (2,3,5):\\n            while n%k==0: n//=k\\n        \\n        return n==1 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325596,
                "title": "python-simple",
                "content": "```python\\ndef isUgly(self, n: int) -> bool:\\n        if not n:\\n            return False\\n        \\n        for k in [2,3,5]:\\n            while not n%k:\\n                n //= k\\n            if n == 1:\\n                return True\\n        return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\ndef isUgly(self, n: int) -> bool:\\n        if not n:\\n            return False\\n        \\n        for k in [2,3,5]:\\n            while not n%k:\\n                n //= k\\n            if n == 1:\\n                return True\\n        return False\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 69286,
                "title": "simple-java-solution-using-factors-method",
                "content": "    public class Solution {\\n    public boolean isUgly(int num) {\\n        if (num <= 0) return false;\\n       \\n        int[] primes = {2, 3, 5};\\n        for(int prime : primes) {\\n            while(num % prime == 0) {\\n                num = num / prime;\\n            }\\n            if(num == 1) return true;\\n        }\\n        \\n        return false;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isUgly(int num) {\\n        if (num <= 0) return false;\\n       \\n        int[] primes = {2, 3, 5}",
                "codeTag": "Java"
            },
            {
                "id": 69297,
                "title": "4ms-solution-in-c",
                "content": "    class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if(num < 1)\\n                return false;\\n            \\n            for(int i = 2; i <= 5; i++)\\n            {\\n                while(num%i == 0)\\n                    num /= i;\\n            }\\n            \\n            if(num != 1)\\n                return false;\\n            return true;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if(num < 1)\\n                return false;\\n            \\n            for(int i = 2; i <= 5; i++)\\n            {\\n                while(num%i == 0)\\n                    num /= i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 69329,
                "title": "simple-java-solution-for-ugly-number-problem",
                "content": "    public class Solution {\\n        public boolean isUgly(int num) {\\n            if (num == 0)\\n                return false;\\n                \\n            if (num == 1)\\n                return true;\\n            \\n            while (num % 5 == 0)\\n                num /= 5;\\n            \\n            while (num % 3 == 0)\\n                num /= 3;\\n                \\n            while (num % 2 == 0)\\n                num /= 2;\\n            \\n            return num == 1;\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "class Solution {\\n        public boolean isUgly(int num) {\\n            if (num == 0)\\n                return false;\\n                \\n            if (num == 1)\\n                return true;\\n            \\n            while (num % 5 == 0)\\n                num /= 5;\\n            \\n            while (num % 3 == 0)\\n                num /= 3;\\n                \\n            while (num % 2 == 0)\\n                num /= 2;\\n            \\n            return num == 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 69316,
                "title": "java-python-c-solutions-for-you-guyz",
                "content": "JAVA \\n\\n    public class Solution {\\n        public boolean isUgly(int num) {\\n              if (num==0)\\n            return false;\\n            else {\\n                while(num!=1)\\n                {\\n                    if(num%2==0)\\n                    num/=2;\\n                    else if(num%3==0)\\n                    num/=3;\\n                    else if(num%5==0)\\n                    num/=5;\\n                    else break;\\n                }\\n                \\n                if(num==1)\\n                return true;\\n                else return false;\\n            }\\n        }\\n    }\\n\\nC++ \\n\\n    class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if (num==0)\\n            return false;\\n            else {\\n                while(num!=1)\\n                {\\n                    if(num%2==0)\\n                    num/=2;\\n                    else if(num%3==0)\\n                    num/=3;\\n                    else if(num%5==0)\\n                    num/=5;\\n                    else break;\\n                }\\n                \\n                if(num==1)\\n                return true;\\n                else return false;\\n            }\\n        }\\n    };\\n\\nPython\\n\\n    class Solution(object):\\n        def isUgly(self, num):\\n             if num==0:\\n                 return False\\n             else :\\n                 while(num!=1 and (num%2==0 or num%3==0 or num%5==0)):\\n                     if num%2==0:\\n                         num/=2\\n                     elif num%3==0:\\n                         num/=3\\n                     else:\\n                         num/=5\\n             if num==1:\\n                 return True\\n             else:\\n                 return False",
                "solutionTags": [],
                "code": "class Solution {\\n        public boolean isUgly(int num) {\\n              if (num==0)\\n            return false;\\n            else {\\n                while(num!=1)\\n                {\\n                    if(num%2==0)\\n                    num/=2;\\n                    else if(num%3==0)\\n                    num/=3;\\n                    else if(num%5==0)\\n                    num/=5;\\n                    else break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3834432,
                "title": "java-easy-solution-100",
                "content": "\\n#### Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1.\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n      if(n <= 0) return false;\\n      while(n % 2 == 0) n /= 2;\\n      while(n % 3 == 0) n /= 3;\\n      while(n % 5 == 0) n /= 5;\\n      return n == 1; \\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n      if(n <= 0) return false;\\n      while(n % 2 == 0) n /= 2;\\n      while(n % 3 == 0) n /= 3;\\n      while(n % 5 == 0) n /= 5;\\n      return n == 1; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2838245,
                "title": "easy-c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<1) return false;\\n        if(n==1) return true;\\n        if(n%2 == 0) return isUgly(n/2);\\n        if(n%3 == 0) return isUgly(n/3);\\n        if(n%5 == 0) return isUgly(n/5);\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<1) return false;\\n        if(n==1) return true;\\n        if(n%2 == 0) return isUgly(n/2);\\n        if(n%3 == 0) return isUgly(n/3);\\n        if(n%5 == 0) return isUgly(n/5);\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827328,
                "title": "c-solution",
                "content": "``` C++ []\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n\\n        if (n==0) return 0;\\n\\n        for (int i: {2,3,5}) {\\n            while (n%i==0) n/=i;\\n        }\\n\\n        return n==1;\\n    }\\n};\\n```\\n\\n*Upvote solution if it helped you*",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n\\n        if (n==0) return 0;\\n\\n        for (int i: {2,3,5}) {\\n            while (n%i==0) n/=i;\\n        }\\n\\n        return n==1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826354,
                "title": "java-one-liner-ternary-operator",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        return n!=0?((n%2==0)?isUgly(n/2):((n%3==0)?isUgly(n/3):((n%5==0)?isUgly(n/5):n==1))):false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Backtracking",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        return n!=0?((n%2==0)?isUgly(n/2):((n%3==0)?isUgly(n/3):((n%5==0)?isUgly(n/5):n==1))):false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826068,
                "title": "c-easy-understanding-log-n-video-solution",
                "content": "**C++ Clear Explaination ,Please support if you find it usefull. Can give me feedback in comment for improvement.,will be very thankfull.**\\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/UBebk6YTOh4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\\n\\n\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n\\n        if( n == 0) return 0;\\n\\n        while(n%2 == 0) n = n/2;\\n        while(n%3 == 0) n =n/3;\\n        while(n%5 == 0) n = n/5;\\n\\n        return n == 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n\\n        if( n == 0) return 0;\\n\\n        while(n%2 == 0) n = n/2;\\n        while(n%3 == 0) n =n/3;\\n        while(n%5 == 0) n = n/5;\\n\\n        return n == 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825861,
                "title": "simple-and-easy-to-understand-c-approach-0ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirstly, we need to check that number is positive and greater than 0,\\nand the number should be divisible by 2,3 & 5 only or any one of them.\\nIf the number is divisible by another prime then the given number is not ugly number!\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirstly we check if the number is less than 1 even negative then we return false, else we check if number is divisible by 2,3 & 5.\\nFirstly if number is 1 then we return true, else we follow next step.\\n\\nFor this we check if number is divisible by 2,3 or 5 if it is divisible by any one of them ..(Let\\'s say if number is divisible by 2 then we divide the number by 2 and check if it is still divisible by 3 or 5 till number becomes 1) . \\n\\nIf number finally becomes 1 the answer will return true and loop will end , else if number is divisible by any other prime and the  number is not equal to 1 then answer will return false.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0)return false;\\n        while(n>0)\\n        {\\n            if(n==1)\\n            return true;\\n            if(n%2==0)\\n            n/=2;\\n            else if(n%3==0)\\n            n/=3;\\n            else if(n%5==0)\\n            n/=5;\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0)return false;\\n        while(n>0)\\n        {\\n            if(n==1)\\n            return true;\\n            if(n%2==0)\\n            n/=2;\\n            else if(n%3==0)\\n            n/=3;\\n            else if(n%5==0)\\n            n/=5;\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2825671,
                "title": "most-easy-and-intuitive-c-solution-beginner-friendly-fully-explained",
                "content": "**Please Upvote if you like the Solution and explanation**\\n\\nwe have to check weather the prime factor of \\'n\\' are limited to 2,3 and 5 if yes then it is a ugly number else its not\\n    \\n* To do this we have 3 prime numbers to check 2,3 and 5 stored in \\'primeNumbers\\'. \\n* we loop through primeNumbers and inside this loop initiate a while loop as long as a particular primeNumber is a divisor of n.\\n* after ending of both loop if \\'n\\' == 1 return true [because no other prime number is factor of \\'n\\' ] else return false [there is a prime number which is factor of \\'n\\']\\n\\nclass Solution {\\npublic:\\n\\n    bool isUgly(int n) {\\n        if(n <= 0) {\\n            return false;\\n        }\\n        vector<int>primeNumbers = {2,3,5};\\n        for(int i=0;i<primeNumbers.size();i++) {\\n            while(n % primeNumbers[i] == 0) {\\n                n = n/primeNumbers[i];\\n            }\\n        }\\n        if(n == 1) {\\n            return true;\\n        }\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n\\n    bool isUgly(int n) {\\n        if(n <= 0) {\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2825477,
                "title": "daily-leetcoding-challenge-november-day-18",
                "content": "This problem is the Daily LeetCoding Challenge for November, Day 18.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/ugly-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 0 approach in the official solution</summary>\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/ugly-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2746310,
                "title": "java-faster-easy-and-elegant-solution",
                "content": "**1st Solution--> Efficient**\\n\\n```\\nif (n < 1) return false;\\nwhile (n % 2 == 0) n = n / 2;\\nwhile (n % 3 == 0) n = n / 3;\\nwhile (n % 5 == 0) n = n / 5;\\nreturn n == 1;\\n```\\n**2nd Solution**\\n```\\nif (n < 1) return false;\\nwhile (n != 1) {\\n\\tif (n % 2 == 0 || n % 3 == 0 || n % 5 == 0) {\\n\\t\\tif (n % 2 == 0) n = n / 2;\\n\\t\\telse if (n % 3 == 0) n = n / 3;\\n\\t\\telse if (n % 5 == 0) n = n / 5;\\n\\t} else return false;\\n}\\nreturn true;\\n```\\n\\n# Please UPVOTE if you like the solution or the explanation, If you have any question, feel free to ask",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nif (n < 1) return false;\\nwhile (n % 2 == 0) n = n / 2;\\nwhile (n % 3 == 0) n = n / 3;\\nwhile (n % 5 == 0) n = n / 5;\\nreturn n == 1;\\n```\n```\\nif (n < 1) return false;\\nwhile (n != 1) {\\n\\tif (n % 2 == 0 || n % 3 == 0 || n % 5 == 0) {\\n\\t\\tif (n % 2 == 0) n = n / 2;\\n\\t\\telse if (n % 3 == 0) n = n / 3;\\n\\t\\telse if (n % 5 == 0) n = n / 5;\\n\\t} else return false;\\n}\\nreturn true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2443054,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0:\\n                return False\\n        while n>1:\\n            \\n            if n%2 == 0:\\n                n //= 2\\n            elif n%3 == 0:\\n                n //= 3\\n            elif n%5 ==0 :\\n                n //=5\\n            else:return False\\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0:\\n                return False\\n        while n>1:\\n            \\n            if n%2 == 0:\\n                n //= 2\\n            elif n%3 == 0:\\n                n //= 3\\n            elif n%5 ==0 :\\n                n //=5\\n            else:return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791985,
                "title": "c-0ms-solution",
                "content": "class Solution {\\npublic:\\n\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        while(n>1){\\n            if(n%2==0)\\n                n=n/2;\\n            else if(n%3==0)\\n                n=n/3;\\n            else if(n%5==0)\\n                n=n/5;\\n            else return false;\\n        \\n        }\\n        return true;   \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        while(n>1){\\n            if(n%2==0)\\n                n=n/2;\\n            else if(n%3==0)\\n                n=n/3;\\n            else if(n%5==0)\\n                n=n/5;\\n            else return false;\\n        \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1785332,
                "title": "java-most-easy-solution",
                "content": "\\n\\tclass Solution {\\n    public boolean isUgly(int n) {\\n       if(n==0){\\n           return false;\\n       }\\n        if(n==1){\\n            return true;\\n        }\\n      return (n%2==0 && isUgly(n/2) ||\\n         n%3==0 && isUgly(n/3) ||\\n         n%5==0 && isUgly(n/5));\\n            \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n    public boolean isUgly(int n) {\\n       if(n==0){\\n           return false;\\n       }",
                "codeTag": "Java"
            },
            {
                "id": 1710593,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0)\\n            return false;\\n        if(n == 1)\\n            return true;\\n        while(n % 2 == 0) n = n / 2;\\n        while(n % 3 == 0) n = n / 3;\\n        while(n % 5 == 0) n = n / 5;\\n        return n == 1;\\n    }\\n}\\n```\\nGuy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE.\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0)\\n            return false;\\n        if(n == 1)\\n            return true;\\n        while(n % 2 == 0) n = n / 2;\\n        while(n % 3 == 0) n = n / 3;\\n        while(n % 5 == 0) n = n / 5;\\n        return n == 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1452790,
                "title": "olog-n-javascript-solution",
                "content": "```\\nvar isUgly = function(n) {\\n    //all negatvies and zero are not ugly\\n    if(n<=0) return false\\n    //remove prime factors\\n    while(n%2===0 || n%3===0 || n%5===0){\\n        if(n%2===0) n = n/2\\n        if(n%3===0) n = n/3\\n        if(n%5===0) n = n/5\\n    }\\n\\t//if all prime factors have been removed and there exists no other\\n\\t//it should be 1. If not, then it is false\\n    return n===1 \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isUgly = function(n) {\\n    //all negatvies and zero are not ugly\\n    if(n<=0) return false\\n    //remove prime factors\\n    while(n%2===0 || n%3===0 || n%5===0){\\n        if(n%2===0) n = n/2\\n        if(n%3===0) n = n/3\\n        if(n%5===0) n = n/5\\n    }\\n\\t//if all prime factors have been removed and there exists no other\\n\\t//it should be 1. If not, then it is false\\n    return n===1 \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1230134,
                "title": "java-solution-100",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n == 0){\\n            return false;\\n        }\\n        for(int i = 2; i < 6; i++){\\n            while(n % i == 0){\\n                n /= i;\\n            }\\n        }\\n        return n == 1;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isUgly(int n) {\\n        if(n == 0){\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1194440,
                "title": "100-faster-code-super-easy",
                "content": "***Do upvote if you like it to keep me motivated*** \\uD83D\\uDE0A\\u270C\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n <= 0)\\n          return false;\\n        while(n>1)\\n        {\\n            if(n%2 == 0)\\n                n/=2;\\n            else if(n%3 == 0)\\n                n/=3;\\n            else if(n%5 == 0)\\n                n/=5;\\n            else \\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n <= 0)\\n          return false;\\n        while(n>1)\\n        {\\n            if(n%2 == 0)\\n                n/=2;\\n            else if(n%3 == 0)\\n                n/=3;\\n            else if(n%5 == 0)\\n                n/=5;\\n            else \\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 229012,
                "title": "javascript",
                "content": "**\\u89E3\\u9898\\u601D\\u8DEF:**\\n1. \\u5BF9[2, 3, 5]\\u6765\\u8BF4, num\\u4E0D\\u65AD\\u8FDB\\u884C\\u76F8\\u9664, \\u76F4\\u5230\\u65E0\\u6CD5\\u9664.\\n\\n**\\u4EE3\\u7801:**\\n```\\nvar isUgly = function(num) {\\n  const v = [5, 3, 2];\\n  for (let i = 0; i < v.length && num > 1; i++) {\\n    while (num % v[i] === 0) num /= v[i];\\n  }\\n  return num === 1;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar isUgly = function(num) {\\n  const v = [5, 3, 2];\\n  for (let i = 0; i < v.length && num > 1; i++) {\\n    while (num % v[i] === 0) num /= v[i];\\n  }\\n  return num === 1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 69283,
                "title": "easy-to-understand-python-solution-beat-90-python-submissions",
                "content": "    class Solution(object):\\n    def isUgly(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num == 0:\\n            return False\\n            \\n        while num%2 == 0:\\n            num = num/2\\n        while num%3 == 0:\\n            num = num/3\\n        while num%5 == 0:\\n            num = num/5\\n        \\n        if num == 1:\\n            return True\\n        else:\\n            return False",
                "solutionTags": [],
                "code": "    class Solution(object):\\n    def isUgly(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: bool\\n        \"\"\"\\n        if num == 0:\\n            return False\\n            \\n        while num%2 == 0:\\n            num = num/2\\n        while num%3 == 0:\\n            num = num/3\\n        while num%5 == 0:\\n            num = num/5\\n        \\n        if num == 1:\\n            return True\\n        else:\\n            return False",
                "codeTag": "Java"
            },
            {
                "id": 69296,
                "title": "java-solution-with-explanation-in-code",
                "content": "    public class Solution {\\n        public boolean isUgly(int num) {\\n            if(num<=0){\\n                return false;\\n            }\\n            while((num&1)==0){\\n                //number is divisible by 2\\n                num = num/2;\\n            }\\n            while(num%5==0){\\n                //number is divisible by 5\\n                num = num/5;\\n            }\\n            while(num%3==0){\\n                //number is divisible by 5\\n                num = num/3;\\n            }\\n            return num==1;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public boolean isUgly(int num) {\\n            if(num<=0){\\n                return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3923595,
                "title": "java-easy-solution-0ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhere i have used basic concept \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(sqrt(n))\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0) return false;\\n       for(int i=2;i<6 && n>0 ;i++){\\n           while(n%i==0){\\n               n/=i;\\n           }\\n       }\\n       return n==1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0) return false;\\n       for(int i=2;i<6 && n>0 ;i++){\\n           while(n%i==0){\\n               n/=i;\\n           }\\n       }\\n       return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3206016,
                "title": "check-if-a-number-is-an-ugly-number-o-log-n-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to check whether a given number is an ugly number or not. An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5. So we can check whether a number is an ugly number by dividing the number by 2, 3, and 5, and if we can obtain 1 as the result after the division, then the given number is an ugly number, else it is not\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can use the above intuition to solve the problem. We first check whether the given number is less than or equal to 0, in which case it cannot be an ugly number. Then we divide the number by 2, 3, and 5 as long as it is divisible by these numbers. Finally, we check if the resulting number is 1, in which case the original number is an ugly number, or not, in which case it is not an ugly number.\\n# Complexity\\n- Time complexity:  The time complexity of this approach is $$O(logn)$$, where $$n$$ is the given number. This is because we are dividing the number by 2, 3, and 5 repeatedly until we cannot divide it any further. Since the maximum number of times we can divide a number by 2, 3, or 5 is $$log(n)$$, the time complexity is $$O(log n)$$.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: The space complexity of this approach is $$O(1)$$, as we are not using any extra space.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        while n % 2 == 0:\\n            n //= 2\\n        while n % 3 == 0:\\n            n //= 3\\n        while n % 5 == 0:\\n            n //= 5\\n        return n == 1\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        while n % 2 == 0:\\n            n //= 2\\n        while n % 3 == 0:\\n            n //= 3\\n        while n % 5 == 0:\\n            n //= 5\\n        return n == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3091174,
                "title": "most-optimal-code-in-c-and-easiest-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)return false;\\n\\n\\n        while(n%2==0)n/=2;\\n        while(n%3==0)n/=3;\\n        while(n%5==0)n/=5;\\n        return n==1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)return false;\\n\\n\\n        while(n%2==0)n/=2;\\n        while(n%3==0)n/=3;\\n        while(n%5==0)n/=5;\\n        return n==1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3074168,
                "title": "easy-to-understand-solution-in-java",
                "content": "\\n# Complexity\\n- Time complexity: O(log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0) return false;\\n        while(n%2==0)\\n        n=n/2;\\n        while(n%3==0)\\n        n=n/3;\\n        while(n%5==0)\\n        n=n/5;\\n\\n        if(n==1) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0) return false;\\n        while(n%2==0)\\n        n=n/2;\\n        while(n%3==0)\\n        n=n/3;\\n        while(n%5==0)\\n        n=n/5;\\n\\n        if(n==1) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2832777,
                "title": "js-o-log-n-o-1-97-with-explanation",
                "content": "# Intuition\\nThe first thought for solving this problem is to simply divide the value without a remainder by 2 or 3 or 5 until we get 1, otherwise - **false**.\\n\\n# Approach\\nIn the process, the solution was slightly improved, as a result, we have the following solution steps:\\n1. Let\\'s do a default check for 1, 2, 3 and 5;\\n2. n needs to be a positive integer, so return false if n <= 0;\\n3. create an array with our main multipliers - [2, 3, 5];\\n4. divide n by 2, 3, 5 as much as possible to see if there are any other prime factor left.\\n\\n# Complexity\\n- Time complexity: O(log(n)).\\n\\n- Space complexity: O(1).\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {boolean}\\n */\\nvar isUgly = function(n) {\\n    if (n < 1) return false;\\n    if (n === 1 || n === 2 || n === 3 || n === 4 || n === 5) return true;\\n\\n  var divisor = [2, 3, 5];\\n\\n  for (var i = 0; i < divisor.length; i++) {\\n    while (n && n % divisor[i] === 0) {\\n      n = Math.floor(n / divisor[i]);\\n    }\\n  }\\n\\n  return n === 1;\\n};\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding!** \\uD83D\\uDE43",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math",
                    "Iterator"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {boolean}\\n */\\nvar isUgly = function(n) {\\n    if (n < 1) return false;\\n    if (n === 1 || n === 2 || n === 3 || n === 4 || n === 5) return true;\\n\\n  var divisor = [2, 3, 5];\\n\\n  for (var i = 0; i < divisor.length; i++) {\\n    while (n && n % divisor[i] === 0) {\\n      n = Math.floor(n / divisor[i]);\\n    }\\n  }\\n\\n  return n === 1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2827940,
                "title": "263-ugly-number-just-4-lines-of-code",
                "content": "If you like the solution then an upvote would really be a O(n) decision :)\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        int num=n;\\n        for (int i=2; i<6 && num>0; i++)\\n    while (num % i == 0)\\n        num /= i;\\nreturn num == 1;\\n\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isUgly(int n) {\\n        int num=n;\\n        for (int i=2; i<6 && num>0; i++)\\n    while (num % i == 0)\\n        num /= i;\\nreturn num == 1;\\n\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2826991,
                "title": "java-most-easiest-solution",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n        while (n % 2 == 0) {\\n            n /= 2;\\n        }\\n        while (n % 3 == 0) {\\n            n /= 3;\\n        }\\n        while (n % 5 == 0) {\\n            n /= 5;\\n        }\\n        return n == 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n        while (n % 2 == 0) {\\n            n /= 2;\\n        }\\n        while (n % 3 == 0) {\\n            n /= 3;\\n        }\\n        while (n % 5 == 0) {\\n            n /= 5;\\n        }\\n        return n == 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826238,
                "title": "simple-python-solution",
                "content": "# Intuition\\nNeed to divide number on 5, 3, 2 respectively and compare result with 1.\\nIf number <= 0 it can not be ugly because 100% it has some negative factor not in [2,3,5]\\n\\n# Approach\\n1. If n <= 0 return False\\n2. For each factor: Devide in loop n on factor while remainder of division == 0\\n3. Compare result of n with 1. If it is 1 n is an ugly number\\n\\n# Complexity\\n- Time complexity:\\n$$O(log(N))$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        factors = [5, 3, 2]\\n        for factor in factors:\\n            while n % factor == 0:\\n                n //= factor\\n        return n == 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        factors = [5, 3, 2]\\n        for factor in factors:\\n            while n % factor == 0:\\n                n //= factor\\n        return n == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826171,
                "title": "java-easy-solution-100-faster-o-logn",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0){\\n            return false;\\n        }\\n        \\n        int[] arr = {2 , 3 , 5};\\n        \\n        for(int i = 0 ; i < arr.length ; i++){\\n            while(n % arr[i] == 0){\\n                n = n / arr[i];\\n            }\\n        }\\n        return n==1;\\n    }\\n}\\n```\\n\\n**Please  Upvote**",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0){\\n            return false;\\n        }\\n        \\n        int[] arr = {2 , 3 , 5};\\n        \\n        for(int i = 0 ; i < arr.length ; i++){\\n            while(n % arr[i] == 0){\\n                n = n / arr[i];\\n            }\\n        }\\n        return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826092,
                "title": "python-log-n-simple-solution",
                "content": "# Intuition\\n- **Factorization** is a process of calculating prime factors for a given number.\\n- **Prime numbers** are numbers that can be divided on themselves and 1 with `mod=0`.\\n- **Factors** are multiplicators of a given number.\\n\\nThere is an algorithm to find prime factors for not big numbers and small prime factors \\u2013 https://en.wikipedia.org/wiki/Quadratic_sieve\\n\\n# Approach\\n\\n- In our case the sieve is known \\u2013 `(2, 3, 5)`\\n- Until `n == 1` (see the definition of prime numbers)\\n  - Try to divide `n` on numbers in `sieve` with `mod=0`\\n  - If can, then divide `n` on this number and continue\\n  - If cannot, return `false`\\n\\n# Complexity\\n- Time complexity: log(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        \\n        if n == 0: return False\\n\\n        sieve = (2, 3, 5)\\n\\n        while n != 1:\\n            for f in sieve:\\n               if n % f == 0:\\n                   n = n // f\\n                   break\\n            else:\\n                return False\\n\\n        return True\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        \\n        if n == 0: return False\\n\\n        sieve = (2, 3, 5)\\n\\n        while n != 1:\\n            for f in sieve:\\n               if n % f == 0:\\n                   n = n // f\\n                   break\\n            else:\\n                return False\\n\\n        return True\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2815420,
                "title": "easy-c-solution-n-complexity",
                "content": "# Complexity\\n- Time complexity:\\n    O(logn)\\n\\n- Space complexity:\\n    O(1)\\n\\n# Solution ->\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0) return false;\\n        while(n%2==0){\\n            n=n/2;\\n        }\\n        while(n%3==0){\\n            n=n/3;\\n        }\\n        while(n%5==0){\\n            n=n/5;\\n        }\\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0) return false;\\n        while(n%2==0){\\n            n=n/2;\\n        }\\n        while(n%3==0){\\n            n=n/3;\\n        }\\n        while(n%5==0){\\n            n=n/5;\\n        }\\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2685757,
                "title": "c-basic-concept",
                "content": "# PLease Upvote if Usefull\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if( n==0) return false;\\n        \\n        while( n%2==0){\\n            n=n/2;\\n        }\\n        \\n        while( n%3==0){\\n            n=n/3;\\n        }\\n        while( n%5==0){\\n            n=n/5;\\n        }\\n        return (n==1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if( n==0) return false;\\n        \\n        while( n%2==0){\\n            n=n/2;\\n        }\\n        \\n        while( n%3==0){\\n            n=n/3;\\n        }\\n        while( n%5==0){\\n            n=n/5;\\n        }\\n        return (n==1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2629644,
                "title": "python-easy-to-understand-clean",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0: return False\\n        for i in [2,3,5] :\\n            while n % i==0 :\\n                n = n//i\\n        return n==1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0: return False\\n        for i in [2,3,5] :\\n            while n % i==0 :\\n                n = n//i\\n        return n==1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2494758,
                "title": "java-o-logn-1ms-100",
                "content": "Please Upvote if Helpful\\n\\nDivide the Number by 2, 3 and 5 unless the remainder is not 0. Check the resultant number is 1 or not.\\n\\n***\\n\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        \\n        if(n < 1) { return false; }\\n        if(n < 7) { return true; }\\n        \\n        while(n % 2 == 0) {\\n            n /= 2;\\n        }\\n        \\n        while(n % 3 == 0) {\\n            n /= 3;\\n        }\\n        \\n        while(n % 5 == 0) {\\n            n /= 5;\\n        }\\n        \\n        return n == 1 ? true : false;        \\n    }\\n}\\n\\n***",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public boolean isUgly(int n) {\\n        \\n        if(n < 1) { return false; }",
                "codeTag": "Java"
            },
            {
                "id": 2345474,
                "title": "python-93-76-faster-simplest-solution-with-explanation-beg-to-adv-math",
                "content": "```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        \\n        prime = [2, 3, 5] # prime factors list provided in question againt which we have to check the provided number. \\n        \\n        if n == 0: # as we dont have factors for 0\\n            return False \\n        \\n        for p in prime: # traversing prime numbers from given prime number list.\\n            while n % p == 0: # here we`ll check if the number is having the factor or not. For instance 6%2==0 is true implies 2 is a factor of 6.\\n                n //= p # num = num//p # in this we`ll be having 3(6/2), 1(3/3). Doing this division to update our number\\n        return n == 1 # at last we`ll always have 1, if the number would have factors from the provided list \\n```\\n\\nTo understand it in better way, following is the expansion way it works too:- \\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n == 0: return False;\\n        while n%2 == 0:\\n            n /= 2\\n        while n%3 == 0:\\n            n /= 3\\n        while n%5 == 0:\\n            n /= 5\\n        return n == 1\\n```\\n![image](https://assets.leetcode.com/users/images/4d0c3e30-765e-46e9-9aea-23bd3b5c4ad7_1659005579.1274734.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        \\n        prime = [2, 3, 5] # prime factors list provided in question againt which we have to check the provided number. \\n        \\n        if n == 0: # as we dont have factors for 0\\n            return False \\n        \\n        for p in prime: # traversing prime numbers from given prime number list.\\n            while n % p == 0: # here we`ll check if the number is having the factor or not. For instance 6%2==0 is true implies 2 is a factor of 6.\\n                n //= p # num = num//p # in this we`ll be having 3(6/2), 1(3/3). Doing this division to update our number\\n        return n == 1 # at last we`ll always have 1, if the number would have factors from the provided list \\n```\n```python\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n == 0: return False;\\n        while n%2 == 0:\\n            n /= 2\\n        while n%3 == 0:\\n            n /= 3\\n        while n%5 == 0:\\n            n /= 5\\n        return n == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2299141,
                "title": "c-0-ms-recursive-iterative-soln",
                "content": "itrative\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        int i=2;\\n        if(n<=0) return false;\\n        while(n!=1){\\n            while(n%i==0) n/=i;\\n            if(i>5) return false;\\n            i++;\\n        }return true;\\n    }\\n};\\n```\\nrecursive\\n```\\nclass Solution\\n{\\npublic:\\n    bool isUgly(int n)\\n    {\\n        if (n == 1)return true;\\n        if (n <= 0)return false;\\n        if (n % 2 == 0)return isUgly(n / 2);\\n        if (n % 3 == 0)return isUgly(n / 3);\\n        if (n % 5 == 0)return isUgly(n / 5);\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        int i=2;\\n        if(n<=0) return false;\\n        while(n!=1){\\n            while(n%i==0) n/=i;\\n            if(i>5) return false;\\n            i++;\\n        }return true;\\n    }\\n};\\n```\n```\\nclass Solution\\n{\\npublic:\\n    bool isUgly(int n)\\n    {\\n        if (n == 1)return true;\\n        if (n <= 0)return false;\\n        if (n % 2 == 0)return isUgly(n / 2);\\n        if (n % 3 == 0)return isUgly(n / 3);\\n        if (n % 5 == 0)return isUgly(n / 5);\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2283690,
                "title": "python-simple-solution",
                "content": "```\\ndef isUgly(self, n: int) -> bool:\\n        \\n        if n<=0:\\n            return False\\n        \\n        if n==2 or n==3 or n==5 or n==1:\\n            return True\\n        \\n        for idx in range(0,n//2):\\n            if(n%2==0):\\n                n=n/2\\n            elif(n%3==0):\\n                n=n/3\\n            elif(n%5==0):\\n                n=n/5\\n            elif n==1:\\n                return True\\n            else:\\n                return False\\n        \\n        \\n        return True\\n```",
                "solutionTags": [],
                "code": "```\\ndef isUgly(self, n: int) -> bool:\\n        \\n        if n<=0:\\n            return False\\n        \\n        if n==2 or n==3 or n==5 or n==1:\\n            return True\\n        \\n        for idx in range(0,n//2):\\n            if(n%2==0):\\n                n=n/2\\n            elif(n%3==0):\\n                n=n/3\\n            elif(n%5==0):\\n                n=n/5\\n            elif n==1:\\n                return True\\n            else:\\n                return False\\n        \\n        \\n        return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2149946,
                "title": "0-ms-100-faster-c-clean-easy",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0)\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\twhile(n%2==0)\\n\\t\\t\\t\\tn/=2;\\n\\t\\t\\twhile(n%3==0)\\n\\t\\t\\t\\tn/=3;\\n\\t\\t\\twhile(n%5==0)\\n\\t\\t\\t\\tn/=5;\\n\\t\\t\\treturn n==1;\\n\\t\\t}\\n\\t};\\n\\n\\tpls upvote if it was helpful :)",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0)\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\twhile(n%2==0)\\n\\t\\t\\t\\tn/=2;\\n\\t\\t\\twhile(n%3==0)\\n\\t\\t\\t\\tn/=3;\\n\\t\\t\\twhile(n%5==0)\\n\\t\\t\\t\\tn/=5;\\n\\t\\t\\treturn n==1;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2070885,
                "title": "java-1ms-3-lines-easy-solution",
                "content": "**Read the comments on return statement first fo better understanding**\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n\\t\\n\\t\\t//we will try to calcute for factors from 2 to 5 i.e. if the number gets 1 by any set of factorials, from 2 to 5\\n        for(int i=2; i<6 && n!=0; i++){\\n\\t\\t\\n\\t\\t// run the loop untill n is completely divisible by the factor i.e. current iteration of for loop, we will here decrease the number by dividing to iteration, i.e. by the factor for which we are currently calculating\\n\\t\\t//if this loop breaks, i value will get incremented because of for loop, which will help us checking for another factor\\n            while(n%i == 0) n/=i;\\n        }\\n\\t\\t\\n\\t\\t// return true if the number is 1, i.e it broke down for any set of factors ranging from 2 to 5,\\n\\t\\t// if the number is anything than 1, it simply means, any set of factors from 2 to 5 was not able to break down the number, hence its one of the prime factor is greater than 5.\\n        return n==1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n\\t\\n\\t\\t//we will try to calcute for factors from 2 to 5 i.e. if the number gets 1 by any set of factorials, from 2 to 5\\n        for(int i=2; i<6 && n!=0; i++){\\n\\t\\t\\n\\t\\t// run the loop untill n is completely divisible by the factor i.e. current iteration of for loop, we will here decrease the number by dividing to iteration, i.e. by the factor for which we are currently calculating\\n\\t\\t//if this loop breaks, i value will get incremented because of for loop, which will help us checking for another factor\\n            while(n%i == 0) n/=i;\\n        }\\n\\t\\t\\n\\t\\t// return true if the number is 1, i.e it broke down for any set of factors ranging from 2 to 5,\\n\\t\\t// if the number is anything than 1, it simply means, any set of factors from 2 to 5 was not able to break down the number, hence its one of the prime factor is greater than 5.\\n        return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2023547,
                "title": "0ms-c-solution-with-one-while-loop-only",
                "content": "**Algorithm**\\n* Just divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1. \\n* If n is less than 1, simply reverse false.\\n\\n```\\nbool isUgly(int n){\\n    if(n < 1) return false;\\n    for(int i=2; i<6  ; i++)\\n        while(n %i == 0)\\n            n/=i;\\n    return n==1;\\n}\\n```\\n**If found helpful please upvote**\\n*Feel free to ask if there\\'s any query in comment.*",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isUgly(int n){\\n    if(n < 1) return false;\\n    for(int i=2; i<6  ; i++)\\n        while(n %i == 0)\\n            n/=i;\\n    return n==1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1830307,
                "title": "java-solution-ugly-number",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1||n==2||n==3||n==5)return true;\\n        if(n==0)return false;\\n        while(n%2==0){\\n            n = n/2;\\n        }\\n        while(n%3==0){\\n            n = n/3;\\n        }\\n        while(n%5==0){\\n            n = n/5;\\n        }\\n        return n==1;\\n    }\\n}\\n```\\n\\nHappy Coding!!!\\nDo upvote if you like the Solution.\\nAny queries or suggestions? Sure!! Ping me :\\n* [[LinkedIn](https://www.linkedin.com/in/rohitm17/)]  \\n* [[Twitter](https://twitter.com/rohit_mittal17)]\\n* [[GitHub](https://github.com/rohitm17)]\\n* [[Medium](https://medium.com/@rohitm17)]",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1||n==2||n==3||n==5)return true;\\n        if(n==0)return false;\\n        while(n%2==0){\\n            n = n/2;\\n        }\\n        while(n%3==0){\\n            n = n/3;\\n        }\\n        while(n%5==0){\\n            n = n/5;\\n        }\\n        return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754482,
                "title": "python-o-1-space-complexity-beats-100-when-i-submitted",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n == 0: return False;\\n        while n%2 == 0:\\n            n /= 2\\n        while n%3 == 0:\\n            n /= 3\\n        while n%5 == 0:\\n            n /= 5\\n        return n == 1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n == 0: return False;\\n        while n%2 == 0:\\n            n /= 2\\n        while n%3 == 0:\\n            n /= 3\\n        while n%5 == 0:\\n            n /= 5\\n        return n == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1623760,
                "title": "short-and-sweet-c-solution-100-faster",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        for (auto& e : {2, 3, 5}){\\n            while (n && n%e == 0){\\n                n /= e;\\n            }\\n        }\\n        return n == 1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        for (auto& e : {2, 3, 5}){\\n            while (n && n%e == 0){\\n                n /= e;\\n            }\\n        }\\n        return n == 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1622569,
                "title": "while-loop-in-python-beats-89-09",
                "content": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        def divide_all(divisor):\\n            nonlocal n\\n            while n > 1 and n % divisor == 0:\\n                n //= divisor\\n        \\n        #if n <= 0, always False\\n        if n < 1: return False\\n        \\n        #divide by 2 and 3 and 5 while you can divide\\n        divide_all(2); divide_all(3); divide_all(5)\\n        \\n        return n == 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        def divide_all(divisor):\\n            nonlocal n\\n            while n > 1 and n % divisor == 0:\\n                n //= divisor\\n        \\n        #if n <= 0, always False\\n        if n < 1: return False\\n        \\n        #divide by 2 and 3 and 5 while you can divide\\n        divide_all(2); divide_all(3); divide_all(5)\\n        \\n        return n == 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1601997,
                "title": "easy-python-solution",
                "content": "```\\ndef isUgly(self, n: int) -> bool:\\n        if n==0: return False\\n        for i in range(2,6):\\n            while(n%i==0):\\n                n//=i\\n        return n==1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef isUgly(self, n: int) -> bool:\\n        if n==0: return False\\n        for i in range(2,6):\\n            while(n%i==0):\\n                n//=i\\n        return n==1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1567335,
                "title": "simple-java-solution-with-explanation",
                "content": "It simply means that a number should be either divided bye 2 or 3 or 5 (Whereas 1 is considered as default ugly number). \\n\\n1:-  if a number is not Divisible by 2,3 or 5 then the number is not ugly number.\\n\\neg : let n = 14, at first pass 14 can be Completely Divisible by 2, so we make 14/2=7.\\n        in the second pass 7 is not Divisible by 2, 3, or 5 so we return false. \\n\\t\\tand we will stop the loop when n Becomes 1. \\n```\\npublic boolean isUgly(int n) {\\n        if(n == 0) return false;\\n        if(n == 1) return true;\\n        \\n        while(n != 1) {\\n            if(n % 2 == 0) {\\n                n = n/2;\\n            }\\n            else if(n % 3 == 0) {\\n                n = n/3;\\n            }\\n            else if( n % 5 == 0) {\\n                n = n/5;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```\\nPlease upvote if you feel above Explanation was useful :)",
                "solutionTags": [],
                "code": "```\\npublic boolean isUgly(int n) {\\n        if(n == 0) return false;\\n        if(n == 1) return true;\\n        \\n        while(n != 1) {\\n            if(n % 2 == 0) {\\n                n = n/2;\\n            }\\n            else if(n % 3 == 0) {\\n                n = n/3;\\n            }\\n            else if( n % 5 == 0) {\\n                n = n/5;\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1423874,
                "title": "simple-c-solution-100-faster-simple-math-logic-with-explanation",
                "content": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        // edge case\\n        if(n==0) {\\n            return false;\\n        }\\n        // remove all 2\\'s factors\\n        while(n%2==0) {\\n            n = n/2;\\n        }\\n        \\n        // remove all 3\\'s factors\\n        while(n%3==0) {\\n            n = n/3;\\n        }\\n        \\n        // remove all 5\\'s factors\\n        while(n%5==0) {\\n            n = n/5;\\n        }\\n        \\n // now if n became 1 means all factors were only combinations of 2,3,5 which have been remove by above process\\n        if(n==1) {\\n            return true;\\n        }\\n        // else return false because it has other factors than 2 ,3 and 5\\n        return false;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        // edge case\\n        if(n==0) {\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1236389,
                "title": "python3-simple-solution-beats-99-users",
                "content": "![image](https://assets.leetcode.com/users/images/d405b80e-571a-466c-a60f-6f2f999cce39_1622213154.4216669.png)\\n```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        if n == 1:\\n            return True\\n        while n != 1:\\n            if n % 2 == 0:\\n                n //= 2\\n            elif n % 3 == 0:\\n                n //= 3\\n            elif n % 5 == 0:\\n                n //= 5\\n            else:\\n                return False\\n        return True\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n <= 0:\\n            return False\\n        if n == 1:\\n            return True\\n        while n != 1:\\n            if n % 2 == 0:\\n                n //= 2\\n            elif n % 3 == 0:\\n                n //= 3\\n            elif n % 5 == 0:\\n                n //= 5\\n            else:\\n                return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1119401,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n        if (n == 1) return true;\\n        if (n % 2 == 0) return isUgly(n/2);\\n        if (n % 3 == 0) return isUgly(n/3);\\n        if (n % 5 == 0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n        if (n == 1) return true;\\n        if (n % 2 == 0) return isUgly(n/2);\\n        if (n % 3 == 0) return isUgly(n/3);\\n        if (n % 5 == 0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1103723,
                "title": "faster-than-99-34-python-solution-depends-on-test-cases-it-will-vary",
                "content": "\\tclass Solution:\\n\\t\\tdef isUgly(self, n: int) -> bool:\\n\\n\\t\\t\\twhile n>0:\\n\\t\\t\\t\\tif n==1:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\tif n%2==0:\\n\\t\\t\\t\\t\\tn=n//2\\n\\t\\t\\t\\telif n%3==0:\\n\\t\\t\\t\\t\\tn=n//3\\n\\t\\t\\t\\telif n%5==0:\\n\\t\\t\\t\\t\\tn=n//5\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn False\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef isUgly(self, n: int) -> bool:\\n\\n\\t\\t\\twhile n>0:\\n\\t\\t\\t\\tif n==1:\\n\\t\\t\\t\\t\\treturn True\\n\\t\\t\\t\\tif n%2==0:\\n\\t\\t\\t\\t\\tn=n//2\\n\\t\\t\\t\\telif n%3==0:\\n\\t\\t\\t\\t\\tn=n//3\\n\\t\\t\\t\\telif n%5==0:\\n\\t\\t\\t\\t\\tn=n//5\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\treturn False\\n\\t\\t\\treturn False\\n",
                "codeTag": "Java"
            },
            {
                "id": 1001937,
                "title": "python-solution",
                "content": "\\tif num == 0:\\n\\t\\treturn False\\n\\twhile num % 2 == 0:\\n\\t\\tnum /= 2\\n\\twhile num % 3 == 0:\\n\\t\\tnum /= 3\\n\\twhile num % 5 == 0:\\n\\t\\tnum /= 5\\n\\treturn num == 1",
                "solutionTags": [],
                "code": "\\tif num == 0:\\n\\t\\treturn False\\n\\twhile num % 2 == 0:\\n\\t\\tnum /= 2\\n\\twhile num % 3 == 0:\\n\\t\\tnum /= 3\\n\\twhile num % 5 == 0:\\n\\t\\tnum /= 5\\n\\treturn num == 1",
                "codeTag": "Unknown"
            },
            {
                "id": 921274,
                "title": "100-java-plain-and-simple",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n            \\n        while (num % 2 == 0) { num /= 2; }\\n        while (num % 3 == 0) { num /= 3; }\\n        while (num % 5 == 0) { num /= 5; }\\n        \\n        return num == 1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n            \\n        while (num % 2 == 0) { num /= 2; }\\n        while (num % 3 == 0) { num /= 3; }\\n        while (num % 5 == 0) { num /= 5; }\\n        \\n        return num == 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 723468,
                "title": "java-1ms-beats-100-three-while-loops-to-perform-2-3-5",
                "content": "```\\nclass Solution {\\n  public boolean isUgly(int num) {\\n    \\n    /*\\n    Runtime: 1 ms, faster than 100.00% of Java online submissions for Ugly Number.\\n    Memory Usage: 36.6 MB, less than 70.69% of Java online submissions for Ugly Number.\\n    */\\n    \\n    if (num <= 0) {\\n      return false;\\n    }\\n\\n    while (num % 2 == 0) {\\n      num /= 2;\\n    }\\n    \\n    while (num % 3 == 0) {\\n      num /= 3;\\n    }\\n    \\n    while (num % 5 == 0) {\\n      num /= 5;\\n    }\\n    \\n    return (num == 1);\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public boolean isUgly(int num) {\\n    \\n    /*\\n    Runtime: 1 ms, faster than 100.00% of Java online submissions for Ugly Number.\\n    Memory Usage: 36.6 MB, less than 70.69% of Java online submissions for Ugly Number.\\n    */\\n    \\n    if (num <= 0) {\\n      return false;\\n    }\\n\\n    while (num % 2 == 0) {\\n      num /= 2;\\n    }\\n    \\n    while (num % 3 == 0) {\\n      num /= 3;\\n    }\\n    \\n    while (num % 5 == 0) {\\n      num /= 5;\\n    }\\n    \\n    return (num == 1);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 688967,
                "title": "c-easy-solution-100-00",
                "content": "```\\nbool isUgly(int num) {\\n\\tif (num <= 0)\\n\\t\\treturn false;\\n\\n\\tif (num % 5 == 0)\\n\\t   return isUgly(num / 5);\\n\\telse if (num % 3 == 0)\\n\\t   return isUgly(num / 3);\\n\\telse if (num % 2 == 0)\\n\\t   return isUgly(num / 2);\\n\\n\\tif (num == 1)\\n\\t\\treturn true;\\n\\treturn false;\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nbool isUgly(int num) {\\n\\tif (num <= 0)\\n\\t\\treturn false;\\n\\n\\tif (num % 5 == 0)\\n\\t   return isUgly(num / 5);\\n\\telse if (num % 3 == 0)\\n\\t   return isUgly(num / 3);\\n\\telse if (num % 2 == 0)\\n\\t   return isUgly(num / 2);\\n\\n\\tif (num == 1)\\n\\t\\treturn true;\\n\\treturn false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 516634,
                "title": "ugly-not-only-number-but-also-my-code",
                "content": "```\\n    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n        while(num % 2 == 0) num /= 2;\\n        while(num % 3 == 0) num /= 3;\\n        while(num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\n    public boolean isUgly(int num) {\\n        if (num == 0) return false;\\n        while(num % 2 == 0) num /= 2;\\n        while(num % 3 == 0) num /= 3;\\n        while(num % 5 == 0) num /= 5;\\n        return num == 1;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 352587,
                "title": "c-solution-0ms-100-faster-and-8mb-100-less",
                "content": "https://leetcode.com/submissions/detail/249419983/\\n\\'\\'\\'\\n\\n    bool isUgly(int no) \\n    { \\n\\t\\tif(no<=0) return 0;\\n        if(no%2==0) no /= no & (~(no-1));  // Dividing no by the highest number (that\\'s a power of 2) that is divisible.\\n        while(no%3==0) // For divisiblity by 3.\\n            no/=3;\\n        while(no%5==0) // For divisiblity by 5.\\n            no/=5;\\n        return no==1;\\n    }\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "https://leetcode.com/submissions/detail/249419983/\\n\\'\\'\\'\\n\\n    bool isUgly(int no) \\n    { \\n\\t\\tif(no<=0) return 0;\\n        if(no%2==0) no /= no & (~(no-1));  // Dividing no by the highest number (that\\'s a power of 2) that is divisible.\\n        while(no%3==0) // For divisiblity by 3.\\n            no/=3;\\n        while(no%5==0) // For divisiblity by 5.\\n            no/=5;\\n        return no==1;\\n    }\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 69293,
                "title": "my-swift-solution",
                "content": "    func isUgly(num: Int) -> Bool {\\n            if num <= 0 {\\n                return false\\n            }\\n    \\n            var inputNum = num\\n            while inputNum > 1 {\\n                if inputNum % 2 == 0 {\\n                    inputNum /= 2\\n                } else if inputNum % 3 == 0 {\\n                    inputNum /= 3\\n                } else if inputNum % 5 == 0 {\\n                    inputNum /= 5\\n                } else {\\n                    break\\n                }\\n            }\\n    \\n            return inputNum == 1\\n        }",
                "solutionTags": [
                    "Swift"
                ],
                "code": "    func isUgly(num: Int) -> Bool {\\n            if num <= 0 {\\n                return false\\n            }\\n    \\n            var inputNum = num\\n            while inputNum > 1 {\\n                if inputNum % 2 == 0 {\\n                    inputNum /= 2\\n                } else if inputNum % 3 == 0 {\\n                    inputNum /= 3\\n                } else if inputNum % 5 == 0 {\\n                    inputNum /= 5\\n                } else {\\n                    break\\n                }\\n            }\\n    \\n            return inputNum == 1\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 69302,
                "title": "recursive-solution-is-faster-than-iterative-solution",
                "content": "Recursive solution in c++ is faster\\n \\n\\nbool isUgly(int num) {\\n\\n        if(num<1)return false;\\n        if(num==1) return true;\\n        if(num%2==0) return isUgly(num/2);\\n        else if(num%3==0) return isUgly(num/3);\\n        else if(num%5==0) return isUgly(num/5);\\n        else return false;\\n}",
                "solutionTags": [],
                "code": "Recursive solution in c++ is faster\\n \\n\\nbool isUgly(int num) {\\n\\n        if(num<1)return false;\\n        if(num==1) return true;\\n        if(num%2==0) return isUgly(num/2);\\n        else if(num%3==0) return isUgly(num/3);\\n        else if(num%5==0) return isUgly(num/5);\\n        else return false;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 69309,
                "title": "4ms-recursive-solution-in-c",
                "content": "\\n\\n    class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if (num == 1) return true;\\n            if (num == 0) return false;\\n            else if (num % 2 == 0) return isUgly(num / 2);\\n            else if (num % 3 == 0) return isUgly(num / 3);\\n            else if (num % 5 == 0) return isUgly(num / 5);\\n            else return false; \\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        bool isUgly(int num) {\\n            if (num == 1) return true;\\n            if (num == 0) return false;\\n            else if (num % 2 == 0) return isUgly(num / 2);\\n            else if (num % 3 == 0) return isUgly(num / 3);\\n            else if (num % 5 == 0) return isUgly(num / 5);\\n            else return false; \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3822642,
                "title": "simple-c-solution-beats-100-00-of-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false;\\n        \\n        while(!(n%2))\\n            n/=2;\\n\\n        while(!(n%3))\\n            n/=3;\\n\\n        while(!(n%5))\\n            n/=5;\\n        \\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false;\\n        \\n        while(!(n%2))\\n            n/=2;\\n\\n        while(!(n%3))\\n            n/=3;\\n\\n        while(!(n%5))\\n            n/=5;\\n        \\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3805112,
                "title": "recursion-easy-math-approach",
                "content": "# Intuition\\nStep 1: Firstly divide by 2 recursively.\\nStep 2: Then divide by 3 recursively.\\nStep 3: Then again divide by 5 recursively.\\nStep 4: If the quotient is q then return true else false.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n) --> Auxillary space\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0) return false;\\n        n = divi(n,2);\\n        n = divi(n,3);\\n        n = divi(n,5);\\n        return n == 1;\\n    }\\n    public int divi(int n, int dv){\\n        while(n % dv == 0) n/= dv;\\n        return n;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0) return false;\\n        n = divi(n,2);\\n        n = divi(n,3);\\n        n = divi(n,5);\\n        return n == 1;\\n    }\\n    public int divi(int n, int dv){\\n        while(n % dv == 0) n/= dv;\\n        return n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497748,
                "title": "c-very-easy-to-understand-simple-code-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n![cat.jpg](https://assets.leetcode.com/users/images/26f1f2cc-828c-44fe-9891-9a722c2f341e_1683485463.7127638.jpeg)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0) return false;\\n        while(n!=1)\\n        {\\n            cout<<n<<endl;\\n            if(n%2==0)      n=n/2;\\n            else if(n%3==0) n=n/3;\\n            else if(n%5==0) n=n/5;\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0) return false;\\n        while(n!=1)\\n        {\\n            cout<<n<<endl;\\n            if(n%2==0)      n=n/2;\\n            else if(n%3==0) n=n/3;\\n            else if(n%5==0) n=n/5;\\n            else return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3488623,
                "title": "java-solution-beating-100-runtime",
                "content": "Runtime: 0ms\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n==1) {\\n            return true;\\n        }\\n        if(n==0){\\n            return false;\\n        }\\n        if(n % 2 == 0){\\n            return isUgly (n/2);\\n        }\\n        else if(n % 3 == 0){\\n            return isUgly(n/3);\\n        }\\n        else if(n % 5 == 0){\\n            return isUgly(n/5);\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n==1) {\\n            return true;\\n        }\\n        if(n==0){\\n            return false;\\n        }\\n        if(n % 2 == 0){\\n            return isUgly (n/2);\\n        }\\n        else if(n % 3 == 0){\\n            return isUgly(n/3);\\n        }\\n        else if(n % 5 == 0){\\n            return isUgly(n/5);\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3459362,
                "title": "go-recursive",
                "content": "# Intuition\\nAttention **n <= 0**\\n\\n# Complexity\\n- Time complexity: $$O(log(n))$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nfunc isUgly(n int) bool {\\n    if n <= 0 {\\n\\t\\treturn false\\n\\t}\\n\\n\\tif n == 1 || n == 2 || n == 3 || n == 5 {\\n\\t\\treturn true\\n\\t}\\n\\n\\tif n%2 == 0 {\\n\\t\\treturn isUgly(n / 2)\\n\\t}\\n\\n\\tif n%3 == 0 {\\n\\t\\treturn isUgly(n / 3)\\n\\t}\\n\\n\\tif n%5 == 0 {\\n\\t\\treturn isUgly(n / 5)\\n\\t}\\n\\treturn false\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc isUgly(n int) bool {\\n    if n <= 0 {\\n\\t\\treturn false\\n\\t}\\n\\n\\tif n == 1 || n == 2 || n == 3 || n == 5 {\\n\\t\\treturn true\\n\\t}\\n\\n\\tif n%2 == 0 {\\n\\t\\treturn isUgly(n / 2)\\n\\t}\\n\\n\\tif n%3 == 0 {\\n\\t\\treturn isUgly(n / 3)\\n\\t}\\n\\n\\tif n%5 == 0 {\\n\\t\\treturn isUgly(n / 5)\\n\\t}\\n\\treturn false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3444715,
                "title": "super-easy-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0){\\n            return false;\\n        }\\n      while(n != 1){\\n          if(n%2==0){\\n              n/=2;\\n          }\\n          else if(n%3==0){\\n              n/=3;\\n          }\\n          else if(n%5==0){\\n              n/=5;\\n          }\\n          else{\\n              return false;\\n          }\\n      }\\n      return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0){\\n            return false;\\n        }\\n      while(n != 1){\\n          if(n%2==0){\\n              n/=2;\\n          }\\n          else if(n%3==0){\\n              n/=3;\\n          }\\n          else if(n%5==0){\\n              n/=5;\\n          }\\n          else{\\n              return false;\\n          }\\n      }\\n      return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3356804,
                "title": "easy-c-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)return false;\\n        while(n%2==0)n/=2;\\n        while(n%3==0)n/=3;\\n        while(n%5==0)n/=5;\\n        return n==1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==0)return false;\\n        while(n%2==0)n/=2;\\n        while(n%3==0)n/=3;\\n        while(n%5==0)n/=5;\\n        return n==1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3184641,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public bool IsUgly(int n) {\\n        if(n==1) return true;\\n        if(n<=0) return false;\\n        while(n%2==0) n=n>>1;\\n        while(n%3==0) n/=3;\\n        while(n%5==0) n/=5;\\n\\n        return n==1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public bool IsUgly(int n) {\\n        if(n==1) return true;\\n        if(n<=0) return false;\\n        while(n%2==0) n=n>>1;\\n        while(n%3==0) n/=3;\\n        while(n%5==0) n/=5;\\n\\n        return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3056612,
                "title": "c-short-crisp-code",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust divide by 2, 3 and 5 as often as possible and then check whether we arrived at 1. Also try divisor 4 if that makes the code simpler / less repetitive.\\n\\n\\n# Code\\n```\\nfor (int i=2; i<6 && num; i++)\\n    while (num % i == 0)\\n        num /= i;\\nreturn num == 1;\\n```\\n**Please upvote if it helped. Happy Coding!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nfor (int i=2; i<6 && num; i++)\\n    while (num % i == 0)\\n        num /= i;\\nreturn num == 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3055486,
                "title": "4-diffrent-logic-1ms-only",
                "content": "# logic 1\\n```java\\n\\n// To Code : 10 min\\n// Execution : 1 ms\\n\\n// Time complexity: O(log(n))\\n// Space complexity: O(1)\\n\\nclass xyz {\\n\\tpublic static void main(String[] args) {\\n\\t\\tSolution s = new Solution();\\n\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(14)); // false\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(-12)); // false\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(0)); // false\\n\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(6)); // true\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(1)); // true\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(900)); // true\\n\\n\\t}\\n}\\n\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\tSystem.out.println(\"\\\\nn: \" + n);\\n\\n\\t\\t// if -ve or zero\\n\\t\\t// for -ve no. also loop can handle\\n\\t\\t// but added here to same time ... y need to run loop for no reason\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\t// // special case ... but loop will handle automatically\\n\\t\\t// if (n == 1)\\n\\t\\t// return true;\\n\\n\\t\\twhile (n != 1) { // n>1\\n\\t\\t\\tif (n % 2 == 0)\\n\\t\\t\\t\\tn /= 2;\\n\\t\\t\\telse if (n % 3 == 0)\\n\\t\\t\\t\\tn /= 3;\\n\\t\\t\\telse if (n % 5 == 0)\\n\\t\\t\\t\\tn /= 5;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tSystem.out.println(n);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n}\\n\\n```\\n\\n# logic 2\\n\\n```java\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\twhile (n % 5 == 0)\\n\\t\\t\\tn /= 5;\\n\\t\\twhile (n % 3 == 0)\\n\\t\\t\\tn /= 3;\\n\\t\\twhile (n % 2 == 0)\\n\\t\\t\\tn /= 2;\\n\\n\\t\\treturn n == 1;\\n\\t}\\n}\\n```\\n\\n# logic 3\\n- ... same as 1\\n- but little diff\\n\\n```java\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\twhile (true) {\\n\\t\\t\\tif (n % 2 == 0)\\n\\t\\t\\t\\tn /= 2;\\n\\t\\t\\telse if (n % 3 == 0)\\n\\t\\t\\t\\tn /= 3;\\n\\t\\t\\telse if (n % 5 == 0)\\n\\t\\t\\t\\tn /= 5;\\n\\t\\t\\telse\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn n == 1;\\n\\t}\\n}\\n```\\n\\n# logic 4\\n\\n```java\\n// using \"factors list\"\\n// .... futuristic \\n// ... if more number get added/want to add\\n\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\t// A non-positive integer cannot be ugly\\n\\t\\tif (n <= 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Factorize by dividing with permitted factors\\n\\t\\tfor (int factor : new int[] { 2, 3, 5 }) {\\n\\t\\t\\tn = keepDividingWhenDivisible(n, factor);\\n\\t\\t}\\n\\n\\t\\t// Check if the integer is reduced to 1 or not.\\n\\t\\treturn n == 1;\\n\\t}\\n\\n\\t// Keep dividing dividend by divisor when division is possible.\\n\\tprivate int keepDividingWhenDivisible(int dividend, int divisor) {\\n\\t\\twhile (dividend % divisor == 0) {\\n\\t\\t\\tdividend /= divisor;\\n\\t\\t}\\n\\t\\treturn dividend;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```java\\n\\n// To Code : 10 min\\n// Execution : 1 ms\\n\\n// Time complexity: O(log(n))\\n// Space complexity: O(1)\\n\\nclass xyz {\\n\\tpublic static void main(String[] args) {\\n\\t\\tSolution s = new Solution();\\n\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(14)); // false\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(-12)); // false\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(0)); // false\\n\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(6)); // true\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(1)); // true\\n\\t\\tSystem.out.println(\"\\\\nAns:- \" + s.isUgly(900)); // true\\n\\n\\t}\\n}\\n\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\tSystem.out.println(\"\\\\nn: \" + n);\\n\\n\\t\\t// if -ve or zero\\n\\t\\t// for -ve no. also loop can handle\\n\\t\\t// but added here to same time ... y need to run loop for no reason\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\t// // special case ... but loop will handle automatically\\n\\t\\t// if (n == 1)\\n\\t\\t// return true;\\n\\n\\t\\twhile (n != 1) { // n>1\\n\\t\\t\\tif (n % 2 == 0)\\n\\t\\t\\t\\tn /= 2;\\n\\t\\t\\telse if (n % 3 == 0)\\n\\t\\t\\t\\tn /= 3;\\n\\t\\t\\telse if (n % 5 == 0)\\n\\t\\t\\t\\tn /= 5;\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn false;\\n\\n\\t\\t\\tSystem.out.println(n);\\n\\t\\t}\\n\\n\\t\\treturn true;\\n\\t}\\n}\\n\\n```\n```java\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\twhile (n % 5 == 0)\\n\\t\\t\\tn /= 5;\\n\\t\\twhile (n % 3 == 0)\\n\\t\\t\\tn /= 3;\\n\\t\\twhile (n % 2 == 0)\\n\\t\\t\\tn /= 2;\\n\\n\\t\\treturn n == 1;\\n\\t}\\n}\\n```\n```java\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\n\\t\\tif (n <= 0)\\n\\t\\t\\treturn false;\\n\\n\\t\\twhile (true) {\\n\\t\\t\\tif (n % 2 == 0)\\n\\t\\t\\t\\tn /= 2;\\n\\t\\t\\telse if (n % 3 == 0)\\n\\t\\t\\t\\tn /= 3;\\n\\t\\t\\telse if (n % 5 == 0)\\n\\t\\t\\t\\tn /= 5;\\n\\t\\t\\telse\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\treturn n == 1;\\n\\t}\\n}\\n```\n```java\\n// using \"factors list\"\\n// .... futuristic \\n// ... if more number get added/want to add\\n\\nclass Solution {\\n\\tpublic boolean isUgly(int n) {\\n\\t\\t// A non-positive integer cannot be ugly\\n\\t\\tif (n <= 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\t// Factorize by dividing with permitted factors\\n\\t\\tfor (int factor : new int[] { 2, 3, 5 }) {\\n\\t\\t\\tn = keepDividingWhenDivisible(n, factor);\\n\\t\\t}\\n\\n\\t\\t// Check if the integer is reduced to 1 or not.\\n\\t\\treturn n == 1;\\n\\t}\\n\\n\\t// Keep dividing dividend by divisor when division is possible.\\n\\tprivate int keepDividingWhenDivisible(int dividend, int divisor) {\\n\\t\\twhile (dividend % divisor == 0) {\\n\\t\\t\\tdividend /= divisor;\\n\\t\\t}\\n\\t\\treturn dividend;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3039271,
                "title": "ugly-number-beautiful-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        if(check(n)==0) return false;\\n        else return true;\\n    }\\n    int check(int n){\\n        if(n==1) return 1;\\n        if(n%2==0) return check(n/2);\\n        if(n%3==0) return check(n/3);\\n        if(n%5==0) return check(n/5);\\n        else return 0;\\n    }\\n};\\n```\\n# Upvote if this hepled!\\n![upvote.jpeg](https://assets.leetcode.com/users/images/bf653ea3-2197-4e5f-ab87-d476c6033241_1673508828.0963988.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<=0) return false;\\n        if(check(n)==0) return false;\\n        else return true;\\n    }\\n    int check(int n){\\n        if(n==1) return 1;\\n        if(n%2==0) return check(n/2);\\n        if(n%3==0) return check(n/3);\\n        if(n%5==0) return check(n/5);\\n        else return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2830300,
                "title": "easy-and-simple-solution-easy-to-understand",
                "content": "```class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n ==  0)\\n        {\\n            return false;\\n        }\\n        while (n > 0)\\n        {\\n            if( n == 1)\\n            {\\n                return true;\\n            }\\n            else if( n % 2 == 0)\\n            {\\n                n = n/2;\\n            }\\n            else if( n % 3 == 0)\\n            {\\n                n = n / 3;\\n            }\\n            else if(n % 5 == 0)\\n            {\\n                n = n / 5;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n             \\n            return true;    \\n        }\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n ==  0)\\n        {\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2829439,
                "title": "java-iterative-solution-recursive-solution-clean-code",
                "content": "# Iterative Solution\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        while(n>0 && n%5==0){\\n            n=n/5;\\n        }\\n        while(n>0 && n%3==0){\\n            n=n/3;\\n        }\\n        while(n>0 && n%2==0){\\n            n=n/2;\\n        }\\n        return n==1;\\n    }\\n}\\n```\\n\\n# Recursive Solution\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0) return false;\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        if(n%3==0) return isUgly(n/3);\\n        if(n%5==0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        while(n>0 && n%5==0){\\n            n=n/5;\\n        }\\n        while(n>0 && n%3==0){\\n            n=n/3;\\n        }\\n        while(n>0 && n%2==0){\\n            n=n/2;\\n        }\\n        return n==1;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==0) return false;\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        if(n%3==0) return isUgly(n/3);\\n        if(n%5==0) return isUgly(n/5);\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2828663,
                "title": "python-easy-96-74-faster-o-log-n-solution",
                "content": "```\\nfrom math import sqrt\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0:\\n            return False\\n        while n%2==0 or n%3==0 or n%5==0:\\n            if n%2==0:\\n                n//=2\\n            elif n%3==0:\\n                n//=3\\n            elif n%5==0:\\n                n//=5\\n        if n==1:\\n            return True\\n        return False\\n```\\n\\n**Upvote if you like the solution or ask if there is any query**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nfrom math import sqrt\\nclass Solution:\\n    def isUgly(self, n: int) -> bool:\\n        if n<=0:\\n            return False\\n        while n%2==0 or n%3==0 or n%5==0:\\n            if n%2==0:\\n                n//=2\\n            elif n%3==0:\\n                n//=3\\n            elif n%5==0:\\n                n//=5\\n        if n==1:\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827956,
                "title": "by-c-only-if-else-conditions",
                "content": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==1)\\n            return true;\\n        else if(n<=0)\\n            return false;\\n        if(n%2==0) return isUgly(n/2);\\n        if(n%3==0) return isUgly(n/3);\\n        if(n%5==0) return isUgly(n/5);\\n            return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n==1)\\n            return true;\\n        else if(n<=0)\\n            return false;\\n        if(n%2==0) return isUgly(n/2);\\n        if(n%3==0) return isUgly(n/3);\\n        if(n%5==0) return isUgly(n/5);\\n            return false;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2827595,
                "title": "very-easy-solution",
                "content": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if(n == 0)\\n        {\\n            return false;\\n        }\\n        while (n > 0)\\n        {\\n            if( n == 1)\\n            {\\n                return true;\\n            }\\n            else if( n % 2 == 0)\\n            {\\n                n = n/2;\\n            }\\n            else if( n % 3 == 0)\\n            {\\n                n = n / 3;\\n            }\\n            else if(n % 5 == 0)\\n            {\\n                n = n / 5;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n               \\n        }\\n       return false;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if(n == 0)\\n        {\\n            return false;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2827574,
                "title": "easy-and-beginner-friendly-solution-in-c",
                "content": "\\n\\n# Complexity\\n- Time complexity: \\n $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n $$O(1)$$\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        while(n>1){\\n            if(n%2 == 0)\\n                n = n/2;\\n            else if(n%3 == 0)\\n                n = n/3;\\n            else if(n%5 == 0)\\n                n = n/5;\\n            \\n            else\\n                break;\\n        }\\n\\n        if(n == 1)\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        while(n>1){\\n            if(n%2 == 0)\\n                n = n/2;\\n            else if(n%3 == 0)\\n                n = n/3;\\n            else if(n%5 == 0)\\n                n = n/5;\\n            \\n            else\\n                break;\\n        }\\n\\n        if(n == 1)\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827431,
                "title": "easy-c-solution-must-check",
                "content": "\\n\\n**Solution:**\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        while(n>1)\\n        {\\n            if(n%2==0)\\n            {\\n                n=n/2;\\n            }\\n            else if(n%3==0)\\n            {\\n                n=n/3;\\n            }\\n            else if(n%5==0)\\n            {\\n                n=n/5;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        return n==1;\\n    }\\n};\\n```\\n\\n---\\n\\n\\n**Analysis:**\\n- Time complexity: ```O(n)```\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n----\\n- Space complexity:```O(1)```\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n-----\\n\\nIf this solution help you, then please ```UPVOTE```.\\n**Till then keep learning, Keep Growing!!!**\\n\\n\\n\\n\\n---\\n\\n\\n**Thank You !!!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        while(n>1)\\n        {\\n            if(n%2==0)\\n            {\\n                n=n/2;\\n            }\\n            else if(n%3==0)\\n            {\\n                n=n/3;\\n            }\\n            else if(n%5==0)\\n            {\\n                n=n/5;\\n            }\\n            else\\n            {\\n                break;\\n            }\\n        }\\n        return n==1;\\n    }\\n};\\n```\n```O(n)```\n```O(1)```\n```UPVOTE```",
                "codeTag": "Java"
            },
            {
                "id": 2827428,
                "title": "factorization-based-solution-c-single-pass-tc-o-1-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEvery ugly number can be expressed in the form of 2, 3 and 5 in varying powers. Hence, if a number can be expressed using only by 2, 3 and 5, we can call it an ugly number.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, we check if a given number is divisible by 2 and then continue dividing it by 2 till its no longer divisible by it. Then, we repeat the process for 3 and 5.\\n\\nLastly, if we are left with 1, then the given number is an ugly number.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n**NOTE:** Time complexity would be constant as the greatest possible input that can be given is 2^31-1 and this number will iterate only the first loop and that too just 31 times.\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false;\\n        \\n        while(!(n%2))\\n            n/=2;\\n\\n        while(!(n%3))\\n            n/=3;\\n\\n        while(!(n%5))\\n            n/=5;\\n        \\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(!n) return false;\\n        \\n        while(!(n%2))\\n            n/=2;\\n\\n        while(!(n%3))\\n            n/=3;\\n\\n        while(!(n%5))\\n            n/=5;\\n        \\n        if(n==1) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827264,
                "title": "easy-c-recursive-solution",
                "content": "![image](https://assets.leetcode.com/users/images/674d90df-e172-4b6f-b9df-870cedd7666b_1668775102.469841.png)\\n",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/674d90df-e172-4b6f-b9df-870cedd7666b_1668775102.469841.png)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2827257,
                "title": "easy-and-understandable-c-code-basic-mathematics",
                "content": "**Approach**\\nwe need to find the number is ugly or not.\\nCase 1 :- If the number(n) is not divisible by any number(2, 3 and 5) then it will definitely not a ugly number.\\nCase 2 :- If the number(n) is divisible by any number (2, 3, and 5) but it will also divisible by any other number then it will also not a ugly number.\\nCase 3 :- If number(n) is divisible by (2, 3, and 5) and it it will become n==1, then it will be a ugly number.\\n\\n**C++ Code is given below**\\n**If you find it is helpful for you give a upvote please..!!**\\nbool isUgly(int n) {\\n        \\n        if(n <= 0) return false;\\n        while(n > 1) {\\n            if(n % 2 == 0)      n = n / 2;\\n            else if(n % 3 == 0) n = n / 3;\\n            else if(n % 5 == 0) n = n / 5;\\n            else    break;\\n        }\\n        return (n == 1);\\n    }",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "**Approach**\\nwe need to find the number is ugly or not.\\nCase 1 :- If the number(n) is not divisible by any number(2, 3 and 5) then it will definitely not a ugly number.\\nCase 2 :- If the number(n) is divisible by any number (2, 3, and 5) but it will also divisible by any other number then it will also not a ugly number.\\nCase 3 :- If number(n) is divisible by (2, 3, and 5) and it it will become n==1, then it will be a ugly number.\\n\\n**C++ Code is given below**\\n**If you find it is helpful for you give a upvote please..!!**\\nbool isUgly(int n) {\\n        \\n        if(n <= 0) return false;\\n        while(n > 1) {\\n            if(n % 2 == 0)      n = n / 2;\\n            else if(n % 3 == 0) n = n / 3;\\n            else if(n % 5 == 0) n = n / 5;\\n            else    break;\\n        }\\n        return (n == 1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2827117,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0){return false;}\\n\\t\\t\\twhile(n%2==0){\\n\\t\\t\\t\\tn/=2;\\n\\t\\t\\t}\\n\\t\\t\\twhile(n%3==0){\\n\\t\\t\\t\\tn/=3;\\n\\t\\t\\t}\\n\\t\\t\\twhile(n%5==0){\\n\\t\\t\\t\\tn/=5;\\n\\t\\t\\t}\\n\\t\\t\\treturn n==1;\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tbool isUgly(int n) {\\n\\t\\t\\tif(n==0){return false;}",
                "codeTag": "Java"
            },
            {
                "id": 2827073,
                "title": "java-100-short-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nDivide number to [2,3,5] until reach the end\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int num) {\\n        if(num == 0) return false;\\n\\n        \\n        while(num%2 ==0){\\n            num /= 2;\\n        }\\n        while(num%3 ==0){\\n            num /= 3;\\n        }\\n        while(num%5 ==0){\\n            num /= 5;\\n        }\\n\\n        \\n\\n        return num == 1;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int num) {\\n        if(num == 0) return false;\\n\\n        \\n        while(num%2 ==0){\\n            num /= 2;\\n        }\\n        while(num%3 ==0){\\n            num /= 3;\\n        }\\n        while(num%5 ==0){\\n            num /= 5;\\n        }\\n\\n        \\n\\n        return num == 1;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2827063,
                "title": "c-easy-brute-force-69-space-21-time",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n      if(n == 0) return false;\\n      while(n % 2 == 0) n /= 2;\\n      while(n % 3 == 0) n /= 3;\\n      while(n % 5 == 0) n /= 5;\\n      return n == 1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n      if(n == 0) return false;\\n      while(n % 2 == 0) n /= 2;\\n      while(n % 3 == 0) n /= 3;\\n      while(n % 5 == 0) n /= 5;\\n      return n == 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826951,
                "title": "java-100-faster-solution-recursion",
                "content": "# Intuition\\n* Need to divide the number recusrsively by prime factors\\n\\n# Approach\\n* Check if the number becomes = 1, after recursively dividing the number by allowed prime factors (2, 3, 5).\\n* If the remainder number is 1, then return true else return false\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int number = 2;\\n    public boolean isUgly(int n) {\\n        if(n == 0){\\n            return false;\\n        }\\n\\n        if(n == 1){\\n            return true;\\n        }\\n        \\n        if(n % 2 == 0) return isUgly(n/2);\\n        if(n % 3 == 0) return isUgly(n/3);\\n        if(n % 5 == 0) return isUgly(n/5);\\n\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    int number = 2;\\n    public boolean isUgly(int n) {\\n        if(n == 0){\\n            return false;\\n        }\\n\\n        if(n == 1){\\n            return true;\\n        }\\n        \\n        if(n % 2 == 0) return isUgly(n/2);\\n        if(n % 3 == 0) return isUgly(n/3);\\n        if(n % 5 == 0) return isUgly(n/5);\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826949,
                "title": "java-prime-factors-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nHere Break Condition is for if n == 1 return true\\nif(n%2 == 0) recursively call it ie isUgly(n/2)\\nif(n%3 == 0) recursively call it ie isUgly(n/3)\\nif(n%5 == 0) recursively call it ie isUgly(n/5)\\nif n is still greater than 1 return false or else just return true\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n == 0) {\\n            return false;\\n        }\\n        if(n==1){\\n            return true;\\n        }\\n\\n        if(n%2 == 0){\\n            return isUgly(n/2);\\n        }\\n\\n        else if(n%3 == 0){\\n           return isUgly(n/3);\\n        }\\n\\n        else if(n%5 == 0){\\n            return isUgly(n/5);\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n == 0) {\\n            return false;\\n        }\\n        if(n==1){\\n            return true;\\n        }\\n\\n        if(n%2 == 0){\\n            return isUgly(n/2);\\n        }\\n\\n        else if(n%3 == 0){\\n           return isUgly(n/3);\\n        }\\n\\n        else if(n%5 == 0){\\n            return isUgly(n/5);\\n        }\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826839,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n\\n        while (n % 2 == 0) n /= 2;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n\\n        return n == 1;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if (n < 1) return false;\\n\\n        while (n % 2 == 0) n /= 2;\\n        while (n % 3 == 0) n /= 3;\\n        while (n % 5 == 0) n /= 5;\\n\\n        return n == 1;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826823,
                "title": "simple-java-iterative-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA prime factor is a natural number, other than 1, whose only factors are 1 and itself. The first few prime numbers are actually 2, 3, 5, 7, 11, and so on Prime factorization is a process of writing all numbers as a product of primes. So, for example, say if we have something like the number 20. We can break that down into two factors. You could break 20 down into 2 times 10. Whichever way you\\u2019d like is fine. So, notice 2 times 10, that 2 is prime, whereas the 10 is composite. So we can break that down into 2 times 5. So we\\u2019re circling all the prime numbers that we see. And, again, we\\u2019ve got 2 times 2 times 5 equaling 20. So that\\u2019s prime factorization.\\n\\n**If prime factorization of n has number other than 2,3 and 5 then return false else return true.**\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe start Dividing the n with 2 until it is divisible by 2 and then we divide n with 3 until n is divisible by 3 and then we divide n with 5 until is divisible by 5. If the result n after these operations comes to be 1 then it returns true else return false.\\n\\n**For example** : 14 has prime factors of 2 and 7 so the answer to this number would be false according to our approach. \\nAccording to the algo:\\nSince 14%2 == 0 then 14/2 = 7, now n becomes 7.\\nNow 7%2!=0 and 7%3!=0 and 7%5!=0, then n remains 7 not 1 so we return false. \\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    $$O(log n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0){\\n            return false;\\n        }\\n        while((n & 1) != 1){\\n            n = n/2;\\n        }\\n        while(n%3 == 0){\\n            n = n/3;\\n        }\\n        while(n%5 == 0){\\n            n = n/5;\\n        }\\n        if(n == 1){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n <= 0){\\n            return false;\\n        }\\n        while((n & 1) != 1){\\n            n = n/2;\\n        }\\n        while(n%3 == 0){\\n            n = n/3;\\n        }\\n        while(n%5 == 0){\\n            n = n/5;\\n        }\\n        if(n == 1){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826762,
                "title": "simple-easy-100timecomplexity-95spacecomplexity",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) \\n    {\\n        if(n==0)return false;\\n\\n        while(n%5==0)\\n        {\\n            n=n/5;\\n        }\\n\\n        while(n%3==0)\\n        {\\n            n=n/3;\\n        }\\n\\n        while(n%2==0)\\n        {\\n            n=n/2;\\n        }\\n\\n        if(n==1)return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Interactive"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) \\n    {\\n        if(n==0)return false;\\n\\n        while(n%5==0)\\n        {\\n            n=n/5;\\n        }\\n\\n        while(n%3==0)\\n        {\\n            n=n/3;\\n        }\\n\\n        while(n%2==0)\\n        {\\n            n=n/2;\\n        }\\n\\n        if(n==1)return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826558,
                "title": "easy-and-explainable",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        int tc=0;\\n        int thc=0;\\n        int fc=0;\\n        \\n        if(n==0) return false;\\n        \\n        int tmp=n;\\n        \\n        //calculting 2 multiplicity\\n        while(tmp%2==0){\\n            tmp/=2;\\n            tc++;\\n        }\\n        \\n       \\n        \\n        //calculating 3 multiplicity\\n        while(tmp%3==0){\\n            tmp/=3;\\n            thc++;\\n        }\\n        \\n       \\n        //calculating 5 multiplicity\\n        while(tmp%5==0){\\n            tmp/=5;\\n            fc++;\\n        }\\n        \\n        \\n       // System.out.println((tc>0 ? (int)Math.pow(2,tc):1)*(thc>0 ? Math.pow(3,thc):1)*(fc>0 ? Math.pow(5,fc):1));\\n        \\n        return (tc>0 ? (int)Math.pow(2,tc):1)*(thc>0 ? (int)Math.pow(3,thc):1)*(fc>0 ? (int)Math.pow(5,fc):1)==n;\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        int tc=0;\\n        int thc=0;\\n        int fc=0;\\n        \\n        if(n==0) return false;\\n        \\n        int tmp=n;\\n        \\n        //calculting 2 multiplicity\\n        while(tmp%2==0){\\n            tmp/=2;\\n            tc++;\\n        }\\n        \\n       \\n        \\n        //calculating 3 multiplicity\\n        while(tmp%3==0){\\n            tmp/=3;\\n            thc++;\\n        }\\n        \\n       \\n        //calculating 5 multiplicity\\n        while(tmp%5==0){\\n            tmp/=5;\\n            fc++;\\n        }\\n        \\n        \\n       // System.out.println((tc>0 ? (int)Math.pow(2,tc):1)*(thc>0 ? Math.pow(3,thc):1)*(fc>0 ? Math.pow(5,fc):1));\\n        \\n        return (tc>0 ? (int)Math.pow(2,tc):1)*(thc>0 ? (int)Math.pow(3,thc):1)*(fc>0 ? (int)Math.pow(5,fc):1)==n;\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826548,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if(n == 0 || n<0)\\n            return false;\\n        \\n        while(n%2 == 0)\\n        {\\n            n = n/2;\\n        }\\n        while(n%3 == 0)\\n        {\\n            n = n/3;\\n        }\\n        while(n%5 == 0)\\n        {\\n            n = n/5;\\n        }\\n        if(n==1)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        \\n        if(n == 0 || n<0)\\n            return false;\\n        \\n        while(n%2 == 0)\\n        {\\n            n = n/2;\\n        }\\n        while(n%3 == 0)\\n        {\\n            n = n/3;\\n        }\\n        while(n%5 == 0)\\n        {\\n            n = n/5;\\n        }\\n        if(n==1)\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826410,
                "title": "easy-solution-using-arraylist",
                "content": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        ArrayList<Integer> list =new ArrayList<>();\\n        list.add(2);\\n        list.add(3);\\n        list.add(5);\\n        \\n        for(int i=0;i<list.size();i++){\\n          while(n % list.get(i)==0){\\n              n = n/list.get(i);\\n          }   \\n        }\\n        return n==1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n<=0){\\n            return false;\\n        }\\n        ArrayList<Integer> list =new ArrayList<>();\\n        list.add(2);\\n        list.add(3);\\n        list.add(5);\\n        \\n        for(int i=0;i<list.size();i++){\\n          while(n % list.get(i)==0){\\n              n = n/list.get(i);\\n          }   \\n        }\\n        return n==1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826319,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n < 1) return false;\\n        while(n % 2 == 0) n /= 2;\\n        while(n % 3 == 0) n /= 3;\\n        while(n % 5 == 0) n /= 5;\\n        if(n == 1) return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n < 1) return false;\\n        while(n % 2 == 0) n /= 2;\\n        while(n % 3 == 0) n /= 3;\\n        while(n % 5 == 0) n /= 5;\\n        if(n == 1) return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2826280,
                "title": "c-short-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<1)\\n            return false;\\n\\n        int pn = n;\\n        \\n        while(n!=1){\\n            if(n%2==0)\\n                n /= 2;\\n            else if(n%3==0)\\n                n /= 3;\\n            else if(n%5==0)\\n                n /= 5;\\n            if(pn==n)\\n                return false; \\n            pn = n;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isUgly(int n) {\\n        if(n<1)\\n            return false;\\n\\n        int pn = n;\\n        \\n        while(n!=1){\\n            if(n%2==0)\\n                n /= 2;\\n            else if(n%3==0)\\n                n /= 3;\\n            else if(n%5==0)\\n                n /= 5;\\n            if(pn==n)\\n                return false; \\n            pn = n;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1805367,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1687894,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1570058,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688131,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688165,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1573013,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688944,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688681,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1568030,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1572705,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1805367,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1687894,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1570058,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688131,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688165,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1573013,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688944,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1688681,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1568030,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1572705,
                "content": [
                    {
                        "username": "ItzAryanTiwari",
                        "content": "Guys plz Improve the Description of the problem.\\nIf Agreed upvote."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Another rephrase of the definition if this sounds clearer:\n\nAn ugly number is a positive integer which does **not** have a prime factor **other than** 2, 3, and 5."
                    },
                    {
                        "username": "piyu5hkumar",
                        "content": "1 has neither 2 or 3 or 5  or their combination as factor, still its ugly, why so?"
                    },
                    {
                        "username": "bhuppidhamii",
                        "content": "not prime"
                    },
                    {
                        "username": "dyzo",
                        "content": "[@Sakshamji](/Sakshamji) You are right!"
                    },
                    {
                        "username": "Sakshamji",
                        "content": "We can interpret as it ugly number can be written as (2^a)*(3^b)*(5^c)\\nand since 1 = (2^0)*(3^0)*(5^0) thus 1 is ugly number ."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "Make sure to add these as your edge cases\\nif(n <= 0) return false;\\nif(n == 1) return true;"
                    },
                    {
                        "username": "orthogonal1",
                        "content": "n==1 is not necessarily an edge case."
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "problem description phrasing could be better"
                    },
                    {
                        "username": "eduard92",
                        "content": "You sound like a canadian..."
                    },
                    {
                        "username": "mpack",
                        "content": "When num is 1, I was thinking it should be false... Can anybody explain this test case for me? Thanks in advance."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nWithout using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    },
                    {
                        "username": "Sakshamji",
                        "content": "Every number N can be written as product of prime numbers as\n N = (A^a)(B^b)(C^c)....\nwhere A,B,C.. represent prime numers\ne.g 135 = (3^3)*(5^1) where 3 and 5 are prime numbers\n\nNow in this question they have asked for numbers that have 2,3,5 as A,B,C or prime numbers,\nthat means those numbers that can be represented as -\nUgly number (U) = (2^a)(3^b)(5^c)\nwhere a,b,c are positive numbers\nAs you can see 1 also satisfy above equation as\n1 = (2^0)(3^0)(5^0)\nthus it is also a ugly number\nI hope this insight will help you in solving this question."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Nice Tip, but following statement is incorrect.\\n> where a,b,c are positive numbers\\n\\nThey are whole numbers (or non-negative integers) to be precise."
                    },
                    {
                        "username": "quantupus",
                        "content": "code was going great until I realized negative numbers were a thing lol"
                    },
                    {
                        "username": "TheMarvelFan",
                        "content": "Someone else in the comments pointed out that an ugly number must be a POSITIVE integer. You can easily put a condition to return false if n<0."
                    },
                    {
                        "username": "vinayaktalukder17",
                        "content": "Same here. Just 500 test cases passed out of a 1013 test cases"
                    },
                    {
                        "username": "frankfaustino",
                        "content": "I\\'ve gotten into the habit of reading the constraints because I hate when this happens \\uD83D\\uDE00"
                    },
                    {
                        "username": "helenfanzhang",
                        "content": "I think this problem is seriously flawed as I see the expected cases for the following:\\n0: false\\n1: true\\n2: true\\n3: true\\n5: true\\n7: false"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@Kedarterkhedkar](/Kedarterkhedkar). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "Chouhan_Gourav",
                        "content": "[@Kedarterkhedkar](/Kedarterkhedkar)  The prime factors of 8 is 2x2x2x2\\nNow look for the definition of ugly numbers\\n"
                    },
                    {
                        "username": "Kedarterkhedkar",
                        "content": "[@RohitSgh](/RohitSgh) Can you explain why 8 is ugly number ?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $0$ simply does not satisfy the first condition. Hence, `False` for $0$ is justified.\\n\\nAll other integers satisfy the first condition. For second condition, let\\'s list down their set of prime factors.\\n- For $1$, the set of prime factors is $\\\\{\\\\}$. And empty set is subset of every set. Thus `True` for $1$ is justified.\\n- For $2$, the set of prime factors is $\\\\{2\\\\}$. And $\\\\{2\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $2$ is justified.\\n- For $3$, the set of prime factors is $\\\\{3\\\\}$. And $\\\\{3\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $3$ is justified.\\n- For $5$, the set of prime factors is $\\\\{5\\\\}$. And $\\\\{5\\\\}$ is subset of $\\\\{2, 3, 5\\\\}$. Thus `True` for $5$ is justified.\\n- For $7$, the set of prime factors is $\\\\{7\\\\}$. And $\\\\{7\\\\}$ is not subset of $\\\\{2, 3, 5\\\\}$. Thus `False` for $7$ is justified."
                    },
                    {
                        "username": "d1mnewz",
                        "content": "Can somebody explain why in this case 1 is treated as ugly number? \\nBy definition\\n> Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\\n\\nSo I can\\'t understand why 1 is an ugly number because it doesn\\'t have any of those prime factors."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition\\n> An ugly number is a positive integer whose prime factors are **limited** to 2, 3, and 5.\\n\\nThe definition can be broken down to two conditions:\\n- The number should be positive ($> 0$)\\n- The set of prime factors of number should be subset of $\\\\{2, 3, 5\\\\}$\\n\\nNow, $1$ satisfies both the conditions\\n- $1 > 0$\\n- The set of prime factors of $1$ is empty set $\\\\{\\\\}$. And empty set is subset of every set. Please note that $1$ has only one factor $1$, but has no prime factor since $1$ is not a prime number.\\n\\nIn other words, without using set notation, the definition states that factors should be **limited** to $2, 3, 5$. This does not mean that these factors are necessary. However, any other factor than these number simply disqualifies the number from being an ugly number."
                    }
                ]
            },
            {
                "id": 1572689,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1688394,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1903082,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1761602,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1574700,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1697723,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 2028359,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1964628,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1687919,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 1687859,
                "content": [
                    {
                        "username": "nagarajanpriyadarshan",
                        "content": "My code passed majority of the testcases and fails in -1000, i.e. for -1000 my code results with \"true\" and leetcode expected results as \"False\". Can anyone let me know in detail why -1000 is not treated as Ugly number while 1000 is treated ugly number?"
                    },
                    {
                        "username": "Isshh",
                        "content": "Because It is mentioned in the question that ugly number is a positive number"
                    },
                    {
                        "username": "Sp_ndan111",
                        "content": "how are the numbers like 2 or 6 ugly,look at those curves, they have such a nice figure"
                    },
                    {
                        "username": "rajeshgurgoan",
                        "content": "How is 8 an ugly number ? its  co-factor are [2, 4]"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer $8$ can be factorized as $2 \\\\times 2 \\\\times 2$, [@rajeshgurgoan](/rajeshgurgoan). And $\\\\{2\\\\}$ is subset of $\\\\{2,3,5\\\\}$. Hence, $8$ is Ugly"
                    },
                    {
                        "username": "SadHing",
                        "content": "class Solution {\\n    public boolean isUgly(int n) {\\n        return n == me; //\\uD83D\\uDE14\\n    }\\n}"
                    },
                    {
                        "username": "imliuye",
                        "content": "And why? this feels so stupid"
                    },
                    {
                        "username": "harshal1412",
                        "content": "simple way to find ugly number is\\nbool isugly(int n)\\n{while(n>1)\\n{if(n%2==0)\\nn=n/2;\\nelse if(n%3==0)\\nn=n/3;\\nelse if(n%5==0)\\nn=n/5;\\nelse \\nbreak;\\n}\\nreturn n==1;\\n}\\n"
                    },
                    {
                        "username": "alanparmenter",
                        "content": "Who put -2147483648 in the test cases as NOT an ugly number!?"
                    },
                    {
                        "username": "SasiAttili",
                        "content": "        if (n <= 0)// no negative number is allowed\\n            return false;\\n        if (n <= 6)// from 1 to 6 ans will be true\\n            return true;\\n\\n        while (n > 1) {\\n            if (n % 2 == 0) {\\n                n /= 2;\\n            } else if (n % 3 == 0) {\\n                n /= 3;\\n            } else if (n % 5 == 0) {\\n                n /= 5;\\n            } else {\\n                return false;// if not a multiple of either of 2 \\n                            // or 3 or 5 return false because it not ugly"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "(!!!) In case n = 0, it recursively divides by 2 3 and 5.\\nConsider it in your null case"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified."
                    },
                    {
                        "username": "Zaydiscool777",
                        "content": " `class Solution:\\n    def isUgly(self, n: int) -> bool:\\n        t = n\\n        for i in [2,3,5]:\\n            while t%i==0:\\n                t/=i\\n        return t==1`\\nwhy is time limit exceeded"
                    },
                    {
                        "username": "manishya1669",
                        "content": "It is because you are checking any condition for `0` ."
                    },
                    {
                        "username": "Minamikaze392",
                        "content": "Divisions like 0 / 3 = 0 leading to forever loops."
                    }
                ]
            },
            {
                "id": 2069959,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 2058558,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 2019012,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1983720,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1949427,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1942185,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1922490,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1910860,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1910336,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1855844,
                "content": [
                    {
                        "username": "sk4142",
                        "content": "bruh, I was able to solve this, but ain\\'t no way this is easy, especially with this atrocious description"
                    },
                    {
                        "username": "PRANAB_DAS1",
                        "content": "It seems people some dont understand one simple term \"Not to post solution in discussion section\""
                    },
                    {
                        "username": "alanparmenter",
                        "content": "I don\\'t know, maybe darkhorse007d thought it was OK to ask for advice about their solution which was not working, and they got some help debugging from RohitSgh, but in principle the \\'don\\'t post any solutions\\' rule does seem pretty important for the discussions page"
                    },
                    {
                        "username": "abanand132",
                        "content": "While Sieve of Eratosthenes, I don\\'t why but for n= 64, it is not working. It gives error heap overflow in c++. But it is working well in my local ide."
                    },
                    {
                        "username": "Yusuf_Bogatyrev",
                        "content": "Very bad problem condition! Confusing and not clear."
                    },
                    {
                        "username": "darkhorse007d",
                        "content": "class Solution {\\npublic:\\n    bool sohel(int n)\\n    {\\n        return n == 2 or n == 3 or n == 5 or n == 1;\\n    }\\n    bool isUgly(int n) {\\n       // cout << INT_MIN << endl;\\n       n = (long long)n;\\n       vector<bool>prime(n+1 , true);\\n       long long i , j;\\n       for(i = 2 ; i*i <= n ; i++)\\n       {\\n           if(prime[i])\\n           {\\n               for(j = i*i ; j <= n ; j+=i)\\n               prime[j] = false;\\n           }\\n       }\\n        for(i = 2 ; i*i <= n ; i++)\\n        {\\n            if(prime[i])\\n            {\\n                while(n%i == 0)\\n                {\\n                    if(!sohel(i))\\n                    return false;\\n                    n /= i;\\n                }\\n            }\\n        }\\n        return sohel(n);\\n    }\\n};\\ncan anyone help me find out the reason for runtime error in this code?"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The `n` can be non-positive ($\\\\leq 0$). And we cannot initialize `prime` with non-negative size. That\\'s why run-time error, [@The_Underdog26](/darkhorse007d)"
                    },
                    {
                        "username": "weselyong",
                        "content": "You said `1 has no prime factors so return True`, fine.\\nBut how about `0` is False, does 0 have any prime factors?\\n "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "But $0$ isn\\'t Positive Integer. Therefore, `False` for $0$ is justified, [@weselyong](/weselyong). An Ugly Number should satisfy following two conditions\\n- it should be positive\\n- prime factors should be limited to 2, 3, and 5."
                    },
                    {
                        "username": "jerryy147",
                        "content": "looks fun"
                    },
                    {
                        "username": "user5400vw",
                        "content": "tricky problem!!"
                    },
                    {
                        "username": "andresstawski",
                        "content": "guess for any number pow(-2, 31) <= n going as false \\xAF\\\\_(\\u30C4)_/\\xAF"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "Dude description for this problem is shit let me explain this  check wheater a number is divisible bt 2,3,5 if its modulo  for each case is zero then divide the number by 2,3,5  at last if n ==1 then return true else return false."
                    }
                ]
            },
            {
                "id": 1807117,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1795717,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1766739,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1763270,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688619,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688614,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688489,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688450,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688429,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            },
            {
                "id": 1688405,
                "content": [
                    {
                        "username": "sanjeev15002",
                        "content": "0 has no prime factors. Thus, its prime factors are limited to 2, 3 and 5 which should make 0 an ugly number. However, this question expects output \"False\" for input \"0\"."
                    },
                    {
                        "username": "sanjeev15002",
                        "content": "[@RohitSgh](/RohitSgh) Oh yes, my bad, I missed that! Thank you! "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "0 is **NOT** a positive integer. As per [problem description](https://leetcode.com/problems/ugly-number/description/), ugly number should be positive. \\n\\nThus, 0 cannot be ugly. Hence, `False` is justified."
                    },
                    {
                        "username": "Shankhadeep2017",
                        "content": "its Very simple questions .\\nall positive number n % 2 or n % 3 or n % 5 and reduce n = n//2, n = n // 3 , n = n // 5 used while n > 1\\nif n == 1 return true else false \\nfor example:\\nn = 20 \\n20 % 2 == 0\\n20 // 2 = 10\\n10 % 2 == 0\\n10 // 2 = 5\\n5 %  5 == 0\\n5 // 5 = 1\\nno we got 1 so ans is True\\n"
                    },
                    {
                        "username": "eduard92",
                        "content": "Damn this problem has negative numbers... I passed 1003/1013 first try, now idk what to do with those negative numbers.."
                    },
                    {
                        "username": "rrajatutort",
                        "content": "Hi ,\\nMy code prints 8 as not ugly since it has 4 as prime factor. But leetcode expecting to return as ugly. Can someone explain what is wrong here?\\n\\nLeetcode result:\\n\\nn =\\n8\\n\\nOutput\\nfalse\\n\\nExpected\\ntrue"
                    },
                    {
                        "username": "SDriscoll",
                        "content": "[@RohitSgh](/RohitSgh) That is not clear in the description, I should not need to read this many comments to find this explanation"
                    },
                    {
                        "username": "rrajatutort",
                        "content": "[@RohitSgh](/RohitSgh) Thanks for the explanation Rohit."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per definition, an ugly number should satisfy two conditions:\n- The number should be positive ($> 0$)\n- The set of prime factors of number should be *subset* (because definition mentions *limited*) of $\\{2, 3, 5\\}$\n\nNow, $8$ satisfies the first condition. For second condition, the set of prime factors of $8$ is $\\{2\\}$, since $8 = 2 \\cdot 2 \\cdot 2$, and $\\{2\\}$ is a subset of $\\{2, 3, 5\\}$. Thus `true` for $8$ is justified."
                    },
                    {
                        "username": "sam1906",
                        "content": "How is 12 ugly?\\n\\nThe answer should be false but compiler showed otherwise.\\n\\nhttps://imgur.com/t9Df0Ov"
                    },
                    {
                        "username": "sam1906",
                        "content": "Understood. Thanks for the explanation [@Rohit Singh](/RohitSgh) and [@Mitul Agrawal](/Mitulagr08)"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The set of prime factors of $12$ are $\\\\{2,3\\\\}$, since $12 = 2 \\\\times 2 \\\\times 3$. Since prime factors of $12$ are limited to $2, 3$ and $5$, (and $12$ is positive), it is Ugly Number. Hence, answer is `True`.\\n\\nWe don\\'t necessarily need all three factors in factorization. But all prime factors should be there in set  $\\\\{2,3,5\\\\}$."
                    },
                    {
                        "username": "Mitulagr",
                        "content": "12 = 2 x 2 x 3, so its prime factors are 2 and 3 only"
                    },
                    {
                        "username": "Mitulagr",
                        "content": "<0 : not ugly\\n0 : not ugly\\n1 : ugly"
                    },
                    {
                        "username": "tarunjain_973",
                        "content": "can we do this question with seieve of erotisthenese for prime number.... \\n"
                    },
                    {
                        "username": "Pritam-Padhan",
                        "content": " `your inline code...your inline code...`\\nclass Solution {\\n    public boolean isUgly(int n) {\\n        if(n==1) return true;\\n        if(n%2==0) return isUgly(n/2);\\n        else if(n%3==0) return isUgly(n/3);\\n        else if(n%5==0) return isUgly(n/5);\\n        else {\\n           return false;\\n        }\\n    }\\n}\\n\\nIn this code why i am getting stack over flow error"
                    },
                    {
                        "username": "RohitSgh",
                        "content": "When `n = 0`, the condition of `if` will evaluate to `True`, hence it will recursively call `isUgly(0)`. This will initiate infinite recursion, because whenever `isUgly(0)` is called, `if` condition will be `True` and `isUgly(0)` will be called again. \n\nA quick fix is to follow definition and this line of code as first statement of function `isUgly(n)`\n\n```java\nif(n<=0) return false;\n```"
                    },
                    {
                        "username": "mufassir",
                        "content": "Every number less than or equal to 0 is NOT an ugly number."
                    },
                    {
                        "username": "dollarSign",
                        "content": "This is the number = -2147483648 and its factors are 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2, so why its returning false? "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "The integer is negative. And as per [problem description](https://leetcode.com/problems/ugly-number/discussion/), an ugly number is positive integer. Thus, `False` is correct."
                    }
                ]
            }
        ]
    }
]