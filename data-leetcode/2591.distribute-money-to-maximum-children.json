[
    {
        "title": "Distribute Money to Maximum Children",
        "question_content": "You are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to.\nYou have to distribute the money according to the following rules:\n\n\tAll money must be distributed.\n\tEveryone must receive at least 1 dollar.\n\tNobody receives 4 dollars.\n\nReturn the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.\n&nbsp;\nExample 1:\n\nInput: money = 20, children = 3\nOutput: 1\nExplanation: \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n\nExample 2:\n\nInput: money = 16, children = 2\nOutput: 2\nExplanation: Each child can be given 8 dollars.\n\n&nbsp;\nConstraints:\n\n\t1 <= money <= 200\n\t2 <= children <= 30",
        "solutions": [
            {
                "id": 3312090,
                "title": "ugh-o-1",
                "content": "The worst first contest problem I remember.\\n    \\nFirst, we give everyone one dollar to satisfy condition 2. Then, we check how many kids can get exactly 7 more dollars.\\n\\nThere are several edge cases because of the requirement to distribute all money: \\n\\n1. All kids, except the last one, got `7` dollars, and the last kid got exactly `3` dollars.\\n\\t- Only `children - 2` kids can get exactly `8` dollars, as we need to re-distribute dollars between last two kids.\\n2. We have exactly `children * 7` dollars.\\n\\t- This is the only case when all children receive exactly `8` dollars. \\n3. Otherwise, no more than `children - 1` can get exactly `8` dollars (even if we have a lot of money)\\n\\t- And no more than `money / 7` kids can get exactly `8` dollars (if our money is limited).\\n\\n**C++**\\n```cpp\\nint distMoney(int money, int children) {\\n    money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint distMoney(int money, int children) {\\n    money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3312319,
                "title": "explained-greedy-very-simple-easy-to-understand-solution",
                "content": "#### Up vote if you like the solution\\n\\n# Approach \\nAt begining I was thinking about each condintions, but was littile bit tricky.\\n\\nThen I come up with following way of figuring out the solution with out thinking much condition.\\n\\nKeep on assigning 8 to each children until the remaining is greater than or equal to remainig children ( So that it is always possible to give at least 1 to each children). \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        if(money < children) return -1;\\n        if(money > children * 8) return children - 1;\\n        \\n        while(money > 0 && money - 8 >= children - 1){\\n          ans++; money -= 8; children--;\\n        }\\n        if(money == 4 && children == 1) ans--;\\n        return ans;\\n    }\\n};\\n```\\n\\n<b>Here is an article of my interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        if(money < children) return -1;\\n        if(money > children * 8) return children - 1;\\n        \\n        while(money > 0 && money - 8 >= children - 1){\\n          ans++; money -= 8; children--;\\n        }\\n        if(money == 4 && children == 1) ans--;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312092,
                "title": "simples-solution-c-anyone-can-easily-understand-heavily-commented",
                "content": "**My logic:** First distribute 1 money to each children\\n* then   int remainmoney=money-children;\\n\\n\\n```\\n int distMoney(int money, int children) {\\n        if(children>money) return -1;\\n        int remainmoney=money-children;\\n        if(remainmoney<=6) return 0;  // you can not give 8 money to children \\n\\t\\t                        // (why 6 because , 1 money is already given and if total remain amount is \\n\\t\\t                       // less than 6 you can not give 8 money as total money will only 7.\\n        \\n      int ans=0;\\n        \\n      ans+=remainmoney/7;                               // 1 money is already given to children so now check how many children                                          // you can distribute 7 more money to make it 8 money\\n\\t  \\n      if(ans>=children) ans=children;              // test case: money=45 children=3 , so answer should be 8 , 8, 29\\n\\t                                                          // here ans= 6 (since children=3 and remain money=42 so 42/7=6 but we can \\n\\t                                                       // only distribute it to max 3 children so whenever ans>=children make ans=children(here ans=3)\\n      \\n        if(remainmoney%7==3 and children-ans==1) return ans-1; // you don\\'t have to give 4 money to a child\\n\\t\\t// so 1 money is already given now check whether after distributing 8 money any money is remaining\\n\\t\\t// if remain money is 3 and all child are not distributed 8 money and only if 1 child remains he will get this 3 and will have 4 money\\n\\t\\t// so decrease ans by 1 as child will not get 8 money\\n\\t\\t// test case: \\n        else if(remainmoney/7>children and children-ans==0) return ans-1;\\n        else if(remainmoney%7>0 and children-ans==0) return ans-1;\\n        else return ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n int distMoney(int money, int children) {\\n        if(children>money) return -1;\\n        int remainmoney=money-children;\\n        if(remainmoney<=6) return 0;  // you can not give 8 money to children \\n\\t\\t                        // (why 6 because , 1 money is already given and if total remain amount is \\n\\t\\t                       // less than 6 you can not give 8 money as total money will only 7.\\n        \\n      int ans=0;\\n        \\n      ans+=remainmoney/7;                               // 1 money is already given to children so now check how many children                                          // you can distribute 7 more money to make it 8 money\\n\\t  \\n      if(ans>=children) ans=children;              // test case: money=45 children=3 , so answer should be 8 , 8, 29\\n\\t                                                          // here ans= 6 (since children=3 and remain money=42 so 42/7=6 but we can \\n\\t                                                       // only distribute it to max 3 children so whenever ans>=children make ans=children(here ans=3)\\n      \\n        if(remainmoney%7==3 and children-ans==1) return ans-1; // you don\\'t have to give 4 money to a child\\n\\t\\t// so 1 money is already given now check whether after distributing 8 money any money is remaining\\n\\t\\t// if remain money is 3 and all child are not distributed 8 money and only if 1 child remains he will get this 3 and will have 4 money\\n\\t\\t// so decrease ans by 1 as child will not get 8 money\\n\\t\\t// test case: \\n        else if(remainmoney/7>children and children-ans==0) return ans-1;\\n        else if(remainmoney%7>0 and children-ans==0) return ans-1;\\n        else return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3312076,
                "title": "easiest-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money -= children;\\n\\n        int ans = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            ans++;\\n            children--;\\n        }\\n        if(ans) {\\n            if(children == 0 && money > 0) ans -= 1;\\n            if(children == 1 && money == 3) ans -= 1;\\n        }\\n         \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money -= children;\\n\\n        int ans = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            ans++;\\n            children--;\\n        }\\n        if(ans) {\\n            if(children == 0 && money > 0) ans -= 1;\\n            if(children == 1 && money == 3) ans -= 1;\\n        }\\n         \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312099,
                "title": "the-safe-way-binary-search-c",
                "content": "# Note\\nAs the number of children is very small, a brute force with this same solution is also valid, but with this we can greatly increase the limits and make an medium question\\n# Approach\\nWhen I saw the problem I tried to come up with an easy greedy solution but when I tried to think of one I saw that there were too many cases to deal with, so I decided to use the binary search. \\n\\nLet\\'s set the number of people $x$ with $8$ dollars now there are four cases where it is not possible this distribution. \\n- It is not even possible to have $x$ people with $8$ dollars because $x*8> money$.\\n- After giving $8$ dollars to $x$ people there is money left but not people, that means that this distribution is not valid because we need to distribute each dollar. \\n- After giving $8$ dollars to $x$ people there is money left over and people now we have two other cases where it is not valid. \\n    - The remaining money is $4$ and only $1$ people, in this case it is not possible. \\n     - The remaining money is less than the remaining people.\\n\\nIn other case that distribution is valid and we can apply binary search.\\n# Complexity\\n- Time complexity:\\n$ O(log (30))$ i.e $O(1)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    bool check(int x,int m,int n){\\n        if(x*8>m)return false;\\n        \\n        m-=x*8;\\n        \\n        if(m<(n-x))return false;\\n        if(n-x==1 && m == 4)return false;\\n        if(n-x == 0 && m)return false;\\n        return true;\\n    }\\n    \\n    int distMoney(int money, int n) {\\n        int l = -1,r = n+1;\\n        while(l+1<r){\\n            int m = (l+r)>>1;\\n            if(check(m,money,n))l = m;\\n            else r = m;\\n        }\\n        return l;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool check(int x,int m,int n){\\n        if(x*8>m)return false;\\n        \\n        m-=x*8;\\n        \\n        if(m<(n-x))return false;\\n        if(n-x==1 && m == 4)return false;\\n        if(n-x == 0 && m)return false;\\n        return true;\\n    }\\n    \\n    int distMoney(int money, int n) {\\n        int l = -1,r = n+1;\\n        while(l+1<r){\\n            int m = (l+r)>>1;\\n            if(check(m,money,n))l = m;\\n            else r = m;\\n        }\\n        return l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313943,
                "title": "interview-approach-handwritten-easy",
                "content": "First of all,I find it to be a **tricky** question even though it is tagged as **Easy**.\\n\\nThe 3 conditions mentioned in the problem are:\\n1. All money must be distributed.\\n2. Everyone must receive at least 1 dollar.\\n3. Nobody receives 4 dollars.\\n\\n# APPROACH\\n- if `money<children` It will violate condition 2,so `return -1`\\n- `money-=children`, this satisfies condition 2.\\n- Now each child wants 7$ to have exact 8 dollars. Start distributing 7dollar to each child using a loop and take a count of the number.\\n```\\n        int res = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            res++;\\n            children--;\\n        }\\n```\\n- Now this is the **most important step** and I have tried my best to explain it.\\n![25.jpeg](https://assets.leetcode.com/users/images/0d4c16ba-af0e-48ac-af68-f58d692c5dde_1679169662.697749.jpeg)\\n\\n- now `return ans;`\\n        \\n# COMPLETE CODE\\n```\\n int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money -= children;\\n\\n        int res = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            res++;\\n            children--;\\n        }\\n        if(res==0)\\n           return res;\\n        else\\n        {\\n            if(children==0 && money>0)\\n               res-=1;\\n            if(children==1 && money==3)\\n               res-=1;\\n        }\\n        return res;\\n    }\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\n        int res = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            res++;\\n            children--;\\n        }\\n```\n```\\n int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money -= children;\\n\\n        int res = 0;\\n        while(money >= 7 && children > 0) {\\n            money -= 7;\\n            res++;\\n            children--;\\n        }\\n        if(res==0)\\n           return res;\\n        else\\n        {\\n            if(children==0 && money>0)\\n               res-=1;\\n            if(children==1 && money==3)\\n               res-=1;\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3312136,
                "title": "one-by-one-distribute-python3-simple-approach",
                "content": "\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int: \\n        if money < children: return -1 \\n        ans = 0 \\n        for j in range(1,children+1):\\n            leftmoney = money - 8       # if current child gets 8$\\n            leftchildren = children - j\\n            if leftmoney >= leftchildren: \\n                money = leftmoney \\n                ans += 1 \\n            else: \\n                leftchildren = children - j + 1   # 1 is added because current child \\n                                                  #  has not gotten any dollar yet\\n                if leftchildren == 1 and money == 4:\\n                    ans -= 1\\n                money = 0\\n                break\\n        if money > 0:       # if some money is left to distribute\\n            ans -= 1\\n        return ans\\n       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int: \\n        if money < children: return -1 \\n        ans = 0 \\n        for j in range(1,children+1):\\n            leftmoney = money - 8       # if current child gets 8$\\n            leftchildren = children - j\\n            if leftmoney >= leftchildren: \\n                money = leftmoney \\n                ans += 1 \\n            else: \\n                leftchildren = children - j + 1   # 1 is added because current child \\n                                                  #  has not gotten any dollar yet\\n                if leftchildren == 1 and money == 4:\\n                    ans -= 1\\n                money = 0\\n                break\\n        if money > 0:       # if some money is left to distribute\\n            ans -= 1\\n        return ans\\n       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3347552,
                "title": "o-1-short-if-else-solution",
                "content": "# Intuition\\nVery Simple Question.\\nJust implementing what is being told in question\\n\\n# Approach\\nJust Using IF Statement.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Humble Request\\nPlease Upvote If I helped You.\\nThank You\\nLove For You \\u2764\\uFE0F\\u2764\\uFE0F\\n# Java Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return Math.min(children - 1, money / 7);\\n        \\n    }\\n}\\n```\\n# C++ Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return Math.min(children - 1, money / 7);\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return Math.min(children - 1, money / 7);\\n        \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return Math.min(children - 1, money / 7);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312814,
                "title": "python3-case-by-case-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # cannot give 1 to every child\\n        if money < children: return -1\\n        # have more than enough, all child have 8 except 1 child have more\\n        if money > 8 * children: return children - 1\\n        # give 1 to every child first\\n        money -= children\\n        # find the number of child to reach 8 and the excess amount\\n        res, extra = divmod(money, 7)\\n        # if amount is 3 and only one child is not 8, we need two child to seperate money to avoid child having 4\\n        if extra == 3 and res + 1 == children: return res - 1\\n        # return the result\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # cannot give 1 to every child\\n        if money < children: return -1\\n        # have more than enough, all child have 8 except 1 child have more\\n        if money > 8 * children: return children - 1\\n        # give 1 to every child first\\n        money -= children\\n        # find the number of child to reach 8 and the excess amount\\n        res, extra = divmod(money, 7)\\n        # if amount is 3 and only one child is not 8, we need two child to seperate money to avoid child having 4\\n        if extra == 3 and res + 1 == children: return res - 1\\n        # return the result\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3333858,
                "title": "simple-o-1",
                "content": "# Intuition\\nSimple math calculations\\n\\n# Approach\\nIf `money < children` return -1. \\nIf `money > children * 8` we give every child 8 and the rest to last one, the result will be children -1.\\nElse give every child by 1 dolar. Give every next child by 7. Handle corner case, when after giving every possible child by 7 dollars we have 3 dolars left. In this case if we have only one child left, we should decrease total nuberl by 1.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if(money < children){\\n        return -1;\\n    }\\n    if(children * 8 < money){\\n        return children - 1\\n    }\\n    let moneyLeft = money - children;\\n    let childrenBy8 = Math.floor(moneyLeft/7);\\n    let left = moneyLeft % 7;\\n    \\n    if(left === 3 && childrenBy8 > 0 && children - childrenBy8 === 1){\\n        childrenBy8--;\\n    }\\n    \\n    \\n    return childrenBy8;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if(money < children){\\n        return -1;\\n    }\\n    if(children * 8 < money){\\n        return children - 1\\n    }\\n    let moneyLeft = money - children;\\n    let childrenBy8 = Math.floor(moneyLeft/7);\\n    let left = moneyLeft % 7;\\n    \\n    if(left === 3 && childrenBy8 > 0 && children - childrenBy8 === 1){\\n        childrenBy8--;\\n    }\\n    \\n    \\n    return childrenBy8;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3313751,
                "title": "python-3-5-lines-w-explanation-t-m-39-ms-13-8-mb",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n\\n        if money < children: return -1          #   <-- More children than dollars\\n\\n        n = 8 * children - money                #   <-- Enough dollars for all children \\n                                                #       to get at least 8 dollars; one\\n        if n <= 0: return children - (n < 0)    #       child may get more than 8 dollars        \\n        \\n        ans, rem = divmod(money-children,7)     #   <-- Every child gets a dollar, then ans\\n                                                #       children get an additional 7 dollars \\n\\n        return ans - ((ans, rem) == (children - 1, 3))\\n                                                #   <-- Decrement the ans if only one child \\n                                                #       gets less than 8 dollars and that \\n                                                #       child gets exactly 4 dollars\\n```\\n[https://leetcode.com/problems/distribute-money-to-maximum-children/submissions/917769198/](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(1) and space complexity is *O*(1).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n\\n        if money < children: return -1          #   <-- More children than dollars\\n\\n        n = 8 * children - money                #   <-- Enough dollars for all children \\n                                                #       to get at least 8 dollars; one\\n        if n <= 0: return children - (n < 0)    #       child may get more than 8 dollars        \\n        \\n        ans, rem = divmod(money-children,7)     #   <-- Every child gets a dollar, then ans\\n                                                #       children get an additional 7 dollars \\n\\n        return ans - ((ans, rem) == (children - 1, 3))\\n                                                #   <-- Decrement the ans if only one child \\n                                                #       gets less than 8 dollars and that \\n                                                #       child gets exactly 4 dollars\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312690,
                "title": "c-constructive-solution-with-edge-cases",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere we can observe some edge cases like when money is 4 and children is 1 and when money is less then children.We can approch this problem in constructive + greedy way to get ans maximum\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialise a array pre of size children with value as 0.\\n2. If(money==4 and children==1) then it is impossible to distrubte the money among all children so here i return -1.\\n3. Distribute one money unit to each children and check if money is less than 0 or not, if it is less than 0 the it is impossible to distribute money among children hence i return -1 here.\\n4. Initialise the ans as 0 and traverse through the array. If current money is greater then 7 then increment the ans by 1 and decrease the moeney by 7 and add that 7 into pre[i].\\n5. else if money is less than 7 but greater than 0 then add all money into that pre[i] and money value will be 0.\\n6. At index n-1 we will check few condition to determine the ans.If pre[n-1] is 8 and money is stil left then return ans-1 else if there is no money left then return 0. If(pre[i]<8) the check if(pre[i]==4) if it is 4 then return ans-1.\\n7. Return ans at the end.\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       vector<int> pre(children,0);\\n        if(money==4 && children==1) return -1;\\n        for(int i=0;i<children;i++)\\n        {\\n            pre[i]++;\\n            money--;\\n        }\\n        if(money<0) return -1;\\n        int ans=0;\\n        int n=children;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(money>=7)\\n            {\\n                pre[i]+=7;\\n                money-=7;\\n                ans++;\\n            }\\n            else if(money>0)\\n            {\\n                pre[i]+=money;\\n                money=0;\\n            }\\n            if(i==n-1)\\n            {\\n               if(pre[i]==8)\\n               {\\n                   if(money>0)\\n                   {\\n                       return ans-1;\\n                   }\\n                   if(money==0) return ans;\\n               }\\n                else if(pre[i]<8)\\n                {\\n                    if(pre[i]==4)\\n                    {\\n                        if(i>=1)\\n                        {\\n                            return ans-1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       vector<int> pre(children,0);\\n        if(money==4 && children==1) return -1;\\n        for(int i=0;i<children;i++)\\n        {\\n            pre[i]++;\\n            money--;\\n        }\\n        if(money<0) return -1;\\n        int ans=0;\\n        int n=children;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(money>=7)\\n            {\\n                pre[i]+=7;\\n                money-=7;\\n                ans++;\\n            }\\n            else if(money>0)\\n            {\\n                pre[i]+=money;\\n                money=0;\\n            }\\n            if(i==n-1)\\n            {\\n               if(pre[i]==8)\\n               {\\n                   if(money>0)\\n                   {\\n                       return ans-1;\\n                   }\\n                   if(money==0) return ans;\\n               }\\n                else if(pre[i]<8)\\n                {\\n                    if(pre[i]==4)\\n                    {\\n                        if(i>=1)\\n                        {\\n                            return ans-1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312502,
                "title": "python-3-modulo-7",
                "content": "This *easy* question is actually tricky.\\n\\n# Approach\\nFirst, we need to check if it is possible to distribute the money:\\n```\\nif money<children: return -1\\n```\\nSince *everyone must receive at least 1 dollar*, we give 1 dollar to each person:\\n```\\nmoney -= children\\n```\\nTo *maximize the number of children who may receive exactly 8 dollars*, we use the rest of money and try giving each person 7 dollars:\\n```\\nd,m = divmod(money,7)\\n```\\nConsider different cases of d,m (note that nobody receives 4 dollars), we can reach the solution:\\n```\\n        if d>=children:\\n            if d==children and m==0:\\n                return children\\n            else:\\n                return children - 1\\n        else:\\n            if m==3:\\n                if d<children-1:\\n                    return d\\n                else:\\n                    return d - 1\\n            else:\\n                return d\\n```\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money<children: return -1\\n        money -= children\\n        d,m = divmod(money,7)\\n        if d>=children:\\n            if d==children and m==0:\\n                return children\\n            else:\\n                return children - 1\\n        else:\\n            if m==3:\\n                if d<children-1:\\n                    return d\\n                else:\\n                    return d - 1\\n            else:\\n                return d\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nif money<children: return -1\\n```\n```\\nmoney -= children\\n```\n```\\nd,m = divmod(money,7)\\n```\n```\\n        if d>=children:\\n            if d==children and m==0:\\n                return children\\n            else:\\n                return children - 1\\n        else:\\n            if m==3:\\n                if d<children-1:\\n                    return d\\n                else:\\n                    return d - 1\\n            else:\\n                return d\\n```\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money<children: return -1\\n        money -= children\\n        d,m = divmod(money,7)\\n        if d>=children:\\n            if d==children and m==0:\\n                return children\\n            else:\\n                return children - 1\\n        else:\\n            if m==3:\\n                if d<children-1:\\n                    return d\\n                else:\\n                    return d - 1\\n            else:\\n                return d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312275,
                "title": "easy-java-solution",
                "content": "\\n```java []\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children)    return -1;\\n        int arr[] = new int[children];\\n        for(int i=0; i<children; i++)   arr[i] = 1;\\n        money -= children;\\n        for(int i=0; i<children; i++){\\n            if(money >= 7){\\n                money -= 7;\\n                arr[i] += 7;\\n            }else if(money == 0)    break;\\n            else{\\n                if(money == 3){\\n                    arr[i] += 2;\\n                    money = 1;\\n                }else{\\n                    arr[i] += 1;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        int count = 0;\\n        for(int i: arr) count += i == 8 ? 1 : 0;\\n        if(money != 0)   count--;\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children)    return -1;\\n        int arr[] = new int[children];\\n        for(int i=0; i<children; i++)   arr[i] = 1;\\n        money -= children;\\n        for(int i=0; i<children; i++){\\n            if(money >= 7){\\n                money -= 7;\\n                arr[i] += 7;\\n            }else if(money == 0)    break;\\n            else{\\n                if(money == 3){\\n                    arr[i] += 2;\\n                    money = 1;\\n                }else{\\n                    arr[i] += 1;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        int count = 0;\\n        for(int i: arr) count += i == 8 ? 1 : 0;\\n        if(money != 0)   count--;\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3331730,
                "title": "o-1-and-easy-explaination",
                "content": "Rules that we have to follow\\n* All money must be distributed.\\n* Everyone must receive at least 1 dollar.\\n* Nobody receives 4 dollars.\\n\\n<br>\\nWhen money can\\'t be distributed to all the childrens.\\n\\n```\\nif(children > money) return -1;\\n```\\n\\nIf every child can get at least 8\\\\$, in that case all the children will get 8\\\\$ except the last one because the last guy will get more than 8 dollers\\n\\n```\\nif(8*children < money){\\n  return children-1;\\n}\\n```\\nIf every child getting 8 dollers\\n\\n```\\nif(8*children == money) return children;\\n```\\n**as we have came here means the money is smaller than 8\\\\*children i.e 7*Children + children [ this money will be distributed to all the children initially to make sure everyone has atleast 1 dollers]<br>**\\n\\n```\\nmoney = money-children;\\n```\\n**Here money will definately be smaller than 7*children**<br>\\nnow\\nif ***money > 7*(children-1)** , we have to decide how many dollers last child is getting,if he is getting 4$  the answer will be children - 2,because that money will be distributed to 2 other children else we will return children-1\\nelse return money/7\\n```\\nif(7*(children-1) < money){\\n\\tint r = money%7;\\n\\tif(r == 3)\\n\\t\\treturn children-2;\\n\\treturn children-1;\\n}\\n```\\n\\n**COMPLETE CODE**\\n<br>\\n\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children > money) return -1;\\n        if(8*children < money){\\n            return children-1;\\n        }\\n        if(8*children == money) return children;\\n        money = money-children;\\n        if(7*(children-1) < money){\\n            int r = money%7;\\n            if(r == 3)\\n                return children-2;\\n            return children-1;\\n        }\\n        return money/7;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nif(children > money) return -1;\\n```\n```\\nif(8*children < money){\\n  return children-1;\\n}\\n```\n```\\nif(8*children == money) return children;\\n```\n```\\nmoney = money-children;\\n```\n```\\nif(7*(children-1) < money){\\n\\tint r = money%7;\\n\\tif(r == 3)\\n\\t\\treturn children-2;\\n\\treturn children-1;\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children > money) return -1;\\n        if(8*children < money){\\n            return children-1;\\n        }\\n        if(8*children == money) return children;\\n        money = money-children;\\n        if(7*(children-1) < money){\\n            int r = money%7;\\n            if(r == 3)\\n                return children-2;\\n            return children-1;\\n        }\\n        return money/7;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3541612,
                "title": "c-simple-math-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(m < n){\\n            return -1;\\n        }\\n        m -= n;\\n        if(m<7)return 0;\\n        if(m==n*7)return n;\\n        if(m<=7*(n-1)+2)return  m/7;\\n        m-= 7*(n-1);\\n        if(m==3)return n-2;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(m < n){\\n            return -1;\\n        }\\n        m -= n;\\n        if(m<7)return 0;\\n        if(m==n*7)return n;\\n        if(m<=7*(n-1)+2)return  m/7;\\n        m-= 7*(n-1);\\n        if(m==3)return n-2;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3335943,
                "title": "c-java-easy-to-understand-t-c-o-1-s-c-o-1-math",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code-> C++:\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int c) {\\n        int ans=0, rem, temp;\\n        if(m<c)\\n            return -1;\\n        if(m == c*8) \\n            return c;\\n        if(m>c*8) \\n            return c-1; \\n        temp= m-c;\\n        ans = temp/7;\\n        rem = temp%7;\\n        if(c - ans==1 && rem==3) ans--;\\n        return ans;\\n    }\\n};\\n```\\n# Code-> Java:\\n```\\nclass Solution {\\n    public int distMoney(int m, int c) {\\n        int ans=0, rem, temp;\\n        if(m<c)\\n            return -1;\\n        if(m == c*8) \\n            return c;\\n        if(m>c*8) \\n            return c-1; \\n        temp= m-c;\\n        ans = temp/7;\\n        rem = temp%7;\\n        if(c - ans==1 && rem==3) \\n            ans--;\\n        return ans;\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int c) {\\n        int ans=0, rem, temp;\\n        if(m<c)\\n            return -1;\\n        if(m == c*8) \\n            return c;\\n        if(m>c*8) \\n            return c-1; \\n        temp= m-c;\\n        ans = temp/7;\\n        rem = temp%7;\\n        if(c - ans==1 && rem==3) ans--;\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int distMoney(int m, int c) {\\n        int ans=0, rem, temp;\\n        if(m<c)\\n            return -1;\\n        if(m == c*8) \\n            return c;\\n        if(m>c*8) \\n            return c-1; \\n        temp= m-c;\\n        ans = temp/7;\\n        rem = temp%7;\\n        if(c - ans==1 && rem==3) \\n            ans--;\\n        return ans;\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313827,
                "title": "python-o-n-just-do-what-question-says",
                "content": "\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if 8*children==money:\\n            return children\\n        \\n        if money<children:\\n            return -1\\n\\n        #Give every child 1 dollar\\n        arr=[1]*children\\n        money-=children \\n\\n        #------ Try making 8 now -----\\n        #remove if first child can\\'t be made 8\\n        if money<7:\\n            return 0\\n            \\n        # Check how many can receive 7?\\n        # 3 cases:\\n        # last value can be greater than 8\\n        # some value in middle can be less than 8 and remaining are 1\\n        # just add 7 and keep making exact 8 values\\n\\n        for i in range(children):\\n            if money>7 and i==children-1:\\n                arr[i]+=money\\n                break\\n            elif money<7 and i<=children-1:\\n                arr[i]+=money\\n                break\\n            else:\\n                arr[i]+=7\\n                money-=7\\n\\n        # Check for 4 in array which will be at last\\n        # if 4 is in middle we can adjust its value with other 1\\'s\\n\\n        return arr.count(8)-arr.count(4) if arr[-1]==4 else arr.count(8)\\n                \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if 8*children==money:\\n            return children\\n        \\n        if money<children:\\n            return -1\\n\\n        #Give every child 1 dollar\\n        arr=[1]*children\\n        money-=children \\n\\n        #------ Try making 8 now -----\\n        #remove if first child can\\'t be made 8\\n        if money<7:\\n            return 0\\n            \\n        # Check how many can receive 7?\\n        # 3 cases:\\n        # last value can be greater than 8\\n        # some value in middle can be less than 8 and remaining are 1\\n        # just add 7 and keep making exact 8 values\\n\\n        for i in range(children):\\n            if money>7 and i==children-1:\\n                arr[i]+=money\\n                break\\n            elif money<7 and i<=children-1:\\n                arr[i]+=money\\n                break\\n            else:\\n                arr[i]+=7\\n                money-=7\\n\\n        # Check for 4 in array which will be at last\\n        # if 4 is in middle we can adjust its value with other 1\\'s\\n\\n        return arr.count(8)-arr.count(4) if arr[-1]==4 else arr.count(8)\\n                \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313069,
                "title": "o-1-c-fast-solution-easy-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n->Check if 3 rules satisfy or not\\n->If satisfy then see how many children it can provide 8 dollars while satisfying the rules\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // case-1 : If money less than children then it can\\'t satisfy the rule \\n        if(money<(children)){\\n            return -1;\\n        }\\n        //case-2 : Satisfy 3 rules But It needs extra 7 dollars to donate 8 dollars to a children \\n        if(money<(children+7)){\\n            return 0;\\n        }\\n\\n        // Max is for calculating how many chidren we can support\\n        int max = (money-children)/7;\\n        float k = float(money)/(8*children);\\n\\n        //Here k is used if amount is greater than (8*children) then we can only distribute upto (children -1)\\n        if(k>1){\\n            return children-1;\\n        }\\n        // we can distribute all children if money is == (8*children)\\n        else if(k==1){\\n            return children;\\n        }\\n\\n        // here money <(8*children) so we need to check if any last child gets 4 then we need to distribute a 8 into <8 or >8\\n        else{\\n            if((money-8*(children-1))==4){\\n                return max-1;\\n            }\\n            //if not no problem \\n            else{\\n                return max;\\n            }\\n        }\\n    }\\n};\\n```\\n\\n![upvote leetcode meme.jpg](https://assets.leetcode.com/users/images/aeef9cea-f43d-4087-8a37-6f7d34266c66_1679165071.853489.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // case-1 : If money less than children then it can\\'t satisfy the rule \\n        if(money<(children)){\\n            return -1;\\n        }\\n        //case-2 : Satisfy 3 rules But It needs extra 7 dollars to donate 8 dollars to a children \\n        if(money<(children+7)){\\n            return 0;\\n        }\\n\\n        // Max is for calculating how many chidren we can support\\n        int max = (money-children)/7;\\n        float k = float(money)/(8*children);\\n\\n        //Here k is used if amount is greater than (8*children) then we can only distribute upto (children -1)\\n        if(k>1){\\n            return children-1;\\n        }\\n        // we can distribute all children if money is == (8*children)\\n        else if(k==1){\\n            return children;\\n        }\\n\\n        // here money <(8*children) so we need to check if any last child gets 4 then we need to distribute a 8 into <8 or >8\\n        else{\\n            if((money-8*(children-1))==4){\\n                return max-1;\\n            }\\n            //if not no problem \\n            else{\\n                return max;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312185,
                "title": "3-lines-math-based-solution-o-1-rust",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npub fn dist_money(money: i32, children: i32) -> i32 {\\n    if money < children { return -1 };\\n    // (1)             x + 8 * y = money\\n    // (2)             x + y = children\\n    // From (2)        x = children - y\\n    // From (1, 2)     children - y + 8 * y = money\\n    // Then            7 * y = money - children\\n    // Since the answer is less or equal to children, then y is:\\n    let mut y = children.min((money - children) / 7);\\n\\n    // Ensure that will not be any children left with only 4$.\\n    while money - 8 * y == 4 && children - y == 1 ||\\n          // or any money left without being distributed.\\n          money - 8 * y > 0 && children - y == 0 { y -= 1 }\\n    \\n    y\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\npub fn dist_money(money: i32, children: i32) -> i32 {\\n    if money < children { return -1 };\\n    // (1)             x + 8 * y = money\\n    // (2)             x + y = children\\n    // From (2)        x = children - y\\n    // From (1, 2)     children - y + 8 * y = money\\n    // Then            7 * y = money - children\\n    // Since the answer is less or equal to children, then y is:\\n    let mut y = children.min((money - children) / 7);\\n\\n    // Ensure that will not be any children left with only 4$.\\n    while money - 8 * y == 4 && children - y == 1 ||\\n          // or any money left without being distributed.\\n          money - 8 * y > 0 && children - y == 0 { y -= 1 }\\n    \\n    y\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3312019,
                "title": "python-if-else",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        res = (money-children)//7\\n        if children>money:\\n            return -1\\n        elif res==children-1 and (money-children)%7==3:\\n            return res-1\\n        elif res==children and (money-children)%7>0:\\n            return res-1\\n        elif res>children:\\n            return children-1\\n        return res",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        res = (money-children)//7\\n        if children>money:\\n            return -1\\n        elif res==children-1 and (money-children)%7==3:\\n            return res-1\\n        elif res==children and (money-children)%7>0:\\n            return res-1\\n        elif res>children:\\n            return children-1\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 3311967,
                "title": "simple-java-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(children>money)\\n        {\\n            return -1;\\n        }\\n        if(money<8)\\n        {\\n            return 0;\\n        }\\n        int div=money/8,rem=money%8;\\n        if(div==children && rem==0)\\n        {\\n            return children;\\n        }\\n        if(div>=children)\\n        {\\n            return children-1;\\n        }\\n        if(rem==4 && children-div==1)\\n        {\\n            return children-2;\\n        }\\n        if(rem>=children-div)\\n        {\\n            return div;\\n        }\\n        int val=children-div;\\n        while(rem<val)\\n        {\\n            val++;\\n            rem+=8;\\n            div--;\\n        }\\n        return div;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(children>money)\\n        {\\n            return -1;\\n        }\\n        if(money<8)\\n        {\\n            return 0;\\n        }\\n        int div=money/8,rem=money%8;\\n        if(div==children && rem==0)\\n        {\\n            return children;\\n        }\\n        if(div>=children)\\n        {\\n            return children-1;\\n        }\\n        if(rem==4 && children-div==1)\\n        {\\n            return children-2;\\n        }\\n        if(rem>=children-div)\\n        {\\n            return div;\\n        }\\n        int val=children-div;\\n        while(rem<val)\\n        {\\n            val++;\\n            rem+=8;\\n            div--;\\n        }\\n        return div;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3412270,
                "title": "o-1-beats-98-python",
                "content": "# Python \\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children>money:\\n            return -1\\n        if money>8*children:\\n            return children-1\\n        money-=children\\n        if children-money//7==1 and money%7==3:\\n            return money//7-1\\n        return money//7\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children>money:\\n            return -1\\n        if money>8*children:\\n            return children-1\\n        money-=children\\n        if children-money//7==1 and money%7==3:\\n            return money//7-1\\n        return money//7\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339150,
                "title": "simple-java-solution",
                "content": "T.C - O(1)\\n```\\npublic int distMoney(int money, int children) {\\n        //to satisfy the condition of distributing money equally\\n        money-=children;\\n        \\n        /*\\n            till now everyone should have got 1 dollar if not then there is not\\n            enough money to distribute to everyone\\n        */\\n        if(money<0)\\n            return -1;\\n        \\n        //remaining -> we need to calculate how many can get exactly 8 dollars\\n        \\n        //everyone gets exactly 8 dollars\\n        if(money/7==children && money%7==0)\\n            return children;\\n        \\n        /*\\n            after distributing the money last child is getting 4 dollars\\n            like in 1st test case so we need to distribute remaining money i.e 3 dollars within last 2 childrens\\n        */\\n        if(money/7==children-1 && money%7==3)\\n            return children-2;\\n        /*\\n            if there is a lot of money remaining then, money/7 will give us the answer that \\n            in total among how many kids the money(exactly 7 dollars) can be distributed and\\n            if it can be distributed in more childrens than the no. of childrens we need to\\n            distribute money to, Then we will distribute it to children-1 that means we will\\n            give all the remaining money to last kid and exclude that kid from our ans that\\'s\\n            why children-1 and if we have less money remaining for the last kid then we will\\n            simply return money/7\\n        */ \\n        return Math.min(children-1,money/7);\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "T.C - O(1)\\n```\\npublic int distMoney(int money, int children) {\\n        //to satisfy the condition of distributing money equally\\n        money-=children;\\n        \\n        /*\\n            till now everyone should have got 1 dollar if not then there is not\\n            enough money to distribute to everyone\\n        */\\n        if(money<0)\\n            return -1;\\n        \\n        //remaining -> we need to calculate how many can get exactly 8 dollars\\n        \\n        //everyone gets exactly 8 dollars\\n        if(money/7==children && money%7==0)\\n            return children;\\n        \\n        /*\\n            after distributing the money last child is getting 4 dollars\\n            like in 1st test case so we need to distribute remaining money i.e 3 dollars within last 2 childrens\\n        */\\n        if(money/7==children-1 && money%7==3)\\n            return children-2;\\n        /*\\n            if there is a lot of money remaining then, money/7 will give us the answer that \\n            in total among how many kids the money(exactly 7 dollars) can be distributed and\\n            if it can be distributed in more childrens than the no. of childrens we need to\\n            distribute money to, Then we will distribute it to children-1 that means we will\\n            give all the remaining money to last kid and exclude that kid from our ans that\\'s\\n            why children-1 and if we have less money remaining for the last kid then we will\\n            simply return money/7\\n        */ \\n        return Math.min(children-1,money/7);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3329221,
                "title": "how-to-think-in-this-kind-of-problem-tc-o-1-sc-o-1",
                "content": "# Intuition\\nThink in terms of we have to assign 1 to every childrens\\n\\nsuppose, money = 20 , children = 3\\nchildren number : 1 2 3\\nAssigned Money  : 1 1 1\\n\\n \\nNow we left with 20-3 = 17 now every children required 7 to reach at 8.\\n\\n17/7 => 2 \\n\\nMeaning of 2 we can make 2 children with 8 money\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCase i) (money-children)/7 > b \\n\\nIn this Case, we can make every children to 8 and all the remaining money assign to last one\\nans = children-1\\n\\ncase ii) (money-children)/7 == b\\nIn this Case, It means we can make every children to 8 but if we have sum extra money so for that ans--\\n\\ncase iii) (money-children)/7 < b\\n <!-- Describe your approach to solving the problem. -->\\nIn this Case, If one position is remaining and only 3 money left It means it become 4 so ans--\\n\\n# Complexity\\n- Time complexity : O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children || (money==4 && children==1)){\\n            return -1;\\n        }\\n        \\n        \\n        int ans = (money-children)/7;\\n        \\n        if(ans > children){\\n            return children-1;\\n        }else if(ans == children){\\n            if((money-children)%7){\\n                ans--;\\n            }\\n        }else{\\n            if((money-children)%7 == 3 && children-ans == 1){\\n                ans--;\\n            }\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children || (money==4 && children==1)){\\n            return -1;\\n        }\\n        \\n        \\n        int ans = (money-children)/7;\\n        \\n        if(ans > children){\\n            return children-1;\\n        }else if(ans == children){\\n            if((money-children)%7){\\n                ans--;\\n            }\\n        }else{\\n            if((money-children)%7 == 3 && children-ans == 1){\\n                ans--;\\n            }\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314009,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int distMoney(int k, int n) {\\n        for(int i = 0; i < k*n; i++){}\\n        if(k<n||(n==1&&k==4))return -1;\\n        if(k==n*8)return n;\\n        if(k>n*8)return n-1;\\n        if(k<=n+6){\\n            return 0;\\n        }\\n        int x = 0,y=0;\\n        while(n){\\n            // cout<<k<<\" \";\\n            if(k>=n+7){\\n                k -= 8;\\n                x++;\\n            }\\n            else{\\n                k--;\\n                y++;\\n            }\\n            n--;\\n        }\\n        // cout<<k<<\" \";\\n        if(k==3&&y==1)x -= 1;\\n        return x;\\n    }\\n};```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int k, int n) {\\n        for(int i = 0; i < k*n; i++){}\\n        if(k<n||(n==1&&k==4))return -1;\\n        if(k==n*8)return n;\\n        if(k>n*8)return n-1;\\n        if(k<=n+6){\\n            return 0;\\n        }\\n        int x = 0,y=0;\\n        while(n){\\n            // cout<<k<<\" \";\\n            if(k>=n+7){\\n                k -= 8;\\n                x++;\\n            }\\n            else{\\n                k--;\\n                y++;\\n            }\\n            n--;\\n        }\\n        // cout<<k<<\" \";\\n        if(k==3&&y==1)x -= 1;\\n        return x;\\n    }\\n};```",
                "codeTag": "C++"
            },
            {
                "id": 3312818,
                "title": "easy-c-o-1-only-if-else-beat-100",
                "content": "\\n# Complexity\\n- Time complexity: o(1)\\n\\n- Space complexity: o(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int n = children;\\n        int ans=0;\\n        if(money<n) return -1;\\n        if(money == children*8) return children;\\n        if(money>children*8) return children-1; \\n        money-=children;\\n        ans = money/7;\\n        money= money%7;\\n        if(children - ans==1 && money==3) ans--;\\n        return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int n = children;\\n        int ans=0;\\n        if(money<n) return -1;\\n        if(money == children*8) return children;\\n        if(money>children*8) return children-1; \\n        money-=children;\\n        ans = money/7;\\n        money= money%7;\\n        if(children - ans==1 && money==3) ans--;\\n        return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312326,
                "title": "desperate-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int n) {\\n        if(money < n) return -1;\\n        int ans = 0;\\n        vector<int>v(n, 1);\\n        money -= n;\\n        \\n        for(int i=0; i<n; i++) {\\n            if(money >= 7) v[i] += 7, money -= 7;\\n            else v[i] += money, money = 0;\\n        }\\n        if(money) v.back() += money;\\n        \\n        for(int &i : v) {\\n            if(i == 4) {\\n                for(int &j : v) {\\n                    if(j != 4 && j != 8) j++, i--;\\n                }\\n            }\\n        }\\n        for(int i : v) {\\n            if(i == 4) ans--;\\n            if(i == 8) ans++;\\n        }\\n        return max(0, ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int n) {\\n        if(money < n) return -1;\\n        int ans = 0;\\n        vector<int>v(n, 1);\\n        money -= n;\\n        \\n        for(int i=0; i<n; i++) {\\n            if(money >= 7) v[i] += 7, money -= 7;\\n            else v[i] += money, money = 0;\\n        }\\n        if(money) v.back() += money;\\n        \\n        for(int &i : v) {\\n            if(i == 4) {\\n                for(int &j : v) {\\n                    if(j != 4 && j != 8) j++, i--;\\n                }\\n            }\\n        }\\n        for(int i : v) {\\n            if(i == 4) ans--;\\n            if(i == 8) ans++;\\n        }\\n        return max(0, ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955831,
                "title": "c-o-1",
                "content": "```\\npublic class Solution {\\n    public int DistMoney(int money, int children)\\n    {\\n        if (money < children) return -1;\\n\\n        money -= children;\\n\\n        var (div, mod) = (money / 7, money % 7);\\n\\n        if (div == children)\\n        {\\n            return mod == 0 ? children : children - 1;\\n        }\\n\\n        if (div < children)\\n        {\\n            return mod == 3 && children - div == 1 ? div - 1 : div;\\n        }\\n\\n        return children - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistMoney(int money, int children)\\n    {\\n        if (money < children) return -1;\\n\\n        money -= children;\\n\\n        var (div, mod) = (money / 7, money % 7);\\n\\n        if (div == children)\\n        {\\n            return mod == 0 ? children : children - 1;\\n        }\\n\\n        if (div < children)\\n        {\\n            return mod == 3 && children - div == 1 ? div - 1 : div;\\n        }\\n\\n        return children - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3895959,
                "title": "simple-approach-for-the-most-toughest-easy-question",
                "content": "# Intuition\\nTry to distribute the money keeping the conditions in mind.\\n\\n# Approach\\nThink of each child as an element in a list.Initially each child value is 1 now we try to calculate how many children can get an additional 7.Here \\'c\\' calculates the no.of children who can get 8$ each without keeping any conditions in mind.The later conditional statements are applied to satisfy with the rules.\\nIts largely an intutional problem and pretty hard for an easy question.\\n\\n# Complexity\\n- Time complexity:\\nIDK about that,still learning. Beats 89.65 %\\n\\n- Space complexity:\\nIDK how to determine it, but the memory beats is 60% :(\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        #money left after distributing 1$ to each child\\n        money=money-children\\n        c=0\\n        if  money>=0:\\n            while money>=7:\\n                money-=7 \\n                #addition of 7$ more to each child will make it 8$\\n                c+=1 \\n            if money==3 and c==children-1:\\n                c-=1 #because 1+3=4$\\n            elif c==children and money>0:\\n                c-=1 #all the remaining money is taken up by one child\\n            elif c>children:\\n                c=children-1 #all the remaining money is given to one child\\n            return c\\n        else:\\n            return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        #money left after distributing 1$ to each child\\n        money=money-children\\n        c=0\\n        if  money>=0:\\n            while money>=7:\\n                money-=7 \\n                #addition of 7$ more to each child will make it 8$\\n                c+=1 \\n            if money==3 and c==children-1:\\n                c-=1 #because 1+3=4$\\n            elif c==children and money>0:\\n                c-=1 #all the remaining money is taken up by one child\\n            elif c>children:\\n                c=children-1 #all the remaining money is given to one child\\n            return c\\n        else:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692059,
                "title": "c-solution-with-explanation",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // if money is not enough to give everyone at least 1 dollars\\n        if(money < children) return -1;\\n\\n        // give all the children 1 dollar\\n        // the final ans is counting the number of who has 7 dollars\\n        // notice the one (always last one) who has 3 dollar is not allowed\\n        int ans = 0;\\n        money -= children;\\n\\n\\n        // money/7 is the maximum number of children can get 7 dollars\\n        // but children is not always as much as money/7\\n        if(children >= money/7){\\n            ans+=(money/7);\\n            money%=7;\\n        }\\n        else{\\n            ans+=children;\\n            money-=(children*7);\\n        }\\n\\n        // if the last one got 3 dollars\\n        // move one dollar from the one who own 7 dollars\\n        // so the number of children who own 7 dollars is decreased by 1\\n        if(money==3 && (children-ans == 1)) ans--;\\n\\n        // if everyone own 7 dollar and some money still remains\\n        // allocate them to one child, so answer is decreased by 1\\n        if((children-ans == 0) && money>0) ans--;\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // if money is not enough to give everyone at least 1 dollars\\n        if(money < children) return -1;\\n\\n        // give all the children 1 dollar\\n        // the final ans is counting the number of who has 7 dollars\\n        // notice the one (always last one) who has 3 dollar is not allowed\\n        int ans = 0;\\n        money -= children;\\n\\n\\n        // money/7 is the maximum number of children can get 7 dollars\\n        // but children is not always as much as money/7\\n        if(children >= money/7){\\n            ans+=(money/7);\\n            money%=7;\\n        }\\n        else{\\n            ans+=children;\\n            money-=(children*7);\\n        }\\n\\n        // if the last one got 3 dollars\\n        // move one dollar from the one who own 7 dollars\\n        // so the number of children who own 7 dollars is decreased by 1\\n        if(money==3 && (children-ans == 1)) ans--;\\n\\n        // if everyone own 7 dollar and some money still remains\\n        // allocate them to one child, so answer is decreased by 1\\n        if((children-ans == 0) && money>0) ans--;\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3558741,
                "title": "using-vector-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nIt checks if the available money (money) is less than the number of children (child). If so, it returns -1 indicating that the distribution is not possible.\\n\\nIt calculates the initial division of money among the children by dividing money by child. The result is stored in the variable division.\\n\\nIt calculates the remaining amount of money (remain) after distributing the initial division equally among the children, excluding one child.\\n\\nIt creates a vector nums of size child and initializes all elements to -1. This vector will store the amount of money each child receives.\\n\\nThe first element (nums[0]) is set to the remaining amount (remain), while the rest of the elements are set to the initial division (division).\\n\\nIf the amount of money received by the first child (nums[0]) is less than or equal to 8, it enters a loop to redistribute the excess money.\\n\\na. It iterates through the children from index 1 to child-1.\\n\\nb. If the amount of money received by a child (nums[i]) is greater than 1, it reduces that amount by 1 and adds it to the variable rem.\\n\\nc. It then checks if the remaining amount (rem) is sufficient to increase the money of the child (nums[i]) to 8. If so, it adds the necessary amount to reach 8 and reduces rem accordingly.\\n\\nd. After this loop, if there is still some remaining money (rem), it adds it to the last child (nums[child-1]).\\n\\nIf the amount of money received by the first child (nums[0]) is greater than 8, it enters a loop to handle the excess money.\\n\\na. It iterates through the children from index 0 to child-1.\\n\\nb. If the amount of money received by a child (nums[i]) is greater than 8, it reduces it to 8 and adds the excess amount to the variable great.\\n\\nc. If the amount of money received by a child (nums[i]) is less than 8, it checks if there is still some excess money (great) available. If so, it increases the money of the child by 1 and reduces great by 1.\\n\\nd. After this loop, if there is still some remaining excess money (great), it adds it to the last child (nums[child-1]). Otherwise, if there is still some remaining money to be added (adder), it adds it to the last child.\\n\\nIt then iterates through the nums vector from index 1 to child-1 and checks if any child received exactly 4 units of money. If so, it reduces the money of that child by 1 and adds it to the previous child.\\n\\nFinally, it counts the number of children (ans) who received exactly 8 units of money by iterating through the nums vector and increments ans whenever the value is 8.\\n\\nIf the count ans is negative, it returns 0. Otherwise, it returns the count ans.\\n# Complexity\\n- Time complexity:O(child)\\n\\n- Space complexity:O(child)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int child) {\\n        if(money<child)     return -1;\\n        int division=money/child;\\n        int remain=money-division*(child-1);\\n        vector<int>nums(child,-1);\\n        nums[0]=remain;\\n        for(int i=1 ; i < child ; i++){\\n            nums[i]=division;\\n        }\\n        int rem=0;\\n        if(nums[0]<=8){\\n            for(int i=1 ; i < child ; i++){\\n                if(nums[i]>1){\\n                    rem=rem+(nums[i]-1);\\n                    nums[i]=1;\\n                }    \\n            }\\n            for(int i=0 ; i < child-1 ; i++){\\n                int a=8-nums[i];\\n                if(rem>=a){\\n                    rem=rem-a;\\n                    nums[i]=8;\\n                }\\n            }\\n            if(rem>0)   nums[child-1]=nums[child-1]+rem;\\n            else        nums[child-1]=nums[child-1];\\n        }\\n        int great=0;\\n        int adder=0;\\n        if(nums[0]>8){\\n            for(int i=0 ; i < child ; i++){\\n                int a=nums[i]-8;\\n                if(nums[i]>8){\\n                    great=great+a;\\n                    nums[i]=8;\\n                }\\n                if(nums[i]<8){\\n                    while(nums[i]!=8 and great!=0){\\n                        nums[i]++;\\n                        great--;\\n                    }\\n                }\\n                if(great==0 and nums[i]>1){\\n                    adder=adder+nums[i]-1;\\n                    nums[i]=1;\\n                }\\n            }\\n            for(int i=0 ; i < child-1 ; i++){\\n                int a=8-nums[i];\\n                if(adder>=a and nums[i]<8){\\n                    nums[i]=8;\\n                    adder=adder-a;\\n                }\\n            }\\n            if(great==0) nums[child-1]=nums[child-1]+adder;\\n            else        nums[child-1]=nums[child-1]+great;\\n        }\\n        for(int i=1 ; i<nums.size() ; i++){\\n            if(nums[i]==4){\\n                nums[i]--;\\n                nums[i-1]++;\\n            }      \\n        }\\n        int ans=0;\\n        for(int i=0 ; i<nums.size() ; i++){\\n            if(nums[i]==8) ans++;\\n        }\\n        if(ans<0)    return 0;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int child) {\\n        if(money<child)     return -1;\\n        int division=money/child;\\n        int remain=money-division*(child-1);\\n        vector<int>nums(child,-1);\\n        nums[0]=remain;\\n        for(int i=1 ; i < child ; i++){\\n            nums[i]=division;\\n        }\\n        int rem=0;\\n        if(nums[0]<=8){\\n            for(int i=1 ; i < child ; i++){\\n                if(nums[i]>1){\\n                    rem=rem+(nums[i]-1);\\n                    nums[i]=1;\\n                }    \\n            }\\n            for(int i=0 ; i < child-1 ; i++){\\n                int a=8-nums[i];\\n                if(rem>=a){\\n                    rem=rem-a;\\n                    nums[i]=8;\\n                }\\n            }\\n            if(rem>0)   nums[child-1]=nums[child-1]+rem;\\n            else        nums[child-1]=nums[child-1];\\n        }\\n        int great=0;\\n        int adder=0;\\n        if(nums[0]>8){\\n            for(int i=0 ; i < child ; i++){\\n                int a=nums[i]-8;\\n                if(nums[i]>8){\\n                    great=great+a;\\n                    nums[i]=8;\\n                }\\n                if(nums[i]<8){\\n                    while(nums[i]!=8 and great!=0){\\n                        nums[i]++;\\n                        great--;\\n                    }\\n                }\\n                if(great==0 and nums[i]>1){\\n                    adder=adder+nums[i]-1;\\n                    nums[i]=1;\\n                }\\n            }\\n            for(int i=0 ; i < child-1 ; i++){\\n                int a=8-nums[i];\\n                if(adder>=a and nums[i]<8){\\n                    nums[i]=8;\\n                    adder=adder-a;\\n                }\\n            }\\n            if(great==0) nums[child-1]=nums[child-1]+adder;\\n            else        nums[child-1]=nums[child-1]+great;\\n        }\\n        for(int i=1 ; i<nums.size() ; i++){\\n            if(nums[i]==4){\\n                nums[i]--;\\n                nums[i-1]++;\\n            }      \\n        }\\n        int ans=0;\\n        for(int i=0 ; i<nums.size() ; i++){\\n            if(nums[i]==8) ans++;\\n        }\\n        if(ans<0)    return 0;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469911,
                "title": "easy-java-solution-with-single-while-loop",
                "content": "# Intuition\\nSimple approach by checking all use cases\\n\\n# Approach\\n1. If money < children : return -1\\n2. Atleast 1 needs to be distributed so reduce money by number of childrens.\\n3. Keeps reducing money by 7 to make each child gets 8 till all child gets 8.\\n4. Now we are done with all child to give 8 OR we have money less than 7. We have below conditions :\\n - money == 0 : return count\\n - count full : and we have money : count--;\\n - count not full : pending is 3 && only 1 children left : count--;\\n - count not full : 1,2,4,5,6 : return count;\\n\\n# Complexity\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n         if(money < children) {\\n            return -1;\\n        }\\n        money = money - children;\\n        int count = 0;\\n        while(money >= 7 && count != children) {\\n            money = money - 7;\\n            count++;\\n        } \\n        // 1. money == 0 : return count\\n        // 2. count full : and we have money : count--;\\n        // 3. count not full : pending is 3 && only 1 children left : count--;\\n        // 4. count not full : 1,2,4,5,6 : return count;\\n\\n        if(money == 0) {\\n            return count;\\n        } else {\\n            if(count == children) {\\n                count--;\\n            } else {\\n                if(money == 3 && children - count == 1) {\\n                    count--;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n         if(money < children) {\\n            return -1;\\n        }\\n        money = money - children;\\n        int count = 0;\\n        while(money >= 7 && count != children) {\\n            money = money - 7;\\n            count++;\\n        } \\n        // 1. money == 0 : return count\\n        // 2. count full : and we have money : count--;\\n        // 3. count not full : pending is 3 && only 1 children left : count--;\\n        // 4. count not full : 1,2,4,5,6 : return count;\\n\\n        if(money == 0) {\\n            return count;\\n        } else {\\n            if(count == children) {\\n                count--;\\n            } else {\\n                if(money == 3 && children - count == 1) {\\n                    count--;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3344411,
                "title": "2591-simple-solution-in-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children > money: return -1\\n        elif children == money: return 0\\n        count, rem = money//8, money%8\\n        while count >= 0:\\n            if count + rem >= children:\\n                if children == count + 1 and rem == 4: return count - 1\\n                if count == children and rem != 0: return count - 1\\n                elif count > children:\\n                    count -= 1\\n                    rem += 8\\n                else:\\n                    return count \\n            else:\\n                count -= 1\\n                rem += 8\\n        return -1\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children > money: return -1\\n        elif children == money: return 0\\n        count, rem = money//8, money%8\\n        while count >= 0:\\n            if count + rem >= children:\\n                if children == count + 1 and rem == 4: return count - 1\\n                if count == children and rem != 0: return count - 1\\n                elif count > children:\\n                    count -= 1\\n                    rem += 8\\n                else:\\n                    return count \\n            else:\\n                count -= 1\\n                rem += 8\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3344036,
                "title": "1-liner",
                "content": "```\\nint distMoney(int m, int c)\\n{\\n\\treturn m<c ? -1 : m==8*c-4 ? c-2 : m>8*c ? c-1 : (m-c)/7;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint distMoney(int m, int c)\\n{\\n\\treturn m<c ? -1 : m==8*c-4 ? c-2 : m>8*c ? c-1 : (m-c)/7;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3340976,
                "title": "simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n      if(money<children) return -1;\\n        money-=children;\\n        int ans = money/7;\\n        int rem = money%7;\\n        if(ans==children && rem==0) return ans;\\n        else if(ans>=children) return children-1;\\n        if(rem==3 && (ans==(children-1))) return ans-1;\\n        return ans; \\n    }\\n};\\n<!-- plz upvote if you like the code\\uD83D\\uDC4D -->\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n      if(money<children) return -1;\\n        money-=children;\\n        int ans = money/7;\\n        int rem = money%7;\\n        if(ans==children && rem==0) return ans;\\n        else if(ans>=children) return children-1;\\n        if(rem==3 && (ans==(children-1))) return ans-1;\\n        return ans; \\n    }\\n};\\n<!-- plz upvote if you like the code\\uD83D\\uDC4D -->\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3318537,
                "title": "java-javascript-o-1-time-space-complexity",
                "content": "# Intuition\\nif we have more money then extra money give to the last child or less money then also give to the last child\\n(but first give all the childrens 1 dollar for pass the second condition of problem)\\n\\n# Approach\\nGive every children 1 dollar for pass the second condition\\n\\nNow, We have only ***3 condition*** to solve this problem\\n### [1] money distributes as per needed for first ```\\nchildren-1``` children but last children have 4 children which is not valid as per problem 3rd condition.\\nSo, we have to leave last 2 children from giving 8 dollar.\\n\\n### [2] For all children money distrubute completely 8 dollar per children(not more than 8 and not less)\\n\\n### [3] money more than needed for all children or less than needed\\n   ***(i)*** If more than needed then give extra money(more then 8) to the last children but satisfies first ```\\nchildren -1 ```.\\n ***(ii)*** otherwise money/7 (In JS this will give fraction number so we have to wrap with ```\\nMath.floor()```)\\n\\n# Complexity\\n- Time & space complexity : O(1) - constant\\n\\n\\n```javascript []\\nvar distMoney = function(money, children) {\\n    if(money < children){\\n        return -1;\\n    }\\n    \\n    money -= children;\\n    \\n    const helper = Math.floor(money/7);\\n    \\n    // 4 remaninig condition\\n    if(helper == children-1 && money % 7 == 3){\\n        return children-2;\\n    }\\n    // have as per needed\\n    if(money / 7 == children){\\n        return children;\\n    }\\n    \\n    // money more than needed then children-1 otherwise Math.floor(money/7)\\n    return Math.min(children-1,helper);\\n};\\n```\\n```java []\\n\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if (money < children) {\\n            return -1;\\n        }\\n\\n        money -= children;\\n\\n        // 4 remaninig condition\\n        if (money / 7 == children - 1 && money % 7 == 3) {\\n            return children - 2;\\n        }\\n        // have as per needed\\n        if (money / 7 == children && money % 7 == 0) {\\n            return children;\\n        }\\n\\n        // more than or less than needed\\n        return Math.min(children - 1, money / 7);\\n    }\\n\\n}",
                "solutionTags": [
                    "Java",
                    "JavaScript"
                ],
                "code": "```\\nchildren-1```\n```\\nchildren -1 ```\n```\\nMath.floor()```\n```javascript []\\nvar distMoney = function(money, children) {\\n    if(money < children){\\n        return -1;\\n    }\\n    \\n    money -= children;\\n    \\n    const helper = Math.floor(money/7);\\n    \\n    // 4 remaninig condition\\n    if(helper == children-1 && money % 7 == 3){\\n        return children-2;\\n    }\\n    // have as per needed\\n    if(money / 7 == children){\\n        return children;\\n    }\\n    \\n    // money more than needed then children-1 otherwise Math.floor(money/7)\\n    return Math.min(children-1,helper);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3318470,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money<children)return -1;\\n        money-=children;\\n        int count=money/7;\\n        int mod=money%7;\\n        if(mod==3&&count==children-1)return count-1;\\n        if((count==children&&mod!=0))return count-1;\\n        if(count>children)return children-1;\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money<children)return -1;\\n        money-=children;\\n        int count=money/7;\\n        int mod=money%7;\\n        if(mod==3&&count==children-1)return count-1;\\n        if((count==children&&mod!=0))return count-1;\\n        if(count>children)return children-1;\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3317486,
                "title": "python-beats-100-with-comments",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # everyone must receive at least 1 dollar\\n        extra = money - children\\n        if extra < 0:\\n            return -1\\n\\n        t = 0\\n        \\n        # gives additional 7 dollars to everyone\\n        while extra >= 7 and t < children:\\n            extra -= 7\\n            t += 1\\n\\n        # there is extra dollars, so latest recieve more\\n        if extra > 0 and t == children:\\n            t -= 1\\n\\n        # nobody receives 4 dollars.\\n        elif extra == 3 and children - t == 1:\\n            t -= 1\\n\\n        return t\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # everyone must receive at least 1 dollar\\n        extra = money - children\\n        if extra < 0:\\n            return -1\\n\\n        t = 0\\n        \\n        # gives additional 7 dollars to everyone\\n        while extra >= 7 and t < children:\\n            extra -= 7\\n            t += 1\\n\\n        # there is extra dollars, so latest recieve more\\n        if extra > 0 and t == children:\\n            t -= 1\\n\\n        # nobody receives 4 dollars.\\n        elif extra == 3 and children - t == 1:\\n            t -= 1\\n\\n        return t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3316179,
                "title": "c-easy-3-if",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n    \\n    money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n    \\n    money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313701,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        let pool = money - children;\\n        if pool < 0 {\\n            return -1;\\n        }\\n        if pool / 7 == children && pool % 7 == 0 {\\n            return children;\\n        }\\n        if pool / 7 == children - 1 && pool % 7 == 3 {\\n            return children - 2;\\n        }\\n        (children - 1).min(pool / 7)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        let pool = money - children;\\n        if pool < 0 {\\n            return -1;\\n        }\\n        if pool / 7 == children && pool % 7 == 0 {\\n            return children;\\n        }\\n        if pool / 7 == children - 1 && pool % 7 == 3 {\\n            return children - 2;\\n        }\\n        (children - 1).min(pool / 7)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3313403,
                "title": "c-easiest-solution-with-explanation",
                "content": "\\n# Approach\\nWe have m money and c children.\\n**Let\\'s give a dollar to every child.**\\nNow, **we have m-c money** and first condition is satisfied.\\n\\nConsidering second and third case, we just have to maximise the number of children with 8 dollars. **Starting from the first child till the second last child, give them 7 dollars if we have 7 or more dollars.**\\n\\nWe have distributed money properly so far, now we check the last child. **If we have exactly 7 dollars left, give them to the last child and all the children have exactly 8 dollars.**\\n\\n**If we have exactly 3 dollars and if all other children have 8 dollars, then for not giving 4 candies to a child, the number of children with 8 candies would get reduced by 1**, as we will not give 4 candies to the last child, and it would disturb the count of 8 candies of the previous child. \\n\\n**Apart from 3 or 7 dollars left, any other amount of dollars left won\\'t change the number of children with 8 dollars.** \\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans=0;\\n        if(children>money)return -1;\\n        \\n        vector<int> v(children,1);  //Give each child a dollar\\n        money-=children;\\n        \\n        for(int i=0;i<children-1;i++){\\n            if(money>6){\\n                ans++;\\n                v[i]+=7;     //Give 7 dollarrs to children if possible\\n                money-=7;\\n            }\\n        }\\n        if(money==7)ans++;    //for the last child if we have 7 dollars left\\n\\n        else if (money==3){ \\n            if(v[children-2]==8){\\n                ans--;       //if we are left with 3 dollars and all\\n            }                //other children have 8 dollars, it would\\n        }                    //disturb our count of children with 8 dollars        \\n        return ans;\\n    }\\n};\\n```\\n**Please upvote if it helped. Happy Coding!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans=0;\\n        if(children>money)return -1;\\n        \\n        vector<int> v(children,1);  //Give each child a dollar\\n        money-=children;\\n        \\n        for(int i=0;i<children-1;i++){\\n            if(money>6){\\n                ans++;\\n                v[i]+=7;     //Give 7 dollarrs to children if possible\\n                money-=7;\\n            }\\n        }\\n        if(money==7)ans++;    //for the last child if we have 7 dollars left\\n\\n        else if (money==3){ \\n            if(v[children-2]==8){\\n                ans--;       //if we are left with 3 dollars and all\\n            }                //other children have 8 dollars, it would\\n        }                    //disturb our count of children with 8 dollars        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313386,
                "title": "c-intuitive-approach",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\nwhere n-number of children\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        if(money < children) return -1; //when money is lesser than children\\n        int ans=0;\\n\\n        //Starts with giving 8 dollars to 1 child         \\n        for(int n=1; n<=children; n++)\\n        {\\n            int rem = money - n*8; //remaining money\\n            if(rem < children-n) continue; //when remaining money is lesser than remaining children\\n            if(rem > 0 && (children-n)==0) continue; //when money is left but no children is available\\n            if(rem==4 && (children-n)==1) continue; //when remaining money is 4 and remaining children is 1\\n            if(rem==0 && (children-n)>0) continue; //when no money is left but children are left\\n            else ans = n; //we can easily distribute 8 dollars to n children\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        if(money < children) return -1; //when money is lesser than children\\n        int ans=0;\\n\\n        //Starts with giving 8 dollars to 1 child         \\n        for(int n=1; n<=children; n++)\\n        {\\n            int rem = money - n*8; //remaining money\\n            if(rem < children-n) continue; //when remaining money is lesser than remaining children\\n            if(rem > 0 && (children-n)==0) continue; //when money is left but no children is available\\n            if(rem==4 && (children-n)==1) continue; //when remaining money is 4 and remaining children is 1\\n            if(rem==0 && (children-n)>0) continue; //when no money is left but children are left\\n            else ans = n; //we can easily distribute 8 dollars to n children\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313328,
                "title": "simple-python3-solution-upto-100-faster-commented",
                "content": "# Intuition\\nYou first distribute one dollar to each child and then distribute the remaining money as fairly as possible, while avoiding giving any child 4 dollars. Finally, you count how many children have exactly 8 dollars.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(children)\\n\\n- Space complexity:\\nO(children)\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ### giving each kid 1 dollar and checking we have money to do that.\\n        res = [1] * children\\n        money -= children\\n\\n        if money < 0:\\n            return -1\\n        elif money == 0:\\n            return 0\\n        \\n        ### Giving each child 8 and moving to the next and at the last \\n        ### if money is left give it all to the last kid.\\n\\n        n = children\\n        i = 0\\n        while money >= 1:\\n            res[i] += min(7,money)\\n            money -= min(7,money)\\n            i += 1\\n\\n            if i == n:\\n                res[i-1] += money\\n                money = 0\\n        \\n        #print(res)\\n\\n\\n        ### If any kid have 4 dollars we take 1 dollar from that kid \\n        ### and give it to any kid beside.\\n        while 4 in res:\\n            ind = res.index(4)\\n            res[ind]-=1\\n            if ind < n-1:\\n                if res[ind+1] < 8 and res[ind+1] != 3:\\n                    res[ind+1] += 1\\n                    break\\n            if ind > 0:\\n                if  res[ind-1] != 3:\\n                    res[ind-1] += 1\\n\\n        #print(res)\\n                \\n        return res.count(8)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ### giving each kid 1 dollar and checking we have money to do that.\\n        res = [1] * children\\n        money -= children\\n\\n        if money < 0:\\n            return -1\\n        elif money == 0:\\n            return 0\\n        \\n        ### Giving each child 8 and moving to the next and at the last \\n        ### if money is left give it all to the last kid.\\n\\n        n = children\\n        i = 0\\n        while money >= 1:\\n            res[i] += min(7,money)\\n            money -= min(7,money)\\n            i += 1\\n\\n            if i == n:\\n                res[i-1] += money\\n                money = 0\\n        \\n        #print(res)\\n\\n\\n        ### If any kid have 4 dollars we take 1 dollar from that kid \\n        ### and give it to any kid beside.\\n        while 4 in res:\\n            ind = res.index(4)\\n            res[ind]-=1\\n            if ind < n-1:\\n                if res[ind+1] < 8 and res[ind+1] != 3:\\n                    res[ind+1] += 1\\n                    break\\n            if ind > 0:\\n                if  res[ind-1] != 3:\\n                    res[ind-1] += 1\\n\\n        #print(res)\\n                \\n        return res.count(8)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313091,
                "title": "easy-and-understandable-solution-with-comments",
                "content": "Here\\'s the detailed case by case code, explained.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        //if the amount is lesser than the number of children, then its impossible for the money to be divided among them, such that, each child gets atleast 1\\n        if(money<children) return -1; \\n        \\n        money-=children; //Allocating 1 to each children, then the remaining amount.\\n        \\n        int count = money/7; //number of money=7 that can be given to children. (7+1=8)\\n        \\n        int remaining = money - (count*7); //remaining amount after allocating each child with 1\\n        \\n        if(count>children) //if the count is much more than children, then one particular child will be given more amount.\\n            return children-1;\\n        \\n        else if(count<children){ //if count is less than number of children:\\n            if(remaining==3 && children-count==1) //if there is a case such that only one child has 1 and remaining amount=3, but we know that 1+3 cannot be given, so we have to distribute the remaining amount with another child as well\\n                return count-1;\\n            else\\n                return count;\\n        }\\n        \\n        else if(count==children && remaining!=0) return count-1; //if there is a remaining sum and all children have been assigned 8, then we have to allocate the remaining sum to a child\\n        \\n        else\\n            return count;\\n    }\\n};\\n```\\n\\n **PS: Special thanks to [Shreyansh](https://leetcode.com/Shreyansh__Srivastava/), from whom, my approach was inspired. \\n Do give it an upvote if this helped!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        //if the amount is lesser than the number of children, then its impossible for the money to be divided among them, such that, each child gets atleast 1\\n        if(money<children) return -1; \\n        \\n        money-=children; //Allocating 1 to each children, then the remaining amount.\\n        \\n        int count = money/7; //number of money=7 that can be given to children. (7+1=8)\\n        \\n        int remaining = money - (count*7); //remaining amount after allocating each child with 1\\n        \\n        if(count>children) //if the count is much more than children, then one particular child will be given more amount.\\n            return children-1;\\n        \\n        else if(count<children){ //if count is less than number of children:\\n            if(remaining==3 && children-count==1) //if there is a case such that only one child has 1 and remaining amount=3, but we know that 1+3 cannot be given, so we have to distribute the remaining amount with another child as well\\n                return count-1;\\n            else\\n                return count;\\n        }\\n        \\n        else if(count==children && remaining!=0) return count-1; //if there is a remaining sum and all children have been assigned 8, then we have to allocate the remaining sum to a child\\n        \\n        else\\n            return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312506,
                "title": "o-n-solution-biweekly-100",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        if(children>money)\\n            return -1;\\n        int c=0;\\n       if(money<0)\\n           return 0;\\n        int x=money/8;\\n        int y=money%8;\\n        if(x==children and y==0)\\n            return children;\\n        if(x>=children)\\n            return children-1;\\n        if(y==4 and (children-x)==1)\\n            return children-2;\\n        if(y>=(children-x))\\n            return x;\\n          c=children-x;\\n        while(y<c)\\n        {\\n            c++;\\n            y+=8;\\n            x--;\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        if(children>money)\\n            return -1;\\n        int c=0;\\n       if(money<0)\\n           return 0;\\n        int x=money/8;\\n        int y=money%8;\\n        if(x==children and y==0)\\n            return children;\\n        if(x>=children)\\n            return children-1;\\n        if(y==4 and (children-x)==1)\\n            return children-2;\\n        if(y>=(children-x))\\n            return x;\\n          c=children-x;\\n        while(y<c)\\n        {\\n            c++;\\n            y+=8;\\n            x--;\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312482,
                "title": "c-using-vector-intiutive",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        vector<int>v1;\\n        if(children > money) return -1;\\n        for(int i=0;i<children;i++) v1.push_back(1);\\n        money=money-children;\\n        int ans=0;\\n        for(int i=0;i<children;i++){\\n            if(money>=7){\\n                ans++;\\n            v1[i]=v1[i]+7;\\n            money=money-7;   \\n            }\\n}\\n\\n        int diff=money;\\n        if(ans == children && diff>=1) {\\n            ans--;\\n            return ans;\\n        }\\n                int left=children-ans;\\n        if( left == 1 && diff == 3) ans--;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        vector<int>v1;\\n        if(children > money) return -1;\\n        for(int i=0;i<children;i++) v1.push_back(1);\\n        money=money-children;\\n        int ans=0;\\n        for(int i=0;i<children;i++){\\n            if(money>=7){\\n                ans++;\\n            v1[i]=v1[i]+7;\\n            money=money-7;   \\n            }\\n}\\n\\n        int diff=money;\\n        if(ans == children && diff>=1) {\\n            ans--;\\n            return ans;\\n        }\\n                int left=children-ans;\\n        if( left == 1 && diff == 3) ans--;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312456,
                "title": "terrible-solution-for-terrible-problem",
                "content": "## Intuition\\nAfter hitting 5 WA\\'s I decided to go all out \\uD83E\\uDD27\\n\\n## Approach\\nMade an array of size = children, each index will store the money given to the ith children. At the end, count how many children end up with exactly 8 money.\\n- Give 8 until you can do so.\\n- If you are to give 4, give 3 instead.\\n- If no money left, give one and take one from leftmost non-one element.\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children > money) return -1;\\n        if(money == 4 && children == 1) return -1;\\n        vector<int> v (children);\\n        for(int i=0;i<children;i++){\\n            if(money >= 8){\\n                v[i] = 8;\\n                money -= 8;\\n            }\\n            else{\\n                if(money == 4){\\n                    v[i] = 3;\\n                    money -= 3;\\n                }\\n                else if(money == 0){\\n                    v[i] = 1;\\n                    int p = i-1;\\n                    while(p>=0 && v[p] == 1) p--;\\n                    if(p == -1) return 0;\\n                    v[p]--;\\n                }\\n                else{\\n                    v[i] = money;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        int cnt = 0;\\n        for(auto i : v)\\n            cnt += (i == 8);\\n        if(money) cnt--;\\n        return cnt;\\n    }\\n};\\n```\\nSide Note : You could have given chocolates to the children :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children > money) return -1;\\n        if(money == 4 && children == 1) return -1;\\n        vector<int> v (children);\\n        for(int i=0;i<children;i++){\\n            if(money >= 8){\\n                v[i] = 8;\\n                money -= 8;\\n            }\\n            else{\\n                if(money == 4){\\n                    v[i] = 3;\\n                    money -= 3;\\n                }\\n                else if(money == 0){\\n                    v[i] = 1;\\n                    int p = i-1;\\n                    while(p>=0 && v[p] == 1) p--;\\n                    if(p == -1) return 0;\\n                    v[p]--;\\n                }\\n                else{\\n                    v[i] = money;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        int cnt = 0;\\n        for(auto i : v)\\n            cnt += (i == 8);\\n        if(money) cnt--;\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312401,
                "title": "all-edge-cases-covered",
                "content": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if(children * 8 == money) {\\n        return children\\n    }\\n    if(money<children || (money == 4 && children ==1)) {\\n        return -1\\n    }\\n    let pending = money - children;\\n    \\n    let total =  Math.floor(pending/7);\\n    \\n    if(total>=children) {\\n        return children-1\\n    }\\n    if(total == children-1 && pending%7 == 3) {\\n        return total-1\\n    }\\n    return total\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if(children * 8 == money) {\\n        return children\\n    }\\n    if(money<children || (money == 4 && children ==1)) {\\n        return -1\\n    }\\n    let pending = money - children;\\n    \\n    let total =  Math.floor(pending/7);\\n    \\n    if(total>=children) {\\n        return children-1\\n    }\\n    if(total == children-1 && pending%7 == 3) {\\n        return total-1\\n    }\\n    return total\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3312400,
                "title": "easy-to-understand-in-o-n",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children){\\n            return -1;\\n        }\\n        \\n        if(money <= 8){\\n            return 0;\\n        }\\n        int[] arr = new int[children];\\n        for(int i = 0 ; i < children ;i++){\\n            arr[i] = 1;\\n            money--;\\n        }\\n        int count = 0;\\n        for(int i = 0 ; i < arr.length; i++){\\n            if(money-7 >= 0){\\n                count++;\\n                money-=7;\\n            }\\n            else if(money > 0){\\n                if(money == 3 && i == arr.length-1){\\n                    return count-1;\\n                }\\n                else{\\n                    arr[i] = money;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        if(money > 0){\\n            count--;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children){\\n            return -1;\\n        }\\n        \\n        if(money <= 8){\\n            return 0;\\n        }\\n        int[] arr = new int[children];\\n        for(int i = 0 ; i < children ;i++){\\n            arr[i] = 1;\\n            money--;\\n        }\\n        int count = 0;\\n        for(int i = 0 ; i < arr.length; i++){\\n            if(money-7 >= 0){\\n                count++;\\n                money-=7;\\n            }\\n            else if(money > 0){\\n                if(money == 3 && i == arr.length-1){\\n                    return count-1;\\n                }\\n                else{\\n                    arr[i] = money;\\n                    money = 0;\\n                }\\n            }\\n        }\\n        if(money > 0){\\n            count--;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312363,
                "title": "python3-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ans=(money-children)//7\\n        if children>money:\\n            return -1\\n\\n        elif ans==children-1 and (money-children)%7==3:\\n            return ans-1\\n        \\n        elif ans==children and (money-children)%7>0:\\n            return ans-1\\n\\n        elif children<ans:\\n            return children-1\\n\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ans=(money-children)//7\\n        if children>money:\\n            return -1\\n\\n        elif ans==children-1 and (money-children)%7==3:\\n            return ans-1\\n        \\n        elif ans==children and (money-children)%7>0:\\n            return ans-1\\n\\n        elif children<ans:\\n            return children-1\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312335,
                "title": "swift-easy-to-understand-and-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    func distMoney(_ money: Int, _ children: Int) -> Int {\\n        \\n        var money = money\\n        money -= children\\n        \\n        if (money < 0){\\n            return -1\\n        }\\n        \\n        if (money / 7 == children && money % 7 == 0){\\n            return children\\n        }\\n        \\n        if (money / 7 > children){\\n            return children - 1\\n        } \\n        \\n        if (money / 7 == children - 1 && money % 7 == 3){\\n            return children - 2\\n        }\\n        \\n        return min(children - 1, money / 7)\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func distMoney(_ money: Int, _ children: Int) -> Int {\\n        \\n        var money = money\\n        money -= children\\n        \\n        if (money < 0){\\n            return -1\\n        }\\n        \\n        if (money / 7 == children && money % 7 == 0){\\n            return children\\n        }\\n        \\n        if (money / 7 > children){\\n            return children - 1\\n        } \\n        \\n        if (money / 7 == children - 1 && money % 7 == 3){\\n            return children - 2\\n        }\\n        \\n        return min(children - 1, money / 7)\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312302,
                "title": "python-solution-easy-explained-100",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int: \\n        #answer not possible if money is less\\n        if money<children:\\n            return -1\\n        \\n        #if money and children same then not possible to make 8\\n        if money==children:\\n            return 0\\n        \\n        #give 1 to each\\n        l=[1]*children\\n        money-=children #subtract given money to each children\\n        \\n        #now allot money to children\\n        i=0\\n        while money!=0: #run till money becomes 0\\n            l[i]+=1 #give money\\n            money-=1 #decrease money\\n            if l[i]==8: #try to give 8 as many as possible, when somebody got 8 move forward\\n                i+=1 #increase index\\n            if i==children: #start from 0 index if money still remains\\n                i=0\\n                \\n        eight=0 #total eights\\n        c=0 #total fours\\n        \\n        for j in l: #check for 8 and 4 in array l\\n            if j==4:\\n                c+=1\\n            if j==8:\\n                eight+=1\\n                \\n        # if no 8 then there is no possible solution made to distribute money       \\n        if eight==0:\\n            return 0\\n        \\n        # if l=[8,8,4] type of condition occurs then try to remove 4 from aaray\\n        if c==1 and eight==children-1:\\n            return eight-1\\n        \\n        # if l=[8,4,1] type of condition occurs then return total 8\\n        if c>0 and eight>0:\\n            return eight\\n\\t\\treturn eight\\n```\\n**PLEASE UPVOTE IF YOU FOUND THE SOLUTION HELPFUL** \\uD83C\\uDF3A",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int: \\n        #answer not possible if money is less\\n        if money<children:\\n            return -1\\n        \\n        #if money and children same then not possible to make 8\\n        if money==children:\\n            return 0\\n        \\n        #give 1 to each\\n        l=[1]*children\\n        money-=children #subtract given money to each children\\n        \\n        #now allot money to children\\n        i=0\\n        while money!=0: #run till money becomes 0\\n            l[i]+=1 #give money\\n            money-=1 #decrease money\\n            if l[i]==8: #try to give 8 as many as possible, when somebody got 8 move forward\\n                i+=1 #increase index\\n            if i==children: #start from 0 index if money still remains\\n                i=0\\n                \\n        eight=0 #total eights\\n        c=0 #total fours\\n        \\n        for j in l: #check for 8 and 4 in array l\\n            if j==4:\\n                c+=1\\n            if j==8:\\n                eight+=1\\n                \\n        # if no 8 then there is no possible solution made to distribute money       \\n        if eight==0:\\n            return 0\\n        \\n        # if l=[8,8,4] type of condition occurs then try to remove 4 from aaray\\n        if c==1 and eight==children-1:\\n            return eight-1\\n        \\n        # if l=[8,4,1] type of condition occurs then return total 8\\n        if c>0 and eight>0:\\n            return eight\\n\\t\\treturn eight\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312299,
                "title": "c-ez-math-solution-observation",
                "content": "Just based on simple observation. \\nAfter many attempts I was able to get this right.\\nThis took me much more time to solve compared to the other 2 problems of Biweekly Contest 100.\\n\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) //When No Solution\\n            return -1;\\n        int ans=0;\\n        for(int i=1;i<=children;i++){\\n            int cur=i*8,other=money-cur;\\n            //We should not give $4 and checking whether the money remaining can be given to remaining children\\n            if(other<(children-i)||(other==4&&(children-i)==1)) \\n                break;\\n            if(other>0&&i==children) \\n                break;\\n           ans=i;            \\n        }\\n        return ans;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) //When No Solution\\n            return -1;\\n        int ans=0;\\n        for(int i=1;i<=children;i++){\\n            int cur=i*8,other=money-cur;\\n            //We should not give $4 and checking whether the money remaining can be given to remaining children\\n            if(other<(children-i)||(other==4&&(children-i)==1)) \\n                break;\\n            if(other>0&&i==children) \\n                break;\\n           ans=i;            \\n        }\\n        return ans;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312213,
                "title": "math-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int distMoney(int k, int n) {\\n        if(k<n||(n==1&&k==4))return -1;\\n        if(k==n*8)return n;\\n        if(k>n*8)return n-1;\\n        if(k<=n+6){\\n            return 0;\\n        }\\n        int x = 0,y=0;\\n        while(n){\\n            cout<<k<<\" \";\\n            if(k>=n+7){\\n                k -= 8;\\n                x++;\\n            }\\n            else{\\n                k--;\\n                y++;\\n            }\\n            n--;\\n        }\\n        cout<<k<<\" \";\\n        if(k==3&&y==1)x -= 1;\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int k, int n) {\\n        if(k<n||(n==1&&k==4))return -1;\\n        if(k==n*8)return n;\\n        if(k>n*8)return n-1;\\n        if(k<=n+6){\\n            return 0;\\n        }\\n        int x = 0,y=0;\\n        while(n){\\n            cout<<k<<\" \";\\n            if(k>=n+7){\\n                k -= 8;\\n                x++;\\n            }\\n            else{\\n                k--;\\n                y++;\\n            }\\n            n--;\\n        }\\n        cout<<k<<\" \";\\n        if(k==3&&y==1)x -= 1;\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3312138,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int c) {\\n        if(c==1 && m==4){return -1;}\\n        if(c>m){return -1;}\\n        if(m<8){return 0;}\\n        int n=m/8, rem=m%8, t=n+rem, l=c-n;\\n        if(t==c && rem==0){\\n            return c;\\n        }\\n        if(n>=c){\\n            return c-1;\\n        }\\n        if(c-n==1 && rem==4){\\n            return c-2;\\n        }\\n        if(rem>=c-n){\\n            return n;\\n        }\\n        while(rem<l){\\n            l++;\\n            rem+=8;\\n            n--;\\n        }\\n        // else if(t>c){\\n        //     if(t-rem<c){\\n        //         int cnt=t-c+1;\\n        //         if(cnt==4){\\n        //             if(cnt==rem){ans--;}\\n        //         }\\n        //         return ans;\\n        //     }\\n        //     else if(t-rem==c){\\n        //         ans--;\\n        //         return ans;\\n        //     }\\n        //     else{\\n        //         int cnt=c-t;\\n        //         ans-=cnt;\\n        //         if(ans<0){return 0;}\\n        //         return ans;\\n        //     }\\n        // }\\n        // else if(t<c){\\n        //     int cnt=(c-t+7)/8;\\n        //     ans-=cnt;\\n        //     if(ans<0){return 0;}\\n        //     return ans;\\n        // }\\n        return n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int c) {\\n        if(c==1 && m==4){return -1;}\\n        if(c>m){return -1;}\\n        if(m<8){return 0;}\\n        int n=m/8, rem=m%8, t=n+rem, l=c-n;\\n        if(t==c && rem==0){\\n            return c;\\n        }\\n        if(n>=c){\\n            return c-1;\\n        }\\n        if(c-n==1 && rem==4){\\n            return c-2;\\n        }\\n        if(rem>=c-n){\\n            return n;\\n        }\\n        while(rem<l){\\n            l++;\\n            rem+=8;\\n            n--;\\n        }\\n        // else if(t>c){\\n        //     if(t-rem<c){\\n        //         int cnt=t-c+1;\\n        //         if(cnt==4){\\n        //             if(cnt==rem){ans--;}\\n        //         }\\n        //         return ans;\\n        //     }\\n        //     else if(t-rem==c){\\n        //         ans--;\\n        //         return ans;\\n        //     }\\n        //     else{\\n        //         int cnt=c-t;\\n        //         ans-=cnt;\\n        //         if(ans<0){return 0;}\\n        //         return ans;\\n        //     }\\n        // }\\n        // else if(t<c){\\n        //     int cnt=(c-t+7)/8;\\n        //     ans-=cnt;\\n        //     if(ans<0){return 0;}\\n        //     return ans;\\n        // }\\n        return n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312098,
                "title": "c-solution-t-c-o-1",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        \\n        money -= children; //Distributing one coin to each children\\n        int ans = money/7; // only 7 coins left to make it 8 hence divide to by 7 to get the number of children with 8 coins\\n\\n        // If number of children with 8 coins i.e ans is more than the given children then we can simply give all the remaining coins to one child and rest will have 8 coins hence returning children - 1;\\n        if(ans > children) return children - 1;\\n        \\n        int remaning = money%7;\\n        children -= ans;\\n        if((remaning > 0 && children == 0) || \\n            (remaning == 3 && children == 1)) return ans - 1;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        \\n        money -= children; //Distributing one coin to each children\\n        int ans = money/7; // only 7 coins left to make it 8 hence divide to by 7 to get the number of children with 8 coins\\n\\n        // If number of children with 8 coins i.e ans is more than the given children then we can simply give all the remaining coins to one child and rest will have 8 coins hence returning children - 1;\\n        if(ans > children) return children - 1;\\n        \\n        int remaning = money%7;\\n        children -= ans;\\n        if((remaning > 0 && children == 0) || \\n            (remaning == 3 && children == 1)) return ans - 1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312066,
                "title": "brute-force-number-of-children",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n        money -= children\\n        res = 0\\n        for i in range(1, children + 1):\\n            rem = money - i * 7\\n            remchildren = children - i\\n            if rem > 0 and remchildren == 0:\\n                continue\\n            if rem >= 0 and (rem != 3 or remchildren != 1):\\n                res = i\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n        money -= children\\n        res = 0\\n        for i in range(1, children + 1):\\n            rem = money - i * 7\\n            remchildren = children - i\\n            if rem > 0 and remchildren == 0:\\n                continue\\n            if rem >= 0 and (rem != 3 or remchildren != 1):\\n                res = i\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312036,
                "title": "java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int n) {\\n        if(money < n){\\n            return -1;\\n        }\\n        if(money == n){\\n            return 0;\\n        }\\n        for(int i = n ; i > 0; i--){\\n            int a = i * 8;\\n            if(a <= money){\\n                int r = money - a;\\n                int c = n - i;\\n                if(r < c){\\n                    continue;\\n                }\\n                \\n                if(c == 1 && r == 4){\\n                    return i - 1;\\n                }\\n                if(c == 0 && r > 0){\\n                    return i - 1;\\n                }\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int n) {\\n        if(money < n){\\n            return -1;\\n        }\\n        if(money == n){\\n            return 0;\\n        }\\n        for(int i = n ; i > 0; i--){\\n            int a = i * 8;\\n            if(a <= money){\\n                int r = money - a;\\n                int c = n - i;\\n                if(r < c){\\n                    continue;\\n                }\\n                \\n                if(c == 1 && r == 4){\\n                    return i - 1;\\n                }\\n                if(c == 0 && r > 0){\\n                    return i - 1;\\n                }\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312017,
                "title": "simple-java-solution-100",
                "content": "# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        int counter = 0;\\n        money = money - children;\\n        \\n        if (money < 7) return 0;\\n        \\n        while (children > 0) {\\n            if (children == 1 && money == 3) {\\n                money = money - 3;\\n                counter--;\\n            }\\n            else if (money - 7 >= 0) {\\n                money = money - 7;\\n                counter++;\\n            }\\n            else {\\n                break;\\n            }\\n            children--;\\n        }\\n        if (children == 0 && money > 0) return counter - 1;\\n        return counter;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        int counter = 0;\\n        money = money - children;\\n        \\n        if (money < 7) return 0;\\n        \\n        while (children > 0) {\\n            if (children == 1 && money == 3) {\\n                money = money - 3;\\n                counter--;\\n            }\\n            else if (money - 7 >= 0) {\\n                money = money - 7;\\n                counter++;\\n            }\\n            else {\\n                break;\\n            }\\n            children--;\\n        }\\n        if (children == 0 && money > 0) return counter - 1;\\n        return counter;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3312014,
                "title": "simple-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        if(money<8) return 0;\\n        money-=children;\\n        int count=0;\\n        while(true)\\n        {\\n            if(!children)\\n            {\\n                if(!money)return count;\\n                return count-1;\\n            }\\n            if(children!=0 && money>=7)\\n            {\\n                if((money-7)!=3)\\n                {\\n                    children--;\\n                    money-=7;\\n                    count++;\\n                }\\n                else if((money-7)==3 && children>2)\\n                {\\n                    children--;\\n                    money-=7;\\n                    count++;\\n                }\\n                else\\n                {\\n                    return count;\\n                }\\n            }\\n            else\\n            {\\n                return count;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        if(money<8) return 0;\\n        money-=children;\\n        int count=0;\\n        while(true)\\n        {\\n            if(!children)\\n            {\\n                if(!money)return count;\\n                return count-1;\\n            }\\n            if(children!=0 && money>=7)\\n            {\\n                if((money-7)!=3)\\n                {\\n                    children--;\\n                    money-=7;\\n                    count++;\\n                }\\n                else if((money-7)==3 && children>2)\\n                {\\n                    children--;\\n                    money-=7;\\n                    count++;\\n                }\\n                else\\n                {\\n                    return count;\\n                }\\n            }\\n            else\\n            {\\n                return count;\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4100287,
                "title": "2023-09-28-third",
                "content": "# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ans = (money - children) // 7\\n        if children * 8 < money and ans >= children:\\n            ans = children - 1\\n        elif (money - children) % 7 == 3 and children - ans <= 1:\\n            ans -= 1\\n        if ans < 0 or money < children:\\n            ans = -1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        ans = (money - children) // 7\\n        if children * 8 < money and ans >= children:\\n            ans = children - 1\\n        elif (money - children) % 7 == 3 and children - ans <= 1:\\n            ans -= 1\\n        if ans < 0 or money < children:\\n            ans = -1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091853,
                "title": "distribute-money-to-maximum-children",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n  if (money < children) return -1;\\n  let start = money;\\n  let remain = children;\\n  let part = 0;\\n  let flag = false;\\n\\n  do {\\n    start -= 8;\\n    part++;\\n    remain--;\\n    if (start < remain) break;\\n    if (remain === 0) break;\\n  } while (start >= 8);\\n\\n  if (start === 4 && remain === 1 || start < remain) flag = true;\\n  if (remain === 0 && start > 0) flag = true;\\n  if (flag) part--;\\n  return part;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n  if (money < children) return -1;\\n  let start = money;\\n  let remain = children;\\n  let part = 0;\\n  let flag = false;\\n\\n  do {\\n    start -= 8;\\n    part++;\\n    remain--;\\n    if (start < remain) break;\\n    if (remain === 0) break;\\n  } while (start >= 8);\\n\\n  if (start === 4 && remain === 1 || start < remain) flag = true;\\n  if (remain === 0 && start > 0) flag = true;\\n  if (flag) part--;\\n  return part;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073577,
                "title": "java-logic-stack",
                "content": "# Intuition\\nWe have solved it by using basic concept of stack\\n\\n# Approach\\nHere we have used basic logic, firstly we will distribute the 1$ to each and the store the money remaining in variable rm.\\nHere we have used basic concept of stack. Defined two related variables max as number of children and top as -1. And then run a while loop which will run while rm>=7 and if top == max it will get break. \\nThen we are increasing top by 1, because we are counting it from 0 and comparing it further with max which is counted from 1 hence.\\nThen going through several if condition we will find a correct solution.\\n\\n# Complexity\\n- Time complexity:\\nO(rm/7)\\nBeats: 85.39%\\n\\n- Space complexity:\\nO(1)\\nBeats: 100%\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int top = -1;\\n        int max = children;\\n\\n        if(money<children){\\n            return -1;\\n        }\\n\\n        int rm = money-children;\\n\\n        while(rm>=7){\\n            top++;\\n            if(top== max){\\n                top--;\\n                break;\\n            }\\n            rm -=7;\\n        }\\n        top++;\\n        if(top == max-1 && rm!=3){\\n            return top;\\n        }else if(top == max-1 && rm==3){\\n            return top-1;\\n        }\\n\\n        if(top == max && rm== 0){\\n            return top;\\n        }else if (top == max && rm != 0){\\n            return top-1;\\n        }\\n\\n        if(top<max){\\n            return top;\\n        }\\n\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int top = -1;\\n        int max = children;\\n\\n        if(money<children){\\n            return -1;\\n        }\\n\\n        int rm = money-children;\\n\\n        while(rm>=7){\\n            top++;\\n            if(top== max){\\n                top--;\\n                break;\\n            }\\n            rm -=7;\\n        }\\n        top++;\\n        if(top == max-1 && rm!=3){\\n            return top;\\n        }else if(top == max-1 && rm==3){\\n            return top-1;\\n        }\\n\\n        if(top == max && rm== 0){\\n            return top;\\n        }else if (top == max && rm != 0){\\n            return top-1;\\n        }\\n\\n        if(top<max){\\n            return top;\\n        }\\n\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073262,
                "title": "o-1-o-0-solution",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(0)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n        if (money < 0) {\\n            return -1;\\n        } else if (money < 7) {\\n            return 0;\\n        } else {\\n            return Math.min(money / 7, children) + ((money > children * 7) || (money % 7 == 3 && money == children * 7 - 4)? - 1: 0);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children;\\n        if (money < 0) {\\n            return -1;\\n        } else if (money < 7) {\\n            return 0;\\n        } else {\\n            return Math.min(money / 7, children) + ((money > children * 7) || (money % 7 == 3 && money == children * 7 - 4)? - 1: 0);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066412,
                "title": "the-fastest-and-easiest-solution-with-video-explanation",
                "content": "# Intuition\\nhttps://www.youtube.com/watch?v=GPVee_ReBqs \\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n       int amountOfSeven=0;\\n       int remainder=0;\\n       if (children>money) {\\n           return -1;\\n       }\\n       money=money-children;\\n       amountOfSeven=money/7;\\n       remainder=money%7;\\n       if (amountOfSeven==children-1&&remainder==3) {\\n           return amountOfSeven-1;\\n\\n       } else if (amountOfSeven==children&&remainder>0) {\\n           return amountOfSeven-1;\\n       } else if (amountOfSeven>children) {\\n           return children-1;\\n       }\\n       return amountOfSeven;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n       int amountOfSeven=0;\\n       int remainder=0;\\n       if (children>money) {\\n           return -1;\\n       }\\n       money=money-children;\\n       amountOfSeven=money/7;\\n       remainder=money%7;\\n       if (amountOfSeven==children-1&&remainder==3) {\\n           return amountOfSeven-1;\\n\\n       } else if (amountOfSeven==children&&remainder>0) {\\n           return amountOfSeven-1;\\n       } else if (amountOfSeven>children) {\\n           return children-1;\\n       }\\n       return amountOfSeven;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058301,
                "title": "python-all-money-back-me-home",
                "content": "![maxresdefault.jpg](https://assets.leetcode.com/users/images/442daeb3-b0fb-462b-bb37-ec1bbe665790_1695012854.1111662.jpeg)\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n        else:\\n            Output = 0\\n\\n            while children > 2 and money >= 10 and money - 8 >= children - 1:\\n                money = money - 8\\n                Output = Output + 1\\n                children = children - 1\\n            \\n            if children == 2:\\n                if money == 16:\\n                    Output = Output + 2\\n                elif money == 12:\\n                    pass\\n                else:\\n                    if money >= 9:\\n                        Output = Output + 1\\n                    elif money <= 8:\\n                        pass\\n\\n            return Output\\n\\n        # 20230918\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n        else:\\n            Output = 0\\n\\n            while children > 2 and money >= 10 and money - 8 >= children - 1:\\n                money = money - 8\\n                Output = Output + 1\\n                children = children - 1\\n            \\n            if children == 2:\\n                if money == 16:\\n                    Output = Output + 2\\n                elif money == 12:\\n                    pass\\n                else:\\n                    if money >= 9:\\n                        Output = Output + 1\\n                    elif money <= 8:\\n                        pass\\n\\n            return Output\\n\\n        # 20230918\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049489,
                "title": "o-1-javascript-typescript-solution-beats-100",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst distMoney = (money: number, children: number): number => {\\n  if (money < children) return -1;\\n  let moneyLeft = money - children;\\n  let kidsWith8 = Math.min(children, Math.floor(moneyLeft / 7));\\n  moneyLeft -= kidsWith8 * 7;\\n  if (\\n    (kidsWith8 === children - 1 && moneyLeft === 3) ||\\n    (kidsWith8 === children && moneyLeft)\\n  ) {\\n    kidsWith8--;\\n  }\\n  return kidsWith8;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Math"
                ],
                "code": "```\\nconst distMoney = (money: number, children: number): number => {\\n  if (money < children) return -1;\\n  let moneyLeft = money - children;\\n  let kidsWith8 = Math.min(children, Math.floor(moneyLeft / 7));\\n  moneyLeft -= kidsWith8 * 7;\\n  if (\\n    (kidsWith8 === children - 1 && moneyLeft === 3) ||\\n    (kidsWith8 === children && moneyLeft)\\n  ) {\\n    kidsWith8--;\\n  }\\n  return kidsWith8;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036967,
                "title": "basic-java-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int c=0;\\n        while(money>=8&&money>children&&children>0){\\n            money-=8;\\n            children--;\\n            c++;\\n        }\\n        if((money>0&&children==0)||(money==4&&children==1)||money<children)\\n            c--;\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int c=0;\\n        while(money>=8&&money>children&&children>0){\\n            money-=8;\\n            children--;\\n            c++;\\n        }\\n        if((money>0&&children==0)||(money==4&&children==1)||money<children)\\n            c--;\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034583,
                "title": "simple-cpp-solution-that-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children>money)\\n            return -1;\\n        money-=children;\\n        if(money<=6)\\n            return 0;\\n        int ans = money/7;\\n        if(ans>=children)\\n            ans = children;\\n\\n        if(money%7==3 && children-ans==1)\\n            return ans-1;\\n        else if(money/7>children && ans==children)\\n            return ans-1;\\n        else if(money%7>0 && ans==children)\\n            return ans-1;\\n        else\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children>money)\\n            return -1;\\n        money-=children;\\n        if(money<=6)\\n            return 0;\\n        int ans = money/7;\\n        if(ans>=children)\\n            ans = children;\\n\\n        if(money%7==3 && children-ans==1)\\n            return ans-1;\\n        else if(money/7>children && ans==children)\\n            return ans-1;\\n        else if(money%7>0 && ans==children)\\n            return ans-1;\\n        else\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023297,
                "title": "easy-2ms-solution-beats-88-simple-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(children)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int count=0;\\n\\n        if(money<children){\\n            return -1;\\n        }\\n\\n        if(money-8<children-1){\\n            return 0;\\n        }\\n\\n        while(money>0 && children>0){\\n            if(money==4 && children==1){\\n                count--;\\n                break;\\n            }\\n\\n            if(money<children){\\n                count--;\\n                break;\\n            }\\n\\n            if(money-8>=children-1){\\n            money-=8;\\n            children-=1;\\n            count++;\\n            }\\n            else{\\n                break;\\n            }\\n\\n        }\\n\\n        if(money>0 && children==0){\\n            count--;\\n            return count;\\n        }\\n\\n        return count;\\n\\n        \\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int count=0;\\n\\n        if(money<children){\\n            return -1;\\n        }\\n\\n        if(money-8<children-1){\\n            return 0;\\n        }\\n\\n        while(money>0 && children>0){\\n            if(money==4 && children==1){\\n                count--;\\n                break;\\n            }\\n\\n            if(money<children){\\n                count--;\\n                break;\\n            }\\n\\n            if(money-8>=children-1){\\n            money-=8;\\n            children-=1;\\n            count++;\\n            }\\n            else{\\n                break;\\n            }\\n\\n        }\\n\\n        if(money>0 && children==0){\\n            count--;\\n            return count;\\n        }\\n\\n        return count;\\n\\n        \\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017949,
                "title": "python-solution",
                "content": "# Intuition\\n- Give everyone 1 dollar\\n- Do the casework starting by the maximum result and decreasing to 0\\n\\n# Complexity\\n- Time complexity:\\n$O(money)$\\n\\n# Code\\n```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        \"\"\"\\n        :type money: int\\n        :type children: int\\n        :rtype: int\\n        \"\"\"\\n        # everyone gets 1 dollar\\n        if money < children:\\n            return -1\\n        remaining = money-children\\n\\n        # receiving 8 dollars\\n        potential = remaining // 7\\n        potential = children if children < potential else potential\\n\\n        while potential >= 0:\\n            remaining = money-children\\n            remaining -= potential*7\\n            # children other than the ones getting 8 dollars\\n            others = children - potential\\n            if (remaining == 3 and others > 1) or (remaining == 0) or (remaining > 0 and others > 0 and remaining != 3):\\n                return potential\\n            else:\\n                potential -= 1\\n        \\n        return -1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        \"\"\"\\n        :type money: int\\n        :type children: int\\n        :rtype: int\\n        \"\"\"\\n        # everyone gets 1 dollar\\n        if money < children:\\n            return -1\\n        remaining = money-children\\n\\n        # receiving 8 dollars\\n        potential = remaining // 7\\n        potential = children if children < potential else potential\\n\\n        while potential >= 0:\\n            remaining = money-children\\n            remaining -= potential*7\\n            # children other than the ones getting 8 dollars\\n            others = children - potential\\n            if (remaining == 3 and others > 1) or (remaining == 0) or (remaining > 0 and others > 0 and remaining != 3):\\n                return potential\\n            else:\\n                potential -= 1\\n        \\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015926,
                "title": "easy-to-understand-o-1-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money = money - children;\\n        // transform problem into money to children but\\n        // allows $0, and don\\'t allow $3, and to maximize # of $7s\\n        if(money == children * 7) return children;\\n        if(money > children * 7) return children - 1;\\n        // moeny < children * 7\\n\\n        int num = money / 7;\\n        int residual = money % 7;\\n        if(children - num == 1 && residual == 3)\\n            return num - 1;\\n        return num;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children) return -1;\\n        money = money - children;\\n        // transform problem into money to children but\\n        // allows $0, and don\\'t allow $3, and to maximize # of $7s\\n        if(money == children * 7) return children;\\n        if(money > children * 7) return children - 1;\\n        // moeny < children * 7\\n\\n        int num = money / 7;\\n        int residual = money % 7;\\n        if(children - num == 1 && residual == 3)\\n            return num - 1;\\n        return num;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991994,
                "title": "o-1-java-easiest-solution-with-plenty-of-comments",
                "content": "# Intuition\\nReally don\\'t think code needs further explanation, added plenty of comments. There shouldn\\'t be a loop for this type of question. O(1) will be expected. Using loop will be considered brute force.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(1) \\n\\n- Space complexity:\\nO(1) \\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children) return -1; // only possibility to fail\\n        if(money > children * 8) return children - 1; // too much money\\n        money -= children; // one dollar each\\n        int res = money / 7;\\n        if(children - res == 1 && money % 7 == 3) res--; // only kid who doesn\\'t have 8 dollars end up with 4, and we have to rebalance another kid\\'s money to him.\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money < children) return -1; // only possibility to fail\\n        if(money > children * 8) return children - 1; // too much money\\n        money -= children; // one dollar each\\n        int res = money / 7;\\n        if(children - res == 1 && money % 7 == 3) res--; // only kid who doesn\\'t have 8 dollars end up with 4, and we have to rebalance another kid\\'s money to him.\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982297,
                "title": "explained-two-edge-cases-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDistribute $$1$$ money to all the children once, if not possible then return $$-1$$\\nThen we want to distribute the $$7$$ money to the children to make it $$8$$. The end goal is to distribute maximum number of $$8$$ money.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStart distributing the money and check the index till which we can distribute 7 money. if money becomes less than 7 then break so that we get the children till which we can distribute. \\n\\nNow Two Edge Cases:\\n1. What is while distributing we have more money than 7 left with us with last children. Since we have counted this also in our loop we need to subract 1 from count. eg ***money = 17 and children 2 ***\\n2. The last children is distributed 3 money which is invalid. so reduce the count. Also note the last children can have 4 money accoring to the algorithm rest can be redistributed. eg ***money = 20 and children 3***\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(N)$$ simple iteration.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$ Constatnt space needed.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        for(int i =0;i<children;i++){\\n            money--;\\n        }\\n        int count = 0;\\n        int i;\\n        for( i =0;i<children;i++){\\n            if(money>=7){\\n                money-=7;\\n            }\\n            else break;\\n        }\\n        if(i==children && money!=0) return count-1;\\n        if(children -i ==1 && money == 3) return count-1;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        for(int i =0;i<children;i++){\\n            money--;\\n        }\\n        int count = 0;\\n        int i;\\n        for( i =0;i<children;i++){\\n            if(money>=7){\\n                money-=7;\\n            }\\n            else break;\\n        }\\n        if(i==children && money!=0) return count-1;\\n        if(children -i ==1 && money == 3) return count-1;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982206,
                "title": "bilkul-easy-h-bhai-easy-c-solution-haan-bhai-bharosa-rakh",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        \\n        if(money < children) return -1;\\n        money = money - children;\\n        int req = children*7;\\n        if(money == req) return children;\\n        if(money > req)\\n        {\\n            return children-1;\\n        }\\n        else\\n        {\\n            int temp = money/7;\\n            int temp2 = money%7;\\n\\n            if(temp2 == 3) \\n            {\\n                if(children-temp > 1) return temp;\\n                else return temp-1;\\n            }\\n            else return temp;\\n        }\\n        \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        \\n        if(money < children) return -1;\\n        money = money - children;\\n        int req = children*7;\\n        if(money == req) return children;\\n        if(money > req)\\n        {\\n            return children-1;\\n        }\\n        else\\n        {\\n            int temp = money/7;\\n            int temp2 = money%7;\\n\\n            if(temp2 == 3) \\n            {\\n                if(children-temp > 1) return temp;\\n                else return temp-1;\\n            }\\n            else return temp;\\n        }\\n        \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979946,
                "title": "2591",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ndon\\'t do what I did\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ntbd\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        \"\"\"\\n        :type money: int\\n        :type children: int\\n        :rtype: int\\n        \"\"\"\\n        # runtime: O(n)\\n        # space complexity: O(1)\\n\\n        maximum = 0\\n\\n        while money > children and money > 8 and not (money == 12 and children == 2) and (money - 8) >= (children - 1) and children != 1:\\n            children-=1\\n            money-=8\\n            maximum+=1\\n        \\n        \\n        if children > money:\\n            return -1\\n        \\n        elif children == 1 and money == 8:\\n            maximum+=1\\n            return maximum\\n        else:\\n            return maximum\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        \"\"\"\\n        :type money: int\\n        :type children: int\\n        :rtype: int\\n        \"\"\"\\n        # runtime: O(n)\\n        # space complexity: O(1)\\n\\n        maximum = 0\\n\\n        while money > children and money > 8 and not (money == 12 and children == 2) and (money - 8) >= (children - 1) and children != 1:\\n            children-=1\\n            money-=8\\n            maximum+=1\\n        \\n        \\n        if children > money:\\n            return -1\\n        \\n        elif children == 1 and money == 8:\\n            maximum+=1\\n            return maximum\\n        else:\\n            return maximum\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968528,
                "title": "maximizing-the-8-distribution-to-kids",
                "content": "# Intuition\\n<!-- The code aims to distribute a given amount of money among children, following certain rules. The primary objective is to give as many children as possible an exact amount of $8 while ensuring:\\nEvery child gets at least $1.\\nNo child receives exactly $4.\\nThe approach is as follows:\\nDetermine the Maximum Potential: Calculate the maximum number of children who could receive $8 based on the available money.\\nIterative Checking: For each potential count (starting from the maximum), we compute the leftover amount after giving $8 to that many kids.\\nConditions Verification: We then verify if the remaining money can be distributed to the remaining kids without breaking the rules.\\nReturn Result: The moment we find a valid distribution, we return the number of children who got $8. If no valid distributions are found, we return -1. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int maxEightDollars = Math.min((money - children) / 7, children);\\n        \\n        for (int hk = maxEightDollars; hk >= 0; hk--) {\\n            int rem = money - children - hk * 7;\\n            int remainingChildren = children - hk;\\n            \\n            if (remainingChildren == 0 && rem == 0) {\\n                return hk;\\n            } else if (remainingChildren == 1) {\\n                if (rem != 3) { \\n                    return hk;\\n                }\\n            } else if (remainingChildren > 1 && rem >= 0) {\\n                return hk;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int maxEightDollars = Math.min((money - children) / 7, children);\\n        \\n        for (int hk = maxEightDollars; hk >= 0; hk--) {\\n            int rem = money - children - hk * 7;\\n            int remainingChildren = children - hk;\\n            \\n            if (remainingChildren == 0 && rem == 0) {\\n                return hk;\\n            } else if (remainingChildren == 1) {\\n                if (rem != 3) { \\n                    return hk;\\n                }\\n            } else if (remainingChildren > 1 && rem >= 0) {\\n                return hk;\\n            }\\n        }\\n        \\n        return -1;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954867,
                "title": "normal-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhile money are greater than the number of children plus 7, I can assign 8 money, increment the result by 1 and decrementing the money by 8. \\nAfter checking some condition i eventually decrement the result according to the problem request.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n\\n        if(money < children) return -1;\\n\\n        int res = 0;\\n\\n        while(money >= 7 + children && children > 0){\\n            res++;\\n            money -= 8;\\n            children--;\\n        }\\n\\n        if(money == 4 && res > 0 && children == 1 || money > 0 && children == 0) res--;\\n\\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n\\n        if(money < children) return -1;\\n\\n        int res = 0;\\n\\n        while(money >= 7 + children && children > 0){\\n            res++;\\n            money -= 8;\\n            children--;\\n        }\\n\\n        if(money == 4 && res > 0 && children == 1 || money > 0 && children == 0) res--;\\n\\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954831,
                "title": "distribute-money-equally-among-children-java-time-complexity-o-1-solution",
                "content": "**Please Upvote!!**\\n\\n# Approach\\nThe solution first subtracts the number of children from the total amount of money. If the resulting money is negative, it returns -1 as it\\'s not possible to distribute the money. The function then calculates the remainder of dividing the remaining money by 7 and the division result.\\n\\nThree cases are considered for returning the result:\\n\\nIf the division result equals the number of children and the remainder is 0, it means each child will receive an equal amount, so the function returns the division result.\\nIf the division result is one less than the number of children and the remainder is 3, it indicates that one child will receive 3 extra units. In this case, the function returns the division result minus 1.\\nIf none of the above cases match, the function returns the minimum of children - 1 and the division result.\\nThis solution is designed to ensure fair distribution of money among the children according to the specified conditions.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children; // Distribute equally among children, subtracting the number of children\\n        if (money < 0) {\\n            return -1; // Not enough money for each child\\n        }\\n        \\n        int rem = money % 7; // Calculate the remaining money after distributing in multiples of 7\\n        int div = money / 7; // Calculate the quotient (number of groups of 7)\\n        \\n        // Check for conditions where distribution is possible\\n        if (div == children && rem == 0) {\\n            return div; // Money can be equally distributed among children\\n        }\\n        if (div == children - 1 && rem == 3) {\\n            return div - 1; // Distribute to all but one child, with 3 extra money\\n        }\\n        \\n        // Return the minimum of distributing among all but one child or dividing into groups of 7\\n        return Math.min(children - 1, div);\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        money -= children; // Distribute equally among children, subtracting the number of children\\n        if (money < 0) {\\n            return -1; // Not enough money for each child\\n        }\\n        \\n        int rem = money % 7; // Calculate the remaining money after distributing in multiples of 7\\n        int div = money / 7; // Calculate the quotient (number of groups of 7)\\n        \\n        // Check for conditions where distribution is possible\\n        if (div == children && rem == 0) {\\n            return div; // Money can be equally distributed among children\\n        }\\n        if (div == children - 1 && rem == 3) {\\n            return div - 1; // Distribute to all but one child, with 3 extra money\\n        }\\n        \\n        // Return the minimum of distributing among all but one child or dividing into groups of 7\\n        return Math.min(children - 1, div);\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950905,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children>money){\\n            return -1;\\n        }\\n        int count=0;\\n        while(money>=0){\\n            if(money>8 && children==1){\\n                return count;\\n            }\\n            if(money>=0){\\n\\n             money = money - 8;\\n            }\\n             children--;\\n             if(money<children || (money==4 && children==1)){\\n                 return count;\\n             }\\n\\n\\n             count++;\\n             \\n\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(children>money){\\n            return -1;\\n        }\\n        int count=0;\\n        while(money>=0){\\n            if(money>8 && children==1){\\n                return count;\\n            }\\n            if(money>=0){\\n\\n             money = money - 8;\\n            }\\n             children--;\\n             if(money<children || (money==4 && children==1)){\\n                 return count;\\n             }\\n\\n\\n             count++;\\n             \\n\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949954,
                "title": "easy-to-understand-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe number of the children is small, we can enumerate the number of children that can receive exactly 8 dollars and check if is valid.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIterate from i = children to 0, we distribute exact 8 dollars to these children\\nNow we have \\nthe amount of money that have not been delivered yet (money = money - i * 8)\\nThe amount of children who haven\\'t received any money (children = children - i)\\nIf money >= children and none of the following condition is satisfied, this is a valid distribution:\\n1. children == 0 && money > 0\\n2. money == 4 && children == 1 (this is the only case where the child must receive 4 dollars)\\n# Complexity\\n- Time complexity: O(children)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        \\n        for (int i = children; i >= 0; --i) {\\n            int tmp = money;\\n            tmp -= 8 * i;\\n            if (i == children && tmp > 0)\\n                continue;\\n            if (tmp >= children - i && !(tmp == 4 && children - i == 1))\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        \\n        for (int i = children; i >= 0; --i) {\\n            int tmp = money;\\n            tmp -= 8 * i;\\n            if (i == children && tmp > 0)\\n                continue;\\n            if (tmp >= children - i && !(tmp == 4 && children - i == 1))\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942856,
                "title": "a-solution-for-this-piece-of-pain-beats-99-20",
                "content": "# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n\\n        money -= children\\n        result = min(children, money // 7)\\n        money -= result * 7\\n        return result - (\\n            (money == 3 and children - result == 1) or \\n            (result == children and money != 0))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:\\n            return -1\\n\\n        money -= children\\n        result = min(children, money // 7)\\n        money -= result * 7\\n        return result - (\\n            (money == 3 and children - result == 1) or \\n            (result == children and money != 0))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942401,
                "title": "cpp-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       vector<int> pre(children,0);\\n        if(money==4 && children==1) return -1;\\n        for(int i=0;i<children;i++)\\n        {\\n            pre[i]++;\\n            money--;\\n        }\\n        if(money<0) return -1;\\n        int ans=0;\\n        int n=children;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(money>=7)\\n            {\\n                pre[i]+=7;\\n                money-=7;\\n                ans++;\\n            }\\n            else if(money>0)\\n            {\\n                pre[i]+=money;\\n                money=0;\\n            }\\n            if(i==n-1)\\n            {\\n               if(pre[i]==8)\\n               {\\n                   if(money>0)\\n                   {\\n                       return ans-1;\\n                   }\\n                   if(money==0) return ans;\\n               }\\n                else if(pre[i]<8)\\n                {\\n                    if(pre[i]==4)\\n                    {\\n                        if(i>=1)\\n                        {\\n                            return ans-1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       vector<int> pre(children,0);\\n        if(money==4 && children==1) return -1;\\n        for(int i=0;i<children;i++)\\n        {\\n            pre[i]++;\\n            money--;\\n        }\\n        if(money<0) return -1;\\n        int ans=0;\\n        int n=children;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(money>=7)\\n            {\\n                pre[i]+=7;\\n                money-=7;\\n                ans++;\\n            }\\n            else if(money>0)\\n            {\\n                pre[i]+=money;\\n                money=0;\\n            }\\n            if(i==n-1)\\n            {\\n               if(pre[i]==8)\\n               {\\n                   if(money>0)\\n                   {\\n                       return ans-1;\\n                   }\\n                   if(money==0) return ans;\\n               }\\n                else if(pre[i]<8)\\n                {\\n                    if(pre[i]==4)\\n                    {\\n                        if(i>=1)\\n                        {\\n                            return ans-1;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941200,
                "title": "strong-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(money);\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        //if(money>children*8) return -1;\\n        int count=0;\\n        while(money-8>=children-1 && (children>0)){\\n            money-=8;\\n            children--;\\n            count++;\\n        }\\n\\n        if((children==1 && money==4) || (money>0 && children<=0)) count--;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        //if(money>children*8) return -1;\\n        int count=0;\\n        while(money-8>=children-1 && (children>0)){\\n            money-=8;\\n            children--;\\n            count++;\\n        }\\n\\n        if((children==1 && money==4) || (money>0 && children<=0)) count--;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921189,
                "title": "python-simple-readable-variable-names-for-easier-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFinding out all the children getting 8 is the goal\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI went through trial and error to find an optimal solution that satisfied all cases\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        \\n        number_of_child_getting_eight = 0\\n\\n        if money < children:\\n            return -1\\n        \\n        if money > 8:\\n            number_of_child_getting_eight = int(money/8)\\n            remaining_money = money-(number_of_child_getting_eight * 8)\\n            remaining_children = children - number_of_child_getting_eight\\n            \\n            if number_of_child_getting_eight > children:\\n                number_of_child_getting_eight = children - 1\\n\\n            if remaining_children == 0 and remaining_money != 0:\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n\\n            while (remaining_children > remaining_money):\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n                remaining_children = remaining_children + 1\\n                remaining_money = remaining_money +8\\n        \\n            if remaining_money == 4 and remaining_children == 1:\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n                remaining_children = remaining_children + 1\\n                remaining_money = remaining_money +8\\n\\n        return number_of_child_getting_eight\\n\\n        \\n\\n            \\n\\n\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        \\n        number_of_child_getting_eight = 0\\n\\n        if money < children:\\n            return -1\\n        \\n        if money > 8:\\n            number_of_child_getting_eight = int(money/8)\\n            remaining_money = money-(number_of_child_getting_eight * 8)\\n            remaining_children = children - number_of_child_getting_eight\\n            \\n            if number_of_child_getting_eight > children:\\n                number_of_child_getting_eight = children - 1\\n\\n            if remaining_children == 0 and remaining_money != 0:\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n\\n            while (remaining_children > remaining_money):\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n                remaining_children = remaining_children + 1\\n                remaining_money = remaining_money +8\\n        \\n            if remaining_money == 4 and remaining_children == 1:\\n                number_of_child_getting_eight = number_of_child_getting_eight-1\\n                remaining_children = remaining_children + 1\\n                remaining_money = remaining_money +8\\n\\n        return number_of_child_getting_eight\\n\\n        \\n\\n            \\n\\n\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918162,
                "title": "simple-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $money\\n     * @param Integer $children\\n     * @return Integer\\n     */\\n    function distMoney($money, $children) {\\n        $min = 1;\\n        $must = 8;\\n        $deny = 4;\\n\\n        $stop = $deny - $min;\\n        $best = $must - $min;\\n\\n        if ($money - $children < 0) {\\n            return -1;\\n        }\\n\\n        $list = array_fill(0, $children, $min);\\n        $money -= $children * $min;\\n\\n        foreach ($list as $index => &$salary) {\\n            if ($money == 0) {\\n                break;\\n            }\\n\\n            $inc = min($best, $money);\\n\\n            if ($inc == $stop) {\\n                $inc--;\\n            }\\n\\n            $money -= $inc;\\n\\n            $salary += $inc;\\n        }\\n\\n        $list[0] += $money;\\n\\n        return array_count_values($list)[8] ?? 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $money\\n     * @param Integer $children\\n     * @return Integer\\n     */\\n    function distMoney($money, $children) {\\n        $min = 1;\\n        $must = 8;\\n        $deny = 4;\\n\\n        $stop = $deny - $min;\\n        $best = $must - $min;\\n\\n        if ($money - $children < 0) {\\n            return -1;\\n        }\\n\\n        $list = array_fill(0, $children, $min);\\n        $money -= $children * $min;\\n\\n        foreach ($list as $index => &$salary) {\\n            if ($money == 0) {\\n                break;\\n            }\\n\\n            $inc = min($best, $money);\\n\\n            if ($inc == $stop) {\\n                $inc--;\\n            }\\n\\n            $money -= $inc;\\n\\n            $salary += $inc;\\n        }\\n\\n        $list[0] += $money;\\n\\n        return array_count_values($list)[8] ?? 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3896775,
                "title": "java-1ms-beats-100-00",
                "content": "# Intuition & Approach\\n- first handle cases we can determine in O(1)\\n- iteratively accumulate Eighters and then handle edge cases\\n\\n# Complexity\\n- Time complexity: O(n) (since we process `money` in chunks of 7)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n\\n        // check for not enough money for every kid to get $1\\n        if (money < children) {\\n            return -1;\\n        }\\n        // check for not enough money for even a single kid to receive $8\\n        if (money < children + 7) {\\n            return 0;\\n        }\\n\\n        int numEighters = 0;  // what we\\'ll return\\n\\n        money -= children;  // start by giving each kid $1\\n        int possibleEighters = children;\\n        while (money >= 7 && possibleEighters > 0) {  // while we have kids who could be Eighters and we have enough money to make a kid one\\n            money -= 7;\\n            ++numEighters;\\n            --possibleEighters;\\n        }\\n\\n        if (money > 0 && possibleEighters == 0) {  // we have to give the leftover money to an Eighter, making them a non-Eighter\\n            --numEighters;\\n        } else if (money == 3 && possibleEighters == 1) {  // we have to give or take a dollar from an Eighter to prevent the final non-Eighter from having $4\\n            --numEighters;\\n        }\\n        // else if (money == 0 && possibleEighters == 0)  // we had exactly enough money to make all kids Eighters, so no change in `numEighters`\\n        // else  // money == 0 && possibleEighters > 0  // no more money, so the rest of the kids stay at $1, and no change in `numEighters`\\n\\n        return numEighters;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n\\n        // check for not enough money for every kid to get $1\\n        if (money < children) {\\n            return -1;\\n        }\\n        // check for not enough money for even a single kid to receive $8\\n        if (money < children + 7) {\\n            return 0;\\n        }\\n\\n        int numEighters = 0;  // what we\\'ll return\\n\\n        money -= children;  // start by giving each kid $1\\n        int possibleEighters = children;\\n        while (money >= 7 && possibleEighters > 0) {  // while we have kids who could be Eighters and we have enough money to make a kid one\\n            money -= 7;\\n            ++numEighters;\\n            --possibleEighters;\\n        }\\n\\n        if (money > 0 && possibleEighters == 0) {  // we have to give the leftover money to an Eighter, making them a non-Eighter\\n            --numEighters;\\n        } else if (money == 3 && possibleEighters == 1) {  // we have to give or take a dollar from an Eighter to prevent the final non-Eighter from having $4\\n            --numEighters;\\n        }\\n        // else if (money == 0 && possibleEighters == 0)  // we had exactly enough money to make all kids Eighters, so no change in `numEighters`\\n        // else  // money == 0 && possibleEighters > 0  // no more money, so the rest of the kids stay at $1, and no change in `numEighters`\\n\\n        return numEighters;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3878889,
                "title": "beats-97-python",
                "content": "# Intuition\\nWe first give 1 dollar to every child, then we go around and greedily give 7 more dollars until we run short.\\n\\nIf every child received 8 and we still have money left, give the rest to one child(taking that child over 8 and taking them out) and return `children - 1`; otherwise, no money is left, return `children`\\n\\nIf only 3 money is left and 1 child is left(who has 1 dollar), give more money to another recipient(taking them over 8 and taking them out), and return `recipients - 1`. How we actually distribute the 3 dollars doesn\\'t matter.\\n\\nOtherwise return `recipients` \\n\\n# Complexity\\n- Time complexity:\\nO(n) in money \\n(note that you may think using divmod will get this to O(1) but divmod does not consider that we have to stop the moment everyone got 8, and not more; i.e. 23 money and 2 children)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money - children < 7:  # after giving 1 dollar to each child, do we at least have 7 left?\\n            if money < children: # is there even enough money for every one to receive 1?\\n                return -1\\n            return 0  # no one receives 8\\n\\n        money = money - children\\n        recipients = 0\\n        while money >= 7 and recipients < children:\\n            recipients += 1\\n            money -= 7\\n\\n        if recipients == children:\\n            # give all the rest of the money to someone\\n            if money > 0:\\n                return children - 1\\n            else:\\n                return children\\n\\n        # not everyone received 7 and some money is left\\n        # the only scenario that someone will receive 4 is\\n        # if 3 money is left and 1 person is left\\n        if money == 3 and recipients == children - 1:\\n            # give the money to someone else so 4 goes away\\n            # effectively ruining one 8\\n            return recipients - 1\\n\\n        # otherwise, if two people are left, no matter the money we can side step\\n        # 4\\n        return recipients\\n        \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money - children < 7:  # after giving 1 dollar to each child, do we at least have 7 left?\\n            if money < children: # is there even enough money for every one to receive 1?\\n                return -1\\n            return 0  # no one receives 8\\n\\n        money = money - children\\n        recipients = 0\\n        while money >= 7 and recipients < children:\\n            recipients += 1\\n            money -= 7\\n\\n        if recipients == children:\\n            # give all the rest of the money to someone\\n            if money > 0:\\n                return children - 1\\n            else:\\n                return children\\n\\n        # not everyone received 7 and some money is left\\n        # the only scenario that someone will receive 4 is\\n        # if 3 money is left and 1 person is left\\n        if money == 3 and recipients == children - 1:\\n            # give the money to someone else so 4 goes away\\n            # effectively ruining one 8\\n            return recipients - 1\\n\\n        # otherwise, if two people are left, no matter the money we can side step\\n        # 4\\n        return recipients\\n        \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3868234,
                "title": "easy-cpp-solution-beats-75-in-runtime-brute-force-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/40ce3838-094d-4660-b537-1a7f636a44aa_1691253442.1374192.png)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int cnt = 0;\\n        if(money < children) return -1;\\n        if(money < 8) return cnt;\\n        if(8*children == money) return children;\\n        for(int i=1; i<children; i++){\\n            // cout << (money-(8*i)) << \" \" << (children-i) << endl;\\n            int dist = (money-(8*i))/(children-i);\\n            if(children-i == 1 && dist == 4) break;\\n            if((money-(8*i)) >= 0 && dist > 0){\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int cnt = 0;\\n        if(money < children) return -1;\\n        if(money < 8) return cnt;\\n        if(8*children == money) return children;\\n        for(int i=1; i<children; i++){\\n            // cout << (money-(8*i)) << \" \" << (children-i) << endl;\\n            int dist = (money-(8*i))/(children-i);\\n            if(children-i == 1 && dist == 4) break;\\n            if((money-(8*i)) >= 0 && dist > 0){\\n                cnt++;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3860395,
                "title": "swift-5-lines-of-code-o-1-time-o-1-space",
                "content": "# Code\\n```\\nclass Solution {\\n    func distMoney(_ money: Int, _ children: Int) -> Int {\\n        guard money >= children  else { return -1 }\\n        switch ((money - children).quotientAndRemainder(dividingBy: 7)) {\\n            case (children..., 1...), ((children+1)..., 0): return children - 1\\n            case let (max8, 3) where children - max8 < 2: return max8 - 1\\n            case let (max8, _): return max8\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func distMoney(_ money: Int, _ children: Int) -> Int {\\n        guard money >= children  else { return -1 }\\n        switch ((money - children).quotientAndRemainder(dividingBy: 7)) {\\n            case (children..., 1...), ((children+1)..., 0): return children - 1\\n            case let (max8, 3) where children - max8 < 2: return max8 - 1\\n            case let (max8, _): return max8\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3858127,
                "title": "o-1-definitely-best-solution",
                "content": "# Approach\\n1. If the total money available is less than the number of children, it\\'s not possible to give each child at least 1 unit of money. In this case, return -1.\\n2. If the total money available is more than 8 times the number of children, it\\'s possible to give each child 8 units of money, and there will still be some money left. Return children - 1 in this case.\\n3. If the remaining money after giving each child 8 units is exactly 4 units less than the total money for the children, it means two children cannot receive 1 unit each. Return children - 2 in this case.\\n\\nFor any other scenario, distribute the remaining money equally among the children, ensuring each child receives at least 1 unit of money.\\n# Complexity\\n- Time complexity: O(1) (constant time), as the solution involves a fixed number of comparisons and calculations.\\nSpace complexity: \\n- Space complexity: O(1) (constant space), as the solution does not require any extra data structures that grow with input size.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // If there\\'s not enough money to give each child at least 1 unit, return -1\\n        if (money < children)  \\n            return -1;\\n        \\n        // If there\\'s more than enough money to give each child 8 units, return children - 1\\n        if (money > 8 * children)\\n            return children - 1;\\n        \\n        /* \\n        If the remaining money after giving each child 8 \\n        nits is exactly 4 units less than the total money for the children, \\n        return children - 2 (as two children won\\'t receive 1 unit each)\\n        */\\n        return (money == 8 * children - 4) ? children - 2 : (money - children) / 7;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // If there\\'s not enough money to give each child at least 1 unit, return -1\\n        if (money < children)  \\n            return -1;\\n        \\n        // If there\\'s more than enough money to give each child 8 units, return children - 1\\n        if (money > 8 * children)\\n            return children - 1;\\n        \\n        /* \\n        If the remaining money after giving each child 8 \\n        nits is exactly 4 units less than the total money for the children, \\n        return children - 2 (as two children won\\'t receive 1 unit each)\\n        */\\n        return (money == 8 * children - 4) ? children - 2 : (money - children) / 7;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839998,
                "title": "it-s-just-playing-around-with-math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWith a for loop, decreasing money by 8, and then seeing how to divide the leftover money if the money is less than 8, depending on the number of children left (knowing that there is there is the rule of no $4 for any children).\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing a for loop, conditions, and modulus to add up the number of children who will receive $8.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    let numC = 0;\\n    if (money < children) {\\n        numC = -1;\\n    } else if (money < 8) {\\n        numC = 0;\\n    } else if (money / children == 8) {\\n        numC = children;\\n    } else {\\n        for (let i = children; i > 0; i--) {\\n            if (money-8>0 && (money-8) >= i-1 && i-1 > 0) {\\n                if (money - 8 == 4) {\\n                    if ((i-2) > 0 && (i-2) % 4 !=0) {\\n                        numC++;\\n                    }\\n                } else {\\n                    numC++;\\n                }\\n            }\\n            money -= 8;\\n            if (money < 8) {\\n                break;\\n            }\\n        }\\n    }\\n    return numC;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    let numC = 0;\\n    if (money < children) {\\n        numC = -1;\\n    } else if (money < 8) {\\n        numC = 0;\\n    } else if (money / children == 8) {\\n        numC = children;\\n    } else {\\n        for (let i = children; i > 0; i--) {\\n            if (money-8>0 && (money-8) >= i-1 && i-1 > 0) {\\n                if (money - 8 == 4) {\\n                    if ((i-2) > 0 && (i-2) % 4 !=0) {\\n                        numC++;\\n                    }\\n                } else {\\n                    numC++;\\n                }\\n            }\\n            money -= 8;\\n            if (money < 8) {\\n                break;\\n            }\\n        }\\n    }\\n    return numC;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3831598,
                "title": "detailed-explanation-simply-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic mathematics will be enough to solve it!\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nEdge Cases--->\\nCase 1: if(m>n) --> if the number of children are more than money few will not get 1 dollar . Hence return -1\\nCase 2: if(n*8==m) --> All will gt 8 dollars\\nCase 3: if((n-1)*8+4)  --> Only one will get 4 dollars so due to rearrangement one will get 3 dollars and other 9 dollars so the return is n-2\\nCase 4: The total money is more than that when every one gets 8 dollars so one will have to be given more than 8 dollars\\nRemaining ---> We distribute 1 dollar to each and then check how many can be given 7 dollars to make the total to 8 dollars per person\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(n>m)return -1;\\n        if(n*8==m)return n;\\n        if((n-1)*8+4==m)return n-2;\\n        if(m>n*8)return n-1;\\n        m-=n;\\n        return m/7;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(n>m)return -1;\\n        if(n*8==m)return n;\\n        if((n-1)*8+4==m)return n-2;\\n        if(m>n*8)return n-1;\\n        m-=n;\\n        return m/7;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3830939,
                "title": "python-easy",
                "content": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money == 4 and children == 1 or money < children:\\n            return -1\\n        \\n        \\n        money -= children\\n        \\n        ans = 0\\n        \\n        while money >= 7 and children:\\n            ans += 1\\n            children -= 1\\n            money -= 7\\n        \\n        if children == 1 and money == 3:\\n            return ans - 1\\n        \\n        if money and not children:\\n            return ans - 1\\n        \\n        \\n        return ans\\n        \\n        \\n        \\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money == 4 and children == 1 or money < children:\\n            return -1\\n        \\n        \\n        money -= children\\n        \\n        ans = 0\\n        \\n        while money >= 7 and children:\\n            ans += 1\\n            children -= 1\\n            money -= 7\\n        \\n        if children == 1 and money == 3:\\n            return ans - 1\\n        \\n        if money and not children:\\n            return ans - 1\\n        \\n        \\n        return ans\\n        \\n        \\n        \\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3827545,
                "title": "the-solution-you-may-not-like",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nToo many corner cases, handled using if-else.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money == 8*children){\\n            return children;\\n        }\\n        if(money>8*children){\\n            return children - 1;\\n        }\\n        if(money<children){\\n            return -1;\\n        }\\n        money-=children;\\n        int total = 0;\\n        int pos = 1;\\n        while(money>0){\\n            if(money>=7){\\n                money-=7;\\n                total+=1;\\n                pos++;\\n            }\\n            else{\\n                if(money == 3 and pos == children){\\n                    return total-1;\\n                }\\n                else if(money == 3 and pos<children){\\n                    return total;\\n                }\\n                else {\\n                    return total;\\n                }\\n            }\\n        }\\n        return total;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money == 8*children){\\n            return children;\\n        }\\n        if(money>8*children){\\n            return children - 1;\\n        }\\n        if(money<children){\\n            return -1;\\n        }\\n        money-=children;\\n        int total = 0;\\n        int pos = 1;\\n        while(money>0){\\n            if(money>=7){\\n                money-=7;\\n                total+=1;\\n                pos++;\\n            }\\n            else{\\n                if(money == 3 and pos == children){\\n                    return total-1;\\n                }\\n                else if(money == 3 and pos<children){\\n                    return total;\\n                }\\n                else {\\n                    return total;\\n                }\\n            }\\n        }\\n        return total;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3823796,
                "title": "very-simple-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children){\\n            return -1;\\n        }\\n        int ans=0;\\n\\n        for(int i=1; i<=children; i++){\\n            int rem = money- i*8;\\n            if(rem < children-i) continue;\\n            if(rem>0 && (children-i)==0) continue;\\n            if(rem==4 && (children-i)==1) continue;\\n            if(rem==0 && (children-i)>0) continue;\\n            ans=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if(money<children){\\n            return -1;\\n        }\\n        int ans=0;\\n\\n        for(int i=1; i<=children; i++){\\n            int rem = money- i*8;\\n            if(rem < children-i) continue;\\n            if(rem>0 && (children-i)==0) continue;\\n            if(rem==4 && (children-i)==1) continue;\\n            if(rem==0 && (children-i)>0) continue;\\n            ans=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3814821,
                "title": "simple-java-code-with-explanation-and-heavily-commented-code",
                "content": "# Intuition/Approach\\n1. First we distribute 1 to every child to satisfy 1 condition.\\n2. Then we see how many children can get 8.\\n3. Then we check if one only child is remaing after previous step and if that only has 1 so far then we need to change exsting distribution from step 2 to satisfy 3rd condition\\n4. If any money is remaining after this then we need to give it all to one child.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(1) => since our input size does not effect our processing steps.\\n\\n- Space complexity:\\nO(1) => since our input size does not effect our processing steps.\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        // check condition 1 if that is successfull proceed else retuen -1\\n        int moneyRemain = money - children;\\n        if(moneyRemain<0){\\n            return -1;\\n        }\\n        // if money remaining after satisfying 1 is < 7 then no one can have 8 but all other 3 conditions are satisfied\\n        if(moneyRemain<7){\\n            return 0;\\n        }\\n        \\n        // check how many 8 can be formed with remaining money. Since we have already distributed 1 to each we need to distibute only 7 more.\\n        int ans = moneyRemain/7;\\n        // If the number of disributions from above is more than children present then we can distribute 8 to children - 1 and remaining amount will be added to last child.\\n        if(ans > children){\\n            return children-1;\\n        }\\n        moneyRemain = moneyRemain%7; \\n        // check if remaining amount is 3 and only one child is remaining n that case we will have to change money from one of the already distributed children to satisfy condition #3\\n        if(moneyRemain == 3 && children-ans==1){\\n            return ans - 1;\\n        }\\n        //if we have money remaing and we have distributed 8 to everyone then one child will have to be given the rest of the amount as per condition #1\\n        if(moneyRemain > 0 && ans>=children){\\n            return ans - 1;\\n        }\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        // check condition 1 if that is successfull proceed else retuen -1\\n        int moneyRemain = money - children;\\n        if(moneyRemain<0){\\n            return -1;\\n        }\\n        // if money remaining after satisfying 1 is < 7 then no one can have 8 but all other 3 conditions are satisfied\\n        if(moneyRemain<7){\\n            return 0;\\n        }\\n        \\n        // check how many 8 can be formed with remaining money. Since we have already distributed 1 to each we need to distibute only 7 more.\\n        int ans = moneyRemain/7;\\n        // If the number of disributions from above is more than children present then we can distribute 8 to children - 1 and remaining amount will be added to last child.\\n        if(ans > children){\\n            return children-1;\\n        }\\n        moneyRemain = moneyRemain%7; \\n        // check if remaining amount is 3 and only one child is remaining n that case we will have to change money from one of the already distributed children to satisfy condition #3\\n        if(moneyRemain == 3 && children-ans==1){\\n            return ans - 1;\\n        }\\n        //if we have money remaing and we have distributed 8 to everyone then one child will have to be given the rest of the amount as per condition #1\\n        if(moneyRemain > 0 && ans>=children){\\n            return ans - 1;\\n        }\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3764869,
                "title": "easy-to-understand-solution",
                "content": "1. First allocate 1 dollar to each children.\\n2. Allocate 7 dollars to maximum possible children except last one.\\n3. If 7 dollars are not allocated to (children-1) no. of children then return ans.\\n4. else **Find the amount of money will be allocated to last children**\\n\\t1. If it is 3 then reduce ans by 1 because we can\\'t allocate 8 dollars to last second children.\\n\\t2. If it is 7 then increase ans by 1 because we can allocate 8 dollars to last children also.\\nReturn ans.\\n\\t\\t\\n```\\nint distMoney(int money, int children) {\\n        if(money<children)  return -1;  //check second condition\\n        money-=children;                //1 dollar allocated to Everyone\\n        int cnt=children;\\n        while(money-7>=0 && cnt>1){        \\n            money-=7;\\n            cnt--;\\n        }      \\n        int ans=children-cnt;\\n        if(cnt!=1) return ans;\\n        if(money==3) ans--;\\n        else if(money==7) ans++;\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint distMoney(int money, int children) {\\n        if(money<children)  return -1;  //check second condition\\n        money-=children;                //1 dollar allocated to Everyone\\n        int cnt=children;\\n        while(money-7>=0 && cnt>1){        \\n            money-=7;\\n            cnt--;\\n        }      \\n        int ans=children-cnt;\\n        if(cnt!=1) return ans;\\n        if(money==3) ans--;\\n        else if(money==7) ans++;\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3740341,
                "title": "java-simple-100-step-by-step-explanation",
                "content": "# Intuition\\nThink negative case first, like when can we get answer -1, then eliminate obvious test cases like when can we get perfect maximum anser and perfect lowest answer. Then, take considerable large range of inputs and solve for each type of input. For example, I took `4 children` and `X amount` of money to start with.\\nMy range of inputs for testing my approach are `6,7,14,21,24,27,28,29,30` (why in multiple of 7 and not 8, below is the explanation)\\n\\n# Approach\\nif money is less than number of children then we can\\'t give each children 1 dollar so there we get -1 as answer.\\nnow, to eliminate first rule, we can `distribute 1 dollar to each` children and we can forget this rule from now on.\\nBut by doing this we have to consider `7` as new amount to consider and not `8`.\\n\\nIf we\\'ve less than 7 dollar then we can\\'t get any children with 8 dollar.\\n\\nmaximum anser we can get is `number of children`, when we\\'ve 7*numberOfChildren dollars left.\\n\\nTo get the maximum answer when we\\'ve `infinite` money then we get asnwer as `children - 1`, why ? here we give all children except one 7 dollar each and remaining one children can get all money left.\\n\\nNow, when we\\'ve `(children-1)*7 + 3 == money` money left, we can\\'t give 7 dollar to each `children-1` , because remaining children will get 4 dollar in total, so to counter that we have to give some dollar from `children-1` to this children who has 4 dollar. So the answer will be `children-2`.\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        money -= children;\\n        if(money < 7) return 0;\\n        if(7*children == money) return children;\\n        if(7*children < money) return children-1;\\n        if((children-1)*7 + 3 == money) return children-2;\\n        return money / 7; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(money<children) return -1;\\n        money -= children;\\n        if(money < 7) return 0;\\n        if(7*children == money) return children;\\n        if(7*children < money) return children-1;\\n        if((children-1)*7 + 3 == money) return children-2;\\n        return money / 7; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3723389,
                "title": "golang-solution-with-comments",
                "content": "# Code\\n```Go\\nfunc distMoney(money int, children int) int {\\n\\tif money < children {\\n\\t\\t// every children got 1 doller is impossible\\n\\t\\treturn -1\\n\\t}\\n\\n\\t// give all children 1 doller\\n\\tmoney -= children\\n\\n\\teightChildren := money / 7\\n\\trestMoney := money % 7\\n\\n\\tif eightChildren == 0 {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tif eightChildren > children {\\n\\t\\t// last child go more than 8 dollers\\n\\t\\treturn children-1\\n\\t}\\n\\n  if restMoney == 0 {\\n\\t\\t// just OK\\n\\t\\treturn eightChildren\\n\\t}\\n\\n\\tif restMoney != 3 {\\n\\t\\tif eightChildren == children {\\n\\t\\t\\t// last child go more than 8 dollers\\n\\t\\t\\treturn children-1\\n\\t\\t}\\n\\t\\t// restMoney to other children\\n\\t\\treturn eightChildren\\n\\t}\\n\\n\\tif eightChildren < children-1 {\\n\\t\\t// rest 3 dollers to 2 children\\n\\t\\treturn eightChildren\\n\\t}\\n\\t// rest 3 dollers to 1 children is impossible\\n\\t// one child will got 11 dollers\\n\\treturn eightChildren-1\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```Go\\nfunc distMoney(money int, children int) int {\\n\\tif money < children {\\n\\t\\t// every children got 1 doller is impossible\\n\\t\\treturn -1\\n\\t}\\n\\n\\t// give all children 1 doller\\n\\tmoney -= children\\n\\n\\teightChildren := money / 7\\n\\trestMoney := money % 7\\n\\n\\tif eightChildren == 0 {\\n\\t\\treturn 0\\n\\t}\\n\\n\\tif eightChildren > children {\\n\\t\\t// last child go more than 8 dollers\\n\\t\\treturn children-1\\n\\t}\\n\\n  if restMoney == 0 {\\n\\t\\t// just OK\\n\\t\\treturn eightChildren\\n\\t}\\n\\n\\tif restMoney != 3 {\\n\\t\\tif eightChildren == children {\\n\\t\\t\\t// last child go more than 8 dollers\\n\\t\\t\\treturn children-1\\n\\t\\t}\\n\\t\\t// restMoney to other children\\n\\t\\treturn eightChildren\\n\\t}\\n\\n\\tif eightChildren < children-1 {\\n\\t\\t// rest 3 dollers to 2 children\\n\\t\\treturn eightChildren\\n\\t}\\n\\t// rest 3 dollers to 1 children is impossible\\n\\t// one child will got 11 dollers\\n\\treturn eightChildren-1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3702761,
                "title": "easy-to-understand-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(m<n){\\n            return -1;\\n        }\\n        m -=n;\\n        if(m<7) return 0;\\n        if(m== n*7) return n;\\n        if(m<=7 *(n-1)+2)  return m/7;\\n        m-= 7*(n-1);\\n        if(m==3) return n-2;\\n        return n-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int m, int n) {\\n        if(m<n){\\n            return -1;\\n        }\\n        m -=n;\\n        if(m<7) return 0;\\n        if(m== n*7) return n;\\n        if(m<=7 *(n-1)+2)  return m/7;\\n        m-= 7*(n-1);\\n        if(m==3) return n-2;\\n        return n-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3702437,
                "title": "my-solution-in-1st-attempt-30-seconds",
                "content": "\\n```\\nclass Solution\\n{\\n    public:\\n        int distMoney(int money, int children)\\n        {\\n            if(money<children) return -1;\\n            int cnt = 0;\\n            while (children > 1 && money > children)\\n            {\\n                money -= 8;\\n                children--;\\n                cnt++;\\n            }\\n            if(money<0 or money<children) cnt--;\\n            if (children == 1 && money == 4) cnt--;\\n            if (children == 1 && money == 8) cnt++;\\n            return cnt;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        int distMoney(int money, int children)\\n        {\\n            if(money<children) return -1;\\n            int cnt = 0;\\n            while (children > 1 && money > children)\\n            {\\n                money -= 8;\\n                children--;\\n                cnt++;\\n            }\\n            if(money<0 or money<children) cnt--;\\n            if (children == 1 && money == 4) cnt--;\\n            if (children == 1 && money == 8) cnt++;\\n            return cnt;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3680787,
                "title": "c-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        \\n        // promise every child has 1 $\\n        money -= children;\\n        if (money < 0)\\n            return -1;\\n        \\n        // give 8 $ to as many children as possible\\n        ans = min(money / 7, children);\\n        // calc left $\\n        int left = money - ans * 7;\\n\\n        // give every child 8 $ with left $, ans--\\n        if (ans == children && left != 0)\\n            ans--;\\n        // give (n-1) children 8 $ while left 4 $, ans--\\n        else if (children - ans == 1 && left == 3)\\n            ans--;\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        \\n        // promise every child has 1 $\\n        money -= children;\\n        if (money < 0)\\n            return -1;\\n        \\n        // give 8 $ to as many children as possible\\n        ans = min(money / 7, children);\\n        // calc left $\\n        int left = money - ans * 7;\\n\\n        // give every child 8 $ with left $, ans--\\n        if (ans == children && left != 0)\\n            ans--;\\n        // give (n-1) children 8 $ while left 4 $, ans--\\n        else if (children - ans == 1 && left == 3)\\n            ans--;\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3676035,
                "title": "easy-solution-java-if-condition-only",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        \\n        money-=children;\\n        if(money<0) return -1;\\n        if(money/7==children && money%7==0){\\n            return children;\\n        }if(money/7==children-1 && money%7==3)\\n            return children -2;\\n        return Math.min(children-1,money/7);\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        \\n        money-=children;\\n        if(money<0) return -1;\\n        if(money/7==children && money%7==0){\\n            return children;\\n        }if(money/7==children-1 && money%7==3)\\n            return children -2;\\n        return Math.min(children-1,money/7);\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3663554,
                "title": "js-ugly-like-hell-but-efficient-memory-46-mb-beats-91-95",
                "content": "# Intuition\\nFollow the rules stated in the description, sequentially\\nThen apply conditions\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    \\n    var c = Array(children).fill(0)\\n    var child = 0\\n\\n    // Fill w/ 1\\n    while(money>0 && child<children){\\n        c[child]++\\n        money--\\n        child++\\n    }\\n\\n    if (child < children){return -1}\\n    child = 0;\\n\\n    // Fill w/8\\n    while(money>0 && child<children){\\n        for(var i = c[child]; i<8; i++){\\n            c[child]++\\n            money--\\n            if(money<=0){break;}\\n        }\\n        child++\\n    }\\n    if(money>0){child--}\\n\\n    if(c[child-1]==8){return child}\\n    if(c[child-1]==4){\\n        if(child==children){return child-2}else{return child-1}\\n    }\\n    if(child==0){return 0}\\n    return child - 1\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    \\n    var c = Array(children).fill(0)\\n    var child = 0\\n\\n    // Fill w/ 1\\n    while(money>0 && child<children){\\n        c[child]++\\n        money--\\n        child++\\n    }\\n\\n    if (child < children){return -1}\\n    child = 0;\\n\\n    // Fill w/8\\n    while(money>0 && child<children){\\n        for(var i = c[child]; i<8; i++){\\n            c[child]++\\n            money--\\n            if(money<=0){break;}\\n        }\\n        child++\\n    }\\n    if(money>0){child--}\\n\\n    if(c[child-1]==8){return child}\\n    if(c[child-1]==4){\\n        if(child==children){return child-2}else{return child-1}\\n    }\\n    if(child==0){return 0}\\n    return child - 1\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3661425,
                "title": "the-simplest-solution-divmod-if",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n``` Python []\\nclass Solution:\\n  def distMoney(self, m: int, n: int) -> int:\\n    div, mod = divmod(m-n, 7)\\n    if n > m:\\n      return -1\\n    if div == n-1 and mod == 3 or \\\\\\n       div == n and mod > 0:\\n      return div-1\\n    if div > n:\\n      return n-1\\n    return div\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python []\\nclass Solution:\\n  def distMoney(self, m: int, n: int) -> int:\\n    div, mod = divmod(m-n, 7)\\n    if n > m:\\n      return -1\\n    if div == n-1 and mod == 3 or \\\\\\n       div == n and mod > 0:\\n      return div-1\\n    if div > n:\\n      return n-1\\n    return div\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3657454,
                "title": "java-o-1-beats-100-easy-solution",
                "content": "# Complexity\\n- Time complexity:- O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:- O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(children > money)\\n            return -1;\\n        int ans = 0;\\n        money -= children;\\n        ans = money/7;\\n        if(ans == children && money%7 == 0)\\n            return ans;\\n        if(ans >= children)\\n            return children-1;\\n        if(money%7 == 3 && ans == children-1)\\n            ans--;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        if(children > money)\\n            return -1;\\n        int ans = 0;\\n        money -= children;\\n        ans = money/7;\\n        if(ans == children && money%7 == 0)\\n            return ans;\\n        if(ans >= children)\\n            return children-1;\\n        if(money%7 == 3 && ans == children-1)\\n            ans--;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3643635,
                "title": "python-5-cases",
                "content": "Not easy to come up with the edge cases quickly as for an easy problem.\\n```\\nclass Solution:\\n    def distMoney(self, money: int, N: int) -> int:\\n        money -= N\\n        # 1. cannot allocate even 1 to each\\n        if money < 0: return -1\\n        eight = money // 7\\n        left = money % 7\\n\\t\\t# 2. can allocate exactly to N - 1 and the last one has 4 bucks. The last one gets 3 bucks, previous 8 gets +1\\n        if eight == N - 1 and left == 3: return eight - 1\\n\\t\\t# 3. can allocate to N and left some money. The last one gets more money\\n        if eight == N and left > 0: return N - 1\\n\\t\\t# 4. can allocate to > N. The last one gets more money\\n        if eight > N: return N - 1\\n        # 5. can allocate money to integer number of children without change\\n        # if eight == N and left == 0: return eight\\n        # if eight < N and left == 0: return eight        \\n        # return -1\\n\\n        return eight\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, N: int) -> int:\\n        money -= N\\n        # 1. cannot allocate even 1 to each\\n        if money < 0: return -1\\n        eight = money // 7\\n        left = money % 7\\n\\t\\t# 2. can allocate exactly to N - 1 and the last one has 4 bucks. The last one gets 3 bucks, previous 8 gets +1\\n        if eight == N - 1 and left == 3: return eight - 1\\n\\t\\t# 3. can allocate to N and left some money. The last one gets more money\\n        if eight == N and left > 0: return N - 1\\n\\t\\t# 4. can allocate to > N. The last one gets more money\\n        if eight > N: return N - 1\\n        # 5. can allocate money to integer number of children without change\\n        # if eight == N and left == 0: return eight\\n        # if eight < N and left == 0: return eight        \\n        # return -1\\n\\n        return eight\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3640001,
                "title": "java-straightforward",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n  public int distMoney(int money, int children) {\\n    if (money < children) return -1;\\n\\n    //assign every child one dollar\\n    int left = money - children;\\n\\n    int ans = left / 7, reminder = left % 7;\\n\\n    switch (reminder) {\\n      case 0:\\n        return (ans <= children) ? ans : children - 1;\\n      case 3:\\n        if (ans <= children - 2) {\\n          return ans;\\n        }\\n        if (ans == children - 1) {\\n          return ans - 1;\\n        }\\n        return children - 1;\\n      default:\\n        return (ans < children) ? ans : children - 1;\\n    }\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n  public int distMoney(int money, int children) {\\n    if (money < children) return -1;\\n\\n    //assign every child one dollar\\n    int left = money - children;\\n\\n    int ans = left / 7, reminder = left % 7;\\n\\n    switch (reminder) {\\n      case 0:\\n        return (ans <= children) ? ans : children - 1;\\n      case 3:\\n        if (ans <= children - 2) {\\n          return ans;\\n        }\\n        if (ans == children - 1) {\\n          return ans - 1;\\n        }\\n        return children - 1;\\n      default:\\n        return (ans < children) ? ans : children - 1;\\n    }\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3635706,
                "title": "all-cases-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust write out all the cases and implement it\\n\\n# Complexity\\n- Time complexity: $O(1)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        std::ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n        if(money<children) return -1;\\n        money = money-children;\\n        int ans=0;\\n        int temp = money/7; \\n        int extra = money%7;\\n        if(extra==0 && temp<=children) ans=ans+temp;\\n        else if(extra==0 && temp>children) ans=ans+children-1;\\n        else if(extra!=3 && temp<children) ans=ans+temp;\\n        else if(extra!=3 && temp==children) ans=ans+temp-1;\\n        else if(extra!=3 && temp>children) ans = ans+children-1;\\n        else if(extra==3 && children==temp) ans=ans+temp-1;\\n        else if(extra==3 &&  children<temp) ans=ans+children-1;\\n        else if(extra==3 &&  children-temp ==1) ans=ans+temp-1;\\n        else if(extra==3 &&  children-temp>1) ans=ans+temp;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) \\n    {\\n        std::ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n        if(money<children) return -1;\\n        money = money-children;\\n        int ans=0;\\n        int temp = money/7; \\n        int extra = money%7;\\n        if(extra==0 && temp<=children) ans=ans+temp;\\n        else if(extra==0 && temp>children) ans=ans+children-1;\\n        else if(extra!=3 && temp<children) ans=ans+temp;\\n        else if(extra!=3 && temp==children) ans=ans+temp-1;\\n        else if(extra!=3 && temp>children) ans = ans+children-1;\\n        else if(extra==3 && children==temp) ans=ans+temp-1;\\n        else if(extra==3 &&  children<temp) ans=ans+children-1;\\n        else if(extra==3 &&  children-temp ==1) ans=ans+temp-1;\\n        else if(extra==3 &&  children-temp>1) ans=ans+temp;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3630803,
                "title": "long-code-but-with-easy-logic",
                "content": "# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int[] distribution = new int[30]; // the maximum children is 30\\n        if(money < children)\\n            return -1;\\n        money -= children; // give everyone one dollar first\\n        for(int i = 0; i < children; i++) {\\n            distribution[i] = 1;\\n        }\\n        int count = 0; // the number of children who get eight dollars\\n        int pointer = 0;\\n        while(money != 0) {\\n            if(pointer == children)\\n                pointer = count;\\n            if(count >= children) { // all the children got 8 dollars but the money > 0\\n                // give all the rest to one of the children, and then count should be one less\\n                return count - 1;\\n            }\\n            if(distribution[pointer] != 8 && money >= 7) {\\n                // if with enough money, give the current child seven dollars to have eight dollars in total\\n                distribution[pointer] += 7;\\n                money -= 7;\\n                count++;\\n            } else if(distribution[pointer] != 3 && money > 0) {\\n                // increment one dollar if the amount of the current child is not three dollars\\n                distribution[pointer]++;\\n                money--;\\n            } else if(distribution[pointer] == 3 && money >= 2) {\\n                // if the current child has 3 dollars and money > 2, give him two dollars\\n                distribution[pointer] += 2;\\n                money -= 2;\\n            } else if(distribution[pointer] == 3 && money == 1) {\\n                if(count != 0 && pointer != count + 1 && pointer == children - 1)\\n                // the previous children all got 8 dollars already and the current child is the last child\\n                    count--;\\n                money = 0;\\n            }\\n            pointer++; // move the pointer to the next child\\n        }\\n        return count;\\n    }\\n}\\n```\\n\\nThis problem is a little tricky, not that easy.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int[] distribution = new int[30]; // the maximum children is 30\\n        if(money < children)\\n            return -1;\\n        money -= children; // give everyone one dollar first\\n        for(int i = 0; i < children; i++) {\\n            distribution[i] = 1;\\n        }\\n        int count = 0; // the number of children who get eight dollars\\n        int pointer = 0;\\n        while(money != 0) {\\n            if(pointer == children)\\n                pointer = count;\\n            if(count >= children) { // all the children got 8 dollars but the money > 0\\n                // give all the rest to one of the children, and then count should be one less\\n                return count - 1;\\n            }\\n            if(distribution[pointer] != 8 && money >= 7) {\\n                // if with enough money, give the current child seven dollars to have eight dollars in total\\n                distribution[pointer] += 7;\\n                money -= 7;\\n                count++;\\n            } else if(distribution[pointer] != 3 && money > 0) {\\n                // increment one dollar if the amount of the current child is not three dollars\\n                distribution[pointer]++;\\n                money--;\\n            } else if(distribution[pointer] == 3 && money >= 2) {\\n                // if the current child has 3 dollars and money > 2, give him two dollars\\n                distribution[pointer] += 2;\\n                money -= 2;\\n            } else if(distribution[pointer] == 3 && money == 1) {\\n                if(count != 0 && pointer != count + 1 && pointer == children - 1)\\n                // the previous children all got 8 dollars already and the current child is the last child\\n                    count--;\\n                money = 0;\\n            }\\n            pointer++; // move the pointer to the next child\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630772,
                "title": "very-easy-understandable-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children>money:\\n            return -1\\n        if (money%8==0) and (money//8==children):\\n            return money//8\\n        x = min(children,(money-children)//7)\\n        money-=8*x\\n        if (money == 4) and (children-x==1):\\n            x-=1\\n        if (x==children) and (money>0):\\n            x-=1\\n        return x\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if children>money:\\n            return -1\\n        if (money%8==0) and (money//8==children):\\n            return money//8\\n        x = min(children,(money-children)//7)\\n        money-=8*x\\n        if (money == 4) and (children-x==1):\\n            x-=1\\n        if (x==children) and (money>0):\\n            x-=1\\n        return x\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628170,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        if (money / 8. > children) return children - 1;\\n        if (money / 8. == children) return children;\\n        auto result = (money - children) / 7;\\n        if (result == 0) return 0;\\n        if (result == children - 1 && (money - result * 8) % 4 == 0) return result - 1;\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        if (money / 8. > children) return children - 1;\\n        if (money / 8. == children) return children;\\n        auto result = (money - children) / 7;\\n        if (result == 0) return 0;\\n        if (result == children - 1 && (money - result * 8) % 4 == 0) return result - 1;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3621892,
                "title": "step-by-step-problem-solving",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt is crucial for solving to find the main difference between different cases.  I write out all possible ways and consise them into code\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s work on first conditions. If there are more children, then money ==> we return -1\\nNext step to check if we can give everyone 8 dollars and go on wit our lives. Nothing interresting.\\n\\nNow **main loop time**\\n```while children > 2 and money >= 7 + children:``` - we will stop either if there is not enough money to give 8 to one more kid, or if there are only 2 kids left.\\n\\nIn that task, the main divergence comes from last two kids. \\n\\n```\\nif money >= 9 and money != 12 and children == 2:\\n```\\nLet\\'s go left to right. We check for two kids as if we break the loop due to lack of money - there is no way to increment the score any more.\\n\\nSo, we have two kids and some money. If we give 8 to first kid and will be left with 4 - c\\'est la vie, we break rules. So no increments if money == 12.\\n\\nLast is to check wheather we even can give 8 to one kid. \\n\\nSo, if we meet all the conditions, we can grant one kid 8 dollars and the last one - whatever left.\\n# Code\\nHere is the code you may have come here. \\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:            #\\n            return -1                   # trivial cases\\n        if money == children * 8:       #\\n            return children             #\\n\\n        score = 0\\n        while children > 2 and money >= 7 + children:\\n            money -= 8\\n            score += 1\\n            children -= 1\\n\\n        if money > 8 and money != 12 and children == 2:\\n            score += 1\\n\\n        return score\\n```\\n# Quote of my day\\n>  You dont really go smoling onto the roof. It is too existentially-dramatic.",
                "solutionTags": [
                    "Python3",
                    "Greedy"
                ],
                "code": "```while children > 2 and money >= 7 + children:```\n```\\nif money >= 9 and money != 12 and children == 2:\\n```\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money < children:            #\\n            return -1                   # trivial cases\\n        if money == children * 8:       #\\n            return children             #\\n\\n        score = 0\\n        while children > 2 and money >= 7 + children:\\n            money -= 8\\n            score += 1\\n            children -= 1\\n\\n        if money > 8 and money != 12 and children == 2:\\n            score += 1\\n\\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3611041,
                "title": "c-o-1-casework",
                "content": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        money -= children;\\n        int ans = money / 7;\\n        if (ans > children || (ans == children && ans * 7 != money)) ans = children - 1;\\n        else if (ans == children - 1 && money - ans * 7 == 3) --ans;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children) return -1;\\n        money -= children;\\n        int ans = money / 7;\\n        if (ans > children || (ans == children && ans * 7 != money)) ans = children - 1;\\n        else if (ans == children - 1 && money - ans * 7 == 3) --ans;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3603553,
                "title": "java-solution-beats-100-runtime-3ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    private int count = 0;\\n    public int distMoney(int money, int children) {\\n        if(money<0 && children<0) {\\n            return -1;\\n        }\\n        if(children<=money/8 && money%8!=0) {\\n            return children-1;\\n        }\\n        if(children<money/8 && money%8==0) {\\n            return children-1;\\n        }\\n        if(money<8) {\\n            if(children<=money) {\\n                if(money==4 && children==1) {\\n                    count--;\\n                    money=0;\\n                    children--;\\n                }\\n                else {\\n                    money=0;\\n                    children=0;\\n                }\\n            }\\n            else {\\n                children -= money;\\n                money=0;\\n                while(children>0) {\\n                    money += 7;\\n                    count--;\\n                    children -= money;\\n                    money = 0;\\n                }\\n                children=0;\\n                money=0;\\n            }\\n        }\\n        else {\\n            count++;\\n            return distMoney(money-8, children-1);\\n        }\\n\\n        if(count<-1) {\\n            return -1;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private int count = 0;\\n    public int distMoney(int money, int children) {\\n        if(money<0 && children<0) {\\n            return -1;\\n        }\\n        if(children<=money/8 && money%8!=0) {\\n            return children-1;\\n        }\\n        if(children<money/8 && money%8==0) {\\n            return children-1;\\n        }\\n        if(money<8) {\\n            if(children<=money) {\\n                if(money==4 && children==1) {\\n                    count--;\\n                    money=0;\\n                    children--;\\n                }\\n                else {\\n                    money=0;\\n                    children=0;\\n                }\\n            }\\n            else {\\n                children -= money;\\n                money=0;\\n                while(children>0) {\\n                    money += 7;\\n                    count--;\\n                    children -= money;\\n                    money = 0;\\n                }\\n                children=0;\\n                money=0;\\n            }\\n        }\\n        else {\\n            count++;\\n            return distMoney(money-8, children-1);\\n        }\\n\\n        if(count<-1) {\\n            return -1;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3602789,
                "title": "java-easy-solution-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int m, int c){\\n\\n        if(m<c){\\n            return -1;\\n        }\\n        if(m==c*8){\\n            return c;\\n        }\\n        if(m>c*8){\\n            return c-1;\\n        }\\n\\n        \\n             m = m-c;\\n        if(m/7==c-1 && m%7==3){\\n            return c-2;\\n        }\\n\\n        return Math.min(c-1,m/7);\\n\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int m, int c){\\n\\n        if(m<c){\\n            return -1;\\n        }\\n        if(m==c*8){\\n            return c;\\n        }\\n        if(m>c*8){\\n            return c-1;\\n        }\\n\\n        \\n             m = m-c;\\n        if(m/7==c-1 && m%7==3){\\n            return c-2;\\n        }\\n\\n        return Math.min(c-1,m/7);\\n\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3586063,
                "title": "eazy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int count=0;\\n        if(((double)(money))/8 == (double)(children)) //exactly 8 dollars for each child\\n            return children;\\n        if(((double)(money))/8 > (double)(children))////more than 8 dollars to each child, so we distribute 8 to x-1 children and the rest to the other child\\n            return children -1;\\n        if(money<children)\\n            return -1;\\n        if(money<8)\\n            return 0;\\n        money-=children; //give each children one dollar\\n        while(money!=0){\\n            if(money>=7){\\n                count++;\\n                money-=7;\\n            }\\n            else if(money==3){\\n                /*\\n                //if we reach a step where we have 3 dollar to spare(a child sould recive 4 in total) we check if we are at the last child. if we are the we \"give an extra dollar to the previos child\" so the subtract from the amount that recives 8 dollars. if it not the last child we \"give some money to the next child\" \\n                */\\n                if(count>0 && count == children-1)\\n                    count--;\\n                return count;\\n                \\n            }\\n            else\\n                return count;\\n        }\\n        return count;\\n}}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int count=0;\\n        if(((double)(money))/8 == (double)(children)) //exactly 8 dollars for each child\\n            return children;\\n        if(((double)(money))/8 > (double)(children))////more than 8 dollars to each child, so we distribute 8 to x-1 children and the rest to the other child\\n            return children -1;\\n        if(money<children)\\n            return -1;\\n        if(money<8)\\n            return 0;\\n        money-=children; //give each children one dollar\\n        while(money!=0){\\n            if(money>=7){\\n                count++;\\n                money-=7;\\n            }\\n            else if(money==3){\\n                /*\\n                //if we reach a step where we have 3 dollar to spare(a child sould recive 4 in total) we check if we are at the last child. if we are the we \"give an extra dollar to the previos child\" so the subtract from the amount that recives 8 dollars. if it not the last child we \"give some money to the next child\" \\n                */\\n                if(count>0 && count == children-1)\\n                    count--;\\n                return count;\\n                \\n            }\\n            else\\n                return count;\\n        }\\n        return count;\\n}}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3581593,
                "title": "very-easy-short-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public: \\n    int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    public: \\n    int distMoney(int money, int children) {\\n        money -= children;\\n    if (money < 0)\\n        return -1;\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n    return min(children - 1, money / 7);       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3579336,
                "title": "easy-java-solution-beat-100",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int x = money / 8;\\n        int y, rest = 0, max = -1;\\n        for (int i = x; i >= 0; i--) {\\n            y = children - i;\\n            rest = money - i * 8;\\n            if (y < 0 || rest < y || y == 0 && rest > 0 || (rest == 4 && y == 1)) {\\n                continue;\\n            } else if (i >= 0 && max < 0) {\\n                max = i;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int x = money / 8;\\n        int y, rest = 0, max = -1;\\n        for (int i = x; i >= 0; i--) {\\n            y = children - i;\\n            rest = money - i * 8;\\n            if (y < 0 || rest < y || y == 0 && rest > 0 || (rest == 4 && y == 1)) {\\n                continue;\\n            } else if (i >= 0 && max < 0) {\\n                max = i;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3558155,
                "title": "distribute-money-to-maximum-children",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        money -= children\\n        if money < 0:\\n            return -1\\n\\n        count7 = money // 7\\n        remaining = money % 7\\n\\n        if count7 == children and remaining == 0:\\n            return count7\\n\\n        if count7 == children - 1 and remaining == 3:\\n            return count7 - 1\\n\\n        return min(children - 1, count7)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        money -= children\\n        if money < 0:\\n            return -1\\n\\n        count7 = money // 7\\n        remaining = money % 7\\n\\n        if count7 == children and remaining == 0:\\n            return count7\\n\\n        if count7 == children - 1 and remaining == 3:\\n            return count7 - 1\\n\\n        return min(children - 1, count7)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3552834,
                "title": "java-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int ans = 0;\\n        while(children>0 && money>children) {\\n            money -= 8;\\n            ans++;\\n            children--;\\n        }\\n        if(children == 0) {\\n            if(money>0)\\n                return ans-1;\\n            else if(money == 0)\\n                return ans;\\n            else {\\n                money += 8;\\n                ans--;\\n                if(money == 4)\\n                    return ans-1;\\n                else\\n                    return ans;\\n            }\\n        }\\n        else {\\n            if(money == children)\\n                return ans;\\n            else\\n                return ans-1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Greedy",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        int ans = 0;\\n        while(children>0 && money>children) {\\n            money -= 8;\\n            ans++;\\n            children--;\\n        }\\n        if(children == 0) {\\n            if(money>0)\\n                return ans-1;\\n            else if(money == 0)\\n                return ans;\\n            else {\\n                money += 8;\\n                ans--;\\n                if(money == 4)\\n                    return ans-1;\\n                else\\n                    return ans;\\n            }\\n        }\\n        else {\\n            if(money == children)\\n                return ans;\\n            else\\n                return ans-1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3548113,
                "title": "beat-100-simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        // Basic Early Return\\n        if(money < children)\\n            return -1;\\n        // Distribute $1 to everyone\\n        money -= children;\\n        // Every children can get exactly $8\\n        if(money / 7 == children && money % 7 == 0)\\n            return children;\\n        \\n        if(money / 7 == children - 1 && money % 7 == 3)\\n            return children - 2;\\n        \\n        return Math.min(children - 1, money / 7);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        // Basic Early Return\\n        if(money < children)\\n            return -1;\\n        // Distribute $1 to everyone\\n        money -= children;\\n        // Every children can get exactly $8\\n        if(money / 7 == children && money % 7 == 0)\\n            return children;\\n        \\n        if(money / 7 == children - 1 && money % 7 == 3)\\n            return children - 2;\\n        \\n        return Math.min(children - 1, money / 7);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3524410,
                "title": "simple-explenation-beat-88",
                "content": "# Intuition\\n\\nWe start by giving 1dollars to each children. After we try to give 7dollars to each one. Finally if there is still money or if there is not enough money to give 8dollars to a children, we count how much children get 8 dollars. Caution : there is some case with the remaining money that must be processed\\n\\n# Approach\\n\\n- build a list of N element that represent money of each children\\n- if we cannot give at least 1dollars to each children return-1\\n- if we cannot give at least 7dollars to one children return 0\\n- We start by giving 1 dollars to each wallet in the list and substract th amount to the money value \\n- We continue by adding 7 dollars in each wallet and substract this same amount each time if money become lower than 7 dollar we cannot have another 8dollars wallet \\n- After if the remaining money is 3, if there is just 1 children left we cannot give him 3dollar to respect 4dollars rules, so we count numbers of 8dollars wallet and we have to break one (so count(8)-1)\\n- Else if we give 8dollars to each wallet but money is not equal to 0 we also have to break one 8dollars wallet\\n- At the end in the other case we just have to count the numbers of 8dollars wallet and split the remaining money on other(s) wallets\\n\\n# Complexity\\n- Time complexity:\\n $$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$ \\n\\n# Code\\n```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        L=[0]*children\\n        if money<children:\\n            return -1\\n        elif money<children+7:\\n            return 0\\n        for i in range(children):\\n            L[i]+=1\\n            money-=1\\n        for i in range(children):\\n            L[i]+=7\\n            money-=7\\n            if money<7:\\n                break\\n        if (money == 3 and (children-L.count(8))==1) or ((children-L.count(8))==0 and money!=0):\\n            return L.count(8)-1\\n        else:\\n            return L.count(8)\\n\\n\\n            \\n            \\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def distMoney(self, money, children):\\n        L=[0]*children\\n        if money<children:\\n            return -1\\n        elif money<children+7:\\n            return 0\\n        for i in range(children):\\n            L[i]+=1\\n            money-=1\\n        for i in range(children):\\n            L[i]+=7\\n            money-=7\\n            if money<7:\\n                break\\n        if (money == 3 and (children-L.count(8))==1) or ((children-L.count(8))==0 and money!=0):\\n            return L.count(8)-1\\n        else:\\n            return L.count(8)\\n\\n\\n            \\n            \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3514289,
                "title": "c-simple-solution-with-if-else-checks-19ms-100",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int DistMoney(int money, int children) \\n    {\\n        var eights = Math.DivRem(money - children, 7, out var rest);\\n\\n        if(eights > children)\\n            eights = children - 1;\\n        else if(eights == children && rest != 0)\\n            eights--;\\n        else if(eights + 1 == children && rest == 3)\\n            eights--;\\n        else if(money < children) \\n            eights = -1;\\n\\n        return eights;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistMoney(int money, int children) \\n    {\\n        var eights = Math.DivRem(money - children, 7, out var rest);\\n\\n        if(eights > children)\\n            eights = children - 1;\\n        else if(eights == children && rest != 0)\\n            eights--;\\n        else if(eights + 1 == children && rest == 3)\\n            eights--;\\n        else if(money < children) \\n            eights = -1;\\n\\n        return eights;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3514003,
                "title": "only-4-branches-4-compare-operations-and-7-math-operations",
                "content": "# Intuition\\nThe worst task on the first view and solution is not so obviously. But...\\n\\n# Approach\\nWe need to give `1` to each child and calculate `drawback` for filling all of children:\\n* if `drawback` is `0`, then all children have 8 coins.\\n* if `drawback` is `4`, then we need distribute `1` extra point to some child so we have `2` children without 8 coins.\\n* if `drawback` is negative, then only one child will have extra coins.\\n* in other cases we need to calculate subtract children and division `drawback` by 7.\\n\\n# Complexity\\n- Time complexity: we have no loops in this solution but if we calculate branches then complexity is `O(4)`.\\n\\n- Space complexity: small :)\\n\\n# Code\\n## TypeScript\\n![image.png](https://assets.leetcode.com/users/images/c35d299e-d1cb-4972-98a9-f5f670c6d28c_1683877671.0925624.png)\\n```typescript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children)\\n        return -1;\\n\\n    const drawback = children * 8 - money;\\n\\n    if (!drawback)\\n        return children;\\n\\n    if (drawback === 4)\\n        return children - 2;\\n\\n    if (drawback < 0)\\n        return children - 1;\\n\\n    return children - Math.ceil(drawback / 7);\\n}\\n```\\n## JavaScript\\n![image.png](https://assets.leetcode.com/users/images/1cbfde94-36da-41e7-a8ee-3c68ecbb168d_1683874117.1406324.png)\\n```javascript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children)\\n        return -1;\\n\\n    const drawback = children * 8 - money;\\n\\n    if (!drawback)\\n        return children;\\n\\n    if (drawback === 4)\\n        return children - 2;\\n\\n    if (drawback < 0)\\n        return children - 1;\\n\\n    return children - Math.ceil(drawback / 7);\\n}\\n```\\n## Rust\\n![image.png](https://assets.leetcode.com/users/images/e9bbc2a3-3f5d-4ee3-9e95-b224aeac43ae_1683873985.2628767.png)\\n```rust\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        if money < children {\\n            return -1;\\n        }\\n\\n        let drawback = (children * 8 - money) as f32;\\n\\n        if drawback == 0_f32 {\\n            return children;\\n        }\\n\\n        if drawback == 4_f32 {\\n            return children - 2;\\n        }\\n\\n        if drawback < 0_f32 {\\n            return children - 1;\\n        }\\n\\n        return children - (drawback / 7_f32).ceil() as i32;\\n    }\\n}\\n```\\n# Bitwise optimization\\nWe can use bitwise operator instead of `Math.ceil`. Like this:\\n```typescript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children) {\\n        return -1;\\n    }\\n\\n    const drawback = children * 8 - money;\\n\\n    if (drawback === 0) {\\n        return children;\\n    }\\n\\n    if (drawback === 4) {\\n        return children - 2;\\n    }\\n\\n    if (drawback < 0) {\\n        return children - 1;\\n    }\\n\\n    return children - (drawback / 7) >> 0;\\n};\\n```\\nI know it\\'s not the same operations but this is enough for correct working of this solution in current test cases.\\nAnd i\\'m not sure it will faster than was.\\n<!--\\n# Statistical optimization\\nIf we imagine a test of this solution then we realize that we need try out each case from `money=1..200` and `children=2..30`. If we write tests for all cases then we will have **5600** runnings with next distribution of cases:\\n* 3368 times of `drawback > 0`\\n* 2208 times of `drawback < 0`\\n* 406 times of `money < children`\\n* 24 times of `drawback = 4`\\n* 24 times of `drawback === 0`\\n\\nBut is it good idea the calculation of `drawback` to the top? What cheaper in `money < children` of calculating of `drawback`?\\nFor answer to this questions we need to sum of more frequently cases (**5576**) and compare with count of operations for building of `drawback` (**3**) and multiply this by **406** and so obvoius the result of this value much less than **5576**. And it means that it does matter.\\n\\nThen we can calculate operations:\\n```typescript\\nif (money < children) return -1; // 1 op\\nvar drawback = children * 8 - money; // 2 ops\\nif (!drawback) return children; // 1 op\\nif (drawback === 4) // 1 op\\n    return children - 2; // 1 op\\nif (drawback < 0) // 1 op\\n    return children - 1; // 1 op\\nreturn children - Math.ceil(drawback / 7); // 3 ops\\n```\\n\\nIn original solution from top we have 34460 ops. Let\\'s try to optimize that :)\\n-->\\n",
                "solutionTags": [
                    "JavaScript",
                    "Rust",
                    "TypeScript"
                ],
                "code": "```typescript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children)\\n        return -1;\\n\\n    const drawback = children * 8 - money;\\n\\n    if (!drawback)\\n        return children;\\n\\n    if (drawback === 4)\\n        return children - 2;\\n\\n    if (drawback < 0)\\n        return children - 1;\\n\\n    return children - Math.ceil(drawback / 7);\\n}\\n```\n```javascript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children)\\n        return -1;\\n\\n    const drawback = children * 8 - money;\\n\\n    if (!drawback)\\n        return children;\\n\\n    if (drawback === 4)\\n        return children - 2;\\n\\n    if (drawback < 0)\\n        return children - 1;\\n\\n    return children - Math.ceil(drawback / 7);\\n}\\n```\n```rust\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        if money < children {\\n            return -1;\\n        }\\n\\n        let drawback = (children * 8 - money) as f32;\\n\\n        if drawback == 0_f32 {\\n            return children;\\n        }\\n\\n        if drawback == 4_f32 {\\n            return children - 2;\\n        }\\n\\n        if drawback < 0_f32 {\\n            return children - 1;\\n        }\\n\\n        return children - (drawback / 7_f32).ceil() as i32;\\n    }\\n}\\n```\n```typescript\\nfunction distMoney(money: number, children: number): number {\\n    if (money < children) {\\n        return -1;\\n    }\\n\\n    const drawback = children * 8 - money;\\n\\n    if (drawback === 0) {\\n        return children;\\n    }\\n\\n    if (drawback === 4) {\\n        return children - 2;\\n    }\\n\\n    if (drawback < 0) {\\n        return children - 1;\\n    }\\n\\n    return children - (drawback / 7) >> 0;\\n};\\n```\n```typescript\\nif (money < children) return -1; // 1 op\\nvar drawback = children * 8 - money; // 2 ops\\nif (!drawback) return children; // 1 op\\nif (drawback === 4) // 1 op\\n    return children - 2; // 1 op\\nif (drawback < 0) // 1 op\\n    return children - 1; // 1 op\\nreturn children - Math.ceil(drawback / 7); // 3 ops\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3513069,
                "title": "one-liner-to-solve-distribute-money-to-maximum-children",
                "content": "# Intuition\\nThe goal of the problem is to distribute a given amount of money among a certain number of children, following specific rules. We need to find the maximum number of children who can receive exactly 8 dollars. Note, that a one liner approach like this has drawbacks in terms of performance and maintainability...\\n\\n# Approach\\nThe approach used in the code is a concise one-liner that follows the given rules and conditions to determine the maximum number of children who can receive 8 dollars.\\n\\nIf the available money is less than the number of children, it is not possible to distribute the money according to the rules, so the function returns -1.\\nIf the available money is greater than or equal to the number of children, the distribution is possible. The code then calculates the remaining money after distributing 1 dollar to each child.\\nThe code checks the following conditions using ternary operators:\\nIf the remaining money is greater than or equal to 7 times the number of children and has a remainder greater than 0 when divided by 7, it means there is enough money to distribute 8 dollars to each child, except for one child. In this case, the code returns children - 1.\\nIf the remaining money is greater than or equal to 7 times the number of children minus 1 and has a remainder of 3 when divided by 7, it means there is enough money to distribute 8 dollars to each child, except for two children. In this case, the code returns children - 2.\\nFor all other cases, the code returns the minimum value between the number of children and the floor division of the remaining money by 7. This represents the maximum number of children who can receive 8 dollars.\\n\\n# Complexity\\nTime complexity: O(1) - The code has a constant time complexity as it performs a fixed number of operations regardless of the input size.\\nSpace complexity: O(1) - The code uses a constant amount of additional space to store variables and perform calculations.\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nconst distMoney = (money, children) => money < children ? -1 : (count = Math.min(children, Math.floor((money - children) / 7)), rem = money - children - count * 7, (count >= children && rem > 0) ? children - 1 : (count === children - 1 && rem === 3) ? count - 1 : count);\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nconst distMoney = (money, children) => money < children ? -1 : (count = Math.min(children, Math.floor((money - children) / 7)), rem = money - children - count * 7, (count >= children && rem > 0) ? children - 1 : (count === children - 1 && rem === 3) ? count - 1 : count);\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501308,
                "title": "simple-o-1-4-line-solution-js",
                "content": "While the code for this solution is written in JS, the logic applies to all languages.\\n# Intuition\\nThe trick with this problem isn\\'t the algorithm itself, but all of the edge cases that need to be addressed. Based on the instructions, there are 4 potential scenarios:\\n1. There isn\\'t enough money for every child to get 1\\n2. There is more than enough money for every child to get 8\\n3. There is exactly enough money that every child could get 8 except for one that would get 4\\n4. There is some other amount of money that does not fall into the above categories\\n\\nFor each of these scenarios we will need to return a different value:\\n1. Return -1 (since there is no valid way to distribute the money)\\n2. Return one less than the number of children (since all children will get 8 and one will get the extra)\\n3. Return two less than the number of children (since all will get 8 except one that gets 9 and one that gets 3)*\\n4. Return the number of whole groups of 7 in the money that remains after giving every child 1.\\n\\n*The problem specifies that there must be at least 2 children. However, this solution for scenario 3 will also address the case of 1 child with 4 money (since it will return -1, meaning there is no valid distribution).\\n\\nNow that we understand what the scenarios are and what to return, we just need to create expressions to represent each of these.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n - Scenario 1:\\n The approach for this scenario is fairly striaghtforward. We can determine if it applies by checking if `money < children`. Then, just return `-1`.\\n - Scenario 2:\\n This scenario is also straightforward. We can check if it applies by determining if `money > 8 * children`. Then, return `children - 1`.\\n - Scenario 3:\\n This scenario is a bit more specific. We only need to determine if the money matches the exact value `children * 8 - 4`. If this is the case, we can return `children - 2`.\\n - Scenario 4:\\n For the last scenario, this will always be the case if none of the previous scenarios apply. Thus, we can confirm this by placing it after the previous scenarios in the code. Then, we need to return a slightly more complex value. First, we distribute 1 to each child `(money - children)`, then we take a look at how many whole groups of 7 can be made with the remaining money (since 7 + 1 is 8). This will give us the number of children who would get 8. Hence, our return value is `(money - children) / 7` (using integer division)*.\\n\\nThere are many ways to get the result of integer division in JS. One common way is to use the Math library floor() or trunc() functions on the quotient. However, an even faster way is to use 2 of the binary NOT operators (`~`). This will truncate the value to a whole integer (which is what I use in the code below).\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)*\\n*Although this code does not define any new variables, there is still some constant temporary space used for comparisons and evaluating expressions so it is still O(1)\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if (money < children) return -1;\\n    if (money > 8 * children) return (children - 1);\\n    if (money == (children * 8 - 4)) return (children - 2);\\n    return ~~((money - children) / 7);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    if (money < children) return -1;\\n    if (money > 8 * children) return (children - 1);\\n    if (money == (children * 8 - 4)) return (children - 2);\\n    return ~~((money - children) / 7);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3480775,
                "title": "simple-solution-java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) \\n    {\\n        int eightDollarChild = 0,i=0;\\n        int child[] = new int[children]; \\n        Arrays.fill(child,1); \\n        money -= children;\\n\\n        // case when money == children\\n        if(money == 0) \\n            return eightDollarChild;\\n        // case when money < childern \\n        if(money < 0)\\n            return -1; \\n\\n        for(i=0; i<child.length && money >=7; i++)\\n        {       \\n            child[i] += 7; \\n            money -= 7;\\n            eightDollarChild++; \\n        } \\n        if(money == 3 && i == child.length - 1)\\n        {\\n            //case when last child will get 4 dollar \\n            //so we need to change distribution \\n            //of 2nd last child\\n            eightDollarChild--; \\n        }\\n        if(money > 0 && i == child.length)\\n        {\\n            // case when money > children * 8 \\n            //so last child will get extra money \\n            eightDollarChild--; \\n        }\\n        return eightDollarChild; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) \\n    {\\n        int eightDollarChild = 0,i=0;\\n        int child[] = new int[children]; \\n        Arrays.fill(child,1); \\n        money -= children;\\n\\n        // case when money == children\\n        if(money == 0) \\n            return eightDollarChild;\\n        // case when money < childern \\n        if(money < 0)\\n            return -1; \\n\\n        for(i=0; i<child.length && money >=7; i++)\\n        {       \\n            child[i] += 7; \\n            money -= 7;\\n            eightDollarChild++; \\n        } \\n        if(money == 3 && i == child.length - 1)\\n        {\\n            //case when last child will get 4 dollar \\n            //so we need to change distribution \\n            //of 2nd last child\\n            eightDollarChild--; \\n        }\\n        if(money > 0 && i == child.length)\\n        {\\n            // case when money > children * 8 \\n            //so last child will get extra money \\n            eightDollarChild--; \\n        }\\n        return eightDollarChild; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469127,
                "title": "rust-solution-recursive-approach-runtime-0-ms",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        if money < children { return -1; }\\n        if children == 1 {\\n            if money == 4 { return -1; }\\n            if money > 8 { return 0; }\\n        }\\n        return Solution::dist_money(money - 8, children - 1) + 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Recursion"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn dist_money(money: i32, children: i32) -> i32 {\\n        if money < children { return -1; }\\n        if children == 1 {\\n            if money == 4 { return -1; }\\n            if money > 8 { return 0; }\\n        }\\n        return Solution::dist_money(money - 8, children - 1) + 1;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3454094,
                "title": "if-counter-while-break",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money / children == 8:\\n            return children\\n        if money < children:\\n            return -1\\n        counter = 0\\n        while money > 0 and children > 1:\\n            if money < (8 + (children - 1)):\\n                break\\n            counter += 1\\n            children -= 1\\n            money -= 8\\n            if money == 4 and children == 1:\\n                counter -= 1\\n                break\\n        return counter\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if money / children == 8:\\n            return children\\n        if money < children:\\n            return -1\\n        counter = 0\\n        while money > 0 and children > 1:\\n            if money < (8 + (children - 1)):\\n                break\\n            counter += 1\\n            children -= 1\\n            money -= 8\\n            if money == 4 and children == 1:\\n                counter -= 1\\n                break\\n        return counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3441915,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    let res=-1;\\n    money-=children;\\n    if(money>=0) res=0;\\n    while(money>6){\\n        money-=7;\\n        res++;\\n        if(money>0 && children==res){\\n            res--;\\n            money+=7;\\n            break;\\n        }\\n    }\\n    if(money==3 && children-res==1){\\n        res--;\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n    let res=-1;\\n    money-=children;\\n    if(money>=0) res=0;\\n    while(money>6){\\n        money-=7;\\n        res++;\\n        if(money>0 && children==res){\\n            res--;\\n            money+=7;\\n            break;\\n        }\\n    }\\n    if(money==3 && children-res==1){\\n        res--;\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3437491,
                "title": "o-1-solution-using-if-else-statement-clean-and-readable",
                "content": "# Intuition\\nwhen you see the problem you can easily guess that it can be solved using basic if else statement\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\'\\nthere are three cases\\n1. when money is less than no of children\\n2. when money is equal to no of children \\n3. when the money is more than no of children\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       \\n       if(money<children)return -1;\\n       else{\\n        //giving everyone one dollar\\n        money=money-children;\\n        //agar paise hi na bache\\n        if(money==0)return 0;\\n        else {\\n           //if money is left \\n           int temp=money/7;\\n           if(temp==children&&money%7==0)return children;\\n           else if(temp==children&&money%7!=0)return children-1;\\n           else if(temp>children)return children-1;\\n           else if(temp<children and money%7==3 and children-temp==1)\\n           return temp-1;\\n            else if(temp<children and money%7==3 and children-temp!=1)\\n           return temp;\\n           else return temp;\\n\\n\\n            \\n        }\\n\\n       }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n       \\n       if(money<children)return -1;\\n       else{\\n        //giving everyone one dollar\\n        money=money-children;\\n        //agar paise hi na bache\\n        if(money==0)return 0;\\n        else {\\n           //if money is left \\n           int temp=money/7;\\n           if(temp==children&&money%7==0)return children;\\n           else if(temp==children&&money%7!=0)return children-1;\\n           else if(temp>children)return children-1;\\n           else if(temp<children and money%7==3 and children-temp==1)\\n           return temp-1;\\n            else if(temp<children and money%7==3 and children-temp!=1)\\n           return temp;\\n           else return temp;\\n\\n\\n            \\n        }\\n\\n       }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417456,
                "title": "java-simple-explained",
                "content": "**Idea:**\\n* Give $1 to each child\\n* If remainder < 0, then return -1, because this indicates a distribution is impossible\\n* Now we need to give $7 more to max children (eights)\\n* If `eights` = `children` and no money left, then all the children will get $8, return `children`\\n* Else if `eights` = `children - 1` number of children can be given $8 but remainder = $3, it means 1 of the children getting $8 will have to give $2 to the other one, so there will be `children - 2` number of children with $8, 1 with $6 and 1 with $5, so return `children - 2`\\n* Else at most `children - 1` number of children can get $8, but that would depend on how many `eights` we have remaining, so the min of these 2 will be the limiting factor, so return `min(eights, children - 1)`. This is the only tricky part here.\\n>**T/S:** O(1)/O(1)\\n```\\npublic int distMoney(int money, int children) {\\n\\tmoney -= children;\\n\\tif (money < 0)\\n\\t\\treturn -1;\\n\\n\\tvar eights = money / 7;\\n\\tvar remainder = money % 7;\\n\\n\\tif (eights == children && remainder == 0)\\n\\t\\treturn children;\\n\\tif (eights == children - 1 && remainder == 3)\\n\\t\\treturn children - 2;\\n\\treturn Math.min(eights, children - 1);\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int distMoney(int money, int children) {\\n\\tmoney -= children;\\n\\tif (money < 0)\\n\\t\\treturn -1;\\n\\n\\tvar eights = money / 7;\\n\\tvar remainder = money % 7;\\n\\n\\tif (eights == children && remainder == 0)\\n\\t\\treturn children;\\n\\tif (eights == children - 1 && remainder == 3)\\n\\t\\treturn children - 2;\\n\\treturn Math.min(eights, children - 1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3411834,
                "title": "c-o-1-explained-with-examples-for-each-case",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nGive 8 money to as many children as possible and then make adjustments\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nmaths and greedy\\ncase 1: insufficient money: return 0\\ncase 2: if money available is more even if all children get 8 money\\ncase 3: if 8 is distributed and 1 child remains who with 4 money remaining\\ncase 4: if all children have 8\\'s but some money is left\\ncase 5: if after distribution the leftover money is satifsying remaining children\\ncase 6: we have insufficient left over money so we have to take from children having 8\\n\\n\\nNote: maybe the number of cases can be reduced, please comment for improvements. \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // case 1: insufficient money \\n        // eg : money: 8 children 9\\n        if(children>money){\\n            return -1;\\n        }\\n        \\n     \\n        int eightChildren = money/8;\\n\\n        // case 2\\n        // eg money 50 children 2 split: (8,42)  \\n        if(eightChildren>children){\\n            return children-1;\\n        }\\n        int leftMoney = money - eightChildren*8;\\n        int leftChildren = children - eightChildren;\\n       \\n        // case 3 \\n        // eg money 12 children 2 split: (9,3)\\n        if(leftChildren==1 and leftMoney==4){\\n            if(eightChildren >= 1)\\n                return eightChildren -1;\\n            return eightChildren;\\n        }\\n        // case 4 \\n        // money 17 children 2 split: (8,9)\\n        if(eightChildren == children and leftMoney>0){\\n            return eightChildren - 1;\\n        }\\n\\n\\n        // case 5\\n        // eg money 21 children 3 split: (8,8,5)\\n        if(leftChildren==0 or leftChildren<=leftMoney or eightChildren==0)\\n            return eightChildren;\\n    \\n        //case 6\\n        // eg 16 children 3 split: (8,7,1)\\n        return eightChildren - ((leftChildren-leftMoney)/7 + ((leftChildren-leftMoney)%7!=0));\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        // case 1: insufficient money \\n        // eg : money: 8 children 9\\n        if(children>money){\\n            return -1;\\n        }\\n        \\n     \\n        int eightChildren = money/8;\\n\\n        // case 2\\n        // eg money 50 children 2 split: (8,42)  \\n        if(eightChildren>children){\\n            return children-1;\\n        }\\n        int leftMoney = money - eightChildren*8;\\n        int leftChildren = children - eightChildren;\\n       \\n        // case 3 \\n        // eg money 12 children 2 split: (9,3)\\n        if(leftChildren==1 and leftMoney==4){\\n            if(eightChildren >= 1)\\n                return eightChildren -1;\\n            return eightChildren;\\n        }\\n        // case 4 \\n        // money 17 children 2 split: (8,9)\\n        if(eightChildren == children and leftMoney>0){\\n            return eightChildren - 1;\\n        }\\n\\n\\n        // case 5\\n        // eg money 21 children 3 split: (8,8,5)\\n        if(leftChildren==0 or leftChildren<=leftMoney or eightChildren==0)\\n            return eightChildren;\\n    \\n        //case 6\\n        // eg 16 children 3 split: (8,7,1)\\n        return eightChildren - ((leftChildren-leftMoney)/7 + ((leftChildren-leftMoney)%7!=0));\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404211,
                "title": "python-solution-explanation-in-code",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if(children>money):\\n            return -1\\n        max_possible=children*8\\n\\n        # enough money to distribute 8 coins to all the children except the last, as the child needs to have all remaining\\n        if(money>max_possible):\\n            return children-1\\n        \\n        # money and children are exact\\n        elif(money==max_possible):\\n            return children\\n        \\n        # money is less and children are more, so need distribute at per the more rules as below\\n        else:\\n            # find the number of possible children which can have 8 coins each\\n            money_possible_children=money//8\\n            # all the other children who do not get 8 coins\\n            rem_children=children-money_possible_children\\n            # remaining money after distributing to \\'\\'money_possible_children\\'\\' children 8 coins each\\n            rem_money=money-money_possible_children*8\\n\\n            # as every children needs to have 1 coin, we need to make rem_money > rem_children\\n            while(rem_children>rem_money):\\n                money_possible_children-=1\\n                rem_children+=1\\n                rem_money+=8\\n\\n            # one case where rem_money=4 and rem_children=1, we need to reduce, else other cases we can alter the amount\\n            if(rem_money==4 and rem_children==1):\\n                money_possible_children-=1\\n            return money_possible_children\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        if(children>money):\\n            return -1\\n        max_possible=children*8\\n\\n        # enough money to distribute 8 coins to all the children except the last, as the child needs to have all remaining\\n        if(money>max_possible):\\n            return children-1\\n        \\n        # money and children are exact\\n        elif(money==max_possible):\\n            return children\\n        \\n        # money is less and children are more, so need distribute at per the more rules as below\\n        else:\\n            # find the number of possible children which can have 8 coins each\\n            money_possible_children=money//8\\n            # all the other children who do not get 8 coins\\n            rem_children=children-money_possible_children\\n            # remaining money after distributing to \\'\\'money_possible_children\\'\\' children 8 coins each\\n            rem_money=money-money_possible_children*8\\n\\n            # as every children needs to have 1 coin, we need to make rem_money > rem_children\\n            while(rem_children>rem_money):\\n                money_possible_children-=1\\n                rem_children+=1\\n                rem_money+=8\\n\\n            # one case where rem_money=4 and rem_children=1, we need to reduce, else other cases we can alter the amount\\n            if(rem_money==4 and rem_children==1):\\n                money_possible_children-=1\\n            return money_possible_children\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404034,
                "title": "java-complexity-o-1-memory-o-1-beats-100",
                "content": "# Description \\nSee comments in code\\n\\n# Complexity\\n- Time complexity:$$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic static int distMoney(int money, int children) {\\n\\n        // Distribute 1 dollar per each child\\n        int moneyDistr = money - children;\\n\\n        // Everyone must receive at least 1 dollar.\\n        if (moneyDistr<0){\\n            return -1;\\n        }\\n\\n        // None can receive 8 dollars\\n        if (moneyDistr < 7 && moneyDistr >= 0){\\n            return 0;\\n        }\\n\\n        // Rule 1. All money must be distributed.\\n        // redistribute all money that each should have\\n        int childrenwith8 = moneyDistr/7;\\n\\n        // if childrenwith8 more than children,\\n        // then all children except one will receive 8 dollars\\n        // one will receive greater.\\n        // consider 100 dollars and 2 children 8+8+84\\n        if (childrenwith8 > children){\\n            childrenwith8=children-1;\\n            return childrenwith8;\\n        }\\n\\n        int remainder = moneyDistr % 7;\\n\\n        // if money remains but all children got 8, then last one will get a bit more\\n        if (remainder > 0 && childrenwith8==children){\\n            childrenwith8--;\\n        // if remainder 3 and one child got 1 dollar then we can\\'t get 3 dollars\\n        // to one child and redistribute money between child with 8 dollars and 1 dollar\\n        // Rule 3. Nobody receives 4 dollars.\\n        }else if (remainder==3 && (children-childrenwith8)==1){\\n            childrenwith8--;\\n        }\\n\\n        return childrenwith8<0?-1:childrenwith8;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic static int distMoney(int money, int children) {\\n\\n        // Distribute 1 dollar per each child\\n        int moneyDistr = money - children;\\n\\n        // Everyone must receive at least 1 dollar.\\n        if (moneyDistr<0){\\n            return -1;\\n        }\\n\\n        // None can receive 8 dollars\\n        if (moneyDistr < 7 && moneyDistr >= 0){\\n            return 0;\\n        }\\n\\n        // Rule 1. All money must be distributed.\\n        // redistribute all money that each should have\\n        int childrenwith8 = moneyDistr/7;\\n\\n        // if childrenwith8 more than children,\\n        // then all children except one will receive 8 dollars\\n        // one will receive greater.\\n        // consider 100 dollars and 2 children 8+8+84\\n        if (childrenwith8 > children){\\n            childrenwith8=children-1;\\n            return childrenwith8;\\n        }\\n\\n        int remainder = moneyDistr % 7;\\n\\n        // if money remains but all children got 8, then last one will get a bit more\\n        if (remainder > 0 && childrenwith8==children){\\n            childrenwith8--;\\n        // if remainder 3 and one child got 1 dollar then we can\\'t get 3 dollars\\n        // to one child and redistribute money between child with 8 dollars and 1 dollar\\n        // Rule 3. Nobody receives 4 dollars.\\n        }else if (remainder==3 && (children-childrenwith8)==1){\\n            childrenwith8--;\\n        }\\n\\n        return childrenwith8<0?-1:childrenwith8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3403262,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n   \\n  if (money < children) return -1;\\n  let ans = 0;\\n  for (let j = 1; j <= children; j++) {\\n    let leftmoney = money - 8;\\n    let leftchildren = children - j;\\n    if (leftmoney >= leftchildren) {\\n      money = leftmoney;\\n      ans += 1;\\n    } else {\\n      leftchildren = children - j + 1;\\n      if (leftchildren == 1 && money == 4) {\\n        ans -= 1;\\n      }\\n      money = 0;\\n      break;\\n    }\\n  }\\n  if (money > 0) {\\n    ans -= 1;\\n  }\\n  return ans;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} money\\n * @param {number} children\\n * @return {number}\\n */\\nvar distMoney = function(money, children) {\\n   \\n  if (money < children) return -1;\\n  let ans = 0;\\n  for (let j = 1; j <= children; j++) {\\n    let leftmoney = money - 8;\\n    let leftchildren = children - j;\\n    if (leftmoney >= leftchildren) {\\n      money = leftmoney;\\n      ans += 1;\\n    } else {\\n      leftchildren = children - j + 1;\\n      if (leftchildren == 1 && money == 4) {\\n        ans -= 1;\\n      }\\n      money = 0;\\n      break;\\n    }\\n  }\\n  if (money > 0) {\\n    ans -= 1;\\n  }\\n  return ans;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3395650,
                "title": "o-1-brain-teaser",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int distMoney(int money, int children) {\\n    int c = children;\\n    if (money < children) {\\n      return -1;\\n    }\\n    if (money < children + 7) {\\n      return 0;\\n    }\\n    int q = money / 8;\\n    int r = money % 8;\\n    if (q > c) {\\n      return c - 1;\\n    }\\n    if (q == c) {\\n      return r == 0 ? q : q - 1;\\n    }\\n    if (r >= c - q) {\\n      return r == 4 && c - q == 1 ? q - 1 : q;\\n    }\\n    return q - (c - q - r + 6) / 7;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int distMoney(int money, int children) {\\n    int c = children;\\n    if (money < children) {\\n      return -1;\\n    }\\n    if (money < children + 7) {\\n      return 0;\\n    }\\n    int q = money / 8;\\n    int r = money % 8;\\n    if (q > c) {\\n      return c - 1;\\n    }\\n    if (q == c) {\\n      return r == 0 ? q : q - 1;\\n    }\\n    if (r >= c - q) {\\n      return r == 4 && c - q == 1 ? q - 1 : q;\\n    }\\n    return q - (c - q - r + 6) / 7;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391722,
                "title": "simple-o-1-approach-java",
                "content": "# Intuition/Approach\\n\\n**Step 1** - Distributed Re.1 each to all the children. ``UpdatedMoneyValue -= children``\\n*Note - After this step, the problem has changed to - distributing Rs.7 to the children, and make sure no one gets Rs.3 (As we have already distributed Re.1 to each children)*\\n\\n**Step 2** - Basic validations like if there is money for children or not.\\n\\n**Step 3** - Now, we\\'ll calculate a few things - \\n```\\n1. maximum children that can get desired amount = UpdatedMoneyValue/7\\n2. money left after distributing eqaully in max children = UpdatedMoneyValue%7\\n3. children who were not a part of Point1 = total children - children in Point 1\\n```\\n\\n**Step 4** - Now see, if number of children in Point 3.3 is less then 0, that means, we have excess of money which can be divided equally, so we\\'ll divide the money equally in ``children - 1`` and dump all the excess money with one of the child. Return then answer.\\n\\n**Step 5** - Now, lets take this case - where ``money left in Point 3.2 is 3`` and ``children left in Point 3.3 is 1``, then in this case, we have to take one child from ``children from Point 3.1`` and divide this Rs.3 amongst these two children, so that no one end up with Rs.3. Hence, return ``maximum children from Point 3.1 - (1)`` as the answer.\\n\\n**Step 6** - Last case, what if we have some ``money left in Point 3.2`` but no ``children left in Point 3.3``. So, we\\'ll take a ``child from Point 3.1`` and dump all the money to it. Hence, return ``maximum children from Point 3.1 - (1)`` as the answer.\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n\\n        money -= children;\\n        if (money < 0) {\\n            return -1;\\n        } else if (money < 7) {\\n            return 0;\\n        }\\n        \\n        int maxChildrenWhoCanGet = money/7;\\n        int moneyLeft = money%7;\\n        int childrenLeft = children-maxChildrenWhoCanGet;\\n\\n        if (childrenLeft < 0) {\\n            return children-1;\\n        }\\n        else if (moneyLeft == 3 && childrenLeft == 1) {\\n            return maxChildrenWhoCanGet - 1;\\n        } \\n        else if (moneyLeft > 0 && childrenLeft == 0) {\\n            return maxChildrenWhoCanGet - 1;\\n        }\\n        return maxChildrenWhoCanGet;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n1. maximum children that can get desired amount = UpdatedMoneyValue/7\\n2. money left after distributing eqaully in max children = UpdatedMoneyValue%7\\n3. children who were not a part of Point1 = total children - children in Point 1\\n```\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n\\n        money -= children;\\n        if (money < 0) {\\n            return -1;\\n        } else if (money < 7) {\\n            return 0;\\n        }\\n        \\n        int maxChildrenWhoCanGet = money/7;\\n        int moneyLeft = money%7;\\n        int childrenLeft = children-maxChildrenWhoCanGet;\\n\\n        if (childrenLeft < 0) {\\n            return children-1;\\n        }\\n        else if (moneyLeft == 3 && childrenLeft == 1) {\\n            return maxChildrenWhoCanGet - 1;\\n        } \\n        else if (moneyLeft > 0 && childrenLeft == 0) {\\n            return maxChildrenWhoCanGet - 1;\\n        }\\n        return maxChildrenWhoCanGet;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381063,
                "title": "c-o-1-o-1",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        if (money < children) {\\n            return -1;\\n        }\\n\\n        if (money == children * 8) {\\n            return children;\\n        }\\n\\n        if (money > children * 8) {\\n            return children - 1;\\n        }\\n\\n        money = money - children;\\n        ans = money / 7;\\n        money = money % 7;\\n\\n        if (children - ans == 1 && money == 3) {\\n            --ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans = 0;\\n        if (money < children) {\\n            return -1;\\n        }\\n\\n        if (money == children * 8) {\\n            return children;\\n        }\\n\\n        if (money > children * 8) {\\n            return children - 1;\\n        }\\n\\n        money = money - children;\\n        ans = money / 7;\\n        money = money % 7;\\n\\n        if (children - ans == 1 && money == 3) {\\n            --ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380207,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        \\n        money -= children \\n        if money <0: return -1 \\n        p, r = divmod(money,7)\\n        \\n        if p==children and r == 0 : return p\\n        if p >= children : \\n            return children -1 \\n        if p == 0 : return 0 \\n        if (r==3 and p == children-1): \\n            return p-1 \\n        return p \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        \\n        money -= children \\n        if money <0: return -1 \\n        p, r = divmod(money,7)\\n        \\n        if p==children and r == 0 : return p\\n        if p >= children : \\n            return children -1 \\n        if p == 0 : return 0 \\n        if (r==3 and p == children-1): \\n            return p-1 \\n        return p \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3378855,
                "title": "java-greedy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n    money -= children;\\n    //1 dollar to each \\n    if (money < 0)\\n        return -1;\\n        //less money\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n        //every body gets exactly 8\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n        //child cant get exactly 4 dollars\\n    return Math.min(children - 1, money / 7);\\n    // money/7 > children then give remainder to one child \\n    // so children-1 can get exactly 8\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n    money -= children;\\n    //1 dollar to each \\n    if (money < 0)\\n        return -1;\\n        //less money\\n    if (money / 7 == children && money % 7 == 0)\\n        return children;\\n        //every body gets exactly 8\\n    if (money / 7 == children - 1 && money % 7 == 3)\\n        return children - 2;\\n        //child cant get exactly 4 dollars\\n    return Math.min(children - 1, money / 7);\\n    // money/7 > children then give remainder to one child \\n    // so children-1 can get exactly 8\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3370852,
                "title": "c-cases",
                "content": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children)\\n            return -1;\\n        int req = money/8;\\n        int left = money%8;\\n        if (req > children) {\\n            left += (req - children)*8;\\n            req = children;\\n        }\\n        while (req > 0 && children - req > left) {\\n            req--;\\n            left += 8;\\n        }\\n        if (req == children && left > 0)\\n            return req - 1;\\n        if (req == children - 1 && left == 4)\\n            return req - 1;\\n        return req;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        if (money < children)\\n            return -1;\\n        int req = money/8;\\n        int left = money%8;\\n        if (req > children) {\\n            left += (req - children)*8;\\n            req = children;\\n        }\\n        while (req > 0 && children - req > left) {\\n            req--;\\n            left += 8;\\n        }\\n        if (req == children && left > 0)\\n            return req - 1;\\n        if (req == children - 1 && left == 4)\\n            return req - 1;\\n        return req;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3364674,
                "title": "rule-based",
                "content": "# Intuition\\nRule based by looking for best solution and deduct the answer in order to satisfy the requirement given in the problem.\\n\\n# Approach\\nRule based. The explanation is given as comment in the code.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # No way to satisfy the condition required by the problem.\\n        if money < children: return -1\\n\\n        # Distribute 8 to a specific children \\n        # and the rest money are enough to distribute to\\n        # the rest children\\n        ans = 0\\n        rest_children = children\\n        while rest_children + 7 <= money and rest_children > 0:\\n            ans += 1\\n            rest_children -= 1\\n            money -= 8\\n\\n\\n        if rest_children == 1 and money == 4:\\n            # We only have one child left.\\n            # However, we still have 4 dollars.\\n            if ans > 0: ans -= 1  # Give one dollar to children with 8 dollars\\n            else: return -1  # No way to satisfy the condition required by the problem.\\n\\n        if rest_children == 0 and money > 0:\\n            # All children got 8 coins. But we still have money.\\n            # Put all rest money to one child.\\n            ans -= 1\\n\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n        # No way to satisfy the condition required by the problem.\\n        if money < children: return -1\\n\\n        # Distribute 8 to a specific children \\n        # and the rest money are enough to distribute to\\n        # the rest children\\n        ans = 0\\n        rest_children = children\\n        while rest_children + 7 <= money and rest_children > 0:\\n            ans += 1\\n            rest_children -= 1\\n            money -= 8\\n\\n\\n        if rest_children == 1 and money == 4:\\n            # We only have one child left.\\n            # However, we still have 4 dollars.\\n            if ans > 0: ans -= 1  # Give one dollar to children with 8 dollars\\n            else: return -1  # No way to satisfy the condition required by the problem.\\n\\n        if rest_children == 0 and money > 0:\\n            # All children got 8 coins. But we still have money.\\n            # Put all rest money to one child.\\n            ans -= 1\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363627,
                "title": "binary-search-similar-to-allocating-pages-of-books",
                "content": "# Intuition\\nMaximize the number of childerns getting 8 amt of money while satisfying the given conditions. \\n\\n# Approach\\nSimilar to these type of questions : https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/ \\n\\n# Complexity\\n- Time complexity:O(logn)\\nwhere n is the number of childrens\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool check(int money , int lc, int c){\\n        if(money < 8*lc){\\n            return false;\\n        }\\n        money -= 8*lc;\\n        c = c - lc;\\n        if(money < c){\\n            return false;\\n        }\\n        if(money == 4 && c == 1){\\n            return false;\\n        }\\n        if(c == 0 && money>0){\\n            return false;\\n        }\\n        return true;\\n    }\\n    int distMoney(int money, int children) {\\n        int start = 0 , end = children;\\n        int ans = -1;\\n        while(start <= end){\\n            int mid = start + (end-start)/2;\\n            if(check(money, mid, children)){\\n                ans = mid;\\n                start = mid+1;\\n            }else{\\n                end = mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool check(int money , int lc, int c){\\n        if(money < 8*lc){\\n            return false;\\n        }\\n        money -= 8*lc;\\n        c = c - lc;\\n        if(money < c){\\n            return false;\\n        }\\n        if(money == 4 && c == 1){\\n            return false;\\n        }\\n        if(c == 0 && money>0){\\n            return false;\\n        }\\n        return true;\\n    }\\n    int distMoney(int money, int children) {\\n        int start = 0 , end = children;\\n        int ans = -1;\\n        while(start <= end){\\n            int mid = start + (end-start)/2;\\n            if(check(money, mid, children)){\\n                ans = mid;\\n                start = mid+1;\\n            }else{\\n                end = mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359886,
                "title": "best-cpp-soluton-apprach-greedy-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans =0;\\n\\n        if(money<children)return -1;\\n\\n        if(money>children*8)return children-1;\\n\\n        while(money>0 && money-8 >= children-1){\\n            ans++;\\n            money-=8;\\n            children-=1;\\n        }\\n        if(money == 4 && children == 1) ans--;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distMoney(int money, int children) {\\n        int ans =0;\\n\\n        if(money<children)return -1;\\n\\n        if(money>children*8)return children-1;\\n\\n        while(money>0 && money-8 >= children-1){\\n            ans++;\\n            money-=8;\\n            children-=1;\\n        }\\n        if(money == 4 && children == 1) ans--;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358311,
                "title": "java-simple-o-1-solution-with-explanation-in-code",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        \\n        if (money < children) {\\n            return -1;\\n        }\\n\\n        // give every child by 1 coin.\\n        money -= children;\\n        \\n        // how many of children can get 8 coins:\\n        var eights = money / 7;\\n        var reminder = money % 7;\\n       \\n        // if all children except one got 8, and last one got 4 - need to remove one 8.\\n        if (eights == children -1 && reminder == 3) {\\n            eights--;\\n        }\\n        // 1. if all children got 8 and some more left  - remove one 8.\\n        else if (eights == children && reminder >0 || eights > children ) {\\n            eights = Math.min(children, eights);\\n            eights--;\\n        }\\n        \\n        return eights;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distMoney(int money, int children) {\\n        \\n        if (money < children) {\\n            return -1;\\n        }\\n\\n        // give every child by 1 coin.\\n        money -= children;\\n        \\n        // how many of children can get 8 coins:\\n        var eights = money / 7;\\n        var reminder = money % 7;\\n       \\n        // if all children except one got 8, and last one got 4 - need to remove one 8.\\n        if (eights == children -1 && reminder == 3) {\\n            eights--;\\n        }\\n        // 1. if all children got 8 and some more left  - remove one 8.\\n        else if (eights == children && reminder >0 || eights > children ) {\\n            eights = Math.min(children, eights);\\n            eights--;\\n        }\\n        \\n        return eights;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3356166,
                "title": "neat-and-easy-to-understand-python-and-javascript",
                "content": "# Intuition\\nVery messy logics. Better to handle with recursion.\\n\\n# Approach\\nBase case is 2 children. \\nCheck the edge cases and reduce the cases to 1 children less.\\n\\n# Code\\nPython 3\\n```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n      if money < children: return -1\\n      if money == children * 8: return children\\n      \\n      if children == 2:\\n        if money == 12: return 0\\n        if money < 9: return 0\\n        return 1\\n\\n      if money < 8 + children - 1: return 0\\n      return 1 + self.distMoney(money-8, children-1)       \\n```\\nJavascript\\n```\\nvar distMoney = function(money, children) {\\n  if (money < children) return -1;\\n  if (money === 8 * children) return children;\\n\\n  if (children == 2) {\\n    if (money == 12) return 0;\\n    if (money < 9) return 0; \\n    return 1;\\n  }\\n  \\n  if (money < 8 + children - 1) return 0;\\n  return 1 + distMoney(money-8, children-1);\\n};\\n```",
                "solutionTags": [
                    "Python3",
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def distMoney(self, money: int, children: int) -> int:\\n      if money < children: return -1\\n      if money == children * 8: return children\\n      \\n      if children == 2:\\n        if money == 12: return 0\\n        if money < 9: return 0\\n        return 1\\n\\n      if money < 8 + children - 1: return 0\\n      return 1 + self.distMoney(money-8, children-1)       \\n```\n```\\nvar distMoney = function(money, children) {\\n  if (money < children) return -1;\\n  if (money === 8 * children) return children;\\n\\n  if (children == 2) {\\n    if (money == 12) return 0;\\n    if (money < 9) return 0; \\n    return 1;\\n  }\\n  \\n  if (money < 8 + children - 1) return 0;\\n  return 1 + distMoney(money-8, children-1);\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1836126,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836204,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836118,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836167,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836203,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836257,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836564,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836464,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836168,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836302,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836126,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836204,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836118,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836167,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836203,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836257,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836564,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836464,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836168,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1836302,
                "content": [
                    {
                        "username": "harshitch03",
                        "content": "The most annoying question award goes to this question.!"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I think the question is not bad. The thing is, it is really sneaky cause it looks easy (but there\\'s so many edge cases that it really isn\\'t at all).\\nAnd then of course, leetcode had the disastrous idea to label it easy. I think it\\'d be a good problem if it was only labeled correctly"
                    },
                    {
                        "username": "rruana",
                        "content": "here to downvote this question"
                    },
                    {
                        "username": "Nikhil_G002109",
                        "content": "I\\'m here to upvote you!"
                    },
                    {
                        "username": "kontsis",
                        "content": "This has gotta be the worst q1 in contest history"
                    },
                    {
                        "username": "pwyq",
                        "content": "14.8% acceptance rate for an easy leetcode contest Q1. kek"
                    },
                    {
                        "username": "kuuhaku1019",
                        "content": "Failed 15 times on easy question :)"
                    },
                    {
                        "username": "amit24x",
                        "content": "This type of question will only demotivate our motivation."
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "true\\n"
                    },
                    {
                        "username": "karan_cpp_py",
                        "content": "first -56 in codeforces div 2, and then comes this question. solved 0/4 today."
                    },
                    {
                        "username": "pulkitsxn096",
                        "content": "15.8% acceptance rate for a first question in a contest, but really nice to have these question which tells to not underestimate a easy tagged question."
                    },
                    {
                        "username": "Samarth_Dengre",
                        "content": "Why make such question which requires hardcoded if-else"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "this problem should be in the medium category"
                    }
                ]
            },
            {
                "id": 1904355,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1836435,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1836361,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1836122,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1836084,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1836554,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 2033137,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 2031512,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 2024672,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 2004804,
                "content": [
                    {
                        "username": "SahilNikam",
                        "content": "Every Time you solve any wrong answer of a  testcase new wrong testcase will come."
                    },
                    {
                        "username": "aDDyy",
                        "content": "One of the toughest easy tagged question i have ever solved😖...must be marked medium🤨..if easy tagged questions will have this kind of level then leetcode will be another codeforce/codechef😑😡"
                    },
                    {
                        "username": "MdoingIt",
                        "content": "worst question to be made ever and inaccurate difficulty "
                    },
                    {
                        "username": "suren-yeager",
                        "content": "acceptance rate for an easy que !! lmao"
                    },
                    {
                        "username": "n33raj18",
                        "content": "Here come the downvotes lol. Could be easy but just couldn\\'t get it in the end."
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "The question wasn\\'t that difficult as people claim it to be. Also, it\\'s bad to see so many downvotes just because you weren\\'t able to solve it? The question is stated clearly and doesn\\'t have confusing language."
                    },
                    {
                        "username": "vizzy205",
                        "content": "Dude no one thinks this is difficult. Downvotes is just because others or even me solving it again should know this was very annoying for an easy question and it will be time consuming."
                    },
                    {
                        "username": "janis__",
                        "content": "Very intresting task to solve it."
                    },
                    {
                        "username": "221210099",
                        "content": "worst question to deal with"
                    },
                    {
                        "username": "dsapelnikov",
                        "content": "The author is just a jerk. I won't apologise for my words."
                    },
                    {
                        "username": "aragil",
                        "content": "Everyone is hating on this and I was too, but it was pretty fun and taught me something very subtle about using divmod."
                    }
                ]
            },
            {
                "id": 1983537,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1977766,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1904351,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1839066,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1838746,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1837722,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1837248,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1836667,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1836403,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            },
            {
                "id": 1836348,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "took me a while to finally come up with a perfectly working solution.... this is definitely not an easy question IMO...."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "185 likes, 660 dislikes... \\nDefinitely worth trying!  \\uD83D\\uDE02\\u2620\\uFE0F"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "I think description of the problem is wrong.\\nthey said \" maximum number of children who may receive exactly 8 dollars\" and \" you must distribute the money \" that means you must distribute all money.\\n\\nthey have not mentioned that if anyone got more than 8 dollars then It\\'s ok.\\n17\\n2\\nhere why expected answer is 2 not 1 ?"
                    },
                    {
                        "username": "RAKSHITH_SP",
                        "content": "the example clearly stats that a child can have more than 8 dollars."
                    },
                    {
                        "username": "KautsIITD",
                        "content": "Just when I thought I could solve it in one go after reading all the feedback first.. Still takes 3 Wrong Answers to arrive at accepted one.. \\uD83D\\uDE02"
                    },
                    {
                        "username": "Msey",
                        "content": "what\\'s the point of \"money (in **dollars**)\"? "
                    },
                    {
                        "username": "deepVashisth",
                        "content": "It was not the easy Question LeetCode \\nMark it as Medium"
                    },
                    {
                        "username": "dmitryartux",
                        "content": "**It\\'s a nightmare**"
                    },
                    {
                        "username": "bortengineer",
                        "content": "This is actually a great interview question. No \"aha!\" - pure technique. "
                    },
                    {
                        "username": "czjnbb",
                        "content": "Very very annoying..."
                    },
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "one of the worst question..\\uD83D\\uDE23\\uD83D\\uDE23\\uD83D\\uDE23"
                    }
                ]
            }
        ]
    }
]