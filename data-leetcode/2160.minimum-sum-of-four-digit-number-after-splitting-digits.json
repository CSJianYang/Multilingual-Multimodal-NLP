[
    {
        "title": "Minimum Sum of Four Digit Number After Splitting Digits",
        "question_content": "You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.\n\n\tFor example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].\n\nReturn the minimum possible sum of new1 and new2.\n&nbsp;\nExample 1:\n\nInput: num = 2932\nOutput: 52\nExplanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.\n\nExample 2:\n\nInput: num = 4009\nOutput: 13\nExplanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. \nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.\n\n&nbsp;\nConstraints:\n\n\t1000 <= num <= 9999",
        "solutions": [
            {
                "id": 1747526,
                "title": "c-easy-solution-0-ms",
                "content": "```\\nclass Solution{\\npublic:\\n    int minimumSum(int num){\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int res = (s[0] - \\'0\\' + s[1] - \\'0\\') * 10 + s[2] - \\'0\\' + s[3] - \\'0\\';\\n        return res;\\n    }\\n};\\n```\\nDo **Upvote** if you like the solution :)",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution{\\npublic:\\n    int minimumSum(int num){\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int res = (s[0] - \\'0\\' + s[1] - \\'0\\') * 10 + s[2] - \\'0\\' + s[3] - \\'0\\';\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1746997,
                "title": "java-straightforward",
                "content": "```\\nclass Solution\\n{\\n    public int minimumSum(int num)\\n    {\\n        int[] dig = new int[4]; // For each digit\\n        int cur = 0;\\n        while(num > 0) // Getting each digit\\n        {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(dig); // Ascending order\\n        int num1 = dig[0] * 10 + dig[2]; // 1st and 3rd digit\\n        int num2 = dig[1] * 10 + dig[3]; // 2nd and 4th digit\\n        return num1 + num2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int minimumSum(int num)\\n    {\\n        int[] dig = new int[4]; // For each digit\\n        int cur = 0;\\n        while(num > 0) // Getting each digit\\n        {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(dig); // Ascending order\\n        int num1 = dig[0] * 10 + dig[2]; // 1st and 3rd digit\\n        int num2 = dig[1] * 10 + dig[3]; // 2nd and 4th digit\\n        return num1 + num2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747018,
                "title": "python-simple-fast-with-explanation-no-permutation",
                "content": "Please upvote if you like my solution. Let me know in the comments if you have any suggestions to increase performance or readability. \\n\\n**Notice** that:\\n1. We do not need to generate all possible combinations of spliting the input into two numbers. In the ideal solution, num1 and num2 will always be of equal length.\\n2. We will step by step build num1 and num2 as we go through the algorithm. It is not necessary to generate all combinations of num1 and num2 (with both numbers having equal length).\\n3. We do not need to save num1 and num2 in a variable. We can keep adding to the total sum as we go through the algorithm. \\n4. The algorithm below works for any input length. If you want you can simplify it, since you know the input length is 4. \\n\\n**My algorithm** goes as follows:\\n1. convert the input into a list of digits\\n2. sort the list of digits in descending order\\n3. iterate through the list of digits\\n3.1 with each iteration, multiply the current digit with 10*current position in num1/num2. \\n3.2 add the current digit to the result\\n3.3 if you already added an even number of digits to the total of results, then increase the current position by one\\n4. return result\\n\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        n = len(num)    \\n        res = 0\\n        even_iteration = False\\n        position = 0\\n        for i in range(n):\\n            res += int(num[i])*(10**position)\\n            if even_iteration:\\n                position += 1\\n                even_iteration = False\\n            else:\\n                even_iteration = True\\n        return res\\n```\\n\\nif you know that the input is going to be exaclty 4 digits, you can simplify it:\\n\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        return int(num[0]) + int(num[1]) + int(num[2])*10 + int(num[3])*10\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        n = len(num)    \\n        res = 0\\n        even_iteration = False\\n        position = 0\\n        for i in range(n):\\n            res += int(num[i])*(10**position)\\n            if even_iteration:\\n                position += 1\\n                even_iteration = False\\n            else:\\n                even_iteration = True\\n        return res\\n```\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        return int(num[0]) + int(num[1]) + int(num[2])*10 + int(num[3])*10\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747007,
                "title": "c-sorting-greedy",
                "content": "\\n\\nSee my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1. Sorting + Greedy\\n\\nGet the 4 digits from `n`. Assume they are `a <= b <= c <= d`, the sum is minimum when `new1 = ac` and `new2 = bd`.\\n\\nSo, the answer is `10 * (a + b) + (c + d)`.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/biweekly-contest-71/problems/minimum-sum-of-four-digit-number-after-splitting-digits/\\n// Author: github.com/lzl124631x\\n// Time: O(1) or more specifically, O(KlogK), where `K` is the number of digits in `n`\\n// Space: O(1) or O(K)\\nclass Solution {\\npublic:\\n    int minimumSum(int n) {\\n        int d[4] = {};\\n        for (int i = 0; i < 4; ++i, n /= 10) d[i] = n % 10;\\n        sort(begin(d), end(d));\\n        return 10 * (d[0] + d[1]) + d[2] + d[3];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/biweekly-contest-71/problems/minimum-sum-of-four-digit-number-after-splitting-digits/\\n// Author: github.com/lzl124631x\\n// Time: O(1) or more specifically, O(KlogK), where `K` is the number of digits in `n`\\n// Space: O(1) or O(K)\\nclass Solution {\\npublic:\\n    int minimumSum(int n) {\\n        int d[4] = {};\\n        for (int i = 0; i < 4; ++i, n /= 10) d[i] = n % 10;\\n        sort(begin(d), end(d));\\n        return 10 * (d[0] + d[1]) + d[2] + d[3];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747659,
                "title": "two-and-two",
                "content": "We should always do a 2/2 split. 1/3 splits produce large sums. \\n\\nSo, we pick two smallest digits to be in the decimal\\'s place, and two largest - one\\'s place. \\n\\n**C++**\\n```cpp\\nint minimumSum(int num) {\\n    auto s = to_string(num);\\n    nth_element(begin(s), begin(s) + 1, end(s));\\n    return (s[0] -\\'0\\' + s[1] - \\'0\\') * 10 + s[2] - \\'0\\' + s[3] - \\'0\\';\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint minimumSum(int num) {\\n    auto s = to_string(num);\\n    nth_element(begin(s), begin(s) + 1, end(s));\\n    return (s[0] -\\'0\\' + s[1] - \\'0\\') * 10 + s[2] - \\'0\\' + s[3] - \\'0\\';\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1978071,
                "title": "easy-java",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        char[] ch=(num+\"\").toCharArray();\\n        Arrays.sort(ch);\\n        int n=Integer.parseInt(\"\"+ch[0]+ch[2]);\\n        int m=Integer.parseInt(\"\"+ch[1]+ch[3]);\\n        return n+m;\\n    }        \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        char[] ch=(num+\"\").toCharArray();\\n        Arrays.sort(ch);\\n        int n=Integer.parseInt(\"\"+ch[0]+ch[2]);\\n        int m=Integer.parseInt(\"\"+ch[1]+ch[3]);\\n        return n+m;\\n    }        \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747571,
                "title": "simple-c-solution-beginner-friendly-0ms-beats-100",
                "content": "In order to find the the minimum sum, the best way to do it is by creating two two-digits numbers.\\n(Or 1 digit numbers as leading zeros are allowed)\\nThe reason for the same is pretty simple and straight forward. \\nConsider the example : 9999\\n9 + 999 = 1008\\n99 + 99 = 198\\n\\n**Now while creating the two digits, in order to minimize the sum, we need to ensure that the** **smaller numbers are on tens place, while the larger nubers are kept on ones.**\\n*Also, Note that the question mentions that \"Leading Zeros are allowed.\"\\nIf leading zeros weren\\'t allowed, then the approach would have been different.*\\n\\nSo using simple mathematics(By dividing and taking modulus), we store 4 digits of the 4 digit number in a array.\\nSort the array and return the sum of numbers\\nnum1 = arr[0] * 10 + arr[2];\\nnum2 = arr[1] * 10 + arr[3];\\n**sum = num1 + num2 =  (arr[0] + arr[1]) * 10 + arr[2] + arr[3]**\\n\\nTime - O(1)\\nSpace - O(1)\\n\\n**Code :**\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int a[4] = {0};\\n        a[0] = num % 10;\\n        num /= 10;\\n        a[1] = num % 10;\\n        num /= 10;\\n        a[2] = num % 10;\\n        num /= 10;\\n        a[3] = num % 10;\\n        sort(a, a + 4);\\n        return ((a[0] + a[1]) * 10 + a[2] + a[3]);\\n    }\\n};\\n```\\nHappy Coding:)\\nPlease Upvote and Comment for any doubts!\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int a[4] = {0};\\n        a[0] = num % 10;\\n        num /= 10;\\n        a[1] = num % 10;\\n        num /= 10;\\n        a[2] = num % 10;\\n        num /= 10;\\n        a[3] = num % 10;\\n        sort(a, a + 4);\\n        return ((a[0] + a[1]) * 10 + a[2] + a[3]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1944274,
                "title": "simple-31-ms-python-beats-86-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s = list(str(num))\\n        s.sort()\\n        s1 = s[0]+s[2]\\n        s2 = s[1]+s[3]\\n        sum = int(s1)+int(s2)\\n            \\n        return sum\\n```\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s = list(str(num))\\n        s.sort()\\n        s1 = s[0]+s[2]\\n        s2 = s[1]+s[3]\\n        sum = int(s1)+int(s2)\\n            \\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2366191,
                "title": "2-lines-code-in-js",
                "content": "```\\nvar minimumSum = function(num) {\\n    const temp=num.toString().split(\\'\\').sort();\\nreturn (parseInt(temp[0]+temp[2])+parseInt(temp[1]+temp[3]));\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimumSum = function(num) {\\n    const temp=num.toString().split(\\'\\').sort();\\nreturn (parseInt(temp[0]+temp[2])+parseInt(temp[1]+temp[3]));\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1747144,
                "title": "3-lines-java",
                "content": "1. extract digits into array\\n2. sort\\n3. use first and 4th element to make one number and 2nd and 3rd to make another number  and return the sum of the numbrs\\n```\\n public int minimumSum(int num) {\\n        int []a={ num%10,(num/10)%10,(num/100)%10 , (num/1000)%10};\\n        Arrays.sort(a);\\n        return a[0]*10+a[3]+a[1]*10+a[2];\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n public int minimumSum(int num) {\\n        int []a={ num%10,(num/10)%10,(num/100)%10 , (num/1000)%10};\\n        Arrays.sort(a);\\n        return a[0]*10+a[3]+a[1]*10+a[2];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3569958,
                "title": "python3-2-line-simple-sort-and-make-pairs",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        d = sorted(str(num))\\n        return int(d[0] + d[2]) + int(d[1] + d[3])\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        d = sorted(str(num))\\n        return int(d[0] + d[2]) + int(d[1] + d[3])\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2066048,
                "title": "c-java-c-two-plus-two-sorted-straight-forward-solutions",
                "content": "* A 2/2 split produce small sums than 1/3 splits. The idea is to sort the digits in an order and then consume (1, 3) and (2, 4) combination and return their result.\\n```cpp []\\n// Solution 1\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>temp;\\n        while(num>0) {\\n            temp.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(temp.begin(),temp.end());\\n        return temp[0]*10+temp[2]+temp[1]*10+temp[3]; \\n    }\\n};\\n// Solution 2\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> dig;\\n        int cur = 0;\\n        while(num > 0) {\\n            dig.push_back(num % 10);\\n            num /= 10;\\n        }        \\n        sort(dig.begin(), dig.end());\\n        int num1 = dig[0] * 10 + dig[2]; \\n        int num2 = dig[1] * 10 + dig[3]; \\n        return num1 + num2;\\n    }\\n};\\n```\\n```java []\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] dig = new int[4]; \\n        int cur = 0;\\n        while(num > 0) {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(dig); \\n        int num1 = dig[0] * 10 + dig[2];\\n        int num2 = dig[1] * 10 + dig[3];\\n        return num1 + num2;\\n    }\\n}\\n```\\n```csharp []\\n// Solution 1\\npublic class Solution {\\n\\tpublic int MinimumSum(int num) {\\n\\t\\tchar[] minimumArray = num.ToString().ToCharArray();\\n\\t\\tArray.Sort(minimumArray);\\n\\t\\treturn ((minimumArray[0] - \\'0\\') * 10 + (minimumArray[2] - \\'0\\')) + ((minimumArray[1] - \\'0\\') * 10 + (minimumArray[3] - \\'0\\'));\\n\\t}\\n}\\n// Solution 2\\n// Collect the digits then sort the array\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        int[] dig = new int[4]; \\n        int cur = 0;\\n        while(num > 0) {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Array.Sort(dig); \\n        return dig[0] * 10 + dig[2] +  dig[1] * 10 + dig[3]; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```cpp []\\n// Solution 1\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>temp;\\n        while(num>0) {\\n            temp.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(temp.begin(),temp.end());\\n        return temp[0]*10+temp[2]+temp[1]*10+temp[3]; \\n    }\\n};\\n// Solution 2\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> dig;\\n        int cur = 0;\\n        while(num > 0) {\\n            dig.push_back(num % 10);\\n            num /= 10;\\n        }        \\n        sort(dig.begin(), dig.end());\\n        int num1 = dig[0] * 10 + dig[2]; \\n        int num2 = dig[1] * 10 + dig[3]; \\n        return num1 + num2;\\n    }\\n};\\n```\n```java []\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] dig = new int[4]; \\n        int cur = 0;\\n        while(num > 0) {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(dig); \\n        int num1 = dig[0] * 10 + dig[2];\\n        int num2 = dig[1] * 10 + dig[3];\\n        return num1 + num2;\\n    }\\n}\\n```\n```csharp []\\n// Solution 1\\npublic class Solution {\\n\\tpublic int MinimumSum(int num) {\\n\\t\\tchar[] minimumArray = num.ToString().ToCharArray();\\n\\t\\tArray.Sort(minimumArray);\\n\\t\\treturn ((minimumArray[0] - \\'0\\') * 10 + (minimumArray[2] - \\'0\\')) + ((minimumArray[1] - \\'0\\') * 10 + (minimumArray[3] - \\'0\\'));\\n\\t}\\n}\\n// Solution 2\\n// Collect the digits then sort the array\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        int[] dig = new int[4]; \\n        int cur = 0;\\n        while(num > 0) {\\n            dig[cur++] = num % 10;\\n            num /= 10;\\n        }\\n        Array.Sort(dig); \\n        return dig[0] * 10 + dig[2] +  dig[1] * 10 + dig[3]; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2269933,
                "title": "python-3-easy-solution",
                "content": "```py\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s=list(str(num))\\n        s.sort()\\n        return int(s[0]+s[2])+int(s[1]+s[3])",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```py\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s=list(str(num))\\n        s.sort()\\n        return int(s[0]+s[2])+int(s[1]+s[3])",
                "codeTag": "Java"
            },
            {
                "id": 3429913,
                "title": "easy-detailed-and-fast-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nNow if there are two 2-digit numbers then it will have one at tens position and other at unit position.\\n\\n    74 = 70 * 10 + 4   (7 is at tens digit and 4 is at unit digit.)\\n\\nNow, since we know that tens digit will have more impact on the number than unit digit number.\\n\\n    47 = 40 * 10 + 7   (4 is at tens digit and 7 is at unit digit.)\\n\\nHence if there are two 2-digit numbers in that array, their tens position digit should be minimum.\\n\\nif a number is ABCD where A,B,C and D are digits then after sorting, A and B should take tens position and C and D should take unit digit postion.\\n\\n    eg. 8239 --> 2389 (after Sorting)\\n\\n        [28,39] --> sum = 67 or [29,38] --> sum = 67\\n\\nwe will have AC+BD or AD+BC. they both will have equal sum always.\\n\\nthis will be our minimum sum.  \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize an array for sorting purpose.\\n2. One by one extract the digits from the number.\\n3. Sort the array.\\n4. Match the 0th index digit with 2nd index digit and 1st with 3rd.\\n5. Add the two new number.\\n6. Final sum will be minimum.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int minimumSum(int num) \\n    {\\n                    //1. Initialize an array for sorting purpose.\\n        int[] arr = new int[4];\\n        int i=0;\\n                    //2. One by one extract the digits from the number.\\n        while(num>0)\\n        {\\n            int a = num%10;\\n            num = num/10;\\n            arr[i++] = a;\\n        }\\n                    //3. Sort the array.\\n        Arrays.sort(arr);\\n                    //4. Match the 0th index digit with 2nd index digit and 1st with 3rd.\\n        int v1 = arr[0]*10 + arr[2];\\n        int v2 = arr[1]*10 + arr[3];\\n                    //5. Final sum will be minimum.\\n        return v1+v2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Sort"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int minimumSum(int num) \\n    {\\n                    //1. Initialize an array for sorting purpose.\\n        int[] arr = new int[4];\\n        int i=0;\\n                    //2. One by one extract the digits from the number.\\n        while(num>0)\\n        {\\n            int a = num%10;\\n            num = num/10;\\n            arr[i++] = a;\\n        }\\n                    //3. Sort the array.\\n        Arrays.sort(arr);\\n                    //4. Match the 0th index digit with 2nd index digit and 1st with 3rd.\\n        int v1 = arr[0]*10 + arr[2];\\n        int v2 = arr[1]*10 + arr[3];\\n                    //5. Final sum will be minimum.\\n        return v1+v2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257306,
                "title": "magic-logic-marvellous-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        string=str(num)\\n        s=sorted(string)\\n        m=s[0]+s[2]\\n        n=s[1]+s[3]\\n        return (int(m)+int(n))\\n#please upvote me it would encourage me alot\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        string=str(num)\\n        s=sorted(string)\\n        m=s[0]+s[2]\\n        n=s[1]+s[3]\\n        return (int(m)+int(n))\\n#please upvote me it would encourage me alot\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1951739,
                "title": "faster-than-94-61-python-easy",
                "content": "# UPVOTE\\n\\n```\\ns=list(str(num))\\n        s.sort()\\n        return int(s[0]+s[2])+int(s[1]+s[3])\\n```\\n**THANKS FOR VIEWING**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ns=list(str(num))\\n        s.sort()\\n        return int(s[0]+s[2])+int(s[1]+s[3])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1750426,
                "title": "golang-solution-with-explanation",
                "content": "## **How This Solution Works:**\\n\\nThe idea of this solution is pretty simple and relies on the fact that the minimum number is made by making the biggest number the last digit and the smallest number the first. For example: If we use the digits `[4, 6, 1, 3, 0, 9]`, the minimum number we can make is `013469`.\\n\\nIf we want the minimum sum, we just have to add the two minimum numbers together and get the minimum sum. \\n\\nSo let us say that we have `num = 4009`. We have the digits `[0, 0, 4, 9]`. Then the two minimum numbers that we can make are `04`, and `09`.\\n\\n* For `new1`, the tens digit can be the smallest digit, `0`.\\n* For `new2`, the tens digit can be the second smallest digit, `0`.\\n* For `new1`, the ones digit can be the third smallest digit, `4`.\\n* For `new2`, the ones digit can be the fourth smallest digit, `9`.\\n\\n***\\n\\n## **Walk Through the Code:**\\n\\n* We can first add all the digits into the `digits` array. \\n* Then we can sort `digits`.\\n* The we can do `new1 := digits[0] * 10 + digits[2]`. This is baisically:\\n    * We do `digits[0] * 10`. This basically = `Minimum number * 10`. We do the `* 10` because this is how we make `digits[0]` into the tens digit.\\n* The we can do `new2 := digits[1] * 10 + digits[3]`. This is baisically:\\n    * We do `digits[1] * 10`. This basically = `Second minimum number * 10`. We do the `* 10` because this is how we make `digits[1]` into the tens digit.\\n\\n***\\n\\n``` go\\nfunc minimumSum(num int) int {\\n    digits := []int{}\\n    \\n    for num > 0 {\\n        digits = append(digits, num % 10)\\n        num /= 10\\n    }\\n    \\n    sort.Ints(digits)\\n    \\n    new1 := digits[0] * 10 + digits[2]\\n    new2 := digits[1] * 10 + digits[3]\\n    \\n    return new1 + new2\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc minimumSum(num int) int {\\n    digits := []int{}\\n    \\n    for num > 0 {\\n        digits = append(digits, num % 10)\\n        num /= 10\\n    }\\n    \\n    sort.Ints(digits)\\n    \\n    new1 := digits[0] * 10 + digits[2]\\n    new2 := digits[1] * 10 + digits[3]\\n    \\n    return new1 + new2\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1769717,
                "title": "1-ms-41mb-java-sorting",
                "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/submissions/\\nThe logic is: take the 4 digit numbers and split the digits and store in an array of size 4. Then sort the array. Objective is to make two numbers that are smallest (so that their sum is smallest). One way of doing this is by take 0th and 1st elements as the first number and 3rd and 4th elements as the second number.\\n2932\\nSorted 2239\\nNumber 1: 22\\nNumber 2: 39\\nSum: 61\\nOther way is 1st element as the 10s position and 3rd element as the ones position\\nAnd 2nd digit as 10s position and 4th digit as ones position.\\nNumber 1: 23\\nNumber 2: 29\\nSum: 51\\nReturn 51;\\n\\nSo second approach  is the answer.\\n```\\nclass Solution{\\n    public int minimumSum(int num){\\n        int[] temp = new int[4];\\n        int i = 0;\\n        while(num>0){\\n            temp[i]=num%10;\\n            i++;\\n            num=num/10;\\n        }\\n        //now we have an array temp with all the digits of the num, we will sort temp\\n        Arrays.sort(temp);\\n        int num1 = temp[0]*10 + temp[2];\\n        int num2 = temp[1]*10 + temp[3];\\n        return (num1+num2);\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution{\\n    public int minimumSum(int num){\\n        int[] temp = new int[4];\\n        int i = 0;\\n        while(num>0){\\n            temp[i]=num%10;\\n            i++;\\n            num=num/10;\\n        }\\n        //now we have an array temp with all the digits of the num, we will sort temp\\n        Arrays.sort(temp);\\n        int num1 = temp[0]*10 + temp[2];\\n        int num2 = temp[1]*10 + temp[3];\\n        return (num1+num2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3503964,
                "title": "simple-java-solution-0ms",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n     int [] a=new int[4];\\n     int i=0;\\n     while(num>0){\\n         a[i++]=num%10;\\n         num/=10;\\n     }  \\n     Arrays.sort(a);\\n     return(((a[0]*10)+(a[3]))+((a[1]*10)+a[2]));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n     int [] a=new int[4];\\n     int i=0;\\n     while(num>0){\\n         a[i++]=num%10;\\n         num/=10;\\n     }  \\n     Arrays.sort(a);\\n     return(((a[0]*10)+(a[3]))+((a[1]*10)+a[2]));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3440231,
                "title": "my-minimumsum",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function (num) {\\n  let str = num.toString().split(\"\").sort();\\n  return parseInt(str[0] + str[2]) + parseInt(str[1] + str[3]);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function (num) {\\n  let str = num.toString().split(\"\").sort();\\n  return parseInt(str[0] + str[2]) + parseInt(str[1] + str[3]);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3078289,
                "title": "c-1-liner-easy-simple-solution-ever",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst off all we will split num 2932 into 2,9,3,2 and we will store them in vector a.\\nThen we sort a , --------------> 2 , 2 , 3 , 9 .\\nnow, the min sum possible is 22 + 29 .\\n23 means 2*10+3 -----------------> a[0]*10 + a[2];\\n29 means 2*10+9 -----------------> a[1]*10 + a[3];\\n\\nso we will return a[0]*10 + a[1]*10 + a[2] + a[3] \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>a(4);\\n        for(int i=0;i<a.size();i++){\\n            a[i] = num%10;\\n            num = num/10;  // splitting number into digits & pushing into vector a \\n        }\\n        sort(a.begin(),a.end());\\n        return (a[0]+a[1])*10 + a[2]+a[3]; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>a(4);\\n        for(int i=0;i<a.size();i++){\\n            a[i] = num%10;\\n            num = num/10;  // splitting number into digits & pushing into vector a \\n        }\\n        sort(a.begin(),a.end());\\n        return (a[0]+a[1])*10 + a[2]+a[3]; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742307,
                "title": "simple-and-best-solution-with-logic-mentioned-upvote-if-you-understood",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> ans(4);\\n        for(int i=3;i>=0;i--)\\n        {\\n            ans[i]=num%10;\\n            num/=10;\\n        }\\n\\n        /* to make min sum, the 1st elements of both num1 and num2 should be either arr[0] or arr[1] after sorting the arr, or we can say the the min elements. */\\n        sort(ans.begin(),ans.end());\\n\\n        int sum1=(ans[0]*10 + ans[2]);\\n        int sum2=(ans[1]*10 + ans[3]);\\n\\n        return sum1+sum2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> ans(4);\\n        for(int i=3;i>=0;i--)\\n        {\\n            ans[i]=num%10;\\n            num/=10;\\n        }\\n\\n        /* to make min sum, the 1st elements of both num1 and num2 should be either arr[0] or arr[1] after sorting the arr, or we can say the the min elements. */\\n        sort(ans.begin(),ans.end());\\n\\n        int sum1=(ans[0]*10 + ans[2]);\\n        int sum2=(ans[1]*10 + ans[3]);\\n\\n        return sum1+sum2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345538,
                "title": "easy-python-solution-minsum",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while num != 0:\\n            l.append(num % 10)\\n            num = num // 10\\n        \\n        l.sort()\\n        res = (l[1] * 10 + l[2]) + (l[0] * 10 + l[3])\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while num != 0:\\n            l.append(num % 10)\\n            num = num // 10\\n        \\n        l.sort()\\n        res = (l[1] * 10 + l[2]) + (l[0] * 10 + l[3])\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3131020,
                "title": "convert-into-the-list-and-then-store-the-value",
                "content": "# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        nums=list(str(num))\\n        nums.sort()\\n        return int(nums[0]+nums[-1])+int(nums[1]+nums[2])\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        nums=list(str(num))\\n        nums.sort()\\n        return int(nums[0]+nums[-1])+int(nums[1]+nums[2])\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3000559,
                "title": "python-solution-for-an-integer-of-indefinite-length",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        sorted_num = sorted(list(str(num)))\\n        \\n        num1 = num2 = \"\"\\n        for i in range(len(sorted_num)):\\n            if i % 2 == 0:\\n                num1 += sorted_num[i]\\n            else:\\n                num2 += sorted_num[i]\\n        \\n        return int(num1) + int(num2)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        sorted_num = sorted(list(str(num)))\\n        \\n        num1 = num2 = \"\"\\n        for i in range(len(sorted_num)):\\n            if i % 2 == 0:\\n                num1 += sorted_num[i]\\n            else:\\n                num2 += sorted_num[i]\\n        \\n        return int(num1) + int(num2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058386,
                "title": "javascript-solution",
                "content": "```\\nvar minimumSum = function(num) {\\n   let numbers = []\\n    for(let i = 0; i<4; i++){\\n        numbers.push(~~num % 10)\\n        num /= 10\\n    }\\n    const sorted = numbers.sort((a,b) => b - a)\\n    return sorted[0] + sorted[1] + (10 *( sorted[2] + sorted[3]))\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimumSum = function(num) {\\n   let numbers = []\\n    for(let i = 0; i<4; i++){\\n        numbers.push(~~num % 10)\\n        num /= 10\\n    }\\n    const sorted = numbers.sort((a,b) => b - a)\\n    return sorted[0] + sorted[1] + (10 *( sorted[2] + sorted[3]))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1747137,
                "title": "solution-for-c-sort-and-calcuate-directly",
                "content": "```cpp\\nclass Solution\\n{\\npublic:\\n    int minimumSum(int num)\\n    {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int res = (s[0] - \\'0\\' + s[1] - \\'0\\') * 10 + s[2] + s[3] - \\'0\\' - \\'0\\';\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution\\n{\\npublic:\\n    int minimumSum(int num)\\n    {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int res = (s[0] - \\'0\\' + s[1] - \\'0\\') * 10 + s[2] + s[3] - \\'0\\' - \\'0\\';\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314810,
                "title": "c-solution-using-frequency-array",
                "content": "# Intuition\\nMost significant digit will contribute the maximum amount to the sum ( 10\\'s digit in this case )\\n\\n# Approach\\nMake a frequnecy array storing the frequncy of each digit. As we know while summing 2 digit numbers, 10s digit would contribute the maximum to the sum so we aim to use the minimum possible digit as 10\\'s digit. The first two digits in the sorted frequncy array would be the smallest so make them the 10\\'s digit and the remaining two as the 1\\'s digit.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\n#include <vector>\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector <int> v(10,0);\\n        int copy = num;\\n        while(copy){\\n            int rem = copy % 10;\\n            v[rem] += 1;\\n            copy /= 10;\\n        }\\n        int count = 2;\\n        int ans = 0;\\n        for( int i = 0; i < 10; i++ ){\\n            while( v[i] != 0 ){\\n                if(count > 0){\\n                    ans += i * 10;\\n                    count -= 1;\\n                }\\n                else{\\n                    ans += i;\\n                }\\n                v[i] -= 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\n#include <vector>\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector <int> v(10,0);\\n        int copy = num;\\n        while(copy){\\n            int rem = copy % 10;\\n            v[rem] += 1;\\n            copy /= 10;\\n        }\\n        int count = 2;\\n        int ans = 0;\\n        for( int i = 0; i < 10; i++ ){\\n            while( v[i] != 0 ){\\n                if(count > 0){\\n                    ans += i * 10;\\n                    count -= 1;\\n                }\\n                else{\\n                    ans += i;\\n                }\\n                v[i] -= 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2821979,
                "title": "python-easy-3lines-sorting",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        n=[num//1000,(num//100)%10,(num//10)%10,num%10] #This line will convert the four digit no. into array \\n        n.sort() #It will sort the digits in ascending order\\n        return (n[0]*10+n[3])+(n[1]*10+n[2]) # Combination of first and last and the remaining two digits will give us the minimum value\\n```\\n\\n**Upvote if you like the solution or ask if there is any query**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        n=[num//1000,(num//100)%10,(num//10)%10,num%10] #This line will convert the four digit no. into array \\n        n.sort() #It will sort the digits in ascending order\\n        return (n[0]*10+n[3])+(n[1]*10+n[2]) # Combination of first and last and the remaining two digits will give us the minimum value\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2739095,
                "title": "java-0-ms-100-faster",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int arr[]=new int[4];\\n        int i=0;\\n        int num2=num;\\n        while(num>0){\\n            arr[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        Arrays.sort(arr);\\n        int n1=arr[3]+10*arr[0];\\n        int n2=arr[2]+ 10*arr[1];\\n        return n1+n2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int arr[]=new int[4];\\n        int i=0;\\n        int num2=num;\\n        while(num>0){\\n            arr[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        Arrays.sort(arr);\\n        int n1=arr[3]+10*arr[0];\\n        int n2=arr[2]+ 10*arr[1];\\n        return n1+n2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2462032,
                "title": "go-funny-solution",
                "content": "```\\nfunc minimumSum(num int) int {\\n    var digits []int\\n    \\n    for num > 0 {\\n        digits = append(digits, num%10)\\n        num /= 10\\n    }\\n    \\n    sort.Ints(digits)\\n    \\n    return digits[0]*10 + digits[2] + digits[1]*10 + digits[3]\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc minimumSum(num int) int {\\n    var digits []int\\n    \\n    for num > 0 {\\n        digits = append(digits, num%10)\\n        num /= 10\\n    }\\n    \\n    sort.Ints(digits)\\n    \\n    return digits[0]*10 + digits[2] + digits[1]*10 + digits[3]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1956768,
                "title": "javascript",
                "content": "```\\nvar minimumSum = function(num) {\\n    num = num.toString().split(\"\").sort();\\n    return (Number(num[0]+num[2]) + Number(num[1]+num[3]) )\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar minimumSum = function(num) {\\n    num = num.toString().split(\"\").sort();\\n    return (Number(num[0]+num[2]) + Number(num[1]+num[3]) )\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1747393,
                "title": "very-easy-solution-python",
                "content": "The idea here is to create a list of digits in the num. then sort the digits \\nafter sorting, we have a, b, c, d as 4 digits. the answer is ac + bd (or ad + bc).\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        list_digits = []\\n        while num > 0:\\n            list_digits.append(num % 10)\\n            num = num // 10\\n        \\n        a, b, c, d= sorted(list_digits)\\n        return 10 * a + c + 10*b + d\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        list_digits = []\\n        while num > 0:\\n            list_digits.append(num % 10)\\n            num = num // 10\\n        \\n        a, b, c, d= sorted(list_digits)\\n        return 10 * a + c + 10*b + d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747023,
                "title": "easy-approach",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        int a, b, c, d;\\n        vector<int> arr;\\n        \\n        a = num%10, num/=10;\\n        b = num%10, num/=10;\\n        c = num%10, num/=10;\\n        d = num%10, num/=10;\\n        \\n        arr = {a, b, c, d};\\n        sort(arr.begin(), arr.end());\\n        \\n        return (10*arr[0]+arr[2])+(10*arr[1]+arr[3]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        int a, b, c, d;\\n        vector<int> arr;\\n        \\n        a = num%10, num/=10;\\n        b = num%10, num/=10;\\n        c = num%10, num/=10;\\n        d = num%10, num/=10;\\n        \\n        arr = {a, b, c, d};\\n        sort(arr.begin(), arr.end());\\n        \\n        return (10*arr[0]+arr[2])+(10*arr[1]+arr[3]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289927,
                "title": "c-solution-beats-100-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n\\n    vector<int> v;\\n    while(num!=0)\\n    {\\n        v.push_back(num%10);\\n        num=num/10;\\n    }\\n    sort(v.begin(),v.end());\\n    int ans=v[0]*10+v[3] + v[1]*10+v[2];\\n    return ans;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n\\n    vector<int> v;\\n    while(num!=0)\\n    {\\n        v.push_back(num%10);\\n        num=num/10;\\n    }\\n    sort(v.begin(),v.end());\\n    int ans=v[0]*10+v[3] + v[1]*10+v[2];\\n    return ans;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230320,
                "title": "easy-to-understand-pythonic-solution",
                "content": "*Some of the solutions to this problem seemed to be not very easy to understand so here\\'s my take:*\\n\\n# **Explanation:**\\nWe put all our digits in a list, sort them with a built-in method **sort()** (so that the numbers are sorted from smallest to highest), join 1st + 3d and 2nd+ 4th elements as string, cast into ints and return their summ.\\n\\n# **Why does this work?**\\nThis works because the smallest possible numbers from a 4-number array would both start with smallest number ( hence the 1st and 2nd digit being picked for the start of our integer)\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        digits = []\\n\\n        for i in str(num):\\n            digits.append(i)\\n\\n        digits.sort()\\n\\n        return int(digits[0] + digits[2]) + int(digits[1] + digits[3])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        digits = []\\n\\n        for i in str(num):\\n            digits.append(i)\\n\\n        digits.sort()\\n\\n        return int(digits[0] + digits[2]) + int(digits[1] + digits[3])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3180764,
                "title": "simple-solution-minimum-sum-of-four-digit-number-after-splitting-digits",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while(num!=0):\\n            l.append(num%10)\\n            num//=10\\n        l.sort()\\n        result=(l[1]*10+l[2])+(l[0]*10+l[3])\\n        return result\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while(num!=0):\\n            l.append(num%10)\\n            num//=10\\n        l.sort()\\n        result=(l[1]*10+l[2])+(l[0]*10+l[3])\\n        return result\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3009974,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int nos[] = new int[4];\\n\\n        for(int i=0;i<4;i++){\\n            nos[i]=num%10;\\n            num/=10;\\n        }\\n\\n        Arrays.sort(nos);\\n        // System.out.print(nos[1]);\\n        // int sol1=nos[0]*10 + nos[3] + nos[1]*10 + nos[2];\\n        // int sol2=nos[1]*10 + nos[3] + nos[0]*10 + nos[2];\\n        // return Math.min(sol1, sol2);\\n\\n        return Math.min(nos[0]*10 + nos[3] + nos[1]*10 + nos[2],nos[1]*10 + nos[3] + nos[0]*10 + nos[2] );\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int nos[] = new int[4];\\n\\n        for(int i=0;i<4;i++){\\n            nos[i]=num%10;\\n            num/=10;\\n        }\\n\\n        Arrays.sort(nos);\\n        // System.out.print(nos[1]);\\n        // int sol1=nos[0]*10 + nos[3] + nos[1]*10 + nos[2];\\n        // int sol2=nos[1]*10 + nos[3] + nos[0]*10 + nos[2];\\n        // return Math.min(sol1, sol2);\\n\\n        return Math.min(nos[0]*10 + nos[3] + nos[1]*10 + nos[2],nos[1]*10 + nos[3] + nos[0]*10 + nos[2] );\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2954914,
                "title": "c-3-lines-3-methods-0-bishes",
                "content": "### The two minimum digits should be the tenths places of our two digit numbers\\n    Eg : 3425 -> minDigit1 = 2\\n                 minDigit2 = 3\\n    res = 25+34 OR 24+35\\n### Method1 : string\\n```c++\\nint minimumSum(int n) {\\n    string s = to_string(n);\\n    sort(s.begin(), s.end());\\n    return (s[0]-\\'0\\' + s[1]-\\'0\\') * 10 + s[2]-\\'0\\' + s[3]-\\'0\\';\\n```\\n### Method2 : array\\n```c++\\nint minimumSum(int n) {\\n    int arr[4] = {n%10,n/10%10,n/100%10,n/1000%10};\\n    sort(begin(arr),end(arr));\\n    return arr[0]*10 + arr[1]*10 + arr[2] + arr[3];\\n```\\n### Method3: Brainless (\\u02F5 \\u0361\\xB0 \\u035C\\u0296 \\u0361\\xB0\\u02F5)\\n```c++\\nint minimumSum(int n) {\\n    short n1 = n%10;\\n    short n2 = n/10%10;\\n    short n3 = n/100%10;\\n    short n4 = n/1000%10;\\n\\n    short ans1 = n1*10+n2*10+n3+n4;\\n    short ans2 = n1*10+n3*10+n2+n4;\\n    short ans3 = n1*10+n4*10+n2+n3;\\n    short ans4 = n2*10+n3*10+n1+n4;\\n    short ans5 = n2*10+n4*10+n1+n3;\\n    short ans6 = n3*10+n4*10+n1+n2;\\n\\n    return min(ans1,min(ans2,min(ans3,min(ans4,min(ans5,ans6)))));\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```c++\\nint minimumSum(int n) {\\n    string s = to_string(n);\\n    sort(s.begin(), s.end());\\n    return (s[0]-\\'0\\' + s[1]-\\'0\\') * 10 + s[2]-\\'0\\' + s[3]-\\'0\\';\\n```\n```c++\\nint minimumSum(int n) {\\n    int arr[4] = {n%10,n/10%10,n/100%10,n/1000%10};\\n    sort(begin(arr),end(arr));\\n    return arr[0]*10 + arr[1]*10 + arr[2] + arr[3];\\n```\n```c++\\nint minimumSum(int n) {\\n    short n1 = n%10;\\n    short n2 = n/10%10;\\n    short n3 = n/100%10;\\n    short n4 = n/1000%10;\\n\\n    short ans1 = n1*10+n2*10+n3+n4;\\n    short ans2 = n1*10+n3*10+n2+n4;\\n    short ans3 = n1*10+n4*10+n2+n3;\\n    short ans4 = n2*10+n3*10+n1+n4;\\n    short ans5 = n2*10+n4*10+n1+n3;\\n    short ans6 = n3*10+n4*10+n1+n2;\\n\\n    return min(ans1,min(ans2,min(ans3,min(ans4,min(ans5,ans6)))));\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2731903,
                "title": "simple-c-solution-easy-to-understand",
                "content": "----------------------------------------------------------------------\\n**Solution: 1**\\n\\n----------------------------------------------------------------------\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(),str.end());\\n\\n        int ans = (str[0]-\\'0\\' + str[1]-\\'0\\')*10 + str[2]-\\'0\\' + str[3]-\\'0\\';\\n        return ans;\\n    }\\n};\\n```\\n----------------------------------------------------------------------\\n\\n**Solution: 2**\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v;\\n\\n        while(num!=0)\\n        {\\n            int rem = num%10;\\n            v.push_back(rem);\\n            num /= 10;\\n        }\\n\\n        sort(v.begin(),v.end());\\n\\n        int num1 = v[0]*10+v[3];\\n        int num2 = v[1]*10+v[2];\\n\\n        int ans = num1+num2;\\n        return ans;\\n    }\\n};\\n```\\n\\n----------------------------------------------------------------------\\n**Analysis:**\\n\\n----------------------------------------------------------------------\\n\\n**Time Complexity:** ```O(NlogN)``` ----> As we used the sort function to sort the array.\\n**Space Complexity**: ```O(n)```     ----> As we created the external Vector.\\n\\n----------------------------------------------------------------------\\nIf this solution, helps you then please ```Upvote.```\\ntill then **Keep Learning, Keep Exploring!!!**\\n\\n\\n$$Thank You!$$\\n\\n----------------------------------------------------------------------\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(),str.end());\\n\\n        int ans = (str[0]-\\'0\\' + str[1]-\\'0\\')*10 + str[2]-\\'0\\' + str[3]-\\'0\\';\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v;\\n\\n        while(num!=0)\\n        {\\n            int rem = num%10;\\n            v.push_back(rem);\\n            num /= 10;\\n        }\\n\\n        sort(v.begin(),v.end());\\n\\n        int num1 = v[0]*10+v[3];\\n        int num2 = v[1]*10+v[2];\\n\\n        int ans = num1+num2;\\n        return ans;\\n    }\\n};\\n```\n```O(NlogN)```\n```O(n)```\n```Upvote.```",
                "codeTag": "Java"
            },
            {
                "id": 2491600,
                "title": "easy-solution-using-c-best-solution-100-accepted",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4]; // declaring an array\\n        arr[0] = num%10; //storing each digit in this array\\n        arr[1] = (num/10)%10;\\n        arr[2] = (num/100)%10;\\n        arr[3] = (num/1000)%10;\\n        sort(arr, arr + 4);\\n        return (arr[0]*10+arr[2]) + (arr[1]*10+arr[3]); //for ex{2,2,3,9} --> {23+29}\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4]; // declaring an array\\n        arr[0] = num%10; //storing each digit in this array\\n        arr[1] = (num/10)%10;\\n        arr[2] = (num/100)%10;\\n        arr[3] = (num/1000)%10;\\n        sort(arr, arr + 4);\\n        return (arr[0]*10+arr[2]) + (arr[1]*10+arr[3]); //for ex{2,2,3,9} --> {23+29}\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2411158,
                "title": "java-easiest-solution-faster-than-90-of-online-submission-1ms-runtime",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] digits = new int[4];\\n        int k =0;\\n        while(num>0)\\n        {\\n            digits[k++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(digits);\\n        return (digits[0]*10+digits[3])+(digits[1]*10+digits[2]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] digits = new int[4];\\n        int k =0;\\n        while(num>0)\\n        {\\n            digits[k++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(digits);\\n        return (digits[0]*10+digits[3])+(digits[1]*10+digits[2]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1877396,
                "title": "accepted-c-0ms",
                "content": "**Approach:**\\nAs it is already mentioned that we have only 4 digits so we can use 4 size vector to store the digits.\\n- Store the digits in vector.\\n- Sort the vector.\\n- To keep the number small, start with the number with lowest digits. So lets create first numbers first digit with 0th element of the sorted vector and create first digit of the second number with the 1st index digit of the vector.\\n- sum of the created numbers is the answer.\\n```\\nint minimumSum(int num) {\\n        vector<int> digit(4, 0);\\n        for(int x=0; x < 4; x++) {\\n            digit[x] = num%10;\\n            num = num/10;\\n        }\\n        sort(digit.begin(), digit.end());\\n        int f = digit[0] * 10 + digit[2];\\n        int s = digit[1] * 10 + digit[3];\\n        \\n        return f + s;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimumSum(int num) {\\n        vector<int> digit(4, 0);\\n        for(int x=0; x < 4; x++) {\\n            digit[x] = num%10;\\n            num = num/10;\\n        }\\n        sort(digit.begin(), digit.end());\\n        int f = digit[0] * 10 + digit[2];\\n        int s = digit[1] * 10 + digit[3];\\n        \\n        return f + s;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1838565,
                "title": "only-one-loop-faster-83-memory-78",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] n = new int[4];\\n        int index=0;\\n        while(num>0)\\n        {\\n            n[index++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(n);\\n       return (n[0]*10 + n[2] + n[1]*10 + n[3]);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] n = new int[4];\\n        int index=0;\\n        while(num>0)\\n        {\\n            n[index++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(n);\\n       return (n[0]*10 + n[2] + n[1]*10 + n[3]);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1823523,
                "title": "beginner-friendly-python-solution",
                "content": "**Time Complexity : O(n*logn)**\\n```\\nclass Solution(object):\\n    def minimumSum(self, num):\\n        arr = sorted(str(num))\\n        return int(arr[0] + arr[3]) + int(arr[1] + arr[2])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumSum(self, num):\\n        arr = sorted(str(num))\\n        return int(arr[0] + arr[3]) + int(arr[1] + arr[2])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1755689,
                "title": "c-solution-0-ms",
                "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        int n = ((str[0]-\\'0\\')*10 + str[2]-\\'0\\')+((str[1]-\\'0\\')*10 + str[3]-\\'0\\');\\n        return n;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        int n = ((str[0]-\\'0\\')*10 + str[2]-\\'0\\')+((str[1]-\\'0\\')*10 + str[3]-\\'0\\');\\n        return n;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1747205,
                "title": "c-try-all-permutations",
                "content": "```\\nint minimumSum(int num) {\\n        string s=to_string(num);\\n        int sum=INT_MAX;\\n        vector<int> v{0,1,2,3};\\n        do{\\n            int n1=(s[v[0]]-\\'0\\')*10+(s[v[1]]-\\'0\\');\\n            int n2=(s[v[2]]-\\'0\\')*10+(s[v[3]]-\\'0\\');\\n            sum=min(sum,n1+n2);\\n        }\\n        while(next_permutation(v.begin(),v.end()));\\n        \\n        return sum;\\n    }\\n",
                "solutionTags": [],
                "code": "```\\nint minimumSum(int num) {\\n        string s=to_string(num);\\n        int sum=INT_MAX;\\n        vector<int> v{0,1,2,3};\\n        do{\\n            int n1=(s[v[0]]-\\'0\\')*10+(s[v[1]]-\\'0\\');\\n            int n2=(s[v[2]]-\\'0\\')*10+(s[v[3]]-\\'0\\');\\n            sum=min(sum,n1+n2);\\n        }\\n        while(next_permutation(v.begin(),v.end()));\\n        \\n        return sum;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1747130,
                "title": "simple-python-and-java-solution-with-example-for-easy-understanding",
                "content": "### STEPS DONE:\\n\\n- Sort\\n- Pick least possible tens which will be first two and pair with remaining numbers for digits place which will be last two\\n\\nHavn\\'t Understood !!\\n\\n### Examples \\nIf we have 8759 as a four digit number\\n\\nTo make a smaller sum we will obviously need smaller numbers\\nHence to make the smaller numbers break them into individual digits and sort the numbers\\n\\nafter sorting we have [5, 7, 8, 9]\\nthen we pick a least possible for tens position and max possible for ones position\\nlike 5 and 7 for tens position and 9 and 8 for unit digits position\\nyou can also pick 5 and 8 and 7 and 9 it doesnt matter as long as your tens digits are least from array\\n\\n59 + 78 = 137\\nThis will be the answer\\n\\nAnother Example : 4009\\nafter sorting [0, 0, 4, 9]\\nafter picking 09 + 04 OR 04 + 09  both equals 13\\n\\nAnother Example : 2932\\nafter sorting [2, 2, 3, 9]\\nafter picking 29 +23 OR 23 +29 both equals 52\\n\\nAnother Example : 2675\\nafter sorting [2, 5, 6, 7]\\nafter picking 27 + 56 OR 57+26  both equals 83\\n\\n\\n### Python Method 1\\n\\n```python\\n\\nclass Solution(object):\\n    \\n    # TC : O(N)\\n    # SC : O(N)\\n    def minimumSum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"        \\n        a = sorted([i for i in str(num)])\\n        num1 = a[0]+a[3]\\n        num2 = a[1]+a[2]\\n                \\n        return int(num1)+int(num2)  \\n```\\n### Python Method 2\\n\\n```python\\n\\nclass Solution(object):\\n    \\n    # TC : O(N)\\n    # SC : O(N)\\n    def minimumSum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        arr=[]\\n        \\n        while num:\\n            arr.append(num%10)\\n            num//=10\\n        return (arr[0]*10+arr[3]) + (arr[1]*10+arr[2])\\n```\\n        \\n### Java\\n\\n```java\\nclass Solution {\\n    public int minimumSum(int num) {\\n\\n        int i = 0;\\n        int[] arr = new int[4];\\n\\n        while (num > 0) {\\n            arr[i] = num % 10;\\n            num = num / 10;\\n            i++;\\n        }\\n\\n        Arrays.sort(arr);\\n        return arr[0]*10 + arr[3] + arr[1]*10 +arr[2]; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python"
                ],
                "code": "```python\\n\\nclass Solution(object):\\n    \\n    # TC : O(N)\\n    # SC : O(N)\\n    def minimumSum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"        \\n        a = sorted([i for i in str(num)])\\n        num1 = a[0]+a[3]\\n        num2 = a[1]+a[2]\\n                \\n        return int(num1)+int(num2)  \\n```\n```python\\n\\nclass Solution(object):\\n    \\n    # TC : O(N)\\n    # SC : O(N)\\n    def minimumSum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: int\\n        \"\"\"\\n        arr=[]\\n        \\n        while num:\\n            arr.append(num%10)\\n            num//=10\\n        return (arr[0]*10+arr[3]) + (arr[1]*10+arr[2])\\n```\n```java\\nclass Solution {\\n    public int minimumSum(int num) {\\n\\n        int i = 0;\\n        int[] arr = new int[4];\\n\\n        while (num > 0) {\\n            arr[i] = num % 10;\\n            num = num / 10;\\n            i++;\\n        }\\n\\n        Arrays.sort(arr);\\n        return arr[0]*10 + arr[3] + arr[1]*10 +arr[2]; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747072,
                "title": "c-easy-solution",
                "content": "We can directly sort 4 digits and select the first and third digit form num1 number .Then select 2 and last digit and num2 and then return the sum of num1 and num2.\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>digit(4);\\n\\t\\twhile(num > 0)\\n\\t\\t{\\n\\t\\t\\tdigit.push_back(num%10)\\n\\t\\t\\tnum/=10;\\n\\t\\t}\\n\\t\\t\\n\\t\\twhile(digit.size()<4)\\n\\t\\t\\tdigit.push_back(0);\\n\\t\\t\\t\\n\\t\\tsort(digit.begin(),digit.end());\\n\\t\\tint num1 = 0 , num2 = 0;\\n\\t\\t\\n\\t\\tnum1 = digit[0]*10 + digit[2];  //from first number\\n\\t\\tnum2 = digit[1]*10 + digit[3]; //form second number\\n\\t\\t\\n\\t\\treturn num1+num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>digit(4);\\n\\t\\twhile(num > 0)\\n\\t\\t{\\n\\t\\t\\tdigit.push_back(num%10)\\n\\t\\t\\tnum/=10;\\n\\t\\t}\\n\\t\\t\\n\\t\\twhile(digit.size()<4)\\n\\t\\t\\tdigit.push_back(0);\\n\\t\\t\\t\\n\\t\\tsort(digit.begin(),digit.end());\\n\\t\\tint num1 = 0 , num2 = 0;\\n\\t\\t\\n\\t\\tnum1 = digit[0]*10 + digit[2];  //from first number\\n\\t\\tnum2 = digit[1]*10 + digit[3]; //form second number\\n\\t\\t\\n\\t\\treturn num1+num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742243,
                "title": "solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nto make min sum, the 1st elements of both num1 and num2 should be either arr[0] or arr[1] after sorting the arr, or we can say the the min elements.\\n\\nin the code we have converted int to array. now in the array the int is stored as char( ASIC). so suppose you want to access 1st element of array or store it, you need to substract 0. arr[0]-\\'0\\' to convert it from char to int. if you do arr[0], it will be a char not an int. ex:- 1152 converted to array, in the array it wont be [ 1 1 5 2] but something else.\\n\\nso we have 2 halves sum1 and sum2. we know 1st and 2nd elements of arr will be the 1st elements of both sum. so we do sum1= num1*10 +num2, we multiply with 10 because we need a 2 digit number.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        char[] arr= String.valueOf(num).toCharArray();\\n/* to make min sum, the 1st elements of both num1 and num2 should be either arr[0] or arr[1] after sorting the arr, or we can say the the min elements. */\\n        Arrays.sort(arr);\\n\\n        int num1 = (arr[0]-\\'0\\');\\n        int num2 = (arr[3]-\\'0\\');\\n        int num3= (arr[1]-\\'0\\');\\n        int num4 = (arr[2]-\\'0\\');\\n\\n        int sum1= num1*10 + num2;\\n        int sum2= num3*10+ num4;\\nint finalsum = sum1+sum2;\\n        return finalsum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        char[] arr= String.valueOf(num).toCharArray();\\n/* to make min sum, the 1st elements of both num1 and num2 should be either arr[0] or arr[1] after sorting the arr, or we can say the the min elements. */\\n        Arrays.sort(arr);\\n\\n        int num1 = (arr[0]-\\'0\\');\\n        int num2 = (arr[3]-\\'0\\');\\n        int num3= (arr[1]-\\'0\\');\\n        int num4 = (arr[2]-\\'0\\');\\n\\n        int sum1= num1*10 + num2;\\n        int sum2= num3*10+ num4;\\nint finalsum = sum1+sum2;\\n        return finalsum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3703577,
                "title": "easy-simple-c-solution",
                "content": "# Approach\\nHere\\'s how the code works:\\n\\n- It initializes an empty vector arr to store the digits of num.\\n\\n- The while loop extracts the digits of num one by one by taking the modulo 10 (num % 10) to get the last digit and pushing it into the vector arr. Then, it divides num by 10 (num = num / 10) to remove the last digit.\\n\\n- After the loop finishes, the vector arr contains the individual digits of num in reverse order.\\n\\n- The sort function is used to sort the vector arr in ascending order.\\n\\n- Two variables, new1 and new2, are initialized to store the values of the rearranged numbers.\\n\\n- The first rearranged number, new1, is formed by concatenating the smallest digit (arr[0]) with the third smallest digit (arr[2]). The digits are multiplied by 10 to shift their positions accordingly.\\n\\n- The second rearranged number, new2, is formed by concatenating the second smallest digit (arr[1]) with the fourth smallest digit (arr[3]).\\n\\n- Finally, the sum of new1 and new2 is returned as the result.\\n\\n**Note**: The given code assumes that num has 4 digits as given in question.\\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> arr;\\n        while(num){\\n            arr.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(arr.begin(),arr.end());\\n        int new1=0,new2=0;\\n        new1 = 10*arr[0]+arr[2];\\n        new2 = 10*arr[1]+arr[3];\\n        return new1+new2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> arr;\\n        while(num){\\n            arr.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(arr.begin(),arr.end());\\n        int new1=0,new2=0;\\n        new1 = 10*arr[0]+arr[2];\\n        new2 = 10*arr[1]+arr[3];\\n        return new1+new2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3703569,
                "title": "best-approach-cpp-solution-0ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe given code defines a class named `Solution` with a member function `minimumSum`. This function takes an integer `num` as input and calculates the minimum sum of two numbers by rearranging the digits of `num`.\\n\\nHere\\'s a step-by-step explanation of the code:\\n\\n1. Create an empty vector `v` to store the individual digits of the input number `num`.\\n\\n2. Enter a while loop that continues until `num` becomes zero. Inside the loop:\\n   - Get the last digit of `num` by taking the modulus (`num % 10`), which gives the remainder when `num` is divided by 10.\\n   - Append the last digit to the vector `v`.\\n   - Update `num` by dividing it by 10 (`num = num / 10`) to remove the last digit.\\n\\n3. Sort the vector `v` in ascending order using `sort(v.begin(), v.end())`. This will rearrange the digits in `v` from smallest to largest.\\n\\n4. Create two numbers, `num1` and `num2`, by combining specific digits from the sorted vector `v`:\\n   - `num1` is formed by taking the smallest digit (`v[0]`) and the third smallest digit (`v[2]`).\\n   - `num2` is formed by taking the second smallest digit (`v[1]`) and the fourth smallest digit (`v[3]`).\\n\\n5. Return the sum of `num1` and `num2` as the minimum sum of two numbers.\\n\\nIt\\'s important to note that this code assumes the input `num` has at least four digits. If `num` has fewer than four digits, the code may produce unexpected results or encounter runtime errors.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector <int> v;\\n        while(num){\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        int num1=v[0]*10+v[2],num2=v[1]*10+v[3];\\n        return num1+num2;        \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector <int> v;\\n        while(num){\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        int num1=v[0]*10+v[2],num2=v[1]*10+v[3];\\n        return num1+num2;        \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3459536,
                "title": "simple-approach",
                "content": "\\n\\n# Approach\\nWe sort the given number.\\nThen, to minimize the sum formed by nums1 and nums2 as required,\\nIt is obvious that we should generate 2 digit 2 numbers as their sum would be lesser than a 3 digit number and a 1 digit number.\\n\\nHence to generate the minimum sum,\\nTo minimize the numbers created,\\nWe club together the smallest digit followed by greatest digit.\\nWe club together the second smallest digit number followed by second greatest digit.\\n\\nSTEPS :\\n1> Sort the Number Digits.\\n2> Generate the nums1 as 1st Digit followed by 4th Digit.\\n3> Generate the nums2 as 2nd Digit followed by 3d Digit.\\n4> Return the minimum sum, as nums1 + nums2.\\n\\nFor example,\\n2932\\n-> 2239\\nWe make the numbers as 29 and 23. Which give the Minimum Sum.\\n\\n4009\\n-> 0049\\nWe make the numbers 09 and 04. Which give the Minimum Sum.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity Analysis\\n# Time Complexity: O(NlogN)\\nAlmost Constant Time Algorithm.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Space complexity: O(1)\\nAlmost Constant Space Algorithm.\\n<!-- Add your space cmathomplexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n        string nums = to_string(num);\\n        sort(nums.begin(),nums.end());\\n        char nums1 = nums[0];\\n        char nums2 = nums[1];\\n        char nums3 = nums[2];\\n        char nums4 = nums[3];\\n\\n        string ans1 = \"\";\\n        ans1 += nums1;\\n        ans1 += nums4;\\n        string ans2 = \"\";\\n        ans2 += nums2;\\n        ans2 += nums3;\\n\\n        return stoi(ans1) + stoi(ans2);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n        string nums = to_string(num);\\n        sort(nums.begin(),nums.end());\\n        char nums1 = nums[0];\\n        char nums2 = nums[1];\\n        char nums3 = nums[2];\\n        char nums4 = nums[3];\\n\\n        string ans1 = \"\";\\n        ans1 += nums1;\\n        ans1 += nums4;\\n        string ans2 = \"\";\\n        ans2 += nums2;\\n        ans2 += nums3;\\n\\n        return stoi(ans1) + stoi(ans2);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363015,
                "title": "cpp-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        //array for store the retrived element\\n        vector<int> nums;\\n        //retriving one by one number of num \\n        while(num>0)\\n        {\\n            nums.push_back(num%10);\\n            num=num/10;\\n        }\\n        //here sorting the array\\n        sort(nums.begin(),nums.end());\\n        return nums[0]*10+nums[2]+nums[1]*10+nums[3];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        //array for store the retrived element\\n        vector<int> nums;\\n        //retriving one by one number of num \\n        while(num>0)\\n        {\\n            nums.push_back(num%10);\\n            num=num/10;\\n        }\\n        //here sorting the array\\n        sort(nums.begin(),nums.end());\\n        return nums[0]*10+nums[2]+nums[1]*10+nums[3];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3154659,
                "title": "python-3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimple loopless approach using Mathematics\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->After we convert the given 4 digit number type and sort it, the addition of (first digit,last digit) with (second digit,third digit) gives us least combo.\\n\\n# Complexity\\n- Time complexity:\\n```\\nO(nlogn)\\n```\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = str(num)\\n        num = sorted(list(num))\\n        num = str(num)\\n        print(num)\\n        list1 = list()\\n        list1.append((num[2]+num[17]))\\n        list1.append((num[7]+num[12]))\\n        return (int(list1[0])+int(list1[1]))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nO(nlogn)\\n```\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = str(num)\\n        num = sorted(list(num))\\n        num = str(num)\\n        print(num)\\n        list1 = list()\\n        list1.append((num[2]+num[17]))\\n        list1.append((num[7]+num[12]))\\n        return (int(list1[0])+int(list1[1]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3098318,
                "title": "0ms-runtime-beats-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n       vector<int>digit;\\n       while(num>0){\\n           digit.push_back(num%10);\\n           num/=10;\\n       } \\n       sort(digit.begin(),digit.end());\\n       return (digit[0]*10+digit[3])+(digit[1]*10+digit[2]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n       vector<int>digit;\\n       while(num>0){\\n           digit.push_back(num%10);\\n           num/=10;\\n       } \\n       sort(digit.begin(),digit.end());\\n       return (digit[0]*10+digit[3])+(digit[1]*10+digit[2]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054611,
                "title": "java-easiest-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] nums = new int[4];\\n        for (int i = 0; num != 0; ++i) {\\n            nums[i] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(nums);\\n        return 10 * (nums[0] + nums[1]) + nums[2] + nums[3];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] nums = new int[4];\\n        for (int i = 0; num != 0; ++i) {\\n            nums[i] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(nums);\\n        return 10 * (nums[0] + nums[1]) + nums[2] + nums[3];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046504,
                "title": "c-sorting-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity:\\no(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num)\\n    {\\n        int digit = num;vector<int> v;\\n        while(digit!=0)\\n        {\\n            int temp = digit%10;\\n            v.push_back(temp);\\n            digit = digit/10;\\n        }\\n        sort(v.begin(),v.end());\\n\\n        int num1 = v[0]*10 + v[2];\\n        int num2 = v[1]*10 + v[3];\\n\\n        int sum = num1 + num2;\\n        return sum;\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num)\\n    {\\n        int digit = num;vector<int> v;\\n        while(digit!=0)\\n        {\\n            int temp = digit%10;\\n            v.push_back(temp);\\n            digit = digit/10;\\n        }\\n        sort(v.begin(),v.end());\\n\\n        int num1 = v[0]*10 + v[2];\\n        int num2 = v[1]*10 + v[3];\\n\\n        int sum = num1 + num2;\\n        return sum;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3020319,
                "title": "java-c-100-solution-using-greedy-minimum-sum-of-four-digit-number-after-splitting-digits",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Java Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] digits = new int[4];\\n        int i=0;\\n        while(i<=3)\\n        {\\n            digits[i++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(digits);\\n        // digits[0] at ten\\'s place and digits[2] at one\\'s place makes the first number\\n        // digits[1] at ten\\'s place and digits[3] at one\\'s place makes the second number\\n        return digits[0]*10+digits[2]+digits[1]*10+digits[3];\\n    }\\n}\\n```\\n# C++ Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int digits[4];\\n        int i=0;\\n        while(i<=3)\\n        {\\n            digits[i++] = num%10;\\n            num/=10;\\n        }\\n        sort(digits,digits+4);\\n        // digits[0] at ten\\'s place and digits[2] at one\\'s place makes the first number\\n        // digits[1] at ten\\'s place and digits[3] at one\\'s place makes the second number\\n        return digits[0]*10+digits[2]+digits[1]*10+digits[3];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] digits = new int[4];\\n        int i=0;\\n        while(i<=3)\\n        {\\n            digits[i++] = num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(digits);\\n        // digits[0] at ten\\'s place and digits[2] at one\\'s place makes the first number\\n        // digits[1] at ten\\'s place and digits[3] at one\\'s place makes the second number\\n        return digits[0]*10+digits[2]+digits[1]*10+digits[3];\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int digits[4];\\n        int i=0;\\n        while(i<=3)\\n        {\\n            digits[i++] = num%10;\\n            num/=10;\\n        }\\n        sort(digits,digits+4);\\n        // digits[0] at ten\\'s place and digits[2] at one\\'s place makes the first number\\n        // digits[1] at ten\\'s place and digits[3] at one\\'s place makes the second number\\n        return digits[0]*10+digits[2]+digits[1]*10+digits[3];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2944105,
                "title": "c-4-lines-just-sort-and-one-swap",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string x = to_string(num);\\n        sort(x.begin(), x.end());\\n        swap(x[2], x[1]);\\n        return stoi(x.substr(0, 2)) + stoi(x.substr(2, 2));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string x = to_string(num);\\n        sort(x.begin(), x.end());\\n        swap(x[2], x[1]);\\n        return stoi(x.substr(0, 2)) + stoi(x.substr(2, 2));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2781912,
                "title": "minimum-sum-of-four-digit-number-after-splitting-digits",
                "content": "\\n    int minimumSum(int num) {\\n        vector<int> v;\\n        while(num>0){\\n       int ld=num%10;\\n      v.push_back(ld);\\n        num=num/10;}\\n        sort(v.begin(),v.end());\\n        int x=v[0]*10+v[2];\\n        int y=v[1]*10+v[3];\\n        return x+y;\\n    }\\n",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "\\n    int minimumSum(int num) {\\n        vector<int> v;\\n        while(num>0){\\n       int ld=num%10;\\n      v.push_back(ld);\\n        num=num/10;}\\n        sort(v.begin(),v.end());\\n        int x=v[0]*10+v[2];\\n        int y=v[1]*10+v[3];\\n        return x+y;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2755499,
                "title": "simple-c-solution-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(),str.end());\\n        return ((str[0]-\\'0\\')*10+(str[1]-\\'0\\')*10+(str[2]-\\'0\\')+(str[3]-\\'0\\'));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string str = to_string(num);\\n        sort(str.begin(),str.end());\\n        return ((str[0]-\\'0\\')*10+(str[1]-\\'0\\')*10+(str[2]-\\'0\\')+(str[3]-\\'0\\'));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2706287,
                "title": "c-easy",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        //array for store the retrived element\\n        vector<int> nums;\\n        //retriving one by one number of num \\n        while(num>0)\\n        {\\n            nums.push_back(num%10);\\n            num=num/10;\\n        }\\n        //here sorting the array\\n        sort(nums.begin(),nums.end());\\n        return nums[0]*10+nums[2]+nums[1]*10+nums[3];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        //array for store the retrived element\\n        vector<int> nums;\\n        //retriving one by one number of num \\n        while(num>0)\\n        {\\n            nums.push_back(num%10);\\n            num=num/10;\\n        }\\n        //here sorting the array\\n        sort(nums.begin(),nums.end());\\n        return nums[0]*10+nums[2]+nums[1]*10+nums[3];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2672415,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v;\\n        while(num>0)\\n        {\\n            v.push_back( num%10 );\\n            num = num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        \\n        int one= v[0]*10 + v[3] ;\\n        int two = v[1]*10 + v[2];\\n        \\n        return one+two;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v;\\n        while(num>0)\\n        {\\n            v.push_back( num%10 );\\n            num = num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        \\n        int one= v[0]*10 + v[3] ;\\n        int two = v[1]*10 + v[2];\\n        \\n        return one+two;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2459879,
                "title": "c-easy-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n       vector<int>v;\\n       while(num)\\n       {\\n           v.push_back(num%10);\\n           num=num/10;\\n       }\\n       sort(v.begin(),v.end());\\n       bool flag=true;      \\n       \\n       int num1=0;\\n       int num2=0;\\n        \\n       for(int i=0;i<v.size();i++)\\n       {\\n           if(flag==true)\\n           {\\n               num1=(num1*10)+v[i];\\n           }\\n           else\\n           {\\n               num2=(num2*10)+v[i];\\n           }\\n           flag=!flag;\\n       }\\n        return num1+num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n       vector<int>v;\\n       while(num)\\n       {\\n           v.push_back(num%10);\\n           num=num/10;\\n       }\\n       sort(v.begin(),v.end());\\n       bool flag=true;      \\n       \\n       int num1=0;\\n       int num2=0;\\n        \\n       for(int i=0;i<v.size();i++)\\n       {\\n           if(flag==true)\\n           {\\n               num1=(num1*10)+v[i];\\n           }\\n           else\\n           {\\n               num2=(num2*10)+v[i];\\n           }\\n           flag=!flag;\\n       }\\n        return num1+num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2375218,
                "title": "c-100-child-level-logic-explained",
                "content": "**Upvote if you like**\\n```\\nint minimumSum(int num) {\\n       vector<int> arr;\\n      while(num>0){\\n          arr.push_back(num%10);\\n          num=num/10;\\n      }\\n        sort(arr.begin(),arr.end());\\n        return arr[3]+arr[1]*10+arr[2]+arr[0]*10;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nint minimumSum(int num) {\\n       vector<int> arr;\\n      while(num>0){\\n          arr.push_back(num%10);\\n          num=num/10;\\n      }\\n        sort(arr.begin(),arr.end());\\n        return arr[3]+arr[1]*10+arr[2]+arr[0]*10;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2304423,
                "title": "two-approaches-explanation-o-nlogn-o-n-very-easy-to-understand",
                "content": "\\nGet all digits of num. \\nSort them.\\nTo get the minimum sum. We need to choose 1st and 2nd digits as tens digits and 3rd and 4th as ones digits.\\nAs when the tens digits will be minimum, then only we will get minimum sum.\\nFor example:\\n5643=>3,4,5,6\\n30+40+5+6=86(min)\\n\\nOther possibilities:\\n30+50+4+6=90\\n30+60+4+5=101\\n40+50+4+6=100 and so on.\\n\\n**Method 1:**\\nTime complexity: O(nlogn)\\nUse array to store the digits of num.\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] res=new int[4];\\n        int i=0;\\n        while(num>0){\\n            res[i]=num%10;\\n            num/=10;\\n            i++;\\n        }\\n        Arrays.sort(res)\\n        return res[0]*10+res[2]+res[1]*10+res[3];\\n    }\\n}\\n```\\n\\n**Method 2:**\\nUse priorityqueue to store the digits of num.\\nTime complexity: O(n)\\n\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        PriorityQueue<Integer>pq=new PriorityQueue<>();\\n\\t\\t//complexity to insert: O(1)\\n        while(num>0){\\n            pq.offer(num%10);\\n            num/=10;\\n        }\\n\\t\\t//complexity to remove: O(n)\\n        int a=10*pq.remove();\\n        int b=10*pq.remove();\\n        int c=pq.remove();\\n        int d=pq.remove();\\n        return a+b+c+d;\\n    }\\n}\\n```\\n**If you find anything to add, fill free to add releated to topic.\\uD83D\\uDE00**\\n\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] res=new int[4];\\n        int i=0;\\n        while(num>0){\\n            res[i]=num%10;\\n            num/=10;\\n            i++;\\n        }\\n        Arrays.sort(res)\\n        return res[0]*10+res[2]+res[1]*10+res[3];\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        PriorityQueue<Integer>pq=new PriorityQueue<>();\\n\\t\\t//complexity to insert: O(1)\\n        while(num>0){\\n            pq.offer(num%10);\\n            num/=10;\\n        }\\n\\t\\t//complexity to remove: O(n)\\n        int a=10*pq.remove();\\n        int b=10*pq.remove();\\n        int c=pq.remove();\\n        int d=pq.remove();\\n        return a+b+c+d;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2255001,
                "title": "simple-js-clean-code",
                "content": "\\n```\\n\\nconst add = (s1, s2) => parseInt(s1)+parseInt(s2);\\n\\nconst minSumCombo = (ones, tens) =>{\\n    const sum1 = add(tens[0] + ones[0], tens[1]+ones[1]);\\n    const sum2 = add(tens[0]+ones[1], tens[1]+ones[0]);\\n    return Math.min(sum1, sum2)\\n}\\n\\nconst minimumSum = function(num) {\\n    const digits = num.toString().split(\\'\\').sort((a,b)=>a-b)\\n    \\n    return minSumCombo(digits.slice(2),digits.slice(0,2) )\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nconst add = (s1, s2) => parseInt(s1)+parseInt(s2);\\n\\nconst minSumCombo = (ones, tens) =>{\\n    const sum1 = add(tens[0] + ones[0], tens[1]+ones[1]);\\n    const sum2 = add(tens[0]+ones[1], tens[1]+ones[0]);\\n    return Math.min(sum1, sum2)\\n}\\n\\nconst minimumSum = function(num) {\\n    const digits = num.toString().split(\\'\\').sort((a,b)=>a-b)\\n    \\n    return minSumCombo(digits.slice(2),digits.slice(0,2) )\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2247177,
                "title": "easy-java-solution",
                "content": "\\n \\n \\n    class Solution {\\n\\t public int minimumSum(int num) {\\n        int [] arr =new int[4];\\n        int i=0;\\n        while(num>0){\\n            arr[i]=num%10;\\n            num /=10;\\n            i++;\\n        }\\n        Arrays.sort(arr);\\n        return ((arr[0]*10 +arr[2])+(arr[1]*10 +arr[3]));\\n      }\\n\\t}\\n",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "class Solution {\\n\\t public int minimumSum(int num) {\\n        int [] arr =new int[4];\\n        int i=0;\\n        while(num>0){\\n            arr[i]=num%10;\\n            num /=10;\\n            i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2232330,
                "title": "c-solution-100-faster-then-all-the-current-solution",
                "content": "**The below solution is faster than 100% of the current solutions. Happy LeetCoding.\\nDo Upvote \\u270C\\uD83C\\uDFFB**\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        \\n        while(num>0)\\n        {\\n           v.push_back(num%10);\\n            num/=10;\\n        }\\n        \\n        sort(v.begin(),v.end());\\n        \\n        return ((v[0]*10+v[3]) + (v[1]*10+v[2]));\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "Array",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        \\n        while(num>0)\\n        {\\n           v.push_back(num%10);\\n            num/=10;\\n        }\\n        \\n        sort(v.begin(),v.end());\\n        \\n        return ((v[0]*10+v[3]) + (v[1]*10+v[2]));\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2026747,
                "title": "c-solution-0-ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];\\n        for(int i = 0; i < 4; i++) {\\n            arr[i] = num % 10;\\n            num = num / 10;\\n        }\\n        sort(arr, arr + 4);\\n        int sum = (arr[0] * 10) + arr[2] + (arr[1] * 10) + arr[3];\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];\\n        for(int i = 0; i < 4; i++) {\\n            arr[i] = num % 10;\\n            num = num / 10;\\n        }\\n        sort(arr, arr + 4);\\n        int sum = (arr[0] * 10) + arr[2] + (arr[1] * 10) + arr[3];\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2005313,
                "title": "python",
                "content": "Sort the digits in order from lowest to highest and cast back to an int to remove zeros Then back to a string.\\n\\nNotice the smallest sum requires the highest order digit to be the smallest it can be.\\n\\n\\n\\n\\n\\n```\\n# n = 2992\\n# sorted = 2299\\n# n1 =     | |    => 29\\n# n2 =      | |   => 29\\n\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        n = str(int(\"\".join(sorted(str(num)))))\\n        a = \"\".join(n[0:3:2]) or 0\\n        b = \"\".join(n[1:4:2]) or 0\\n        return int(a) + int(b)\\n```",
                "solutionTags": [],
                "code": "```\\n# n = 2992\\n# sorted = 2299\\n# n1 =     | |    => 29\\n# n2 =      | |   => 29\\n\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        n = str(int(\"\".join(sorted(str(num)))))\\n        a = \"\".join(n[0:3:2]) or 0\\n        b = \"\".join(n[1:4:2]) or 0\\n        return int(a) + int(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1992542,
                "title": "python-solution",
                "content": "```python\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        \\n        digits = [0] * 4\\n        d = num\\n        for i in range(4):\\n            d, m = divmod(d, 10)\\n            digits[i] = m\\n        \\n        digits.sort()\\n        \\n        first_value = digits[0] * 10 + digits[2]\\n        second_value = digits[1] * 10 + digits[3]\\n        \\n        return first_value + second_value\\n            \\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        \\n        digits = [0] * 4\\n        d = num\\n        for i in range(4):\\n            d, m = divmod(d, 10)\\n            digits[i] = m\\n        \\n        digits.sort()\\n        \\n        first_value = digits[0] * 10 + digits[2]\\n        second_value = digits[1] * 10 + digits[3]\\n        \\n        return first_value + second_value\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1974977,
                "title": "easy-and-simple-solution-using-array",
                "content": "```\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        string s = num.ToString();\\n        char[] c = s.ToCharArray();\\n        Array.Sort(c);\\n        return ((Convert.ToInt32(c[0].ToString()) + Convert.ToInt32(c[1].ToString())) * 10) + Convert.ToInt32(c[2].ToString()) + Convert.ToInt32(c[3].ToString());          \\n    }\\n}\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        string s = num.ToString();\\n        char[] c = s.ToCharArray();\\n        Array.Sort(c);\\n        return ((Convert.ToInt32(c[0].ToString()) + Convert.ToInt32(c[1].ToString())) * 10) + Convert.ToInt32(c[2].ToString()) + Convert.ToInt32(c[3].ToString());          \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1967523,
                "title": "0ms-beginner-friendly-ezzzz",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n        sort(s.begin(),s.end());\\n        int first=(s[0]-\\'0\\')*10+(s[3]-\\'0\\');\\n        int second=(s[1]-\\'0\\')*10+(s[2]-\\'0\\');\\n        return first+second;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n        sort(s.begin(),s.end());\\n        int first=(s[0]-\\'0\\')*10+(s[3]-\\'0\\');\\n        int second=(s[1]-\\'0\\')*10+(s[2]-\\'0\\');\\n        return first+second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1944223,
                "title": "simple-solution-in-c-faster-than-100-in-c-brute-force-sorting-easy-understanding",
                "content": "***Self explanatory***\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n        sort(begin(s),end(s));\\n        string st=\"\";\\n        st+=s[0];\\n        st+=s[2];\\n        string ss=\"\";\\n        ss+=s[1];\\n        ss+=s[3];\\n        int a=stoi(st);\\n        int b=stoi(ss);\\n        return a+b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n        sort(begin(s),end(s));\\n        string st=\"\";\\n        st+=s[0];\\n        st+=s[2];\\n        string ss=\"\";\\n        ss+=s[1];\\n        ss+=s[3];\\n        int a=stoi(st);\\n        int b=stoi(ss);\\n        return a+b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1938397,
                "title": "math-c-simplest-and-faster-than-100-in-c",
                "content": "```class Solution\\n{\\npublic:\\n    int minimumSum(int num)\\n    {\\n\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n\\n        int a = stoi(s);\\n        int n1 = (a % 1000) / 10;   //2nd and 3rd disits after sorting\\n        int n2 = (a / 1000) * 10 + a % 10;  // 1st and last\\n\\n        return n1 + n2;\\n    }\\n};```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy"
                ],
                "code": "```class Solution\\n{\\npublic:\\n    int minimumSum(int num)\\n    {\\n\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n\\n        int a = stoi(s);\\n        int n1 = (a % 1000) / 10;   //2nd and 3rd disits after sorting\\n        int n2 = (a / 1000) * 10 + a % 10;  // 1st and last\\n\\n        return n1 + n2;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1890716,
                "title": "easy-and-simple-solution",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num=sorted(str(num))\\n        a1= num[0]+num[3]\\n        a2=num[1]+num[2]\\n        return int(a1)+int(a2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num=sorted(str(num))\\n        a1= num[0]+num[3]\\n        a2=num[1]+num[2]\\n        return int(a1)+int(a2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1870243,
                "title": "c-simple-very-easy-easy-understandable-100-accurate",
                "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n         int a[4];\\n        int i = 0;\\n        while(num>0)\\n        {\\n            a[i] = num%10;\\n            num= num/10;\\n            i++;\\n        }\\n      \\n        sort(a,a+i);\\n        for(int i = 0;i<4;i++)\\n        {\\n            cout<<a[i]<<endl;\\n        }\\n    int s = 10*a[0]+a[2];\\n    int t = 10*a[1]+a[3];\\n        return s+t;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Array",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n         int a[4];\\n        int i = 0;\\n        while(num>0)\\n        {\\n            a[i] = num%10;\\n            num= num/10;\\n            i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1850990,
                "title": "100-faster-easy-0ms-3-lines-of-code",
                "content": "class Solution {\\n    public int minimumSum(int num) {\\n        int arr[]=new int[4];\\n        for(int i=0;i<4;i++){\\n            arr[i]=num%10;\\n            num/=10;\\n        }Arrays.sort(arr);\\n        return arr[0]*10+arr[2]+arr[1]*10+arr[3];  \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        int arr[]=new int[4];\\n        for(int i=0;i<4;i++){\\n            arr[i]=num%10;\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1849855,
                "title": "java-100-faster-easy",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int count[]=new int[10];\\n        Arrays.fill(count,0);\\n        for(int i=num;i>0;i/=10)count[i%10]++;\\n        int a=0,b=0;\\n        boolean flag=false;\\n        int i=0;\\n        while(i < 10){\\n            if(count[i] > 0){\\n                if(flag)a=a*10+i;\\n                else b=b*10+i;\\n                flag=!flag;\\n                count[i]--;\\n            }\\n            if(count[i]==0)i++;\\n        }\\n        return a+b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int count[]=new int[10];\\n        Arrays.fill(count,0);\\n        for(int i=num;i>0;i/=10)count[i%10]++;\\n        int a=0,b=0;\\n        boolean flag=false;\\n        int i=0;\\n        while(i < 10){\\n            if(count[i] > 0){\\n                if(flag)a=a*10+i;\\n                else b=b*10+i;\\n                flag=!flag;\\n                count[i]--;\\n            }\\n            if(count[i]==0)i++;\\n        }\\n        return a+b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1828469,
                "title": "c-very-easy-implementation",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n      vector<int> vec;\\n        while(num>0)\\n        {\\n            vec.push_back(num%10);\\n            num = num / 10;\\n        }\\n        \\n        sort(vec.begin(),vec.end());\\n        return (vec[0]*10+vec[2] + (vec[1]*10+vec[3]));\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n      vector<int> vec;\\n        while(num>0)\\n        {\\n            vec.push_back(num%10);\\n            num = num / 10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1804015,
                "title": "c-solution-faster-than-100-users-easy-solution",
                "content": "```  Time complexity :- O(nlog(n)) where n = 4 which comes out to be constant.  Space complexity :- O(1) because we have used an array of constant size 4.```\\n\\n```\\n int minimumSum(int num) {\\n        int a[4],i=0,c=0,d=0;       // Made an array of size 4.\\n        while(num!=0)\\n        {\\n            int r=num%10;\\n            a[i++]=r;               // Pushed the digits of number into array\\n            num=num/10;\\n        } \\n        sort(a,a+4);        // Sorted the array\\n        c=c*10+a[0];       // Forming the first digit \\n        c=c*10+a[3];\\n        d=d*10+a[1];      // Forming the second digit\\n        d=d*10+a[2];\\n        return c+d;          // Returned the sum\\n    }\\n```\\n``` If you like my approach then hit the like button.```",
                "solutionTags": [],
                "code": "```  Time complexity :- O(nlog(n)) where n = 4 which comes out to be constant.  Space complexity :- O(1) because we have used an array of constant size 4.```\n```\\n int minimumSum(int num) {\\n        int a[4],i=0,c=0,d=0;       // Made an array of size 4.\\n        while(num!=0)\\n        {\\n            int r=num%10;\\n            a[i++]=r;               // Pushed the digits of number into array\\n            num=num/10;\\n        } \\n        sort(a,a+4);        // Sorted the array\\n        c=c*10+a[0];       // Forming the first digit \\n        c=c*10+a[3];\\n        d=d*10+a[1];      // Forming the second digit\\n        d=d*10+a[2];\\n        return c+d;          // Returned the sum\\n    }\\n```\n``` If you like my approach then hit the like button.```",
                "codeTag": "Unknown"
            },
            {
                "id": 1802931,
                "title": "clean-javascript-solution",
                "content": "```\\n// t: O(log n) s: O(n)\\n\\nvar minimumSum = function(num) {\\n    const array = num.toString().split(\\'\\')\\n    \\n    array.sort((a, b) => a - b)\\n    \\n    return Number(array[0] + array[2]) + Number(array[1] + array[3])\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// t: O(log n) s: O(n)\\n\\nvar minimumSum = function(num) {\\n    const array = num.toString().split(\\'\\')\\n    \\n    array.sort((a, b) => a - b)\\n    \\n    return Number(array[0] + array[2]) + Number(array[1] + array[3])\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1792540,
                "title": "python3-greedy-algorithm-priority-queue-min-heap-easy-understanding",
                "content": "TC: O(4log3)\\nSC: O(4)\\n\\n```\\ndef minimumSum(self, num: int) -> int:\\n        digits = []\\n        while num:\\n            heappush(digits, num % 10)\\n            num //= 10\\n        \\n        i = 0\\n        num1, num2 = 0, 0\\n        while digits:\\n            if i % 2 == 0:\\n                num1 = num1 * 10 + heappop(digits)\\n                i += 1\\n            else:\\n                num2 = num2 * 10 + heappop(digits)\\n                i -= 1\\n        \\n        return num1 + num2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ndef minimumSum(self, num: int) -> int:\\n        digits = []\\n        while num:\\n            heappush(digits, num % 10)\\n            num //= 10\\n        \\n        i = 0\\n        num1, num2 = 0, 0\\n        while digits:\\n            if i % 2 == 0:\\n                num1 = num1 * 10 + heappop(digits)\\n                i += 1\\n            else:\\n                num2 = num2 * 10 + heappop(digits)\\n                i -= 1\\n        \\n        return num1 + num2\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1771364,
                "title": "kotlin-with-comments",
                "content": "```\\nclass Solution {\\n    fun minimumSum( num: Int): Int {\\n    //create the array of integers, we know from the task the size\\n\\t var digits = IntArray(4)  \\n\\t \\n      var n = num // num is val so we can reassign it to mak a var\\n        var i = 0 // a loop to get digits\\n        while (n > 0) {\\n            digits[i] = n % 10\\n            i++\\n            n /= 10  \\n        }\\n    digits.sort() \\n\\t// we know that after the sorting the first two digits are going to be the smallest so we just pair them with third and forth digits\\n    return digits[0]*10 + digits[2] + digits[1]*10 + digits[3] \\n }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun minimumSum( num: Int): Int {\\n    //create the array of integers, we know from the task the size\\n\\t var digits = IntArray(4)  \\n\\t \\n      var n = num // num is val so we can reassign it to mak a var\\n        var i = 0 // a loop to get digits\\n        while (n > 0) {\\n            digits[i] = n % 10\\n            i++\\n            n /= 10  \\n        }\\n    digits.sort() \\n\\t// we know that after the sorting the first two digits are going to be the smallest so we just pair them with third and forth digits\\n    return digits[0]*10 + digits[2] + digits[1]*10 + digits[3] \\n }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1765396,
                "title": "swift-version-4ms",
                "content": "```\\nfunc minimumSum(_ num: Int) -> Int {\\n        let s = String(num).map { $0 }.sorted()\\n        return Int(\"\\\\(s[0])\\\\(s[3])\")! + Int(\"\\\\(s[1])\\\\(s[2])\")!\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nfunc minimumSum(_ num: Int) -> Int {\\n        let s = String(num).map { $0 }.sorted()\\n        return Int(\"\\\\(s[0])\\\\(s[3])\")! + Int(\"\\\\(s[1])\\\\(s[2])\")!\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1753758,
                "title": "python-simple",
                "content": "Approach:\\n1. Get all digits of a number\\n2. Sort digits\\n3. Get min sum\\n\\nIf the sorted digits of a number are `[A, B, C, D]`, the min sum of digits is `AC + BD`.\\nFor example: \\nThe number is `4213`, sorted digits are `1234` and the min sum: `13 + 24 = 37`.\\nThe number is `1200`, sorted digits are `0012` and the min sum: `01 + 02 = 3`.\\n\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        nums = []\\n        while num:\\n            nums.append(num % 10)\\n            num //= 10\\n        nums.sort()\\n        return nums[0] * 10 + nums[2] + nums[1] * 10 + nums[3]\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        nums = []\\n        while num:\\n            nums.append(num % 10)\\n            num //= 10\\n        nums.sort()\\n        return nums[0] * 10 + nums[2] + nums[1] * 10 + nums[3]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750825,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int a = num%10;\\n        int b = (num/10)%10;\\n        int c = (num/100)%10;\\n        int d = (num/1000)%10;\\n        vector<int> digits = {a, b, c, d};\\n        sort(digits.begin(), digits.end());\\n        return (digits[0]*10 + digits[3]) + (digits[1]*10 + digits[2]);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int a = num%10;\\n        int b = (num/10)%10;\\n        int c = (num/100)%10;\\n        int d = (num/1000)%10;\\n        vector<int> digits = {a, b, c, d};\\n        sort(digits.begin(), digits.end());\\n        return (digits[0]*10 + digits[3]) + (digits[1]*10 + digits[2]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747807,
                "title": "simplest-sol-ever",
                "content": "int minimumSum(int num) {\\n\\n        int arr[4];\\n        int i=0;\\n        while(num!=0){\\n            arr[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        sort(arr,arr+4);\\n        int r=arr[0]*10+arr[2];\\n        int s=arr[1]*10+arr[3];\\n        return r+s;\\n    }",
                "solutionTags": [],
                "code": "int minimumSum(int num) {\\n\\n        int arr[4];\\n        int i=0;\\n        while(num!=0){\\n            arr[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        sort(arr,arr+4);\\n        int r=arr[0]*10+arr[2];\\n        int s=arr[1]*10+arr[3];\\n        return r+s;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1747554,
                "title": "bitmask-solution-overkill",
                "content": "1.Use all mask from 1 to 14 (\"1111\" means 15 so, we have to take 14 as upper bound so that non-empty 2nd list is formed)\\n2.Make two list for each mask(1st list - set bits, 2nd list-unset bits)\\n3.Sort those list\\n4.Form two number from those lists\\n5.Calculate sum\\n6.Track minimum\\n\\nJAVA OVERKILL SOLN.\\n\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int sum=Integer.MAX_VALUE;\\n        StringBuilder sb=new StringBuilder();\\n        sb.append(num);\\n        String y=sb.toString();\\n        char ar[]=y.toCharArray();\\n        for(int i=1;i<15;i++)\\n        {\\n            ArrayList<Character> al1=new ArrayList<>();\\n            ArrayList<Character> al2=new ArrayList<>();\\n            for(int j=1;j<=4;j++)\\n            {\\n              if((i & (1 << (j - 1))) > 0)\\n                  al1.add(ar[j-1]);\\n              else\\n                  al2.add(ar[j-1]);\\n            }\\n          int si1=al1.size();\\n          char a1[]=new char[si1];\\n          for(int j=0;j<si1;j++)\\n             a1[j]=al1.get(j);\\n          \\n           int si2=al2.size();\\n          char a2[]=new char[si2];\\n          for(int j=0;j<si2;j++)\\n             a2[j]=al2.get(j);\\n          \\n            Arrays.sort(a1);\\n            Arrays.sort(a2);\\n            String x1=new String(a1);\\n            String x2=new String(a2);\\n            int temp=0;\\n            temp+=Integer.parseInt(x1);\\n            temp+=Integer.parseInt(x2);\\n            sum=Math.min(sum,temp);\\n          \\n        }\\n      return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int sum=Integer.MAX_VALUE;\\n        StringBuilder sb=new StringBuilder();\\n        sb.append(num);\\n        String y=sb.toString();\\n        char ar[]=y.toCharArray();\\n        for(int i=1;i<15;i++)\\n        {\\n            ArrayList<Character> al1=new ArrayList<>();\\n            ArrayList<Character> al2=new ArrayList<>();\\n            for(int j=1;j<=4;j++)\\n            {\\n              if((i & (1 << (j - 1))) > 0)\\n                  al1.add(ar[j-1]);\\n              else\\n                  al2.add(ar[j-1]);\\n            }\\n          int si1=al1.size();\\n          char a1[]=new char[si1];\\n          for(int j=0;j<si1;j++)\\n             a1[j]=al1.get(j);\\n          \\n           int si2=al2.size();\\n          char a2[]=new char[si2];\\n          for(int j=0;j<si2;j++)\\n             a2[j]=al2.get(j);\\n          \\n            Arrays.sort(a1);\\n            Arrays.sort(a2);\\n            String x1=new String(a1);\\n            String x2=new String(a2);\\n            int temp=0;\\n            temp+=Integer.parseInt(x1);\\n            temp+=Integer.parseInt(x2);\\n            sum=Math.min(sum,temp);\\n          \\n        }\\n      return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747553,
                "title": "python3-very-simple-2-lines",
                "content": "Greedy solution\\nTime: ```O(1)```\\nSpace ```O(1)```\\n(considering nums is between 1000 and 9999)\\n\\n```\\nclass Solution:\\n    def minimumSum(self, num):\\n        a, b, c, d = sorted(str(num))\\n        return int(a + c) + int(b + d)\\n```",
                "solutionTags": [],
                "code": "```O(1)```\n```O(1)```\n```\\nclass Solution:\\n    def minimumSum(self, num):\\n        a, b, c, d = sorted(str(num))\\n        return int(a + c) + int(b + d)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747316,
                "title": "python-two-lines",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        d = sorted(str(num))\\n        return int(d[0]+d[2]) + int(d[1]+d[3])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        d = sorted(str(num))\\n        return int(d[0]+d[2]) + int(d[1]+d[3])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747236,
                "title": "c-linq-one-line",
                "content": "```\\npublic int MinimumSum(int num) {\\n\\treturn num.ToString().ToCharArray().OrderBy(x => x).Select( (x, i) => (i < 2 ? 10 : 1) * (x - \\'0\\')).Sum();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int MinimumSum(int num) {\\n\\treturn num.ToString().ToCharArray().OrderBy(x => x).Select( (x, i) => (i < 2 ? 10 : 1) * (x - \\'0\\')).Sum();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1747126,
                "title": "c-sort",
                "content": "```\\nclass Solution {\\npublic:\\n  int minimumSum(int num) {\\n    vector<int>v;\\n    for(int i = 0; i != 4; i++, num /= 10) v.push_back(num%10);\\n    sort(v.begin(), v.end());\\n    return (v[0] + v[1])*10 + v[2] + v[3];\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int minimumSum(int num) {\\n    vector<int>v;\\n    for(int i = 0; i != 4; i++, num /= 10) v.push_back(num%10);\\n    sort(v.begin(), v.end());\\n    return (v[0] + v[1])*10 + v[2] + v[3];\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747024,
                "title": "minimum-sum-of-four-digit-number-after-splitting-digits-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        vector<int> v;\\n        \\n        while(num>0)\\n        {\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        \\n        sort(v.begin(),v.end());\\n        \\n        int n=v.size();\\n        \\n        int a=v[0]*10+v[n-1];\\n        int b=v[1]*10+v[n-2];\\n        \\n        return (a+b);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        vector<int> v;\\n        \\n        while(num>0)\\n        {\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        \\n        sort(v.begin(),v.end());\\n        \\n        int n=v.size();\\n        \\n        int a=v[0]*10+v[n-1];\\n        int b=v[1]*10+v[n-2];\\n        \\n        return (a+b);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1747012,
                "title": "simple-logic-with-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        int temp = num;\\n        vector<int>arr;\\n        \\n        while(temp !=0)\\n        {\\n            int digit = temp%10;\\n            arr.push_back(digit);\\n            temp = temp/10; \\n        }\\n        \\n        sort(arr.begin(),arr.end());\\n        \\n        int new1= arr[0]*10+arr[3];\\n        \\n        int new2= arr[1]*10+arr[2];\\n        \\n        \\n        return new1+new2;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        \\n        int temp = num;\\n        vector<int>arr;\\n        \\n        while(temp !=0)\\n        {\\n            int digit = temp%10;\\n            arr.push_back(digit);\\n            temp = temp/10; \\n        }\\n        \\n        sort(arr.begin(),arr.end());\\n        \\n        int new1= arr[0]*10+arr[3];\\n        \\n        int new2= arr[1]*10+arr[2];\\n        \\n        \\n        return new1+new2;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879723,
                "title": "python-easy-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        arr = list(str(num))\\n        arr.sort()\\n        a = int(arr[0]+arr[2])+int(arr[1]+arr[3])\\n        return a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        arr = list(str(num))\\n        arr.sort()\\n        a = int(arr[0]+arr[2])+int(arr[1]+arr[3])\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3795619,
                "title": "fully-explained-c-easy-to-understand",
                "content": "# Intuition & Approach\\n1. ```vector<int> arr;```: This creates an empty vector arr to store the individual digits of the input number.\\n\\n2. ```int i = 3;```: This initializes a variable ```i``` with the value ```3```.\\n\\n3. ```pair<int, int> p;```: This declares a pair ```p``` that will store two integers.\\n\\n4. The ```while``` loop: This loop extracts the digits of the ```num``` one by one and stores them in the vector ```arr```. It also decrements the variable ```i``` until it becomes ```0```. This loop is used to extract exactly ```4``` digits from the input ```num```, assuming it has *at least four digits*.\\n\\n5. ```sort(arr.begin(), arr.end());```: This sorts the digits stored in the vector ```arr``` in ascending order.\\n\\n6. ```p.first = arr[0] * 10 + arr[2];```: This calculates the first integer by taking the smallest two digits (*0 and second after sorting*) and forming a *two-digit number*.\\n\\n7. ```p.second = arr[1] * 10 + arr[3];```: This calculates the second integer by taking the larger two digits (first and third after sorting) and forming a two-digit number.\\n\\n8. ```return p.first + p.second;```: **Finally**, the function returns ***the sum of the two integers calculated above***, which is the minimum possible sum of two integers formed by the digits of the input num.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Please UPVOTE & Comment CODE below\\uD83D\\uDC47\\uD83D\\uDC47\\uD83D\\uDC47\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n       vector<int>arr;\\n       int i = 3;\\n       pair<int,int>p;\\n       while(num){\\n           arr.push_back(num%10);\\n           num = num/10;\\n           i--;\\n       }\\n       sort(arr.begin(),arr.end());\\n       p.first = arr[0] * 10 + arr[2];\\n       p.second = arr[1] *10 + arr[3];\\n       return p.first + p.second;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```vector<int> arr;```\n```int i = 3;```\n```i```\n```3```\n```pair<int, int> p;```\n```p```\n```while```\n```num```\n```arr```\n```i```\n```0```\n```4```\n```num```\n```sort(arr.begin(), arr.end());```\n```arr```\n```p.first = arr[0] * 10 + arr[2];```\n```p.second = arr[1] * 10 + arr[3];```\n```return p.first + p.second;```\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n       vector<int>arr;\\n       int i = 3;\\n       pair<int,int>p;\\n       while(num){\\n           arr.push_back(num%10);\\n           num = num/10;\\n           i--;\\n       }\\n       sort(arr.begin(),arr.end());\\n       p.first = arr[0] * 10 + arr[2];\\n       p.second = arr[1] *10 + arr[3];\\n       return p.first + p.second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3777211,
                "title": "java-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nInitially we need to convert the number in the form of array so that we can make the pairs of all the digits and check one by one which pairs will give the minimum sum.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- Describe your approach to solving the problem. -->\\nTo convert the num in the array we will make a new array and extract the last digit and store it in the new array and sort the array so as to find the answer greedily.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int minimumSum(int num) \\n    {\\n        int[] arr = new int[4];\\n        int i=0;\\n        while(num>0)\\n        {\\n            int a = num%10;\\n            num = num/10;\\n            arr[i++] = a;\\n        }\\n        Arrays.sort(arr);\\n                 \\n        int v1 = arr[0]*10 + arr[2];\\n        int v2 = arr[1]*10 + arr[3];\\n        return v1+v2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int minimumSum(int num) \\n    {\\n        int[] arr = new int[4];\\n        int i=0;\\n        while(num>0)\\n        {\\n            int a = num%10;\\n            num = num/10;\\n            arr[i++] = a;\\n        }\\n        Arrays.sort(arr);\\n                 \\n        int v1 = arr[0]*10 + arr[2];\\n        int v2 = arr[1]*10 + arr[3];\\n        return v1+v2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3623638,
                "title": "simple-c-solution",
                "content": "# Approach\\n- Notice that the most optimal way to obtain the minimum possible sum using 4 digits is by summing up two 2-digit numbers.\\n- We can use the two smallest digits out of the four as the digits found in the tens place respectively.\\n- Similarly, we use the final 2 larger digits as the digits found in the ones place.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution\\n{\\n    public int MinimumSum(int num)\\n    {\\n        var sortedDigits = num.ToString().OrderBy(x => x).Select(x => x - \\'0\\').ToArray();\\n        var num1 = sortedDigits[0] * 10 + sortedDigits[2];\\n        var num2 = sortedDigits[1] * 10 + sortedDigits[3];\\n\\n        return num1 + num2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int MinimumSum(int num)\\n    {\\n        var sortedDigits = num.ToString().OrderBy(x => x).Select(x => x - \\'0\\').ToArray();\\n        var num1 = sortedDigits[0] * 10 + sortedDigits[2];\\n        var num2 = sortedDigits[1] * 10 + sortedDigits[3];\\n\\n        return num1 + num2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490568,
                "title": "typescript-solution",
                "content": "\\n# Code\\n```\\nfunction minimumSum(num: number): number {\\n  const newNum = num.toString().split(``).sort();\\n  return parseInt(newNum[0] + newNum[2]) + parseInt(newNum[1] + newNum[3]);\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction minimumSum(num: number): number {\\n  const newNum = num.toString().split(``).sort();\\n  return parseInt(newNum[0] + newNum[2]) + parseInt(newNum[1] + newNum[3]);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3460831,
                "title": "basic-maths-stl",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s= to_string(num);\\n        sort(s.begin(), s.end());\\n        \\n        int n1= (s[0]-\\'0\\')*10 + (s[3]-\\'0\\');\\n        int n2= (s[1]-\\'0\\')*10 + (s[2]-\\'0\\');\\n\\n        return (n1+n2);        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s= to_string(num);\\n        sort(s.begin(), s.end());\\n        \\n        int n1= (s[0]-\\'0\\')*10 + (s[3]-\\'0\\');\\n        int n2= (s[1]-\\'0\\')*10 + (s[2]-\\'0\\');\\n\\n        return (n1+n2);        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456146,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n      int[] dig=new int[4];\\n      int cur=0;\\n      while(num>0){\\n          dig[cur++]=num%10;\\n          num=num/10;\\n      }\\n      Arrays.sort(dig);\\n      int new1=dig[0]*10+dig[2];\\n      int new2=dig[1]*10+dig[3];\\n     return new1+new2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n      int[] dig=new int[4];\\n      int cur=0;\\n      while(num>0){\\n          dig[cur++]=num%10;\\n          num=num/10;\\n      }\\n      Arrays.sort(dig);\\n      int new1=dig[0]*10+dig[2];\\n      int new2=dig[1]*10+dig[3];\\n     return new1+new2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3332392,
                "title": "c",
                "content": "# Intuition\\nBrute-force\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\ncan use sort, or just chose each charater to compare\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution\\n        {\\n            public int MinimumSum(int num)\\n            {\\n                var nums = num.ToString().ToArray();\\n                Array.Sort(nums);\\n                return Convert.ToInt32(nums[0].ToString() + nums[2].ToString()) + Convert.ToInt32(nums[1].ToString() + nums[3].ToString());\\n            }\\n        }\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n        {\\n            public int MinimumSum(int num)\\n            {\\n                var nums = num.ToString().ToArray();\\n                Array.Sort(nums);\\n                return Convert.ToInt32(nums[0].ToString() + nums[2].ToString()) + Convert.ToInt32(nums[1].ToString() + nums[3].ToString());\\n            }\\n        }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3316919,
                "title": "simple-java-solution-0ms-runtime-beats-100",
                "content": "# Stats\\n- **RunTime**: 0ms (Beats 100%)\\n\\n# Code\\n```\\npublic int minimumSum(int num) {\\n    int digitsArr [] = new int[4], index = 0;\\n\\n    while (num != 0) {\\n        digitsArr[index++] = num % 10;\\n        num /= 10;\\n    }\\n\\n    Arrays.sort(digitsArr);\\n\\n    return ((digitsArr[0] * 10 + digitsArr[3]) + (digitsArr[1] * 10 + digitsArr[2]));\\n}\\n\\n```\\n<br/>\\n<br/>\\n<br/>\\n\\nAuthor :- [*Abhinav Bhardwaj*](https://abhinavbhardwaj.in)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int minimumSum(int num) {\\n    int digitsArr [] = new int[4], index = 0;\\n\\n    while (num != 0) {\\n        digitsArr[index++] = num % 10;\\n        num /= 10;\\n    }\\n\\n    Arrays.sort(digitsArr);\\n\\n    return ((digitsArr[0] * 10 + digitsArr[3]) + (digitsArr[1] * 10 + digitsArr[2]));\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3293452,
                "title": "vemry-simple-method-for-beginners",
                "content": "VEMRY SIMPLE METHOD FOR BEGINNERS(BEGGERS)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v; int ans=0;\\n      while(num!=0)\\n      {\\n        int dgt=num%10;\\n        v.push_back(dgt);\\n        num=num/10;\\n      }  \\n      sort(v.begin(),v.end());\\n      int a1=0; int  a2=0;\\n      a1=v[0]*10+v[2];\\n      a2=v[1]*10+v[3];\\n      ans=a1+a2;\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> v; int ans=0;\\n      while(num!=0)\\n      {\\n        int dgt=num%10;\\n        v.push_back(dgt);\\n        num=num/10;\\n      }  \\n      sort(v.begin(),v.end());\\n      int a1=0; int  a2=0;\\n      a1=v[0]*10+v[2];\\n      a2=v[1]*10+v[3];\\n      ans=a1+a2;\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257168,
                "title": "c-using-sort",
                "content": "\\n \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        while(num){\\n            v.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        swap(v[1],v[2]); \\n\\n        int num1=0,num2=0;\\n        return v[0]*10+v[1]+ v[2]*10+v[3]; \\n    }\\n}; \\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        while(num){\\n            v.push_back(num%10);\\n            num = num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        swap(v[1],v[2]); \\n\\n        int num1=0,num2=0;\\n        return v[0]*10+v[1]+ v[2]*10+v[3]; \\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3256647,
                "title": "simple-and-logic-code-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s=list(str(num))\\n        s.sort()\\n        ans=int(s[0]+s[2])+int(s[1]+s[3])\\n        return ans\\n        \\n\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        s=list(str(num))\\n        s.sort()\\n        ans=int(s[0]+s[2])+int(s[1]+s[3])\\n        return ans\\n        \\n\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3221163,
                "title": "c-0ms-easy-understanding-priority-queue-greedy",
                "content": "```\\nclass Solution {\\n  \\npublic:\\n    int minimumSum(int num) {\\n        priority_queue<int, vector<int>, greater<int>> pq;\\n        \\n        while(num %10 != num){\\n            pq.push(num%10);\\n            num/=10;\\n        }\\n        \\n        pq.push(num);\\n        \\n        int num1 = 0, num2 = 0;\\n        \\n        for(int i = 0 ; !pq.empty(); i++){\\n            \\n            if(i%2)\\n                num2 = num2*10 + pq.top();\\n            \\n            else \\n                num1 = num1*10 + pq.top();\\n            \\n            pq.pop();\\n        }\\n        \\n        return num1+num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n  \\npublic:\\n    int minimumSum(int num) {\\n        priority_queue<int, vector<int>, greater<int>> pq;\\n        \\n        while(num %10 != num){\\n            pq.push(num%10);\\n            num/=10;\\n        }\\n        \\n        pq.push(num);\\n        \\n        int num1 = 0, num2 = 0;\\n        \\n        for(int i = 0 ; !pq.empty(); i++){\\n            \\n            if(i%2)\\n                num2 = num2*10 + pq.top();\\n            \\n            else \\n                num1 = num1*10 + pq.top();\\n            \\n            pq.pop();\\n        }\\n        \\n        return num1+num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3202277,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] nums = new int[4];\\n        int i=0;\\n        while(num>0){\\n            nums[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        Arrays.sort(nums);\\n        return nums[0]*10+nums[3]+nums[1]*10+nums[2];\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] nums = new int[4];\\n        int i=0;\\n        while(num>0){\\n            nums[i]=num%10;\\n            num=num/10;\\n            i++;\\n        }\\n        Arrays.sort(nums);\\n        return nums[0]*10+nums[3]+nums[1]*10+nums[2];\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189178,
                "title": "c-accepted-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        List<int> number=new();\\n        while(num>0){\\n            number.Add(num%10);\\n            num/=10;\\n        }\\n        number.Sort();\\n        return (number[0]*10+number[3])+(number[1]*10+number[2]);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int MinimumSum(int num) {\\n        List<int> number=new();\\n        while(num>0){\\n            number.Add(num%10);\\n            num/=10;\\n        }\\n        number.Sort();\\n        return (number[0]*10+number[3])+(number[1]*10+number[2]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3142000,
                "title": "c-using-minimum-and-maximum",
                "content": "# Approach\\nIf the digits of number are d1,d2,d3 and d4.\\nIn order to get minimum sum from 2 pair of number formed from these digits [Example - d1d2 + d4d3 , d2d4 + d1d3,... like 15+54,14+55 for number 5144]\\n\\nFor d1d2 + d3d4\\nThe answer is 10xd1 + d2 + 10xd3 + d4\\nor 10x(d1+d3) + (d2+d4)\\n\\nWe have to minimize this, the digits range from 0-9. Our priority should be that d1 and d3, i.e. Tens place should be minimum. Hence if we select 2 smallest digits and keep them at tens place and other numbers at ones place we can minimize the sum.\\n\\nHence if the digits in descending order are a3,a2,a1 and a0.\\nThe answer is 10(a1+a0) + a2+a3\\n\\nThe numbers can be sorted using if else statement, min-max or sort algorithm. \\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> arr={num%10,(num/10)%10,(num/100)%10,num/1000};\\n        sort(arr.begin(),arr.end());\\n        return arr[3]+arr[2]+10*(arr[1]+arr[0]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> arr={num%10,(num/10)%10,(num/100)%10,num/1000};\\n        sort(arr.begin(),arr.end());\\n        return arr[3]+arr[2]+10*(arr[1]+arr[0]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3094630,
                "title": "2160-java-2-approach",
                "content": "# Approach 1\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 1 ms\\n- Beats : 58.41%\\n- Memory : 40.4 MB\\n- Beats : 38.66%\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n// to create a array is 4 size (ex. 0 , 0 , 0 , 0);\\n        int[] arr = new int[4];\\n//and add individual element in num (ex. 4009 to 4 , 0 , 0 , 9);\\n        for(int i = 0; i < 4; i++){\\n            arr[i] = num % 10;\\n            num /= 10;\\n        }\\n//sort a array arr because easy to find minimum value and \\n//maxmimum value ex(4 , 0 , 0 , 9 to 0 , 0 , 4 , 9);\\n        Arrays.sort(arr);\\n//take a minimum value and maximum value because 0 and 9\\n// min is 0 and max is 9 to form like these 90 is greater than 09\\n// so we find minimum value is 09;\\n        return arr[0] * 10 + arr[3] + arr[1] * 10 + arr[2];\\n        //     ((0 * 10 )  +   9)   + ( ( 0  * 10) +   4);\\n        //     (  0  +   9)   + ( 0 +   4);\\n        //     9 + 4 = 13;\\n    }\\n}\\n```\\n# clean Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] arr = new int[4];\\n        for(int i = 0; i < 4; i++){\\n            arr[i] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(arr);\\n        return arr[0] * 10 + arr[3] + arr[1] * 10 + arr[2];\\n```\\n# Approach 2\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Runtime : 1 ms\\n- Beats : 58.80%\\n- Memory : 41 MB\\n- Beats : 24.90%\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n// String s is to convert int to string\\n        String s = String.valueOf(num);\\n// char ch is convert String to char array;\\n        char ch[] = s.toCharArray();\\n//to sort a ch array because easy to fing small to big number;\\n        Arrays.sort(ch);\\n        int num1 = 0, num2 = 0;\\n        if(ch[0] != \\'0\\') num1 += ch[0] - \\'0\\';\\n        if(ch[3] != \\'0\\'){\\n            num1 *= 10;\\n            num1 += ch[3] - \\'0\\';\\n        }\\n        if(ch[1] != \\'0\\') num2 += ch[1] - \\'0\\';\\n        if(ch[2] != \\'0\\'){\\n            num2 *= 10;\\n            num2 += ch[2] - \\'0\\';\\n        }\\n        return num1 + num2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n// to create a array is 4 size (ex. 0 , 0 , 0 , 0);\\n        int[] arr = new int[4];\\n//and add individual element in num (ex. 4009 to 4 , 0 , 0 , 9);\\n        for(int i = 0; i < 4; i++){\\n            arr[i] = num % 10;\\n            num /= 10;\\n        }\\n//sort a array arr because easy to find minimum value and \\n//maxmimum value ex(4 , 0 , 0 , 9 to 0 , 0 , 4 , 9);\\n        Arrays.sort(arr);\\n//take a minimum value and maximum value because 0 and 9\\n// min is 0 and max is 9 to form like these 90 is greater than 09\\n// so we find minimum value is 09;\\n        return arr[0] * 10 + arr[3] + arr[1] * 10 + arr[2];\\n        //     ((0 * 10 )  +   9)   + ( ( 0  * 10) +   4);\\n        //     (  0  +   9)   + ( 0 +   4);\\n        //     9 + 4 = 13;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] arr = new int[4];\\n        for(int i = 0; i < 4; i++){\\n            arr[i] = num % 10;\\n            num /= 10;\\n        }\\n        Arrays.sort(arr);\\n        return arr[0] * 10 + arr[3] + arr[1] * 10 + arr[2];\\n```\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n// String s is to convert int to string\\n        String s = String.valueOf(num);\\n// char ch is convert String to char array;\\n        char ch[] = s.toCharArray();\\n//to sort a ch array because easy to fing small to big number;\\n        Arrays.sort(ch);\\n        int num1 = 0, num2 = 0;\\n        if(ch[0] != \\'0\\') num1 += ch[0] - \\'0\\';\\n        if(ch[3] != \\'0\\'){\\n            num1 *= 10;\\n            num1 += ch[3] - \\'0\\';\\n        }\\n        if(ch[1] != \\'0\\') num2 += ch[1] - \\'0\\';\\n        if(ch[2] != \\'0\\'){\\n            num2 *= 10;\\n            num2 += ch[2] - \\'0\\';\\n        }\\n        return num1 + num2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3065291,
                "title": "c-solution-100-faster-code-easy-to-understand",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Minimum Sum of Four Digit Number After Splitting Digits.\\nMemory Usage: 6 MB, less than 22.41% of C++ online submissions for Minimum Sum of Four Digit Number After Splitting Digits.\\n\\n\\tint minimumSum(int num) {\\n        vector<int>ans;\\n        int k=num;\\n        while(k!=0){\\n            \\n            ans.push_back(k%10);\\n            k=k/10;\\n            \\n        }\\n        sort(ans.begin(),ans.end());\\n        int sum=(ans[0]*10+ans[3])+ans[1]*10+ans[2];\\n        return sum;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Math",
                    "Greedy",
                    "Sorting"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Minimum Sum of Four Digit Number After Splitting Digits.\\nMemory Usage: 6 MB, less than 22.41% of C++ online submissions for Minimum Sum of Four Digit Number After Splitting Digits.\\n\\n\\tint minimumSum(int num) {\\n        vector<int>ans;\\n        int k=num;\\n        while(k!=0){\\n            \\n            ans.push_back(k%10);\\n            k=k/10;\\n            \\n        }\\n        sort(ans.begin(),ans.end());\\n        int sum=(ans[0]*10+ans[3])+ans[1]*10+ans[2];\\n        return sum;\\n    }\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3057574,
                "title": "beats-100-java-submissions-easy-to-understand-explained",
                "content": "# Intuition\\nFirst we spilt the digits and get each digit and we sort them. Once sorted we just need to add 0th and 1st element as teth place and 2nd and 3rd element as ocne. \\n5643\\n3 4 5 6 //after sorting and split\\n30 + 40 + 5 + 6 would give us minimum\\n# Code\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] res=new int[4];\\n        int i=0;\\n        while(num>0){\\n            res[i]=num%10;\\n            num/=10;\\n            i++;\\n        }\\n        Arrays.sort(res);\\n        return res[0]*10+res[2]+res[1]*10+res[3];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] res=new int[4];\\n        int i=0;\\n        while(num>0){\\n            res[i]=num%10;\\n            num/=10;\\n            i++;\\n        }\\n        Arrays.sort(res);\\n        return res[0]*10+res[2]+res[1]*10+res[3];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035849,
                "title": "c-easy-approach-to-problem",
                "content": "# Intuition\\nTo obtain the minimum sum, we must first obtain the two smallest possible numbers from the four digit number.\\n\\n# Approach\\nSTEP 1: The four digit number can be broken down into an array. \\nSTEP 2: The array then has to be sorted. This helps us in obtaining two numbers. \\nSTEP 3: We can see that (in any case) the smallest numbers can be made by combining a[0],a[3] and a[1],a[2].\\nSTEP 4: Hence,returning the sum of these numbers help us in obtaining the least possible sum.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n         int arr[4];\\n         int sum=0;\\n\\n         for(int i=0; i<4 ; i++)\\n    {\\n        arr[i]=num%10;\\n        num=num/10;\\n    }\\n        sort(arr, arr+4);\\n        int num1 = (arr[0]*10)+arr[3];\\n        int num2 = (arr[1]*10)+ arr[2];\\n\\n        return num1+num2;}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) \\n    {\\n         int arr[4];\\n         int sum=0;\\n\\n         for(int i=0; i<4 ; i++)\\n    {\\n        arr[i]=num%10;\\n        num=num/10;\\n    }\\n        sort(arr, arr+4);\\n        int num1 = (arr[0]*10)+arr[3];\\n        int num2 = (arr[1]*10)+ arr[2];\\n\\n        return num1+num2;}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2865976,
                "title": "easy-java-solution-for-beginners",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int arr[] = new int[4];\\n        int size = 0;\\n        \\n        while(num > 0) {\\n            \\n            arr[size++] = num % 10;\\n            num /= 10; \\n        }\\n        \\n        Arrays.sort(arr);\\n        \\n        int new1 = arr[0] * 10 + arr[2];\\n        int new2 = arr[1] * 10 + arr[3];\\n        \\n        return new1 + new2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int arr[] = new int[4];\\n        int size = 0;\\n        \\n        while(num > 0) {\\n            \\n            arr[size++] = num % 10;\\n            num /= 10; \\n        }\\n        \\n        Arrays.sort(arr);\\n        \\n        int new1 = arr[0] * 10 + arr[2];\\n        int new2 = arr[1] * 10 + arr[3];\\n        \\n        return new1 + new2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2856158,
                "title": "java",
                "content": "```\\n    public int minimumSum(int num) {\\n        int[] arr = new int[4];\\n        int cur = 0;\\n\\n        while (num > 0) {\\n            arr[cur++] = num % 10;\\n            num /= 10;\\n        }\\n\\n        Arrays.sort(arr);\\n        return (arr[0] * 10 + arr[2]) + (arr[1] * 10 + arr[3]);\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    public int minimumSum(int num) {\\n        int[] arr = new int[4];\\n        int cur = 0;\\n\\n        while (num > 0) {\\n            arr[cur++] = num % 10;\\n            num /= 10;\\n        }\\n\\n        Arrays.sort(arr);\\n        return (arr[0] * 10 + arr[2]) + (arr[1] * 10 + arr[3]);\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2830605,
                "title": "easy-c-solution-godspeed",
                "content": "```\\nint minimumSum(int num){\\n    int arr[4];\\n        for(int i=0;i<4;i++){\\n            arr[i]=num%10;\\n            num=num/10;\\n        }\\n    for(int i=0;i<4;i++){\\n        for(int j=0;j<4;j++){\\n            if(arr[i]<arr[j]){\\n                int temp=arr[i];\\n                arr[i]=arr[j];\\n                arr[j]=temp;\\n            }\\n        }\\n    }\\n    int sum1 =arr[0]*10+arr[2]+arr[1]*10+arr[3];\\n    int sum2 =arr[0]*10+arr[3]+arr[1]*10+arr[2];\\n    return sum1>sum2?sum2:sum1;\\n}\\n```\\n",
                "solutionTags": [
                    "C",
                    "Combinatorics",
                    "Probability and Statistics"
                ],
                "code": "```\\nint minimumSum(int num){\\n    int arr[4];\\n        for(int i=0;i<4;i++){\\n            arr[i]=num%10;\\n            num=num/10;\\n        }\\n    for(int i=0;i<4;i++){\\n        for(int j=0;j<4;j++){\\n            if(arr[i]<arr[j]){\\n                int temp=arr[i];\\n                arr[i]=arr[j];\\n                arr[j]=temp;\\n            }\\n        }\\n    }\\n    int sum1 =arr[0]*10+arr[2]+arr[1]*10+arr[3];\\n    int sum2 =arr[0]*10+arr[3]+arr[1]*10+arr[2];\\n    return sum1>sum2?sum2:sum1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2824063,
                "title": "c-easy-solution-0-ms-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        while(num!=0){\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        int n1=v[0]*10+v[3];\\n        int n2=v[1]*10+v[2];\\n        return n1+n2;\\n    }\\n};\\n```\\nIf you like the approach,please upvote the solution.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        while(num!=0){\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n        sort(v.begin(),v.end());\\n        int n1=v[0]*10+v[3];\\n        int n2=v[1]*10+v[2];\\n        return n1+n2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2793066,
                "title": "c-0ms-easy-solution",
                "content": "Here, what we do first is to seperate all the digits in the number, and store them in an array of size 4.\\nTo do this we take the modulo of the number with 10 to get the last digit, and then divide the number by 10, and run the loop again to get the next digit.\\n\\nNow we will sort the array to arrange all the digits obtained in an non-decreasing order.\\n\\nAfter sorting the digits, we have to make 2, 2 digit numbers, as we know if we make a 3 digit number and a one digit number, it\\'s sum will always be more than that of sum of 2, 2 digit numbers.\\nSince we want the minimum possible sum, the 10s place digits of those 2 numbers must be minimum.\\nSo the first 2 elements of our sorted array are the 10s digit of our number and the reamaining 2 elements are the ones digit. Combination of 10s place digit with Ones place digit doesn\\'t matter here, as both will give exact same sum.\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];  //  Declaring an Array of size 4\\n        for(int i =0; i<4; i++) // Running a loop to fill array with digits of num\\n        {\\n            arr[i] = num%10; // Taking the last digit and inserting it in the array\\n            num /= 10;\\n        }\\n        sort(arr, arr + 4); // Sorting the array\\n\\t\\t// Returning the sum of 2 numbers.\\n        return (arr[0]*10 + arr[2] + arr[1]*10 + arr[3]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];  //  Declaring an Array of size 4\\n        for(int i =0; i<4; i++) // Running a loop to fill array with digits of num\\n        {\\n            arr[i] = num%10; // Taking the last digit and inserting it in the array\\n            num /= 10;\\n        }\\n        sort(arr, arr + 4); // Sorting the array\\n\\t\\t// Returning the sum of 2 numbers.\\n        return (arr[0]*10 + arr[2] + arr[1]*10 + arr[3]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2666929,
                "title": "simple-python-solution-99-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->Simple\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBrute Force\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while num>0:\\n            l.append(num%10)\\n            num//=10\\n        l.sort()\\n        n1=l[0]*10+l[2]\\n        n2=l[1]*10+l[3]\\n        return n1+n2    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        l=[]\\n        while num>0:\\n            l.append(num%10)\\n            num//=10\\n        l.sort()\\n        n1=l[0]*10+l[2]\\n        n2=l[1]*10+l[3]\\n        return n1+n2    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2652468,
                "title": "c-fastest-and-easiest-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int n) {\\n        vector<int>a;\\n        while(n!=0)\\n        {\\n            a.push_back(n%10);\\n            n=n/10;\\n        }\\n        sort(a.begin(),a.end());\\n        int b=a[0]*10+a[3];\\n        int c=a[1]*10+a[2];\\n        return b+c;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int n) {\\n        vector<int>a;\\n        while(n!=0)\\n        {\\n            a.push_back(n%10);\\n            n=n/10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2636473,
                "title": "100-c",
                "content": "```\\n string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        int ans = (s[0]-\\'0\\' + s[1]-\\'0\\')*10 + s[2]-\\'0\\' + s[3]-\\'0\\';\\n        \\n        return ans;\\n```",
                "solutionTags": [],
                "code": "```\\n string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        int ans = (s[0]-\\'0\\' + s[1]-\\'0\\')*10 + s[2]-\\'0\\' + s[3]-\\'0\\';\\n        \\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2605113,
                "title": "c-easy-solution-100-faster",
                "content": "So this is an easy maths problem. So what we will do is we will convert the given number to string  s and after that we will sort the string s. Now we just need to store the alternate numbers in the strings  s1 and s2. And finally we will convert strings s1 and s2 to integer and return their sum.\\nIf you dry run it, you will see it\\'s going to work for every case. Since our goal is to find the minimum sum,  we need the two smallest numbers, as their sum will only give smallest sum.\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        string s1=\"\", s2=\"\";\\n        for(int i=0; i<s.size(); i+=2){\\n            s1+=s[i];   \\n            s2+=s[i+1];\\n        }\\n        return stoi(s1)+stoi(s2);\\n    }\\n};\\n```\\n**If it helps, Plz do upvote it!!!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        string s1=\"\", s2=\"\";\\n        for(int i=0; i<s.size(); i+=2){\\n            s1+=s[i];   \\n            s2+=s[i+1];\\n        }\\n        return stoi(s1)+stoi(s2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2600842,
                "title": "java-faster-and-simple-kod",
                "content": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int[]a = new int[4];\\n        int i = 0;\\n        while(num>0){\\n            a[i++]=num%10;\\n            num/=10;\\n        }\\n        Arrays.sort(a);\\n        return (a[0]*10+a[2]+a[1]*10+a[3]);\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int[]a = new int[4];\\n        int i = 0;\\n        while(num>0){\\n            a[i++]=num%10;\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2600007,
                "title": "python-3-lines",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n\\n        _arr = list(str(num))\\n        _arr.sort()\\n        \\n        return (int(_arr[0]+_arr[3])) + (int(_arr[1]+_arr[2]))\\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n\\n        _arr = list(str(num))\\n        _arr.sort()\\n        \\n        return (int(_arr[0]+_arr[3])) + (int(_arr[1]+_arr[2]))\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571386,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] arr =new int[4];\\n        int k =0;\\n        while(k<4){\\n            int r = num%10;\\n            arr[k]=r;\\n            num/=10;\\n            k++;\\n        }\\n        Arrays.sort(arr);\\n         //int ans = ((arr[0]*10) + arr[2]) + ((arr[1]*10 )+ arr[3]);\\n\\t\\t //return ans;\\n\\t\\t //or simply\\n        return  ((arr[0]*10) + arr[2]) + ((arr[1]*10 )+ arr[3]);\\n       \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int[] arr =new int[4];\\n        int k =0;\\n        while(k<4){\\n            int r = num%10;\\n            arr[k]=r;\\n            num/=10;\\n            k++;\\n        }\\n        Arrays.sort(arr);\\n         //int ans = ((arr[0]*10) + arr[2]) + ((arr[1]*10 )+ arr[3]);\\n\\t\\t //return ans;\\n\\t\\t //or simply\\n        return  ((arr[0]*10) + arr[2]) + ((arr[1]*10 )+ arr[3]);\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2568182,
                "title": "java-100ms-soln-best-approach-beginners-friendly",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int [] arr= new int[4];\\n        int i = 0;    \\n        int temp = num;\\n        while( temp != 0){\\n            int rev = temp%10;\\n            arr[i] = rev;\\n            i++;\\n            temp = temp/10;\\n        }\\n        Arrays.sort(arr);\\n  \\n        int n1 = arr[0]*10 + arr[3];\\n        int n2 = arr[1]*10 + arr[2];\\n        return n1 + n2;\\n    }\\n}\\n\\n",
                "solutionTags": [
                    "Array",
                    "Math",
                    "Sorting"
                ],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        int [] arr= new int[4];\\n        int i = 0;    \\n        int temp = num;\\n        while( temp != 0){\\n            int rev = temp%10;\\n            arr[i] = rev;\\n            i++;\\n            temp = temp/10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2545234,
                "title": "simple-python-solution-no-permutation",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        num1 = int(num[0])+int(num[2])*10\\n        num2 = int(num[1])+int(num[3])*10\\n        return num1+num2\\n```\\n\\nOn breaking a 4 digit number we can either have \\n1. 2 double digit numbers (e.g 23 and 45)\\n2. 1 three digit number and one single digit numeber (e.g 234 and 5)\\n\\nIf we observe the sum will be lowest when we break into 2 digit numbers as it can have tens value only.\\nAlso if we make the first digit of the 2 numbers using the smallest digits from the 4 digit number we will get the smallest double digit numbers.\\n\\nFor this we use ```sorted``` which takes an iterable as input and converts it into a list. The 2 numbers then can be obtained as ```num1 = int(num[0])+int(num[2])*10``` and ```num2 = int(num[1])+int(num[3])*10```.\\n\\nSumming them gives us the answer.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num),reverse=True)\\n        num1 = int(num[0])+int(num[2])*10\\n        num2 = int(num[1])+int(num[3])*10\\n        return num1+num2\\n```\n```sorted```\n```num1 = int(num[0])+int(num[2])*10```\n```num2 = int(num[1])+int(num[3])*10```",
                "codeTag": "Java"
            },
            {
                "id": 2531494,
                "title": "1ms-java-easy-code",
                "content": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int sum = 0;\\n        int binler = num /1000;\\n        int y\\xFCzler = (num%1000) / 100;\\n        int onlar = (num%100) / 10;\\n        int birler = (num%10);\\n\\n        ArrayList<Integer> list = new ArrayList<>(  );\\n        list.add(binler);\\n        list.add(y\\xFCzler);\\n        list.add(onlar);\\n        list.add(birler);\\n        Collections.sort(list);\\n        int a1 = list.get(0) * 10 + list.get(2);\\n        int a2 = list.get(1) * 10 + list.get(3);\\n        sum = a1+a2;\\n        \\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int sum = 0;\\n        int binler = num /1000;\\n        int y\\xFCzler = (num%1000) / 100;\\n        int onlar = (num%100) / 10;\\n        int birler = (num%10);\\n\\n        ArrayList<Integer> list = new ArrayList<>(  );\\n        list.add(binler);\\n        list.add(y\\xFCzler);\\n        list.add(onlar);\\n        list.add(birler);\\n        Collections.sort(list);\\n        int a1 = list.get(0) * 10 + list.get(2);\\n        int a2 = list.get(1) * 10 + list.get(3);\\n        sum = a1+a2;\\n        \\n        return sum;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2510247,
                "title": "c-0-ms-very-easy-solution-greedy-method",
                "content": "Time Complexity : O(1) \\nSpace Complexity : O(1)\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> dig;\\n        while(num)\\n        {\\n            dig.push_back(num % 10);\\n            num /= 10;\\n        }\\n        sort(dig.begin() , dig.end());\\n        int sum = 10 * (dig[0] + dig[1]) + (dig[2] + dig[3]) ;\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int> dig;\\n        while(num)\\n        {\\n            dig.push_back(num % 10);\\n            num /= 10;\\n        }\\n        sort(dig.begin() , dig.end());\\n        int sum = 10 * (dig[0] + dig[1]) + (dig[2] + dig[3]) ;\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2506111,
                "title": "easy-to-understand-beginner-friendly-c-solution",
                "content": "Very Easy Implementation in C++\\n\\n1.  As there are only 4 digits we create an array of size 4\\n2.  We store digits in the array\\n3.  Then, we sort the array using existing sort function in the STL\\n4.  Now, the smallest number can be of index 0, 2 & 1, 3\\n5.  So, we return the sum of these two numbers (forming the two digit number by multiplying the first digit with 10 and adding the second digit).\\n\\nSee the implementation in C++ below\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];\\n        for(int i=0; i<4; i++)\\n        {\\n            arr[i] = (num%10);\\n            num /= 10;\\n        }\\n        int n = sizeof(arr) / sizeof(arr[0]);\\n        sort(arr, arr+n);\\n        \\n        return (((arr[0]*10)+arr[2]) + ((arr[1]*10)+arr[3]));\\n    }\\n};\\n```\\n\\nThis is a very basic and brute force approach you can also find some better approaches in discuss section, but this is the most easy to understand.\\n\\n\\uD83D\\uDE4F Please upvote \\uD83D\\uDE4F",
                "solutionTags": [
                    "C",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        int arr[4];\\n        for(int i=0; i<4; i++)\\n        {\\n            arr[i] = (num%10);\\n            num /= 10;\\n        }\\n        int n = sizeof(arr) / sizeof(arr[0]);\\n        sort(arr, arr+n);\\n        \\n        return (((arr[0]*10)+arr[2]) + ((arr[1]*10)+arr[3]));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2501685,
                "title": "scala-easy-solution-83-faster-than",
                "content": "\\n```\\n    def minimumSum(num: Int): Int = {\\n        val a = num.toString.split(\"\").sorted        \\n        (a(0) + a(2)).toInt + (a(1) + a(3)).toInt\\n    }\\n\\t```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\n    def minimumSum(num: Int): Int = {\\n        val a = num.toString.split(\"\").sorted        \\n        (a(0) + a(2)).toInt + (a(1) + a(3)).toInt\\n    }\\n\\t```",
                "codeTag": "Python3"
            },
            {
                "id": 2501254,
                "title": "java-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        int size = 0;\\n        int[] arr = new int[10];\\n        while (num > 0) {\\n            int r = num % 10;\\n            if (r != 0) {\\n                arr[r]++;\\n                size++;\\n            }\\n            num /= 10;\\n        }\\n        if (size == 0) {\\n            return 0;\\n        }\\n        int num1 = 0;\\n        int num2 = 0;\\n        boolean k = true;\\n        for (int i = 0; i < 10; i++) {\\n            if (arr[i] > 0) {\\n                if (k) {\\n                    num2 = num2 * 10 + i;\\n                } else {\\n                    num1 = num1 * 10 + i;\\n                }\\n                arr[i]--;\\n                i--;\\n                k = !k;\\n            }\\n        }\\n        return num1 + num2;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        int size = 0;\\n        int[] arr = new int[10];\\n        while (num > 0) {\\n            int r = num % 10;\\n            if (r != 0) {\\n                arr[r]++;\\n                size++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2491620,
                "title": "minimum-sum-of-four-digit-number-after-splitting-digits-easy-java-solution",
                "content": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int [] arr = new int [4];\\n        String s = String.valueOf(num);\\n        \\n        int i=0;\\n        for(char c : s.toCharArray()){\\n            arr[i++] = c-\\'0\\';\\n            \\n        }\\n        Arrays.sort(arr);\\n        int d1=arr[0];\\n        int d2 = arr[1];\\n        int d3 =arr[2];\\n        int d4 = arr[3];\\n        String n1 = \"\"+d1+d3, n2=\"\"+d2+d4;\\n        \\n        \\n        return Integer.parseInt(n1)+Integer.parseInt(n2);\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "class Solution {\\n    public int minimumSum(int num) {\\n        \\n        int [] arr = new int [4];\\n        String s = String.valueOf(num);\\n        \\n        int i=0;\\n        for(char c : s.toCharArray()){\\n            arr[i++] = c-\\'0\\';\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2479050,
                "title": "javascript-simple-solution-easy-to-understand",
                "content": "```\\nvar minimumSum = function(num) {\\n    let arr = [];\\n    num = num.toString();\\n    \\n    for (let i=0;i<4;i++) {\\n        arr.push(parseInt(num[i]))\\n    }\\n    \\n    arr.sort();\\n    \\n    let new1 = arr[0].toString() + arr[2].toString();  \\n    let new2 = arr[1].toString() + arr[3].toString();\\n    \\n    return parseInt(new1) + parseInt(new2);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimumSum = function(num) {\\n    let arr = [];\\n    num = num.toString();\\n    \\n    for (let i=0;i<4;i++) {\\n        arr.push(parseInt(num[i]))\\n    }\\n    \\n    arr.sort();\\n    \\n    let new1 = arr[0].toString() + arr[2].toString();  \\n    let new2 = arr[1].toString() + arr[3].toString();\\n    \\n    return parseInt(new1) + parseInt(new2);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2466850,
                "title": "c-based-digit-extraction-with-explanation-beats-100",
                "content": "```\\nint minimumSum(int num) {\\n        string str = to_string(num);\\n        vector<int> nums{};\\n        int ans{};\\n        \\n        // the chad way of extracting digits\\n\\t\\t// highly intellectual people will use this instead of virgin modulo and division \\n        for(char c: str) {\\n            int num = c - \\'0\\';\\n            cout << num;\\n            nums.push_back(num);\\n        }\\n        \\n        //minimum will always be evenly split and sorted\\n        //ie [2932]\\n        //sorted: [2239]\\n        //ans: (2 * 10) + 9 + (2 * 10) + 3\\n        //     [29] + [23]\\n        //nums[0]*10 + nums[3] + nums[1]*10 + nums[2];\\n        sort(nums.begin(), nums.end());\\n        \\n        int firstNum{}, secondNum{};\\n        \\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i % 2 == 0) firstNum = firstNum * 10 + nums[i];\\n            else secondNum = secondNum * 10 + nums[i];\\n        }\\n        \\n        return firstNum + secondNum;\\n        \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minimumSum(int num) {\\n        string str = to_string(num);\\n        vector<int> nums{};\\n        int ans{};\\n        \\n        // the chad way of extracting digits\\n\\t\\t// highly intellectual people will use this instead of virgin modulo and division \\n        for(char c: str) {\\n            int num = c - \\'0\\';\\n            cout << num;\\n            nums.push_back(num);\\n        }\\n        \\n        //minimum will always be evenly split and sorted\\n        //ie [2932]\\n        //sorted: [2239]\\n        //ans: (2 * 10) + 9 + (2 * 10) + 3\\n        //     [29] + [23]\\n        //nums[0]*10 + nums[3] + nums[1]*10 + nums[2];\\n        sort(nums.begin(), nums.end());\\n        \\n        int firstNum{}, secondNum{};\\n        \\n        for(int i = 0; i < nums.size(); i++) {\\n            if(i % 2 == 0) firstNum = firstNum * 10 + nums[i];\\n            else secondNum = secondNum * 10 + nums[i];\\n        }\\n        \\n        return firstNum + secondNum;\\n        \\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2465657,
                "title": "cpp-c-100-faster-0ms-straightforward-7-liner-fastest",
                "content": "* stored num as string using to_string function in string s.\\n* sorted the string and created two int variable (initialize both with zero) to store minimum possible choices.\\n* now iterating through sorted string s such that storing alterate position string number (by converting char to respective int using ascii chart) in num1 and num2.\\n* just return sum of num1 and num2.\\n```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n      sort(s.begin(),s.end());\\n      int num1=0,num2=0;\\n      for(int i=0;i<s.length();i++)\\n      {\\n        if(i%2==0)\\n        num1=num1*10+(s[i]-\\'0\\');\\n        else\\n        num2=num2*10+(s[i]-\\'0\\');\\n      }\\n      return num1+num2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        string s=to_string(num);\\n      sort(s.begin(),s.end());\\n      int num1=0,num2=0;\\n      for(int i=0;i<s.length();i++)\\n      {\\n        if(i%2==0)\\n        num1=num1*10+(s[i]-\\'0\\');\\n        else\\n        num2=num2*10+(s[i]-\\'0\\');\\n      }\\n      return num1+num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2454111,
                "title": "python-sort",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        res = sorted(str(num))\\n        res = \\'\\'.join(res)\\n        a = res[0] + res[2]\\n        b = res[1] + res[3]\\n        \\n        return int(a) + int(b)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        res = sorted(str(num))\\n        res = \\'\\'.join(res)\\n        a = res[0] + res[2]\\n        b = res[1] + res[3]\\n        \\n        return int(a) + int(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2446813,
                "title": "c-0ms-fatser-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int x) {\\n        \\n        int a[4];\\n        \\n        a[3]=x%10;\\n        x=x/10;\\n        a[2]=x%10;\\n        x=x/10;\\n        a[1]=x%10;\\n        x=x/10;\\n        a[0]= x%10;\\n        \\n        sort( a,a+4);\\n        \\n        return ( a[0]*10+a[3] +a[1]*10+a[2]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int x) {\\n        \\n        int a[4];\\n        \\n        a[3]=x%10;\\n        x=x/10;\\n        a[2]=x%10;\\n        x=x/10;\\n        a[1]=x%10;\\n        x=x/10;\\n        a[0]= x%10;\\n        \\n        sort( a,a+4);\\n        \\n        return ( a[0]*10+a[3] +a[1]*10+a[2]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2427513,
                "title": "c-beats-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>s;\\n        int num1=0,num2=0;\\n        while(num>0){\\n            s.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(i%2==0)\\n                num1=num1*10+s[i];\\n            else\\n                num2=num2*10+s[i];\\n        }\\n        return num1+num2;\\n    }\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/250d86f4-1ea3-4745-ae54-ac1aff463454_1660544593.6954436.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>s;\\n        int num1=0,num2=0;\\n        while(num>0){\\n            s.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(s.begin(),s.end());\\n        for(int i=0;i<s.size();i++){\\n            if(i%2==0)\\n                num1=num1*10+s[i];\\n            else\\n                num2=num2*10+s[i];\\n        }\\n        return num1+num2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2411733,
                "title": "dart-for-n-4-solution",
                "content": "```\\nclass Solution {\\n  int minimumSum(int num) {\\n    String n = num.toString();\\n    List<String> s = n.replaceAll(\\'0\\', \\'\\').split(\\'\\');\\n    s.sort((a, b) => a.compareTo(b));\\n    int len = s.length;\\n\\n    int a = 0;\\n    int b = 0;\\n\\n    for (int i = 0; i < len; i++) {\\n      if (i % 2 == 0)\\n        a = a * 10 + (int.tryParse(s[i]) ?? 0);\\n      else\\n        b = b * 10 + (int.tryParse(s[i]) ?? 0);\\n    }\\n\\n    return a + b;\\n  }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n  int minimumSum(int num) {\\n    String n = num.toString();\\n    List<String> s = n.replaceAll(\\'0\\', \\'\\').split(\\'\\');\\n    s.sort((a, b) => a.compareTo(b));\\n    int len = s.length;\\n\\n    int a = 0;\\n    int b = 0;\\n\\n    for (int i = 0; i < len; i++) {\\n      if (i % 2 == 0)\\n        a = a * 10 + (int.tryParse(s[i]) ?? 0);\\n      else\\n        b = b * 10 + (int.tryParse(s[i]) ?? 0);\\n    }\\n\\n    return a + b;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2394100,
                "title": "simple-c-code",
                "content": "\"\\'class Solution {\\npublic:\\n    int minimumSum(int num)\\n    {\\n        vector<int>ans;\\n        while(num!=0)\\n        {\\n            int temp=num%10;\\n            ans.push_back(temp);\\n            num=num/10;\\n        \\n        }\\n        sort(ans.begin(),ans.end());\\n        int num1=ans[0]*10+ans[3];\\n        int num2=ans[1]*10+ans[2];\\n        return (num1+num2);\\n    }\\n};\\n\"\"",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int num)\\n    {\\n        vector<int>ans;\\n        while(num!=0)\\n        {\\n            int temp=num%10;\\n            ans.push_back(temp);\\n            num=num/10;\\n        \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2391441,
                "title": "python-easy-faster-than-98",
                "content": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num))\\n        return int(num[0] + num[2]) + int(num[1]+num[3])\\n```",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        num = sorted(str(num))\\n        return int(num[0] + num[2]) + int(num[1]+num[3])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2386768,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        int a=num%10;num/=10;v.push_back(a);\\n        int b=num%10;num/=10;v.push_back(b);\\n        int c=num%10;num/=10;v.push_back(c);\\n        int d=num%10;num/=10;v.push_back(d);\\n        sort(v.begin(),v.end());\\n        int fst=v[0]*10+v[2];\\n        int sec=v[1]*10+v[3];\\n        return fst+sec;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n        vector<int>v;\\n        int a=num%10;num/=10;v.push_back(a);\\n        int b=num%10;num/=10;v.push_back(b);\\n        int c=num%10;num/=10;v.push_back(c);\\n        int d=num%10;num/=10;v.push_back(d);\\n        sort(v.begin(),v.end());\\n        int fst=v[0]*10+v[2];\\n        int sec=v[1]*10+v[3];\\n        return fst+sec;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2384200,
                "title": "python-98-67-faster-simplest-solution-with-explanation-beg-to-adv",
                "content": "```python\\n\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n\\n        a = sorted(str(num)) # here we are sorting the provided number and will have a list containin all the elements\\n        return int(a[0] + a[2]) + int(a[1] + a[3]) # As we are sure that we`ll be having 4 digits thats why we are doing it in this way. Taking even & odd together as just after sorting and adding the pair is not providing right answer. \\n        \\n```\\n\\n***Found helpful, Do upvote!!***",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\n\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n\\n        a = sorted(str(num)) # here we are sorting the provided number and will have a list containin all the elements\\n        return int(a[0] + a[2]) + int(a[1] + a[3]) # As we are sure that we`ll be having 4 digits thats why we are doing it in this way. Taking even & odd together as just after sorting and adding the pair is not providing right answer. \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2373947,
                "title": "python-sort-method",
                "content": "# Python code -\\n```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        x=[]\\n        for i in str(num):\\n            x.append(i)\\n        x.sort()\\n        return (int(x[0])*10 + int(x[1])*10 + int(x[2]) + int(x[3]))\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minimumSum(self, num: int) -> int:\\n        x=[]\\n        for i in str(num):\\n            x.append(i)\\n        x.sort()\\n        return (int(x[0])*10 + int(x[1])*10 + int(x[2]) + int(x[3]))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2372725,
                "title": "faster-than-100-00-memory-efficient-direct-approach",
                "content": "![image](https://assets.leetcode.com/users/images/b4e86b8b-4afe-4125-8639-fd841b1c0606_1659508529.292325.png)\\n\\n```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int[] digits = new int[4];\\n        int k =0;\\n        while(num>0)\\n        {\\n            digits[k++] = num%10;\\n            num/=10;\\n        }\\n        \\n        Arrays.sort(digits);\\n        \\n        return (digits[0]*10+digits[3])+(digits[1]*10+digits[2]);\\n        \\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumSum(int num) {\\n        \\n        int[] digits = new int[4];\\n        int k =0;\\n        while(num>0)\\n        {\\n            digits[k++] = num%10;\\n            num/=10;\\n        }\\n        \\n        Arrays.sort(digits);\\n        \\n        return (digits[0]*10+digits[3])+(digits[1]*10+digits[2]);\\n        \\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1742054,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1827377,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1785019,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1725800,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1576945,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2065436,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2057616,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2056682,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1953873,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1951017,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1742054,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1827377,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1785019,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1725800,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1576945,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2065436,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2057616,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 2056682,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1953873,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            },
            {
                "id": 1951017,
                "content": [
                    {
                        "username": "pmartel48",
                        "content": "Stop posting solutions in here you are ruining my experience"
                    },
                    {
                        "username": "user2285TI",
                        "content": "Here have my upvote so that you can downvote those comments"
                    },
                    {
                        "username": "garabed99",
                        "content": "[@dhruv0911](/dhruv0911) next to discussion there\\'s Solutions, there"
                    },
                    {
                        "username": "dhruv0911",
                        "content": "Bro do you know where to share my own unique solution if I have one??"
                    },
                    {
                        "username": "faisalkhan4k",
                        "content": "genuinely one of the easiest question"
                    },
                    {
                        "username": "__kpsingh__",
                        "content": "This was fun. After seeing the constraints I was going to brute force the solution but then I read the examples carefully."
                    },
                    {
                        "username": "Suvm",
                        "content": "class Solution {\\npublic:\\n    int minimumSum(int num) {\\n            int digit=0;\\n          int  arr[4];\\n    \\n   for(int i=0;i<4;i++){\\n        digit = num%10;\\n       arr[i]=digit;\\n       num=num/10;\\n        \\n    }\\n    sort(arr,arr+4);\\n    int new1 = (arr[0]*10) + arr[3];\\n    int new2 = (arr[1]*10) + arr[2];\\n    \\n    return new1 + new2;\\n    \\n}\\n        \\n    \\n};"
                    },
                    {
                        "username": "Chinmay_888",
                        "content": "Bro Please Don\\'t post Ans in the discussion secttion"
                    },
                    {
                        "username": "yusuf-kaleem",
                        "content": "/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar minimumSum = function(num) {\\n   // get the first 2 minimum digits\\n   let m1,m2,m3,m4\\n   \\n   m1 = num.toString().split(\"\").sort()[0]\\n   m2 = num.toString().split(\"\").sort()[1]\\n   m3 = num.toString().split(\"\").sort()[2]\\n   m4 = num.toString().split(\"\").sort()[3]\\n    \\n   return parseInt(m1+m3) + parseInt(m2+m4) \\n \\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/2172566/c-0ms-100-optimized-faster-easy-solution/"
                    },
                    {
                        "username": "debdeepsanyal",
                        "content": "if you want to make this more challenging, try solving it without sorting the numbers, it\\'ll be a tough bite. However, the sorting answer is completely acceptable. If you are curious to have an insight about the non sorted [pure greedy solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/4067196/no-sorting-fastest-solution/), you\\'re always welcome :)"
                    },
                    {
                        "username": "myjscoffee",
                        "content": "i was able to code it with math logic but how is this greedy ?"
                    },
                    {
                        "username": "Limon020",
                        "content": "This problem could be broken down into finding every combination of numbers. At each stage of combining, we would be looking at a subproblem of how to optimally combine the remaining numbers. Or, we can make the greedy choice that we put the smallest two numbers at the front of our new numbers. The greedy choice always leads to the optimal solution, so its a greedy problem because we are making a local choice instead of trying everything."
                    },
                    {
                        "username": "user2829wz",
                        "content": "Andi Mandi Sandy, Jo discussion meh answer post kiya uski ma *****"
                    },
                    {
                        "username": "swapnil019",
                        "content": "class Solution {\\nint myAtoi(string str)\\n{\\n  \\n    int res = 0;\\n\\n    for (int i = 0; str[i] != \\'\\\\0\\'; ++i)\\n        res = res * 10 + str[i] - \\'0\\';\\n \\n    return res;\\n}\\npublic:\\n    int minimumSum(int num) {\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        string a = \"\", b = \"\";\\n        a.push_back(s[0]);\\n        a.push_back(s[2]);\\n        b.push_back(s[1]);\\n        b.push_back(s[3]);\\n\\n        int x = myAtoi(a);\\n        int y = myAtoi(b);\\n\\n        return x+y;\\n\\n    }\\n}; \\n`your inline code...your inline code...`"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great.\\nWhat exactly do you want to discuss here in discussions section?"
                    },
                    {
                        "username": "simply_arko",
                        "content": "**Check out the O(n)** [solution](https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/solutions/3702279/o-n-solution-0ms-beats-100/)"
                    }
                ]
            }
        ]
    }
]