[
    {
        "title": "Add Bold Tag in String",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1575945,
                "content": [
                    {
                        "username": "identical123",
                        "content": "just wondering . seems impossible to come up with a solution on the spot"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Such thing become into my mind when I read the description first time. Then you need to split the solution into steps/phase and it becomes clear.\\n\\n1. find positions of tags in string\\n2. merge all overlap positions\\n3. build the result according to positions from step #2"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Should be this task marked as 'Hard'? \nFrom my point of view it's combination of several 'Medium' level problems, but it's a lot of code to write for the full task. "
                    },
                    {
                        "username": "as9vd2",
                        "content": "Very involved and a lot of test cases for a medium. Not too bad though I don\\'t think."
                    }
                ]
            },
            {
                "id": 1751044,
                "content": [
                    {
                        "username": "identical123",
                        "content": "just wondering . seems impossible to come up with a solution on the spot"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Such thing become into my mind when I read the description first time. Then you need to split the solution into steps/phase and it becomes clear.\\n\\n1. find positions of tags in string\\n2. merge all overlap positions\\n3. build the result according to positions from step #2"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Should be this task marked as 'Hard'? \nFrom my point of view it's combination of several 'Medium' level problems, but it's a lot of code to write for the full task. "
                    },
                    {
                        "username": "as9vd2",
                        "content": "Very involved and a lot of test cases for a medium. Not too bad though I don\\'t think."
                    }
                ]
            },
            {
                "id": 1970113,
                "content": [
                    {
                        "username": "identical123",
                        "content": "just wondering . seems impossible to come up with a solution on the spot"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Such thing become into my mind when I read the description first time. Then you need to split the solution into steps/phase and it becomes clear.\\n\\n1. find positions of tags in string\\n2. merge all overlap positions\\n3. build the result according to positions from step #2"
                    },
                    {
                        "username": "Vladislav-Sidorovich",
                        "content": "Should be this task marked as 'Hard'? \nFrom my point of view it's combination of several 'Medium' level problems, but it's a lot of code to write for the full task. "
                    },
                    {
                        "username": "as9vd2",
                        "content": "Very involved and a lot of test cases for a medium. Not too bad though I don\\'t think."
                    }
                ]
            }
        ]
    },
    {
        "title": "Merge Two Binary Trees",
        "question_content": "<p>You are given two binary trees <code>root1</code> and <code>root2</code>.</p>\n\n<p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p>\n\n<p>Return <em>the merged tree</em>.</p>\n\n<p><strong>Note:</strong> The merging process must start from the root nodes of both trees.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/05/merge.jpg\" style=\"width: 600px; height: 163px;\" />\n<pre>\n<strong>Input:</strong> root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n<strong>Output:</strong> [3,4,5,5,4,null,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root1 = [1], root2 = [1,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both trees is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-10<sup>4</sup> &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 104302,
                "title": "python-straightforward-with-explanation",
                "content": "Let's create a recursive solution.\\n* If both trees are empty then we return empty.\\n* Otherwise, we will return a tree.  The root value will be t1.val + t2.val, except these values are 0 if the tree is empty.\\n* The left child will be the merge of t1.left and t2.left, except these trees are empty if the parent is empty.\\n* The right child is similar.\\n\\n```\\ndef mergeTrees(self, t1, t2):\\n    if not t1 and not t2: return None\\n    ans = TreeNode((t1.val if t1 else 0) + (t2.val if t2 else 0))\\n    ans.left = self.mergeTrees(t1 and t1.left, t2 and t2.left)\\n    ans.right = self.mergeTrees(t1 and t1.right, t2 and t2.right)\\n    return ans\\n```",
                "solutionTags": [],
                "code": "```\\ndef mergeTrees(self, t1, t2):\\n    if not t1 and not t2: return None\\n    ans = TreeNode((t1.val if t1 else 0) + (t2.val if t2 else 0))\\n    ans.left = self.mergeTrees(t1 and t1.left, t2 and t2.left)\\n    ans.right = self.mergeTrees(t1 and t1.right, t2 and t2.right)\\n    return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 588123,
                "title": "100-00-fast-in-run-time-and-memory-recursive-iterative-bfs-dfs",
                "content": "**Using Recursion (DFS Similar) 1:** \\n**Time complexity** : **O(m)**. A total of m nodes need to be traversed. Here, m represents the minimum number of nodes from the two given trees.\\n**Space complexity** : **O(m)**. The depth of the recursion tree can go upto m in the case of a skewed tree. In **average case**, depth will be ****O(logm).\\n```\\nstatic int x = []() {\\nstd::ios::sync_with_stdio(false);\\ncin.tie(nullptr);\\nreturn 0; }();\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1) return t2;\\n        if(!t2) return t1;\\n        t1->val+=t2->val;\\n        if(t2->left) t1->left = mergeTrees(t1->left,t2->left);\\n        if(t2->right) t1->right = mergeTrees(t1->right,t2->right);\\n        return t1;\\n    }\\n};\\n```\\n\\n**Using Recursion (DFS Similar) 2:** \\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1) return t2;\\n        if(!t2) return t1;\\n        t1->val+=t2->val;\\n        t1->left = mergeTrees(t1->left,t2->left);\\n        t1->right = mergeTrees(t1->right,t2->right);\\n        return t1;\\n    }\\n};\\n```\\n\\n**Create New Tree 1:**\\n\\n```\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2,TreeNode* &root){\\n        if(!t1 && !t2) return;\\n        else if(t1 && !t2){\\n            TreeNode* node(new TreeNode(t1->val));\\n            root=node;\\n            dfs(t1->left,t2,root->left);\\n            dfs(t1->right,t2,root->right);\\n        }else if(t2 && !t1){\\n            TreeNode* node(new TreeNode(t2->val));\\n            root=node;\\n            dfs(t1,t2->left,root->left);\\n            dfs(t1,t2->right,root->right);\\n        }else{\\n            TreeNode* node(new TreeNode(t1->val+t2->val));\\n            root=node;\\n            dfs(t1->left,t2->left,root->left);\\n            dfs(t1->right,t2->right,root->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        TreeNode* root(nullptr);\\n        dfs(t1,t2,root);\\n        return root;\\n    }\\n};\\n```\\n\\n**Create New Tree 2:**\\nIn the real world, sharing nodes between the old trees and the new tree can be a problem. If any of the old trees is deleted, it\\'s going to also destruct the shared nodes in the new tree. C++ does have some nice & clean solutions for this, like using shared_ptr for example. But as-is I\\'d say the \\'trick\\' of reusing nodes from the old trees does more harm than good and if I were the interviewer, unless the interviewee points these nuances out I\\'d be lead to believe that they don\\'t have a good grasp on memory management in C++. Especially since the \\'safe\\' solution is not that much more code:\\n\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        int val1 = t1? t1->val:0;\\n        int val2 = t2? t2->val:0;\\n        \\n        TreeNode* t = new TreeNode(val1+val2);\\n        t->left = mergeTrees(t1?t1->left:nullptr,t2?t2->left:nullptr);\\n        t->right = mergeTrees(t1?t1->right:nullptr,t2?t2->right:nullptr);\\n        return t;\\n    }\\n};\\n```\\n\\n------\\n**Iterative: Using Stack**\\n**Time complexity** : **O(n)**. We traverse over a total of n nodes. Here, nn refers to the smaller of the number of nodes in the two trees.\\n\\n**Space complexity** : **O(n)**. The depth of stack can grow upto n in case of a skewed tree.\\n```\\nclass Solution { // iterative: Stack\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1 || !t2) return t1? t1:t2;\\n\\t\\t\\t\\t\\n        stack<TreeNode*> s1,s2;\\n        s1.push(t1);\\n        s2.push(t2);\\n        \\n        while(!s1.empty()){\\n            TreeNode* c1(s1.top());\\n            TreeNode* c2(s2.top());\\n            s1.pop();\\n            s2.pop();\\n            \\n            c1->val+=c2->val;\\n            \\n            if(!c1->left && c2->left) c1->left = c2->left;\\n            else if(c1->left && c2->left) { s1.push(c1->left); s2.push(c2->left); }\\n            \\n            if(!c1->right && c2->right) c1->right = c2->right;\\n            else if(c1->right && c2->right) { s1.push(c1->right); s2.push(c2->right); }\\n        }\\n        return t1;\\n    }\\n};\\n```\\n\\n----\\n**Iterative: Using Queue**\\n\\n```\\nclass Solution { // iterative: Queue    \\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1 || !t2) return t1? t1:t2;\\n\\n        queue<TreeNode*> q1,q2;\\n        q1.push(t1);\\n        q2.push(t2);\\n        \\n        while(!q1.empty() && !q2.empty()){\\n            TreeNode* c1(q1.front());\\n            TreeNode* c2(q2.front());\\n            q1.pop();\\n            q2.pop();\\n            \\n            c1->val+=c2->val;\\n            \\n            if(!c1->left && c2->left) c1->left = c2->left;\\n            else if(c1->left && c2->left) { q1.push(c1->left); q2.push(c2->left); }\\n            \\n            if(!c1->right && c2->right) c1->right = c2->right;\\n            else if(c1->right && c2->right) { q1.push(c1->right); q2.push(c2->right); }\\n        }\\n        return t1;\\n    }\\n};\\n```\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "```\\nstatic int x = []() {\\nstd::ios::sync_with_stdio(false);\\ncin.tie(nullptr);\\nreturn 0; }();\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1) return t2;\\n        if(!t2) return t1;\\n        t1->val+=t2->val;\\n        if(t2->left) t1->left = mergeTrees(t1->left,t2->left);\\n        if(t2->right) t1->right = mergeTrees(t1->right,t2->right);\\n        return t1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1) return t2;\\n        if(!t2) return t1;\\n        t1->val+=t2->val;\\n        t1->left = mergeTrees(t1->left,t2->left);\\n        t1->right = mergeTrees(t1->right,t2->right);\\n        return t1;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2,TreeNode* &root){\\n        if(!t1 && !t2) return;\\n        else if(t1 && !t2){\\n            TreeNode* node(new TreeNode(t1->val));\\n            root=node;\\n            dfs(t1->left,t2,root->left);\\n            dfs(t1->right,t2,root->right);\\n        }else if(t2 && !t1){\\n            TreeNode* node(new TreeNode(t2->val));\\n            root=node;\\n            dfs(t1,t2->left,root->left);\\n            dfs(t1,t2->right,root->right);\\n        }else{\\n            TreeNode* node(new TreeNode(t1->val+t2->val));\\n            root=node;\\n            dfs(t1->left,t2->left,root->left);\\n            dfs(t1->right,t2->right,root->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        TreeNode* root(nullptr);\\n        dfs(t1,t2,root);\\n        return root;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        int val1 = t1? t1->val:0;\\n        int val2 = t2? t2->val:0;\\n        \\n        TreeNode* t = new TreeNode(val1+val2);\\n        t->left = mergeTrees(t1?t1->left:nullptr,t2?t2->left:nullptr);\\n        t->right = mergeTrees(t1?t1->right:nullptr,t2?t2->right:nullptr);\\n        return t;\\n    }\\n};\\n```\n```\\nclass Solution { // iterative: Stack\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1 || !t2) return t1? t1:t2;\\n\\t\\t\\t\\t\\n        stack<TreeNode*> s1,s2;\\n        s1.push(t1);\\n        s2.push(t2);\\n        \\n        while(!s1.empty()){\\n            TreeNode* c1(s1.top());\\n            TreeNode* c2(s2.top());\\n            s1.pop();\\n            s2.pop();\\n            \\n            c1->val+=c2->val;\\n            \\n            if(!c1->left && c2->left) c1->left = c2->left;\\n            else if(c1->left && c2->left) { s1.push(c1->left); s2.push(c2->left); }\\n            \\n            if(!c1->right && c2->right) c1->right = c2->right;\\n            else if(c1->right && c2->right) { s1.push(c1->right); s2.push(c2->right); }\\n        }\\n        return t1;\\n    }\\n};\\n```\n```\\nclass Solution { // iterative: Queue    \\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(!t1 && !t2) return nullptr;\\n        if(!t1 || !t2) return t1? t1:t2;\\n\\n        queue<TreeNode*> q1,q2;\\n        q1.push(t1);\\n        q2.push(t2);\\n        \\n        while(!q1.empty() && !q2.empty()){\\n            TreeNode* c1(q1.front());\\n            TreeNode* c2(q2.front());\\n            q1.pop();\\n            q2.pop();\\n            \\n            c1->val+=c2->val;\\n            \\n            if(!c1->left && c2->left) c1->left = c2->left;\\n            else if(c1->left && c2->left) { q1.push(c1->left); q2.push(c2->left); }\\n            \\n            if(!c1->right && c2->right) c1->right = c2->right;\\n            else if(c1->right && c2->right) { q1.push(c1->right); q2.push(c2->right); }\\n        }\\n        return t1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104301,
                "title": "short-recursive-solution-w-python-c",
                "content": "as the problem description says: Otherwise, the NOT null node will be used as the node of new tree. so here comes this solution.\\n\\npython solution\\n```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        if t1 and t2:\\n            root = TreeNode(t1.val + t2.val)\\n            root.left = self.mergeTrees(t1.left, t2.left)\\n            root.right = self.mergeTrees(t1.right, t2.right)\\n            return root\\n        else:\\n            return t1 or t2\\n```\\nc++ solution\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "C",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        if t1 and t2:\\n            root = TreeNode(t1.val + t2.val)\\n            root.left = self.mergeTrees(t1.left, t2.left)\\n            root.right = self.mergeTrees(t1.right, t2.right)\\n            return root\\n        else:\\n            return t1 or t2\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104308,
                "title": "java-c-clean-code-unique-node-shared-node-5-liner",
                "content": "**Java - Shared Node**\\n```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n\\n        TreeNode node = new TreeNode(t1.val + t2.val);\\n        node.left = mergeTrees(t1.left, t2.left);\\n        node.right = mergeTrees(t1.right, t2.right);\\n        return node;\\n    }\\n}\\n```\\n**Create new Nodes**\\nI like to create new nodes for newly formed tree in this type of problem, as you are literally creating nested graph otherwise.\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 && !t2) return nullptr;\\n\\n        TreeNode* node = new TreeNode((t1 ? t1->val : 0) + (t2 ? t2->val : 0));\\n        node->left = mergeTrees((t1 ? t1->left : nullptr), (t2 ? t2->left : nullptr));\\n        node->right = mergeTrees((t1 ? t1->right : nullptr), (t2 ? t2->right : nullptr));\\n        return node;\\n    }\\n};\\n```\\n\\n**Share Nodes with the nonnull TreeNode**\\nAs @zqfan point out, this problem explicitly tell you to use the NOT null node, there is no need to create new nodes. And the code would also be simpler.\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 || !t2) return t1 ? t1 : t2;\\n\\n        TreeNode* node = new TreeNode(t1->val + t2->val);\\n        node->left = mergeTrees(t1->left, t2->left);\\n        node->right = mergeTrees(t1->right, t2->right);\\n        return node;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n\\n        TreeNode node = new TreeNode(t1.val + t2.val);\\n        node.left = mergeTrees(t1.left, t2.left);\\n        node.right = mergeTrees(t1.right, t2.right);\\n        return node;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 && !t2) return nullptr;\\n\\n        TreeNode* node = new TreeNode((t1 ? t1->val : 0) + (t2 ? t2->val : 0));\\n        node->left = mergeTrees((t1 ? t1->left : nullptr), (t2 ? t2->left : nullptr));\\n        node->right = mergeTrees((t1 ? t1->right : nullptr), (t2 ? t2->right : nullptr));\\n        return node;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 || !t2) return t1 ? t1 : t2;\\n\\n        TreeNode* node = new TreeNode(t1->val + t2->val);\\n        node->left = mergeTrees(t1->left, t2->left);\\n        node->right = mergeTrees(t1->right, t2->right);\\n        return node;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104429,
                "title": "python-bfs-solution",
                "content": "```python\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not (t1 and t2):\\n            return t1 or t2\\n        queue1, queue2 = collections.deque([t1]), collections.deque([t2])\\n        while queue1 and queue2:\\n            node1, node2 = queue1.popleft(), queue2.popleft()\\n            if node1 and node2:\\n                node1.val = node1.val + node2.val\\n                if (not node1.left) and node2.left:\\n                    node1.left = TreeNode(0)\\n                if (not node1.right) and node2.right:\\n                    node1.right = TreeNode(0)\\n                queue1.append(node1.left)\\n                queue1.append(node1.right)\\n                queue2.append(node2.left)\\n                queue2.append(node2.right)\\n        return t1\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not (t1 and t2):\\n            return t1 or t2\\n        queue1, queue2 = collections.deque([t1]), collections.deque([t2])\\n        while queue1 and queue2:\\n            node1, node2 = queue1.popleft(), queue2.popleft()\\n            if node1 and node2:\\n                node1.val = node1.val + node2.val\\n                if (not node1.left) and node2.left:\\n                    node1.left = TreeNode(0)\\n                if (not node1.right) and node2.right:\\n                    node1.right = TreeNode(0)\\n                queue1.append(node1.left)\\n                queue1.append(node1.right)\\n                queue2.append(node2.left)\\n                queue2.append(node2.right)\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104331,
                "title": "java-one-recursive-solution-and-two-iterative-solutions-dfs-and-bfs-with-explanations",
                "content": "Solution 1: Recursive Solution\\n```\\n// Method 1: Recursive Solution\\n// Time: O(n)\\n// Space: O(height)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n\\n  if (t2 != null) {\\n    t1.val += t2.val;\\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n  }\\n\\n  return t1;\\n}\\n```\\n\\nSolution 2: Iterative DFS\\n```\\n// Method 2: Iterative DFS\\n// Time: O(n)\\n// Space: O(height)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n  // Use stack to help DFS\\n  Deque<TreeNode[]> stack = new LinkedList<>();\\n  stack.offerLast(new TreeNode[] {t1, t2});\\n  while (!stack.isEmpty()) {\\n    TreeNode[] cur = stack.pollLast();\\n    // no need to merge t2 into t1\\n    if (cur[1] == null) {\\n      continue;\\n    }\\n    // merge t1 and t2\\n    cur[0].val += cur[1].val;\\n    // if node in t1 == null, use node in t2 instead\\n    // else put both nodes in stack to merge\\n    if (cur[0].left == null) {\\n      cur[0].left = cur[1].left;\\n    } else {\\n      stack.offerLast(new TreeNode[] {cur[0].left, cur[1].left});\\n    }\\n    if (cur[0].right == null) {\\n      cur[0].right = cur[1].right;\\n    } else {\\n      stack.offerLast(new TreeNode[] {cur[0].right, cur[1].right});\\n    }\\n  }\\n  return t1;\\n}\\n```\\n\\nSolution 3: Iterative BFS\\n```\\n// Method 3: Iterative BFS\\n// Time: O(n)\\n// Space: O(n)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n  // Use stack to help DFS\\n  Queue<TreeNode[]> queue = new LinkedList<>();\\n  queue.offer(new TreeNode[] {t1, t2});\\n  while (!queue.isEmpty()) {\\n    TreeNode[] cur = queue.poll();\\n    // no need to merge t2 into t1\\n    if (cur[1] == null) {\\n      continue;\\n    }\\n    // merge t1 and t2\\n    cur[0].val += cur[1].val;\\n    // if node in t1 == null, use node in t2 instead\\n    // else put both nodes in stack to merge\\n    if (cur[0].left == null) {\\n      cur[0].left = cur[1].left;\\n    } else {\\n      queue.offer(new TreeNode[] {cur[0].left, cur[1].left});\\n    }\\n    if (cur[0].right == null) {\\n      cur[0].right = cur[1].right;\\n    } else {\\n      queue.offer(new TreeNode[] {cur[0].right, cur[1].right});\\n    }\\n  }\\n  return t1;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n// Method 1: Recursive Solution\\n// Time: O(n)\\n// Space: O(height)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n\\n  if (t2 != null) {\\n    t1.val += t2.val;\\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n  }\\n\\n  return t1;\\n}\\n```\n```\\n// Method 2: Iterative DFS\\n// Time: O(n)\\n// Space: O(height)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n  // Use stack to help DFS\\n  Deque<TreeNode[]> stack = new LinkedList<>();\\n  stack.offerLast(new TreeNode[] {t1, t2});\\n  while (!stack.isEmpty()) {\\n    TreeNode[] cur = stack.pollLast();\\n    // no need to merge t2 into t1\\n    if (cur[1] == null) {\\n      continue;\\n    }\\n    // merge t1 and t2\\n    cur[0].val += cur[1].val;\\n    // if node in t1 == null, use node in t2 instead\\n    // else put both nodes in stack to merge\\n    if (cur[0].left == null) {\\n      cur[0].left = cur[1].left;\\n    } else {\\n      stack.offerLast(new TreeNode[] {cur[0].left, cur[1].left});\\n    }\\n    if (cur[0].right == null) {\\n      cur[0].right = cur[1].right;\\n    } else {\\n      stack.offerLast(new TreeNode[] {cur[0].right, cur[1].right});\\n    }\\n  }\\n  return t1;\\n}\\n```\n```\\n// Method 3: Iterative BFS\\n// Time: O(n)\\n// Space: O(n)\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n  if (t1 == null) {\\n    return t2;\\n  }\\n  // Use stack to help DFS\\n  Queue<TreeNode[]> queue = new LinkedList<>();\\n  queue.offer(new TreeNode[] {t1, t2});\\n  while (!queue.isEmpty()) {\\n    TreeNode[] cur = queue.poll();\\n    // no need to merge t2 into t1\\n    if (cur[1] == null) {\\n      continue;\\n    }\\n    // merge t1 and t2\\n    cur[0].val += cur[1].val;\\n    // if node in t1 == null, use node in t2 instead\\n    // else put both nodes in stack to merge\\n    if (cur[0].left == null) {\\n      cur[0].left = cur[1].left;\\n    } else {\\n      queue.offer(new TreeNode[] {cur[0].left, cur[1].left});\\n    }\\n    if (cur[0].right == null) {\\n      cur[0].right = cur[1].right;\\n    } else {\\n      queue.offer(new TreeNode[] {cur[0].right, cur[1].right});\\n    }\\n  }\\n  return t1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 386403,
                "title": "c-simple-solution-beats-100-on-memory-with-explanation",
                "content": "```\\nTreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n\\n    if (t1 && t2) { // If both nodes exist, add their values then look at the next node. \\n        t1->val+=t2->val;\\n        t1->left = mergeTrees(t1->left,t2->left);  \\n        t1->right = mergeTrees(t1->right, t2->right);\\n    } else { // If one node doesn\\'t exist, link it back to the calling node.\\n\\t    return t1 ? t1 : t2;  \\n\\t}\\n    \\n    return t1; // Return the first tree, which is now altered. No need to create a new node, which bloats memory.\\n}",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nTreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n\\n    if (t1 && t2) { // If both nodes exist, add their values then look at the next node. \\n        t1->val+=t2->val;\\n        t1->left = mergeTrees(t1->left,t2->left);  \\n        t1->right = mergeTrees(t1->right, t2->right);\\n    } else { // If one node doesn\\'t exist, link it back to the calling node.\\n\\t    return t1 ? t1 : t2;  \\n\\t}\\n    \\n    return t1; // Return the first tree, which is now altered. No need to create a new node, which bloats memory.\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 426243,
                "title": "python-recursive-solution-beats-100",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        elif not t2:\\n            return t1\\n        else:\\n            res = TreeNode(t1.val + t2.val)\\n            res.left = self.mergeTrees(t1.left, t2.left)\\n            res.right = self.mergeTrees(t1.right, t2.right)\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        elif not t2:\\n            return t1\\n        else:\\n            res = TreeNode(t1.val + t2.val)\\n            res.left = self.mergeTrees(t1.left, t2.left)\\n            res.right = self.mergeTrees(t1.right, t2.right)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 173640,
                "title": "python-simple-iterative-using-list-stack",
                "content": "Standard approach is using recursive. Here sharing a clean iterative solution using Python list inspired by the solution approach #2\\n```\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        \"\"\"\\n        if t1 is None:\\n            return t2\\n\\t\\t\\t\\t\\t\\t\\n        stack = []\\n        stack.append((t1,t2))\\n        while stack:\\n            t = stack.pop()\\n            if t[1] is None:\\n                continue\\n            t[0].val += t[1].val\\n            \\n            if t[0].left is None:\\n                t[0].left = t[1].left\\n            else:\\n                stack.append((t[0].left,t[1].left))\\n            \\n            if t[0].right is None:\\n                t[0].right = t[1].right\\n            else:\\n                stack.append((t[0].right,t[1].right))\\n        return t1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        \"\"\"\\n        if t1 is None:\\n            return t2\\n\\t\\t\\t\\t\\t\\t\\n        stack = []\\n        stack.append((t1,t2))\\n        while stack:\\n            t = stack.pop()\\n            if t[1] is None:\\n                continue\\n            t[0].val += t[1].val\\n            \\n            if t[0].left is None:\\n                t[0].left = t[1].left\\n            else:\\n                stack.append((t[0].left,t[1].left))\\n            \\n            if t[0].right is None:\\n                t[0].right = t[1].right\\n            else:\\n                stack.append((t[0].right,t[1].right))\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1276921,
                "title": "simplest-c-solution-easy-to-understand",
                "content": "* **Recursive approach.**\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2)\\n    {\\n        if(root1 == NULL)\\n        {\\n            return root2;\\n        }\\n        if(root2 == NULL)\\n        {\\n            return root1;\\n        }\\n        \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```\\n**Like the solution?\\nPlease upvote \\u30C4**\\n\\nIf you can\\'t understand any step/point, feel free to comment.\\nHappy to help.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2)\\n    {\\n        if(root1 == NULL)\\n        {\\n            return root2;\\n        }\\n        if(root2 == NULL)\\n        {\\n            return root1;\\n        }\\n        \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104298,
                "title": "c-o-n-space-iterative-solution-no-new-tree",
                "content": "```\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t2==NULL) return t1;\\n        if(t1==NULL) return t2;\\n        TreeNode* res=t1;\\n        stack<TreeNode*> s1, s2;\\n        s1.push(t1), s2.push(t2);\\n        while(!s1.empty()) {\\n            TreeNode* c1=s1.top();\\n            TreeNode* c2=s2.top();\\n            s1.pop(), s2.pop();\\n            c1->val+=c2->val;\\n            if(c1->right==NULL&&c2->right!=NULL) c1->right=c2->right;\\n            else if(c1->right!=NULL&&c2->right!=NULL) s1.push(c1->right), s2.push(c2->right);\\n            if(c1->left==NULL&&c2->left!=NULL) c1->left=c2->left;\\n            else if(c1->left!=NULL&&c2->left!=NULL) s1.push(c1->left), s2.push(c2->left);\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "```\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t2==NULL) return t1;\\n        if(t1==NULL) return t2;\\n        TreeNode* res=t1;\\n        stack<TreeNode*> s1, s2;\\n        s1.push(t1), s2.push(t2);\\n        while(!s1.empty()) {\\n            TreeNode* c1=s1.top();\\n            TreeNode* c2=s2.top();\\n            s1.pop(), s2.pop();\\n            c1->val+=c2->val;\\n            if(c1->right==NULL&&c2->right!=NULL) c1->right=c2->right;\\n            else if(c1->right!=NULL&&c2->right!=NULL) s1.push(c1->right), s2.push(c2->right);\\n            if(c1->left==NULL&&c2->left!=NULL) c1->left=c2->left;\\n            else if(c1->left!=NULL&&c2->left!=NULL) s1.push(c1->left), s2.push(c2->left);\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 372395,
                "title": "java-solution-100-runtime-and-memory",
                "content": "```\\nclass Solution {\\n    \\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        \\n        TreeNode new_node = new TreeNode(t1.val + t2.val);\\n        \\n        new_node.left = mergeTrees(t1.left, t2.left);\\n        new_node.right = mergeTrees(t1.right, t2.right);\\n        \\n        return new_node;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        \\n        TreeNode new_node = new TreeNode(t1.val + t2.val);\\n        \\n        new_node.left = mergeTrees(t1.left, t2.left);\\n        new_node.right = mergeTrees(t1.right, t2.right);\\n        \\n        return new_node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 137279,
                "title": "javascript-recursive-and-iterative-solutions",
                "content": "```javascript\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n// Recursive Algorithm:\\n//\\n// 1. Traverse the tree in Preorder fashion\\n// 2. Check if both the tree nodes are NULL\\n//   1. If not, then update the value\\n// 3. Recur for left subtrees\\n// 4. Recur for right subtrees\\n// 5. Return root of updated Tree\\nconst mergeTrees = (t1, t2) => {\\n  if (!t1) {\\n    return t2;\\n  }\\n  if (!t2) {\\n    return t1;\\n  }\\n  t1.val += t2.val;\\n  t1.left = mergeTrees(t1.left, t2.left);\\n  t1.right = mergeTrees(t1.right, t2.right);\\n  return t1;\\n};\\n\\n// Iterative Algorithm:\\n//\\n// 1. Create a stack\\n// 2. Push the root nodes of both the trees onto the stack.\\n// 3. While the stack is not empty, perform following steps :\\n//   1. Pop a node pair from the top of the stack\\n//   2. For every node pair removed, add the values corresponding to the two nodes and update the value of the corresponding node in the first tree\\n//   3. If the left child of the first tree exists, push the left child(pair) of both the trees onto the stack.\\n//   4. If the left child of the first tree doesn\\u2019t exist, append the left child of the second tree to the current node of the first tree\\n//   5. Do same for right child pair as well.\\n//   6. If both the current nodes are NULL, continue with popping the next nodes from the stack.\\n// 4. Return root of updated Tree\\nconst mergeTrees2 = (t1, t2) => {\\n  if (t1 === null) {\\n    return t2;\\n  }\\n  const stack = [];\\n  stack.push([t1, t2]);\\n  while (stack.length !== 0) {\\n    const t = stack.pop();\\n    if (t[0] === null || t[1] === null) {\\n      continue;\\n    }\\n    t[0].val += t[1].val;\\n    if (t[0].left === null) {\\n      t[0].left = t[1].left;\\n    } else {\\n      stack.push([t[0].left, t[1].left]);\\n    }\\n    if (t[0].right === null) {\\n      t[0].right = t[1].right;\\n    } else {\\n      stack.push([t[0].right, t[1].right]);\\n    }\\n  }\\n  return t1;\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n// Recursive Algorithm:\\n//\\n// 1. Traverse the tree in Preorder fashion\\n// 2. Check if both the tree nodes are NULL\\n//   1. If not, then update the value\\n// 3. Recur for left subtrees\\n// 4. Recur for right subtrees\\n// 5. Return root of updated Tree\\nconst mergeTrees = (t1, t2) => {\\n  if (!t1) {\\n    return t2;\\n  }\\n  if (!t2) {\\n    return t1;\\n  }\\n  t1.val += t2.val;\\n  t1.left = mergeTrees(t1.left, t2.left);\\n  t1.right = mergeTrees(t1.right, t2.right);\\n  return t1;\\n};\\n\\n// Iterative Algorithm:\\n//\\n// 1. Create a stack\\n// 2. Push the root nodes of both the trees onto the stack.\\n// 3. While the stack is not empty, perform following steps :\\n//   1. Pop a node pair from the top of the stack\\n//   2. For every node pair removed, add the values corresponding to the two nodes and update the value of the corresponding node in the first tree\\n//   3. If the left child of the first tree exists, push the left child(pair) of both the trees onto the stack.\\n//   4. If the left child of the first tree doesn\\u2019t exist, append the left child of the second tree to the current node of the first tree\\n//   5. Do same for right child pair as well.\\n//   6. If both the current nodes are NULL, continue with popping the next nodes from the stack.\\n// 4. Return root of updated Tree\\nconst mergeTrees2 = (t1, t2) => {\\n  if (t1 === null) {\\n    return t2;\\n  }\\n  const stack = [];\\n  stack.push([t1, t2]);\\n  while (stack.length !== 0) {\\n    const t = stack.pop();\\n    if (t[0] === null || t[1] === null) {\\n      continue;\\n    }\\n    t[0].val += t[1].val;\\n    if (t[0].left === null) {\\n      t[0].left = t[1].left;\\n    } else {\\n      stack.push([t[0].left, t[1].left]);\\n    }\\n    if (t[0].right === null) {\\n      t[0].right = t[1].right;\\n    } else {\\n      stack.push([t[0].right, t[1].right]);\\n    }\\n  }\\n  return t1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 499177,
                "title": "intuitive-javascript-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} t1\\n * @param {TreeNode} t2\\n * @return {TreeNode}\\n */\\nvar mergeTrees = function(t1, t2) {\\n    // goal is to merge t2 to t1\\n    \\n    // if one of the node missing, return the other\\n    if (t1 === null) {\\n        return t2;\\n    }\\n    if (t2 === null) {\\n        return t1;\\n    }\\n    // if both nodes exist, sum the values\\n    t1.val += t2.val;\\n    \\n    // do the same thing for left and right branch\\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n    \\n    // return the merged t1\\n    return t1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} t1\\n * @param {TreeNode} t2\\n * @return {TreeNode}\\n */\\nvar mergeTrees = function(t1, t2) {\\n    // goal is to merge t2 to t1\\n    \\n    // if one of the node missing, return the other\\n    if (t1 === null) {\\n        return t2;\\n    }\\n    if (t2 === null) {\\n        return t1;\\n    }\\n    // if both nodes exist, sum the values\\n    t1.val += t2.val;\\n    \\n    // do the same thing for left and right branch\\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n    \\n    // return the merged t1\\n    return t1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 205328,
                "title": "java-5ms-beats-100",
                "content": "\\n```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) {\\n            return null;\\n        } else if (t2 == null) {\\n            return t1;\\n        } else if (t1 == null) {\\n            return t2;\\n        } else {\\n            TreeNode t = new TreeNode(t1.val + t2.val);\\n            t.left = mergeTrees(t1.left, t2.left);\\n            t.right = mergeTrees(t1.right, t2.right);\\n            return t;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) {\\n            return null;\\n        } else if (t2 == null) {\\n            return t1;\\n        } else if (t1 == null) {\\n            return t2;\\n        } else {\\n            TreeNode t = new TreeNode(t1.val + t2.val);\\n            t.left = mergeTrees(t1.left, t2.left);\\n            t.right = mergeTrees(t1.right, t2.right);\\n            return t;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104389,
                "title": "concise-c-solution",
                "content": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\\n    if (!t2)\\n        return t1;\\n    if (!t1)\\n        return t2;\\n    t1->val += t2->val;\\n    t1->left = mergeTrees(t1->left, t2->left);\\n    t1->right = mergeTrees(t1->right, t2->right);\\n    return t1;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2) {\\n    if (!t2)\\n        return t1;\\n    if (!t1)\\n        return t2;\\n    t1->val += t2->val;\\n    t1->left = mergeTrees(t1->left, t2->left);\\n    t1->right = mergeTrees(t1->right, t2->right);\\n    return t1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104325,
                "title": "a-few-lines-of-javascript",
                "content": "Original:\\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) return null;\\n    const root = new TreeNode(((t1 || 0).val || 0) + ((t2 || 0).val || 0));\\n    root.left = mergeTrees(t1 && t1.left, t2 && t2.left);\\n    root.right = mergeTrees(t1 && t1.right, t2 && t2.right);\\n    return root;\\n};\\n```\\nvfanggg\\'s refactor:\\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 && t2) {\\n        const newNode = new TreeNode(t1.val + t2.val);\\n        newNode.left = mergeTrees(t1.left, t2.left);\\n        newNode.right = mergeTrees(t1.right, t2.right);\\n        return newNode;\\n    } \\n    return t1 || t2;\\n};\\n```\\nOriginal updated with option chaining:\\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) return null;\\n    const root = new TreeNode((t1?.val || 0) + (t2?.val || 0));\\n    root.left = mergeTrees(t1?.left, t2?.left);\\n    root.right = mergeTrees(t1?.right, t2?.right);\\n    return root;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) return null;\\n    const root = new TreeNode(((t1 || 0).val || 0) + ((t2 || 0).val || 0));\\n    root.left = mergeTrees(t1 && t1.left, t2 && t2.left);\\n    root.right = mergeTrees(t1 && t1.right, t2 && t2.right);\\n    return root;\\n};\\n```\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 && t2) {\\n        const newNode = new TreeNode(t1.val + t2.val);\\n        newNode.left = mergeTrees(t1.left, t2.left);\\n        newNode.right = mergeTrees(t1.right, t2.right);\\n        return newNode;\\n    } \\n    return t1 || t2;\\n};\\n```\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) return null;\\n    const root = new TreeNode((t1?.val || 0) + (t2?.val || 0));\\n    root.left = mergeTrees(t1?.left, t2?.left);\\n    root.right = mergeTrees(t1?.right, t2?.right);\\n    return root;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2626668,
                "title": "python-simple-create-new-tree-by-joining-two-input-trees",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\n        def dfs(node1, node2):\\n            if node1 and node2:\\n                # If both node exists, combine their values to form a new super node\\n                root = TreeNode(node1.val + node2.val)\\n                # And add its children by joining the children from both nodes\\n                root.left = dfs(node1.left, node2.left)\\n                root.right = dfs(node1.right, node2.right)\\n                # Finally return this super node\\n                return root\\n            else:\\n                # Otherwise return either that exists or None if neither exists\\n                return node1 or node2\\n        \\n        # Start the search in the head or roots of both trees\\n        return dfs(root1, root2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\n        def dfs(node1, node2):\\n            if node1 and node2:\\n                # If both node exists, combine their values to form a new super node\\n                root = TreeNode(node1.val + node2.val)\\n                # And add its children by joining the children from both nodes\\n                root.left = dfs(node1.left, node2.left)\\n                root.right = dfs(node1.right, node2.right)\\n                # Finally return this super node\\n                return root\\n            else:\\n                # Otherwise return either that exists or None if neither exists\\n                return node1 or node2\\n        \\n        # Start the search in the head or roots of both trees\\n        return dfs(root1, root2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1410057,
                "title": "java-easy-approach-with-explanation-dfs-postorder",
                "content": "```\\nclass Solution \\n{\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) \\n    {//Postorder Traversal   \\n        if(root1 == null)//when we see that the root1 is null there is a possibility that root2 is not null so we return that and maintaining the link and continue overlapping\\n           return root2;//telling that root1 is not present so sending root1\\n      \\n        if(root2 == null)//when we see that the root2 is null there is a possibility that root1 is not null so we return that and maintaining the link  \\n           return root1;//telling that root2 is not present so sending root1\\n   \\n        //LEFT - RIGHT\\n        TreeNode left= mergeTrees(root1.left, root2.left);//recursing down the left subtree and knowing about the left child \\n        TreeNode right= mergeTrees(root1.right, root2.right);//recursing down the right subtree and knowing about the right child \\n      \\n        //ROOT\\n        //creating the node by the total information received from left and right child \\n        TreeNode node= new TreeNode(root1.val+root2.val, left, right);\\n      \\n        return node;//returning the node in order to maintain the backward modified link at each instant//Telling to the parent that I am present  \\n    }\\n}//Please do Upvote, it helps a lot \\n```",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution \\n{\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) \\n    {//Postorder Traversal   \\n        if(root1 == null)//when we see that the root1 is null there is a possibility that root2 is not null so we return that and maintaining the link and continue overlapping\\n           return root2;//telling that root1 is not present so sending root1\\n      \\n        if(root2 == null)//when we see that the root2 is null there is a possibility that root1 is not null so we return that and maintaining the link  \\n           return root1;//telling that root2 is not present so sending root1\\n   \\n        //LEFT - RIGHT\\n        TreeNode left= mergeTrees(root1.left, root2.left);//recursing down the left subtree and knowing about the left child \\n        TreeNode right= mergeTrees(root1.right, root2.right);//recursing down the right subtree and knowing about the right child \\n      \\n        //ROOT\\n        //creating the node by the total information received from left and right child \\n        TreeNode node= new TreeNode(root1.val+root2.val, left, right);\\n      \\n        return node;//returning the node in order to maintain the backward modified link at each instant//Telling to the parent that I am present  \\n    }\\n}//Please do Upvote, it helps a lot \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054426,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if ( t1 && t2 ) {\\n            TreeNode * root = new TreeNode(t1->val + t2->val);\\n            root->left = mergeTrees(t1->left, t2->left);\\n            root->right = mergeTrees(t1->right, t2->right);\\n            return root;\\n        } else {\\n            return t1 ? t1 : t2;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 860133,
                "title": "easy-yet-simple-solution",
                "content": "Breakdown the problem into simple steps:-\\n1. Check if either of the trees are null\\n2. Change tree 1\\'s node values to tree 1\\'s node + tree2\\'s current node\\n3. Merge left and right of each trees\\n\\nThat\\'s it\\n\\n```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3317995,
                "title": "easiest-solution-in-5-lines-of-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nPlsssss Up Vote! -> \\uD83D\\uDE2D\\n# Code\\n```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null) return root2;\\n        if(root2==null) return root1;\\n        root1.val += root2.val;\\n        root1.left = mergeTrees(root1.left,root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null) return root2;\\n        if(root2==null) return root1;\\n        root1.val += root2.val;\\n        root1.left = mergeTrees(root1.left,root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2966783,
                "title": "python-simple-recursion-beats-95",
                "content": "### \\u2705 Upvote if it helps ! \\uD83D\\uDE42\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- I used a simple recursion with the *constructTree* function.\\n- **If one of the 2 nodes is not defined**, we can simply return the other node.\\n- **If the 2 nodes are not defined**, we can finish the recursion.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def mergeTrees(self, root1, root2):\\n\\n        def constructTree(root1, root2):\\n            if not root1 and not root2:\\n                return None\\n            if not root2:\\n                return root1\\n            if not root1:\\n                return root2\\n            head = TreeNode(root1.val + root2.val)\\n            head.left = constructTree(root1.left, root2.left)\\n            head.right = constructTree(root1.right, root2.right)\\n        \\n            return head\\n        \\n        return constructTree(root1, root2)\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def mergeTrees(self, root1, root2):\\n\\n        def constructTree(root1, root2):\\n            if not root1 and not root2:\\n                return None\\n            if not root2:\\n                return root1\\n            if not root1:\\n                return root2\\n            head = TreeNode(root1.val + root2.val)\\n            head.left = constructTree(root1.left, root2.left)\\n            head.right = constructTree(root1.right, root2.right)\\n        \\n            return head\\n        \\n        return constructTree(root1, root2)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1300617,
                "title": "c-solution-recursive-creating-new-tree-with-void-helper-function",
                "content": "This is not the best solution to this problem. This is just an approach in which I am creating new tree with new helper function of type ``` void ``` .\\n\\nDo upvote this post if you liked the approach ! It really motivates the author to post more on leetcode \\uD83D\\uDE42 and comment section is open if you want to suggest some changes in my code.\\n\\n```\\n// This is the helper function\\nvoid createTree(TreeNode* &root  , TreeNode* root1 , TreeNode* root2 ){\\n        \\n        if(root1 == NULL && root2 == NULL)\\n            root = NULL ;\\n        \\n        else if(root1 == NULL && root2)\\n        {\\n            root = new TreeNode(root2->val);\\n            createTree(root->left,NULL,root2->left);\\n            createTree(root->right,NULL , root2->right);\\n        }\\n        \\n        else if(root1 && root2 == NULL)\\n        {\\n            root = new TreeNode(root1->val);\\n            createTree(root->left,root1->left,NULL);\\n            createTree(root->right,root1->right,NULL);\\n        }\\n        \\n        else \\n        {\\n            root = new TreeNode(root1->val + root2->val);\\n            createTree(root->left,root1->left,root2->left);\\n            createTree(root->right,root1->right,root2->right);\\n        }\\n        \\n    }\\n    \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        \\n        TreeNode* root ;\\n        \\n        createTree(root,root1,root2);\\n        \\n        return root;\\n        \\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Tree",
                    "Depth-First Search",
                    "Binary Tree"
                ],
                "code": "``` void ```\n```\\n// This is the helper function\\nvoid createTree(TreeNode* &root  , TreeNode* root1 , TreeNode* root2 ){\\n        \\n        if(root1 == NULL && root2 == NULL)\\n            root = NULL ;\\n        \\n        else if(root1 == NULL && root2)\\n        {\\n            root = new TreeNode(root2->val);\\n            createTree(root->left,NULL,root2->left);\\n            createTree(root->right,NULL , root2->right);\\n        }\\n        \\n        else if(root1 && root2 == NULL)\\n        {\\n            root = new TreeNode(root1->val);\\n            createTree(root->left,root1->left,NULL);\\n            createTree(root->right,root1->right,NULL);\\n        }\\n        \\n        else \\n        {\\n            root = new TreeNode(root1->val + root2->val);\\n            createTree(root->left,root1->left,root2->left);\\n            createTree(root->right,root1->right,root2->right);\\n        }\\n        \\n    }\\n    \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        \\n        TreeNode* root ;\\n        \\n        createTree(root,root1,root2);\\n        \\n        return root;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1097923,
                "title": "python-easiest-solution",
                "content": "**Platform**: leetcode.com\\n**617. Merge Two Binary Trees**\\n**Link**: https://leetcode.com/problems/merge-two-binary-trees/\\n**Difficulty**: Easy\\n**Author**: hritik5102\\n**Date**: 7/3/2021\\n**Post Discussion** : https://leetcode.com/problems/merge-two-binary-trees/discuss/1097923/Python-or-Easiest-solution\\n**Submission**: https://leetcode.com/submissions/detail/464670896/\\n**(Time, Space) Complexity** : O(n), O(n)\\n**Github** : https://github.com/hritik5102\\n**Social-handles** : https://linktr.ee/hritikdj\\n\\n**PLEASE UPVOTE \\uD83C\\uDFAF, if found helpful**\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None and root2 is None:\\n            return None\\n        \\n        if root1 is None:\\n            res = root2\\n        elif root2 is None:\\n            res = root1\\n        else:\\n            res = TreeNode(root1.val + root2.val)\\n            res.left = self.mergeTrees(root1.left, root2.left)\\n            res.right = self.mergeTrees(root1.right, root2.right)\\n            \\n        return res\\n   ```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None and root2 is None:\\n            return None\\n        \\n        if root1 is None:\\n            res = root2\\n        elif root2 is None:\\n            res = root1\\n        else:\\n            res = TreeNode(root1.val + root2.val)\\n            res.left = self.mergeTrees(root1.left, root2.left)\\n            res.right = self.mergeTrees(root1.right, root2.right)\\n            \\n        return res\\n   ```",
                "codeTag": "Java"
            },
            {
                "id": 360879,
                "title": "python3-recursively-and-iteratively",
                "content": "* Recursively\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 == None:\\n            return t2\\n        if t2 == None:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left,t2.left)\\n        t1.right = self.mergeTrees(t1.right,t2.right)\\n        return t1\\n```\\n* Iteratively\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 == None:\\n            return t2\\n        stack = []\\n        stack = [[t1,t2]]\\n        while stack:\\n            cur = stack.pop()\\n            if cur[0] == None or cur[1] == None:\\n                continue\\n            cur[0].val += cur[1].val\\n            if cur[0].left == None:\\n                cur[0].left = cur[1].left\\n            else:\\n                stack.append([cur[0].left,cur[1].left])\\n            if cur[0].right == None:\\n                cur[0].right = cur[1].right\\n            else:\\n                stack.append([cur[0].right,cur[1].right])\\n        return t1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 == None:\\n            return t2\\n        if t2 == None:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left,t2.left)\\n        t1.right = self.mergeTrees(t1.right,t2.right)\\n        return t1\\n```\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 == None:\\n            return t2\\n        stack = []\\n        stack = [[t1,t2]]\\n        while stack:\\n            cur = stack.pop()\\n            if cur[0] == None or cur[1] == None:\\n                continue\\n            cur[0].val += cur[1].val\\n            if cur[0].left == None:\\n                cur[0].left = cur[1].left\\n            else:\\n                stack.append([cur[0].left,cur[1].left])\\n            if cur[0].right == None:\\n                cur[0].right = cur[1].right\\n            else:\\n                stack.append([cur[0].right,cur[1].right])\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 238458,
                "title": "very-simple-javascript-solution-recursive",
                "content": "Just a recursive way to traverse whole tree;\\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 === null || t2 === null) {\\n        return t1 || t2;\\n    } \\n    const root = new TreeNode(t1.val + t2.val);\\n    const left = mergeTrees(t1.left, t2.left);\\n    const right = mergeTrees(t1.right, t2.right);\\n    root.left = left;\\n    root.right = right;\\n    return root;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 === null || t2 === null) {\\n        return t1 || t2;\\n    } \\n    const root = new TreeNode(t1.val + t2.val);\\n    const left = mergeTrees(t1.left, t2.left);\\n    const right = mergeTrees(t1.right, t2.right);\\n    root.left = left;\\n    root.right = right;\\n    return root;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 121170,
                "title": "python-iterative",
                "content": "I didn\\'t find any Python iterative solution. So, here you go. \\n\\n```\\n    def mergeTrees(self, t1, t2):\\n        dummy = TreeNode(0)\\n        stack = [(t1, t2, dummy, \\'l\\')]\\n        while stack:\\n            n1, n2, parent, lr = stack.pop()\\n            n = TreeNode((n1.val if n1 else 0 ) + (n2.val if n2 else 0 )) if n1 or n2 else None\\n            if lr == \\'l\\': \\n                parent.left = n \\n            else:\\n                parent.right = n\\n                \\n            if n1 or n2:\\n                stack.append((n1 and n1.left, n2 and n2.left, n, \\'l\\'))\\n                stack.append((n1 and n1.right, n2 and n2.right, n, \\'r\\'))\\n            \\n        return dummy.left\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    def mergeTrees(self, t1, t2):\\n        dummy = TreeNode(0)\\n        stack = [(t1, t2, dummy, \\'l\\')]\\n        while stack:\\n            n1, n2, parent, lr = stack.pop()\\n            n = TreeNode((n1.val if n1 else 0 ) + (n2.val if n2 else 0 )) if n1 or n2 else None\\n            if lr == \\'l\\': \\n                parent.left = n \\n            else:\\n                parent.right = n\\n                \\n            if n1 or n2:\\n                stack.append((n1 and n1.left, n2 and n2.left, n, \\'l\\'))\\n                stack.append((n1 and n1.right, n2 and n2.right, n, \\'r\\'))\\n            \\n        return dummy.left\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2077828,
                "title": "python3-bfs-create-new-tree",
                "content": "As requested: create **a new** merged Tree via BFS (level order traversal):\\n\\n```\\nfrom collections import deque\\n\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1: return root2\\n        if not root2: return root1\\n        \\n        new_root = TreeNode()\\n        queue = deque([(root1, root2, new_root)])\\n        \\n        while queue:\\n            n1, n2, n = queue.popleft()\\n            if n1: n.val = n1.val\\n            if n2: n.val += n2.val\\n\\n            if (n1 and n1.left) or (n2 and n2.left):\\n                n.left = TreeNode()\\n                queue.append((n1.left if n1 else None, n2.left if n2 else None, n.left))\\n            if (n1 and n1.right) or (n2 and n2.right):\\n                n.right = TreeNode()\\n                queue.append((n1.right if n1 else None, n2.right if n2 else None, n.right))\\n\\n        return new_root\\n```\\n\\nP.S. Maybe someone will be interested in 3 lines DFS?\\n```\\ndef mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\tif not root1: return root2\\n\\tif not root2: return root1\\n\\treturn TreeNode(root1.val + root2.val, self.mergeTrees(root1.left, root2.left), self.mergeTrees(root1.right, root2.right))\\n```",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search",
                    "Iterator"
                ],
                "code": "```\\nfrom collections import deque\\n\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1: return root2\\n        if not root2: return root1\\n        \\n        new_root = TreeNode()\\n        queue = deque([(root1, root2, new_root)])\\n        \\n        while queue:\\n            n1, n2, n = queue.popleft()\\n            if n1: n.val = n1.val\\n            if n2: n.val += n2.val\\n\\n            if (n1 and n1.left) or (n2 and n2.left):\\n                n.left = TreeNode()\\n                queue.append((n1.left if n1 else None, n2.left if n2 else None, n.left))\\n            if (n1 and n1.right) or (n2 and n2.right):\\n                n.right = TreeNode()\\n                queue.append((n1.right if n1 else None, n2.right if n2 else None, n.right))\\n\\n        return new_root\\n```\n```\\ndef mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\tif not root1: return root2\\n\\tif not root2: return root1\\n\\treturn TreeNode(root1.val + root2.val, self.mergeTrees(root1.left, root2.left), self.mergeTrees(root1.right, root2.right))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 853764,
                "title": "javascript-solution-617",
                "content": "```\\nlet mergeTrees = function(t1, t2) {\\n    if (!t1) {\\n        return t2;\\n    }\\n    if (!t2) {\\n        return t1;\\n    }\\n    \\n    t1.val += t2.val;\\n    \\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n    \\n    return t1;\\n    \\n};\\n```\\n**Runtime: 108 ms, faster than 85.34% of JavaScript online submissions for Merge Two Binary Trees.**\\n\\n**Memory Usage: 43.9 MB, less than 98.47% of JavaScript online submissions for Merge Two Binary Trees.**\\n\\n**Feedback Appreciated**\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet mergeTrees = function(t1, t2) {\\n    if (!t1) {\\n        return t2;\\n    }\\n    if (!t2) {\\n        return t1;\\n    }\\n    \\n    t1.val += t2.val;\\n    \\n    t1.left = mergeTrees(t1.left, t2.left);\\n    t1.right = mergeTrees(t1.right, t2.right);\\n    \\n    return t1;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 795448,
                "title": "c-simplest-recursive-solution",
                "content": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2){\\n    if (!t1) return t2;\\n    if (!t2) return t1;\\n    t1->val += t2->val;\\n    t1->left = mergeTrees(t1->left, t2->left);\\n    t1->right = mergeTrees(t1->right, t2->right);\\n    return t1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* t1, struct TreeNode* t2){\\n    if (!t1) return t2;\\n    if (!t2) return t1;\\n    t1->val += t2->val;\\n    t1->left = mergeTrees(t1->left, t2->left);\\n    t1->right = mergeTrees(t1->right, t2->right);\\n    return t1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2702235,
                "title": "js-90-with-exlanation",
                "content": "![image](https://assets.leetcode.com/users/images/dd9ff164-e2ab-43d4-a964-ca931f9a3592_1665744619.6863892.png)\\n\\nTo solve this problem, we need to sum the values if both nodes, if one of them is not present, return the other (it does not matter if the other one also turns out to be null).\\nFirst of all, we need to consider edge cases. One or both nodes can be null. When one of the given trees is null, we can immediately return another tree (regardless of whether it is null or not).\\nTo transform one tree, we can merge another with it, when both trees are not null, we sum the values of the nodes. So, we first go through the left nodes, and then the right ones, and at the end we can return the already merged tree.\\n\\n![image](https://assets.leetcode.com/users/images/6250b614-8deb-4102-9a33-49c1641c7bda_1665745121.283226.png)\\n![image](https://assets.leetcode.com/users/images/d77f13e7-8bd9-43e9-9180-eeba58be1484_1665745182.5205383.png)\\n\\n```\\nvar mergeTrees = function (root1, root2) {\\n    if (!root1) return root2;\\n    else if (!root2) return root1;\\n    else {\\n        root1.val += root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1\\n    }\\n};\\n```\\n\\nI hope I was able to explain clearly.\\n**Happy coding!** \\uD83D\\uDE43\\n",
                "solutionTags": [
                    "JavaScript",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nvar mergeTrees = function (root1, root2) {\\n    if (!root1) return root2;\\n    else if (!root2) return root1;\\n    else {\\n        root1.val += root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559908,
                "title": "java-iterative-solution-w-stack",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) \\n    {\\n        Stack <TreeNode> s = new Stack <TreeNode>();\\n        s.push(t1);\\n        s.push(t2);\\n        if (t1 == null)\\n            return t2;\\n \\n        while(!s.isEmpty())\\n        {\\n            TreeNode two = s.pop();\\n            TreeNode one = s.pop();\\n            \\n            if (one != null && two != null)\\n            {\\n                one.val += two.val;\\n                if (one.left == null){\\n                    one.left = two.left;\\n                }\\n                else\\n                {\\n                    s.push(one.left);\\n                    s.push(two.left);\\n                }\\n                      \\n                if (one.right == null){\\n                    one.right = two.right;\\n                }\\n                else\\n                {\\n                    s.push(one.right);\\n                    s.push(two.right);\\n                }  \\n            }     \\n        }\\n        return t1;  \\n    }\\n}\\n```\\n\\nNot too many iterative solutions, its important to try coding it iteratively for interviews. \\n",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) \\n    {\\n        Stack <TreeNode> s = new Stack <TreeNode>();\\n        s.push(t1);\\n        s.push(t2);\\n        if (t1 == null)\\n            return t2;\\n \\n        while(!s.isEmpty())\\n        {\\n            TreeNode two = s.pop();\\n            TreeNode one = s.pop();\\n            \\n            if (one != null && two != null)\\n            {\\n                one.val += two.val;\\n                if (one.left == null){\\n                    one.left = two.left;\\n                }\\n                else\\n                {\\n                    s.push(one.left);\\n                    s.push(two.left);\\n                }\\n                      \\n                if (one.right == null){\\n                    one.right = two.right;\\n                }\\n                else\\n                {\\n                    s.push(one.right);\\n                    s.push(two.right);\\n                }  \\n            }     \\n        }\\n        return t1;  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 159138,
                "title": "python-solution",
                "content": "recursive:\\n```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 == None and t2 == None:\\n            return None\\n        elif t1 == None:\\n            return t2\\n        elif t2 == None:\\n            return t1\\n        new_root = TreeNode(t1.val + t2.val)\\n        left = self.mergeTrees(t1.left, t2.left)\\n        right = self.mergeTrees(t1.right, t2.right)\\n        new_root.left = left\\n        new_root.right = right\\n        return new_root\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 == None and t2 == None:\\n            return None\\n        elif t1 == None:\\n            return t2\\n        elif t2 == None:\\n            return t1\\n        new_root = TreeNode(t1.val + t2.val)\\n        left = self.mergeTrees(t1.left, t2.left)\\n        right = self.mergeTrees(t1.right, t2.right)\\n        new_root.left = left\\n        new_root.right = right\\n        return new_root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104460,
                "title": "simple-python-recursive",
                "content": "The idea is simple, when ```t1``` and ```t2``` are both ```None```, return ```None``` otherwise just turtle all the way down.\\n```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not t1 and not t2: return None\\n        if t1:\\n            v1, L1, R1 = t1.val, t1.left, t1.right\\n        else:\\n            v1, L1, R1 = 0, None, None\\n        if t2:\\n            v2, L2, R2 = t2.val, t2.left, t2.right\\n        else:\\n            v2, L2, R2 = 0, None, None\\n        node = TreeNode(v1+v2)\\n        node.left = self.mergeTrees(L1, L2)\\n        node.right = self.mergeTrees(R1, R2)\\n        return node\\n```",
                "solutionTags": [],
                "code": "```t1```\n```t2```\n```None```\n```None```\n```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not t1 and not t2: return None\\n        if t1:\\n            v1, L1, R1 = t1.val, t1.left, t1.right\\n        else:\\n            v1, L1, R1 = 0, None, None\\n        if t2:\\n            v2, L2, R2 = t2.val, t2.left, t2.right\\n        else:\\n            v2, L2, R2 = 0, None, None\\n        node = TreeNode(v1+v2)\\n        node.left = self.mergeTrees(L1, L2)\\n        node.right = self.mergeTrees(R1, R2)\\n        return node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1342175,
                "title": "elegant-python-iterative-recursive-solutions",
                "content": "#### Iterative\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1: return root2\\n        if not root2: return root1\\n        queue = deque([(root1, root2)])\\n        while queue:\\n            current_root1, current_root2 = queue.pop()\\n            if current_root1.left and current_root2.left: queue.append((current_root1.left, current_root2.left))\\n            elif not current_root1.left: current_root1.left = current_root2.left\\n            if current_root1.right and current_root2.right: queue.append((current_root1.right, current_root2.right))\\n            elif not current_root1.right: current_root1.right = current_root2.right\\n            current_root1.val += current_root2.val\\n        return root1\\n```\\n#### Recursive\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1: return root2\\n        if not root2: return root1\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1: return root2\\n        if not root2: return root1\\n        queue = deque([(root1, root2)])\\n        while queue:\\n            current_root1, current_root2 = queue.pop()\\n            if current_root1.left and current_root2.left: queue.append((current_root1.left, current_root2.left))\\n            elif not current_root1.left: current_root1.left = current_root2.left\\n            if current_root1.right and current_root2.right: queue.append((current_root1.right, current_root2.right))\\n            elif not current_root1.right: current_root1.right = current_root2.right\\n            current_root1.val += current_root2.val\\n        return root1\\n```\n```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1: return root2\\n        if not root2: return root1\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 830358,
                "title": "c-recursive-dfs-solution-explained-80-time-40-space",
                "content": "Core idea here: we merge the 2 trees in place, using `t1` as a base (unless it is empty, in which case we just return `t2`) and summing the values when both have a node present in the same position, recursively calling a `dfs` helper function to traverse the trees.\\n\\nWhen `t1` does not have nodes, but `t2` has, we just attach the matching node from `t2` and move on.\\n\\nOnce done, we return `t1`.\\n \\nMy initial code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2) {\\n        // we act only if both nodes are present, otherwise do nothing (ie: return)\\n        if (t1 && t2) {\\n            // if we have both and t1 was not taken by t2, we sum\\n            if (t1 != t2) t1->val += t2->val;\\n            // if t1 misses branches, we attach the ones from t2\\n            if (!t1->left) t1->left = t2->left;\\n            if (!t1->right) t1->right = t2->right;\\n            // recursively we go!\\n            dfs(t1->left, t2->left);\\n            dfs(t1->right, t2->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        dfs(t1, t2);\\n        return t1;\\n    }\\n};\\n```\\n\\nThen I was like: \"wait a moment - when I just attach `t2` to make up for missing parts of `t1`, there is no point in going down, so let\\'s put a conditional before the recursive calls\":\\n\\n```cpp\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2) {\\n        // we act only if both nodes are present, otherwise do nothing (ie: return)\\n        if (t1 && t2) {\\n            t1->val += t2->val;\\n            // if t1 misses branches, we attach the ones from t2\\n            if (!t1->left) t1->left = t2->left;\\n            if (!t1->right) t1->right = t2->right;\\n            // recursively we go!\\n            if (t1->left != t2->left) dfs(t1->left, t2->left);\\n            if (t1->right != t2->right) dfs(t1->right, t2->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        dfs(t1, t2);\\n        return t1;\\n    }\\n};\\n```\\n\\nFinally I was like \"Hey, but I do not need a helper function at all!\" and got this;\\n\\n```cpp\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        // mergin when both are present\\n        if (t1 && t2) {\\n            t1->val += t2->val;\\n            // recursively we go!\\n            t1->left = mergeTrees(t1->left, t2->left);\\n            t1->right = mergeTrees(t1->right, t2->right);\\n        }\\n        return t1;\\n    }\\n};\\n```\\n\\nPerformances are still very random (and overall comparable with the second version) and I have no clue how I might use less memory (maybe extra test cases were added later?), but it was a fun exercise nevertheless!",
                "solutionTags": [
                    "C++",
                    "C",
                    "Tree",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2) {\\n        // we act only if both nodes are present, otherwise do nothing (ie: return)\\n        if (t1 && t2) {\\n            // if we have both and t1 was not taken by t2, we sum\\n            if (t1 != t2) t1->val += t2->val;\\n            // if t1 misses branches, we attach the ones from t2\\n            if (!t1->left) t1->left = t2->left;\\n            if (!t1->right) t1->right = t2->right;\\n            // recursively we go!\\n            dfs(t1->left, t2->left);\\n            dfs(t1->right, t2->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        dfs(t1, t2);\\n        return t1;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    void dfs(TreeNode* t1, TreeNode* t2) {\\n        // we act only if both nodes are present, otherwise do nothing (ie: return)\\n        if (t1 && t2) {\\n            t1->val += t2->val;\\n            // if t1 misses branches, we attach the ones from t2\\n            if (!t1->left) t1->left = t2->left;\\n            if (!t1->right) t1->right = t2->right;\\n            // recursively we go!\\n            if (t1->left != t2->left) dfs(t1->left, t2->left);\\n            if (t1->right != t2->right) dfs(t1->right, t2->right);\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        dfs(t1, t2);\\n        return t1;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        // edge case: empty t1\\n        if (!t1) return t2;\\n        // mergin when both are present\\n        if (t1 && t2) {\\n            t1->val += t2->val;\\n            // recursively we go!\\n            t1->left = mergeTrees(t1->left, t2->left);\\n            t1->right = mergeTrees(t1->right, t2->right);\\n        }\\n        return t1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 124537,
                "title": "python-recursive-iterative-dfs-bfs-solutions",
                "content": "```\\n# Recursion pre-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        t = TreeNode(t1.val + t2.val)\\n        t.left = self.mergeTrees(t1.left, t2.left)\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        \\n        return t\\n\\n# Recursion in-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        tLeft = self.mergeTrees(t1.left, t2.left)\\n        t = TreeNode(t1.val + t2.val)\\n        t.left = tLeft\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        \\n        return t\\n\\n# Recursion post-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        tLeft = self.mergeTrees(t1.left, t2.left)\\n        tRight = self.mergeTrees(t1.right, t2.right)\\n        t = TreeNode(t1.val + t2.val)\\n        t.left, t.right = tLeft, tRight\\n        \\n        return t\\n\\n# Iterative pre-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        stack1 = [t1]\\n        stack2 = [t2]\\n        tRoot = TreeNode(t1.val + t2.val)\\n        stack = [tRoot]\\n        while len(stack) > 0:\\n            t1 = stack1.pop()\\n            t2 = stack2.pop()\\n            t = stack.pop()\\n            if t1.right is None and t2.right is None:\\n                pass\\n            elif t1.right is None:\\n                t.right = t2.right\\n            elif t2.right is None:\\n                t.right = t1.right\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                stack1.append(t1.right)\\n                stack2.append(t2.right)\\n                stack.append(t.right)\\n            if t1.left is None and t2.left is None:\\n                pass\\n            elif t1.left is None:\\n                t.left = t2.left\\n            elif t2.left is None:\\n                t.left = t1.left\\n            else:\\n                t.left = TreeNode(t1.left.val + t2.left.val)\\n                stack1.append(t1.left)\\n                stack2.append(t2.left)\\n                stack.append(t.left)\\n        \\n        return tRoot\\n\\n# Iterative in-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        stack1 = []\\n        stack2 = []\\n        stack = []\\n        tRoot = TreeNode(t1.val + t2.val)\\n        t = tRoot\\n        while len(stack1) > 0 or t1 is not None:\\n            while t1 is not None and t2 is not None:\\n                stack1.append(t1)\\n                stack2.append(t2)\\n                stack.append(t)\\n                # Note: need to delay going to left if one tree is null\\n                if t1.left is not None and t2.left is not None:\\n                    t.left = TreeNode(t1.left.val + t2.left.val)\\n                    t = t.left\\n                t1, t2 = t1.left, t2.left\\n            if t1 is not None:\\n                t.left = t1\\n            if t2 is not None:\\n                t.left = t2\\n            t1, t2, t = stack1.pop(), stack2.pop(), stack.pop()\\n            if t1.right is None and t2.right is None:\\n                t1 = t2 = None\\n            elif t1.right is None:\\n                t.right = t2.right\\n                t1 = t2 = None\\n            elif t2.right is None:\\n                t.right = t1.right\\n                t1 = t2 = None\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                t1, t2, t = t1.right, t2.right, t.right            \\n        \\n        return tRoot\\n\\n# BFS\\nfrom collections import deque\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        q1, q2, q = deque(), deque(), deque()\\n        tRoot = TreeNode(t1.val + t2.val)\\n        t = tRoot\\n        q1.append(t1)\\n        q2.append(t2)\\n        q.append(t)\\n        \\n        while len(q1) > 0:\\n            t1, t2, t = q1.popleft(), q2.popleft(), q.popleft()\\n            if t1.left is None and t2.left is None:\\n                pass\\n            elif t1.left is None:\\n                t.left = t2.left\\n            elif t2.left is None:\\n                t.left = t1.left\\n            else:\\n                t.left = TreeNode(t1.left.val + t2.left.val)\\n                q1.append(t1.left)\\n                q2.append(t2.left)\\n                q.append(t.left)\\n            if t1.right is None and t2.right is None:\\n                pass\\n            elif t1.right is None:\\n                t.right = t2.right\\n            elif t2.right is None:\\n                t.right = t1.right\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                q1.append(t1.right)\\n                q2.append(t2.right)\\n                q.append(t.right)\\n        \\n        return tRoot\\n```",
                "solutionTags": [],
                "code": "```\\n# Recursion pre-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        t = TreeNode(t1.val + t2.val)\\n        t.left = self.mergeTrees(t1.left, t2.left)\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        \\n        return t\\n\\n# Recursion in-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        tLeft = self.mergeTrees(t1.left, t2.left)\\n        t = TreeNode(t1.val + t2.val)\\n        t.left = tLeft\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        \\n        return t\\n\\n# Recursion post-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        \\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        tLeft = self.mergeTrees(t1.left, t2.left)\\n        tRight = self.mergeTrees(t1.right, t2.right)\\n        t = TreeNode(t1.val + t2.val)\\n        t.left, t.right = tLeft, tRight\\n        \\n        return t\\n\\n# Iterative pre-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        stack1 = [t1]\\n        stack2 = [t2]\\n        tRoot = TreeNode(t1.val + t2.val)\\n        stack = [tRoot]\\n        while len(stack) > 0:\\n            t1 = stack1.pop()\\n            t2 = stack2.pop()\\n            t = stack.pop()\\n            if t1.right is None and t2.right is None:\\n                pass\\n            elif t1.right is None:\\n                t.right = t2.right\\n            elif t2.right is None:\\n                t.right = t1.right\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                stack1.append(t1.right)\\n                stack2.append(t2.right)\\n                stack.append(t.right)\\n            if t1.left is None and t2.left is None:\\n                pass\\n            elif t1.left is None:\\n                t.left = t2.left\\n            elif t2.left is None:\\n                t.left = t1.left\\n            else:\\n                t.left = TreeNode(t1.left.val + t2.left.val)\\n                stack1.append(t1.left)\\n                stack2.append(t2.left)\\n                stack.append(t.left)\\n        \\n        return tRoot\\n\\n# Iterative in-order\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        stack1 = []\\n        stack2 = []\\n        stack = []\\n        tRoot = TreeNode(t1.val + t2.val)\\n        t = tRoot\\n        while len(stack1) > 0 or t1 is not None:\\n            while t1 is not None and t2 is not None:\\n                stack1.append(t1)\\n                stack2.append(t2)\\n                stack.append(t)\\n                # Note: need to delay going to left if one tree is null\\n                if t1.left is not None and t2.left is not None:\\n                    t.left = TreeNode(t1.left.val + t2.left.val)\\n                    t = t.left\\n                t1, t2 = t1.left, t2.left\\n            if t1 is not None:\\n                t.left = t1\\n            if t2 is not None:\\n                t.left = t2\\n            t1, t2, t = stack1.pop(), stack2.pop(), stack.pop()\\n            if t1.right is None and t2.right is None:\\n                t1 = t2 = None\\n            elif t1.right is None:\\n                t.right = t2.right\\n                t1 = t2 = None\\n            elif t2.right is None:\\n                t.right = t1.right\\n                t1 = t2 = None\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                t1, t2, t = t1.right, t2.right, t.right            \\n        \\n        return tRoot\\n\\n# BFS\\nfrom collections import deque\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None and t2 is None:\\n            return\\n        if t1 is None:\\n            return t2\\n        if t2 is None:\\n            return t1\\n        \\n        q1, q2, q = deque(), deque(), deque()\\n        tRoot = TreeNode(t1.val + t2.val)\\n        t = tRoot\\n        q1.append(t1)\\n        q2.append(t2)\\n        q.append(t)\\n        \\n        while len(q1) > 0:\\n            t1, t2, t = q1.popleft(), q2.popleft(), q.popleft()\\n            if t1.left is None and t2.left is None:\\n                pass\\n            elif t1.left is None:\\n                t.left = t2.left\\n            elif t2.left is None:\\n                t.left = t1.left\\n            else:\\n                t.left = TreeNode(t1.left.val + t2.left.val)\\n                q1.append(t1.left)\\n                q2.append(t2.left)\\n                q.append(t.left)\\n            if t1.right is None and t2.right is None:\\n                pass\\n            elif t1.right is None:\\n                t.right = t2.right\\n            elif t2.right is None:\\n                t.right = t1.right\\n            else:\\n                t.right = TreeNode(t1.right.val + t2.right.val)\\n                q1.append(t1.right)\\n                q2.append(t2.right)\\n                q.append(t.right)\\n        \\n        return tRoot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1724430,
                "title": "python-3-120ms-no-extra-space-recursive-7-lines-easy-to-understand",
                "content": "***Adding all the values in Tree1 and returning Root1 of Tree1 :-***\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if root1 and root2:\\n            root1.val  += root2.val\\n            root1.left = self.mergeTrees(root1.left, root2.left)\\n            root1.right = self.mergeTrees(root1.right, root2.right)\\n            return root1\\n        else:\\n            return root1 or root2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if root1 and root2:\\n            root1.val  += root2.val\\n            root1.left = self.mergeTrees(root1.left, root2.left)\\n            root1.right = self.mergeTrees(root1.right, root2.right)\\n            return root1\\n        else:\\n            return root1 or root2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1044363,
                "title": "python-recursive-runtime-beats-100",
                "content": "```\\ndef mergeTrees(self, t1, t2):\\n\\tif t1 and t2:\\n\\t\\tnode = TreeNode(t1.val + t2.val)\\n\\t\\tnode.left = self.mergeTrees(t1.left, t2.left)\\n\\t\\tnode.right = self.mergeTrees(t1.right, t2.right)\\n\\t\\treturn node\\n\\treturn t1 or t2\\n```",
                "solutionTags": [],
                "code": "```\\ndef mergeTrees(self, t1, t2):\\n\\tif t1 and t2:\\n\\t\\tnode = TreeNode(t1.val + t2.val)\\n\\t\\tnode.left = self.mergeTrees(t1.left, t2.left)\\n\\t\\tnode.right = self.mergeTrees(t1.right, t2.right)\\n\\t\\treturn node\\n\\treturn t1 or t2\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 492357,
                "title": "golang-solution",
                "content": "```go\\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\\n    // if one of t1 and t2 is nil, return the other\\n    if t1 == nil {\\n        return t2\\n    }\\n    if t2 == nil {\\n        return t1\\n    }\\n    // merge t1 and t2\\n    root := &TreeNode{Val: t1.Val + t2.Val}\\n    // recursion\\n    root.Left = mergeTrees(t1.Left, t2.Left)\\n    root.Right = mergeTrees(t1.Right, t2.Right)\\n    return root\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\\n    // if one of t1 and t2 is nil, return the other\\n    if t1 == nil {\\n        return t2\\n    }\\n    if t2 == nil {\\n        return t1\\n    }\\n    // merge t1 and t2\\n    root := &TreeNode{Val: t1.Val + t2.Val}\\n    // recursion\\n    root.Left = mergeTrees(t1.Left, t2.Left)\\n    root.Right = mergeTrees(t1.Right, t2.Right)\\n    return root\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1923668,
                "title": "c-iterative-bfs-easy-to-read-comments-added",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1 && !root2) return NULL;\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        queue<pair<TreeNode*, TreeNode*>>q;\\n        q.push({root1, root2});\\n        while(!q.empty()){\\n            auto node = q.front();\\n            q.pop();\\n            // (1) we add the value of the second tree\\'s node to the first node\\n            node.first->val+=node.second->val;\\n            \\n            //if both their leftnodes exist we push them back into the queue and repeat (1)\\n            if(node.first->left && node.second->left)\\n                q.push({node.first->left,node.second->left});\\n            //if only one node exists then we make both the nodes as the same one\\n            // like if the second tree\\'s left node exists then we make the first tree\\'s node left as well\\n            else if (node.second->left)\\n                node.first->left=node.second->left;\\n            \\n            //if both their rightnodes exist we push them back into the queue and repeat (1)\\n            if(node.first->right && node.second->right)\\n                q.push({node.first->right, node.second->right});\\n            //if only one node exists then we make both the nodes as the same one\\n            // like if the second tree\\'s right node exists then we make the first tree\\'s node right as well\\n            else if (node.second->right)\\n                node.first->right=node.second->right;\\n        }\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Breadth-First Search",
                    "Binary Tree",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1 && !root2) return NULL;\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        queue<pair<TreeNode*, TreeNode*>>q;\\n        q.push({root1, root2});\\n        while(!q.empty()){\\n            auto node = q.front();\\n            q.pop();\\n            // (1) we add the value of the second tree\\'s node to the first node\\n            node.first->val+=node.second->val;\\n            \\n            //if both their leftnodes exist we push them back into the queue and repeat (1)\\n            if(node.first->left && node.second->left)\\n                q.push({node.first->left,node.second->left});\\n            //if only one node exists then we make both the nodes as the same one\\n            // like if the second tree\\'s left node exists then we make the first tree\\'s node left as well\\n            else if (node.second->left)\\n                node.first->left=node.second->left;\\n            \\n            //if both their rightnodes exist we push them back into the queue and repeat (1)\\n            if(node.first->right && node.second->right)\\n                q.push({node.first->right, node.second->right});\\n            //if only one node exists then we make both the nodes as the same one\\n            // like if the second tree\\'s right node exists then we make the first tree\\'s node right as well\\n            else if (node.second->right)\\n                node.first->right=node.second->right;\\n        }\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1774743,
                "title": "c-efficient-dfs-short-easy-recursive-without-extra-space-with-comments",
                "content": "##### If you understand the approach please please upvote!!!\\uD83D\\uDC4D\\n***Thanks :)***\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        // If both nodes exist, add their values then look at the next node.\\n        if(root1!=NULL && root2!=NULL){\\n            root1->val=root1->val + root2->val;\\n            root1->left=mergeTrees(root1->left,root2->left);\\n            root1->right=mergeTrees(root1->right,root2->right);\\n        }else{//If one node doesn\\'t exist,NOT null node will be used.\\n            return root1? root1: root2;\\n        }\\n        //Return the first tree, which is now altered. No need to create a new node, which bloats memory.\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        // If both nodes exist, add their values then look at the next node.\\n        if(root1!=NULL && root2!=NULL){\\n            root1->val=root1->val + root2->val;\\n            root1->left=mergeTrees(root1->left,root2->left);\\n            root1->right=mergeTrees(root1->right,root2->right);\\n        }else{//If one node doesn\\'t exist,NOT null node will be used.\\n            return root1? root1: root2;\\n        }\\n        //Return the first tree, which is now altered. No need to create a new node, which bloats memory.\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 990385,
                "title": "using-recursion-easy-in-python-beats-86-of-python-submission",
                "content": "```\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        result_node = TreeNode()\\n        if not t1: return t2\\n        if not t2: return t1\\n\\n        result_node.data = t1.data + t2.data\\n\\n        result_node.left = self.mergeTrees(t1.left, t2.left)\\n        result_node.right = self.mergeTrees(t1.right, t2.right)\\n        return result_node\\n\\t\\t\\n\\t``` \\nplease upvote once you get it.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        result_node = TreeNode()\\n        if not t1: return t2\\n        if not t2: return t1\\n\\n        result_node.data = t1.data + t2.data\\n\\n        result_node.left = self.mergeTrees(t1.left, t2.left)\\n        result_node.right = self.mergeTrees(t1.right, t2.right)\\n        return result_node\\n\\t\\t\\n\\t```",
                "codeTag": "Python3"
            },
            {
                "id": 112395,
                "title": "bfs-solution-using-queue-explanation",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1 == null)\\n            return t2;\\n        if(t2 == null)\\n            return t1;\\n        \\n        Queue<TreeNode[] > queue = new LinkedList<>();  \\n        queue.add(new TreeNode[] {t1, t2});\\n        while(!queue.isEmpty()) {\\n            TreeNode[] nodes = queue.remove();\\n            // If right tree has a null value for a node, then we dont need to change anything in the left tree\\n            if(nodes[1] != null) {\\n                nodes[0].val += nodes[1].val; // Since the node exists in the right tree, lets add it to the left tree\\n                \\n                // If left node of 1st tree is null, then we just point to the left node of the 2nd tree\\n                if(nodes[0].left == null) {\\n                    nodes[0].left = nodes[1].left;\\n                } else {\\n                    queue.add(new TreeNode[] {nodes[0].left,nodes[1].left});\\n                }\\n                \\n                // If right node of 1st tree is null, then we just point to the right node of the 2nd tree\\n                if(nodes[0].right == null) {\\n                    nodes[0].right = nodes[1].right;\\n                } else {\\n                    queue.add(new TreeNode[] {nodes[0].right, nodes[1].right});\\n                }\\n            }\\n        }\\n        \\n        // Return t1, as we have been updating the nodes of t1 instead of creating a new tree\\n        return t1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1 == null)\\n            return t2;\\n        if(t2 == null)\\n            return t1;\\n        \\n        Queue<TreeNode[] > queue = new LinkedList<>();  \\n        queue.add(new TreeNode[] {t1, t2});\\n        while(!queue.isEmpty()) {\\n            TreeNode[] nodes = queue.remove();\\n            // If right tree has a null value for a node, then we dont need to change anything in the left tree\\n            if(nodes[1] != null) {\\n                nodes[0].val += nodes[1].val; // Since the node exists in the right tree, lets add it to the left tree\\n                \\n                // If left node of 1st tree is null, then we just point to the left node of the 2nd tree\\n                if(nodes[0].left == null) {\\n                    nodes[0].left = nodes[1].left;\\n                } else {\\n                    queue.add(new TreeNode[] {nodes[0].left,nodes[1].left});\\n                }\\n                \\n                // If right node of 1st tree is null, then we just point to the right node of the 2nd tree\\n                if(nodes[0].right == null) {\\n                    nodes[0].right = nodes[1].right;\\n                } else {\\n                    queue.add(new TreeNode[] {nodes[0].right, nodes[1].right});\\n                }\\n            }\\n        }\\n        \\n        // Return t1, as we have been updating the nodes of t1 instead of creating a new tree\\n        return t1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3491056,
                "title": "java",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n\\n        if (root2 == null) {\\n            return root1;\\n        }\\n\\n        TreeNode resultNode = new TreeNode(root1.val + root2.val);\\n        resultNode.left = mergeTrees(root1.left, root2.left);\\n        resultNode.right = mergeTrees(root1.right, root2.right);\\n        return resultNode;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n\\n        if (root2 == null) {\\n            return root1;\\n        }\\n\\n        TreeNode resultNode = new TreeNode(root1.val + root2.val);\\n        resultNode.left = mergeTrees(root1.left, root2.left);\\n        resultNode.right = mergeTrees(root1.right, root2.right);\\n        return resultNode;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1505705,
                "title": "java-only-4-line-code-recursive-solution",
                "content": "class Solution {\\n\\n    public TreeNode mergeTrees(TreeNode r1, TreeNode r2) {\\n        if (r1 == null && r2 == null) return null;\\n        else if (r1 == null) return r2;\\n        else if (r2 == null) return r1;             \\n        return new TreeNode(r1.val + r2.val, mergeTrees(r1.left, r2.left), mergeTrees(r1.right, r2.right));\\n    }\\n\\t\\n}\\n\\n**Please UpVote if you like the solution.**",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\n    public TreeNode mergeTrees(TreeNode r1, TreeNode r2) {\\n        if (r1 == null && r2 == null) return null;\\n        else if (r1 == null) return r2;\\n        else if (r2 == null) return r1;             \\n        return new TreeNode(r1.val + r2.val, mergeTrees(r1.left, r2.left), mergeTrees(r1.right, r2.right));\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 671367,
                "title": "java-recursion-and-iterative-dfs-and-bfs-with-new-nodes",
                "content": "I think it is better not to change the inputs.\\n1. recursion\\n```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null) {\\n            t1 = t2;\\n            t2 = null;\\n        }\\n        if(t1==null) return null;\\n        return new TreeNode(t1.val+(t2==null?0:t2.val), mergeTrees(t1.left,t2==null?null:t2.left), mergeTrees(t1.right,t2==null?null:t2.right));                \\n    }\\n```\\n2. Iterative dfs\\n```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null && t2==null) return null;\\n        Stack<TreeNode[]> stk = new Stack<>(); \\n        TreeNode r = new TreeNode();\\n        stk.push(new TreeNode[]{t1,t2,r}); \\n        while(!stk.empty()) {\\n            TreeNode[] t = stk.pop();\\n            if(t[0]==null) {\\n                t[0]=t[1];\\n                t[1]=null;\\n            }\\n            t[2].val = t[0].val+(t[1]==null?0:t[1].val);\\n            if(t[0].right!=null || t[1]!=null && t[1].right != null) \\n                stk.push(new TreeNode[]{t[0].right, t[1]==null?null:t[1].right, t[2].right = new TreeNode()});            \\n            if(t[0].left!=null || t[1]!=null && t[1].left != null) \\n                stk.push(new TreeNode[]{t[0].left, t[1]==null?null:t[1].left, t[2].left = new TreeNode()});            \\n        }\\n        return r;\\n    }\\n```\\n3. BFS\\n```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null && t2==null) return null;\\n        Queue<TreeNode[]> q = new LinkedList<>(); \\n        TreeNode r = new TreeNode();\\n        q.add(new TreeNode[]{t1,t2,r}); \\n        while(!q.isEmpty()) {\\n            TreeNode[] t = q.poll();\\n            if(t[0]==null) {\\n                t[0]=t[1];\\n                t[1]=null;\\n            }\\n            t[2].val = t[0].val+(t[1]==null?0:t[1].val);\\n            if(t[0].right!=null || t[1]!=null && t[1].right != null) \\n                q.add(new TreeNode[]{t[0].right, t[1]==null?null:t[1].right, t[2].right = new TreeNode()});            \\n            if(t[0].left!=null || t[1]!=null && t[1].left != null) \\n                q.add(new TreeNode[]{t[0].left, t[1]==null?null:t[1].left, t[2].left = new TreeNode()});   \\n        }\\n        return r;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null) {\\n            t1 = t2;\\n            t2 = null;\\n        }\\n        if(t1==null) return null;\\n        return new TreeNode(t1.val+(t2==null?0:t2.val), mergeTrees(t1.left,t2==null?null:t2.left), mergeTrees(t1.right,t2==null?null:t2.right));                \\n    }\\n```\n```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null && t2==null) return null;\\n        Stack<TreeNode[]> stk = new Stack<>(); \\n        TreeNode r = new TreeNode();\\n        stk.push(new TreeNode[]{t1,t2,r}); \\n        while(!stk.empty()) {\\n            TreeNode[] t = stk.pop();\\n            if(t[0]==null) {\\n                t[0]=t[1];\\n                t[1]=null;\\n            }\\n            t[2].val = t[0].val+(t[1]==null?0:t[1].val);\\n            if(t[0].right!=null || t[1]!=null && t[1].right != null) \\n                stk.push(new TreeNode[]{t[0].right, t[1]==null?null:t[1].right, t[2].right = new TreeNode()});            \\n            if(t[0].left!=null || t[1]!=null && t[1].left != null) \\n                stk.push(new TreeNode[]{t[0].left, t[1]==null?null:t[1].left, t[2].left = new TreeNode()});            \\n        }\\n        return r;\\n    }\\n```\n```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1==null && t2==null) return null;\\n        Queue<TreeNode[]> q = new LinkedList<>(); \\n        TreeNode r = new TreeNode();\\n        q.add(new TreeNode[]{t1,t2,r}); \\n        while(!q.isEmpty()) {\\n            TreeNode[] t = q.poll();\\n            if(t[0]==null) {\\n                t[0]=t[1];\\n                t[1]=null;\\n            }\\n            t[2].val = t[0].val+(t[1]==null?0:t[1].val);\\n            if(t[0].right!=null || t[1]!=null && t[1].right != null) \\n                q.add(new TreeNode[]{t[0].right, t[1]==null?null:t[1].right, t[2].right = new TreeNode()});            \\n            if(t[0].left!=null || t[1]!=null && t[1].left != null) \\n                q.add(new TreeNode[]{t[0].left, t[1]==null?null:t[1].left, t[2].left = new TreeNode()});   \\n        }\\n        return r;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 469033,
                "title": "c-fast-easy-understandable",
                "content": "```\\nRuntime: 44 ms, faster than 27.70% of C++ online submissions for Merge Two Binary Trees.\\nMemory Usage: 13.4 MB, less than 100.00% of C++ online submissions for Merge Two Binary Trees.\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        TreeNode* newRoot = t1;\\n\\n        if(t1 == NULL) return t2;\\n        if(t2 == NULL) return t1;\\n        \\n        newRoot->val += t2->val;\\n        \\n        newRoot->left = mergeTrees(t1->left, t2->left);\\n        newRoot->right = mergeTrees(t1->right, t2->right);\\n        \\n        return newRoot;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nRuntime: 44 ms, faster than 27.70% of C++ online submissions for Merge Two Binary Trees.\\nMemory Usage: 13.4 MB, less than 100.00% of C++ online submissions for Merge Two Binary Trees.\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        TreeNode* newRoot = t1;\\n\\n        if(t1 == NULL) return t2;\\n        if(t2 == NULL) return t1;\\n        \\n        newRoot->val += t2->val;\\n        \\n        newRoot->left = mergeTrees(t1->left, t2->left);\\n        newRoot->right = mergeTrees(t1->right, t2->right);\\n        \\n        return newRoot;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 348889,
                "title": "nice-and-short-c-solution",
                "content": "Really small recursive CPP solution below. Very intuitive application of recursion, you handle base cases, then you create the node and merge values from t1/t2 and later you do the same for left and right sub-tree recursively. Easy and beautiful.\\n\\n```\\nTreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n\\t// Handle the base case\\n\\tif(t1 == nullptr) return t2;\\n\\tif(t2 == nullptr) return t1;\\n\\t// Create merged node and merge left and right as well\\n\\tTreeNode* t = new TreeNode(t1->val + t2->val);\\n\\tt->left     = mergeTrees(t1->left, t2->left);\\n\\tt->right    = mergeTrees(t1->right, t2->right);\\n\\t// All done\\n\\treturn t;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nTreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n\\t// Handle the base case\\n\\tif(t1 == nullptr) return t2;\\n\\tif(t2 == nullptr) return t1;\\n\\t// Create merged node and merge left and right as well\\n\\tTreeNode* t = new TreeNode(t1->val + t2->val);\\n\\tt->left     = mergeTrees(t1->left, t2->left);\\n\\tt->right    = mergeTrees(t1->right, t2->right);\\n\\t// All done\\n\\treturn t;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104399,
                "title": "5-lines-elegant-solution",
                "content": "```\\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1 == null || t2 == null) return t1 == null ? t2:t1;\\n        t1.val += t2.val;\\n        t1.left = MergeTrees(t1.left, t2.left);\\n        t1.right = MergeTrees(t1.right, t2.right);\\n        return t1;\\n    }",
                "solutionTags": [],
                "code": "```\\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\\n        if(t1 == null || t2 == null) return t1 == null ? t2:t1;\\n        t1.val += t2.val;\\n        t1.left = MergeTrees(t1.left, t2.left);\\n        t1.right = MergeTrees(t1.right, t2.right);\\n        return t1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 104369,
                "title": "simple-java-recursive-solution-o-n",
                "content": "\\n```\\npublic class Solution {\\n    public TreeNode merge(TreeNode t1, TreeNode t2) {\\n        if(t1 == null && t2 == null) {\\n            return null;\\n        }\\n        \\n        TreeNode newNode = new TreeNode(-1);\\n        if(t1 == null) {\\n            newNode.val = t2.val;\\n            newNode.left = merge(null, t2.left);\\n            newNode.right = merge(null, t2.right);\\n        }\\n        else if(t2 == null) {\\n            newNode.val = t1.val;\\n            newNode.left = merge(t1.left, null);\\n            newNode.right = merge(t1.right, null);\\n        }\\n        else {\\n            newNode.val = t1.val + t2.val;\\n            newNode.left = merge(t1.left, t2.left);\\n            newNode.right = merge(t1.right, t2.right);\\n        }\\n        \\n        return newNode;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Tree"
                ],
                "code": "```\\npublic class Solution {\\n    public TreeNode merge(TreeNode t1, TreeNode t2) {\\n        if(t1 == null && t2 == null) {\\n            return null;\\n        }\\n        \\n        TreeNode newNode = new TreeNode(-1);\\n        if(t1 == null) {\\n            newNode.val = t2.val;\\n            newNode.left = merge(null, t2.left);\\n            newNode.right = merge(null, t2.right);\\n        }\\n        else if(t2 == null) {\\n            newNode.val = t1.val;\\n            newNode.left = merge(t1.left, null);\\n            newNode.right = merge(t1.right, null);\\n        }\\n        else {\\n            newNode.val = t1.val + t2.val;\\n            newNode.left = merge(t1.left, t2.left);\\n            newNode.right = merge(t1.right, t2.right);\\n        }\\n        \\n        return newNode;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3213072,
                "title": "java-easy-0ms-100-simple-dfs",
                "content": "# Code\\n```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1==null && root2==null) return null;\\n        if (root1==null) return root2;\\n        if (root2==null) return root1;\\n        root1.val = root1.val+root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1==null && root2==null) return null;\\n        if (root1==null) return root2;\\n        if (root2==null) return root1;\\n        root1.val = root1.val+root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3054830,
                "title": "0ms-easy-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n         return merge(root1,root2);\\n    }\\n    public TreeNode merge(TreeNode t1,TreeNode t2){\\n        if(t1==null && t2==null){\\n            return null;\\n        }\\n        if(t1==null && t2!=null){\\n            return t2;\\n        }\\n        else if(t1!=null && t2==null){\\n            return t1;\\n        }\\n        TreeNode sum=new TreeNode(t1.val+t2.val);\\n        sum.left=merge(t1.left,t2.left);\\n        sum.right=merge(t1.right,t2.right);\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n         return merge(root1,root2);\\n    }\\n    public TreeNode merge(TreeNode t1,TreeNode t2){\\n        if(t1==null && t2==null){\\n            return null;\\n        }\\n        if(t1==null && t2!=null){\\n            return t2;\\n        }\\n        else if(t1!=null && t2==null){\\n            return t1;\\n        }\\n        TreeNode sum=new TreeNode(t1.val+t2.val);\\n        sum.left=merge(t1.left,t2.left);\\n        sum.right=merge(t1.right,t2.right);\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2572845,
                "title": "c-recursive-solution",
                "content": "This solution uses a recursive approach. \\n\\nThe merging rules are: \\n1. If 2 nodes overlap - sum up their values, and place it in the new node. \\n2. If they do not, then the NON null node takes the place. \\n\\nAs per these rules: \\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        \\n        // If one of the nodes doesn\\'t exist - return the other one\\n        if(!root1){return root2;}\\n        \\n        if(!root2){return root1;}\\n    \\n      \\n        // Otherwise, add their values\\n        root1->val += root2->val;\\n        \\n        // Assign the value of the children as the result of the recursive call on the \\n        // children of the root\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        \\n        // return the root \\n        return root1;\\n    }\\n};\\n```\\nThe function returns the node which is present (in case one of them isn\\'t), or, in the case that both are present, it adds up their values. It is then called on the children recursively, which means it\\'s called on every node in the tree - always returning the root and slowly but surely populating the output array. \\n\\n*Time -- O(n)\\nSpace -- O(n)*\\n\\nUpvote if you found this helpful \\n\\nCheers",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        \\n        // If one of the nodes doesn\\'t exist - return the other one\\n        if(!root1){return root2;}\\n        \\n        if(!root2){return root1;}\\n    \\n      \\n        // Otherwise, add their values\\n        root1->val += root2->val;\\n        \\n        // Assign the value of the children as the result of the recursive call on the \\n        // children of the root\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        \\n        // return the root \\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2218180,
                "title": "c-recursion-easy-explained-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n\\t//If any node is NULL then attach the other root node there, for eample if right of root1 is null then attach root2 right to root1 right\\n        if(!root2) return root1; \\n        if(!root1) return root2;\\n        \\n        root1->left = mergeTrees(root1->left, root2->left); //Merge left nodes\\n        root1->right = mergeTrees(root1->right, root2->right); //Merge right nodes\\n        \\n        root1 ->val = root1->val + root2->val; //Finally add both the values and return root1 because we have modified root1\\n        return root1;\\n    }\\n};\\n```\\n\\u200E\\nIf you think this post was ***helpful***, I will be happy if you give a ***upvote***. Any questions or discussions are welcome! **Thanks a lot.** \\uD83D\\uDE04",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n\\t//If any node is NULL then attach the other root node there, for eample if right of root1 is null then attach root2 right to root1 right\\n        if(!root2) return root1; \\n        if(!root1) return root2;\\n        \\n        root1->left = mergeTrees(root1->left, root2->left); //Merge left nodes\\n        root1->right = mergeTrees(root1->right, root2->right); //Merge right nodes\\n        \\n        root1 ->val = root1->val + root2->val; //Finally add both the values and return root1 because we have modified root1\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1978746,
                "title": "easy-to-understand-code-for-beginners",
                "content": "class Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL and t2 ==NULL)\\n            return NULL;\\n        else if(t1==NULL and t2!=NULL)\\n            return t2;\\n        else if(t1!=NULL and t2==NULL)\\n            return t1;\\n        else \\n        {\\n            TreeNode *root = new TreeNode(t1->val+t2->val);\\n            root->left=mergeTrees(t1->left,t2->left);\\n            root->right=mergeTrees(t1->right,t2->right);\\n            return root;\\n        }\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL and t2 ==NULL)\\n            return NULL;\\n        else if(t1==NULL and t2!=NULL)\\n            return t2;\\n        else if(t1!=NULL and t2==NULL)\\n            return t1;\\n        else \\n        {\\n            TreeNode *root = new TreeNode(t1->val+t2->val);\\n            root->left=mergeTrees(t1->left,t2->left);\\n            root->right=mergeTrees(t1->right,t2->right);\\n            return root;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1631802,
                "title": "6-lines-easy-c",
                "content": "```\\nTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n```",
                "solutionTags": [
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\nTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1491883,
                "title": "99-41-in-runtime-and-92-01-in-memory",
                "content": "![image](https://assets.leetcode.com/users/images/e1e06a9d-9c33-43db-920c-a568d78c6248_1632851529.775284.png)\\n\\nclass Solution:\\n\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n      if root1 and root2:\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n      return root1 or root2\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/e1e06a9d-9c33-43db-920c-a568d78c6248_1632851529.775284.png)\\n\\nclass Solution:\\n\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n      if root1 and root2:\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n      return root1 or root2\\n",
                "codeTag": "Java"
            },
            {
                "id": 443033,
                "title": "617-merge-two-binary-trees-py-all-in-one-by-talse",
                "content": "**Get it Done, Make it Better, Share the Best -- Talse**\\n**I). Recursion**\\n| O(T): O(n) | O(S): O(h) | Rt: 64ms | \\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 and not t2: return \\n        elif t1 and t2: \\n            t1.val += t2.val\\n            t1.left = self.mergeTrees(t1.left, t2.left)\\n            t1.right = self.mergeTrees(t1.right, t2.right)\\n        elif not t1 and t2: \\n            t1 = t2\\n        return t1\\n```\\nAlternative: conciser version. | Rt: 76ms |\\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```\\n\\n\\n**II). Iteration**\\n| O(T): O(n) | O(S): O(n) | Rt: 76ms | \\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        s = [(t1, t2)]\\n        while s: \\n            n1, n2 = s.pop()\\n            #nothing to add on\\n            if not n2: continue\\n            n1.val += n2.val\\n            #base initialization, critical to check n2\\'s corresponding child\\n            if not n1.left and n2.left: n1.left = TreeNode(0)\\n            if not n1.right and n2.right: n1.right = TreeNode(0)\\n            #stack pairs, level by level add up\\n            s.append((n1.right, n2.right))\\n            s.append((n1.left, n2.left))\\n        return t1\\n```\\nComment: three things I learn from this solution: n2-oriented thinking pattern, the goal is to add n2 to n1. Therefore, we adjust n1 according to n2. When to start, When to stop, When we need initialization, all decided by n2. Second, complete the n1 to make edge case normal. Third, it is critical to make sure n1 is not empty in the first round and maintein this property in the process. \\nAlternative: | Rt: 72ms |\\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        s = [(t1, t2)]\\n        while s: \\n            n1, n2 = s.pop()\\n            #nothing to add on\\n            if not n2: continue\\n            n1.val += n2.val\\n            if not n1.right: n1.right = n2.right\\n            else: s.append((n1.right, n2.right))\\n            if not n1.left: n1.left = n2.left\\n            else: s.append((n1.left, n2.left))\\n        return t1\\n```\\n",
                "solutionTags": [],
                "code": "```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 and not t2: return \\n        elif t1 and t2: \\n            t1.val += t2.val\\n            t1.left = self.mergeTrees(t1.left, t2.left)\\n            t1.right = self.mergeTrees(t1.right, t2.right)\\n        elif not t1 and t2: \\n            t1 = t2\\n        return t1\\n```\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        s = [(t1, t2)]\\n        while s: \\n            n1, n2 = s.pop()\\n            #nothing to add on\\n            if not n2: continue\\n            n1.val += n2.val\\n            #base initialization, critical to check n2\\'s corresponding child\\n            if not n1.left and n2.left: n1.left = TreeNode(0)\\n            if not n1.right and n2.right: n1.right = TreeNode(0)\\n            #stack pairs, level by level add up\\n            s.append((n1.right, n2.right))\\n            s.append((n1.left, n2.left))\\n        return t1\\n```\n```python\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2: return t1 or t2\\n        s = [(t1, t2)]\\n        while s: \\n            n1, n2 = s.pop()\\n            #nothing to add on\\n            if not n2: continue\\n            n1.val += n2.val\\n            if not n1.right: n1.right = n2.right\\n            else: s.append((n1.right, n2.right))\\n            if not n1.left: n1.left = n2.left\\n            else: s.append((n1.left, n2.left))\\n        return t1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 137646,
                "title": "java-iterative-dfs-approach",
                "content": "```\\nclass Solution {\\n    // idea is to use DFS iterative traverse to update t1 to be the merged tree\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        Stack<TreeNode[]> stack = new Stack();\\n        stack.push(new TreeNode[] {t1, t2}); // any node pair in stack much be both non-null     \\n        while (!stack.isEmpty()) {\\n            TreeNode[] t = stack.pop();\\n            t[0].val += t[1].val;\\n            // case 1: tree1 subtree null:                            put tree2 subtree to tree1, return\\n            // case 2: tree1 subtree not null, tree2 subtree null     do nothing, return\\n            // case 3: tree1 subtree not null, tree2 subtreenot null: put to stack\\n            /////// deal with left tree\\n            if (t[0].left == null) {\\n                t[0].left = t[1].left;\\n            } else if (t[1].left != null) {\\n                stack.push(new TreeNode[] {t[0].left, t[1].left});\\n            }\\n            ////// deal with right tree\\n            if (t[0].right == null) {\\n                t[0].right = t[1].right;\\n            } else if (t[1].right != null) {\\n                stack.push(new TreeNode[] {t[0].right, t[1].right});\\n            }\\n        }\\n        return t1; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    // idea is to use DFS iterative traverse to update t1 to be the merged tree\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        Stack<TreeNode[]> stack = new Stack();\\n        stack.push(new TreeNode[] {t1, t2}); // any node pair in stack much be both non-null     \\n        while (!stack.isEmpty()) {\\n            TreeNode[] t = stack.pop();\\n            t[0].val += t[1].val;\\n            // case 1: tree1 subtree null:                            put tree2 subtree to tree1, return\\n            // case 2: tree1 subtree not null, tree2 subtree null     do nothing, return\\n            // case 3: tree1 subtree not null, tree2 subtreenot null: put to stack\\n            /////// deal with left tree\\n            if (t[0].left == null) {\\n                t[0].left = t[1].left;\\n            } else if (t[1].left != null) {\\n                stack.push(new TreeNode[] {t[0].left, t[1].left});\\n            }\\n            ////// deal with right tree\\n            if (t[0].right == null) {\\n                t[0].right = t[1].right;\\n            } else if (t[1].right != null) {\\n                stack.push(new TreeNode[] {t[0].right, t[1].right});\\n            }\\n        }\\n        return t1; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104326,
                "title": "simple-javascript-solution",
                "content": "```\\n/**\\n * @param {TreeNode} t1\\n * @param {TreeNode} t2\\n * @return {TreeNode}\\n */\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) {\\n        return null;\\n    }\\n    \\n    if (!t1 || !t2) {\\n        return t1 || t2;\\n    }\\n    \\n    var root = new TreeNode(t1.val + t2.val);\\n    \\n    root.left = mergeTrees(t1.left, t2.left);\\n    root.right = mergeTrees(t1.right, t2.right);\\n    \\n    return root;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {TreeNode} t1\\n * @param {TreeNode} t2\\n * @return {TreeNode}\\n */\\nvar mergeTrees = function(t1, t2) {\\n    if (!t1 && !t2) {\\n        return null;\\n    }\\n    \\n    if (!t1 || !t2) {\\n        return t1 || t2;\\n    }\\n    \\n    var root = new TreeNode(t1.val + t2.val);\\n    \\n    root.left = mergeTrees(t1.left, t2.left);\\n    root.right = mergeTrees(t1.right, t2.right);\\n    \\n    return root;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104374,
                "title": "simple-and-clean-7-lines-in-go",
                "content": "```\\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\\n    if t1 == nil {\\n        return t2\\n    }\\n    if t2 == nil {\\n        return t1\\n    }\\n    \\n    return &TreeNode{t1.Val+t2.Val, mergeTrees(t1.Left, t2.Left), mergeTrees(t1.Right, t2.Right)}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc mergeTrees(t1 *TreeNode, t2 *TreeNode) *TreeNode {\\n    if t1 == nil {\\n        return t2\\n    }\\n    if t2 == nil {\\n        return t1\\n    }\\n    \\n    return &TreeNode{t1.Val+t2.Val, mergeTrees(t1.Left, t2.Left), mergeTrees(t1.Right, t2.Right)}\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3479171,
                "title": "easy-c-solution-using-recursion",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2)\\n    {\\n        if(root1 == NULL)\\n        {\\n            return root2;\\n        }\\n        if(root2 == NULL )\\n        {\\n            return root1;\\n        } \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Search Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2)\\n    {\\n        if(root1 == NULL)\\n        {\\n            return root2;\\n        }\\n        if(root2 == NULL )\\n        {\\n            return root1;\\n        } \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3428329,
                "title": "0ms-short-and-simple-code",
                "content": "***UPVOTE PLZZ***\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1==NULL)\\n          return root2;\\n        if(root2==NULL)\\n          return root1;\\n\\n        root1->val+=root2->val;\\n        root1->left = mergeTrees(root1->left ,root2->left);\\n        root1->right = mergeTrees(root1->right ,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Breadth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1==NULL)\\n          return root2;\\n        if(root2==NULL)\\n          return root1;\\n\\n        root1->val+=root2->val;\\n        root1->left = mergeTrees(root1->left ,root2->left);\\n        root1->right = mergeTrees(root1->right ,root2->right);\\n        \\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3400517,
                "title": "java-merge-trees",
                "content": "\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null && root2 == null) return null;\\n        TreeNode node = new TreeNode();\\n        if (root1 != null) node.val += root1.val;\\n        if (root2 != null) node.val += root2.val;\\n        node.left = mergeTrees(root1 != null ? root1.left : null, root2 != null ? root2.left : null);\\n        node.right = mergeTrees(root1 != null ? root1.right : null,root2 != null ? root2.right : null);\\n        return node;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null && root2 == null) return null;\\n        TreeNode node = new TreeNode();\\n        if (root1 != null) node.val += root1.val;\\n        if (root2 != null) node.val += root2.val;\\n        node.left = mergeTrees(root1 != null ? root1.left : null, root2 != null ? root2.left : null);\\n        node.right = mergeTrees(root1 != null ? root1.right : null,root2 != null ? root2.right : null);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380987,
                "title": "easy-solution-5-line-code-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhere i have used concept of Bst\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n \\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n       if(root1==null && root2==null) return null;\\n       if(root1==null) return root2;\\n       if(root2==null) return root1;\\n       root1.val+=root2.val;\\n       root1.left= mergeTrees(root1.left,root2.left);\\n       root1.right= mergeTrees(root1.right,root2.right);\\n       return root1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n \\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n       if(root1==null && root2==null) return null;\\n       if(root1==null) return root2;\\n       if(root2==null) return root1;\\n       root1.val+=root2.val;\\n       root1.left= mergeTrees(root1.left,root2.left);\\n       root1.right= mergeTrees(root1.right,root2.right);\\n       return root1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987855,
                "title": "c-dfs-pre-order-intuitive-clean-code",
                "content": "![image](https://assets.leetcode.com/users/images/a66244fe-56c1-44a5-8f4d-db3feb304e56_1672679698.3288825.png)\\n\\n**n==Number of Node which are common inn both the Trees\\nT->O(n) && S->O(Height of tree common in both)**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvoid merge(TreeNode* curr1,TreeNode* curr2,TreeNode* prev1,char d){\\n\\t\\t//         Base Case\\n\\t\\t\\t\\tif(!curr1 && !curr2) return;\\n\\t\\t\\t\\telse if(curr1 && curr2) curr1->val+=curr2->val;\\n\\t\\t\\t\\telse if(curr2){\\n\\t\\t\\t\\t\\tif(d == \\'l\\') prev1->left = curr2;\\n\\t\\t\\t\\t\\telse prev1->right = curr2;\\n\\t\\t\\t\\t\\treturn ;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse return;\\n\\t\\t\\t\\tmerge(curr1->left,curr2->left,curr1,\\'l\\');\\n\\t\\t\\t\\tmerge(curr1->right,curr2->right,curr1,\\'r\\');\\n\\t\\t\\t}\\n\\n\\t\\t\\tTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n\\t\\t\\t\\tif(!root1) return root2;\\n\\t\\t\\t\\telse if(!root2) return root1;\\n\\t\\t\\t\\tmerge(root1,root2,NULL,\\'0\\');\\n\\t\\t\\t\\treturn root1;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvoid merge(TreeNode* curr1,TreeNode* curr2,TreeNode* prev1,char d){\\n\\t\\t//         Base Case\\n\\t\\t\\t\\tif(!curr1 && !curr2) return;\\n\\t\\t\\t\\telse if(curr1 && curr2) curr1->val+=curr2->val;\\n\\t\\t\\t\\telse if(curr2){\\n\\t\\t\\t\\t\\tif(d == \\'l\\') prev1->left = curr2;\\n\\t\\t\\t\\t\\telse prev1->right = curr2;\\n\\t\\t\\t\\t\\treturn ;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1860049,
                "title": "4-approaches-recursion-iteration-bfs-and-dfs",
                "content": "[Leetcode](https://leetcode.com/) [617. Merge Two Binary Trees](https://leetcode.com/problems/merge-two-binary-trees).\\n\\n***By Frank Luo***\\n\\nHere are **4** approaches to solve this problem in Java: **Recursion**, Iteration, BFS and DFS.\\n\\n# Recursion\\n\\n## Method 1: New Tree\\n\\nWe can create a new **Tree**, each $\\\\texttt{TreeNode}$ value is sum of two nodes.\\n\\n```java\\n    public static TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        if (root2 == null) {\\n            return root1;\\n        }\\n        TreeNode merged = new TreeNode(root1.val + root2.val);\\n        merged.left = mergeTrees(root1.left, root2.left);\\n        merged.right = mergeTrees(root1.right, root2.right);\\n        return merged;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(min(m, n))$\\n- **Space Complexity**: $O(min(m, n))$\\n\\n## Method 2\\n\\nTraverse both the given trees in a **PreOrder** style. \\n\\nAt every step, check if the current node exists for both the trees. If one of these children happens to be null, we return the child of the other tree to be added as a child subtree to the calling parent node in the first tree.\\n\\nWe can add the values in the current nodes of both the trees and update the value in the current node of the first tree to reflect this sum obtained. \\n\\nThen we call the $\\\\texttt{mergeTrees()}$ with the left children and then with the right children of the current nodes of the two trees. \\n\\nAt the end, the first tree will represent the required resultant merged binary tree.\\n\\n```java\\n    public static TreeNode mergeTrees_rec(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        if (root2 == null) {\\n            return root1;\\n        }\\n\\n        if (root1 != null) {\\n            root1.val += root2.val;\\n            root1.left = mergeTrees_rec(root1.left, root2.left);\\n            root1.right = mergeTrees_rec(root1.right, root2.right);\\n        }\\n\\n        return root1;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(min(m, n))$\\n- **Space Complexity**: $O(min(m, n))$\\n\\n# Iteration\\n\\nWe can also traverse the two trees by make use of a **stack** to do so. \\n\\nEach entry in the **Stack** strores data in the form $[\\\\textit{node}_{tree1}, \\\\textit{node}_{tree2}]$. \\n\\n1. We push the root nodes of both the trees onto the stack. \\n2. At every step, we remove a node pair from the top of the stack. \\n3. For every node pair removed, we add the values corresponding to the two nodes and update the value of the corresponding node in the first tree.\\n4. If $root1.left != null && root2.left != null$, we push the left child(pair) of both the trees onto the stack. \\n5. If $root1.left == null$, we append the left child(subtree) of the second tree to the current node of the first tree. We do the same for the right child pair as well.\\n6. If, at any step, both the current nodes are null, we continue with popping the next nodes from the stack.\\n\\n```java\\n    public TreeNode mergeTrees_iter(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\n        Deque<TreeNode[]> stack = new ArrayDeque<>();\\n        stack.push(new TreeNode[]{root1, root2});\\n        while (!stack.isEmpty()) {\\n            TreeNode[] currNodes = stack.pop();\\n            if (currNodes[0] == null || currNodes[1] == null) {\\n                continue;\\n            }\\n\\n            currNodes[0].val += currNodes[1].val;\\n            if (currNodes[0].left == null) {\\n                currNodes[0].left = currNodes[1].left;\\n            } else {\\n                stack.push(new TreeNode[]{currNodes[0].left, currNodes[1].left});\\n            }\\n\\n            if (currNodes[0].right == null) {\\n                currNodes[0].right = currNodes[1].right;\\n            } else {\\n                stack.push(new TreeNode[]{currNodes[0].right, currNodes[1].right});\\n            }\\n        }\\n\\n        return root1;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(min(m, n))$\\n- **Space Complexity**: $O(min(m, n))$\\n\\n\\n# BFS\\n\\nBFS is like the **Iteration** method, it create a new **Tree**.\\n\\n```java\\n    public static TreeNode mergeTrees_bfs(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\t\\t\\n        TreeNode merged = new TreeNode(root1.val + root2.val);\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        Queue<TreeNode> queue1 = new LinkedList<>();\\n        Queue<TreeNode> queue2 = new LinkedList<>();\\n        queue.offer(merged);\\n        queue1.offer(root1);\\n        queue2.offer(root2);\\n        while (!queue1.isEmpty() && !queue2.isEmpty()) {\\n            TreeNode node = queue.poll();\\n            TreeNode node1 = queue1.poll();\\n            TreeNode node2 = queue2.poll();\\n            if (node1.left != null || node2.left != null) {\\n                if (node1.left != null && node2.left != null) {\\n                    TreeNode leftNode = new TreeNode(node1.left.val + node2.left.val);\\n                    node.left = leftNode;\\n                    queue.offer(leftNode);\\n                    queue1.offer(node1.left);\\n                    queue2.offer(node2.left);\\n                } else if (node1.left != null) {\\n                    node.left = node1.left;\\n                } else if (node2.left != null) {\\n                    node.left = node2.left;\\n                }\\n            }\\n\\n            if (node1.right != null || node2.right != null) {\\n                if (node1.right != null && node2.right != null) {\\n                    TreeNode rightNode = new TreeNode(node1.right.val + node2.right.val);\\n                    node.right = rightNode;\\n                    queue.offer(rightNode);\\n                    queue1.offer(node1.right);\\n                    queue2.offer(node2.right);\\n                } else if (node1.right != null) {\\n                    node.right = node1.right;\\n                } else if (node2.right != null) {\\n                    node.right = node2.right;\\n                }\\n            }\\n        }\\n\\n        return merged;\\n    }\\n```\\n\\nThe BFS code is not neat, I have refactor it.\\n\\n```java\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\n        Queue<TreeNode[]> queue = new LinkedList<>();\\n        queue.offer(new TreeNode[]{root1, root2});\\n        while (!queue.isEmpty()) {\\n            TreeNode[] node = queue.poll();\\n            node[0].val += node[1].val;\\n\\n            if (node[0].left != null || node[1].left != null) {\\n                if (node[0].left != null && node[1].left != null) {\\n                    queue.offer(new TreeNode[]{node[0].left, node[1].left});\\n                } else if (node[0].left == null) {\\n                    node[0].left = node[1].left;\\n                }\\n            }\\n\\n            if (node[0].right != null || node[1].right != null) {\\n                if (node[0].right != null && node[1].right != null) {\\n                    queue.offer(new TreeNode[]{node[0].right, node[1].right});\\n                } else if (node[0].right == null) {\\n                    node[0].right = node[1].right;\\n                }\\n            }\\n        }\\n\\n        return root1;\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(min(m, n))$\\n- **Space Complexity**: $O(min(m, n))$\\n\\n# DFS\\n\\nDFS is the same as the recursion method, just a little bit difference.\\n\\n```java\\n    public static TreeNode mergeTrees_dfs(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        dfs(root1, root2);\\n        return root1;\\n    }\\n\\n    public static void dfs(TreeNode root1, TreeNode root2) {\\n        if (root1 != null && root2 != null) {\\n            if (root1 != root2) {\\n                root1.val += root2.val;\\n            }\\n\\n            if (root1.left == null) {\\n                root1.left = root2.left;\\n            }\\n            if (root1.right == null) {\\n                root1.right = root2.right;\\n            }\\n            dfs(root1.left, root2.left);\\n            dfs(root1.right, root2.right);\\n        }\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(min(m, n))$\\n- **Space Complexity**: $O(min(m, n))$\\n\\n--------------------------\\n\\nAll suggestions are welcome. \\nIf you have any query or suggestion please comment below.\\nPlease upvote\\uD83D\\uDC4D if you like\\uD83D\\uDC97 it. Thank you:-)\\n\\nExplore More [Leetcode Solutions](https://leetcode.com/discuss/general-discussion/1868912/My-Leetcode-Solutions-All-In-One). \\uD83D\\uDE09\\uD83D\\uDE03\\uD83D\\uDC97\\n",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Breadth-First Search",
                    "Recursion"
                ],
                "code": "```java\\n    public static TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        if (root2 == null) {\\n            return root1;\\n        }\\n        TreeNode merged = new TreeNode(root1.val + root2.val);\\n        merged.left = mergeTrees(root1.left, root2.left);\\n        merged.right = mergeTrees(root1.right, root2.right);\\n        return merged;\\n    }\\n```\n```java\\n    public static TreeNode mergeTrees_rec(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        if (root2 == null) {\\n            return root1;\\n        }\\n\\n        if (root1 != null) {\\n            root1.val += root2.val;\\n            root1.left = mergeTrees_rec(root1.left, root2.left);\\n            root1.right = mergeTrees_rec(root1.right, root2.right);\\n        }\\n\\n        return root1;\\n    }\\n```\n```java\\n    public TreeNode mergeTrees_iter(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\n        Deque<TreeNode[]> stack = new ArrayDeque<>();\\n        stack.push(new TreeNode[]{root1, root2});\\n        while (!stack.isEmpty()) {\\n            TreeNode[] currNodes = stack.pop();\\n            if (currNodes[0] == null || currNodes[1] == null) {\\n                continue;\\n            }\\n\\n            currNodes[0].val += currNodes[1].val;\\n            if (currNodes[0].left == null) {\\n                currNodes[0].left = currNodes[1].left;\\n            } else {\\n                stack.push(new TreeNode[]{currNodes[0].left, currNodes[1].left});\\n            }\\n\\n            if (currNodes[0].right == null) {\\n                currNodes[0].right = currNodes[1].right;\\n            } else {\\n                stack.push(new TreeNode[]{currNodes[0].right, currNodes[1].right});\\n            }\\n        }\\n\\n        return root1;\\n    }\\n```\n```java\\n    public static TreeNode mergeTrees_bfs(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\t\\t\\n        TreeNode merged = new TreeNode(root1.val + root2.val);\\n        Queue<TreeNode> queue = new LinkedList<>();\\n        Queue<TreeNode> queue1 = new LinkedList<>();\\n        Queue<TreeNode> queue2 = new LinkedList<>();\\n        queue.offer(merged);\\n        queue1.offer(root1);\\n        queue2.offer(root2);\\n        while (!queue1.isEmpty() && !queue2.isEmpty()) {\\n            TreeNode node = queue.poll();\\n            TreeNode node1 = queue1.poll();\\n            TreeNode node2 = queue2.poll();\\n            if (node1.left != null || node2.left != null) {\\n                if (node1.left != null && node2.left != null) {\\n                    TreeNode leftNode = new TreeNode(node1.left.val + node2.left.val);\\n                    node.left = leftNode;\\n                    queue.offer(leftNode);\\n                    queue1.offer(node1.left);\\n                    queue2.offer(node2.left);\\n                } else if (node1.left != null) {\\n                    node.left = node1.left;\\n                } else if (node2.left != null) {\\n                    node.left = node2.left;\\n                }\\n            }\\n\\n            if (node1.right != null || node2.right != null) {\\n                if (node1.right != null && node2.right != null) {\\n                    TreeNode rightNode = new TreeNode(node1.right.val + node2.right.val);\\n                    node.right = rightNode;\\n                    queue.offer(rightNode);\\n                    queue1.offer(node1.right);\\n                    queue2.offer(node2.right);\\n                } else if (node1.right != null) {\\n                    node.right = node1.right;\\n                } else if (node2.right != null) {\\n                    node.right = node2.right;\\n                }\\n            }\\n        }\\n\\n        return merged;\\n    }\\n```\n```java\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        } else if (root2 == null) {\\n            return root1;\\n        }\\n\\n        Queue<TreeNode[]> queue = new LinkedList<>();\\n        queue.offer(new TreeNode[]{root1, root2});\\n        while (!queue.isEmpty()) {\\n            TreeNode[] node = queue.poll();\\n            node[0].val += node[1].val;\\n\\n            if (node[0].left != null || node[1].left != null) {\\n                if (node[0].left != null && node[1].left != null) {\\n                    queue.offer(new TreeNode[]{node[0].left, node[1].left});\\n                } else if (node[0].left == null) {\\n                    node[0].left = node[1].left;\\n                }\\n            }\\n\\n            if (node[0].right != null || node[1].right != null) {\\n                if (node[0].right != null && node[1].right != null) {\\n                    queue.offer(new TreeNode[]{node[0].right, node[1].right});\\n                } else if (node[0].right == null) {\\n                    node[0].right = node[1].right;\\n                }\\n            }\\n        }\\n\\n        return root1;\\n    }\\n```\n```java\\n    public static TreeNode mergeTrees_dfs(TreeNode root1, TreeNode root2) {\\n        if (root1 == null) {\\n            return root2;\\n        }\\n        dfs(root1, root2);\\n        return root1;\\n    }\\n\\n    public static void dfs(TreeNode root1, TreeNode root2) {\\n        if (root1 != null && root2 != null) {\\n            if (root1 != root2) {\\n                root1.val += root2.val;\\n            }\\n\\n            if (root1.left == null) {\\n                root1.left = root2.left;\\n            }\\n            if (root1.right == null) {\\n                root1.right = root2.right;\\n            }\\n            dfs(root1.left, root2.left);\\n            dfs(root1.right, root2.right);\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1771568,
                "title": "simple-c-4-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n\\n   TreeNode* mergeTrees(TreeNode* node1,TreeNode* node2)\\n    {         \\n        if(node1==NULL)return node2;       \\n        else if(node2==NULL)return node1;\\n        else {TreeNode* node=new TreeNode(node1->val+node2->val,mergeTrees(node1->left,node2->left),mergeTrees(node1->right,node2->right));\\n            return node;\\n        }  \\n   }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Tree",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n\\n   TreeNode* mergeTrees(TreeNode* node1,TreeNode* node2)\\n    {         \\n        if(node1==NULL)return node2;       \\n        else if(node2==NULL)return node1;\\n        else {TreeNode* node=new TreeNode(node1->val+node2->val,mergeTrees(node1->left,node2->left),mergeTrees(node1->right,node2->right));\\n            return node;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1528229,
                "title": "c-bfs-single-queue-iterative",
                "content": "```\\nTreeNode* mergeTrees(TreeNode* r1, TreeNode* r2) {\\n        if(!r1 && !r2) return NULL;\\n        if(!r1) return r2;\\n        if(!r2) return r1;\\n        queue<pair<TreeNode*,TreeNode*>> q;\\n        q.push({r1,r2});\\n        while(!q.empty()){\\n            auto temp = q.front(); q.pop();\\n            temp.first->val+=temp.second->val;\\n            \\n            if(temp.first->left && temp.second->left)\\n                q.push({temp.first->left,temp.second->left});\\n            else if (temp.second->left)\\n                temp.first->left=temp.second->left;\\n            \\n            if(temp.first->right && temp.second->right)\\n                q.push({temp.first->right,temp.second->right});\\n            else if (temp.second->right)\\n                temp.first->right=temp.second->right;         \\n        }\\n        return r1;\\n    }",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search",
                    "Queue",
                    "Iterator"
                ],
                "code": "```\\nTreeNode* mergeTrees(TreeNode* r1, TreeNode* r2) {\\n        if(!r1 && !r2) return NULL;\\n        if(!r1) return r2;\\n        if(!r2) return r1;\\n        queue<pair<TreeNode*,TreeNode*>> q;\\n        q.push({r1,r2});\\n        while(!q.empty()){\\n            auto temp = q.front(); q.pop();\\n            temp.first->val+=temp.second->val;\\n            \\n            if(temp.first->left && temp.second->left)\\n                q.push({temp.first->left,temp.second->left});\\n            else if (temp.second->left)\\n                temp.first->left=temp.second->left;\\n            \\n            if(temp.first->right && temp.second->right)\\n                q.push({temp.first->right,temp.second->right});\\n            else if (temp.second->right)\\n                temp.first->right=temp.second->right;         \\n        }\\n        return r1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1507689,
                "title": "c-very-short-and-easily-understandable-recursive-solution",
                "content": "**Approach: Transverse both the trees together\\nIf both trees are null, return NULL\\nelse create a new node, and add the values of not null nodes of the trees\\nrecursively call the function for creation of left and right subtrees by performing null sanity check on the passed nodes**\\n\\n*Time complexity :O(N), N = max(number of nodes in tree1, number of nodes in tree2)*\\n\\n```\\nTreeNode *mergeTrees(TreeNode *root1, TreeNode *root2)\\n    {\\n        if (root1 == NULL and root2 == NULL)\\n            return NULL;\\n        TreeNode *node = new TreeNode();\\n        if (root1)\\n            node->val += root1->val;\\n        if (root2)\\n            node->val += root2->val;\\n        node->left = mergeTrees(root1 ? root1->left : NULL, root2 ? root2->left : NULL);\\n        node->right = mergeTrees(root1 ? root1->right : NULL, root2 ? root2->right : NULL);\\n        return node;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nTreeNode *mergeTrees(TreeNode *root1, TreeNode *root2)\\n    {\\n        if (root1 == NULL and root2 == NULL)\\n            return NULL;\\n        TreeNode *node = new TreeNode();\\n        if (root1)\\n            node->val += root1->val;\\n        if (root2)\\n            node->val += root2->val;\\n        node->left = mergeTrees(root1 ? root1->left : NULL, root2 ? root2->left : NULL);\\n        node->right = mergeTrees(root1 ? root1->right : NULL, root2 ? root2->right : NULL);\\n        return node;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1491358,
                "title": "easy-to-understand-c-solution-recursion",
                "content": "**Explanation**\\nHere we are using recursion. First of all in base case we check if any of the root node exist or not, if not, we return NULL. then we make the root node and apply the conditions given in the question and then recursively call the function to solve the left and right subtree of the current node and then finally return the answer tree.\\n\\nPlease upvote the solution if you find it helpful and comment down if you have any questions!\\n\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1,TreeNode* root2){\\n        //base case\\n        if(root1==NULL and root2==NULL)\\n            return NULL;\\n        \\n\\t\\t//making the root node\\n        TreeNode* ans=new TreeNode();\\n        \\n        if(root1 and !root2)\\n            ans->val=root1->val;\\n        else if(root2 and !root1)\\n            ans->val=root2->val;\\n        else\\n            ans->val=root1->val+root2->val;\\n        \\n        //recursive calls\\n\\t\\tans->left=mergeTrees(root1?root1->left:NULL,root2?root2->left:NULL);\\n        ans->right=mergeTrees(root1?root1->right:NULL,root2?root2->right:NULL);\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1,TreeNode* root2){\\n        //base case\\n        if(root1==NULL and root2==NULL)\\n            return NULL;\\n        \\n\\t\\t//making the root node\\n        TreeNode* ans=new TreeNode();\\n        \\n        if(root1 and !root2)\\n            ans->val=root1->val;\\n        else if(root2 and !root1)\\n            ans->val=root2->val;\\n        else\\n            ans->val=root1->val+root2->val;\\n        \\n        //recursive calls\\n\\t\\tans->left=mergeTrees(root1?root1->left:NULL,root2?root2->left:NULL);\\n        ans->right=mergeTrees(root1?root1->right:NULL,root2?root2->right:NULL);\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1483705,
                "title": "python-bfs-without-modfying-the-original-trees",
                "content": "I couldn\\'t find a BFS solution which hasn\\'t modified the original Trees, so here it is:\\n```\\nfrom collections import deque\\n\\ndef mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\tif not root1 and not root2:\\n\\t\\treturn None\\n\\troot = TreeNode()\\n\\tqueue = deque()\\n\\tqueue.append((root1, root2, root))\\n\\twhile queue:\\n\\t\\tnode1, node2, node = queue.popleft()\\n\\t\\tnode.val = (node1.val if node1 else 0) + (node2.val if node2 else 0)\\n\\n\\t\\tif (node1 and node1.left) or (node2 and node2.left):\\n\\t\\t\\tnode.left = TreeNode()\\n\\t\\t\\tqueue.append((node1 and node1.left, node2 and node2.left, node.left))\\n\\t\\tif (node1 and node1.right) or (node2 and node2.right):\\n\\t\\t\\tnode.right = TreeNode()\\n\\t\\t\\tqueue.append((node1 and node1.right, node2 and node2.right, node.right))\\n\\n\\treturn root\\n```\\n\\nThe idea is to populate the queue with the nodes of both trees, and the node of the new tree.\\nWhen such a tuple gets popped, first the value gets assigned no the node of the new tree, and then we append to the queue depending on whether either of the trees has a child. There\\'s a lot of inline ifs and ands because node1 and node2 might be `None`.\\n",
                "solutionTags": [
                    "Python",
                    "Breadth-First Search"
                ],
                "code": "```\\nfrom collections import deque\\n\\ndef mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n\\tif not root1 and not root2:\\n\\t\\treturn None\\n\\troot = TreeNode()\\n\\tqueue = deque()\\n\\tqueue.append((root1, root2, root))\\n\\twhile queue:\\n\\t\\tnode1, node2, node = queue.popleft()\\n\\t\\tnode.val = (node1.val if node1 else 0) + (node2.val if node2 else 0)\\n\\n\\t\\tif (node1 and node1.left) or (node2 and node2.left):\\n\\t\\t\\tnode.left = TreeNode()\\n\\t\\t\\tqueue.append((node1 and node1.left, node2 and node2.left, node.left))\\n\\t\\tif (node1 and node1.right) or (node2 and node2.right):\\n\\t\\t\\tnode.right = TreeNode()\\n\\t\\t\\tqueue.append((node1 and node1.right, node2 and node2.right, node.right))\\n\\n\\treturn root\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1080039,
                "title": "rust-recursive",
                "content": "```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\ntype Node = Rc<RefCell<TreeNode>>;\\n\\nimpl Solution {\\n    pub fn merge_trees(n1: Option<Node>, n2: Option<Node>) -> Option<Node> {\\n        fn recursive(n1: &Option<Node>, n2: &Option<Node>) -> Option<Node> {\\n            match (n1, n2) {\\n                (Some(n1), Some(n2)) => {\\n                    let (n1, n2) = (n1.borrow(),n2.borrow());\\n                    let mut root = TreeNode::new(n1.val + n2.val);\\n                    root.left = recursive(&n1.left, &n2.left);\\n                    root.right = recursive(&n1.right, &n2.right);\\n                    Some(Rc::new(RefCell::new(root)))\\n                }\\n                (None, Some(n2)) => Some(n2.clone()),\\n                (Some(n1), None) => Some(n1.clone()),\\n                (None, None) => None,\\n            }\\n        }\\n        recursive(&n1, &n2)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Recursion"
                ],
                "code": "```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\ntype Node = Rc<RefCell<TreeNode>>;\\n\\nimpl Solution {\\n    pub fn merge_trees(n1: Option<Node>, n2: Option<Node>) -> Option<Node> {\\n        fn recursive(n1: &Option<Node>, n2: &Option<Node>) -> Option<Node> {\\n            match (n1, n2) {\\n                (Some(n1), Some(n2)) => {\\n                    let (n1, n2) = (n1.borrow(),n2.borrow());\\n                    let mut root = TreeNode::new(n1.val + n2.val);\\n                    root.left = recursive(&n1.left, &n2.left);\\n                    root.right = recursive(&n1.right, &n2.right);\\n                    Some(Rc::new(RefCell::new(root)))\\n                }\\n                (None, Some(n2)) => Some(n2.clone()),\\n                (Some(n1), None) => Some(n1.clone()),\\n                (None, None) => None,\\n            }\\n        }\\n        recursive(&n1, &n2)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1026601,
                "title": "java-simple-100-solution",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t2 == null) return t1;\\n        if (t1 == null) return t2;\\n        t1.val = t1.val + t2.val;\\n        \\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        \\n        return t1;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t2 == null) return t1;\\n        if (t1 == null) return t2;\\n        t1.val = t1.val + t2.val;\\n        \\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        \\n        return t1;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 889178,
                "title": "cpp-easiest-solution",
                "content": "**Upvote if helpful**\\n\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL && t2==NULL)\\n            return NULL;\\n        \\n        if(t1==NULL && t2!=NULL)\\n            return t2;\\n        if(t1!=NULL && t2==NULL)\\n            return t1;\\n        \\n        TreeNode* temp = new TreeNode(t1->val+t2->val);\\n        temp->left=mergeTrees(t1->left,t2->left);\\n        temp->right= mergeTrees(t1->right,t2->right);\\n        return temp;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL && t2==NULL)\\n            return NULL;\\n        \\n        if(t1==NULL && t2!=NULL)\\n            return t2;\\n        if(t1!=NULL && t2==NULL)\\n            return t1;\\n        \\n        TreeNode* temp = new TreeNode(t1->val+t2->val);\\n        temp->left=mergeTrees(t1->left,t2->left);\\n        temp->right= mergeTrees(t1->right,t2->right);\\n        return temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 772434,
                "title": "easy-understandable-c-solution-beats-91-time",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL) return t2;\\n        if(t2==NULL) return t1;\\n        \\n        t1->left=mergeTrees(t1->left,t2->left);\\n        t1->right=mergeTrees(t1->right,t2->right);\\n        t1->val=t1->val+t2->val;\\n        return t1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if(t1==NULL) return t2;\\n        if(t2==NULL) return t1;\\n        \\n        t1->left=mergeTrees(t1->left,t2->left);\\n        t1->right=mergeTrees(t1->right,t2->right);\\n        t1->val=t1->val+t2->val;\\n        return t1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699367,
                "title": "javascript-2-lines-solution",
                "content": "```\\nvar mergeTrees = function(t1, t2) {\\n    if(!t1 || !t2) return t1 || t2\\n    return new TreeNode(t1.val + t2.val, mergeTrees(t1.left, t2.left), mergeTrees(t1.right, t2.right))\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTrees = function(t1, t2) {\\n    if(!t1 || !t2) return t1 || t2\\n    return new TreeNode(t1.val + t2.val, mergeTrees(t1.left, t2.left), mergeTrees(t1.right, t2.right))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 350138,
                "title": "python-beats-nearly-100",
                "content": "```\\n def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not t1: return t2\\n        if not t2: return t1\\n        root = TreeNode(t1.val + t2.val)\\n        root.val = t1.val + t2.val\\n        root.left = self.mergeTrees(t1.left, t2.left)\\n        root.right = self.mergeTrees(t1.right,t2.right)\\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\n def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if not t1: return t2\\n        if not t2: return t1\\n        root = TreeNode(t1.val + t2.val)\\n        root.val = t1.val + t2.val\\n        root.left = self.mergeTrees(t1.left, t2.left)\\n        root.right = self.mergeTrees(t1.right,t2.right)\\n        return root\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 219465,
                "title": "rust-solution",
                "content": "```Rust\\n// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn merge_trees(t1: Option<Rc<RefCell<TreeNode>>>, t2: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        if t1.is_none() {\\n            return t2;\\n        }\\n        if t2.is_none() {\\n            return t1;\\n        }\\n        let _t1 = t1.unwrap();\\n        let _t2 = t2.unwrap();\\n        let mut res;\\n        res = TreeNode::new(_t1.borrow().val + _t2.borrow().val);\\n        res.left = Self::merge_trees(_t1.borrow().left.clone(), _t2.borrow().left.clone());\\n        res.right = Self::merge_trees(_t1.borrow().right.clone(), _t2.borrow().right.clone());\\n        \\n        return Some(Rc::new(RefCell::new(res)));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Rust\\n// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn merge_trees(t1: Option<Rc<RefCell<TreeNode>>>, t2: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        if t1.is_none() {\\n            return t2;\\n        }\\n        if t2.is_none() {\\n            return t1;\\n        }\\n        let _t1 = t1.unwrap();\\n        let _t2 = t2.unwrap();\\n        let mut res;\\n        res = TreeNode::new(_t1.borrow().val + _t2.borrow().val);\\n        res.left = Self::merge_trees(_t1.borrow().left.clone(), _t2.borrow().left.clone());\\n        res.right = Self::merge_trees(_t1.borrow().right.clone(), _t2.borrow().right.clone());\\n        \\n        return Some(Rc::new(RefCell::new(res)));\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 218908,
                "title": "python-solution-with-recursively-and-iteratively",
                "content": "The description said :\\n> You need to merge them into a new binary tree\\n\\nSo I think some solutions that modifies the input tree node in place are wrong.\\n\\nrecursively approach:\\n```python\\ndef mergeTrees(self, t1, t2):\\n    if not t1:\\n        return t2\\n    if not t2:\\n        return t1\\n    t = TreeNode(t1.val+t2.val)\\n    t.left = self.mergeTrees(t1.left, t2.left)\\n    t.right = self.mergeTrees(t1.right, t2.right)\\n    return t\\n```\\n\\niteratively approach:\\n\\n```python\\ndef mergeTrees(self, t1, t2):\\n    if not t1 and not t2:\\n        return []\\n    t = TreeNode(0)\\n    stack = [(t, t1, t2)]\\n    while stack:\\n        n, n1, n2 = stack.pop()\\n        if n1 or n2:\\n            n.val = (n1.val if n1 else 0) + (n2.val if n2 else 0)\\n            if (n1 and n1.right) or (n2 and n2.right):\\n                n.right = TreeNode(None)\\n                stack.append((n.right, n1.right if n1 else None, n2.right if n2 else None))\\n            if (n1 and n1.left) or (n2 and n2.left):\\n                n.left = TreeNode(None)\\n                stack.append((n.left, n1.left if n1 else None, n2.left if n2 else None))\\n    return t\\n```\\n\\ndidn\\'t change the input tree node. And the result won\\'t change when t1 or t2 changed.",
                "solutionTags": [],
                "code": "```python\\ndef mergeTrees(self, t1, t2):\\n    if not t1:\\n        return t2\\n    if not t2:\\n        return t1\\n    t = TreeNode(t1.val+t2.val)\\n    t.left = self.mergeTrees(t1.left, t2.left)\\n    t.right = self.mergeTrees(t1.right, t2.right)\\n    return t\\n```\n```python\\ndef mergeTrees(self, t1, t2):\\n    if not t1 and not t2:\\n        return []\\n    t = TreeNode(0)\\n    stack = [(t, t1, t2)]\\n    while stack:\\n        n, n1, n2 = stack.pop()\\n        if n1 or n2:\\n            n.val = (n1.val if n1 else 0) + (n2.val if n2 else 0)\\n            if (n1 and n1.right) or (n2 and n2.right):\\n                n.right = TreeNode(None)\\n                stack.append((n.right, n1.right if n1 else None, n2.right if n2 else None))\\n            if (n1 and n1.left) or (n2 and n2.left):\\n                n.left = TreeNode(None)\\n                stack.append((n.left, n1.left if n1 else None, n2.left if n2 else None))\\n    return t\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 104441,
                "title": "5-line-python",
                "content": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 or t2:\\n            root = TreeNode((t1 and t1.val or 0) + (t2 and t2.val or 0))\\n            root.left = self.mergeTrees(t1 and t1.left, t2 and t2.left)\\n            root.right = self.mergeTrees(t1 and t1.right, t2 and t2.right)\\n            return root\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 or t2:\\n            root = TreeNode((t1 and t1.val or 0) + (t2 and t2.val or 0))\\n            root.left = self.mergeTrees(t1 and t1.left, t2 and t2.left)\\n            root.right = self.mergeTrees(t1 and t1.right, t2 and t2.right)\\n            return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410972,
                "title": "solution",
                "content": "```C++ []\\nclass Solution { public: TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) { if(root1 && root2) { root1->val += root2->val; root1->left = mergeTrees(root1->left, root2->left); root1->right = mergeTrees(root1->right, root2->right); } else if(root2) { return root2; } return root1; } };\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def gh(root1,root2):\\n            if root1 is None and root2 is None:\\n                return \\n            if root1 is None:\\n                return root2\\n            if root2 is None:\\n                return root1\\n            s=TreeNode(root1.val+root2.val)\\n            s.left=gh(root1.left,root2.left)\\n            s.right=gh(root1.right,root2.right)\\n            return s\\n        return gh(root1,root2)\\n```\\n\\n```Java []\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1==null && root2==null) return null;\\n        if (root1==null) return root2;\\n        if (root2==null) return root1;\\n        root1.val = root1.val+root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1; \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution { public: TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) { if(root1 && root2) { root1->val += root2->val; root1->left = mergeTrees(root1->left, root2->left); root1->right = mergeTrees(root1->right, root2->right); } else if(root2) { return root2; } return root1; } };\\n```\n```Python3 []\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def gh(root1,root2):\\n            if root1 is None and root2 is None:\\n                return \\n            if root1 is None:\\n                return root2\\n            if root2 is None:\\n                return root1\\n            s=TreeNode(root1.val+root2.val)\\n            s.left=gh(root1.left,root2.left)\\n            s.right=gh(root1.right,root2.right)\\n            return s\\n        return gh(root1,root2)\\n```\n```Java []\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if (root1==null && root2==null) return null;\\n        if (root1==null) return root2;\\n        if (root2==null) return root1;\\n        root1.val = root1.val+root2.val;\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        return root1; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3370340,
                "title": "easiest-solution-you-can-find-java-beats-100",
                "content": "Like it if you Like it\\n# Approach\\n1. Iterate through both trees via same path\\n2. if path ahead of any tree is empty then concate the path of other non empty tree\\n3. create a node containing the sum of nodes of each tree (in case both node of tree are non empty)\\n4. combine the returned nodes to form the tree\\n \\n\\n\\n# Complexity\\n- Time complexity:\\nO(N+M)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null)\\n        return root2;\\n\\n        if(root2==null)\\n        return root1;\\n\\n        int val1 = root1.val;\\n        int val2 = root2.val;\\n\\n        TreeNode node= new TreeNode(val1+val2);\\n\\n        node.left = mergeTrees(root1.left,root2.left);\\n        node.right = mergeTrees(root1.right,root2.right);\\n        return node;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null)\\n        return root2;\\n\\n        if(root2==null)\\n        return root1;\\n\\n        int val1 = root1.val;\\n        int val2 = root2.val;\\n\\n        TreeNode node= new TreeNode(val1+val2);\\n\\n        node.left = mergeTrees(root1.left,root2.left);\\n        node.right = mergeTrees(root1.right,root2.right);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308472,
                "title": "617-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. If \"root1\" is None, return \"root2\".\\n2. If \"root2\" is None, return \"root1\".\\n3. Merge the nodes that are overlapped by adding their values together and storing the sum in the \"val\" attribute of \"root1\".\\n4. Recursively merge the left subtree of \"root1\" and the left subtree of \"root2\" by calling the \"mergeTrees\" function with the left child nodes of \"root1\" and \"root2\".\\n5. Recursively merge the right subtree of \"root1\" and the right subtree of \"root2\" by calling the \"mergeTrees\" function with the right child nodes of \"root1\" and \"root2\".\\n6. Return \"root1\", which represents the merged tree.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        # merge the nodes that are overlapped\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Tree",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        # merge the nodes that are overlapped\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3213062,
                "title": "python-easy-recursive-code-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if root1 is None and root2 is None:\\n            return None\\n        if root1 is None: return root2\\n        if root2 is None: return root1\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if root1 is None and root2 is None:\\n            return None\\n        if root1 is None: return root2\\n        if root2 is None: return root1\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n        return root1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3124342,
                "title": "c-recursive-solution-creating-new-tree",
                "content": "```\\nclass Solution {\\npublic:    \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1 && !root2) return NULL;\\n        auto ans= new TreeNode((root1?root1->val:0) + (root2?root2->val:0));\\n        ans->left= mergeTrees(root1?root1->left:NULL , root2?root2->left:NULL);\\n        ans->right= mergeTrees(root1?root1->right:NULL , root2?root2->right:NULL);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:    \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!root1 && !root2) return NULL;\\n        auto ans= new TreeNode((root1?root1->val:0) + (root2?root2->val:0));\\n        ans->left= mergeTrees(root1?root1->left:NULL , root2?root2->left:NULL);\\n        ans->right= mergeTrees(root1?root1->right:NULL , root2?root2->right:NULL);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2764528,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        \\n        if(t1 == null) {\\n            return t2;\\n        }\\n        if(t2 == null) {\\n            return t1;\\n        }\\n        t1.val += t2.val;\\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        return t1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        \\n        if(t1 == null) {\\n            return t2;\\n        }\\n        if(t2 == null) {\\n            return t1;\\n        }\\n        t1.val += t2.val;\\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        return t1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2668232,
                "title": "c-easy-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1==NULL)\\n            return root2;\\n        if(root2==NULL)\\n            return root1;\\n        TreeNode *temp=new TreeNode(root1->val+root2->val);\\n       \\n      if(root1->left !=NULL || root2->left!=NULL)\\n      {\\n          temp->left=mergeTrees(root1->left,root2->left);\\n      }\\n         if(root1->right !=NULL || root2->right!=NULL)\\n      {\\n          temp->right=mergeTrees(root1->right,root2->right);\\n      }\\n      return temp;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1==NULL)\\n            return root2;\\n        if(root2==NULL)\\n            return root1;\\n        TreeNode *temp=new TreeNode(root1->val+root2->val);\\n       \\n      if(root1->left !=NULL || root2->left!=NULL)\\n      {\\n          temp->left=mergeTrees(root1->left,root2->left);\\n      }\\n         if(root1->right !=NULL || root2->right!=NULL)\\n      {\\n          temp->right=mergeTrees(root1->right,root2->right);\\n      }\\n      return temp;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2423934,
                "title": "python-c-java-beginner-level-solution-5-line-solution-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q617.  Merge Two Binary Trees***\\n\\nYou are given two binary trees root1 and root2.\\n\\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Java Code** :\\n\\n```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null)return root2;\\n        if(root2==null)return root1;\\n        root1.val=root1.val+root2.val;\\n        root1.left=mergeTrees(root1.left,root2.left);\\n        root1.right=mergeTrees(root1.right,root2.right);\\n        \\n        return root1;\\n    }\\n}\\n```\\n**Runtime:**  1ms\\n**Memory Usage:**  50.5 MB\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n\\n```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        elif not t2:\\n            return t1\\n        else:\\n            res = TreeNode(t1.val + t2.val)\\n            res.left = self.mergeTrees(t1.left, t2.left)\\n            res.right = self.mergeTrees(t1.right, t2.right)\\n        return res\\n```\\n**Runtime:**  147ms\\n**Memory Usage:**  15.4 MB\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 && root2)\\n        {\\n            TreeNode* root=new TreeNode(root1->val+root2->val);\\n            root->left=mergeTrees(root1->left,root2->left);\\n            root->right=mergeTrees(root1->right,root2->right);\\n            return root;\\n        }\\n        else\\n            return root1?root1:root2;\\n    }\\n};\\n```\\n**Runtime:**  64ms\\n**Memory Usage:**  34.7MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1==null)return root2;\\n        if(root2==null)return root1;\\n        root1.val=root1.val+root2.val;\\n        root1.left=mergeTrees(root1.left,root2.left);\\n        root1.right=mergeTrees(root1.right,root2.right);\\n        \\n        return root1;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        elif not t2:\\n            return t1\\n        else:\\n            res = TreeNode(t1.val + t2.val)\\n            res.left = self.mergeTrees(t1.left, t2.left)\\n            res.right = self.mergeTrees(t1.right, t2.right)\\n        return res\\n```\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 && root2)\\n        {\\n            TreeNode* root=new TreeNode(root1->val+root2->val);\\n            root->left=mergeTrees(root1->left,root2->left);\\n            root->right=mergeTrees(root1->right,root2->right);\\n            return root;\\n        }\\n        else\\n            return root1?root1:root2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2237709,
                "title": "java-simple-bfs-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null && root2 == null)\\n            return null;\\n        if(root1 == null || root2 == null)\\n            return root1 == null ? root2 : root1;\\n        \\n        LinkedList<TreeNode[]> que = new LinkedList<>();\\n//         {root1, root2}\\n        que.addLast(new TreeNode[]{root1, root2});\\n        while(que.size() != 0){\\n            int size = que.size();\\n            while(size-- != 0){\\n                TreeNode[] rm = que.removeFirst();\\n                TreeNode r1 = rm[0], r2 = rm[1];\\n\\t\\t\\t\\t\\n                if(r1 != null && r2 != null)\\n                    r1.val += r2.val;\\n\\t\\t\\t\\t\\t\\n                if(r1.left == null && r2.left != null)\\n                    r1.left = r2.left;\\n                else if(r1.left != null && r2.left != null){\\n                    que.addLast(new TreeNode[]{r1.left, r2.left});\\n                }\\n\\t\\t\\t\\t\\n                if(r1.right == null && r2.right != null)\\n                    r1.right = r2.right;\\n                else if(r1.right != null && r2.right != null)\\n                    que.addLast(new TreeNode[]{r1.right, r2.right});\\n            }\\n        }\\n        return root1;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Breadth-First Search",
                    "Iterator"
                ],
                "code": "class Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null && root2 == null)\\n            return null;\\n        if(root1 == null || root2 == null)\\n            return root1 == null ? root2 : root1;\\n        \\n        LinkedList<TreeNode[]> que = new LinkedList<>();\\n//         {root1, root2}",
                "codeTag": "Java"
            },
            {
                "id": 2089170,
                "title": "python3-using-dfs",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def dfs(root1,root2):\\n            if(root1 == None and root2 == None):\\n                return None\\n            if(root1 != None and root2 == None):\\n                return root1\\n            if(root1 == None and root2 != None):\\n                return root2\\n            \\n            root1.val = root1.val + root2.val\\n            \\n            left = dfs(root1.left, root2.left)\\n                \\n            right = dfs(root1.right, root2.right)\\n                \\n            root1.left = left\\n            root1.right = right\\n            return root1\\n        \\n        return dfs(root1,root2)\\n```",
                "solutionTags": [
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def dfs(root1,root2):\\n            if(root1 == None and root2 == None):\\n                return None\\n            if(root1 != None and root2 == None):\\n                return root1\\n            if(root1 == None and root2 != None):\\n                return root2\\n            \\n            root1.val = root1.val + root2.val\\n            \\n            left = dfs(root1.left, root2.left)\\n                \\n            right = dfs(root1.right, root2.right)\\n                \\n            root1.left = left\\n            root1.right = right\\n            return root1\\n        \\n        return dfs(root1,root2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1934579,
                "title": "javascript-dfs-two-solutions",
                "content": "## Solution 1 (create new tree)\\n\\nIn this solution we create a new tree with the merged values as this is what the questions asks for.\\n\\n> You need to merge the two trees into a new binary tree\\n\\nThe `mergeTrees` function is used recursively to set the left and right values of the tree. If `root1` and `root2` are `null` then `null` is returned. Otherwise a new `TreeNode` is created with the combined values of the two nodes.\\n\\n```\\nvar mergeTrees = function(root1, root2) {\\n  if (!root1 && !root2) {\\n    return null;\\n  }\\n\\n  let val = 0;\\n  val += root1 ? root1.val : 0;\\n  val += root2 ? root2.val : 0;\\n\\n  let root = new TreeNode(val);\\n  root.left = mergeTrees(root1 ? root1.left : null, root2 ? root2.left : null);\\n  root.right = mergeTrees(root1 ? root1.right : null, root2 ? root2.right : null);\\n\\n  return root;\\n};\\n```\\n\\n## Solution 2 (in-place)\\n\\nWe can achieve the same result in-place (although not mentioned in the question).\\n\\n```\\nvar mergeTrees = function(root1, root2) {\\n  if (!root1 && !root2) {\\n    return null;\\n  }\\n  if (!root1) {\\n    return root2;\\n  }\\n  if (!root2) {\\n    return root1;\\n  }\\n\\n  root1.val += root2.val;\\n  root1.left = mergeTrees(root1.left, root2.left);\\n  root1.right = mergeTrees(root1.right, root2.right);\\n\\n  return root1;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nvar mergeTrees = function(root1, root2) {\\n  if (!root1 && !root2) {\\n    return null;\\n  }\\n\\n  let val = 0;\\n  val += root1 ? root1.val : 0;\\n  val += root2 ? root2.val : 0;\\n\\n  let root = new TreeNode(val);\\n  root.left = mergeTrees(root1 ? root1.left : null, root2 ? root2.left : null);\\n  root.right = mergeTrees(root1 ? root1.right : null, root2 ? root2.right : null);\\n\\n  return root;\\n};\\n```\n```\\nvar mergeTrees = function(root1, root2) {\\n  if (!root1 && !root2) {\\n    return null;\\n  }\\n  if (!root1) {\\n    return root2;\\n  }\\n  if (!root2) {\\n    return root1;\\n  }\\n\\n  root1.val += root2.val;\\n  root1.left = mergeTrees(root1.left, root2.left);\\n  root1.right = mergeTrees(root1.right, root2.right);\\n\\n  return root1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1735514,
                "title": "c-easy-recursive-dfs-merge-two-binary-trees",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n\\t\\n        if(!root1 && !root2) {\\n            return root1;\\n        } else if(!root1) {\\n            return root2;\\n        } else if(!root2) {\\n            return root1;\\n        }\\n        \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```\\nPlease **UpVote**, if you understood the problem.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n\\t\\n        if(!root1 && !root2) {\\n            return root1;\\n        } else if(!root1) {\\n            return root2;\\n        } else if(!root2) {\\n            return root1;\\n        }\\n        \\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1734790,
                "title": "javascript-bfs-iterative",
                "content": "```\\nconst mergeTrees = function(root1, root2) {\\n    if (!root1) return root2\\n    if (!root2) return root1\\n    \\n    const res = root1\\n    \\n    const queue = []\\n    queue.push({v1:res, v2:root2}) \\n    \\n    while (queue.length) {\\n        const {v1, v2} = queue.shift()\\n        v1.val += v2.val\\n        \\n        if (v1.left && v2.left) queue.push({v1:v1.left, v2:v2.left})\\n        if (!v1.left && v2.left) v1.left = v2.left\\n        \\n        if (v1.right && v2.right) queue.push({v1:v1.right, v2:v2.right})\\n        if (!v1.right && v2.right) v1.right = v2.right  \\n        \\n    }\\n    \\n    return res\\n     \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Breadth-First Search",
                    "Iterator"
                ],
                "code": "```\\nconst mergeTrees = function(root1, root2) {\\n    if (!root1) return root2\\n    if (!root2) return root1\\n    \\n    const res = root1\\n    \\n    const queue = []\\n    queue.push({v1:res, v2:root2}) \\n    \\n    while (queue.length) {\\n        const {v1, v2} = queue.shift()\\n        v1.val += v2.val\\n        \\n        if (v1.left && v2.left) queue.push({v1:v1.left, v2:v2.left})\\n        if (!v1.left && v2.left) v1.left = v2.left\\n        \\n        if (v1.right && v2.right) queue.push({v1:v1.right, v2:v2.right})\\n        if (!v1.right && v2.right) v1.right = v2.right  \\n        \\n    }\\n    \\n    return res\\n     \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1610451,
                "title": "concise-python-using-recursion-90",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def merge(a, b):\\n            if a is None: return b\\n            if b is None: return a\\n            \\n            return TreeNode(a.val + b.val, merge(a.left, b.left), merge(a.right, b.right))\\n        \\n        return merge(root1, root2)\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        def merge(a, b):\\n            if a is None: return b\\n            if b is None: return a\\n            \\n            return TreeNode(a.val + b.val, merge(a.left, b.left), merge(a.right, b.right))\\n        \\n        return merge(root1, root2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1607150,
                "title": "python-using-stack",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1:\\n            return root2\\n        \\n        if not root2:\\n            return root1\\n        \\n        stack = [(root1, root2)]\\n        \\n        root1.val += root2.val\\n        while stack:\\n            l, r  = stack.pop()\\n            if l.left and r.left:\\n                l.left.val += r.left.val\\n                stack.append((l.left,r.left))\\n            elif not l.left and  r.left:\\n                l.left = r.left\\n                        \\n            if l.right and r.right:\\n                l.right.val += r.right.val\\n                stack.append((l.right,r.right))\\n            elif not l.right and  r.right:\\n                l.right = r.right\\n                \\n        return root1\\n                \\n\\n        ```",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1:\\n            return root2\\n        \\n        if not root2:\\n            return root1\\n        \\n        stack = [(root1, root2)]\\n        \\n        root1.val += root2.val\\n        while stack:\\n            l, r  = stack.pop()\\n            if l.left and r.left:\\n                l.left.val += r.left.val\\n                stack.append((l.left,r.left))\\n            elif not l.left and  r.left:\\n                l.left = r.left\\n                        \\n            if l.right and r.right:\\n                l.right.val += r.right.val\\n                stack.append((l.right,r.right))\\n            elif not l.right and  r.right:\\n                l.right = r.right\\n                \\n        return root1\\n                \\n\\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 1212982,
                "title": "simple-c-solution-with-comment-28-ms-faster-than-93-85-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        // Return root2, if root1 is null\\n        if (root1 == nullptr){\\n            return root2;\\n        }\\n        // Return root1, if root2 is null\\n        if (root2 == nullptr){\\n            return root1;\\n        }\\n        // Now since, we know that neither root1 is null nor root2 is null, now you can add the values of root1 and root 2 and store in root1\\n        root1->val +=  root2->val;\\n        // Starting to build left subtree from bottom\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        // Starting to build right subtree from bottom\\n        root1->right = mergeTrees(root1-> right, root2->right);\\n        // Returned to update\\n        return root1;\\n    }\\n};\\n```\\n\\n**Please upvote this solution if this helps you understand better**\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        // Return root2, if root1 is null\\n        if (root1 == nullptr){\\n            return root2;\\n        }\\n        // Return root1, if root2 is null\\n        if (root2 == nullptr){\\n            return root1;\\n        }\\n        // Now since, we know that neither root1 is null nor root2 is null, now you can add the values of root1 and root 2 and store in root1\\n        root1->val +=  root2->val;\\n        // Starting to build left subtree from bottom\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        // Starting to build right subtree from bottom\\n        root1->right = mergeTrees(root1-> right, root2->right);\\n        // Returned to update\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1204063,
                "title": "c-easy-and-short-recursion",
                "content": "```\\nTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) \\n    {\\n        if(!root1)\\n            return root2;\\n        if(!root2)\\n            return root1;\\n        root1 -> val += root2 -> val;\\n        root1 -> left = mergeTrees(root1 -> left, root2 -> left);\\n        root1 -> right = mergeTrees(root1 -> right, root2 -> right);\\n        \\n        return root1;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) \\n    {\\n        if(!root1)\\n            return root2;\\n        if(!root2)\\n            return root1;\\n        root1 -> val += root2 -> val;\\n        root1 -> left = mergeTrees(root1 -> left, root2 -> left);\\n        root1 -> right = mergeTrees(root1 -> right, root2 -> right);\\n        \\n        return root1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 979765,
                "title": "c-preorder-traversal-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\\n\\n        if(t1 != null && t2 != null){\\n            t1.val += t2.val;\\n\\n            t1.left = MergeTrees(t1.left, t2.left);\\n            t1.right = MergeTrees(t1.right, t2.right);\\n\\n            return t1;\\n        }\\n        return t1 ?? t2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode t1, TreeNode t2) {\\n\\n        if(t1 != null && t2 != null){\\n            t1.val += t2.val;\\n\\n            t1.left = MergeTrees(t1.left, t2.left);\\n            t1.right = MergeTrees(t1.right, t2.right);\\n\\n            return t1;\\n        }\\n        return t1 ?? t2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 474242,
                "title": "python-o-n-sol-by-dfs-tree-building-with-explanation",
                "content": "Python O( n ) sol. based on DFS tree-building\\n\\n```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        \\n        root_node = None\\n        \\n        if not t1:\\n\\t\\t\\t# t1 is empty, new tree is decided by t2\\n            return t2\\n        \\n        elif not t2:\\n\\t\\t\\t# t2 is empty, new tree is decided by t1\\n            return t1\\n        \\n        else:\\n            # both t1 and t2 exist, merge current node, and traverse on DFS again\\n            root_node =  TreeNode( t1.val + t2.val )\\n            root_node.left = self.mergeTrees( t1.left, t2.left )\\n            root_node.right = self.mergeTrees( t1.right, t2.right )\\n            \\n            return root_node\\n```",
                "solutionTags": [
                    "Python",
                    "Tree",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        \\n        root_node = None\\n        \\n        if not t1:\\n\\t\\t\\t# t1 is empty, new tree is decided by t2\\n            return t2\\n        \\n        elif not t2:\\n\\t\\t\\t# t2 is empty, new tree is decided by t1\\n            return t1\\n        \\n        else:\\n            # both t1 and t2 exist, merge current node, and traverse on DFS again\\n            root_node =  TreeNode( t1.val + t2.val )\\n            root_node.left = self.mergeTrees( t1.left, t2.left )\\n            root_node.right = self.mergeTrees( t1.right, t2.right )\\n            \\n            return root_node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 464379,
                "title": "java-recursive-solution-straightforward",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        TreeNode root = new TreeNode(t1.val + t2.val);\\n        root.left = mergeTrees(t1.left, t2.left);\\n        root.right = mergeTrees(t1.right, t2.right);\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        TreeNode root = new TreeNode(t1.val + t2.val);\\n        root.left = mergeTrees(t1.left, t2.left);\\n        root.right = mergeTrees(t1.right, t2.right);\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 416799,
                "title": "two-recursive-solutions-in-6-lines-explained",
                "content": "#### 1. Non-destructive\\nThis is the straight-forward recursive solution, where we build the merged tree from scratch.\\n```python\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 or t2:\\n            v1, l1, r1 = (t1.val, t1.left, t1.right) if t1 else (0, None, None)\\n            v2, l2, r2 = (t2.val, t2.left, t2.right) if t2 else (0, None, None)\\n            merged = TreeNode(v1 + v2)\\n            merged.left, merged.right = self.mergeTrees(l1, l2), self.mergeTrees(r1, r2)\\n            return merged\\n```\\n---\\n#### 2. Destructive but fast (beats 99.87% in one of the best runtimes)\\nBy reusing the existing nodes of `t1` and `t2`, we create fewer new nodes and therefore spend less time, but `t1` may be destroyed.\\n```python\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 and t2:\\n            t1.val += t2.val\\n            t1.left, t1.right = self.mergeTrees(t1.left, t2.left), self.mergeTrees(t1.right, t2.right)\\n        elif t2:\\n            return t2\\n        return t1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 or t2:\\n            v1, l1, r1 = (t1.val, t1.left, t1.right) if t1 else (0, None, None)\\n            v2, l2, r2 = (t2.val, t2.left, t2.right) if t2 else (0, None, None)\\n            merged = TreeNode(v1 + v2)\\n            merged.left, merged.right = self.mergeTrees(l1, l2), self.mergeTrees(r1, r2)\\n            return merged\\n```\n```python\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if t1 and t2:\\n            t1.val += t2.val\\n            t1.left, t1.right = self.mergeTrees(t1.left, t2.left), self.mergeTrees(t1.right, t2.right)\\n        elif t2:\\n            return t2\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 365266,
                "title": "clean-python-recursive-iterative-preorder-traversal",
                "content": "Recursive is pretty straight-forward:\\n```py\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2:\\n            return t1 or t2\\n\\n        t2.val += t1.val\\n        t2.left = self.mergeTrees(t1.left, t2.left)\\n        t2.right = self.mergeTrees(t1.right, t2.right)\\n        return t2\\n```\\nIterative:\\n```py\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2:\\n            return t1 or t2\\n\\n        stack = [(t1, t2)]\\n        head = t2\\n\\n        while stack:\\n            t1, t2 = stack.pop()\\n            t2.val += t1.val\\n\\n            # process the left child\\n            if t1.left and t2.left:\\n                stack.append((t1.left, t2.left))\\n            elif t1.left:\\n                t2.left = t1.left\\n\\n            # process the right child\\n            if t1.right and t2.right:\\n                stack.append((t1.right, t2.right))\\n            elif t1.right:\\n                t2.right = t1.right\\n\\n        return head\\n```",
                "solutionTags": [],
                "code": "```py\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2:\\n            return t1 or t2\\n\\n        t2.val += t1.val\\n        t2.left = self.mergeTrees(t1.left, t2.left)\\n        t2.right = self.mergeTrees(t1.right, t2.right)\\n        return t2\\n```\n```py\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1 or not t2:\\n            return t1 or t2\\n\\n        stack = [(t1, t2)]\\n        head = t2\\n\\n        while stack:\\n            t1, t2 = stack.pop()\\n            t2.val += t1.val\\n\\n            # process the left child\\n            if t1.left and t2.left:\\n                stack.append((t1.left, t2.left))\\n            elif t1.left:\\n                t2.left = t1.left\\n\\n            # process the right child\\n            if t1.right and t2.right:\\n                stack.append((t1.right, t2.right))\\n            elif t1.right:\\n                t2.right = t1.right\\n\\n        return head\\n```",
                "codeTag": "Java"
            },
            {
                "id": 211442,
                "title": "kotlin",
                "content": "```\\n/**\\n * https://leetcode.com/problems/merge-two-binary-trees/\\n *\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n  fun mergeTrees(t1: TreeNode?, t2: TreeNode?): TreeNode? {\\n    if (t1 == null) return t2\\n    if (t2 == null) return t1\\n    return t1.apply {\\n      `val` += t2.`val`\\n      left = mergeTrees(left, t2.left)\\n      right = mergeTrees(right, t2.right)\\n    }\\n  }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * https://leetcode.com/problems/merge-two-binary-trees/\\n *\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n  fun mergeTrees(t1: TreeNode?, t2: TreeNode?): TreeNode? {\\n    if (t1 == null) return t2\\n    if (t2 == null) return t1\\n    return t1.apply {\\n      `val` += t2.`val`\\n      left = mergeTrees(left, t2.left)\\n      right = mergeTrees(right, t2.right)\\n    }\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 163117,
                "title": "python-simple-recursive",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 == None:\\n            return t2\\n        if t2 == None:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 == None:\\n            return t2\\n        if t2 == None:\\n            return t1\\n        t1.val += t2.val\\n        t1.left = self.mergeTrees(t1.left, t2.left)\\n        t1.right = self.mergeTrees(t1.right, t2.right)\\n        return t1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104355,
                "title": "python-solution-with-detailed-explanation",
                "content": "**Merge Two Binary Trees** https://leetcode.com/problems/merge-two-binary-trees/description/\\n\\n**Simple Recursive Solution**\\n* If t1 and t2 are not None, then create a new merged tree with root as t1.val+t2.val and merge the left and right sub-trees to create the left and right sub-tree for the root.\\n* If either t1 or t2 are None, then simply return the non-None subtree for the merge.\\n* Time complexity is O(min(n,m)) and Space complexity should be O(min(h1, h2)). This part requires careful thought !.\\n\\n```\\nclass Solution:\\n    def helper(self, t1, t2):\\n        if t1 is None or t2 is None:\\n            return t1 or t2\\n        else:\\n            x = TreeNode(t1.val+t2.val)\\n            x.left = self.helper(t1.left, t2.left)\\n            x.right = self.helper(t1.right, t2.right)\\n            return x\\n    \\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        return self.helper(t1, t2)\\n```\\n\\n**Iterative solution to merge**\\n* The key to write an iterative solution is to consider constructing the merged tree into t1 directly.\\n* Use a stack and push t1,t2 into the stack. Now iterate until stack is not empty.\\n* Pop the stack and add the value of t2 into t1. Now test if t1.left is None or t2.left is None. If either is None, attach the non None subtree to t1.left. If both are not None, push t1.left, t2.left on the stack. Repeat for t1.right and t2.right.\\n* Time complexity is O(min(n,m)) and Space Complexity is O(min(h1,h2)).\\n```\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None or t2 is None:\\n            return t1 or t2\\n        else:\\n            root = t1\\n            st = [(t1,t2)]\\n            while st:\\n                t1, t2 = st.pop()\\n                t1.val += t2.val\\n                if t1.left is None or t2.left is None:\\n                    t1.left = t1.left or t2.left\\n                else:\\n                    st.append((t1.left, t2.left))\\n                if t1.right is None or t2.right is None:\\n                    t1.right = t1.right or t2.right\\n                else:\\n                    st.append((t1.right, t2.right))\\n            return root\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def helper(self, t1, t2):\\n        if t1 is None or t2 is None:\\n            return t1 or t2\\n        else:\\n            x = TreeNode(t1.val+t2.val)\\n            x.left = self.helper(t1.left, t2.left)\\n            x.right = self.helper(t1.right, t2.right)\\n            return x\\n    \\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        return self.helper(t1, t2)\\n```\n```\\nclass Solution:\\n    def mergeTrees(self, t1, t2):\\n        \"\"\"\\n        :type t1: TreeNode\\n        :type t2: TreeNode\\n        :rtype: TreeNode\\n        \"\"\"\\n        if t1 is None or t2 is None:\\n            return t1 or t2\\n        else:\\n            root = t1\\n            st = [(t1,t2)]\\n            while st:\\n                t1, t2 = st.pop()\\n                t1.val += t2.val\\n                if t1.left is None or t2.left is None:\\n                    t1.left = t1.left or t2.left\\n                else:\\n                    st.append((t1.left, t2.left))\\n                if t1.right is None or t2.right is None:\\n                    t1.right = t1.right or t2.right\\n                else:\\n                    st.append((t1.right, t2.right))\\n            return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104407,
                "title": "runtime-beat-100-6-lines-java-recursive-solution",
                "content": "\\n\\tpublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n\\t\\tif (t1 == null) return t2;\\n\\t\\tif (t2 == null) return t1;\\n\\n\\t\\tTreeNode temp = new TreeNode(t1.val + t2.val);\\n\\t\\ttemp.left = mergeTrees(t1.left, t2.left);\\n\\t\\ttemp.right = mergeTrees(t1.right, t2.right);\\n\\n\\t\\treturn temp;\\n\\t}",
                "solutionTags": [],
                "code": "\\n\\tpublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n\\t\\tif (t1 == null) return t2;\\n\\t\\tif (t2 == null) return t1;\\n\\n\\t\\tTreeNode temp = new TreeNode(t1.val + t2.val);\\n\\t\\ttemp.left = mergeTrees(t1.left, t2.left);\\n\\t\\ttemp.right = mergeTrees(t1.right, t2.right);\\n\\n\\t\\treturn temp;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3788509,
                "title": "4-liner-c-inplace-recursive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are merging root 2 into our root 1.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(logn)$$\\n<!-- Add your space complexity here, e.g. $$O(logn)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == nullptr || root2 == nullptr) return root1?root1:root2;\\n        root1 -> val += root2 -> val;\\n        root1 -> left = mergeTrees(root1 -> left , root2 ->left);\\n        root1 -> right = mergeTrees(root1 -> right , root2 -> right);\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == nullptr || root2 == nullptr) return root1?root1:root2;\\n        root1 -> val += root2 -> val;\\n        root1 -> left = mergeTrees(root1 -> left , root2 ->left);\\n        root1 -> right = mergeTrees(root1 -> right , root2 -> right);\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3280925,
                "title": "c-solution",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL and root2 == NULL) return NULL;\\n        if(!root2) return root1;\\n        if(!root1) return root2;\\n        root1->val = root1->val + root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL and root2 == NULL) return NULL;\\n        if(!root2) return root1;\\n        if(!root1) return root2;\\n        root1->val = root1->val + root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3253566,
                "title": "very-easy-solution-python-uwu",
                "content": "\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n\\n        return root1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n\\n        root1.val += root2.val\\n        root1.left = self.mergeTrees(root1.left, root2.left)\\n        root1.right = self.mergeTrees(root1.right, root2.right)\\n\\n        return root1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3169102,
                "title": "js-solution-recursion",
                "content": "# Intuition\\nCreate a new node with the sum of the values. Recursively call the main function with the left and right children, passing the result of each call as the left and right children of the new node.\\n\\n# Complexity\\n- Time complexity:\\nO(n) where n is the number of nodes of the larger tree\\n\\n- Space complexity:\\nO(h) where h is the height of the taller tree\\n\\n# Code\\n```\\nconst mergeTrees = (root1, root2) => {\\n    // base case: if one is null then return the other.\\n    if (!root1 || !root2) return root1 || root2\\n\\n    let node = new TreeNode(root1.val + root2.val)\\n    \\n    node.left = mergeTrees(root1.left, root2.left)\\n    node.right = mergeTrees(root1.right, root2.right)\\n\\n    return node\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst mergeTrees = (root1, root2) => {\\n    // base case: if one is null then return the other.\\n    if (!root1 || !root2) return root1 || root2\\n\\n    let node = new TreeNode(root1.val + root2.val)\\n    \\n    node.left = mergeTrees(root1.left, root2.left)\\n    node.right = mergeTrees(root1.right, root2.right)\\n\\n    return node\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3068880,
                "title": "merge-two-b3-best-python-o-n-time-memory-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        queue = [(root1, root2)]\\n        \\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        \\n        root1.val += root2.val\\n\\n        while queue:\\n            node1, node2 = queue.pop(0)\\n            \\n            if node2:\\n                if node2.right:\\n                    if not node1.right:\\n                        node1.right = node2.right\\n                    else:\\n                        node1.right.val += node2.right.val\\n                        queue.append((node1.right, node2.right))\\n                if node2.left:\\n                    if not node1.left:\\n                        node1.left = node2.left\\n                    else:\\n                        node1.left.val += node2.left.val\\n                        queue.append((node1.left, node2.left))\\n        return root1                \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        queue = [(root1, root2)]\\n        \\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        \\n        root1.val += root2.val\\n\\n        while queue:\\n            node1, node2 = queue.pop(0)\\n            \\n            if node2:\\n                if node2.right:\\n                    if not node1.right:\\n                        node1.right = node2.right\\n                    else:\\n                        node1.right.val += node2.right.val\\n                        queue.append((node1.right, node2.right))\\n                if node2.left:\\n                    if not node1.left:\\n                        node1.left = node2.left\\n                    else:\\n                        node1.left.val += node2.left.val\\n                        queue.append((node1.left, node2.left))\\n        return root1                \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3060973,
                "title": "c-simple-readable-solution-time-o-n-space-o-1",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode root1, TreeNode root2)\\n    {\\n        if (root1 == null & root2 == null) return null;\\n        if (root1 == null) return root2;\\n        if (root2 == null) return root1;\\n\\n        var left = MergeTrees(root1.left, root2.left);\\n        var right = MergeTrees(root1.right, root2.right);\\n\\n        if (root1.left != left) root1.left = left;\\n        if (root1.right != right) root1.right = right;\\n\\n        root1.val += root2.val;\\n\\n        return root1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode root1, TreeNode root2)\\n    {\\n        if (root1 == null & root2 == null) return null;\\n        if (root1 == null) return root2;\\n        if (root2 == null) return root1;\\n\\n        var left = MergeTrees(root1.left, root2.left);\\n        var right = MergeTrees(root1.right, root2.right);\\n\\n        if (root1.left != left) root1.left = left;\\n        if (root1.right != right) root1.right = right;\\n\\n        root1.val += root2.val;\\n\\n        return root1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2859743,
                "title": "easy-c-recursive-solution-with-explanation-for-begginers",
                "content": "\\n# Approach\\nFirst you need to check if both nodes is nulls, if they are - you can\\'t merge them (this branch is over for both trees) so you have to return null (this\\'ll stop recursion).\\n\\nIf any of nodes (left or right) is not empty - create new node and calculate sum (replace null node with 0), don\\'t forget to use brackets (root1?.val ?? 0) + (root2?.val ?? 0).\\n\\nThen need to calculate child nodes, method calls himself for left pair and right pair of nodes (some of them can be null - it\\'s okay, programm\\'ll go deepper just for one of branches). \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null && root2 == null){\\n            return null;\\n        }\\n        TreeNode result = new TreeNode((root1?.val ?? 0) + (root2?.val ?? 0));\\n        result.left = MergeTrees(root1?.left, root2?.left);\\n        result.right = MergeTrees(root1?.right, root2?.right);\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Tree",
                    "Depth-First Search",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode MergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null && root2 == null){\\n            return null;\\n        }\\n        TreeNode result = new TreeNode((root1?.val ?? 0) + (root2?.val ?? 0));\\n        result.left = MergeTrees(root1?.left, root2?.left);\\n        result.right = MergeTrees(root1?.right, root2?.right);\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2634265,
                "title": "java-solution-time-complexity-o-n-space-complexity-o-h-h-is-tree-height",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        // if both are null, return null\\n        if(root1 == null && root2 == null) return null;\\n        \\n        // if root1 is null, then return root2\\n        if(root1 == null) return root2;\\n        \\n        // if root2 is null then return root1\\n        if(root2 == null) return root1;\\n        \\n        // if both are present, then create a new node with both value\\n        TreeNode root = new TreeNode(root1.val + root2.val);\\n        \\n        // call for left side, whatever gets add it to the left side of the root\\n        root.left = mergeTrees(root1.left, root2.left);\\n        \\n        // call for right side, whatever gets add it to the right side of the root\\n        root.right = mergeTrees(root1.right, root2.right);\\n        \\n        // return root\\n        return root;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        // if both are null, return null\\n        if(root1 == null && root2 == null) return null;\\n        \\n        // if root1 is null, then return root2\\n        if(root1 == null) return root2;\\n        \\n        // if root2 is null then return root1\\n        if(root2 == null) return root1;\\n        \\n        // if both are present, then create a new node with both value\\n        TreeNode root = new TreeNode(root1.val + root2.val);\\n        \\n        // call for left side, whatever gets add it to the left side of the root\\n        root.left = mergeTrees(root1.left, root2.left);\\n        \\n        // call for right side, whatever gets add it to the right side of the root\\n        root.right = mergeTrees(root1.right, root2.right);\\n        \\n        // return root\\n        return root;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2230922,
                "title": "java-solution-steps-tc-and-sc-explained-code-is-kept-simple",
                "content": "```\\nclass Solution {\\n\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n\\t\\n        //we merge trees in first tree(root1)\\n        \\n        //whenever we find a null we return and connect the  other root\\n        if(root1 == null) {\\n            return root2;\\n        }\\n        \\n        if(root2 == null) {\\n            return root1;\\n        }\\n        \\n        //if both are not null then we add the values to first tree\\n        root1.val += root2.val;\\n        \\n        //recursive call to traverse the whole tree\\n        root1.left = mergeTrees(root1.left, root2.left);\\n        root1.right = mergeTrees(root1.right, root2.right);\\n        \\n        return root1;\\n    }\\n}\\n\\n//Time Complexity: O(m) m is the minimum number of nodes in the smallest tree of two\\n//Space Complexity: O(m) depth of recursion tree can go upto m in case of skewed tree and in average case it will be O(logm)\\n//Please upvote the solution if you like it",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n\\t\\n        //we merge trees in first tree(root1)\\n        \\n        //whenever we find a null we return and connect the  other root\\n        if(root1 == null) {\\n            return root2;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2225480,
                "title": "javascript-simple-solution",
                "content": "```\\nvar mergeTrees = function(root1, root2) {\\n    if (root1 === null) return root2;\\n    if (root2 === null) return root1;\\n    root1.val += root2.val;\\n    \\n    root1.left = mergeTrees(root1.left, root2.left);\\n    root1.right = mergeTrees(root1.right, root2.right);\\n    return root1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar mergeTrees = function(root1, root2) {\\n    if (root1 === null) return root2;\\n    if (root2 === null) return root1;\\n    root1.val += root2.val;\\n    \\n    root1.left = mergeTrees(root1.left, root2.left);\\n    root1.right = mergeTrees(root1.right, root2.right);\\n    return root1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1884388,
                "title": "c-recursive-solution-69-o-n",
                "content": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if (root1 != NULL && root2 != NULL)\\n        root1->val += root2->val;\\n    else if (root1 == NULL)\\n        return root2;\\n    else\\n        return root1;\\n\\n    root1->left = mergeTrees(root1->left, root2->left);\\n    root1->right = mergeTrees(root1->right, root2->right); \\n    return root1;\\n}\\n```\\n\\n**If this was helpful, don\\'t hesitate to upvote! :)**\\nHave a nice day!",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if (root1 != NULL && root2 != NULL)\\n        root1->val += root2->val;\\n    else if (root1 == NULL)\\n        return root2;\\n    else\\n        return root1;\\n\\n    root1->left = mergeTrees(root1->left, root2->left);\\n    root1->right = mergeTrees(root1->right, root2->right); \\n    return root1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1883652,
                "title": "rust-4ms-2-4-mb",
                "content": "Runtime: 4 ms, faster than 97.83% of Rust online submissions for Merge Two Binary Trees.\\nMemory Usage: 2.4 MB, less than 28.26% of Rust online submissions for Merge Two Binary Trees.\\n\\n```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\ntype Node = Option<Rc<RefCell<TreeNode>>>;\\nimpl Solution {\\n    pub fn merge_trees(root1: Node, root2: Node) -> Node {\\n        \\n        match (root1, root2) {\\n            (Some(n1), Some(n2)) =>  {\\n                let (n1, n2) = (n1.borrow(), n2.borrow());\\n                let mut root = TreeNode::new(n1.val + n2.val);\\n                root.left =  Self::merge_trees(n1.left.clone(), n2.left.clone());\\n                root.right = Self::merge_trees(n1.right.clone(), n2.right.clone());\\n                Some(Rc::new(RefCell::new(root)))\\n            }\\n            (None, Some(n)) | (Some(n), None) => return Some(n),\\n            (None, None) => return None\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\ntype Node = Option<Rc<RefCell<TreeNode>>>;\\nimpl Solution {\\n    pub fn merge_trees(root1: Node, root2: Node) -> Node {\\n        \\n        match (root1, root2) {\\n            (Some(n1), Some(n2)) =>  {\\n                let (n1, n2) = (n1.borrow(), n2.borrow());\\n                let mut root = TreeNode::new(n1.val + n2.val);\\n                root.left =  Self::merge_trees(n1.left.clone(), n2.left.clone());\\n                root.right = Self::merge_trees(n1.right.clone(), n2.right.clone());\\n                Some(Rc::new(RefCell::new(root)))\\n            }\\n            (None, Some(n)) | (Some(n), None) => return Some(n),\\n            (None, None) => return None\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1845508,
                "title": "python-short-faster-than-99-76-ms",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1 or not root2: return root1 or root2\\n        root = TreeNode(root1.val + root2.val)\\n        root.left = self.mergeTrees(root1.left, root2.left)\\n        root.right = self.mergeTrees(root1.right, root2.right)\\n        return root\\n```",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if not root1 or not root2: return root1 or root2\\n        root = TreeNode(root1.val + root2.val)\\n        root.left = self.mergeTrees(root1.left, root2.left)\\n        root.right = self.mergeTrees(root1.right, root2.right)\\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1832557,
                "title": "c-easy-to-understand-approach",
                "content": "```\\nclass Solution {\\npublic:\\n     TreeNode* helper(TreeNode* root1, TreeNode* root2) {\\n             if(!root1 && !root2) return NULL;\\n             if(root1 && !root2) return root1;\\n             if(!root1 && root2) return root2;\\n             TreeNode* result= new TreeNode(root1->val+root2->val);\\n             result->left=helper(root1->left, root2->left);\\n             result->right=helper(root1->right,root2->right);            \\n             return result;             \\n         }   \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {      \\n        return helper(root1,root2);      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     TreeNode* helper(TreeNode* root1, TreeNode* root2) {\\n             if(!root1 && !root2) return NULL;\\n             if(root1 && !root2) return root1;\\n             if(!root1 && root2) return root2;\\n             TreeNode* result= new TreeNode(root1->val+root2->val);\\n             result->left=helper(root1->left, root2->left);\\n             result->right=helper(root1->right,root2->right);            \\n             return result;             \\n         }   \\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {      \\n        return helper(root1,root2);      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1810192,
                "title": "java-100-faster-solution",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null) return root2;\\n        if(root2 == null) return root1;\\n        \\n        root2.val += root1.val;\\n        root2.left = mergeTrees(root1.left, root2.left);\\n        root2.right = mergeTrees(root1.right, root2.right);\\n\\n        return root2;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\\n        if(root1 == null) return root2;\\n        if(root2 == null) return root1;\\n        \\n        root2.val += root1.val;\\n        root2.left = mergeTrees(root1.left, root2.left);\\n        root2.right = mergeTrees(root1.right, root2.right);\\n\\n        return root2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1795013,
                "title": "bfs-solution-o-n-easy-to-understand-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL) return root2;\\n        if(root2 == NULL) return root1;\\n        if(root1==NULL && root2 ==NULL) return NULL;\\n        \\n        queue<pair<TreeNode*,TreeNode*>>q;\\n        q.push({root1,root2});\\n        \\n        while(!q.empty()){\\n            auto temp = q.front();\\n            q.pop();\\n            \\n            /* if the right subtree is not null or the root of the right sub-tree (either left or right isnt null)\\n               then we will process further */ \\n            \\n            if(temp.second!=NULL){\\n                temp.first->val += temp.second->val;\\n            \\n            \\n            /* if the left node of the first subtree is null we can just point the left node of second tree to the\\n               left node of the first subtree */ \\n            \\n            if(temp.first->left == NULL){\\n                temp.first->left = temp.second->left;\\n            }\\n            else{\\n                q.push({temp.first->left,temp.second->left});\\n            }\\n            \\n             /* if the right node of the first subtree is null we can just point the right node of second tree to the\\n               right node of the first subtree */ \\n            \\n            if(temp.first->right == NULL){\\n                temp.first->right = temp.second->right;\\n            }\\n            else{\\n                q.push({temp.first->right,temp.second->right});\\n            }\\n            }\\n        }\\n        return root1;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Breadth-First Search",
                    "Queue",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL) return root2;\\n        if(root2 == NULL) return root1;\\n        if(root1==NULL && root2 ==NULL) return NULL;\\n        \\n        queue<pair<TreeNode*,TreeNode*>>q;\\n        q.push({root1,root2}",
                "codeTag": "Java"
            },
            {
                "id": 1751392,
                "title": "c-easy-o-n-7-line-code-solution",
                "content": "```\\n\\tTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!(root1 || root2)) return NULL;\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        if(root2) root1->val = root1->val + root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Tree",
                    "Binary Tree"
                ],
                "code": "```\\n\\tTreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(!(root1 || root2)) return NULL;\\n        if(!root1) return root2;\\n        if(!root2) return root1;\\n        if(root2) root1->val = root1->val + root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1689471,
                "title": "python-simple-solution",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if(root1==None):\\n            return root2\\n        if(root2==None):\\n            return root1\\n        root1.val=root1.val+root2.val\\n        root1.left=self.mergeTrees(root1.left,root2.left)\\n        root1.right=self.mergeTrees(root1.right,root2.right)\\n        return root1",
                "solutionTags": [
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:\\n        if(root1==None):\\n            return root2\\n        if(root2==None):\\n            return root1\\n        root1.val=root1.val+root2.val\\n        root1.left=self.mergeTrees(root1.left,root2.left)\\n        root1.right=self.mergeTrees(root1.right,root2.right)\\n        return root1",
                "codeTag": "Java"
            },
            {
                "id": 1684909,
                "title": "short-fast-c-code-6-lines-recursive-dfs-99-86-faster",
                "content": "**Please Upvote if  You Like>> :)**\\n```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL) return root2;\\n        if(root2 == NULL) return root1;\\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL) return root2;\\n        if(root2 == NULL) return root1;\\n        root1->val += root2->val;\\n        root1->left = mergeTrees(root1->left, root2->left);\\n        root1->right = mergeTrees(root1->right, root2->right);\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1674491,
                "title": "very-short-recursive-implementation-in-ruby",
                "content": "```\\ndef merge_trees(root1, root2)\\n    return root2 if root1.nil?\\n    return root1 if root2.nil?\\n    TreeNode.new(root1.val + root2.val,\\n        merge_trees(root1.left, root2.left),\\n        merge_trees(root1.right, root2.right)\\n    )\\nend\\n```",
                "solutionTags": [
                    "Ruby",
                    "Recursion"
                ],
                "code": "```\\ndef merge_trees(root1, root2)\\n    return root2 if root1.nil?\\n    return root1 if root2.nil?\\n    TreeNode.new(root1.val + root2.val,\\n        merge_trees(root1.left, root2.left),\\n        merge_trees(root1.right, root2.right)\\n    )\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1470493,
                "title": "c-recursive-3-coding-ways",
                "content": "\\n```\\n//In this we have created a new function and done standard recursive calls\\nclass Solution {\\npublic:\\n    TreeNode* util(TreeNode* root1,TreeNode *root2)\\n    {\\n        TreeNode *root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val);\\n            root->left=util(root1->left,root2->left);\\n            root->right=util(root1->right,root2->right);            \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val);\\n            root->left=util(NULL,root2->left);\\n            root->right=util(NULL,root2->right);            \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val);\\n            root->left=util(root1->left,NULL);\\n            root->right=util(root1->right,NULL);            \\n        }\\n        return root;\\n        \\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        TreeNode* root=util(root1,root2); \\n        return root;\\n    }\\n};\\n```\\n```\\n//In this we are utilising the given constructors for recursive calls\\nclass Solution {\\npublic:\\n    TreeNode* util(TreeNode* root1,TreeNode *root2)\\n    {\\n        TreeNode *root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val,util(root1->left,root2->left),util(root1->right,root2->right));      \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val,util(NULL,root2->left),util(NULL,root2->right)); \\n                        \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val,util(root1->left,NULL),util(root1->right,NULL)); \\n                       \\n        }\\n        return root;\\n        \\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        TreeNode* root=util(root1,root2); \\n        return root;\\n    }\\n};\\n```\\n```\\n//In this we are not creating a util function and are also utilising the given  constructors\\nclass Solution {\\npublic:\\n     TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) \\n     {\\n         TreeNode* root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val,mergeTrees(root1->left,root2->left),mergeTrees(root1->right,root2->right));      \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val,mergeTrees(NULL,root2->left),mergeTrees(NULL,root2->right)); \\n                        \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val,mergeTrees(root1->left,NULL),mergeTrees(root1->right,NULL)); \\n                       \\n        }\\n        return root;\\n    }\\n};\\n````",
                "solutionTags": [],
                "code": "```\\n//In this we have created a new function and done standard recursive calls\\nclass Solution {\\npublic:\\n    TreeNode* util(TreeNode* root1,TreeNode *root2)\\n    {\\n        TreeNode *root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val);\\n            root->left=util(root1->left,root2->left);\\n            root->right=util(root1->right,root2->right);            \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val);\\n            root->left=util(NULL,root2->left);\\n            root->right=util(NULL,root2->right);            \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val);\\n            root->left=util(root1->left,NULL);\\n            root->right=util(root1->right,NULL);            \\n        }\\n        return root;\\n        \\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        TreeNode* root=util(root1,root2); \\n        return root;\\n    }\\n};\\n```\n```\\n//In this we are utilising the given constructors for recursive calls\\nclass Solution {\\npublic:\\n    TreeNode* util(TreeNode* root1,TreeNode *root2)\\n    {\\n        TreeNode *root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val,util(root1->left,root2->left),util(root1->right,root2->right));      \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val,util(NULL,root2->left),util(NULL,root2->right)); \\n                        \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val,util(root1->left,NULL),util(root1->right,NULL)); \\n                       \\n        }\\n        return root;\\n        \\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        TreeNode* root=util(root1,root2); \\n        return root;\\n    }\\n};\\n```\n```\\n//In this we are not creating a util function and are also utilising the given  constructors\\nclass Solution {\\npublic:\\n     TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) \\n     {\\n         TreeNode* root;\\n        if(!root1&&!root2)return NULL;\\n        else if(root1&&root2)\\n        {\\n            root=new TreeNode(root1->val+root2->val,mergeTrees(root1->left,root2->left),mergeTrees(root1->right,root2->right));      \\n        }\\n        else if(!root1)\\n        {\\n            root=new TreeNode(root2->val,mergeTrees(NULL,root2->left),mergeTrees(NULL,root2->right)); \\n                        \\n        }\\n        else\\n        {\\n            root=new TreeNode(root1->val,mergeTrees(root1->left,NULL),mergeTrees(root1->right,NULL)); \\n                       \\n        }\\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1450469,
                "title": "c-simple-dfs-solution-99-faster-than-other-c-solution",
                "content": "Simple DFS based solution.\\n* I merge **root2 into root1**, and at the end **return root1**.\\n* **DRY RUN WITH AN EXAMPLE FOR PROPER UNDERSTANDING**.\\n```\\nclass Solution {\\npublic:\\n    void merge(TreeNode* root1,TreeNode* root2){\\n        if(root1 == NULL && root2 == NULL)\\n            return;\\n        if(root1 == NULL || root2 == NULL)\\n            return;\\n        \\n\\t\\t// Add the value of the current node of root2 into root1 (if both root1 & root2 are not NULL) \\n        root1->val += root2->val;\\n\\t\\t\\n\\t    merge(root1->left,root2->left);\\n\\t\\t\\n\\t\\t// In this case we just attach the extra part in root2 into root1, if any (left part)\\n        if(root1->left == NULL && root2->left != NULL){\\n            TreeNode* curr = root2->left;\\n            root1->left = curr;\\n        }\\n\\t\\t\\n        merge(root1->right,root2->right);\\n\\t\\t\\n\\t\\t// In this case we just attach the extra part in root2 into root1, if any (right part)\\n        if(root1->right == NULL && root2->right != NULL){\\n            TreeNode* curr = root2->right;\\n            root1->right = curr;\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL && root2 == NULL)\\n            return NULL;\\n        if(root1 == NULL)\\n            return root2;\\n        if(root2 == NULL)\\n            return root1;\\n        merge(root1,root2);\\n        return root1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Depth-First Search",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void merge(TreeNode* root1,TreeNode* root2){\\n        if(root1 == NULL && root2 == NULL)\\n            return;\\n        if(root1 == NULL || root2 == NULL)\\n            return;\\n        \\n\\t\\t// Add the value of the current node of root2 into root1 (if both root1 & root2 are not NULL) \\n        root1->val += root2->val;\\n\\t\\t\\n\\t    merge(root1->left,root2->left);\\n\\t\\t\\n\\t\\t// In this case we just attach the extra part in root2 into root1, if any (left part)\\n        if(root1->left == NULL && root2->left != NULL){\\n            TreeNode* curr = root2->left;\\n            root1->left = curr;\\n        }\\n\\t\\t\\n        merge(root1->right,root2->right);\\n\\t\\t\\n\\t\\t// In this case we just attach the extra part in root2 into root1, if any (right part)\\n        if(root1->right == NULL && root2->right != NULL){\\n            TreeNode* curr = root2->right;\\n            root1->right = curr;\\n        }\\n    }\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n        if(root1 == NULL && root2 == NULL)\\n            return NULL;\\n        if(root1 == NULL)\\n            return root2;\\n        if(root2 == NULL)\\n            return root1;\\n        merge(root1,root2);\\n        return root1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1429959,
                "title": "c-recursive-solution-time-complexity-o-n",
                "content": "class Solution {\\n    \\npublic:\\n    //Time complexity: O(n)\\n    //Space complexity: O(n)\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n      \\n        if(root1 ==NULL) return root2;\\n        if(root2 ==NULL) return root1;\\n        root1->val+= root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        return root1;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\n    \\npublic:\\n    //Time complexity: O(n)\\n    //Space complexity: O(n)\\n    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {\\n      \\n        if(root1 ==NULL) return root2;\\n        if(root2 ==NULL) return root1;\\n        root1->val+= root2->val;\\n        root1->left = mergeTrees(root1->left,root2->left);\\n        root1->right = mergeTrees(root1->right,root2->right);\\n        return root1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1330085,
                "title": "c-0-n-easy",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        \\n        if(!t1)\\n            return t2;\\n        if(!t2)\\n            return t1;\\n        \\n        t1->val+=t2->val;\\n        t1->left=mergeTrees(t1->left,t2->left);\\n        t1->right=mergeTrees(t1->right,t2->right);\\n        \\n        return t1;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        \\n        if(!t1)\\n            return t2;\\n        if(!t2)\\n            return t1;\\n        \\n        t1->val+=t2->val;\\n        t1->left=mergeTrees(t1->left,t2->left);\\n        t1->right=mergeTrees(t1->right,t2->right);\\n        \\n        return t1;\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1165187,
                "title": "python-87-percent-faster-easy-to-understand-it-should-be-atleast-medium",
                "content": "```\\ndef mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None or root2 is None:\\n            return root1 if root2 is None else root2\\n        root = self.helper(root1,root2)\\n        return root\\n    \\n    def helper(self,root1,root2):\\n        if root1 is None or root2 is None:\\n            return\\n        temp = root1.val+root2.val\\n        node = TreeNode(temp)\\n        node.left = self.helper(root1.left,root2.left)\\n        if root1.left is not None and root2.left is None:\\n            temp = root1.left\\n            root1.left = None\\n            node.left = temp\\n            \\n        elif root1.left is None and root2.left is not None:\\n            temp = root2.left\\n            root2.left = None\\n            node.left = temp\\n            \\n        node.right = self.helper(root1.right,root2.right)\\n        if root1.right is not None and root2.right is None:\\n            temp = root1.right\\n            root1.right = None\\n            node.right = temp\\n        elif root1.right is None and root2.right is not None:\\n            temp = root2.right\\n            root2.right = None\\n            node.right = temp\\n            \\n        return node\\n```\\nThe code looks intimidating but trust me I was intimidated by the level given to the problem. It should be atleast medium. \\nThe logic is do dfs simultaneously on both the trees. The momemt you find a none return and then just attach the subtree of current node which is not none to our resultant tree. \\nDo let me know if you face any difficulty. \\n**Thanks**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Tree",
                    "Depth-First Search",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\ndef mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None or root2 is None:\\n            return root1 if root2 is None else root2\\n        root = self.helper(root1,root2)\\n        return root\\n    \\n    def helper(self,root1,root2):\\n        if root1 is None or root2 is None:\\n            return\\n        temp = root1.val+root2.val\\n        node = TreeNode(temp)\\n        node.left = self.helper(root1.left,root2.left)\\n        if root1.left is not None and root2.left is None:\\n            temp = root1.left\\n            root1.left = None\\n            node.left = temp\\n            \\n        elif root1.left is None and root2.left is not None:\\n            temp = root2.left\\n            root2.left = None\\n            node.left = temp\\n            \\n        node.right = self.helper(root1.right,root2.right)\\n        if root1.right is not None and root2.right is None:\\n            temp = root1.right\\n            root1.right = None\\n            node.right = temp\\n        elif root1.right is None and root2.right is not None:\\n            temp = root2.right\\n            root2.right = None\\n            node.right = temp\\n            \\n        return node\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108949,
                "title": "no-auxiliary-space-easy-to-understand-beats-99-solutions",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None or root2 is None:\\n            return root1 or root2\\n        self.mergeTreesHelper(None, root1, root2)\\n        return root1\\n    def mergeTreesHelper(self, parent, nodeOne, nodeTwo,):\\n        if nodeOne and nodeTwo:\\n            nodeOne.val += nodeTwo.val\\n            nodeOne.left = self.mergeTreesHelper(nodeOne, nodeOne.left, nodeTwo.left)\\n            nodeOne.right = self.mergeTreesHelper(nodeOne, nodeOne.right, nodeTwo.right)\\n            return nodeOne\\n        return nodeOne or nodeTwo\\n\\t```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if root1 is None or root2 is None:\\n            return root1 or root2\\n        self.mergeTreesHelper(None, root1, root2)\\n        return root1\\n    def mergeTreesHelper(self, parent, nodeOne, nodeTwo,):\\n        if nodeOne and nodeTwo:\\n            nodeOne.val += nodeTwo.val\\n            nodeOne.left = self.mergeTreesHelper(nodeOne, nodeOne.left, nodeTwo.left)\\n            nodeOne.right = self.mergeTreesHelper(nodeOne, nodeOne.right, nodeTwo.right)\\n            return nodeOne\\n        return nodeOne or nodeTwo\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 1064426,
                "title": "python-iterative",
                "content": "```\\n    from collections import deque\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        stack = deque()\\n        stack.append((root1, root2))\\n        while stack:\\n            first, second = stack.pop()\\n            if first and second:\\n                first.val += second.val\\n                if first.left and second.left:\\n                    stack.append((first.left, second.left))\\n                elif not first.left:\\n                    first.left = second.left\\n                if first.right and second.right:\\n                    stack.append((first.right, second.right))\\n                elif not first.right:\\n                    first.right = second.right\\n        return root1\\n```",
                "solutionTags": [],
                "code": "```\\n    from collections import deque\\n    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:\\n        if not root1:\\n            return root2\\n        if not root2:\\n            return root1\\n        stack = deque()\\n        stack.append((root1, root2))\\n        while stack:\\n            first, second = stack.pop()\\n            if first and second:\\n                first.val += second.val\\n                if first.left and second.left:\\n                    stack.append((first.left, second.left))\\n                elif not first.left:\\n                    first.left = second.left\\n                if first.right and second.right:\\n                    stack.append((first.right, second.right))\\n                elif not first.right:\\n                    first.right = second.right\\n        return root1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 972904,
                "title": "c-48ms-87-breadth-traversal-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n      if(!t1 && !t2) return NULL;\\n      if(!t1) return t2;\\n      if(!t2) return t1;                                  //we will consider tree t1 as tree for answer\\n      \\n      queue <TreeNode*> q1,q2;\\n      q1.push(t1);\\n      q2.push(t2);\\n      while(!q1.empty()){\\n        TreeNode *tmp1 = q1.front(),  *tmp2 = q2.front();    \\n        q1.pop();q2.pop();\\n        tmp1->val += tmp2->val;                             //add for node val tree t1 node val from tree t2\\n        \\n        if(tmp1->left && tmp2->left){q1.push(tmp1->left);q2.push(tmp2->left);}                              // if we have nodes in the same place in trees put in our traversal\\n        else if(tmp2->left){tmp1->left = tmp2->left;}                        // if we have node only t1 tree we will ignore it , else we create left subtree of tree t1 is equal left subtree of tree t2  \\n                                             \\n        if(tmp1->right && tmp2->right){q1.push(tmp1->right);q2.push(tmp2->right);}                                                //for right branch consideration is similary\\n        else if(tmp2->right){tmp1->right = tmp2->right;}\\n      }\\n      return t1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n      if(!t1 && !t2) return NULL;\\n      if(!t1) return t2;\\n      if(!t2) return t1;                                  //we will consider tree t1 as tree for answer\\n      \\n      queue <TreeNode*> q1,q2;\\n      q1.push(t1);\\n      q2.push(t2);\\n      while(!q1.empty()){\\n        TreeNode *tmp1 = q1.front(),  *tmp2 = q2.front();    \\n        q1.pop();q2.pop();\\n        tmp1->val += tmp2->val;                             //add for node val tree t1 node val from tree t2\\n        \\n        if(tmp1->left && tmp2->left){q1.push(tmp1->left);q2.push(tmp2->left);}                              // if we have nodes in the same place in trees put in our traversal\\n        else if(tmp2->left){tmp1->left = tmp2->left;}                        // if we have node only t1 tree we will ignore it , else we create left subtree of tree t1 is equal left subtree of tree t2  \\n                                             \\n        if(tmp1->right && tmp2->right){q1.push(tmp1->right);q2.push(tmp2->right);}                                                //for right branch consideration is similary\\n        else if(tmp2->right){tmp1->right = tmp2->right;}\\n      }\\n      return t1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 938214,
                "title": "easy-js-solution",
                "content": "```\\n/*\\nUse DFS to traverse both trees simultaneously\\nFor overlapping nodes, add value to first tree (so we don\\'t use extra space)\\nFor not-overlapping nodes, take one of the NOT-NULL nodes and append it to first tree\\nRecursively perform this for every node of both trees\\n*/\\nvar mergeTrees = function(root1, root2) {\\n    return dfs(root1, root2);\\n    // T.C: O(min(M, N))\\n    // S.C: O(min(H1, H2))\\n};\\n\\nconst dfs = (root1, root2) => {\\n    if (!root1 && !root2) {\\n        return null;\\n    }\\n    if (!root1 || !root2) {\\n        return root1 || root2;\\n    }\\n    root1.val += root2.val;\\n    root1.left = dfs(root1.left, root2.left);\\n    root1.right = dfs(root1.right, root2.right);\\n    return root1;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/*\\nUse DFS to traverse both trees simultaneously\\nFor overlapping nodes, add value to first tree (so we don\\'t use extra space)\\nFor not-overlapping nodes, take one of the NOT-NULL nodes and append it to first tree\\nRecursively perform this for every node of both trees\\n*/\\nvar mergeTrees = function(root1, root2) {\\n    return dfs(root1, root2);\\n    // T.C: O(min(M, N))\\n    // S.C: O(min(H1, H2))\\n};\\n\\nconst dfs = (root1, root2) => {\\n    if (!root1 && !root2) {\\n        return null;\\n    }\\n    if (!root1 || !root2) {\\n        return root1 || root2;\\n    }\\n    root1.val += root2.val;\\n    root1.left = dfs(root1.left, root2.left);\\n    root1.right = dfs(root1.right, root2.right);\\n    return root1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 925154,
                "title": "javascript-dfs",
                "content": "```\\nvar mergeTrees = function(root1, root2) {\\n  return dfs(root1, root2)\\n};\\n\\nfunction dfs(r,t){\\n  if(!r && !t) return null\\n  if(!r) return t\\n  if(!t) return r\\n  r.val += t ? t.val : 0\\n  r.left = dfs(r.left, t.left)\\n  r.right = dfs(r.right, t.right)  \\n  return r\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Depth-First Search"
                ],
                "code": "```\\nvar mergeTrees = function(root1, root2) {\\n  return dfs(root1, root2)\\n};\\n\\nfunction dfs(r,t){\\n  if(!r && !t) return null\\n  if(!r) return t\\n  if(!t) return r\\n  r.val += t ? t.val : 0\\n  r.left = dfs(r.left, t.left)\\n  r.right = dfs(r.right, t.right)  \\n  return r\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 828075,
                "title": "python-concise-recursive-solution",
                "content": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        if not t1 or not t2:\\n            return t1 or t2\\n        node = TreeNode(t1.val + t2.val)\\n        node.left = self.mergeTrees(t1.left, t2.left)\\n        node.right = self.mergeTrees(t1.right, t2.right)\\n        return node\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def mergeTrees(self, t1, t2):\\n        if not t1 or not t2:\\n            return t1 or t2\\n        node = TreeNode(t1.val + t2.val)\\n        node.left = self.mergeTrees(t1.left, t2.left)\\n        node.right = self.mergeTrees(t1.right, t2.right)\\n        return node\\n```",
                "codeTag": "Java"
            },
            {
                "id": 759130,
                "title": "java-iterative-solution-without-modifying-input-trees",
                "content": "This question becomes much harder if you\\'re not allowed to modify the input and have to solve it iteratively.\\nThis is my take: a level-order traversal on triplets of tree nodes [leftTree, rightTree, resTree] \\n```\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) {\\n            return null;\\n        }\\n        Deque<TreeNode[]> queue = new ArrayDeque<>();\\n        TreeNode res = new TreeNode();\\n        queue.push(new TreeNode[] {t1, t2, res});\\n        TreeNode[] curNodes;\\n        while (! queue.isEmpty()) {\\n            curNodes = queue.pop();\\n            if (curNodes[0] == null && curNodes[1] == null) {\\n                continue;\\n            }\\n            TreeNode[] nextLeft = new TreeNode[3];\\n            TreeNode[] nextRight = new TreeNode[3];\\n            if (curNodes[0] != null) {\\n                curNodes[2].val += curNodes[0].val;\\n                if (curNodes[0].left != null) {\\n                    curNodes[2].left = new TreeNode();\\n                }\\n                if (curNodes[0].right != null) {\\n                    curNodes[2].right = new TreeNode();\\n                }\\n                nextLeft[0] = curNodes[0].left;\\n                nextRight[0] = curNodes[0].right;\\n            }\\n            if (curNodes[1] != null) {\\n                curNodes[2].val += curNodes[1].val;\\n                if (curNodes[1].left != null && curNodes[2].left  == null) {\\n                    curNodes[2].left = new TreeNode();\\n                }\\n                if (curNodes[1].right != null && curNodes[2].right == null) {\\n                    curNodes[2].right = new TreeNode();\\n                }\\n                nextLeft[1] = curNodes[1].left;\\n                nextRight[1] = curNodes[1].right;\\n            }\\n            nextLeft[2] = curNodes[2].left;\\n            nextRight[2] = curNodes[2].right;\\n\\n            queue.push(nextLeft);\\n            queue.push(nextRight);\\n        }\\n        return res;\\n    }",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "This question becomes much harder if you\\'re not allowed to modify the input and have to solve it iteratively.\\nThis is my take: a level-order traversal on triplets of tree nodes [leftTree, rightTree, resTree] \\n```\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) {\\n            return null;\\n        }\\n        Deque<TreeNode[]> queue = new ArrayDeque<>();\\n        TreeNode res = new TreeNode();\\n        queue.push(new TreeNode[] {t1, t2, res});\\n        TreeNode[] curNodes;\\n        while (! queue.isEmpty()) {\\n            curNodes = queue.pop();\\n            if (curNodes[0] == null && curNodes[1] == null) {\\n                continue;\\n            }\\n            TreeNode[] nextLeft = new TreeNode[3];\\n            TreeNode[] nextRight = new TreeNode[3];\\n            if (curNodes[0] != null) {\\n                curNodes[2].val += curNodes[0].val;\\n                if (curNodes[0].left != null) {\\n                    curNodes[2].left = new TreeNode();\\n                }\\n                if (curNodes[0].right != null) {\\n                    curNodes[2].right = new TreeNode();\\n                }\\n                nextLeft[0] = curNodes[0].left;\\n                nextRight[0] = curNodes[0].right;\\n            }\\n            if (curNodes[1] != null) {\\n                curNodes[2].val += curNodes[1].val;\\n                if (curNodes[1].left != null && curNodes[2].left  == null) {\\n                    curNodes[2].left = new TreeNode();\\n                }\\n                if (curNodes[1].right != null && curNodes[2].right == null) {\\n                    curNodes[2].right = new TreeNode();\\n                }\\n                nextLeft[1] = curNodes[1].left;\\n                nextRight[1] = curNodes[1].right;\\n            }\\n            nextLeft[2] = curNodes[2].left;\\n            nextRight[2] = curNodes[2].right;\\n\\n            queue.push(nextLeft);\\n            queue.push(nextRight);\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 718351,
                "title": "java-simple-dfs",
                "content": "```\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        t1.val += t2.val;\\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        return t1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        t1.val += t2.val;\\n        t1.left = mergeTrees(t1.left, t2.left);\\n        t1.right = mergeTrees(t1.right, t2.right);\\n        return t1;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 711437,
                "title": "5-lines-is-all-you-need-c",
                "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 and !t2) return NULL;\\n        \\n        TreeNode *root = new TreeNode((t1 ? t1->val : 0) + (t2 ? t2->val : 0));\\n        \\n        root->left = mergeTrees(t1 ? t1->left : NULL, t2 ? t2->left : NULL);\\n        root->right = mergeTrees(t1 ? t1->right : NULL, t2 ? t2->right : NULL);\\n        \\n        return root;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {\\n        if (!t1 and !t2) return NULL;\\n        \\n        TreeNode *root = new TreeNode((t1 ? t1->val : 0) + (t2 ? t2->val : 0));\\n        \\n        root->left = mergeTrees(t1 ? t1->left : NULL, t2 ? t2->left : NULL);\\n        root->right = mergeTrees(t1 ? t1->right : NULL, t2 ? t2->right : NULL);\\n        \\n        return root;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 631415,
                "title": "java-recursive-3-lines-but-readable",
                "content": "```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        return new TreeNode(t1.val + t2.val, mergeTrees(t1.left, t2.left), mergeTrees(t1.right, t2.right));       \\n    }",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        return new TreeNode(t1.val + t2.val, mergeTrees(t1.left, t2.left), mergeTrees(t1.right, t2.right));       \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 534504,
                "title": "python-very-simple-80-ms-faster-than-98-19",
                "content": "**Intuition:**\\nWork your way down the input trees recursively:\\nStart from the top of both trees.\\nIf both trees are not None:\\n- Create a third tree with the root\\'s value being the sum of the root values of the input trees\\n- The left and right subtrees of the new tree will be calculated recursively\\n- Return the newly created third tree\\n \\nIf there is only one of the input trees (the other one is None), then return it\\nElse return none\\n\\n**Code:**\\n```\\ndef mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n\\tif t1 and t2:\\n\\t\\tt3 = TreeNode(t1.val + t2.val) \\n\\t\\tt3.left = self.mergeTrees(t1.left, t2.left)\\n\\t\\tt3.right = self.mergeTrees(t1.right, t2.right)\\n\\t\\treturn t3\\n\\telif t1:\\n\\t\\treturn t1\\n\\telif t2:\\n\\t\\treturn t2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n\\tif t1 and t2:\\n\\t\\tt3 = TreeNode(t1.val + t2.val) \\n\\t\\tt3.left = self.mergeTrees(t1.left, t2.left)\\n\\t\\tt3.right = self.mergeTrees(t1.right, t2.right)\\n\\t\\treturn t3\\n\\telif t1:\\n\\t\\treturn t1\\n\\telif t2:\\n\\t\\treturn t2\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 528621,
                "title": "much-simpler-solution-than-the-existing-ones-with-most-votes",
                "content": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        TreeNode node = new TreeNode(t1.val + t2.val);\\n        node.left = mergeTrees(t1.left, t2.left);\\n        node.right = mergeTrees(t1.right, t2.right);\\n        return node;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (t1 == null && t2 == null) return null;\\n        if (t1 == null) return t2;\\n        if (t2 == null) return t1;\\n        TreeNode node = new TreeNode(t1.val + t2.val);\\n        node.left = mergeTrees(t1.left, t2.left);\\n        node.right = mergeTrees(t1.right, t2.right);\\n        return node;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 518939,
                "title": "python-iterative-construction-of-the-3rd-tree-without-changing-two-original",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n\\n        # new node val\\n        def nodeSum(node1, node2):\\n            if not node1:\\n                return node2.val\\n            if not node2:\\n                return node1.val\\n            return node1.val+node2.val\\n\\n        root = TreeNode(t1.val + t2.val)\\n        queue = [[root, t1, t2]]\\n\\n        while queue:\\n            t = queue.pop()\\n            if t[1] or t[2]:\\n                # left child\\n                n1 = t[1].left if t[1] else None\\n                n2 = t[2].left if t[2] else None\\n                if n1 or n2:\\n                    t[0].left = TreeNode(nodeSum(n1, n2))\\n                    queue.append([t[0].left, n1, n2])\\n            \\n                # right child\\n                n1 = t[1].right if t[1] else None\\n                n2 = t[2].right if t[2] else None\\n                if n1 or n2:\\n                    t[0].right = TreeNode(nodeSum(n1, n2))\\n                    queue.append([t[0].right, n1, n2])\\n                \\n        return root\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n\\n        # new node val\\n        def nodeSum(node1, node2):\\n            if not node1:\\n                return node2.val\\n            if not node2:\\n                return node1.val\\n            return node1.val+node2.val\\n\\n        root = TreeNode(t1.val + t2.val)\\n        queue = [[root, t1, t2]]\\n\\n        while queue:\\n            t = queue.pop()\\n            if t[1] or t[2]:\\n                # left child\\n                n1 = t[1].left if t[1] else None\\n                n2 = t[2].left if t[2] else None\\n                if n1 or n2:\\n                    t[0].left = TreeNode(nodeSum(n1, n2))\\n                    queue.append([t[0].left, n1, n2])\\n            \\n                # right child\\n                n1 = t[1].right if t[1] else None\\n                n2 = t[2].right if t[2] else None\\n                if n1 or n2:\\n                    t[0].right = TreeNode(nodeSum(n1, n2))\\n                    queue.append([t[0].right, n1, n2])\\n                \\n        return root\\n```",
                "codeTag": "Java"
            },
            {
                "id": 468208,
                "title": "clean-pythonic-solution",
                "content": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n        t = TreeNode(t1.val + t2.val)\\n        t.left = self.mergeTrees(t1.left, t2.left)\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        return t\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def mergeTrees(self, t1: TreeNode, t2: TreeNode) -> TreeNode:\\n        if not t1:\\n            return t2\\n        if not t2:\\n            return t1\\n        t = TreeNode(t1.val + t2.val)\\n        t.left = self.mergeTrees(t1.left, t2.left)\\n        t.right = self.mergeTrees(t1.right, t2.right)\\n        return t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 436821,
                "title": "bfs-souliution",
                "content": "```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (null == t1) {\\n            return t2;\\n        }\\n        if (null == t2) {\\n            return t1;\\n        }\\n        \\n        Queue<TreeNode> q1 = new LinkedList<>();\\n        Queue<TreeNode> q2 = new LinkedList<>();\\n        \\n        q1.add(t1);\\n        q2.add(t2);\\n        \\n        while (!q1.isEmpty()) {\\n            TreeNode node1 = q1.poll();\\n            TreeNode node2 = q2.poll();\\n            \\n            if (node1 == null || node2 == null) {\\n               continue;\\n            }\\n            \\n            if (null != node2) {\\n                node1.val += node2.val; \\n            }\\n\\n            if (null == node1.left && null != node2) {\\n                node1.left = node2.left;\\n            } else {\\n                q1.add(node1.left);\\n                if (null != node2) {\\n                    q2.offer(node2.left);\\n                }\\n            }\\n\\n            if (null == node1.right && null != node2) {\\n                node1.right = node2.right;\\n            } else {\\n                q1.add(node1.right);\\n                if (null != node2) {\\n                    q2.offer(node2.right);\\n                }\\n            }\\n        }\\n        \\n        return t1;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\npublic TreeNode mergeTrees(TreeNode t1, TreeNode t2) {\\n        if (null == t1) {\\n            return t2;\\n        }\\n        if (null == t2) {\\n            return t1;\\n        }\\n        \\n        Queue<TreeNode> q1 = new LinkedList<>();\\n        Queue<TreeNode> q2 = new LinkedList<>();\\n        \\n        q1.add(t1);\\n        q2.add(t2);\\n        \\n        while (!q1.isEmpty()) {\\n            TreeNode node1 = q1.poll();\\n            TreeNode node2 = q2.poll();\\n            \\n            if (node1 == null || node2 == null) {\\n               continue;\\n            }\\n            \\n            if (null != node2) {\\n                node1.val += node2.val; \\n            }\\n\\n            if (null == node1.left && null != node2) {\\n                node1.left = node2.left;\\n            } else {\\n                q1.add(node1.left);\\n                if (null != node2) {\\n                    q2.offer(node2.left);\\n                }\\n            }\\n\\n            if (null == node1.right && null != node2) {\\n                node1.right = node2.right;\\n            } else {\\n                q1.add(node1.right);\\n                if (null != node2) {\\n                    q2.offer(node2.right);\\n                }\\n            }\\n        }\\n        \\n        return t1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 405718,
                "title": "preorder-recursive-solution-in-python-and-javascript",
                "content": "```\\ndef mergeTrees(self, t1, t2):\\n\\tif t1 is None: return t2\\n\\tif t2 is None: return t1\\n\\tt1.val += t2.val\\n\\tt1.left, t1.right = self.mergeTrees(t1.left, t2.left), self.mergeTrees(t1.right, t2.right)\\n\\treturn t1\\n```\\n\\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 == null) return t2;\\n    if (t2 == null) return t1;\\n    t1.val += t2.val;\\n    t1.left = mergeTrees(t1.left, t2.left), t1.right = mergeTrees(t1.right, t2.right);\\n    return t1;  \\n};\\n```",
                "solutionTags": [],
                "code": "```\\ndef mergeTrees(self, t1, t2):\\n\\tif t1 is None: return t2\\n\\tif t2 is None: return t1\\n\\tt1.val += t2.val\\n\\tt1.left, t1.right = self.mergeTrees(t1.left, t2.left), self.mergeTrees(t1.right, t2.right)\\n\\treturn t1\\n```\n```\\nvar mergeTrees = function(t1, t2) {\\n    if (t1 == null) return t2;\\n    if (t2 == null) return t1;\\n    t1.val += t2.val;\\n    t1.left = mergeTrees(t1.left, t2.left), t1.right = mergeTrees(t1.right, t2.right);\\n    return t1;  \\n};\\n```",
                "codeTag": "Python3"
            }
        ],
        "discussions": [
            {
                "id": 1722414,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1575783,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1569855,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1572412,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1572156,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1857907,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 2070301,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 2045185,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1999983,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1914781,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1722414,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1575783,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1569855,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1572412,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1572156,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1857907,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 2070301,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 2045185,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1999983,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            },
            {
                "id": 1914781,
                "content": [
                    {
                        "username": "user1141B",
                        "content": "The problem says: \"You need to merge the two trees into a new binary tree.\"\\nand the result is the same tree (t1) and not a new one. it\\'s misleading "
                    },
                    {
                        "username": "WebDev-Akhil",
                        "content": "![image](https://assets.leetcode.com/users/images/2a0e8da4-3823-4350-99d9-5ce683bd02a1_1632487203.2924182.png)\\n\\n"
                    },
                    {
                        "username": "sachin2000",
                        "content": "your approach is valid only for full binary tree."
                    },
                    {
                        "username": "99ansh",
                        "content": "![image](https://assets.leetcode.com/users/99ansh/image_1588275639.png)\\n\\nHow to resolve this issue in python ?\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "I mean, merging the tree in a new tree. Anyone?"
                    },
                    {
                        "username": "barris",
                        "content": "Why doesn\\'t this problem include the attributes of a TreeNode so we know how to access it??"
                    },
                    {
                        "username": "kirilchukvadim",
                        "content": "There are two iterative approaches: one modifies the data in existing tree, second  - doesn't. \nFor the second approach see if you can use dummy objects to avoid if/else npe conditions as much as possible."
                    },
                    {
                        "username": "ecdrid",
                        "content": "Here\\'s a simple iterative solution -:\\n\\n```python3\\n        def iterative_solution():\\n            WHITE, GRAY = 0, 1\\n            stack = [(WHITE, root1, root2)]\\n\\n            while stack:\\n                color, node_first, node_second = stack.pop()\\n                if not node_first or not node_second:\\n                    continue\\n                if color == WHITE:\\n                    node_first.val += node_second.val\\n                    if not node_first.left:\\n                        node_first.left = node_second.left\\n                    else:\\n                        stack.append((WHITE, node_first.left, node_second.left))\\n                    \\n                    # stack.append((GRAY, node_first, node_second))\\n\\n                    if not node_first.right:\\n                        node_first.right = node_second.right\\n                    else:\\n                        stack.append((WHITE, node_first.right, node_second.right))\\n                else:\\n                    pass\\n            return root1\\n        \\n        if not root1: return root2\\n        return iterative_solution()      \\n```"
                    },
                    {
                        "username": "cs_can",
                        "content": "this according to me is good level easy problem even if it  was tagged medium too still it was ok. I don't know why but when one of the node is null and the other node is not null then instead of going ahead and copying the subtree of not null node if u just return the not null node without creating new node it still runs . So the problem could have been clearer if it wanted to create complete new Tree or not. "
                    },
                    {
                        "username": "ca3l007",
                        "content": "For the js version at least, you need to return null on the test case where !root1 && !root2. Feel like that should be made more clear... Failed several times trying to guess the desired return because the expected return shows as []."
                    },
                    {
                        "username": "noobengineer",
                        "content": "I have a problem.\\nMy method is wrong, I merge root2 tree to root1 tree.\\nHowever, I don\\'t know where is wrong for the method.\\n ```\\nvoid recursive(struct TreeNode* root1, struct TreeNode* root2)\\n{\\n    if(root1 == NULL && root2 == NULL)\\n    {\\n        return;\\n    }\\n    if(root1 != NULL && root2 != NULL)\\n    {\\n        root1->val = root1->val + root2->val;\\n    }else if(root1 == NULL && root2 != NULL)\\n    {\\n        root1 = root2;\\n        return;\\n    }else if(root2 == NULL && root1 != NULL)\\n    {\\n        return;\\n    }\\n    recursive(root1->left,root2->left);\\n    recursive(root1->right,root2->right);\\n}\\nstruct TreeNode* mergeTrees(struct TreeNode* root1, struct TreeNode* root2){\\n    \\n    //if(root1 == NULL) return root2;\\n    //else if(root2 == NULL) return root1;\\n    recursive(root1,root2);\\n    return root1;\\n}\\n```\\n\\nI see my result, and the root1 cannot combine with the root2.\\nBut I don\\'t know the what is forbidden in C.\\n```\\nelse if(root1 == NULL && root2 != NULL) {\\n        root1 = root2;\\n        return;\\n}\\n```\\nThe above code is the wrong part I think.\\n\\nI will be grateful for any help you can provide."
                    }
                ]
            }
        ]
    },
    {
        "title": "Students Report By Geography",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1566350,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1570817,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1567511,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1575120,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1573717,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1734027,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1725489,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            },
            {
                "id": 1658116,
                "content": [
                    {
                        "username": "anupriya123456",
                        "content": "# Write your MySQL query statement below\\nselect min(America) as America, min(Asia) as Asia, min(Europe) as Europe from \\n(select\\ncase when continent= \"America\" then name else null end as \"America\",\\ncase when continent = \"Asia\" then name else null end as \"Asia\",\\ncase when continent = \"Europe\" then name end as \"Europe\",\\nrow_number() over (partition by continent order by name) as rnk                                    \\nfrom student\\n) t1\\ngroup by rnk"
                    },
                    {
                        "username": "AshleySnowbro",
                        "content": "# Write your MySQL query statement below\\nWITH ranked AS(\\nSELECT *, ROW_NUMBER() OVER(PARTITION BY continent ORDER BY name) AS ranking \\nFROM Student)\\n\\nSELECT DISTINCT (SELECT name FROM ranked a WHERE a.ranking = r.ranking AND continent = \"America\") AS \"America\", (SELECT name FROM ranked b WHERE b.ranking = r.ranking  AND continent = \"Asia\") AS \"Asia\", (SELECT name FROM ranked c WHERE c.ranking = r.ranking  AND continent = \"Europe\") AS \"Europe\"\\nFROM ranked r"
                    },
                    {
                        "username": "paragsaxena",
                        "content": "![image](https://assets.leetcode.com/users/images/705fbdfe-26a8-41bf-a85b-fdf951eb3a76_1594384495.8498034.png)\\n"
                    },
                    {
                        "username": "saini_sandeep33",
                        "content": "with main as\\n(\\nselect row_number() over(partition by continent order by name) rn,name,continent\\nfrom student\\n)\\nselect  max(case when continent = \\'America\\'  then name else null end) as America,\\n        max(case when continent = \\'Asia\\'  then name else null end) as Asia,\\n        max(case when continent = \\'Europe\\'  then name else null end)  as Europe\\nfrom main\\ngroup by rn\\norder by 1,2,3"
                    },
                    {
                        "username": "terron23",
                        "content": "\\n\\nSelect America, Asia, Europe  from (\\nSelect name as America, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'America\\') as a\\nleft join \\n(Select name as Asia, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Asia\\') b\\non b.rank = a.rank\\nleft join\\n(Select name as Europe, row_number() over(partition by continent order by name) as rank\\nfrom student\\nwhere continent = \\'Europe\\') c\\non c.rank = a.rank \\n"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY SOLUTION USING WINDOWING FUNCTION(SQL SERVER)\\nwith cte as\\n(select *, ROW_NUMBER() over (partition by continent order by name)rn from student)\\n\\n(select min(case when continent = \\'America\\' then name end)America, \\nmin(case when continent = \\'Asia\\' then name end)Asia, \\nmin(case when continent = \\'Europe\\' then name end)Europe from cte\\ngroup by rn)"
                    },
                    {
                        "username": "rank3082",
                        "content": " `WITH american AS(\\n      SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS America\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'America\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\nasian AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Asia\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Asia\\'\\n    ORDER BY\\n        name ASC\\n),\\n\\neuropean AS(\\n    SELECT\\n        (ROW_NUMBER() OVER(ORDER BY name ASC)) AS rowNumber,\\n        name AS Europe\\n    FROM Student\\n    WHERE 1=1\\n        AND continent = \\'Europe\\'\\n    ORDER BY\\n        name ASC\\n)\\n\\n\\nSELECT \\n    american.America,\\n    asian.Asia,\\n    european.Europe\\nFROM american\\n\\nLEFT JOIN asian\\nON 1=1\\n    AND american.rowNumber = asian.rowNumber\\n\\nLEFT JOIN european\\nON 1=1\\n    AND american.rowNumber = european.rowNumber\\n`"
                    },
                    {
                        "username": "baobui258",
                        "content": "```\\n# Write your MySQL query statement below\\nwith t_america as \\n(\\n    select\\n        (@cnt := @cnt + 1) as id, name as America\\n    from \\n        Student s, (select @cnt:= 0) r\\n    where\\n        continent = \\'America\\'\\n    order by name\\n),\\nt_asia as \\n(\\n    select\\n        (@cnt2 := @cnt2 + 1) as id, name as Asia\\n    from \\n        Student s, (select @cnt2:= 0) r\\n    where\\n        continent = \\'Asia\\'\\n    order by name\\n),\\nt_europe as \\n(\\n    select\\n        (@cnt3 := @cnt3 + 1) as id, name as Europe\\n    from \\n        Student s, (select @cnt3:= 0) r\\n    where\\n        continent = \\'Europe\\'\\n    order by name\\n)\\n\\nselect\\n    America, Asia, Europe\\nfrom\\n    t_america m\\nleft join\\n    t_asia s on m.id = s.id\\nleft join\\n    t_europe u on m.id = u.id\\n\\n```"
                    }
                ]
            }
        ]
    },
    {
        "title": "Biggest Single Number",
        "question_content": "<p>Table: <code>MyNumbers</code></p>\n\n<pre>\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| num         | int  |\n+-------------+------+\nThis table may contain duplicates (In other words, there is no primary key for this table in SQL).\nEach row of this table contains an integer.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A <strong>single number</strong> is a number that appeared only once in the <code>MyNumbers</code> table.</p>\n\n<p>Find the largest <strong>single number</strong>. If there is no <strong>single number</strong>, report <code>null</code>.</p>\n\n<p>The result format is in the following example.</p>\n<ptable> </ptable>\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 3   |\n| 3   |\n| 1   |\n| 4   |\n| 5   |\n| 6   |\n+-----+\n<strong>Output:</strong> \n+-----+\n| num |\n+-----+\n| 6   |\n+-----+\n<strong>Explanation:</strong> The single numbers are 1, 4, 5, and 6.\nSince 6 is the largest single number, we return it.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nMyNumbers table:\n+-----+\n| num |\n+-----+\n| 8   |\n| 8   |\n| 7   |\n| 7   |\n| 3   |\n| 3   |\n| 3   |\n+-----+\n<strong>Output:</strong> \n+------+\n| num  |\n+------+\n| null |\n+------+\n<strong>Explanation:</strong> There are no single numbers in the input table so we return null.\n</pre>\n",
        "solutions": [
            {
                "id": 104466,
                "title": "concise-mysql-solution-with-reference",
                "content": "```\\n# Refer to: https://stackoverflow.com/questions/17250243/how-to-return-null-when-result-is-empty\\nselect(\\n  select num\\n  from number\\n  group by num\\n  having count(*) = 1\\n  order by num desc limit 1\\n) as num;\\n```",
                "solutionTags": [],
                "code": "```\\n# Refer to: https://stackoverflow.com/questions/17250243/how-to-return-null-when-result-is-empty\\nselect(\\n  select num\\n  from number\\n  group by num\\n  having count(*) = 1\\n  order by num desc limit 1\\n) as num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3811592,
                "title": "sql-subquery-max-easy-to-understand",
                "content": "![image.png](https://assets.leetcode.com/users/images/9a4fae1b-0100-4d30-9627-6be2019f25c9_1690231320.1302264.png)\\n\\n\\n# Code\\n```\\nSELECT MAX(num) AS num\\nFROM (\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING COUNT(num) = 1\\n) AS unique_numbers;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM (\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING COUNT(num) = 1\\n) AS unique_numbers;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3787911,
                "title": "5-7-easy-different-solutions",
                "content": "## Approach : Using Count and subqueries\\n\\n### Query1\\n```\\nSELECT MAX(num) AS num FROM (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ) NEW;\\n```\\n### Query2\\n```\\nSELECT MAX(num) AS num  FROM MyNumbers WHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1);\\n```\\n\\n### Query3\\n```\\nSELECT Max(num) AS num FROM MyNumbers WHERE num NOT IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num)>1);\\n```\\n## Approach : Using Sorting\\n\\n### Query4\\n```\\nSELECT (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1) AS num;\\n```\\n### Query5\\n```\\nSELECT IF(COUNT(num) =1, num, null) AS num FROM MyNumbers GROUP BY num ORDER BY COUNT(num), num DESC LIMIT 1;\\n```\\n\\n### Query6\\n```\\nSELECT COALESCE ((SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1), null) AS num;\\n```\\n* We can also use \\'IFNULL\\' in place of \\'COALESCE\\'\\n\\n### Query7\\n```\\nSELECT num FROM MyNumbers GROUP BY num HAVING count(num) = 1 UNION ALL SELECT NULL ORDER BY num DESC LIMIT 1;\\n```\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(num) AS num FROM (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ) NEW;\\n```\n```\\nSELECT MAX(num) AS num  FROM MyNumbers WHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1);\\n```\n```\\nSELECT Max(num) AS num FROM MyNumbers WHERE num NOT IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num)>1);\\n```\n```\\nSELECT (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1) AS num;\\n```\n```\\nSELECT IF(COUNT(num) =1, num, null) AS num FROM MyNumbers GROUP BY num ORDER BY COUNT(num), num DESC LIMIT 1;\\n```\n```\\nSELECT COALESCE ((SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1), null) AS num;\\n```\n```\\nSELECT num FROM MyNumbers GROUP BY num HAVING count(num) = 1 UNION ALL SELECT NULL ORDER BY num DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104473,
                "title": "why-this-is-not-right",
                "content": "1. \\n\\nselect max(num) from number \\ngroup by num\\nhaving count(num)=1\\norder by num desc\\n\\nOutput:\\n{\"headers\": [\"max(num)\"], \"values\": [[1], [4], [5], [6]]}\\n\\nwhy this is not right?? \\n\\n2. \\n\\nselect num from number \\ngroup by num\\nhaving count(num)=1\\norder by num desc limit 1\\n\\n\\n{\"headers\": [\"num\"], \"values\": []}\\n\\nwhy this couldn't return NULL?",
                "solutionTags": [],
                "code": "1. \\n\\nselect max(num) from number \\ngroup by num\\nhaving count(num)=1\\norder by num desc\\n\\nOutput:\\n{\"headers\": [\"max(num)\"], \"values\": [[1], [4], [5], [6]]}\\n\\nwhy this is not right?? \\n\\n2. \\n\\nselect num from number \\ngroup by num\\nhaving count(num)=1\\norder by num desc limit 1\\n\\n\\n{\"headers\": [\"num\"], \"values\": []}\\n\\nwhy this couldn't return NULL?",
                "codeTag": "Unknown"
            },
            {
                "id": 3365275,
                "title": "beats-99-39",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect coalesce ((\\n  select top 1 num from mynumbers\\n  group by num\\n  having count(*) = 1\\n  order by num desc\\n), null) as num;\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect coalesce ((\\n  select top 1 num from mynumbers\\n  group by num\\n  having count(*) = 1\\n  order by num desc\\n), null) as num;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104477,
                "title": "so-many-ways-to-do-it-used-if-function",
                "content": "Since no one has posted this one.\\n```\\nselect if(count(*) =1, num, null) as num from number \\ngroup by num order by count(*), num desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect if(count(*) =1, num, null) as num from number \\ngroup by num order by count(*), num desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3839933,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT  MAX(num) AS num  FROM (SELECT num FROM MyNumbers GROUP BY\\n\\nnum HAVING COUNT(num) = 1)\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/2eabdcfe-642c-4773-a7a5-0cfb08e29044_1690743458.4629674.jpeg)\\n",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT  MAX(num) AS num  FROM (SELECT num FROM MyNumbers GROUP BY\\n\\nnum HAVING COUNT(num) = 1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 515223,
                "title": "mysql-faster-than-99-no-subquery",
                "content": "```\\nSELECT num\\nFROM my_numbers\\nGROUP BY num\\nHAVING count(*) = 1\\n\\nUNION ALL\\nSELECT NULL\\n\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT num\\nFROM my_numbers\\nGROUP BY num\\nHAVING count(*) = 1\\n\\nUNION ALL\\nSELECT NULL\\n\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3557043,
                "title": "easy-to-understand",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    MAX(num) as num \\nFROM \\n    (\\n        SELECT num\\n        FROM MyNumbers\\n        GROUP BY num\\n        HAVING COUNT(num) = 1\\n    ) NEW ;\\n\\n```\\n\\n### *KINDLY UPVOTE \\u270C\\uD83C\\uDFFC*",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    MAX(num) as num \\nFROM \\n    (\\n        SELECT num\\n        FROM MyNumbers\\n        GROUP BY num\\n        HAVING COUNT(num) = 1\\n    ) NEW ;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943685,
                "title": "one-line-pandas-self-explaining",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    return my_numbers.drop_duplicates(keep = False).max().to_frame(name = \\'num\\')\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    return my_numbers.drop_duplicates(keep = False).max().to_frame(name = \\'num\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3918944,
                "title": "pandas-solution-w-explanation",
                "content": "# Intuition\\nWe are only interested in the values in my_numbers that occur just once. The general idea is to filter out the numbers that occur multiples times. If this list is empty, return null, otherwise return the maximum single value. Because both cases return one value, it makes sense to return them as a new DataFrame.\\n\\n# Approach\\n\\n\\n#### Look for comments 1), 2) and 3) in the code to find where the relevant steps are performed.\\n\\n\\n1. Use the drop_duplicates() method to create a series, singles, where only single numbers remain. This is achieved by setting the parameter \\'keep\\' to False. This drops all duplicates regardless of the order of their appearance.\\n\\n2. Check if singles is empty (i.e. because all numbers are duplicates) in my_numbers by using the attribute, empty. If so, return a DataFrame where the single value of num is NaN.\\n\\n3.  If the series is populated, take the largest value from it and return a DataFrame where the single value of num is its largest value.\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n\\n    # 1)\\n    singles = my_numbers[\\'num\\'].drop_duplicates(keep = False)\\n\\n    # 2)\\n    if singles.empty:\\n        return pd.DataFrame({\\'num\\': [np.NaN]})\\n\\n    # 3)\\n    return pd.DataFrame({\\'num\\': [max(singles)]})\\n```",
                "solutionTags": [
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n\\n    # 1)\\n    singles = my_numbers[\\'num\\'].drop_duplicates(keep = False)\\n\\n    # 2)\\n    if singles.empty:\\n        return pd.DataFrame({\\'num\\': [np.NaN]})\\n\\n    # 3)\\n    return pd.DataFrame({\\'num\\': [max(singles)]})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3532871,
                "title": "mysql-solution-for-biggest-single-number-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given SQL query finds the maximum value (num) from the \"mynumbers\" table that appears only once. It first identifies the numbers that occur exactly once by grouping and filtering, and then selects the maximum value from those numbers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query starts with the inner subquery (select num from mynumbers group by num having count(num) = 1) as n.\\n2. The subquery groups the numbers (num) from the \"mynumbers\" table and filters only those numbers that have a count of 1, meaning they appear only once.\\n3. The outer query selects the maximum value from the numbers obtained in the subquery using the MAX function and aliases it as num.\\n4. The query retrieves the result, which is the maximum value (num) that appears only once.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the \"mynumbers\" table and the execution efficiency of the grouping and filtering operations. The subquery (select num from mynumbers group by num having count(num) = 1) requires scanning the \"mynumbers\" table and performing the grouping and filtering operations. The time complexity is typically linear or close to linear in the size of the \"mynumbers\" table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the query depends on the number of distinct numbers in the \"mynumbers\" table that appear only once. The database engine needs to store the intermediate results of the subquery and the final result, which is the maximum value (num). The space complexity is proportional to the number of distinct numbers that satisfy the condition.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from\\n(\\n    select num from mynumbers group by num having count(num) = 1\\n) as n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from\\n(\\n    select num from mynumbers group by num having count(num) = 1\\n) as n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3518264,
                "title": "using-in-operator-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num \\nFROM MyNumbers \\nWHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num \\nFROM MyNumbers \\nWHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3415166,
                "title": "day-379",
                "content": "\\n\\n# Code\\n```\\nSELECT\\n        MAX(num) AS num\\nFROM\\n(\\n        SELECT\\n                COUNT(num) AS count_num,\\n                num\\n        FROM\\n                mynumbers\\n        GROUP BY num\\n)AS SubQuery\\nWHERE SubQuery.count_num = 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n        MAX(num) AS num\\nFROM\\n(\\n        SELECT\\n                COUNT(num) AS count_num,\\n                num\\n        FROM\\n                mynumbers\\n        GROUP BY num\\n)AS SubQuery\\nWHERE SubQuery.count_num = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3409398,
                "title": "mysql-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Max(num) as num from MyNumbers where num not in (select num from MyNumbers group by num having count(num)>1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Max(num) as num from MyNumbers where num not in (select num from MyNumbers group by num having count(num)>1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2385201,
                "title": "simple-solution-beating-93-84",
                "content": "```\\nSELECT max(num) AS num\\nFROM \\n(SELECT num\\n FROM MyNumbers\\nGROUP BY 1\\nHAVING count(*)=1) b\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT max(num) AS num\\nFROM \\n(SELECT num\\n FROM MyNumbers\\nGROUP BY 1\\nHAVING count(*)=1) b\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1539813,
                "title": "mysql-quick-solution-without-max-function",
                "content": "```\\nselect \\n(\\n    select num\\n    from my_numbers\\n    group by num\\n    having count(1)=1\\n    order by num desc\\n    limit 1\\n) as num\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n(\\n    select num\\n    from my_numbers\\n    group by num\\n    having count(1)=1\\n    order by num desc\\n    limit 1\\n) as num\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 381595,
                "title": "using-ifnull",
                "content": "SELECT IFNULL((SELECT num FROM my_numbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1), null) num;",
                "solutionTags": [],
                "code": "SELECT IFNULL((SELECT num FROM my_numbers GROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC LIMIT 1), null) num;",
                "codeTag": "Unknown"
            },
            {
                "id": 104467,
                "title": "mysql-solution",
                "content": "```\\nselect max(num) as num from (select num from number group by num having count(*) = 1) p;\\n```",
                "solutionTags": [],
                "code": "```\\nselect max(num) as num from (select num from number group by num having count(*) = 1) p;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3607416,
                "title": "easy-mysql-solution-with-explanation-best-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The question asks us to **find the larget number that occurs only once**.\\n- For that, we write a **sub-query** which retrieves the numbers that occur only once.\\n- From those numbers, we choose the maximum using **MAX()** function.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the **MAX(num) as num**.\\n2. In the FROM statement, we write the table name **MyNumbers**.\\n3. The **WHERE clause** contains a sub-query which **selects the numbers from MyNumbers which occur only once and then group the numbers**.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num \\nFROM MyNumbers \\nWHERE num IN \\n(\\n    SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1\\n)\\n```\\n# Note\\nPlease upvote if you find my solution helpful. If you have any doubts, suggestion or want to discuss any solution, comment it. If you wish to discuss other related topics, feel free to message me on LinkedIn, https://leetcode.com/prathams29/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num \\nFROM MyNumbers \\nWHERE num IN \\n(\\n    SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3360880,
                "title": "simple-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*) = 1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*) = 1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3076931,
                "title": "biggest-single-number",
                "content": "# SOLUTION 1\\n```\\nSELECT\\n        MAX(num) AS num\\nFROM\\n(\\n        SELECT\\n                COUNT(num) AS count_num,\\n                num\\n        FROM\\n                mynumbers\\n        GROUP BY num\\n)AS SubQuery\\nWHERE SubQuery.count_num = 1;\\n```\\n\\n# SOLUTION 2\\n```\\nSELECT\\n        IFNULL(\\n                (\\n                        SELECT\\n                                num\\n                        FROM\\n                                mynumbers\\n                        GROUP BY num\\n                        HAVING COUNT(num) = 1\\n                        ORDER BY num DESC\\n                        LIMIT 1\\n                ),\\n                NULL\\n              ) AS num;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n        MAX(num) AS num\\nFROM\\n(\\n        SELECT\\n                COUNT(num) AS count_num,\\n                num\\n        FROM\\n                mynumbers\\n        GROUP BY num\\n)AS SubQuery\\nWHERE SubQuery.count_num = 1;\\n```\n```\\nSELECT\\n        IFNULL(\\n                (\\n                        SELECT\\n                                num\\n                        FROM\\n                                mynumbers\\n                        GROUP BY num\\n                        HAVING COUNT(num) = 1\\n                        ORDER BY num DESC\\n                        LIMIT 1\\n                ),\\n                NULL\\n              ) AS num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519846,
                "title": "best-solution-using-not-in-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom MyNumbers\\nwhere num not in (select num from MyNumbers group by num having count(num)>1)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom MyNumbers\\nwhere num not in (select num from MyNumbers group by num having count(num)>1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2643710,
                "title": "why-this-is-wrong",
                "content": "select num \\nfrom MyNumbers\\nGroup by num \\nHaving count(num) = 1 \\n\\nORDER BY num Desc\\nlimit 1;\\n\\n",
                "solutionTags": [],
                "code": "select num \\nfrom MyNumbers\\nGroup by num \\nHaving count(num) = 1 \\n\\nORDER BY num Desc\\nlimit 1;\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2365152,
                "title": "very-easy-and-anyone-can-do",
                "content": "```\\nselect max(num) as num from\\n(select max(num) as num from mynumbers\\ngroup by num\\n having count(*)=1\\norder by num desc) a",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nselect max(num) as num from\\n(select max(num) as num from mynumbers\\ngroup by num\\n having count(*)=1\\norder by num desc) a",
                "codeTag": "Unknown"
            },
            {
                "id": 2192805,
                "title": "quite-easy-solution-without-using-not-in-function",
                "content": "select IFNULL(\\n(SELECT NUM  FROM MyNumbers group by NUM having count(*)=1 order by NUM desc limit 1)\\n, null) as num",
                "solutionTags": [],
                "code": "select IFNULL(\\n(SELECT NUM  FROM MyNumbers group by NUM having count(*)=1 order by NUM desc limit 1)\\n, null) as num",
                "codeTag": "Unknown"
            },
            {
                "id": 1186706,
                "title": "mysql-faster-that-99-5-of-solutions",
                "content": "select max(num) as num\\nfrom(\\nselect num\\nfrom my_numbers\\ngroup by num\\nhaving count(num) = 1\\n)e",
                "solutionTags": [],
                "code": "select max(num) as num\\nfrom(\\nselect num\\nfrom my_numbers\\ngroup by num\\nhaving count(num) = 1\\n)e",
                "codeTag": "Unknown"
            },
            {
                "id": 1177355,
                "title": "how-to-print-null-when-using-having-count-order-by-and-limit",
                "content": "One of the test case for the final submission has zero numbers which were appears once, so how do I show null as the final answer? I tried coalesce and ifnull and they didnt work.\\n\\nI am aware we can accomplis this my other ways but I am curious how we can solve this using this code.\\n\\nThanks in advance !\\n\\nHere is my code:\\n\\n```\\nselect num\\nfrom my_numbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect num\\nfrom my_numbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1157608,
                "title": "anybody-knows-how-to-add-null-when-i-use-limit",
                "content": "select num\\nfrom my_numbers \\ngroup by num \\nhaving count(num)=1\\norder by num desc\\nlimit 1;",
                "solutionTags": [],
                "code": "select num\\nfrom my_numbers \\ngroup by num \\nhaving count(num)=1\\norder by num desc\\nlimit 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 208938,
                "title": "both-works",
                "content": "Either using ifnull() or max() will return null if there is no unique values in the number table. \\n```\\nselect ifnull(\\n(select num\\nfrom number \\ngroup by num \\nhaving count(num)=1 \\norder by num desc limit 1), null); \\n\\nselect max(a.num)\\nfrom \\n(\\nselect num\\nfrom number \\ngroup by num \\nhaving count(num)=1 ) as a\\n;\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect ifnull(\\n(select num\\nfrom number \\ngroup by num \\nhaving count(num)=1 \\norder by num desc limit 1), null); \\n\\nselect max(a.num)\\nfrom \\n(\\nselect num\\nfrom number \\ngroup by num \\nhaving count(num)=1 ) as a\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063950,
                "title": "biggest-single-number-easy-pandas",
                "content": "[see the successfully acepted SOLUTION](https://leetcode.com/submissions/detail/1053463704/)\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we create a DataFrame containing unique numbers (numbers with a count of 1)\\n    unique_numbers = my_numbers[\\'num\\'].value_counts().reset_index()\\n    unique_numbers.columns = [\\'num\\', \\'count\\']\\n\\n    # Then, we filter unique_numbers to include only numbers with a count of 1\\n    unique_numbers = unique_numbers[unique_numbers[\\'count\\'] == 1]\\n\\n    # After that, we must find the maximum value from the \\'num\\' column in the unique_numbers DataFrame\\n    max_unique_num = unique_numbers[\\'num\\'].max()\\n\\n    # Finaly, we create a DataFrame to store the maximum unique number\\n    max_unique_num_df = pd.DataFrame({\\'num\\': [max_unique_num]})\\n \\n    return max_unique_num_df\\n\\n```\\n\\n![image](https://assets.leetcode.com/users/images/3dcac71e-2254-4aff-ab20-1119c5020495_1695119894.7904284.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we create a DataFrame containing unique numbers (numbers with a count of 1)\\n    unique_numbers = my_numbers[\\'num\\'].value_counts().reset_index()\\n    unique_numbers.columns = [\\'num\\', \\'count\\']\\n\\n    # Then, we filter unique_numbers to include only numbers with a count of 1\\n    unique_numbers = unique_numbers[unique_numbers[\\'count\\'] == 1]\\n\\n    # After that, we must find the maximum value from the \\'num\\' column in the unique_numbers DataFrame\\n    max_unique_num = unique_numbers[\\'num\\'].max()\\n\\n    # Finaly, we create a DataFrame to store the maximum unique number\\n    max_unique_num_df = pd.DataFrame({\\'num\\': [max_unique_num]})\\n \\n    return max_unique_num_df\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4021669,
                "title": "easy-mysql-solution",
                "content": "# **PLEASE UPVOTE MY SOLUTION IF YOU LIKE IT**\\n# **CONNECT WITH ME**\\n# **[https://www.linkedin.com/in/pratay-nandy-9ba57b229/]()**\\n# **[https://www.instagram.com/pratay_nandy/]()**\\n\\n# Approach 1 \\nIn the subquery within the WHERE clause:\\n\\nThe subquery groups the numbers in the MyNumbers table by their values (the GROUP BY num clause).\\nIt then filters those groups using the HAVING clause to select only the groups where the count of occurrences (i.e., the count of rows with the same number) is greater than 1. This means it selects numbers that appear more than once in the table.\\nThe main query:\\n\\nIt retrieves the maximum (MAX(num)) value from the MyNumbers table but restricts the selection to numbers that are NOT in the result set of the subquery. In other words, it selects the largest number among those numbers that do not appear more than once in the table.\\nHere\\'s a step-by-step explanation of how the code works:\\n\\nThe subquery identifies numbers that are not unique (appear more than once) in the MyNumbers table.\\n\\nThe WHERE clause in the main query filters out rows where the num value is in the set of non-unique numbers identified by the subquery.\\n\\nFinally, the MAX(num) function is applied to the remaining numbers (those that appear only once), and the result is given the alias num\\n\\n\\n# Code \\n```\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num NOT IN (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(*) > 1\\n);\\n\\n```\\n# Approach 2 \\nCTE (Common Table Expression): The WITH clause defines a CTE named cte. This CTE selects distinct numbers (num) from the MyNumbers table using the GROUP BY clause. The HAVING COUNT(num) = 1 condition filters the numbers that appear only once.\\n\\nMain Query: After defining the cte, the main query is executed. It checks if there are any rows in the cte (i.e., if there are any single numbers). If there are single numbers (COUNT(*) > 0), it retrieves the maximum single number using MAX(num) and names it as num. If there are no single numbers, it returns NULL as num.\\n\\nIn summary, this SQL query first identifies single numbers in the MyNumbers table using the CTE and then checks if there are any single numbers. If there are single numbers, it retrieves the largest single number; otherwise, it returns NULL.\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nWITH cte AS (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\nSELECT CASE WHEN COUNT(*) > 0 THEN MAX(num) ELSE NULL END AS num\\nFROM cte;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num NOT IN (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(*) > 1\\n);\\n\\n```\n```\\nWITH cte AS (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\nSELECT CASE WHEN COUNT(*) > 0 THEN MAX(num) ELSE NULL END AS num\\nFROM cte;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3821226,
                "title": "oracle",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSelect max(num) as num from (Select num  from MyNumbers\\ngroup by num\\nhaving count(1) = 1)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSelect max(num) as num from (Select num  from MyNumbers\\ngroup by num\\nhaving count(1) = 1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3570869,
                "title": "mysql-decoded-biggest-single-number-beats-91-17",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n\\n# Intuition\\nWe are given an array of numbers, where some numbers appear twice and others appear only once. We need to find the number that appears only once and has the largest value.\\n\\n# Approach\\nTo solve this problem, we can use a SQL query with a subquery. Here\\'s how the solution works step by step:\\n\\n1. The inner subquery (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1) helps us identify the numbers that appear only once. It groups the numbers in the \"MyNumbers\" table by their values (num) and filters them based on the condition COUNT(num) = 1. This subquery gives us a set of numbers that occur exactly once in the array.\\n\\n1. The outer query SELECT MAX(num) AS num FROM MyNumbers WHERE num IN (...) selects the maximum value (MAX(num)) among the numbers returned by the inner subquery. The AS num part simply gives a name (num) to the result.\\n\\n1. The result of the query will be the largest number that appears only once in the \"MyNumbers\" table.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution depends on the size of the \"MyNumbers\" table. Let\\'s break it down:\\n\\n1. The inner subquery (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1) needs to group the numbers and count them. The time complexity of this subquery is proportional to the size of the table, denoted as N.\\n1. The outer query SELECT MAX(num) AS num FROM MyNumbers WHERE num IN (...) also needs to scan the numbers to find the maximum value. Its time complexity is also proportional to N.\\n1. Therefore, the overall time complexity of the solution is $$O(N)$$, where N represents the size of the \"MyNumbers\" table.\\n\\n- Space complexity:\\nThe space complexity of the solution is determined by the additional space used during the execution of the SQL query. Here\\'s the breakdown:\\n\\n1. The subquery (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1) doesn\\'t require any additional space beyond the existing \"MyNumbers\" table.\\n1. The outer query SELECT MAX(num) AS num FROM MyNumbers WHERE num IN (...) also doesn\\'t require additional space.\\n1. Since the query operates directly on the given table and doesn\\'t use any additional data structures, the space complexity is constant, denoted as $$O(1)$$.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers\\nwhere num in(select num from  MyNumbers group by num having count(num)=1)\\n```\\n\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/5095b28f-a2bd-4a57-bcf6-c728b399e0f5_1685478272.291842.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers\\nwhere num in(select num from  MyNumbers group by num having count(num)=1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3427773,
                "title": "solution-with-simple-count-sql-server",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nWITH CTE AS (SELECT\\n    num,\\n    Count(num) COUNTED\\nFROM\\n    MyNumbers\\nGROUP BY\\n    num\\nHAVING COUNT(num) = 1\\n)\\nSELECT \\n    ISNULL(MAX(num),NULL) num\\nFROM\\n    CTE\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nWITH CTE AS (SELECT\\n    num,\\n    Count(num) COUNTED\\nFROM\\n    MyNumbers\\nGROUP BY\\n    num\\nHAVING COUNT(num) = 1\\n)\\nSELECT \\n    ISNULL(MAX(num),NULL) num\\nFROM\\n    CTE\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3293004,
                "title": "biggest-single-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect ifnull(max(num),Null) as num\\nfrom \\n\\n(select count(*) as records, num\\nfrom MyNumbers\\ngroup by num ) t\\n\\nwhere records = 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect ifnull(max(num),Null) as num\\nfrom \\n\\n(select count(*) as records, num\\nfrom MyNumbers\\ngroup by num ) t\\n\\nwhere records = 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2267139,
                "title": "mysql-simple-solution-using-subquery",
                "content": "# Write your MySQL query statement below\\n\\n\\n```\\nselect max(n) as num from\\n\\n(Select num as n , count(*) cnt\\nfrom MyNumbers \\ngroup by 1\\nhaving count(*)=1 ) x\\n```",
                "solutionTags": [],
                "code": "```\\nselect max(n) as num from\\n\\n(Select num as n , count(*) cnt\\nfrom MyNumbers \\ngroup by 1\\nhaving count(*)=1 ) x\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2248387,
                "title": "faster-than-99-81-of-mysql",
                "content": "select max(num) as num\\nfrom(\\nselect\\nnum\\nfrom mynumbers\\ngroup by 1\\nhaving count(*) =1\\n    ) a",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select max(num) as num\\nfrom(\\nselect\\nnum\\nfrom mynumbers\\ngroup by 1\\nhaving count(*) =1\\n    ) a",
                "codeTag": "Unknown"
            },
            {
                "id": 2165333,
                "title": "with-case",
                "content": "```\\nselect case when count(num) = 1 then num else null end as num from mynumbers \\ngroup by num \\norder by num desc \\nlimit 1 \\n```",
                "solutionTags": [],
                "code": "```\\nselect case when count(num) = 1 then num else null end as num from mynumbers \\ngroup by num \\norder by num desc \\nlimit 1 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1648526,
                "title": "faster-than-99-99-of-mysql-online-submissions",
                "content": "select if(count(*) = 1, num, null) as num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select if(count(*) = 1, num, null) as num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1537039,
                "title": "what-are-the-differences-between-these-two-options-option-2-works-but-1-doesn-t",
                "content": "```\\noption 1\\nselect ifnull(num,null) as num from my_numbers\\ngroup by num\\nhaving count(num)=1\\norder by num desc\\nlimit 1\\n\\noption 2\\nSELECT(\\n  SELECT IFNULL(num, NULL)\\n  FROM my_numbers\\n  GROUP BY num\\n  HAVING count(*) = 1\\n  ORDER BY num DESC\\n  LIMIT 1\\n) AS num;\\n```",
                "solutionTags": [],
                "code": "```\\noption 1\\nselect ifnull(num,null) as num from my_numbers\\ngroup by num\\nhaving count(num)=1\\norder by num desc\\nlimit 1\\n\\noption 2\\nSELECT(\\n  SELECT IFNULL(num, NULL)\\n  FROM my_numbers\\n  GROUP BY num\\n  HAVING count(*) = 1\\n  ORDER BY num DESC\\n  LIMIT 1\\n) AS num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1193111,
                "title": "quick-easy-mysql-solution",
                "content": "```\\nSELECT MAX(num) AS num\\nFROM   (\\nSELECT num\\nFROM   my_numbers\\nGROUP  BY num\\nHAVING COUNT(num) = 1) temp\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM   (\\nSELECT num\\nFROM   my_numbers\\nGROUP  BY num\\nHAVING COUNT(num) = 1) temp\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1073820,
                "title": "faster-than-100-00-of-ms-sql-server-online-submissions",
                "content": "```\\nWITH once\\n     AS (SELECT num\\n         FROM   my_numbers\\n         GROUP  BY num\\n         HAVING Count(num) = 1)\\nSELECT Max(num) num\\nFROM   once\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nWITH once\\n     AS (SELECT num\\n         FROM   my_numbers\\n         GROUP  BY num\\n         HAVING Count(num) = 1)\\nSELECT Max(num) num\\nFROM   once\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 627080,
                "title": "easy-1-liner",
                "content": "select max(num) as num from (select num  from my_numbers group by num having count(num) = 1) a",
                "solutionTags": [],
                "code": "select max(num) as num from (select num  from my_numbers group by num having count(num) = 1) a",
                "codeTag": "Unknown"
            },
            {
                "id": 599121,
                "title": "mysql-solution",
                "content": "```\\nSELECT (\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING count(num) = 1\\n    ORDER BY num DESC\\n    LIMIT 1\\n) as num;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT (\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING count(num) = 1\\n    ORDER BY num DESC\\n    LIMIT 1\\n) as num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 533468,
                "title": "easy-understood-solution",
                "content": "```\\nSELECT max(parent.num) as num\\nFROM\\n(\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING COUNT(num) = 1\\n) AS parent;",
                "solutionTags": [],
                "code": "```\\nSELECT max(parent.num) as num\\nFROM\\n(\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING COUNT(num) = 1\\n) AS parent;",
                "codeTag": "Unknown"
            },
            {
                "id": 487730,
                "title": "if-null-function",
                "content": "```\\nselect ifnull((select num\\nfrom my_numbers\\ngroup by num\\nhaving count(num)=1\\norder by num desc\\nlimit 1),null) as num\\n```",
                "solutionTags": [],
                "code": "```\\nselect ifnull((select num\\nfrom my_numbers\\ngroup by num\\nhaving count(num)=1\\norder by num desc\\nlimit 1),null) as num\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 427045,
                "title": "mysql-using-max-function",
                "content": "```\\nSELECT MAX(num) AS num\\nFROM my_numbers\\nWHERE num IN (\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING COUNT(*) = 1); \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM my_numbers\\nWHERE num IN (\\n    SELECT num\\n    FROM my_numbers\\n    GROUP BY num\\n    HAVING COUNT(*) = 1); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 389760,
                "title": "oracle-with-out-rank",
                "content": "```\\nselect max(num) num from ( select max(num) num,count(1) from my_numbers\\ngroup by num \\nhaving count(1)=1)",
                "solutionTags": [],
                "code": "```\\nselect max(num) num from ( select max(num) num,count(1) from my_numbers\\ngroup by num \\nhaving count(1)=1)",
                "codeTag": "Unknown"
            },
            {
                "id": 328663,
                "title": "easy-oracle-solution",
                "content": "select max(num) as num \\nfrom \\n\\n(select a.num, count(*) as amount \\nfrom my_numbers a\\ngroup by a.num ) sub1 \\n\\nwhere amount=1 ;",
                "solutionTags": [],
                "code": "select max(num) as num \\nfrom \\n\\n(select a.num, count(*) as amount \\nfrom my_numbers a\\ngroup by a.num ) sub1 \\n\\nwhere amount=1 ;",
                "codeTag": "Unknown"
            },
            {
                "id": 201150,
                "title": "any-idea-why-this-solution-does-not-work",
                "content": "select num\\nfrom number\\ngroup by num\\nhaving count(num) = 1 \\norder by max(num) desc\\nlimit 1",
                "solutionTags": [],
                "code": "select num\\nfrom number\\ngroup by num\\nhaving count(num) = 1 \\norder by max(num) desc\\nlimit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 183682,
                "title": "my-solution-without-using-having-clause",
                "content": "select max(a.num) num\\nfrom (\\nselect num, count(*) cnt\\nfrom\\nnumber\\ngroup by num) a\\nwhere a.cnt =1;",
                "solutionTags": [],
                "code": "select max(a.num) num\\nfrom (\\nselect num, count(*) cnt\\nfrom\\nnumber\\ngroup by num) a\\nwhere a.cnt =1;",
                "codeTag": "Unknown"
            },
            {
                "id": 104469,
                "title": "mysql-concise-solution",
                "content": "Find the max number from the table whose count is 1.\\n\\n```\\n# Write your MySQL query statement below\\nSelect \\n    max(n.num) as num\\nfrom \\n    number n\\nwhere \\n    (Select count(num) from number where num = n.num) = 1;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSelect \\n    max(n.num) as num\\nfrom \\n    number n\\nwhere \\n    (Select count(num) from number where num = n.num) = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104480,
                "title": "ifnull-handle-null-value-tricky-part",
                "content": "first time using ifnull function. the first answer below passed all test cases, but I don't understand why the second way did not. second one outputs empty but not null value when there is no max value with count =1. Can anyone help me understand ifnull function better? Thanks.\\n\\n1. \\n```\\nselect ifnull( (select num from ( select num  \\nfrom number\\ngroup by num\\nhaving count(num) =  1\\norder by num desc \\nlimit 1\\n) as maxnum)  , null) as num\\n```\\n\\n2. \\n```\\nselect ifnull( num, null) as num\\nfrom ( select num  \\nfrom number\\ngroup by num\\nhaving count(num) =  1\\norder by num desc \\nlimit 1) as maxnum \\n```",
                "solutionTags": [],
                "code": "```\\nselect ifnull( (select num from ( select num  \\nfrom number\\ngroup by num\\nhaving count(num) =  1\\norder by num desc \\nlimit 1\\n) as maxnum)  , null) as num\\n```\n```\\nselect ifnull( num, null) as num\\nfrom ( select num  \\nfrom number\\ngroup by num\\nhaving count(num) =  1\\norder by num desc \\nlimit 1) as maxnum \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104481,
                "title": "easy-to-understand-solution",
                "content": "```\\nselect max(n.num) as num from number n where n.num not in (select num from number group by num having count(num) > 1);\\n```",
                "solutionTags": [],
                "code": "```\\nselect max(n.num) as num from number n where n.num not in (select num from number group by num having count(num) > 1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091773,
                "title": "sql-simple-solution",
                "content": "# Code\\n\\n```\\nSELECT \\n  max(n.num) AS num\\nFROM (\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING count(*) = 1\\n  ) n\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT \\n  max(n.num) AS num\\nFROM (\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING count(*) = 1\\n  ) n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091044,
                "title": "mysql-max-cte-easy-understandability",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWith single as (Select num, \\ncount(*) as rn\\nFrom MyNumbers group by num )\\n\\nSelect\\nMAX(num) as num\\nFrom single\\nwhere rn =1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWith single as (Select num, \\ncount(*) as rn\\nFrom MyNumbers group by num )\\n\\nSelect\\nMAX(num) as num\\nFrom single\\nwhere rn =1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090946,
                "title": "mysql-group-by",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(a.num) as num from (\\nselect num,count(*) from \\nMyNumbers\\ngroup by num\\nhaving count(*)=1)a\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(a.num) as num from (\\nselect num,count(*) from \\nMyNumbers\\ngroup by num\\nhaving count(*)=1)a\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089933,
                "title": "pandas-solution-beats-68-91",
                "content": "First drop_duplicates from the my_numbers table and don\\'t keep any duplicates (keep=False). Find the max from the remaining values. Make series into dataframe and rename column as needed. \\n\\nIf your remaining numbers table is empty, create a new dataframe with a null value.\\n\\nAll other cases, return the dataframe from above with the max value.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    numbers = my_numbers.drop_duplicates(keep=False).max().to_frame().rename(columns={0: \\'num\\'})\\n    if numbers.empty:\\n        return pd.DataFrame({\\'num\\': np.NaN})\\n    else:\\n        return numbers\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    numbers = my_numbers.drop_duplicates(keep=False).max().to_frame().rename(columns={0: \\'num\\'})\\n    if numbers.empty:\\n        return pd.DataFrame({\\'num\\': np.NaN})\\n    else:\\n        return numbers\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4089423,
                "title": "biggest-single-number",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\nSELECT \\n(CASE WHEN COUNT(num) <= 1 THEN num ELSE NULL END) as num_count\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\n)\\nSELECT MAX(num_count) as num FROM CTE\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\nSELECT \\n(CASE WHEN COUNT(num) <= 1 THEN num ELSE NULL END) as num_count\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\n)\\nSELECT MAX(num_count) as num FROM CTE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089156,
                "title": "sql-basic-optimal-sol-beats-90-ifnull-cte-group-by-having-orderby-limit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith base as (\\n    select count(num) as count, num\\n    from MyNumbers\\n    group by num\\n    having count(num) = 1\\n    order by num desc\\n    limit 1\\n)\\n\\nselect ifnull((select num from base), null) as num\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith base as (\\n    select count(num) as count, num\\n    from MyNumbers\\n    group by num\\n    having count(num) = 1\\n    order by num desc\\n    limit 1\\n)\\n\\nselect ifnull((select num from base), null) as num\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087646,
                "title": "easy-mysql-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087642,
                "title": "easy-mysql-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087641,
                "title": "easy-mysql-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect max(num) as num from(select num from MyNumbers group by num having count(num)=1) as single_num;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085420,
                "title": "mysql-using-case-statement",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT CASE WHEN COUNT(num) = 1 THEN num ELSE NULL END AS num FROM MyNumbers GROUP BY num \\nORDER BY num DESC LIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT CASE WHEN COUNT(num) = 1 THEN num ELSE NULL END AS num FROM MyNumbers GROUP BY num \\nORDER BY num DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084761,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(*)=1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(*)=1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084724,
                "title": "mysql-solution-without-subquery",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n(CASE WHEN COUNT(*)>1 THEN NULL ELSE num END) AS num\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n(CASE WHEN COUNT(*)>1 THEN NULL ELSE num END) AS num\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082270,
                "title": "easy-solution-using-subquery",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from (select num from MyNumbers  group by num having count(num)=1) as temp;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from (select num from MyNumbers  group by num having count(num)=1) as temp;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080760,
                "title": "easy-solution",
                "content": "# Code\\n## MS SQL Server, MySQL Solution\\n```\\nselect max(n.num) as num\\nfrom MyNumbers as n\\nwhere n.num in (select nInner.num\\n                from MyNumbers as nInner\\n                group by nInner.num\\n                having count(*) = 1)\\n```\\n\\n## Pandas Solution\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    return (my_numbers.groupby(\\'num\\')\\n                      .filter(lambda x: len(x) == 1)\\n                      .max()\\n                      .to_frame(name=\\'num\\'))\\n```\\n\\n**Please Upvote**\\uD83D\\uDD25\\uD83D\\uDE09\\n*Thanks for visiting my solution*.",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Pandas"
                ],
                "code": "```\\nselect max(n.num) as num\\nfrom MyNumbers as n\\nwhere n.num in (select nInner.num\\n                from MyNumbers as nInner\\n                group by nInner.num\\n                having count(*) = 1)\\n```\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    return (my_numbers.groupby(\\'num\\')\\n                      .filter(lambda x: len(x) == 1)\\n                      .max()\\n                      .to_frame(name=\\'num\\'))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4079748,
                "title": "coalesce",
                "content": "\\n\\n# Code\\n```\\nSELECT COALESCE(\\n    (SELECT num\\n     FROM MyNumbers\\n     GROUP BY num\\n     HAVING COUNT(num) = 1\\n     ORDER BY num DESC\\n     LIMIT 1),\\n    NULL) AS num;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT COALESCE(\\n    (SELECT num\\n     FROM MyNumbers\\n     GROUP BY num\\n     HAVING COUNT(num) = 1\\n     ORDER BY num DESC\\n     LIMIT 1),\\n    NULL) AS num;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079487,
                "title": "simple-solution-easy-understanding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect max(num) as num\\nfrom mynumbers\\nwhere num in(select num\\nfrom mynumbers\\ngroup by num\\nhaving count(num)=1 )\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect max(num) as num\\nfrom mynumbers\\nwhere num in(select num\\nfrom mynumbers\\ngroup by num\\nhaving count(num)=1 )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077373,
                "title": "runtime-beats-97-29-and-memory-beats-100-00-of-users-with-oracle",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect max(n.num) num\\nfrom (select distinct num, count(num) over(partition by num) cnt\\nfrom mynumbers) n\\nwhere n.cnt=1;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect max(n.num) num\\nfrom (select distinct num, count(num) over(partition by num) cnt\\nfrom mynumbers) n\\nwhere n.cnt=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073966,
                "title": "beats-more-than-99-mysql-solutions",
                "content": "# Complexity\\n- Time complexity: 629ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 99.78%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN(\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING COUNT(num)=1\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN(\\n    SELECT num\\n    FROM MyNumbers\\n    GROUP BY num\\n    HAVING COUNT(num)=1\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073893,
                "title": "beats-69-20-of-users-with-mysql",
                "content": "# Code\\n```\\nSELECT MAX(num) AS num \\nFROM \\n(SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num)=1) \\nAS single_num;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(num) AS num \\nFROM \\n(SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num)=1) \\nAS single_num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072687,
                "title": "best-approach-if-count-order-by-all-test-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT IF(COUNT(num) =1, num, null) AS num \\nFROM MyNumbers GROUP BY num \\nORDER BY COUNT(num), num DESC LIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT IF(COUNT(num) =1, num, null) AS num \\nFROM MyNumbers GROUP BY num \\nORDER BY COUNT(num), num DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072310,
                "title": "subquery-as-a-new-table-using-alias",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(m.num) AS num\\nFROM \\n(SELECT *\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num) = 1) m\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(m.num) AS num\\nFROM \\n(SELECT *\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num) = 1) m\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071673,
                "title": "runtime-beats-99-58",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect num\\nfrom(\\nselect num, count(*) as c\\nfrom MyNumbers\\ngroup by num\\nunion \\nselect null, 1) t\\nwhere c = 1\\norder by num DESC\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect num\\nfrom(\\nselect num, count(*) as c\\nfrom MyNumbers\\ngroup by num\\nunion \\nselect null, 1) t\\nwhere c = 1\\norder by num DESC\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4071599,
                "title": "ifnull-max-group-by-count",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect ifnull(max(num),null) as num from MyNumbers where num in (select num from MyNumbers group by num having count(num) = 1)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect ifnull(max(num),null) as num from MyNumbers where num in (select num from MyNumbers group by num having count(num) = 1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070550,
                "title": "mssql",
                "content": "# Approach\\nUse select from select\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect max(num) as num\\nfrom (\\n    select num\\n    from MyNumbers\\n    group by num\\n    having count(*)=1\\n) as aa\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect max(num) as num\\nfrom (\\n    select num\\n    from MyNumbers\\n    group by num\\n    having count(*)=1\\n) as aa\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068268,
                "title": "superfast-approach-beats-96",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from \\n(select num,count(num) as countnum from mynumbers\\ngroup by num \\nhaving countnum=1) as my\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from \\n(select num,count(num) as countnum from mynumbers\\ngroup by num \\nhaving countnum=1) as my\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067935,
                "title": "super-easy-with-99-8-less-time",
                "content": "select max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(num)=1)\\n",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "select max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(num)=1)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4064009,
                "title": "with-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nWITH cte AS (\\n  SELECT num, COUNT(*) AS num_count\\n  FROM mynumbers\\n  GROUP BY num\\n  HAVING COUNT(*) < 2\\n)\\nSELECT MAX(num) AS num\\nFROM cte;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nWITH cte AS (\\n  SELECT num, COUNT(*) AS num_count\\n  FROM mynumbers\\n  GROUP BY num\\n  HAVING COUNT(*) < 2\\n)\\nSELECT MAX(num) AS num\\nFROM cte;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059590,
                "title": "case-when-solution",
                "content": "```\\n    select case \\n            when max(tmp.num) is not null then max(tmp.num)\\n            else null \\n          end as num\\n\\n    from (select m.num, count(m.num) as cnt from MyNumbers as m\\n            group by m.num\\n            having count(m.num) = 1            \\n            ) as tmp\\n            \\n   \\n   \\n   \\n    \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n    select case \\n            when max(tmp.num) is not null then max(tmp.num)\\n            else null \\n          end as num\\n\\n    from (select m.num, count(m.num) as cnt from MyNumbers as m\\n            group by m.num\\n            having count(m.num) = 1            \\n            ) as tmp\\n            \\n   \\n   \\n   \\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058895,
                "title": "biggest-single-number-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect max(num) as num from \\n(\\n\\tselect num, count(num) as Number from   MyNumbers\\n\\tgroup by num \\n\\thaving count(num) =1\\n\\n)as s\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect max(num) as num from \\n(\\n\\tselect num, count(num) as Number from   MyNumbers\\n\\tgroup by num \\n\\thaving count(num) =1\\n\\n)as s\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4056973,
                "title": "simplified-using-derived-table-mssql-server",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT MAX(m.num) num FROM (\\n                            SELECT num \\n                            FROM MyNumbers\\n                            GROUP BY num\\n                            HAVING COUNT(num) = 1 \\n                            ) m\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT MAX(m.num) num FROM (\\n                            SELECT num \\n                            FROM MyNumbers\\n                            GROUP BY num\\n                            HAVING COUNT(num) = 1 \\n                            ) m\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055222,
                "title": "clear-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num from \\n(select num from MyNumbers\\ngroup by num having count(num) = 1) s\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num from \\n(select num from MyNumbers\\ngroup by num having count(num) = 1) s\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054468,
                "title": "groupby-and-simple-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query identifies numbers that appear only once in the mynumbers table. Using a subquery, it groups by num and filters for those with a count less than 2. The main query then checks if there\\'s a single unique number, returning it; otherwise, it returns null.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGrouping: Use a subquery to group the data by num and filter numbers that appear only once.\\nValidation: In the main query, check if there\\'s precisely one unique number from the subquery\\'s result.\\nDecision: Return the unique number if it exists, else return null\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n# Write your MySQL query statement below\\nselect if(num,max(num),null) as num from (select num from mynumbers group by num having count(num)<2) subquery;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query identifies numbers that appear only once in the mynumbers table. Using a subquery, it groups by num and filters for those with a count less than 2. The main query then checks if there\\'s a single unique number, returning it; otherwise, it returns null.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGrouping: Use a subquery to group the data by num and filter numbers that appear only once.\\nValidation: In the main query, check if there\\'s precisely one unique number from the subquery\\'s result.\\nDecision: Return the unique number if it exists, else return null\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n# Write your MySQL query statement below\\nselect if(num,max(num),null) as num from (select num from mynumbers group by num having count(num)<2) subquery;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4049505,
                "title": "mysql",
                "content": "\\nWITH tmp AS (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\n\\nSELECT \\nCASE WHEN COUNT(*) > 0 THEN MAX(num) \\nELSE NULL END \\nAS num FROM tmp;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nWITH tmp AS (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\n\\nSELECT \\nCASE WHEN COUNT(*) > 0 THEN MAX(num) \\nELSE NULL END \\nAS num FROM tmp;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4048987,
                "title": "easy-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num  IN (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*) = 1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num  IN (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*) = 1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047915,
                "title": "biggest-single-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) as num \\nFROM(SELECT num,COUNT(num) as Num_count\\nFROM MyNumbers\\nGROUP BY num) as p\\nWHERE Num_count <= 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) as num \\nFROM(SELECT num,COUNT(num) as Num_count\\nFROM MyNumbers\\nGROUP BY num) as p\\nWHERE Num_count <= 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047215,
                "title": "easy-solution-using-group-by-and-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as \\'num\\' from\\n(\\nselect num, count(num) from MyNumbers\\ngroup by 1\\nhaving count(num) = 1\\n) tbl1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as \\'num\\' from\\n(\\nselect num, count(num) from MyNumbers\\ngroup by 1\\nhaving count(num) = 1\\n) tbl1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046206,
                "title": "pandas-simple-approach-1-line-code",
                "content": "# Approach \\n**drop_duplicates()** function consider only duplicates elements thats why we get duplicate and return **max** of them \\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    #drop_duplicates consider only duplicates elements and pass non duplicates\\n    # keep = False means duplicates elements drops\\n    return my_numbers.drop_duplicates(keep = False).max().to_frame(name=\\'num\\')\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    #drop_duplicates consider only duplicates elements and pass non duplicates\\n    # keep = False means duplicates elements drops\\n    return my_numbers.drop_duplicates(keep = False).max().to_frame(name=\\'num\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4045799,
                "title": "subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(t.num) as num\\nFROM \\n(SELECT num, COUNT(num) as cnt FROM MyNumbers GROUP BY num) as t\\nWHERE cnt = 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(t.num) as num\\nFROM \\n(SELECT num, COUNT(num) as cnt FROM MyNumbers GROUP BY num) as t\\nWHERE cnt = 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044388,
                "title": "simple-and-efficient-group-by-having",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse group by with having clause because we need to group only those whose frequency in the table is 1. \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom MyNumbers\\nwhere num in\\n(select num from MyNumbers group by num having count(*)=1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom MyNumbers\\nwhere num in\\n(select num from MyNumbers group by num having count(*)=1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043473,
                "title": "simple-and-better-than-95-users-500-ms",
                "content": "\\n\\n# Code\\n```\\nSelect top 1 n as num \\nfrom (\\n        Select num as num1,\\n        case when count(num)=1 then num\\n             else null end n\\n        from mynumbers\\n        group by num\\n     )x\\norder by n desc, num1 desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSelect top 1 n as num \\nfrom (\\n        Select num as num1,\\n        case when count(num)=1 then num\\n             else null end n\\n        from mynumbers\\n        group by num\\n     )x\\norder by n desc, num1 desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043297,
                "title": "easy-mysql-solution-using-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num from mynumbers where num in (select num from mynumbers group by num having count(num)=1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num from mynumbers where num in (select num from mynumbers group by num having count(num)=1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043253,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nuse of max function will be required from a subquery which will give value of num which are appreaing just once  \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1) as tbl;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1) as tbl;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041614,
                "title": "619-mysql-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT max(num) AS num\\nFROM MyNumbers\\nWHERE num IN (\\n    SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT max(num) AS num\\nFROM MyNumbers\\nWHERE num IN (\\n    SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(*) = 1\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040584,
                "title": "easy-solution",
                "content": "# Approach\\nIn the SubQuery, find all the elements that are unique in the table.\\nThen find the max of them, in the MainQuery.\\nWe could also do it without using SubQuery.\\n**Note**-> The reason we are using SubQuery here is because, ***SubQueries always return null instead of emptyness***\\n\\n# Code\\n```\\nSELECT max(num) AS num FROM MyNumbers\\nWHERE num IN\\n    (\\n        SELECT num FROM MyNumbers\\n        GROUP BY num\\n        HAVING COUNT(num) = 1\\n    ) ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT max(num) AS num FROM MyNumbers\\nWHERE num IN\\n    (\\n        SELECT num FROM MyNumbers\\n        GROUP BY num\\n        HAVING COUNT(num) = 1\\n    ) ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040098,
                "title": "easy-sql-query-using-a-subqueries",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(*)=1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from MyNumbers where num in (select num from MyNumbers group by num having count(*)=1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038272,
                "title": "simple-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) AS num\\nFROM MyNumbers\\nWHERE num IN (\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036689,
                "title": "try-this-also",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\n\\nselect max(num)as num from\\n(select distinct (num) from MyNumbers\\ngroup by num\\nhaving count(num)=1)\\n\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\n\\nselect max(num)as num from\\n(select distinct (num) from MyNumbers\\ngroup by num\\nhaving count(num)=1)\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032810,
                "title": "sql-max-can-take-care-of-the-null-situation",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom\\n(select num from mynumbers group by num having count(num) = 1) as newtable\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom\\n(select num from mynumbers group by num having count(num) = 1) as newtable\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032800,
                "title": "sql-select-ifnull-xxx-null-as-some-col",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect ifnull(\\n(select num from mynumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc\\nlimit 1)\\n, null) as num\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect ifnull(\\n(select num from mynumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc\\nlimit 1)\\n, null) as num\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032520,
                "title": "using-group-by-cte",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as(select num from mynumbers\\ngroup by num\\nhaving count(num)=1 \\n)\\nselect max(num) as num from cte\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as(select num from mynumbers\\ngroup by num\\nhaving count(num)=1 \\n)\\nselect max(num) as num from cte\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030893,
                "title": "no-subquery-no-max-using-case-to-beasts-90",
                "content": "# Upvote if you like this solution \\u2705\\uD83D\\uDCAF\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT (CASE WHEN COUNT(num) > 1 THEN NULL\\n            ELSE num\\n            END) AS num\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT (CASE WHEN COUNT(num) > 1 THEN NULL\\n            ELSE num\\n            END) AS num\\nFROM MyNumbers\\nGROUP BY num\\nORDER BY num DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029336,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from(select num from mynumbers group by num having count(num)=1) as unique_num;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from(select num from mynumbers group by num having count(num)=1) as unique_num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027083,
                "title": "simple-code",
                "content": "\\n# Complexity\\n- Time complexity:\\n- 691ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- 0.00MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nselect max( a.num ) as num from MyNUmbers a\\nwhere\\n(select  count(*) from MyNUmbers b where a.num = b.num ) =1\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n\\nselect max( a.num ) as num from MyNUmbers a\\nwhere\\n(select  count(*) from MyNUmbers b where a.num = b.num ) =1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027025,
                "title": "only-with-cte",
                "content": "```\\nselect max(num) as num from \\n(\\n    with cte as \\n(\\n    # Write your MySQL query statement below\\n    select num , count(num) as cnt from mynumbers \\n    group by num\\n)\\nselect num from cte \\nwhere cnt = 1\\n) k\\n```",
                "solutionTags": [],
                "code": "```\\nselect max(num) as num from \\n(\\n    with cte as \\n(\\n    # Write your MySQL query statement below\\n    select num , count(num) as cnt from mynumbers \\n    group by num\\n)\\nselect num from cte \\nwhere cnt = 1\\n) k\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025639,
                "title": "my-easy-sql-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nselect max(a) num from\\n(select num a from MyNumbers \\ngroup by num\\nhaving count(num)=1)\\n\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nselect max(a) num from\\n(select num a from MyNumbers \\ngroup by num\\nhaving count(num)=1)\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025278,
                "title": "help-why-this-doesn-t-work",
                "content": "# Write your MySQL query statement below\\nselect max(num) from MyNumbers group by num having count(num)=1 limit 1",
                "solutionTags": [],
                "code": "# Write your MySQL query statement below\\nselect max(num) from MyNumbers group by num having count(num)=1 limit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 4023934,
                "title": "619-biggest-single-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nstep 1: find a number which has 1 count by  using sub query\\nstep 2: we have already find a number which has 1 count in subquery then use \"in\" operator to find max number \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT max(num) as num from mynumbers \\nwhere num in (select num from mynumbers group by num having count(num)=1); \\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT max(num) as num from mynumbers \\nwhere num in (select num from mynumbers group by num having count(num)=1); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023538,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nfirstly we select a number from the table MyNumber grouped by num\\nwhich will have a count of 1. And now of this numbers we will select the maximum number out of it.\\n# Complexity\\n- Time complexity: 967\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 0\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect max(num) as num from(select num from MyNumbers group by num\\nhaving count(num)=1 ) new;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect max(num) as num from(select num from MyNumbers group by num\\nhaving count(num)=1 ) new;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4019024,
                "title": "solution-using-ifnull",
                "content": "\\n# Code\\n```\\nSELECT IFNULL((\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n  ORDER BY num DESC \\n  LIMIT 1\\n), null) as num\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT IFNULL((\\n  SELECT num\\n  FROM MyNumbers\\n  GROUP BY num\\n  HAVING COUNT(num) = 1\\n  ORDER BY num DESC \\n  LIMIT 1\\n), null) as num\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4018102,
                "title": "two-different-method-using-if-and-when",
                "content": "\\n# Code\\n# first\\n```\\n select if(count(num)=1,num, null) as num\\n from MyNumbers \\n group by num\\n order by num desc\\n limit 1;\\n```\\n\\n# second\\n```\\nselect case when count(num)=1 then num else null end as num\\nfrom MyNumbers\\ngroup by num \\norder by num desc\\nlimit 1\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/5302332e-56b0-4e08-be1b-5360016fb3cd_1694174818.6518404.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n select if(count(num)=1,num, null) as num\\n from MyNumbers \\n group by num\\n order by num desc\\n limit 1;\\n```\n```\\nselect case when count(num)=1 then num else null end as num\\nfrom MyNumbers\\ngroup by num \\norder by num desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015899,
                "title": "i-have-this-one",
                "content": "# Code\\n```\\n\\nselect\\n  case\\n    when count(*) = 0 then null\\n    else num\\n  end as num\\n from (\\n  select num, count(*)\\n  from MyNumbers mn\\n  group by num\\n  having count(*) < 2\\n  order by num DESC\\n  limit 1\\n) result\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect\\n  case\\n    when count(*) = 0 then null\\n    else num\\n  end as num\\n from (\\n  select num, count(*)\\n  from MyNumbers mn\\n  group by num\\n  having count(*) < 2\\n  order by num DESC\\n  limit 1\\n) result\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015737,
                "title": "easy-and-simple-solution-with-explanation",
                "content": "# Approach\\nFirst, the subquery finds the count of each number (the number of times each number appears).\\nSecond, in the outer query, we filter the query to show only numbers that are single (showed only one time).\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(num) num\\nFROM (SELECT num, COUNT(num) count FROM mynumbers GROUP BY num) single_nums\\nWHERE count = 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(num) num\\nFROM (SELECT num, COUNT(num) count FROM mynumbers GROUP BY num) single_nums\\nWHERE count = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014992,
                "title": "3-simple-mysql-solutions-using-case-max-and-subqueries",
                "content": "# Code\\n```mysql []\\nselect max(num) as num from mynumbers\\nwhere num in (select (case when count(num)=1 then num else null end) from mynumbers group by num);\\n\\n```\\n\\n```\\nselect max(num) as num from mynumbers\\nwhere num in (select num from mynumbers group by num having count(num)=1);\\n```\\n\\noptimized above code\\n```mysql []\\nselect max(num) as num from\\n(select num from mynumbers group by num having count(num)=1) as nums;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```mysql []\\nselect max(num) as num from mynumbers\\nwhere num in (select (case when count(num)=1 then num else null end) from mynumbers group by num);\\n\\n```\n```\\nselect max(num) as num from mynumbers\\nwhere num in (select num from mynumbers group by num having count(num)=1);\\n```\n```mysql []\\nselect max(num) as num from\\n(select num from mynumbers group by num having count(num)=1) as nums;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014380,
                "title": "simple-easy-solution-oracle-mysql-sql-server",
                "content": "/* Write your PL/SQL query statement below */\\n\\n  select max(num) as num from (\\n  select num from mynumbers group by num having count(num) = 1)",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "/* Write your PL/SQL query statement below */\\n\\n  select max(num) as num from (\\n  select num from mynumbers group by num having count(num) = 1)",
                "codeTag": "Unknown"
            },
            {
                "id": 4011393,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from myNumbers where num in (select num from myNumbers  group by num having count(num) = 1)\\n;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from myNumbers where num in (select num from myNumbers  group by num having count(num) = 1)\\n;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010509,
                "title": "ms-sql-server-solution",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT ISNULL((SELECT TOP 1 num\\nFROM MyNumbers\\nGROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC), NULL) AS num\\n\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT ISNULL((SELECT TOP 1 num\\nFROM MyNumbers\\nGROUP BY num HAVING COUNT(num) = 1 ORDER BY num DESC), NULL) AS num\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006361,
                "title": "sql-man",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Max(num) as num from ( select num from MyNumbers\\ngroup by num having count(*)=1)new;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Max(num) as num from ( select num from MyNumbers\\ngroup by num having count(*)=1)new;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003751,
                "title": "77-beats-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH sample as(\\nSELECT MAX(num) as maxi\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*)=1)\\n\\nSELECT MAX(maxi) as num\\nFROM sample\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH sample as(\\nSELECT MAX(num) as maxi\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(*)=1)\\n\\nSELECT MAX(maxi) as num\\nFROM sample\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002079,
                "title": "2nd-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT  MAX(NUM) AS NUM\\nFROM MYNUMBERS\\nWHERE NUM IN (SELECT NUM\\nFROM MYNUMBERS\\nGROUP BY NUM\\nHAVING COUNT(NUM) = 1);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT  MAX(NUM) AS NUM\\nFROM MYNUMBERS\\nWHERE NUM IN (SELECT NUM\\nFROM MYNUMBERS\\nGROUP BY NUM\\nHAVING COUNT(NUM) = 1);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002067,
                "title": "using-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT  MAX(NUM) AS NUM\\nFROM MYNUMBERS\\nWHERE NUM IN (SELECT MAX(NUM)\\nFROM MYNUMBERS\\nGROUP BY NUM\\nHAVING COUNT(NUM) = 1);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT  MAX(NUM) AS NUM\\nFROM MYNUMBERS\\nWHERE NUM IN (SELECT MAX(NUM)\\nFROM MYNUMBERS\\nGROUP BY NUM\\nHAVING COUNT(NUM) = 1);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000293,
                "title": "sql-simple-solution-max-subquery",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```sql\\nSELECT\\nMAX(num) as num\\nFROM MyNumbers\\nWHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1);\\n```\\n",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```sql\\nSELECT\\nMAX(num) as num\\nFROM MyNumbers\\nWHERE num IN (SELECT num FROM MyNumbers GROUP BY num HAVING COUNT(num) = 1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999348,
                "title": "2-sql-solutions-where-from-from-need-alias-name",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n\\n# Code1\\n```\\n# Write your MySQL query statement below\\nselect max(num) num from MyNumbers\\nwhere num in (\\n  select num from MyNumbers group by num having count(num)=1\\n)\\n```\\n**ATTENTION:** alias name is optional\\n# Code2\\n```\\n# Write your MySQL query statement below\\nselect max(num) num from (\\n  select num from MyNumbers group by num having count(num)=1\\n) new_name\\n```\\n**ATTENTION:** alias name is **mus**t here!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) num from MyNumbers\\nwhere num in (\\n  select num from MyNumbers group by num having count(num)=1\\n)\\n```\n```\\n# Write your MySQL query statement below\\nselect max(num) num from (\\n  select num from MyNumbers group by num having count(num)=1\\n) new_name\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3995186,
                "title": "easy-mysql-solution-using-cte",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH cte1 AS\\n(SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num) = 1\\nORDER BY num DESC)\\n\\nSELECT MAX(num) as num\\nFROM cte1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH cte1 AS\\n(SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num) = 1\\nORDER BY num DESC)\\n\\nSELECT MAX(num) as num\\nFROM cte1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992571,
                "title": "clear-easy-sql-step-by-step-correct-formatting-comprehensive-explanation",
                "content": "# \\u2757 Upvote \\u2B06 if you found this useful \\u2714\\n\\n# \\uD83D\\uDCA1 Intuition (hint)\\n\\nEasy query that can be solved using subquery or CTE that returns aggregated list filtered by COUNT=1 and then selecting MAX from it. \\n\\n# \\uD83C\\uDFAF Approach (solution)\\n\\nTo solve this problem you can follow these steps:\\n1. SELECT MAX num\\n2. FROM a subquery (or use CTE)\\n\\t1. SELECT num\\n\\t2. FROM source table\\n\\t3. GROUP it BY num\\n\\t4. HAVING COUNT(num) = 1\\n\\t5. Alias the subquery\\n\\n# \\uD83D\\uDCC8 Complexity\\n\\n- \\u23F1 Time complexity:\\nBeats 80% of solutions with MySQL (at the time of submission)\\n\\n- \\uD83D\\uDCBE Space complexity:\\nBeats 100% of solutions with MySQL (space complexity in case of this problem is constant for all solutions)\\n\\n# \\uD83D\\uDD25 Code\\n\\n```sql\\nSELECT MAX(num) AS num\\nFROM (\\n\\xA0 \\xA0 SELECT num\\n\\xA0 \\xA0 FROM MyNumbers\\n\\xA0 \\xA0 GROUP BY num\\n\\xA0 \\xA0 HAVING COUNT(num) = 1\\n) AS Singles;\\n```\\n# \\u2757 Upvote \\u2B06 if you found this useful \\u2714",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT MAX(num) AS num\\nFROM (\\n\\xA0 \\xA0 SELECT num\\n\\xA0 \\xA0 FROM MyNumbers\\n\\xA0 \\xA0 GROUP BY num\\n\\xA0 \\xA0 HAVING COUNT(num) = 1\\n) AS Singles;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989882,
                "title": "ms-sql-server-explication",
                "content": "# Approach\\n\\nTo undestand the statment, first we need to clarify what is a single number.\\n\\nSingle number = He need to exist only once\\n\\nSoo, we need to count the repetitivity for the num values, you can do this in vary methods like count, sum\\n\\nAfter, just filter your count for only 1 appear\\n\\n\\n\\n# Code\\n```\\nwith cte as\\n(\\nSelect num n, SUM(case when num = num then 1 else 0 END) x FROM MyNumbers\\ngroup by num\\n)\\n\\nSelect MAX(n) as num FROM cte\\nWhere x = 1\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith cte as\\n(\\nSelect num n, SUM(case when num = num then 1 else 0 END) x FROM MyNumbers\\ngroup by num\\n)\\n\\nSelect MAX(n) as num FROM cte\\nWhere x = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987399,
                "title": "sql-biggest-single-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT MAX(n.num) AS num\\nFROM (SELECT num FROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num)=1)AS n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT MAX(n.num) AS num\\nFROM (SELECT num FROM MyNumbers\\nGROUP BY num\\nHAVING COUNT(num)=1)AS n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3986414,
                "title": "619-biggest-single-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT COALESCE(\\n    (SELECT num\\n    FROM mynumbers\\n    WHERE num = (\\n        SELECT TOP 1 num\\n        FROM mynumbers\\n        GROUP BY num\\n        HAVING COUNT(*) = 1\\n        ORDER BY num DESC\\n    )),\\n    NULL\\n) AS num;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT COALESCE(\\n    (SELECT num\\n    FROM mynumbers\\n    WHERE num = (\\n        SELECT TOP 1 num\\n        FROM mynumbers\\n        GROUP BY num\\n        HAVING COUNT(*) = 1\\n        ORDER BY num DESC\\n    )),\\n    NULL\\n) AS num;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3983541,
                "title": "easy-to-understand-solution-with-case-statement-in-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect case when count(num)=1 then num \\nwhen count(*)=0 then null end as num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1\\n\\n\\n\\n \\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect case when count(num)=1 then num \\nwhen count(*)=0 then null end as num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1\\n\\n\\n\\n \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975255,
                "title": "ms-sql-server-solution",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect max(n.num) as num from(\\nselect num,count(num) as cnt\\nfrom MyNumbers\\ngroup by num\\n) as N\\nwhere cnt = 1\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect max(n.num) as num from(\\nselect num,count(num) as cnt\\nfrom MyNumbers\\ngroup by num\\n) as N\\nwhere cnt = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975053,
                "title": "easy-solution-derived-table-mysql-pandas",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOur table had a single column from where we had to find the largest number which occured once. The first thing that comes to mind is to group our numbers and count them to check our condition of single instance.\\nThis would be helpful if we grouped out table to form another new table in order to shorten our query. So, a derived table was made containing the numbers and their counts, and placing a having clause to filter our table to only those numbers that had single instance in our original table.\\nThe last part was to find out the largest number from that table. We simply use the \\'max\\' function to find the maximum number.\\nThe point to remember is that if our derived table returns empty (meaning we had no number with a single instance) then the max function automatically returns null value thereby, handling the null cases by itself.\\n\\n# MySQL\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from \\n(\\n  select num, count(num) counts from MyNumbers \\n  group by num \\n  having counts = 1\\n) T;\\n```\\n\\n# Pandas\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    df = my_numbers.value_counts().reset_index()\\n    num = df[df[\\'count\\'] == 1][\\'num\\'].max()\\n    return pd.DataFrame({\\'num\\': [num]})\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from \\n(\\n  select num, count(num) counts from MyNumbers \\n  group by num \\n  having counts = 1\\n) T;\\n```\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    df = my_numbers.value_counts().reset_index()\\n    num = df[df[\\'count\\'] == 1][\\'num\\'].max()\\n    return pd.DataFrame({\\'num\\': [num]})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3970677,
                "title": "pandas-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince we are interested in only single numbers, we can drop all recurring numbers and then return maximum of the remaining ones.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Drop duplicate values, ensure that the `keep` argument is set to `False`, this will remove all non single numbers.\\n2. If the resulting dataframe does not have any numbers, return None, otherwise return the maximum value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Drop duplicates with `keep=False`\\n    my_numbers.drop_duplicates(\"num\", keep=False, inplace=True)\\n    # 2. If else condition to return maximum of single numbers or return None.\\n    if len(my_numbers[\"num\"]) != 0:\\n        return pd.DataFrame({\"num\": [max(my_numbers[\"num\"])]})\\n    return pd.DataFrame({\"num\": [None]})\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Drop duplicates with `keep=False`\\n    my_numbers.drop_duplicates(\"num\", keep=False, inplace=True)\\n    # 2. If else condition to return maximum of single numbers or return None.\\n    if len(my_numbers[\"num\"]) != 0:\\n        return pd.DataFrame({\"num\": [max(my_numbers[\"num\"])]})\\n    return pd.DataFrame({\"num\": [None]})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3968915,
                "title": "easy-to-understand",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num from (select num from MyNumbers group by num having count(num)=1) subquery_result;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num from (select num from MyNumbers group by num having count(num)=1) subquery_result;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3964576,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nselect max(t.a) as num\\nfrom\\n(\\nselect \\n      (case count(num)  \\n            when 1 then num\\n            else 0\\n            end) a\\nfrom mynumbers\\nhaving count(num) = 1\\ngroup by num) t\\n\\n\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nselect max(t.a) as num\\nfrom\\n(\\nselect \\n      (case count(num)  \\n            when 1 then num\\n            else 0\\n            end) a\\nfrom mynumbers\\nhaving count(num) = 1\\ngroup by num) t\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963312,
                "title": "sol",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num  \\nfrom (select num, count(num) as ct\\n      from MyNumbers\\n      group by num) m\\nwhere ct = 1\\n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num  \\nfrom (select num, count(num) as ct\\n      from MyNumbers\\n      group by num) m\\nwhere ct = 1\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962502,
                "title": "mysql-solution-easy-solution-using-subquery-having-max",
                "content": "\\n\\n# Code\\n```\\nSELECT MAX(num) AS num\\nFROM (SELECT num FROM myNumbers\\n      GROUP BY num\\n      HAVING COUNT(num) = 1) AS ps;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT MAX(num) AS num\\nFROM (SELECT num FROM myNumbers\\n      GROUP BY num\\n      HAVING COUNT(num) = 1) AS ps;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3960020,
                "title": "super-easy-approach",
                "content": "# Intuition\\n![upvote.png](https://assets.leetcode.com/users/images/dc38b496-2267-4a3a-9c1f-18b51474274d_1692991817.9157178.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT MAX(num) AS num\\nFROM\\n(SELECT num, COUNT(*) AS total\\nFROM MyNumbers\\nGROUP BY num\\n) temp\\nWHERE total = 1\\nORDER BY num DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT MAX(num) AS num\\nFROM\\n(SELECT num, COUNT(*) AS total\\nFROM MyNumbers\\nGROUP BY num\\n) temp\\nWHERE total = 1\\nORDER BY num DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957285,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num \\nfrom MyNumbers \\ngroup by num \\nhaving count(num) = 1) selection;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num \\nfrom MyNumbers \\ngroup by num \\nhaving count(num) = 1) selection;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957008,
                "title": "mysql-simple-and-easy",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSubquery and group by function with max() aggregate function\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom(\\n  select num\\n  from mynumbers\\n  group by num\\n  having count(*)=1\\n) as x\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom(\\n  select num\\n  from mynumbers\\n  group by num\\n  having count(*)=1\\n) as x\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956427,
                "title": "simple-solution",
                "content": "# Code\\n```\\nselect case\\n    when count(num) = 1 then num\\n    else null\\nend num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect case\\n    when count(num) = 1 then num\\n    else null\\nend num\\nfrom MyNumbers\\ngroup by num\\norder by num desc\\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954793,
                "title": "best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith abc as (select num, count(num) as pre from mynumbers group by num )\\n\\nselect max(abc.num) as num from abc where abc.pre<2 \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith abc as (select num, count(num) as pre from mynumbers group by num )\\n\\nselect max(abc.num) as num from abc where abc.pre<2 \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951909,
                "title": "pandas-2-approaches-groupby-and-drop-duplicates-a-question-for-pandas-experts-in-the-end",
                "content": "# Intuition\\nThere are two approaches:\\n\\n\\n### 1. Remove duplicates and take max\\n\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(df: pd.DataFrame) -> pd.DataFrame:\\n  return df.drop_duplicates(keep=False).max().to_frame(name=\"num\")\\n```\\n\\n\\n### 2. Groupby, filter and take max\\n\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(df: pd.DataFrame) -> pd.DataFrame:\\n  df[\"v\"] = df[\"num\"]\\n  df = df.groupby(\"num\", as_index=False).count()\\n  return df[df[\"v\"] == 1][[\"num\"]].max().to_frame(name=\"num\")\\n```\\n\\nQuestion to experts: I have to do this `df[\"v\"] = df[\"num\"]` as grouping on one column table loses that column. Looking at documentation I have not found how to ommit this behavior. Any way to do it without creating another column?",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(df: pd.DataFrame) -> pd.DataFrame:\\n  return df.drop_duplicates(keep=False).max().to_frame(name=\"num\")\\n```\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(df: pd.DataFrame) -> pd.DataFrame:\\n  df[\"v\"] = df[\"num\"]\\n  df = df.groupby(\"num\", as_index=False).count()\\n  return df[df[\"v\"] == 1][[\"num\"]].max().to_frame(name=\"num\")\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3951147,
                "title": "easy-sql-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num \\n      from MyNumbers\\n      group by num \\n      having count(num)=1 and num=max(num) \\n) as num\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect max(num) as num\\nfrom (select num \\n      from MyNumbers\\n      group by num \\n      having count(num)=1 and num=max(num) \\n) as num\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950218,
                "title": "solution-using-subquery",
                "content": "# Intuition\\n\"I use subquery to solve this question.\\n\\n# Approach\\n1. I make a table(q) which has respective frequency. \\n2. Then we know the order of execution first inner query is implemented.\\n3. lastly I give the condition frequency = 1 , and take out max num.\\nhappy coding!!!!!\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num \\nfrom\\n  (select num  ,Count(num) as frequency \\n  from MyNumbers\\n  group by num \\n  order by num desc) as q\\nwhere q.frequency = 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect max(num) as num \\nfrom\\n  (select num  ,Count(num) as frequency \\n  from MyNumbers\\n  group by num \\n  order by num desc) as q\\nwhere q.frequency = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3948106,
                "title": "simple-and-easy-solution-mysql",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith final as (SELECT * FROM MyNumbers GROUP BY num HAVING COUNT(num)=1)\\nSELECT max(num) as num FROM final;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith final as (SELECT * FROM MyNumbers GROUP BY num HAVING COUNT(num)=1)\\nSELECT max(num) as num FROM final;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3945315,
                "title": "biggest-single-number-with-pandas",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    result = sorted(set(my_numbers[\\'num\\'].to_list()))\\n    list = []\\n    for i in result:\\n        res = my_numbers[my_numbers[\\'num\\']==i].count()\\n        if res.num == 1:\\n            list.append(i)\\n    if len(list) == 0:\\n        val = None\\n    else:\\n        val = max(list)\\n    res_df = pd.DataFrame(data=[val], columns=[\\'num\\'])\\n    return res_df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\\n    result = sorted(set(my_numbers[\\'num\\'].to_list()))\\n    list = []\\n    for i in result:\\n        res = my_numbers[my_numbers[\\'num\\']==i].count()\\n        if res.num == 1:\\n            list.append(i)\\n    if len(list) == 0:\\n        val = None\\n    else:\\n        val = max(list)\\n    res_df = pd.DataFrame(data=[val], columns=[\\'num\\'])\\n    return res_df\\n```",
                "codeTag": "Python3"
            }
        ],
        "discussions": [
            {
                "id": 1632312,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1849916,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1925117,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1985811,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1981070,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1959286,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2067511,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2062856,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2053267,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2052128,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1632312,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1849916,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1925117,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1985811,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1981070,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 1959286,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2067511,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2062856,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2053267,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2052128,
                "content": [
                    {
                        "username": "hpareek1995",
                        "content": "select max(num) as num \\nfrom\\n (\\n   select  num from  mynumbers group by num having count(*) = 1\\n  ) a\\n\\nThis worked"
                    },
                    {
                        "username": "i_m_sana",
                        "content": "[@Vex-Devs](/Vex-Devs) It is an alias "
                    },
                    {
                        "username": "freezingfire15",
                        "content": "[@Vex-Devs](/Vex-Devs) I just found out that its just a alias name and it doesnt necessarily have to be \\'a\\' , you can have any name as you like\\n\\nEx:\\nselect max(num) as num\\nfrom\\n(\\nselect num from mynumbers group by num having count(*) = 1\\n) Vex ..also works"
                    },
                    {
                        "username": "Vex-Devs",
                        "content": "what does that \" a \"  indicate at end of query ????\n"
                    },
                    {
                        "username": "Suffolk",
                        "content": "it always gives \\'wrong answer\\' even if it shows no errors"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "This works in oracle and mysql:\\nselect max(num) as num from(\\n  select num, count(*) as cnt from MyNumbers\\n  group by num\\n) t1\\nwhere cnt = 1;"
                    },
                    {
                        "username": "_Atom_Bomb_",
                        "content": "`select ifnull(num, null) as num`\\n`from MyNumbers`\\n`group by num`\\n`having count(num) = 1`\\n`order by num desc `\\n`limit 1;`\\n\\nwhy this code not giving \\'null\\' when no valid \\'num\\' ?"
                    },
                    {
                        "username": "Samlee-Jian",
                        "content": "Because the \\'num\\' is not null when there is no single number.  Try this one: \\nselect if(count(num)>1,null,num) as num\\nfrom MyNumbers group by num\\norder by num desc limit 1;  "
                    },
                    {
                        "username": "Tejas187",
                        "content": "SELECT ifnull(\\n (SELECT num\\nFROM MyNumbers\\nGROUP BY num\\nHAVING count(*)=1\\nORDER BY num DESC limit 1),null) AS num"
                    },
                    {
                        "username": "wardatahir570",
                        "content": "select \\nmax(num) as num \\nfrom \\n( select num from MyNumbers\\ngroup by num having count(*)=1\\n)  as  A;"
                    },
                    {
                        "username": "Tamong_chi",
                        "content": "Could you please give me a tip?\\nI don\\'t have any idea why this code is not working;\\n\\n`select ifnull(num, \\'null\\') as num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\norder by num desc limit 1`"
                    },
                    {
                        "username": "JeremyAnderson8",
                        "content": "There is an error with this question. I am returning the correct output for both test cases and it is still displaying wrong."
                    },
                    {
                        "username": "danpool",
                        "content": "How can I write this in pandas? Here is what I have so far:\nimport pandas as pd\n\ndef biggest_single_number(my_numbers: pd.DataFrame) -> pd.DataFrame:\n    dfList = my_numbers.values.tolist()\n    uniqueNum = my_numbers[(my_numbers['num'] ==  my_numbers['num'].nunique())]\n    maxNum = uniqueNum[(uniqueNum['num'] ==  uniqueNum['num'].max())]\n    nullVal = my_numbers[(my_numbers['num'] ==  'null')]\n\n    for i in dfList:\n        if dfList.count(i) > 1:\n            return maxNum\n        else:\n            return nullVal\n        \n\nI want the argument to be able to include max unique number and to return null if there is no unique values in a column. I can do that in a regular python loop statement, but it keeps throwing me exception that I must return values in DataFrame, not single values. "
                    },
                    {
                        "username": "Abantika_Choudhary",
                        "content": "select max(A.number) as num from(\\nselect ifnull(num,null) as number, count(num) as counter\\nfrom MyNumbers\\ngroup by num\\n)A\\nwhere A.counter=1\\n;"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select max(num) as num from MyNumbers\\nwhere num in (select num from MyNumbers \\n group by num having count(num)=1)"
                    },
                    {
                        "username": "raymondyux",
                        "content": "Does any one know why my code below doesn\\'t work compared to the others?\\n\\n`SELECT CASE WHEN cnt = 1\\n  THEN MAX(num)\\n  ELSE NULL\\n  END AS num\\nFROM (\\n  SELECT num, COUNT(num) AS cnt\\n  FROM MyNumbers\\n  GROUP BY num\\n) AS num_count`\\n\\nAbove always give null, instead of giving the biggest number with only 1 count."
                    }
                ]
            },
            {
                "id": 2034448,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 2025277,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 2022802,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 2017226,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1976769,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1957041,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1933107,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1915647,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1912964,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            },
            {
                "id": 1885009,
                "content": [
                    {
                        "username": "hubbba",
                        "content": "Can somebody explain why CASE WHEN is not a good approach here?\\nThank you in advance!"
                    },
                    {
                        "username": "mhmahmud",
                        "content": "SELECT MAX(num) FROM `mynumbers`\\nWHERE num IN(SELECT num FROM `mynumbers`\\nGROUP BY num\\nHAVING COUNT(num)=1)"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "Must say, I never knew about if function in MySQL. "
                    },
                    {
                        "username": "aa98-45556443355666",
                        "content": "What is wrong in my code  `select if(count(num)=1,max(num),null) as num from mynumbers;` ? Why it is giving null ?"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Alexithymia explained:\n`return the max non-duplicate number`\n\n"
                    },
                    {
                        "username": "Sujith_123",
                        "content": "select case\\nwhen 1=1 then max(num)\\nelse \"null\"\\nend as num from (select num from mynumbers \\ngroup by num\\nhaving count(num)=1) as nex\\n\\nwhy this is not working ...but it showing correct output"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT MAX(s1.num) AS num\\nFROM  (SELECT num FROM MyNumbers\\n                GROUP BY 1\\n                HAVING Count(num)=1) AS s1;"
                    },
                    {
                        "username": "kuldeepverma471997",
                        "content": "select num from MyNumbers group by num having count(*)=1 order by num desc  limit 1 \\n\\ncan someone tell me please whats the issue in this code? "
                    },
                    {
                        "username": "user5719d",
                        "content": "\\nSELECT MAX(NUM) AS NUM \\nFROM\\n(SELECT NUM,COUNT(*) AS CNT FROM MYNUMBERS \\nGROUP BY NUM\\n) T WHERE CNT = 1;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT max(num) as num\\nFROM\\n(\\nSELECT num\\nFROM MyNumbers\\nGROUP BY num \\nHAVING COUNT(num) = 1\\n\\n) as a"
                    }
                ]
            }
        ]
    },
    {
        "title": "Not Boring Movies",
        "question_content": "<p>Table: <code>Cinema</code></p>\n\n<pre>\n+----------------+----------+\n| Column Name    | Type     |\n+----------------+----------+\n| id             | int      |\n| movie          | varchar  |\n| description    | varchar  |\n| rating         | float    |\n+----------------+----------+\nid is the primary key (column with unique values) for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the movies with an odd-numbered ID and a description that is not <code>&quot;boring&quot;</code>.</p>\n\n<p>Return the result table ordered by <code>rating</code> <strong>in descending order</strong>.</p>\n\n<p>The&nbsp;result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nCinema table:\n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 1  | War        | great 3D    | 8.9    |\n| 2  | Science    | fiction     | 8.5    |\n| 3  | irish      | boring      | 6.2    |\n| 4  | Ice song   | Fantacy     | 8.6    |\n| 5  | House card | Interesting | 9.1    |\n+----+------------+-------------+--------+\n<strong>Output:</strong> \n+----+------------+-------------+--------+\n| id | movie      | description | rating |\n+----+------------+-------------+--------+\n| 5  | House card | Interesting | 9.1    |\n| 1  | War        | great 3D    | 8.9    |\n+----+------------+-------------+--------+\n<strong>Explanation:</strong> \nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.\n</pre>\n",
        "solutions": [
            {
                "id": 3839979,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT * FROM Cinema WHERE MOD( id, 2) = 1 AND \\n\\ndescription <> \\'boring\\' ORDER BY rating DESC\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/1c3b060c-d239-4c22-bc8b-7ccd74b5cb42_1690744091.6429114.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT * FROM Cinema WHERE MOD( id, 2) = 1 AND \\n\\ndescription <> \\'boring\\' ORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 104483,
                "title": "my-solution",
                "content": "```SELECT * FROM cinema WHERE (id % 2 = 1) AND (description <> 'boring') ORDER BY rating DESC```",
                "solutionTags": [],
                "code": "```SELECT * FROM cinema WHERE (id % 2 = 1) AND (description <> 'boring') ORDER BY rating DESC```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538748,
                "title": "sql-easy-solution",
                "content": "```\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere (id % 2) = 1 and description != \"boring\"\\norder by rating desc\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere (id % 2) = 1 and description != \"boring\"\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2952824,
                "title": "easy-to-understand",
                "content": "# Upvote if it helps\\n\\n# TIP:- Directly submit query if it not runs.\\n        //If you get this error,\\n        \\n        Invalid Testcase\\n        0 <= rating <= 10 only\\n        \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE mod(id,2)=1 AND description not LIKE \\'boring\\' ORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE mod(id,2)=1 AND description not LIKE \\'boring\\' ORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2387482,
                "title": "faster-than-96-48-easy-solution",
                "content": "```\\nSELECT * from Cinema\\nwhere mod(id,2) <> 0 AND description <> \\'boring\\'\\nORDER BY rating desc;\\n```\\nIf you have any doubts, feel free to ask...\\nIf you understand the concept. Don\\'t Forget to upvote \\uD83D\\uDE0A\\n![image](https://assets.leetcode.com/users/images/b5565d25-3bf0-4c11-a80c-34b35e65d596_1659791150.066343.png)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * from Cinema\\nwhere mod(id,2) <> 0 AND description <> \\'boring\\'\\nORDER BY rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3531057,
                "title": "easy-solution-with-easy-explanation",
                "content": "# Intuition\\nLet\\'s start with what we aare given :\\nWe have a table  called movies and it has 4 rows(tuples)\\nWhat does the question want ? \\nAll of the movies that pass a certain test case.\\nNote : we want to return everything ( the id, name.description,rating) for each movie. \\n\\n# Approach\\nSince we want everything , We\\'ll use Select *.\\nWhat does the (*) mean? \\nIt basically means select everything.\\nMoving on , we\\'ll start with our condition, we actually have 2 conditions here.\\n1- movies that have an odd number id\\n2- movies that have descrption that isnt boring\\n\\n*Simple Logic :*\\n\\nIf a number X % 2 = 0 , anynumber that has a 0 result when applying modulo to it, means that it\\'s an even number (Basic Maths).\\n*Syntax*\\nNot equal is usually as follows  (!= )\\nIn Sql , we can use <>  which basically means not equal and it\\'s the same as !=.\\n\\nSo our first Condition would be as follows:( we want the odd numbers remember that)\\n```\\nwhere  id  %2 <> 0 \\n```\\nFor our second condition , we do the same : We\\'ll use the  <>\\n```\\ndescription <> \\'boring\\'\\n```\\nps: boring is a string so we have to put it inisde those  \\'  \\'\\n\\nWe then add and AND between them. In Sql, and is written as (and or AND) we dont use the (&) like we usually do in proggramming be careful!\\n\\n\\nFinally , we order them by rating. Using the Order by aggregate function.\\n```\\norder by rating desc \\n```\\nps: By defualt the order by sorts in ascending order (asc) so we have to specify and write desc , which means descending order\\n\\n\\n\\nUpvote if this was helpful, I\\'m also solving other SQl problems in the SQL 50 Study Plan series. Make sure to check it out and Happy Hacking :) !\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect * from Cinema\\nwhere  id  %2 <> 0  And  description <> \\'boring\\'\\norder by rating desc \\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Brainteaser",
                    "Database"
                ],
                "code": "```\\nwhere  id  %2 <> 0 \\n```\n```\\ndescription <> \\'boring\\'\\n```\n```\\norder by rating desc \\n```\n```\\n# Write your MySQL query statement below\\nSelect * from Cinema\\nwhere  id  %2 <> 0  And  description <> \\'boring\\'\\norder by rating desc \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2433127,
                "title": "mysql-1-liner-solution-beginner-level-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n**Runtime:** 373 ms, faster than 91.58% of MySQL online submissions for Not Boring Movies.\\n```\\nSELECT * FROM cinema WHERE (id % 2 = 1) AND (description <> \\'boring\\') ORDER BY rating DESC\\n```\\n**Runtime:** 373 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM cinema WHERE (id % 2 = 1) AND (description <> \\'boring\\') ORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 444508,
                "title": "faster-than-90-by-bit-operation",
                "content": "```\\nselect * from cinema where description <> \\'boring\\' and id & 1 = 1 order by rating DESC\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nselect * from cinema where description <> \\'boring\\' and id & 1 = 1 order by rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1833320,
                "title": "not-boring-movies-solution-oracle",
                "content": "SELECT\\n    *\\nFROM\\n    cinema\\nWHERE\\n    MOD(id, 2) = 1 AND description != \\'boring\\'\\nORDER BY rating DESC",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "SELECT\\n    *\\nFROM\\n    cinema\\nWHERE\\n    MOD(id, 2) = 1 AND description != \\'boring\\'\\nORDER BY rating DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 808237,
                "title": "sql-easy-peasy-solution",
                "content": "```\\nSELECT id, movie, description, rating\\nFROM cinema\\nWHERE id % 2 = 1 and description != \"boring\"\\nORDER BY rating DESC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT id, movie, description, rating\\nFROM cinema\\nWHERE id % 2 = 1 and description != \"boring\"\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3710248,
                "title": "super-easy-solution",
                "content": "# Code\\n```\\nselect *\\nfrom Cinema\\nwhere id%2=1 and description !=\\'boring\\'\\norder by rating  DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect *\\nfrom Cinema\\nwhere id%2=1 and description !=\\'boring\\'\\norder by rating  DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3532884,
                "title": "mysql-solution-for-not-boring-movies-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given SQL query retrieves information about movies from the \"cinema\" table based on certain conditions. It selects movies with odd \"id\" values, excludes movies with a description of \\'boring\\', and orders the result by rating in descending order.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query starts with the SELECT keyword followed by the column names id, movie, description, and rating.\\n2. The FROM clause specifies the table name as \"cinema\".\\n3. The WHERE clause applies the conditions id % 2 = 1 to select movies with odd \"id\" values and description <> \\'boring\\' to exclude movies with the description \\'boring\\'.\\n4. The ORDER BY clause orders the result by the \"rating\" column in descending order using the DESC keyword.\\n5. The query retrieves the results from the \"cinema\" table based on the specified conditions and ordering.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the \"cinema\" table, the indexing of the \"id\" column (if any), and the execution efficiency of the query optimizer. The conditions in the WHERE clause (id % 2 = 1 and description <> \\'boring\\') need to be evaluated for each row in the table. If there is an index on the \"id\" column, it can potentially improve the performance by reducing the number of rows to be scanned. The time complexity is typically linear or close to linear in the size of the \"cinema\" table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the query depends on the number of rows in the result set and the storage required for each row. The database engine needs to store the intermediate results of the query, including the selected columns (id, movie, description, and rating), as well as the final result set. The space complexity is proportional to the number of rows returned in the result set.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from cinema where id % 2 = 1 and description <> \\'boring\\' order by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from cinema where id % 2 = 1 and description <> \\'boring\\' order by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2546050,
                "title": "620-not-boring-movies",
                "content": "```\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE description != \"boring\" AND MOD(id,2)\\nORDER BY rating DESC;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE description != \"boring\" AND MOD(id,2)\\nORDER BY rating DESC;",
                "codeTag": "Unknown"
            },
            {
                "id": 879306,
                "title": "100-faster",
                "content": "```\\nSELECT * FROM cinema WHERE (id %2 !=0 ) AND (description != \"boring\") order by rating desc ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM cinema WHERE (id %2 !=0 ) AND (description != \"boring\") order by rating desc ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3871862,
                "title": "beats-86-easy-mysql-solution-order-by",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse of Select Statement and Order By statement\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * \\nFROM Cinema \\nWHERE id%2 <> 0 AND description!=\"boring\"\\nORDER BY rating DESC;\\n```\\n\\n##### Please upvote if you found it helpful.\\n![Upvote picture.jpg](https://assets.leetcode.com/users/images/990e5494-dd1b-4d4f-859b-636a44ec01aa_1691322448.13535.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * \\nFROM Cinema \\nWHERE id%2 <> 0 AND description!=\"boring\"\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3608505,
                "title": "sql-where-order-by-easy-to-understand",
                "content": "![image.png](https://assets.leetcode.com/users/images/6ab75e23-ca75-4fe8-a4a8-db50197b9a1d_1686129325.057702.png)\\n\\n\\n# Code\\n```\\n\\nselect *from Cinema where id % 2 = 1 and description != \\'boring\\'\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect *from Cinema where id % 2 = 1 and description != \\'boring\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587502,
                "title": "oracle-solution-by-mod-function-and-where-statement",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. MOD function will return the remainder of division. If our id is even that we have zero in result. Otherwise we have 1. So all we have to do is just make use of WHERE statement with AND operator.\\n2. Secondly, we just order by descending rating.\\n\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT * FROM Cinema\\nWHERE description != \\'boring\\' AND MOD(id, 2) = 1\\nORDER BY rating DESC;\\n\\n```\\n\\nThank you, if you have any suggestions or thoughts, please leave them in a comment section below.",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT * FROM Cinema\\nWHERE description != \\'boring\\' AND MOD(id, 2) = 1\\nORDER BY rating DESC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3563237,
                "title": "clear-implementation-in-ms-sql-mysql-oracle",
                "content": "A straight forward question if you know the basic `WHERE` and `ORDER BY`. I have added a brief summary for the SQL commands at the end for those interested to read.\\n\\n# Code\\n``` MS_SQL []\\nSELECT * \\nFROM Cinema\\nWHERE id % 2 = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```\\n``` MySQL []\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```\\n``` Oracle []\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```\\n\\n# Commands\\n\\n## WHERE\\n This command is used to filter records and extract only those records that fulfill a specified condition. We have used `AND` to combine the results of two conditions.\\n## MOD (MATH Function)\\n This is a mathematical function that returns the remainder of one number divided by another. Since you cannot use `%` to find modulus in Oracle, we use the `MOD`function. You can use the MOD() in MySQL as well.\\n## ORDER BY\\n This command is used to sort the result-set in ascending or descending order. We used `DESC` to sort the data in descending order.",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "``` MS_SQL []\\nSELECT * \\nFROM Cinema\\nWHERE id % 2 = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```\n``` MySQL []\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```\n``` Oracle []\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 \\nAND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3324010,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id % 2 != 0 and description != \\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id % 2 != 0 and description != \\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2249662,
                "title": "oracle-best-solution",
                "content": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT \\nid AS \"id\",\\nmovie AS \"movie\",\\ndescription AS \"description\",\\nrating AS \"rating\"\\nFROM cinema \\nWHERE MOD(id, 2) = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT \\nid AS \"id\",\\nmovie AS \"movie\",\\ndescription AS \"description\",\\nrating AS \"rating\"\\nFROM cinema \\nWHERE MOD(id, 2) = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1073238,
                "title": "very-easy-solution",
                "content": "-- Question) 620. Not Boring Movies\\n\\n\\n-- Query\\n\\n-- MySQL & MS SQL Server\\n\\n```\\nselect * from cinema\\nwhere id%2 = 1 and description != \\'boring\\' \\norder by rating Desc;\\n```\\nIf you find any issue in understanding the solutions then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nselect * from cinema\\nwhere id%2 = 1 and description != \\'boring\\' \\norder by rating Desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 856970,
                "title": "mysql-0b-solution-beats-99-38-submissions-runtime-100-less-space",
                "content": "```\\nselect * from cinema\\nwhere id%2 != 0 and description != \"boring\"\\norder by rating desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect * from cinema\\nwhere id%2 != 0 and description != \"boring\"\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008182,
                "title": "100-easy-fast-clean-solution-beginner-friendly",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect *\\nfrom cinema \\nwhere id%2 <> 0 and description not like\\'b%\\'\\norder by rating desc\\n```\\n\\n![wallpaperflare-cropped.jpg](https://assets.leetcode.com/users/images/24a41f3e-df28-495f-b205-b127355f5cc7_1693976014.8699834.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect *\\nfrom cinema \\nwhere id%2 <> 0 and description not like\\'b%\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992575,
                "title": "easy-sql-solution",
                "content": "# **PLEASE UPVOTE MY SOLUTION IG YOU LIKE IT**\\n# **CONNECT WITH ME**\\n# **[https://www.linkedin.com/in/pratay-nandy-9ba57b229/]()**\\n# **[https://www.instagram.com/pratay_nandy/]()**\\n# Approach\\n1)SELECT ODD ID --> ID%2!=0\\n2)DESCRIPTION NOT BORING --> DESCRIPTION!=\"BORING\"\\n3)ORDER IT BY RATING IN DESC  --> ORDER BY RATING DESC\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE id % 2 != 0\\nAND\\ndescription !=\"boring\" \\nORDER BY RATING DESC;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE id % 2 != 0\\nAND\\ndescription !=\"boring\" \\nORDER BY RATING DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3983631,
                "title": "use-slicing-ignore-people-asking-you-to-work-out-whether-there-s-a-remainder-after-dividing-by-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[::2][cinema.description != \\'boring\\'].sort_values(\\'rating\\', ascending = False)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[::2][cinema.description != \\'boring\\'].sort_values(\\'rating\\', ascending = False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3960962,
                "title": "very-easy-solution-must-try",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT ID,MOVIE,DESCRIPTION,RATING FROM CINEMA WHERE ID%2!=0 AND DESCRIPTION!=\\'boring\\' ORDER BY RATING DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT ID,MOVIE,DESCRIPTION,RATING FROM CINEMA WHERE ID%2!=0 AND DESCRIPTION!=\\'boring\\' ORDER BY RATING DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3835037,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating \\nFROM cinema \\nWHERE id % 2 = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating \\nFROM cinema \\nWHERE id % 2 = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3776324,
                "title": "not-boring-movies-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2 = 1 and description !=\"boring\" order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2 = 1 and description !=\"boring\" order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3709625,
                "title": "easy-to-understandable-basic",
                "content": "\\n# Code\\n```\\nselect * from Cinema where (id%2) != 0 and description != \"boring\" order by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from Cinema where (id%2) != 0 and description != \"boring\" order by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3604921,
                "title": "simple-sql-solution-sss",
                "content": "# Code\\n```\\nSelect * from Cinema\\nwhere (id%2 <> 0) and description <> \\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect * from Cinema\\nwhere (id%2 <> 0) and description <> \\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3575294,
                "title": "easy-mysql-solution-order-by",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE (id%2=1 AND description !=\"boring\") ORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE (id%2=1 AND description !=\"boring\") ORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3377427,
                "title": "mysql-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id % 2!=0 and description!=\"boring\" order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id % 2!=0 and description!=\"boring\" order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3308475,
                "title": "620-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT id, movie, description, rating \\nFROM cinema \\nWHERE id % 2 = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT id, movie, description, rating \\nFROM cinema \\nWHERE id % 2 = 1 AND description != \\'boring\\' \\nORDER BY rating DESC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2732592,
                "title": "easy-solution",
                "content": "```\\nSELECT * FROM Cinema\\nWHERE NOT description=\\'boring\\' AND  ID%2\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM Cinema\\nWHERE NOT description=\\'boring\\' AND  ID%2\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2668345,
                "title": "not-boring-movies",
                "content": "SELECT * FROM cinema WHERE MOD(id, 2) = 1 AND description != \\'boring\\' ORDER BY rating DESC",
                "solutionTags": [],
                "code": "SELECT * FROM cinema WHERE MOD(id, 2) = 1 AND description != \\'boring\\' ORDER BY rating DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 1026511,
                "title": "mysql-startightforward",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT \\n    *\\nFROM\\n    cinema\\nWHERE\\n    description != \\'boring\\' AND\\n    id % 2 != 0\\nORDER BY \\n    rating DESC\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    *\\nFROM\\n    cinema\\nWHERE\\n    description != \\'boring\\' AND\\n    id % 2 != 0\\nORDER BY \\n    rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 828304,
                "title": "runtime-539-ms-faster-than-68-60-of-oracle-online-submissions",
                "content": "```\\nSELECT * FROM CINEMA\\nWHERE MOD(id,2)<>0 AND description<>\\'boring\\'\\nORDER BY(rating) DESC;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT * FROM CINEMA\\nWHERE MOD(id,2)<>0 AND description<>\\'boring\\'\\nORDER BY(rating) DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 208946,
                "title": "it-works",
                "content": "```\\nselect* from cinema \\nwhere mod(id,2)<>0 and description not like \\'%boring%\\'\\norder by rating desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect* from cinema \\nwhere mod(id,2)<>0 and description not like \\'%boring%\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 119451,
                "title": "simple-solution",
                "content": "```\\nSelect * \\nFrom cinema \\nWhere id % 2 = 1 and description != \\'boring\\' \\nOrder by rating desc\\n```",
                "solutionTags": [],
                "code": "```\\nSelect * \\nFrom cinema \\nWhere id % 2 = 1 and description != \\'boring\\' \\nOrder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065350,
                "title": "not-boring-movies-easy-pandas",
                "content": "[see the successfully Accepted Submission](https://leetcode.com/submissions/detail/1053772792/)\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) Let\\'s, select and check whether each value in the \\'description\\' column starts with the letter \\'b\\'.\\n    boring_movie = cinema[\\'description\\'].str.startswith(\\'b\\')\\n    # 2) Then, we check not boring movie by using a unary operator to negate a boolean Series.\\n    not_boring = (~boring_movie)\\n    # 3) Next, we check movie which has an odd-numbered ID by using a unary operator to negate a boolean Series.\\n    odd_numbered_ID = (cinema[\\'id\\'] % 2 != 0)\\n    \\n    # 4) After that, rows where id%2 is not equal to 0 and description does not start with \\'b\\' are filtered.\\n    filtered_cinema = cinema[odd_numbered_ID & not_boring]\\n\\n    # 5) Finally, we sort the filtered DataFrame by the \\'rating\\' column in descending order\\n    sorted_cinema = filtered_cinema.sort_values(by=\\'rating\\', ascending=False)\\n\\n    return sorted_cinema\\n```\\n\\n![image](https://assets.leetcode.com/users/images/dcbbb168-f493-458b-be15-3cdbae3fadc4_1695143212.8418615.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # 1) Let\\'s, select and check whether each value in the \\'description\\' column starts with the letter \\'b\\'.\\n    boring_movie = cinema[\\'description\\'].str.startswith(\\'b\\')\\n    # 2) Then, we check not boring movie by using a unary operator to negate a boolean Series.\\n    not_boring = (~boring_movie)\\n    # 3) Next, we check movie which has an odd-numbered ID by using a unary operator to negate a boolean Series.\\n    odd_numbered_ID = (cinema[\\'id\\'] % 2 != 0)\\n    \\n    # 4) After that, rows where id%2 is not equal to 0 and description does not start with \\'b\\' are filtered.\\n    filtered_cinema = cinema[odd_numbered_ID & not_boring]\\n\\n    # 5) Finally, we sort the filtered DataFrame by the \\'rating\\' column in descending order\\n    sorted_cinema = filtered_cinema.sort_values(by=\\'rating\\', ascending=False)\\n\\n    return sorted_cinema\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4038720,
                "title": "pandas-filtering-and-sort-values",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFilter data with satify id%2==1 and description != \\'boring, and sort by descending order of ratings. \\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[(cinema[\\'id\\']%2==1) & (cinema[\\'description\\']!=\\'boring\\')].sort_values(by=\\'rating\\', ascending=False)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[(cinema[\\'id\\']%2==1) & (cinema[\\'description\\']!=\\'boring\\')].sort_values(by=\\'rating\\', ascending=False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4032874,
                "title": "simple-mysql-pandas-one-liner",
                "content": "# MySQL\\n```\\nselect \\n    id, \\n    movie,\\n    description,\\n    rating\\nfrom Cinema c\\nwhere c.description <> \\'boring\\' and c.id % 2 <> 0\\norder by c.rating desc\\n```\\n# Pandas\\n```\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema.query(\"description != \\'boring\\' & id % 2 != 0\").sort_values(\"rating\", ascending=False)\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\n    id, \\n    movie,\\n    description,\\n    rating\\nfrom Cinema c\\nwhere c.description <> \\'boring\\' and c.id % 2 <> 0\\norder by c.rating desc\\n```\n```\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema.query(\"description != \\'boring\\' & id % 2 != 0\").sort_values(\"rating\", ascending=False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4021043,
                "title": "easy-solution-explanation-with-steps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst I have to see what I have to select and eliminate adn then which columns are required\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Select rows which have id%2!=0 (odd id\\'s)\\n2. Select rows which have description != \"boring\"\\n3. I need both 1 and 2 condition so used where with AND\\n4. Now select all the column using *\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE id%2!=0 AND description != \"boring\"\\norder by rating DESC;\\n```\\n\\n![](https://assets.leetcode.com/users/images/541b8e36-5eb3-4283-b953-6067480389c3_1675058399.1742556.jpeg)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE id%2!=0 AND description != \"boring\"\\norder by rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014717,
                "title": "pandas-concise-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    \\n    result = cinema[(cinema[\\'id\\'] % 2 == 1) & (cinema[\\'description\\'] != \\'boring\\')]\\n    \\n    return result.sort_values(by=\\'rating\\', ascending=False)\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    \\n    result = cinema[(cinema[\\'id\\'] % 2 == 1) & (cinema[\\'description\\'] != \\'boring\\')]\\n    \\n    return result.sort_values(by=\\'rating\\', ascending=False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3989222,
                "title": "easy-pandas-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    new_cinema=cinema.loc[(cinema[\\'id\\']%2!=0) & (~cinema[\\'description\\'].str.contains(\\'boring\\'))]\\n    df=new_cinema[[\\'id\\',\\'movie\\',\\'description\\',\\'rating\\']]\\n    df=df.sort_values(by=\\'rating\\',ascending=False)\\n    return df\\n    \\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    new_cinema=cinema.loc[(cinema[\\'id\\']%2!=0) & (~cinema[\\'description\\'].str.contains(\\'boring\\'))]\\n    df=new_cinema[[\\'id\\',\\'movie\\',\\'description\\',\\'rating\\']]\\n    df=df.sort_values(by=\\'rating\\',ascending=False)\\n    return df\\n    \\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3971158,
                "title": "not-boring-movies-pandas-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema):\\n    \\n    odd_cin = cinema[cinema[\\'id\\']%2==1].reset_index()\\n    del odd_cin[\\'index\\']\\n    odd_cin = odd_cin[odd_cin[\\'description\\']!=\\'boring\\'].reset_index()\\n    del odd_cin[\\'index\\']\\n    odd_cin = odd_cin.sort_values(by=[\\'rating\\'],ascending=False)\\n    return odd_cin\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema):\\n    \\n    odd_cin = cinema[cinema[\\'id\\']%2==1].reset_index()\\n    del odd_cin[\\'index\\']\\n    odd_cin = odd_cin[odd_cin[\\'description\\']!=\\'boring\\'].reset_index()\\n    del odd_cin[\\'index\\']\\n    odd_cin = odd_cin.sort_values(by=[\\'rating\\'],ascending=False)\\n    return odd_cin\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3965357,
                "title": "easy-pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    odd_id = cinema[cinema[\"id\"]%2 == 1] #Sorting by odd id\\n    not_bor = odd_id[odd_id[\"description\"] != \"boring\"] #Don\\'t include \"boring\"\\n    ans = not_bor.sort_values(by=\"rating\", ascending=False) #Sroting rating by descending\\n    return ans\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    odd_id = cinema[cinema[\"id\"]%2 == 1] #Sorting by odd id\\n    not_bor = odd_id[odd_id[\"description\"] != \"boring\"] #Don\\'t include \"boring\"\\n    ans = not_bor.sort_values(by=\"rating\", ascending=False) #Sroting rating by descending\\n    return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3951941,
                "title": "pandas-1-line-sql-2-filters",
                "content": "# Intuition\\nStraight forward approach:\\n - filter based on `description` and `id % 2`\\n - sort\\n\\n# Code\\n```Python []\\nimport pandas as pd\\n\\ndef not_boring_movies(df: pd.DataFrame) -> pd.DataFrame:\\n  return df[(df[\"description\"] != \"boring\") & (df[\"id\"] % 2)].sort_values(by=\"rating\", ascending=False)\\n```\\n```SQL []\\nSELECT * FROM cinema\\nWHERE\\n  description != \\'boring\\' AND\\n  id % 2 = 1\\nORDER BY rating DESC\\n```\\n",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\nimport pandas as pd\\n\\ndef not_boring_movies(df: pd.DataFrame) -> pd.DataFrame:\\n  return df[(df[\"description\"] != \"boring\") & (df[\"id\"] % 2)].sort_values(by=\"rating\", ascending=False)\\n```\n```SQL []\\nSELECT * FROM cinema\\nWHERE\\n  description != \\'boring\\' AND\\n  id % 2 = 1\\nORDER BY rating DESC\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3917639,
                "title": "easy-mysql-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema\\nWHERE (id%2 = 1) and description!=\\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema\\nWHERE (id%2 = 1) and description!=\\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3791477,
                "title": "1-line",
                "content": "\\n\\n# Approach\\nSimple one just use ODD numbers appraoch and then order it by rating in the descending order using `DESC`\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE (id % 2 ) <> 0 AND description <> \\'boring\\' ORDER BY rating DESC;\\n```\\n![images.jpeg](https://assets.leetcode.com/users/images/539bc15d-1677-4947-b269-fe68849adc78_1689777081.6770382.jpeg)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE (id % 2 ) <> 0 AND description <> \\'boring\\' ORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3635985,
                "title": "s-mple-s-lution",
                "content": "# Code\\n```\\nselect id, movie, description, rating \\nfrom Cinema where mod(id,2)=1 and description != \\'boring\\' \\norder by rating desc\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect id, movie, description, rating \\nfrom Cinema where mod(id,2)=1 and description != \\'boring\\' \\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3585313,
                "title": "simple-query-for-all-3-db",
                "content": "# MySql and MS Sql server\\n```\\nselect * from cinema where description!=\\'boring\\' and id%2!=0 order by rating desc;\\n```\\n\\n# Oracle and MySql\\n```\\n/* Write your PL/SQL query statement below */\\nselect * from cinema where description!=\\'boring\\' and mod(id,2)!=0 order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nselect * from cinema where description!=\\'boring\\' and id%2!=0 order by rating desc;\\n```\n```\\n/* Write your PL/SQL query statement below */\\nselect * from cinema where description!=\\'boring\\' and mod(id,2)!=0 order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3550351,
                "title": "easy-sql-code-must-view-solution",
                "content": "# Intuition\\nSimply using AND clause with mentioned condition. \\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *  FROM Cinema WHERE id%2!=0 AND description!=\\'boring\\'ORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *  FROM Cinema WHERE id%2!=0 AND description!=\\'boring\\'ORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3522398,
                "title": "beginner-level-soln-with-runtime-401-ms-faster-than-55-74",
                "content": "\"\\' \\nselect * from Cinema\\nwhere id%2 <> 0 and description <> \\'boring\\'\\norder by rating desc ;\\n\"\\'",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "\"\\' \\nselect * from Cinema\\nwhere id%2 <> 0 and description <> \\'boring\\'\\norder by rating desc ;\\n\"\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2837414,
                "title": "mysql-94-fastest-solution-with-bitwise-and",
                "content": "```\\nSELECT *\\nFROM Cinema\\nWHERE id & 1 = 1\\nAND description <> \\'boring\\'\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT *\\nFROM Cinema\\nWHERE id & 1 = 1\\nAND description <> \\'boring\\'\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2698888,
                "title": "where-clause-100-less-memory",
                "content": "```\\nSELECT *\\nFROM Cinema c\\nWHERE id%2 <> 0 AND c.description <> \\'boring\\'\\nORDER BY c.rating DESC\\n```\\nIf you like it please upvote",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT *\\nFROM Cinema c\\nWHERE id%2 <> 0 AND c.description <> \\'boring\\'\\nORDER BY c.rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2499553,
                "title": "simple-sql-solution-beginner-friendly",
                "content": "```\\nSELECT * \\nFROM Cinema \\nWHERE id%2!=0 AND \\n      description!=\\'boring\\' \\n      ORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * \\nFROM Cinema \\nWHERE id%2!=0 AND \\n      description!=\\'boring\\' \\n      ORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2499186,
                "title": "runtime-169-ms-faster-than-98-93-of-mysql-online-submissions-for-not-boring-movies",
                "content": "select * from cinema\\nwhere id%2 = 1 and description != \\'boring\\'\\norder by rating DESC;",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "select * from cinema\\nwhere id%2 = 1 and description != \\'boring\\'\\norder by rating DESC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2483440,
                "title": "sql-server",
                "content": "select * from Cinema\\nwhere id%2 <> 0 and description NOT like \\'%boring%\\'\\norder by rating desc",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2478430,
                "title": "simple-solution-with-explanation",
                "content": "Simple to understand\\n id%2=1 means odd number (id).\\n\\n```\\nSELECT * FROM Cinema\\nWHERE id%2 = 1 AND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM Cinema\\nWHERE id%2 = 1 AND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2240583,
                "title": "oracle-faster-100-and-memory-100",
                "content": "```\\nSELECT * FROM cinema WHERE description != \\'boring\\' AND MOD(id, 2)=1 ORDER BY rating DESC;",
                "solutionTags": [],
                "code": "```\\nSELECT * FROM cinema WHERE description != \\'boring\\' AND MOD(id, 2)=1 ORDER BY rating DESC;",
                "codeTag": "Unknown"
            },
            {
                "id": 2206562,
                "title": "mysql-simple-solution-with",
                "content": "```\\n# Write your MySQL query statement below\\nselect \\nid,\\nmovie,\\ndescription,\\nrating  \\nfrom cinema\\n\\nwhere \\nid % 2 = 1 and !(description = \"boring\") \\n\\norder by rating desc",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect \\nid,\\nmovie,\\ndescription,\\nrating  \\nfrom cinema\\n\\nwhere \\nid % 2 = 1 and !(description = \"boring\") \\n\\norder by rating desc",
                "codeTag": "Unknown"
            },
            {
                "id": 2171933,
                "title": "simple-fast-sql-solution",
                "content": "Just be sure that remainder (integer \"left over\" after dividing one integer by another) after dividing id with 2 is 1, that means that id is odd.\\n\\n```\\nSELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND (id % 2) = 1\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND (id % 2) = 1\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2119277,
                "title": "simple-mysql-solution",
                "content": "**Simple MySQL Solution:** \\n\\n(faster than 74.41% of MySQL solutions)\\n\\n```\\nSELECT \\n    *\\nFROM \\n    Cinema \\nWHERE\\n    id % 2 != 0 AND description != \"boring\"\\nORDER BY \\n    rating DESC;\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nSELECT \\n    *\\nFROM \\n    Cinema \\nWHERE\\n    id % 2 != 0 AND description != \"boring\"\\nORDER BY \\n    rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2028026,
                "title": "simple-solution",
                "content": "```SELECT id,movie,description,rating from cinema where description<>\"boring\" and mod(id,2)<>0 order by rating desc;```",
                "solutionTags": [],
                "code": "```SELECT id,movie,description,rating from cinema where description<>\"boring\" and mod(id,2)<>0 order by rating desc;```",
                "codeTag": "Unknown"
            },
            {
                "id": 1949230,
                "title": "mysql-solution",
                "content": "SELECT * FROM cinema\\nWHERE mod(id,2) != 0 \\nAND description != \\'boring\\'\\nORDER BY rating DESC",
                "solutionTags": [],
                "code": "SELECT * FROM cinema\\nWHERE mod(id,2) != 0 \\nAND description != \\'boring\\'\\nORDER BY rating DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 1877055,
                "title": "mysql-95-faster",
                "content": "```\\nselect * from Cinema where id%2!=0 AND description!=\\'boring\\' order by rating desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect * from Cinema where id%2!=0 AND description!=\\'boring\\' order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790280,
                "title": "sql-easy-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1760406,
                "title": "mysql-simple-solution",
                "content": "```\\nselect * from Cinema \\nwhere id%2 != 0 and description != \"boring\"\\norder by rating desc;\\n```\\nUse Not Equal operator i.e. \"!=\" to not show id and description which are evens and desciption as boring.\\nThen at last order rating columnn by descending order using \"desc\"",
                "solutionTags": [],
                "code": "```\\nselect * from Cinema \\nwhere id%2 != 0 and description != \"boring\"\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1428911,
                "title": "solution",
                "content": "```\\nSELECT * \\nFROM Cinema \\nWHERE (id%2 <> 0) && (description <> \"boring\") \\nORDER BY rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT * \\nFROM Cinema \\nWHERE (id%2 <> 0) && (description <> \"boring\") \\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1385585,
                "title": "mysql-code",
                "content": "select id,movie,description,rating from cinema where description<>\\'boring\\' and id%2!=0 order by rating desc;",
                "solutionTags": [],
                "code": "select id,movie,description,rating from cinema where description<>\\'boring\\' and id%2!=0 order by rating desc;",
                "codeTag": "Unknown"
            },
            {
                "id": 1232479,
                "title": "ac-sql-solution-not-boring-movies",
                "content": "REGEXP much faster than LIKE \"%boring%\" ~(85% vs 35%)\\n```\\nSELECT * \\nFROM cinema\\nWHERE MOD(id, 2) = 1 AND description REGEXP \"[^boring]\"\\nORDER BY rating DESC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT * \\nFROM cinema\\nWHERE MOD(id, 2) = 1 AND description REGEXP \"[^boring]\"\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1192216,
                "title": "simple-100-memory-oracle",
                "content": "```\\nselect * from cinema where description!=\\'boring\\' AND mod(id,2)=1 order by rating desc; \\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect * from cinema where description!=\\'boring\\' AND mod(id,2)=1 order by rating desc; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1134236,
                "title": "mysql-easy-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema where id%2!=0 and description!=\"boring\" order by rating desc;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema where id%2!=0 and description!=\"boring\" order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1096623,
                "title": "mysql-solution",
                "content": "select * from cinema where id%2!=0 and description!=\\'boring\\' order by rating desc",
                "solutionTags": [],
                "code": "select * from cinema where id%2!=0 and description!=\\'boring\\' order by rating desc",
                "codeTag": "Unknown"
            },
            {
                "id": 1079641,
                "title": "solution",
                "content": "select * from cinema where (id % 2) = 1 AND description != \\'boring\\' order by rating DESC",
                "solutionTags": [],
                "code": "select * from cinema where (id % 2) = 1 AND description != \\'boring\\' order by rating DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 1051993,
                "title": "mysql",
                "content": "```\\nSELECT *\\nFROM cinema\\nWHERE (id %2 <> 0) AND (cinema.description <> \"boring\")\\nORDER BY rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT *\\nFROM cinema\\nWHERE (id %2 <> 0) AND (cinema.description <> \"boring\")\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 984044,
                "title": "easiest-solution",
                "content": "```\\nselect * from cinema\\nwhere mod(id,2) != 0 and description != \\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from cinema\\nwhere mod(id,2) != 0 and description != \\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 949623,
                "title": "mysql-simple-query-0b-memory-100",
                "content": "```\\n# Write your MySQL query statement below\\nselect * from cinema \\nwhere id % 2 = 1 and description <> \\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from cinema \\nwhere id % 2 = 1 and description <> \\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 907876,
                "title": "full-explaination-with-video-solution-sql-playlist-mysql-solution",
                "content": "https://www.youtube.com/watch?v=9CpRIJiuZQ8\\n\\n\\nIf you want explaination of any question comment on the video.\\nThanks\\nComplete SQL Playlist: (Enjoy this)\\n\\nhttps://www.youtube.com/playlist?list=PLKtl_-sCkP9JiVwhr49ymK962qFmEsZWl",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "https://www.youtube.com/watch?v=9CpRIJiuZQ8\\n\\n\\nIf you want explaination of any question comment on the video.\\nThanks\\nComplete SQL Playlist: (Enjoy this)\\n\\nhttps://www.youtube.com/playlist?list=PLKtl_-sCkP9JiVwhr49ymK962qFmEsZWl",
                "codeTag": "Unknown"
            },
            {
                "id": 872475,
                "title": "mysql-100-faster",
                "content": "```\\nselect * from cinema \\nwhere id%2 = 1 and description <> \\'boring\\' order by rating DESC\\n```",
                "solutionTags": [],
                "code": "```\\nselect * from cinema \\nwhere id%2 = 1 and description <> \\'boring\\' order by rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 799437,
                "title": "so-simple-sql",
                "content": "```\\nSELECT * FROM cinema\\nWHERE (cinema.id % 2 = 1) AND cinema.description != \\'boring\\'\\nORDER BY cinema.rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT * FROM cinema\\nWHERE (cinema.id % 2 = 1) AND cinema.description != \\'boring\\'\\nORDER BY cinema.rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 713361,
                "title": "mysql-98-and-100",
                "content": "SELECT * FROM cinema WHERE (id%2 != 0) AND (description != \"boring\") ORDER BY rating DESC;",
                "solutionTags": [],
                "code": "SELECT * FROM cinema WHERE (id%2 != 0) AND (description != \"boring\") ORDER BY rating DESC;",
                "codeTag": "Unknown"
            },
            {
                "id": 575378,
                "title": "simple-and-fast-mysql-solution",
                "content": "```\\nSelect * from cinema\\n    Where description <> \\'boring\\'\\n    AND id % 2 = 1\\n\\t\\tOrder by rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\nSelect * from cinema\\n    Where description <> \\'boring\\'\\n    AND id % 2 = 1\\n\\t\\tOrder by rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 531225,
                "title": "mysql-simple",
                "content": "Select * from cinema\\nwhere\\nmod(id,2) != 0\\nand Not\\ndescription = \\'boring\\'\\norder by rating desc",
                "solutionTags": [],
                "code": "Select * from cinema\\nwhere\\nmod(id,2) != 0\\nand Not\\ndescription = \\'boring\\'\\norder by rating desc",
                "codeTag": "Unknown"
            },
            {
                "id": 526577,
                "title": "oracle-pl-sql-solution",
                "content": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT id \"id\", movie \"movie\", description \"description\", rating \"rating\"\\nFROM cinema\\nWHERE MOD(id, 2) = 1 AND description != \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT id \"id\", movie \"movie\", description \"description\", rating \"rating\"\\nFROM cinema\\nWHERE MOD(id, 2) = 1 AND description != \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 421490,
                "title": "sql-server-solution",
                "content": "MS SQL:\\nselect * from cinema\\nwhere **id % 2 = 1** and **description != \\'boring\\'**\\norder by **rating desc**",
                "solutionTags": [],
                "code": "MS SQL:\\nselect * from cinema\\nwhere **id % 2 = 1** and **description != \\'boring\\'**\\norder by **rating desc**",
                "codeTag": "Unknown"
            },
            {
                "id": 418652,
                "title": "mysql-solution-very-easy-to-understand",
                "content": "```\\nselect * from cinema  # select all columns \\nwhere description != \\'boring\\' and id % 2 = 1  # condition that description is not \\'boring\\' and odd id\\norder by rating desc  # order the sequence by rating in descending.\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from cinema  # select all columns \\nwhere description != \\'boring\\' and id % 2 = 1  # condition that description is not \\'boring\\' and odd id\\norder by rating desc  # order the sequence by rating in descending.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 251018,
                "title": "beats-98-13-mysql-solutions-116ms-time",
                "content": "# Write your MySQL query statement below\\n\\n\\'\\'\\'select id, movie, description, rating\\nfrom cinema\\nwhere description not like \"boring\" and id % 2 != 0\\norder by rating desc;\\'\\'\\'",
                "solutionTags": [],
                "code": "# Write your MySQL query statement below\\n\\n\\'\\'\\'select id, movie, description, rating\\nfrom cinema\\nwhere description not like \"boring\" and id % 2 != 0\\norder by rating desc;\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 191259,
                "title": "a-slightly-different-way-of-solving-this-sql-using-case",
                "content": "```\\nSELECT * from cinema where description != \\'boring\\' AND \\nCASE\\n    WHEN id%2 !=0 THEN id\\n    ELSE null\\nEND\\nORDER BY rating DESC;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT * from cinema where description != \\'boring\\' AND \\nCASE\\n    WHEN id%2 !=0 THEN id\\n    ELSE null\\nEND\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 175214,
                "title": "judge-parity-using",
                "content": "```\nselect id, movie, description, rating from cinema where if(id&1=1, true, false) and description != 'boring' order by rating desc;\n```\n\nuse '`n & 1`' to judge whether n is odd or  even\n",
                "solutionTags": [],
                "code": "```\nselect id, movie, description, rating from cinema where if(id&1=1, true, false) and description != 'boring' order by rating desc;\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 125600,
                "title": "my-first-post-of-sql-questions",
                "content": "```\\nSELECT * FROM cinema WHERE id % 2 = 1 AND description != \\'boring\\' ORDER BY rating DESC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT * FROM cinema WHERE id % 2 = 1 AND description != \\'boring\\' ORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092548,
                "title": "beats-100-in-memory",
                "content": "<!-- # Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect id, movie, description, rating From Cinema \\nWhere description!=\"boring\" and id%2!=0 \\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect id, movie, description, rating From Cinema \\nWhere description!=\"boring\" and id%2!=0 \\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092357,
                "title": "pandas-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema.query(\\'id %2 == 1 and description != \"boring\"\\').sort_values(by=\\'rating\\',ascending=False)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema.query(\\'id %2 == 1 and description != \"boring\"\\').sort_values(by=\\'rating\\',ascending=False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4090541,
                "title": "python-beats-84",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n  odd = cinema.query(\"id %2 ==1\")\\n  \\n  return odd[~odd.description.str.contains(\\'boring\\')].sort_values(by=\\'rating\\', ascending = False)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n  odd = cinema.query(\"id %2 ==1\")\\n  \\n  return odd[~odd.description.str.contains(\\'boring\\')].sort_values(by=\\'rating\\', ascending = False)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4090475,
                "title": "mysql-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema where mod(id,2)!=0 and description !=\"boring\" order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema where mod(id,2)!=0 and description !=\"boring\" order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089918,
                "title": "the-golden-is-here",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect id,movie,description,rating from cinema \\nwhere id%2<>0 and description!=\\'boring\\'\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect id,movie,description,rating from cinema \\nwhere id%2<>0 and description!=\\'boring\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089490,
                "title": "code",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere id%2 = 1 and description not like \\'%boring%\\'\\norder by rating desc\\n```\\n\\nUPVOTE PLS!!!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere id%2 = 1 and description not like \\'%boring%\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089134,
                "title": "easy-solution-beats-94-15-of-users-with-mysql",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere id mod 2 = 1 and description <> \"boring\"\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere id mod 2 = 1 and description <> \"boring\"\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089064,
                "title": "mysql-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect *\\nfrom Cinema \\nwhere id%2 <> 0\\nand description != \\'boring\\'\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect *\\nfrom Cinema \\nwhere id%2 <> 0\\nand description != \\'boring\\'\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088614,
                "title": "mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    id\\n    , movie\\n    , description\\n    , rating\\nFROM Cinema\\nWHERE description != \\'boring\\'\\nAND  (id % 2) = 1\\nORDER BY rating DESC\\n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    id\\n    , movie\\n    , description\\n    , rating\\nFROM Cinema\\nWHERE description != \\'boring\\'\\nAND  (id % 2) = 1\\nORDER BY rating DESC\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088082,
                "title": "no-boring-movies-mysql",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE MOD(id, 2) = 1 AND description != \\'boring\\' order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE MOD(id, 2) = 1 AND description != \\'boring\\' order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088015,
                "title": "easy-solution-with-where-clause",
                "content": "# Intuition\\n<!-- First we need to know how to fetch odd number with using where condition.and mod\\n\\nthen what exactly description they want which is not equal to \"BORING\" we can connect this two condition with and \\'and\\'\\n\\nthen as per the instruction we need to sort the rating in desc\\n-->\\nselect * from Cinema Where id %2 != 0\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect* from Cinema\\nwhere id%2 != 0 and description != \\'boring\\'\\norder by  rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect* from Cinema\\nwhere id%2 != 0 and description != \\'boring\\'\\norder by  rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087144,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from Cinema where description != \\'boring\\' and id % 2 =1 order by rating desc \\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from Cinema where description != \\'boring\\' and id % 2 =1 order by rating desc \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085559,
                "title": "simple-pl-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 AND description NOT LIKE \\'%boring%\\'\\nORDER BY rating DESC;\\n\\n```\\n\\nPlease upvote if you like it!",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\nSELECT * \\nFROM Cinema\\nWHERE MOD(id, 2) = 1 AND description NOT LIKE \\'%boring%\\'\\nORDER BY rating DESC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083413,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * \\nFROM cinema \\nWHERE description!=\\'boring\\' AND MOD(id,2)=1\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * \\nFROM cinema \\nWHERE description!=\\'boring\\' AND MOD(id,2)=1\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083037,
                "title": "sql-simple-solution",
                "content": "# Code\\n```\\nSELECT *\\nFROM Cinema\\nWHERE id % 2 = 1 AND description != \\'boring\\'\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT *\\nFROM Cinema\\nWHERE id % 2 = 1 AND description != \\'boring\\'\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082929,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema WHERE id%2 != 0 \\nAND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema WHERE id%2 != 0 \\nAND description != \"boring\"\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081672,
                "title": "simple-intuitive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1) Check if id is not even \\n2) Chech is if description is not \\'boring\\' \\n3) Order by rating\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) Use mod funciton to make sure id doesn\\'t have a remainder of 0 when divided by 2\\n2) Make sure description is not \\'boring\\'\\n3) Order by rating in descending order\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \\'boring\\'\\nORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \\'boring\\'\\nORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081619,
                "title": "0ne-line-s0luti0n-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect * from cinema where id%2 !=0 and description not like \\'boring\\' order by rating desc\\n# ```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from cinema where id%2 !=0 and description not like \\'boring\\' order by rating desc\\n# ```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079678,
                "title": "simple-code",
                "content": "Mod fxn is used to get the odd no. id\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema\\nwhere mod(id,2)!=0 and description!= \\'boring\\'\\nOrder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema\\nwhere mod(id,2)!=0 and description!= \\'boring\\'\\nOrder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079552,
                "title": "beats-99-26",
                "content": "# Approach\\n- The ORDER BY keyword is used to sort the result-set in ascending or descending order.\\n\\n- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.\\n\\n- The AND operator displays a record if all the conditions are TRUE.\\n- id%2 <> 0 gives odd ids \\n\\n# Complexity\\nRuntime :: 328ms\\nBeats 99.26%of users with MySQL\\n\\nMemory :: 0.00MB\\nBeats 100.00%of users with MySQL\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where description <>\\'boring\\' and id%2 <> 0 order by (rating) desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where description <>\\'boring\\' and id%2 <> 0 order by (rating) desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079526,
                "title": "simple-solution-to-find-the-movies",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2 !=0 and description <> \\'boring\\' order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2 !=0 and description <> \\'boring\\' order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078301,
                "title": "pandas-one-liner",
                "content": "Find rows where \\'id\\' is odd (% 2 = 1) and \\'description\\' is \\'boring\\'\\n\\nThen sort_values by \\'rating\\' in descending order.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[(cinema[\\'id\\'] % 2 == 1) & ~(cinema[\\'description\\'] == \\'boring\\')].sort_values(by=\\'rating\\', ascending=False)\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    return cinema[(cinema[\\'id\\'] % 2 == 1) & ~(cinema[\\'description\\'] == \\'boring\\')].sort_values(by=\\'rating\\', ascending=False)\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4078219,
                "title": "beats-98-49-easy",
                "content": "# Complexity\\n- Time complexity: 337ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 0.00MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id, 2) != 0\\nAND description != \\'boring\\'\\nORDER BY 4 DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id, 2) != 0\\nAND description != \\'boring\\'\\nORDER BY 4 DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077735,
                "title": "fastest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating \\nfrom Cinema \\nwhere id % 2 = 1 and not description = (\\'boring\\')\\norder by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating \\nfrom Cinema \\nwhere id % 2 = 1 and not description = (\\'boring\\')\\norder by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073639,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from cinema \\nwhere id%2=1 and description != \\'boring\\'\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from cinema \\nwhere id%2=1 and description != \\'boring\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072883,
                "title": "simple",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect * from Cinema where \\n\\nid%2!=0 and description != \\'boring\\'\\n\\norder by rating desc;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect * from Cinema where \\n\\nid%2!=0 and description != \\'boring\\'\\n\\norder by rating desc;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070941,
                "title": "easy-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from cinema where id%2 <> 0 and description not like \"boring\" order by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from cinema where id%2 <> 0 and description not like \"boring\" order by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070595,
                "title": "96-and-what-my-brain-went-to-probably-overcomplicated",
                "content": "# Intuition\\nI was treating this at potentially more complex problem and wanted to put row_number into use. The divisible symbom something is usually something you know or don\\'t in the moment and working out how evens and odds are programmed.\\n\\n# Approach\\nBasically re-made the ID with a rownumber and carried it down to the WHERE clause to get something to check for divisibility. \\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith odds as (\\n    select\\n    row_number() over (order by id) as rn\\n    from Cinema\\n)\\nselect \\nid,movie, description,rating\\nfrom Cinema \\nwhere \\ndescription <> \\'boring\\' and id in (select rn from odds where rn % 2 > 0)\\norder by rating desc;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith odds as (\\n    select\\n    row_number() over (order by id) as rn\\n    from Cinema\\n)\\nselect \\nid,movie, description,rating\\nfrom Cinema \\nwhere \\ndescription <> \\'boring\\' and id in (select rn from odds where rn % 2 > 0)\\norder by rating desc;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070553,
                "title": "mssql",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect *\\nfrom Cinema\\nwhere description not like \\'%boring%\\'\\n  and id%2=1\\norder by rating desc  \\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect *\\nfrom Cinema\\nwhere description not like \\'%boring%\\'\\n  and id%2=1\\norder by rating desc  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070518,
                "title": "620-not-boring-movies-solution-explanation",
                "content": "# CODE\\nSelect id, movie, description, rating\\n    from Cinema\\n    where mod(id,2)=1 and description != \"boring\"\\n    order by rating desc\\n\\n# Intuition\\nWe want to list out all of the movie with a odd id that\\'s not boring. Then print out their id, movie, description, rating in a descending order.\\n\\n# Steps\\n**SELECT id, movie, description, rating:**\\nThis part of the query specifies the columns you want to print out from the \"Cinema\" table.\\n\\n**FROM Cinema**\\nspecifies the table you are retrieving data from\\n\\n**WHERE mod(id,2) = 1 and description != \"boring\"**\\nThis is the filtering or conditional part of the query. It specifies that you want to select rows where two conditions are met\\n\\nmod(id,2) = 1: This condition checks if the remainder of the \"id\" when divided by 2 is equal to 1. In other words, it selects rows with odd \"id\" values.\\n\\n**ORDER BY rating DESC**\\nspecifies how the results should be sorted. It orders the selected rows by the \"rating\" column in descending order (highest rating first)\\n\\n\\n\\n\\n\\n\\n\\n-\\\\\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# CODE\\nSelect id, movie, description, rating\\n    from Cinema\\n    where mod(id,2)=1 and description != \"boring\"\\n    order by rating desc\\n\\n# Intuition\\nWe want to list out all of the movie with a odd id that\\'s not boring. Then print out their id, movie, description, rating in a descending order.\\n\\n# Steps\\n**SELECT id, movie, description, rating:**\\nThis part of the query specifies the columns you want to print out from the \"Cinema\" table.\\n\\n**FROM Cinema**\\nspecifies the table you are retrieving data from\\n\\n**WHERE mod(id,2) = 1 and description != \"boring\"**\\nThis is the filtering or conditional part of the query. It specifies that you want to select rows where two conditions are met\\n\\nmod(id,2) = 1: This condition checks if the remainder of the \"id\" when divided by 2 is equal to 1. In other words, it selects rows with odd \"id\" values.\\n\\n**ORDER BY rating DESC**\\nspecifies how the results should be sorted. It orders the selected rows by the \"rating\" column in descending order (highest rating first)\\n\\n\\n\\n\\n\\n\\n\\n-\\\\\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069894,
                "title": "not-boring-movies-solution-in-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nConcept of MOD and Not equal to (!) operator\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM CINEMA\\nWHERE DESCRIPTION != \"BORING\"\\nAND MOD(ID, 2) != 0\\nORDER BY RATING DESC\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/b41c0e92-4e9b-486d-84f4-21546dbe855d_1695237207.2130654.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM CINEMA\\nWHERE DESCRIPTION != \"BORING\"\\nAND MOD(ID, 2) != 0\\nORDER BY RATING DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069632,
                "title": "simple-solution-60",
                "content": "Here I select the id, movie, description, and rating from the Cinema table where the remainder of id / 2 is not 0, and the description is not \"boring\". We order by the rating column in descending order. **Make sure to like if this was useful to you**.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \"boring\"\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 != 0 AND description != \"boring\"\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068732,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 <> 0 AND NOT description = \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE id % 2 <> 0 AND NOT description = \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068126,
                "title": "oracle-solution-with-mod",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect *\\nfrom Cinema\\nwhere description not like \\'%boring%\\'\\nand mod(id, 2) <> 0\\norder by rating desc\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect *\\nfrom Cinema\\nwhere description not like \\'%boring%\\'\\nand mod(id, 2) <> 0\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066068,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE description!=\"boring\" AND id%2=1 order by rating desc ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE description!=\"boring\" AND id%2=1 order by rating desc ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065529,
                "title": "retrieving-non-boring-odd-numbered-movies-sorted-by-rating-give-your-rating",
                "content": "# Intuition\\nThe SQL query retrieves data from a \"Cinema\" table. It aims to select rows corresponding to non-boring movies with odd-numbered IDs and then sorts these movies by their ratings in descending order. This query is useful for retrieving a list of more interesting movies with higher ratings.\\n\\n# Approach\\n\\n1. Use the SELECT statement to choose all columns from the \"Cinema\" table.\\n2. Apply the WHERE clause to filter rows where the \"description\" is not equal to \\'boring\\' and the \"id\" is not even (i.e., id % 2 != 0).\\n3. Use the ORDER BY clause to arrange the selected rows in descending order of their \"rating\" column.\\n4. Execute the query to retrieve the desired results.\\n\\n# Complexity\\n\\nTime Complexity: O(N * log(N))\\n- N represents the number of rows in the \"Cinema\" table.\\n- The time complexity primarily depends on the sorting operation (ORDER BY rating DESC), which typically takes O(N * log(N)) time using efficient sorting algorithms.\\n\\nSpace Complexity: O(N)\\n- The space complexity depends on the number of rows that meet the WHERE condition.\\n- In the worst case, if all rows meet the criteria, the result set would consume O(N) space.\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\'\\n  AND id % 2 != 0\\nORDER BY rating DESC;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\'\\n  AND id % 2 != 0\\nORDER BY rating DESC;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064956,
                "title": "mysql-solution",
                "content": "```\\nSELECT * FROM Cinema\\nWHERE MOD(ID,2) = 1\\nAND description <> \"boring\"\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM Cinema\\nWHERE MOD(ID,2) = 1\\nAND description <> \"boring\"\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064350,
                "title": "mysql-solution",
                "content": "\\n# Code\\n```\\n# 1st way\\n# SELECT * FROM Cinema\\n# WHERE id%2=1 AND description!=\\'boring\\'\\n# ORDER BY rating DESC;\\n\\n\\n# 2nd way\\n# SELECT * FROM Cinema\\n# WHERE id MOD 2=1 AND description<>\\'boring\\'\\n# ORDER BY rating DESC;\\n\\n\\n# 3rd way\\nSELECT * FROM Cinema\\nWHERE MOD(id,2)=1 AND NOT description=\\'boring\\'\\nORDER BY rating DESC;\\n\\n# DESC is use to order elemrnt in descending order \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# 1st way\\n# SELECT * FROM Cinema\\n# WHERE id%2=1 AND description!=\\'boring\\'\\n# ORDER BY rating DESC;\\n\\n\\n# 2nd way\\n# SELECT * FROM Cinema\\n# WHERE id MOD 2=1 AND description<>\\'boring\\'\\n# ORDER BY rating DESC;\\n\\n\\n# 3rd way\\nSELECT * FROM Cinema\\nWHERE MOD(id,2)=1 AND NOT description=\\'boring\\'\\nORDER BY rating DESC;\\n\\n# DESC is use to order elemrnt in descending order \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064230,
                "title": "easy-beginner-friendly-solution",
                "content": "\\n# Approach\\nWe use mod function to check if the movie id is even or odd. If number is odd the value from mod function will not equal zero and vice versa. the where clause is applied to simply filter those values.\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from Cinema where mod(id,2) !=0 and description != \\'boring\\' order by rating desc;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating from Cinema where mod(id,2) !=0 and description != \\'boring\\' order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064107,
                "title": "easy-solution-using-where-and-order-by-clause-beats-80-of-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFilter id not divisible by 2 and description is not boring\\norder by rating descending\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere id%2 != 0 and description != \\'boring\\'\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id, movie, description, rating\\nfrom Cinema\\nwhere id%2 != 0 and description != \\'boring\\'\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063808,
                "title": "oracle-sql-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nSelect * from Cinema where  id  %2 <> 0  And  description <> \\'boring\\' order by rating desc \\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nSelect * from Cinema where  id  %2 <> 0  And  description <> \\'boring\\' order by rating desc \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063039,
                "title": "simple-solution-beating-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE id % 2 != 0\\nAND\\ndescription !=\"boring\" \\nORDER BY RATING DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema WHERE id % 2 != 0\\nAND\\ndescription !=\"boring\" \\nORDER BY RATING DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062985,
                "title": "easy-solution-for-students",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2<>0 and description<>\\'boring\\' ORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2<>0 and description<>\\'boring\\' ORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062701,
                "title": "simple-sql-query-82",
                "content": "# Intuition\\nHow can I write a SQL query which is easy for me to understand?\\n\\n# Approach\\n\\n* Check the famous condition id != 0 AND description should be not be \"boring\"\\n\\n* SORT them in desc order on basis of rating\\n\\n# Complexity\\n- Time complexity:\\n\\n    Filter part complexity : $$O(log n)$$\\n\\n    ORDER BY complexity : $$O(n * logn)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating FROM Cinema\\nWHERE MOD(id,2) <> 0 AND description <> \"boring\"\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating FROM Cinema\\nWHERE MOD(id,2) <> 0 AND description <> \"boring\"\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062048,
                "title": "ez-solution-beats-98",
                "content": "Ezpz. Also handles all cases where boring is in the description. \\n\\n# Code\\n```\\nSELECT * FROM Cinema \\nWHERE MOD(id, 2) =1 AND description NOT LIKE \\'%boring%\\' ORDER BY rating DESC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT * FROM Cinema \\nWHERE MOD(id, 2) =1 AND description NOT LIKE \\'%boring%\\' ORDER BY rating DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060824,
                "title": "beginner-s-friendly-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect *\\nfrom cinema\\nwhere id % 2 != 0 and description != \"boring\"\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect *\\nfrom cinema\\nwhere id % 2 != 0 and description != \"boring\"\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058585,
                "title": "simple-solution-not-boring-movies",
                "content": "# Output\\n### Runtime\\n347ms\\nBeats 98.23%of users with MySQL\\n\\n### Memory\\n0.00MB\\nBeats 100.00%of users with MySQL\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBY USIGN \\n --> **NOT ,LIKE , ORDER BY,  AND operators**\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT  id ,movie,description,rating  FROM Cinema where id%2 != 0  AND description NOT LIKE \\'boring\\' ORDER BY rating DESC; \\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT  id ,movie,description,rating  FROM Cinema where id%2 != 0  AND description NOT LIKE \\'boring\\' ORDER BY rating DESC; \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058545,
                "title": "not-boring-movies-simple-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT id, movie, description, rating \\nFROM Cinema where (id % 2) <> 0 and description != \\'boring\\'\\norder by rating desc\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT id, movie, description, rating \\nFROM Cinema where (id % 2) <> 0 and description != \\'boring\\'\\norder by rating desc\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057667,
                "title": "v",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE MOD(id, 2) AND description NOT LIKE \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT id, movie, description, rating\\nFROM Cinema\\nWHERE MOD(id, 2) AND description NOT LIKE \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057495,
                "title": "easy-and-beginner-friendly-solution-is-here",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2=1 and description <>\"boring\" order by rating desc;\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/7277aaf0-1f06-425c-bb6c-0dbc36765833_1694985608.037232.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from Cinema where id%2=1 and description <>\"boring\" order by rating desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057167,
                "title": "easy-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect id,movie,description,rating from\\ncinema where id%2!=0 AND description!=\\'boring\\'\\norder by rating DESC\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect id,movie,description,rating from\\ncinema where id%2!=0 AND description!=\\'boring\\'\\norder by rating DESC\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057082,
                "title": "sql-620-sql-basic-using-ak",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema \\nWHERE id%2 <> 0 AND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT * FROM Cinema \\nWHERE id%2 <> 0 AND description <> \\'boring\\'\\nORDER BY rating DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055588,
                "title": "simple-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect *\\nfrom Cinema\\nWhere id%2!=0 and description !=\"boring\"\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect *\\nfrom Cinema\\nWhere id%2!=0 and description !=\"boring\"\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053271,
                "title": "2-masks",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse 2 masks:\\n1. Filter out descriptions that contains \\'boring\\':\\n```\\nmask1 = cinema.description.str.contains(\\'boring\\')\\n```\\n2. Take out even ids:\\n```\\nmask2 = (cinema.id % 2 == 1)\\n```\\n# Code\\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    mask1 = cinema.description.str.contains(\\'boring\\')\\n    mask2 = (cinema.id % 2 == 1)\\n    cinema = cinema[(~mask1) & mask2]\\n    cinema = cinema.sort_values(by = \\'rating\\', ascending = False)\\n    return cinema\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nmask1 = cinema.description.str.contains(\\'boring\\')\\n```\n```\\nmask2 = (cinema.id % 2 == 1)\\n```\n```\\nimport pandas as pd\\n\\ndef not_boring_movies(cinema: pd.DataFrame) -> pd.DataFrame:\\n    mask1 = cinema.description.str.contains(\\'boring\\')\\n    mask2 = (cinema.id % 2 == 1)\\n    cinema = cinema[(~mask1) & mask2]\\n    cinema = cinema.sort_values(by = \\'rating\\', ascending = False)\\n    return cinema\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4051361,
                "title": "simple-easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe have to show all the data whose id is odd and description is not boring and also have to arrange in descending order by rating\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst select all the data from table , apply conditions and also use ORDER BY to arrange the data in descending order according to rating.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE (id)%2 !=0 AND description !=\\'boring\\'\\nORDER BY rating desc ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT *\\nFROM Cinema\\nWHERE (id)%2 !=0 AND description !=\\'boring\\'\\nORDER BY rating desc ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050959,
                "title": "simple-3-line-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere id%2!=0 and description!=\"boring\"\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere id%2!=0 and description!=\"boring\"\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047453,
                "title": "easy-solution-beats-97",
                "content": "\\n\\n# Code\\n```\\nselect * from Cinema c\\nwhere c.description != \\'boring\\' and c.id%2 != 0\\norder by rating desc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from Cinema c\\nwhere c.description != \\'boring\\' and c.id%2 != 0\\norder by rating desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046804,
                "title": "movie-with-odd-numbered-id",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write a solution to report the movies with an odd-numbered ID and a description that is not \"boring\".\\nSELECT *\\nFROM cinema\\nWHERE description != \\'boring\\'\\nAND id % 2 <> 0\\nORDER BY rating DESC;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write a solution to report the movies with an odd-numbered ID and a description that is not \"boring\".\\nSELECT *\\nFROM cinema\\nWHERE description != \\'boring\\'\\nAND id % 2 <> 0\\nORDER BY rating DESC;\\n\\n\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1625004,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1678595,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1565394,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1752120,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1567277,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1707634,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1574757,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1850171,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1746023,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1575780,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1625004,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1678595,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1565394,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1752120,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1567277,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1707634,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1574757,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1850171,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1746023,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 1575780,
                "content": [
                    {
                        "username": "sipi09",
                        "content": "It keeps saying Invalid Testcase with this message: \"0 <= rating <= 10 only\".\\nBut I never changed the Testcase....\\nDoes anybody had similar situation? What am I doing wrong?"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "Same issue, even many other problems have same kind of issues !!!"
                    },
                    {
                        "username": "ruturaj_dm",
                        "content": "Just submit"
                    },
                    {
                        "username": "alexlinus",
                        "content": "same"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "same problem\\u2639"
                    },
                    {
                        "username": "ggamlc",
                        "content": "I faced the same"
                    },
                    {
                        "username": "Arjun_patidar",
                        "content": "I faced the same problem but i submited it and it\\'s accepted"
                    },
                    {
                        "username": "Akhand-p-singh",
                        "content": "I faced the same problem. Click on submit and it will be accepted. I thing this error is from leetcode side."
                    },
                    {
                        "username": "mdgolamrabbani",
                        "content": "Yes, but I submit it and it\\'s accepted. "
                    },
                    {
                        "username": "5507",
                        "content": "Please fix this :\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\n"
                    },
                    {
                        "username": "Nommm",
                        "content": "The description field seems to be free text that enables the user to type any answer they desire.\\n\\nWith that being said, a user could type \\'Very boring\\' or \\'I found it boring\\', etc. The accepted answer would not pick up on this because it does a direct comparison."
                    },
                    {
                        "username": "lucky03das",
                        "content": "In that case, we could use \\'like or regex\\' to filter out descriptions which have \"boring\" in it. eg. description like \\'%boring%\\'."
                    },
                    {
                        "username": "ritikraghav9711",
                        "content": "select * from cinema where id%2!=0 and description not like \\'%boring%\\' order by rating desc\\nplease don\\'t run it \\ndirectly press submit and you will pass all the test cases \\nThanks"
                    },
                    {
                        "username": "mikelam",
                        "content": "I know there is an example to demonstrate the results should be ordered by rating in descending order. But it could be clearer to include that in the wording as well."
                    },
                    {
                        "username": "jkaiser21",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly, but I am unable to test."
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "\\tSELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "awnishsingh",
                        "content": "select * FROM Cinema\\n  WHERE  ((id % 2) <> 0)and (description <>\"boring\") \\norder by rating desc; "
                    },
                    {
                        "username": "gundam_exia",
                        "content": "If you got an error running the test case but you\\'re sure that your answer is correct, then just click Submit because there is an error in the test case."
                    },
                    {
                        "username": "princesatartaruga",
                        "content": "thank you :)"
                    },
                    {
                        "username": "dhr_921",
                        "content": "My solution:\\nSELECT id,movie,description,rating\\nFROM Cinema\\nWHERE (((id%2) != 0) AND (description != \\'boring\\'))\\nORDER BY id DESC;\\n\\nThe above code pass only 6 testcases out of 8.\\n\\nInput:\\n{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"C\", \"good\", 6.2], [2, \"A\", \"fiction\", 8.0], [3, \"B\", \"great\", 9.0], [4, \"D\", \"fantastic\", 4.0], [5, \"E\", \"skytop\", 9.9], [6, \"F\", \"topest\", 7.0], [7, \"G\", \"finest\", 9.5], [8, \"H\", \"highest\", 9.0], [9, \"I\", \"3D\", 9.8]]}}\\n\\nOutput:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [5, \"E\", \"skytop\", 9.9], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nExpected:\\n{\"headers\": [\"id\", \"movie\", \"description\", \"rating\"], \"values\": [[5, \"E\", \"skytop\", 9.9], [9, \"I\", \"3D\", 9.8], [7, \"G\", \"finest\", 9.5], [3, \"B\", \"great\", 9.0], [1, \"C\", \"good\", 6.2]]}\\n\\nCan anyone explain me my error?"
                    },
                    {
                        "username": "Msey",
                        "content": "[@gajananzulpe23](/gajananzulpe23) [@_-_-__-_-_](/_-_-__-_-_)  ty. had the same issue"
                    },
                    {
                        "username": "gajananzulpe23",
                        "content": "ORDER BY rating DESC;"
                    },
                    {
                        "username": "ankit_Singh_6270",
                        "content": "ORDER BY rating instead of order by ID."
                    }
                ]
            },
            {
                "id": 2071176,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2065973,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2054802,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2051236,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2042813,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2040186,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2039937,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2032146,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2023573,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2011935,
                "content": [
                    {
                        "username": "mail8ram25",
                        "content": "with cte as \\n(SELECT id, movie, description, rating\\nFROM Cinema\\nWHERE mod(id,2) <> 0)\\nselect id, movie, description, rating \\nfrom cte \\nwhere description != \\'boring\\'\\norder by id desc \\n\\nThe above code is working fine while running it when I\\'m submitting it   "
                    },
                    {
                        "username": "MauliJadhav",
                        "content": "select * from cinema \\nwhere mod(id,2)=1 and description <> \"boring\"\\norder by rating desc;"
                    },
                    {
                        "username": "badunishant",
                        "content": "If its showing unknown column description in where clause, use DESCRIPTION column instead and it works"
                    },
                    {
                        "username": "rohanteli",
                        "content": "select * from cinema where description !=\\'boring\\' having id % 2 != 0 order by rating DESC"
                    },
                    {
                        "username": "ronakshah7093",
                        "content": "select * from Cinema\\nwhere id  % 2 <> 0 and description <> \\'boring\\'\\norder by rating DESC"
                    },
                    {
                        "username": "Sugyanisethi",
                        "content": "SELECT *\\nFROM cinema \\nWHERE id = (DECLARE @n INT = 0\\n            WHILE @n <100\\n            BEGIN \\n            SET @n = 2@n + 1;\\n            END) AND description != \\'boring\\'\\nORDER BY rating desc;\\n\\nwhy it is showing as declare is incorrect syntax"
                    },
                    {
                        "username": "Maryam_it",
                        "content": "SELECT * FROM cinema WHERE (id % 2 = 1) AND (description != \"boring\") ORDER BY rating DESC;"
                    },
                    {
                        "username": "shivanjalidhanawade",
                        "content": "i don tunderstnd the error\\n"
                    },
                    {
                        "username": "jassaini70",
                        "content": "why this case is nit working...anybody can help??\\n\\n\\n# Write your MySQL query statement below\\nselect id,movie,description,rating from cinema\\nwhere cinema.rating >=\\'8.9\\'\\nand cinema.description !=\\'boring\\'\\norder by rating desc"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "select * from cinema where id%2  and  NOT description=\\'boring\\' \\nORDER BY rating desc;"
                    }
                ]
            },
            {
                "id": 2010931,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1985580,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1977504,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1969780,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1959809,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1956672,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1922185,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1894828,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1887035,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1883882,
                "content": [
                    {
                        "username": "aleh_dalzh",
                        "content": "/* in T-SQL , the second option is not so good :) */\n\nSELECT *\n    FROM Cinema AS cin\n    WHERE cin.id % 2 <> 0\n    AND cin.description <> 'boring'\n    ORDER BY cin.rating DESC\n\nOR\n\nSELECT *\n    FROM Cinema AS cin\n    EXCEPT (SELECT * FROM Cinema AS cin2 \n        WHERE cin2.id % 2 = 0\n    OR cin2.description = 'boring' )\n    ORDER BY cin.rating DESC"
                    },
                    {
                        "username": "Lysa123",
                        "content": "select id, movie, description, rating from cinema\\nwhere (id % 2) != 0 and\\ndescription != \\'boring\\'\\norder by rating desc;"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I literally have no idea why for 5 minutes it was giving a syntax error on `ORDER BY rating DESC;` \\nNow it suddenly worked"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "# HINT\n\nKeywords used: `SELECT, FROM, WHERE, AND, ORDER BY DESC;`"
                    },
                    {
                        "username": "dudemsd00",
                        "content": "SELECT * FROM Cinema\\nWHERE id%2 = 1 AND DESCRIPTION != \\'Boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "AkashParam",
                        "content": "select * from Cinema where id%2!=0 and(description!=\\'boring\\') order by rating desc;\\n\\nTest case passed.....!\\n"
                    },
                    {
                        "username": "nitishgupta8777",
                        "content": "select tab2.id,tab2.movie,tab2.description,tab2.rating from\\n(select * from Cinema) tab2\\ninner join\\n(select \\n(case when id%2<>0 then id else null end) as id1 \\nfrom Cinema) tab1\\non tab1.id1=tab2.id\\nwhere tab2.description != \\'boring\\'\\norder by tab2.rating desc"
                    },
                    {
                        "username": "botzerox",
                        "content": " `select\\n    id,\\n    movie,\\n    description,\\n    rating\\nfrom cinema\\nwhere mod(id, 2) = 1 \\n    and description != \\'boring\\'\\norder by rating desc`"
                    },
                    {
                        "username": "Chetan_0052",
                        "content": "Solution:\\nSELECT * FROM Cinema\\nWHERE id%2!=0 AND description!=\\'boring\\'\\nORDER BY rating DESC;"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "SELECT *\\nFROM Cinema\\nWHERE description != \\'boring\\' AND id % 2 = 1\\nORDER BY rating desc"
                    }
                ]
            },
            {
                "id": 1881537,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1856476,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1818553,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1792029,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1784107,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1770424,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1762274,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1754985,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1747609,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            },
            {
                "id": 1745362,
                "content": [
                    {
                        "username": "cafe28",
                        "content": "Can someone explains why \\'=1\\'  from \\'WHERE id%2 = 1\\' ?"
                    },
                    {
                        "username": "utsavsingh20",
                        "content": "when dividing by 2 remainder will be 1 so, this way it will picks the odd number only."
                    },
                    {
                        "username": "ankit_gusain",
                        "content": "select * from Cinema where id%2 != 0 group by movie having description not like \"%boring%\" order by rating desc;\\nit\\'s working properly."
                    },
                    {
                        "username": "kbattish",
                        "content": " select * from cinema\nwhere id%2 = 1 and lower(description) not like '%boring%'\norder by rating desc"
                    },
                    {
                        "username": "DhruvitModi",
                        "content": "There is issue in TestCase, its checking with different testcase while submit answer !"
                    },
                    {
                        "username": "Kutima1998",
                        "content": " `your inline code...your inline code...`\\nSELECT ID, MOVIE, DESCRIPTION, RATING \\nFROM CINEMA\\nWHERE (((ID%2) != 0) AND (DESCRIPTION != \\'BORING\\'))\\nORDER BY RATING DESC"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Fix the test case please. "
                    },
                    {
                        "username": "riteshpandey18",
                        "content": "Invalid testcase."
                    },
                    {
                        "username": "srihar_0",
                        "content": "If you run it will show\\n\\nInvalid Testcase\\n0 <= rating <= 10 only\\n\\nJust submit It will be accepted"
                    },
                    {
                        "username": "iknott",
                        "content": "Invalid Testcase"
                    },
                    {
                        "username": "harshitsrivastava",
                        "content": "Please fix! I keep getting an Invalid Testcase with the message \"0 <= rating <=10 only\". My solution can be submitted correctly\\n\\nselect * from cinema where mod(id,2) != 0 AND description != \"boring\" order by rating DESC;"
                    }
                ]
            }
        ]
    },
    {
        "title": "Task Scheduler",
        "question_content": "<p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n\n<p>However, there is a non-negative integer&nbsp;<code>n</code> that represents the cooldown period between&nbsp;two <b>same tasks</b>&nbsp;(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p>\n\n<p>Return <em>the least number of units of times that the CPU will take to finish all the given tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.\n[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]\n[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]\n[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]\n...\nAnd so on.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> is upper-case English letter.</li>\n\t<li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 104500,
                "title": "java-o-n-time-o-1-space-1-pass-no-sorting-solution-with-detailed-explanation",
                "content": "The key is to find out how many idles do we need.\\nLet's first look at how to arrange them. it's not hard to figure out that we can do a \"greedy arrangement\": always arrange task with most frequency first.\\nE.g. we have following tasks : 3 A, 2 B, 1 C. and we have n = 2. According to what we have above, we should first arrange A, and then B and C. Imagine there are \"slots\" and we need to arrange tasks by putting them into \"slots\". Then A should be put into slot 0, 3, 6 since we need to have at least n = 2 other tasks between two A. After A put into slots, it looks like this:\\n\\nA ? ? A ? ? A\\n\"?\" is \"empty\" slots.\\n\\nNow we can use the same way to arrange B and C. The finished schedule should look like this:\\n\\nA B C A B # A\\n\"#\" is idle\\n\\nNow we have a way to arrange tasks. But the problem only asks for number of CPU intervals, so we don't need actually arrange them. Instead we only need to get the total idles we need and the answer to problem is just number of idles + number of tasks.\\nSame example: 3 A, 2 B, 1 C, n = 2. After arranging A, we have:\\nA ? ? A ? ? A\\nWe can see that A separated slots into (count(A) - 1) = 2 parts, each part has length n. With the fact that A is the task with most frequency, it should need more idles than any other tasks. **In this case if we can get how many idles we need to arrange A, we will also get number of idles needed to arrange all tasks.** Calculating this is not hard, we first get number of parts separated by A: partCount = count(A) - 1; then we can know number of empty slots: emptySlots = partCount * n; we can also get how many tasks we have to put into those slots: availableTasks = tasks.length - count(A). Now if we have emptySlots > availableTasks which means we have not enough tasks available to fill all empty slots, we must fill them with idles. Thus we have **idles = max(0, emptySlots - availableTasks);**\\nAlmost done. One special case: what if there are more than one task with most frequency? OK, let's look at another example: 3 A 3 B 2 C 1 D,  n = 3\\nSimilarly we arrange A first:\\nA ? ? ? A ? ? ? A\\nNow it's time to arrange B, we find that we have to arrange B like this:\\nA B ? ? A B ? ? A B\\nwe need to put every B right after each A. Let's look at this in another way, think of sequence \"A B\" as a special task \"X\", then we got:\\nX ? ? X ? ? X\\nComparing to what we have after arranging A:\\nA ? ? ? A ? ? ? A\\nThe only changes are length of each parts (from 3 to 2) and available tasks. By this we can get more general equations:\\n**partCount = count(A) - 1\\nemptySlots = partCount * (n - (count of tasks with most frequency - 1))\\navailableTasks = tasks.length - count(A) * count of tasks with most frenquency\\nidles = max(0, emptySlots - availableTasks)\\nresult = tasks.length + idles**\\n\\nWhat if we have more than n tasks with most frequency and we got emptySlot negative? Like 3A, 3B, 3C, 3D, 3E, n = 2. In this case seems like we can't put all B C S inside slots since we only have n = 2.\\nWell partCount is actually the \"minimum\" length of each part required for arranging A. You can always make the length of part longer.\\nE.g. 3A, 3B, 3C, 3D, 2E, n = 2.\\nYou can always first arrange A, B, C, D as:\\nA B C D | A B C D | A B C D\\nin this case you have already met the \"minimum\" length requirement for each part (n = 2), you can always put more tasks in each part if you like:\\ne.g.\\nA B C D E | A B C D E | A B C D\\n\\nemptySlots < 0 means you have already got enough tasks to fill in each part to make arranged tasks valid. But as I said you can always put more tasks in each part once you met the \"minimum\" requirement.\\n\\nTo get count(A) and count of tasks with most frequency, we need to go through inputs and calculate counts for each distinct char. This is O(n) time and O(26) space since we only handle upper case letters.\\nAll other operations are O(1) time O(1) space which give us total time complexity of O(n) and space O(1)\\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] counter = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        for(char task : tasks) {\\n            counter[task - 'A']++;\\n            if(max == counter[task - 'A']) {\\n                maxCount++;\\n            }\\n            else if(max < counter[task - 'A']) {\\n                max = counter[task - 'A'];\\n                maxCount = 1;\\n            }\\n        }\\n        \\n        int partCount = max - 1;\\n        int partLength = n - (maxCount - 1);\\n        int emptySlots = partCount * partLength;\\n        int availableTasks = tasks.length - max * maxCount;\\n        int idles = Math.max(0, emptySlots - availableTasks);\\n        \\n        return tasks.length + idles;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] counter = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        for(char task : tasks) {\\n            counter[task - 'A']++;\\n            if(max == counter[task - 'A']) {\\n                maxCount++;\\n            }\\n            else if(max < counter[task - 'A']) {\\n                max = counter[task - 'A'];\\n                maxCount = 1;\\n            }\\n        }\\n        \\n        int partCount = max - 1;\\n        int partLength = n - (maxCount - 1);\\n        int emptySlots = partCount * partLength;\\n        int availableTasks = tasks.length - max * maxCount;\\n        int idles = Math.max(0, emptySlots - availableTasks);\\n        \\n        return tasks.length + idles;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104504,
                "title": "c-8lines-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int>mp;\\n        int count = 0;\\n        for(auto e : tasks)\\n        {\\n            mp[e]++;\\n            count = max(count, mp[e]);\\n        }\\n        \\n        int ans = (count-1)*(n+1);\\n        for(auto e : mp) if(e.second == count) ans++;\\n        return max((int)tasks.size(), ans);\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int>mp;\\n        int count = 0;\\n        for(auto e : tasks)\\n        {\\n            mp[e]++;\\n            count = max(count, mp[e]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 104496,
                "title": "concise-java-solution-o-n-time-o-26-space",
                "content": "```\\n// (c[25] - 1) * (n + 1) + 25 - i  is frame size\\n// when inserting chars, the frame might be \"burst\", then tasks.length takes precedence\\n// when 25 - i > n, the frame is already full at construction, the following is still valid.\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        int[] c = new int[26];\\n        for(char t : tasks){\\n            c[t - 'A']++;\\n        }\\n        Arrays.sort(c);\\n        int i = 25;\\n        while(i >= 0 && c[i] == c[25]) i--;\\n\\n        return Math.max(tasks.length, (c[25] - 1) * (n + 1) + 25 - i);\\n    }\\n}\\n```\\nFirst consider the most frequent characters, we can determine their relative positions first and use them as a frame to insert the remaining less frequent characters. Here is a proof by construction:\\n\\nLet F be the set of most frequent chars with frequency k.\\nWe can create k chunks, each chunk is identical and is a string consists of chars in F in a specific fixed order.\\nLet the heads of these chunks to be H_i; then H_2 should be at least n chars away from H_1, and so on so forth; then we insert the less frequent chars into the gaps between these chunks sequentially one by one ordered by frequency in a decreasing order and try to fill the k-1 gaps as full or evenly as possible each time you insert a character. **In summary, append the less frequent characters to the end of each chunk of the first k-1 chunks sequentially and round and round, then join the chunks and keep their heads' relative distance from each other to be at least n**.\\n\\nExamples:\\n\\nAAAABBBEEFFGG 3\\n\\nhere X represents a space gap:\\n\\n    Frame: \"AXXXAXXXAXXXA\"\\n    insert 'B': \"ABXXABXXABXXA\" <--- 'B' has higher frequency than the other characters, insert it first.\\n    insert 'E': \"ABEXABEXABXXA\"\\n    insert 'F': \"ABEFABEXABFXA\" <--- each time try to fill the k-1 gaps as full or evenly as possible.\\n    insert 'G': \"ABEFABEGABFGA\"\\n\\nAACCCBEEE 2\\n\\n    3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\n    insert 'A' among the gaps of chunks since it has higher frequency than 'B' ---> \"CEACEACE\"\\n    insert 'B' ---> \"CEABCEACE\" <----- result is tasks.length;\\n\\nAACCCDDEEE 3\\n\\n    3 identical chunks \"CE\", \"CE CE CE\" <--- this is a frame.\\n    Begin to insert 'A'->\"CEA CEA CE\"\\n    Begin to insert 'B'->\"CEABCEABCE\" <---- result is tasks.length;\\n\\nACCCEEE 2\\n\\n    3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\n    Begin to insert 'A' --> \"CEACE CE\" <-- result is (c[25] - 1) * (n + 1) + 25 -i = 2 * 3 + 2 = 8",
                "solutionTags": [],
                "code": "```\\n// (c[25] - 1) * (n + 1) + 25 - i  is frame size\\n// when inserting chars, the frame might be \"burst\", then tasks.length takes precedence\\n// when 25 - i > n, the frame is already full at construction, the following is still valid.\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        int[] c = new int[26];\\n        for(char t : tasks){\\n            c[t - 'A']++;\\n        }\\n        Arrays.sort(c);\\n        int i = 25;\\n        while(i >= 0 && c[i] == c[25]) i--;\\n\\n        return Math.max(tasks.length, (c[25] - 1) * (n + 1) + 25 - i);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104501,
                "title": "java-priorityqueue-solution-similar-problem-rearrange-string-k-distance-apart",
                "content": "\\nThe idea used here is similar to - https://leetcode.com/problems/rearrange-string-k-distance-apart\\nWe need to arrange the characters in string such that each same character is K distance apart, where distance in this problems is time b/w two similar task execution.\\n\\nIdea is to add them to a priority Q and sort based on the highest frequency. \\nAnd pick the task in each round of 'n' with highest frequency. As you pick the task, decrease the frequency, and put them back after the round.\\n\\n    public int leastInterval(char[] tasks, int n) {\\n         Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < tasks.length; i++) {\\n            map.put(tasks[i], map.getOrDefault(tasks[i], 0) + 1); // map key is TaskName, and value is number of times to be executed.\\n        }\\n        PriorityQueue<Map.Entry<Character, Integer>> q = new PriorityQueue<>( //frequency sort\\n                (a,b) -> a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey());\\n\\n        q.addAll(map.entrySet());\\n\\n        int count = 0;\\n        while (!q.isEmpty()) {\\n            int k = n + 1;\\n            List<Map.Entry> tempList = new ArrayList<>();\\n            while (k > 0 && !q.isEmpty()) {\\n                Map.Entry<Character, Integer> top = q.poll(); // most frequency task\\n                top.setValue(top.getValue() - 1); // decrease frequency, meaning it got executed\\n                tempList.add(top); // collect task to add back to queue\\n                k--;\\n                count++; //successfully executed task\\n            }\\n\\n            for (Map.Entry<Character, Integer> e : tempList) {\\n                if (e.getValue() > 0) q.add(e); // add valid tasks \\n            }\\n\\n            if (q.isEmpty()) break;\\n            count = count + k; // if k > 0, then it means we need to be idle\\n        }\\n        return count;\\n    }",
                "solutionTags": [],
                "code": "\\nThe idea used here is similar to - https://leetcode.com/problems/rearrange-string-k-distance-apart\\nWe need to arrange the characters in string such that each same character is K distance apart, where distance in this problems is time b/w two similar task execution.\\n\\nIdea is to add them to a priority Q and sort based on the highest frequency. \\nAnd pick the task in each round of 'n' with highest frequency. As you pick the task, decrease the frequency, and put them back after the round.\\n\\n    public int leastInterval(char[] tasks, int n) {\\n         Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < tasks.length; i++) {\\n            map.put(tasks[i], map.getOrDefault(tasks[i], 0) + 1); // map key is TaskName, and value is number of times to be executed.\\n        }\\n        PriorityQueue<Map.Entry<Character, Integer>> q = new PriorityQueue<>( //frequency sort\\n                (a,b) -> a.getValue() != b.getValue() ? b.getValue() - a.getValue() : a.getKey() - b.getKey());\\n\\n        q.addAll(map.entrySet());\\n\\n        int count = 0;\\n        while (!q.isEmpty()) {\\n            int k = n + 1;\\n            List<Map.Entry> tempList = new ArrayList<>();\\n            while (k > 0 && !q.isEmpty()) {\\n                Map.Entry<Character, Integer> top = q.poll(); // most frequency task\\n                top.setValue(top.getValue() - 1); // decrease frequency, meaning it got executed\\n                tempList.add(top); // collect task to add back to queue\\n                k--;\\n                count++; //successfully executed task\\n            }\\n\\n            for (Map.Entry<Character, Integer> e : tempList) {\\n                if (e.getValue() > 0) q.add(e); // add valid tasks \\n            }\\n\\n            if (q.isEmpty()) break;\\n            count = count + k; // if k > 0, then it means we need to be idle\\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 104507,
                "title": "python-straightforward-with-explanation",
                "content": "```\\ndef leastInterval(self, tasks, N):\\n    task_counts = collections.Counter(tasks).values()\\n    M = max(task_counts)\\n    Mct = task_counts.count(M)\\n    return max(len(tasks), (M - 1) * (N + 1) + Mct)\\n```\\n\\nLet\\'s say the most frequent tasks occur ```M``` times, and there are ```Mct``` of them.\\n\\nWhen ```N > Mct```, let\\'s make our scheduling constraint strictly stronger by choosing ```N = Mct```.  So from now on, let\\'s suppose ```Mct <= N```, and the most frequent tasks are denoted #A, #B, #C, ... #K.  \\n\\nThen we could schedule say, `ABC...K__..._ABC...K__..._ABC...K__.....`, where A...K occurs ```Mct``` times, ```_``` denotes idle time, and there is ```N``` space between ```A```\\'s.  This partial schedule would have length ```L = (M-1) * (N+1) + Mct```.  Clearly, we need at least L intervals of time in our schedule to fit our given tasks.  Let\\'s show this is enough.\\n\\nStart inserting the remaining similar tasks in the following \\'writing\\' order:\\n* The first space to the right of the first K\\n* The first space to the right of the second K\\n* ...\\n* The first space to the right of the last K\\n* The second space to the right of the first K\\n* ...\\n* The second space to the right of the last K\\n* The third space to the right of the first K\\n* ....\\n\\nFor example, say we have A B C 1 4 7 10 A B C 2 5 8 11 A B C 3 6 9 12 A B C D.\\nThe numbers denote idle time in the order we will insert.\\nIf we have EEEFFGGHHJJK left, we would insert:\\nA B C E F G J A B C E F H J A B C E G H K A B C D\\n\\nSay two tasks of the same type *collide* if they are scheduled within ```N``` time of each other.  After we have inserted all tasks of frequency ```M - 1``` (which clearly will not collide), other tasks of frequency lower than ```M - 1``` will never have any task written collide with it\\'s left-neighbor (because of the writing order), and the last task written does not collide with the first task written as they are at least ```2N - 1``` apart.\\n\\nIf ```len(tasks) <= L```, this proves that an ```L```-length schedule satisfies.\\n\\nWhen ```len(tasks) > L```, clearly we need at least ```len(tasks)``` intervals of time to schedule all tasks - one interval for each task.  Let\\'s insert remaining tasks as before, possibly having one task incomplete.  For example, we might have A B C E F G J A B C E F H J A B C E G H K A B C D, with KLLMMNNOO left to insert - and K is incomplete.  Our strategy will now be to insert these tasks into our compact schedule.\\n\\nOur incomplete task (K in our example) can be completed by inserting tasks K in the writing order spots that preceded it.  For example, if we wrote J 10th, J 11th, and K 12th, then the positions 11 and 10 are suitable to add K without collision (and numerous enough to permit adding them all).  Now with our remaining tasks, say LL, we will insert in the 1st, N+1th, (and 2N+1th, 3N+1th, etc. if necessary) positions in schedule order.\\n\\nSo we\\'ve shown that the answer is ```max(len(tasks), L)```.",
                "solutionTags": [],
                "code": "```\\ndef leastInterval(self, tasks, N):\\n    task_counts = collections.Counter(tasks).values()\\n    M = max(task_counts)\\n    Mct = task_counts.count(M)\\n    return max(len(tasks), (M - 1) * (N + 1) + Mct)\\n```\n```M```\n```Mct```\n```N > Mct```\n```N = Mct```\n```Mct <= N```\n```Mct```\n```_```\n```N```\n```A```\n```L = (M-1) * (N+1) + Mct```\n```N```\n```M - 1```\n```M - 1```\n```2N - 1```\n```len(tasks) <= L```\n```L```\n```len(tasks) > L```\n```len(tasks)```\n```max(len(tasks), L)```",
                "codeTag": "Python3"
            },
            {
                "id": 104493,
                "title": "c-java-clean-code-priority-queue",
                "content": "The idea is:\\n0. To work on the same task again, CPU has to wait for time ``n``, therefore we can think of as if there is a ``cycle``, of ``time n+1``, regardless whether you schedule some other task in the cycle or not.\\n1. To avoid leave the CPU with limited choice of tasks and having to sit there cooling down frequently at the end, it is critical the keep the diversity of the task pool for as long as possible.\\n2. In order to do that, we should try to schedule the CPU to ``always try round robin between the most popular tasks at any time``.\\n\\n**priority_queue<``task``, ``count``>**\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> counts;\\n        for (char t : tasks) {\\n            counts[t]++;\\n        }\\n        priority_queue<pair<int, char>> pq;\\n        for (pair<char, int> count : counts) {\\n            pq.push(make_pair(count.second, count.first));\\n        }\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.empty()) {\\n            int time = 0;\\n            vector<pair<int, char>> tmp;\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.empty()) {\\n                    tmp.push_back(pq.top());\\n                    pq.pop();\\n                    time++;\\n                }\\n            }\\n            for (auto t : tmp) {\\n                if (--t.first) {\\n                    pq.push(t);\\n                }\\n            }\\n            alltime += !pq.empty() ? cycle : time;\\n        }\\n        return alltime;\\n    }\\n};\\n```\\n**priority_queue<``count``>**\\nAs @milu point out, we don't really need to store <task - count> pair in the priority_queue, we don't need to know the task name, store counts works good enough:\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> counts;\\n        for (char t : tasks) {\\n            counts[t]++;\\n        }\\n        priority_queue<int> pq;\\n        for (pair<char, int> count : counts) {\\n            pq.push(count.second);\\n        }\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.empty()) {\\n            int time = 0;\\n            vector<int> tmp;\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.empty()) {\\n                    tmp.push_back(pq.top());\\n                    pq.pop();\\n                    time++;\\n                }\\n            }\\n            for (int cnt : tmp) {\\n                if (--cnt) {\\n                    pq.push(cnt);\\n                }\\n            }\\n            alltime += !pq.empty() ? cycle : time;\\n        }\\n        return alltime;\\n    }\\n};\\n```\\n\\n**Java Version**\\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> counts = new HashMap<Character, Integer>();\\n        for (char t : tasks) {\\n            counts.put(t, counts.getOrDefault(t, 0) + 1);\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\\n        pq.addAll(counts.values());\\n\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.isEmpty()) {\\n            int worktime = 0;\\n            List<Integer> tmp = new ArrayList<Integer>();\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.isEmpty()) {\\n                    tmp.add(pq.poll());\\n                    worktime++;\\n                }\\n            }\\n            for (int cnt : tmp) {\\n                if (--cnt > 0) {\\n                    pq.offer(cnt);\\n                }\\n            }\\n            alltime += !pq.isEmpty() ? cycle : worktime;\\n        }\\n        \\n        return alltime;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> counts;\\n        for (char t : tasks) {\\n            counts[t]++;\\n        }\\n        priority_queue<pair<int, char>> pq;\\n        for (pair<char, int> count : counts) {\\n            pq.push(make_pair(count.second, count.first));\\n        }\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.empty()) {\\n            int time = 0;\\n            vector<pair<int, char>> tmp;\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.empty()) {\\n                    tmp.push_back(pq.top());\\n                    pq.pop();\\n                    time++;\\n                }\\n            }\\n            for (auto t : tmp) {\\n                if (--t.first) {\\n                    pq.push(t);\\n                }\\n            }\\n            alltime += !pq.empty() ? cycle : time;\\n        }\\n        return alltime;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> counts;\\n        for (char t : tasks) {\\n            counts[t]++;\\n        }\\n        priority_queue<int> pq;\\n        for (pair<char, int> count : counts) {\\n            pq.push(count.second);\\n        }\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.empty()) {\\n            int time = 0;\\n            vector<int> tmp;\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.empty()) {\\n                    tmp.push_back(pq.top());\\n                    pq.pop();\\n                    time++;\\n                }\\n            }\\n            for (int cnt : tmp) {\\n                if (--cnt) {\\n                    pq.push(cnt);\\n                }\\n            }\\n            alltime += !pq.empty() ? cycle : time;\\n        }\\n        return alltime;\\n    }\\n};\\n```\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> counts = new HashMap<Character, Integer>();\\n        for (char t : tasks) {\\n            counts.put(t, counts.getOrDefault(t, 0) + 1);\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> b - a);\\n        pq.addAll(counts.values());\\n\\n        int alltime = 0;\\n        int cycle = n + 1;\\n        while (!pq.isEmpty()) {\\n            int worktime = 0;\\n            List<Integer> tmp = new ArrayList<Integer>();\\n            for (int i = 0; i < cycle; i++) {\\n                if (!pq.isEmpty()) {\\n                    tmp.add(pq.poll());\\n                    worktime++;\\n                }\\n            }\\n            for (int cnt : tmp) {\\n                if (--cnt > 0) {\\n                    pq.offer(cnt);\\n                }\\n            }\\n            alltime += !pq.isEmpty() ? cycle : worktime;\\n        }\\n        \\n        return alltime;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760131,
                "title": "java-concise-solution-intuition-explained-in-detail",
                "content": "**Intuition of the problem** \\nWe have to find least number of intervals to finish all tasks. Given that, each task requires one interval, for tasks of size t, we need at least t intervals to complete it.\\n\\nNow the problem is reduced to finding the minimum idle time when no task is executing. \\nOur result would be `idle Time + t (size of task array)`\\n\\n**How to find the idle time ?**\\nAssume, there 3 A tasks. Tasks = `[\"A\",\"A\",\"A\",\"B\"]` . cooling time  n = 2 .\\nIf A Is run at a particular time, we cannot run it for 2 intervals after that.\\nSo we have to try filling up those 2 spaces with some other task.\\n\\n```\\n What are the maximum number of idle spaces that we could have?\\n```\\nIt would be (max Frequency task - 1 * n) \\nIn this example, A has maximum frequency of 3, so there are 2 set of intervals(each of size n=2)  that needs to be filled with some other task.\\n![image](https://assets.leetcode.com/users/images/b64428e0-5e99-42f3-9c9c-9528325f9a8a_1595922616.5150144.png)\\n\\nOnce we know the maximum number of idle spaces, we have to just reduce the the count of spaces every time we find a task that can fill up that idle space.\\n\\n**Steps** -\\n\\t1) Create count array to keep track of frequency of each task. Size 26 as given in input.\\n\\t2) Sort the frequency is ascending order, the task at last position (`arr[25]`) would be the one with maximum frequency.\\nExample - \\nTasks `[\"A\",\"A\",\"A\",\"B\",\"B\",\"C\"]`\\nA has max occurrence = 3, n = 2. Hence we can place A as follows\\n![image](https://assets.leetcode.com/users/images/a74d0b55-2a83-490a-a5c7-cde5466ffb92_1595922748.204163.png)\\n\\n`Max idle spaces = (3-1) * 2 = 4 `. We could see there 4 idle spaces above.\\n\\n 3)Now we have to just find that there are sufficient tasks to fill these 4 idle spaces. \\nWe iterate over rest of array in descending order and substract it\\'s count from idle spaces.\\nTask B has count 2 and C has count 1. Hence 1 space remains idle.\\n\\t\\n![image](https://assets.leetcode.com/users/images/5b1caf1c-28d3-490e-a0e8-b8a70e9f23a4_1595922810.5218632.png)\\n\\nAnswer , `task length + idle time = 6 + 1 = 7 `\\n\\n```\\nclass Solution {\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n\\t\\tif (tasks == null || tasks.length == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tint m = tasks.length;\\n\\t\\tint[] cnt = new int[26];\\n\\t\\t/* Build the count array with frequency of each task */\\n\\t\\tfor (char c: tasks) {\\n\\t\\t\\tcnt[c - \\'A\\']++;\\n\\t\\t}\\n\\t\\tArrays.sort(cnt);\\n\\t\\t/* Get maximum frequency task  and calculate max idle spaces*/\\n        int max = cnt[25]-1;\\n\\t\\tint spaces = max * n;\\n\\t\\t\\n\\t\\t/* Iterate over rest of the array and reduce the idle space count */\\n\\t\\tfor (int i = 24; i >= 0; i--) {\\n\\t\\t\\tspaces -= Math.min(max, cnt[i]);\\n\\t\\t}\\n\\t\\t/* Handle cases when spaces become negative */\\n\\t\\tspaces = Math.max(0, spaces);\\n\\t\\treturn tasks.length + spaces;\\n\\t}\\n}\\n```\\n\\n*Feel free to ask questions in comments. Do upvote if you understood the solution*",
                "solutionTags": [],
                "code": "```\\n What are the maximum number of idle spaces that we could have?\\n```\n```\\nclass Solution {\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n\\t\\tif (tasks == null || tasks.length == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tint m = tasks.length;\\n\\t\\tint[] cnt = new int[26];\\n\\t\\t/* Build the count array with frequency of each task */\\n\\t\\tfor (char c: tasks) {\\n\\t\\t\\tcnt[c - \\'A\\']++;\\n\\t\\t}\\n\\t\\tArrays.sort(cnt);\\n\\t\\t/* Get maximum frequency task  and calculate max idle spaces*/\\n        int max = cnt[25]-1;\\n\\t\\tint spaces = max * n;\\n\\t\\t\\n\\t\\t/* Iterate over rest of the array and reduce the idle space count */\\n\\t\\tfor (int i = 24; i >= 0; i--) {\\n\\t\\t\\tspaces -= Math.min(max, cnt[i]);\\n\\t\\t}\\n\\t\\t/* Handle cases when spaces become negative */\\n\\t\\tspaces = Math.max(0, spaces);\\n\\t\\treturn tasks.length + spaces;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 130786,
                "title": "python-solution-with-detailed-explanation",
                "content": "**Task Scheduler** https://leetcode.com/problems/task-scheduler/description/\\n\\n**Algorithm**\\n1. This is an extremely tricky problem.\\n2. The main idea is to schedule the most frequent tasks as frequently as possible. Begin with scheduling the most frequent task. Then cool-off for n, and in that cool-off period schedule tasks in order of frequency, or if no tasks are available, then be idle.\\nExampe: Say we have the following tasks: \\\\[A,A,A,B,C,D,E\\\\] with n =2\\nNow if we schedule using the idea of scheduling all unique tasks once and then calculating if a cool-off is required or not, then we have: A,B,C,D,E,A,idle,dile,A i.e. 2 idle slots.\\nBut if we schedule using most frequent first, then we have:\\n2.1: A,idle,idle,A,idle,idle,A\\n2.2: A,B,C,A,D,E,A i.e. no idle slots. This is the general intuition of this problem.\\n3.The idea in two can be implemented using a heap and temp list. This is illustrated in the code below.\\n4.Time complexity is O(N * n) where N is the number of tasks and n is the cool-off period.\\n5.Space complexity is O(1) - will not be more than O(26).\\n\\n```\\nfrom heapq import heappush, heappop\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        curr_time, h = 0, []\\n        for k,v in Counter(tasks).items():\\n            heappush(h, (-1*v, k))\\n        while h:\\n            i, temp = 0, []\\n            while i <= n:\\n                curr_time += 1\\n                if h:\\n                    x,y = heappop(h)\\n                    if x != -1:\\n                        temp.append((x+1,y))\\n                if not h and not temp:\\n                    break\\n                else:\\n                    i += 1\\n            for item in temp:\\n                heappush(h, item)\\n        return curr_time\\n```",
                "solutionTags": [],
                "code": "```\\nfrom heapq import heappush, heappop\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        curr_time, h = 0, []\\n        for k,v in Counter(tasks).items():\\n            heappush(h, (-1*v, k))\\n        while h:\\n            i, temp = 0, []\\n            while i <= n:\\n                curr_time += 1\\n                if h:\\n                    x,y = heappop(h)\\n                    if x != -1:\\n                        temp.append((x+1,y))\\n                if not h and not temp:\\n                    break\\n                else:\\n                    i += 1\\n            for item in temp:\\n                heappush(h, item)\\n        return curr_time\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104511,
                "title": "java-solution-priorityqueue-and-hashmap",
                "content": "1. ```Greedy``` - It's obvious that we should always process the task which has largest amount left.\\n2. Put tasks (only their counts are enough, we don't care they are 'A' or 'B') in a ```PriorityQueue``` in descending order.\\n3. Start to process tasks from front of the queue. If amount left > 0, put it into a ```coolDown HashMap```\\n4. If there's task which cool-down expired, put it into the queue and wait to be processed.\\n5. Repeat step 3, 4 till there is no task left. \\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        \\n        Map<Character, Integer> taskToCount = new HashMap<>();\\n        for (char c : tasks) {\\n            taskToCount.put(c, taskToCount.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        Queue<Integer> queue = new PriorityQueue<>((i1, i2) -> i2 - i1);\\n        for (char c : taskToCount.keySet()) queue.offer(taskToCount.get(c));\\n        \\n        Map<Integer, Integer> coolDown = new HashMap<>();\\n        int currTime = 0;\\n        while (!queue.isEmpty() || !coolDown.isEmpty()) {\\n            if (coolDown.containsKey(currTime - n - 1)) {\\n                queue.offer(coolDown.remove(currTime - n - 1));\\n            }\\n            if (!queue.isEmpty()) {\\n                int left = queue.poll() - 1;\\n        \\tif (left != 0) coolDown.put(currTime, left);\\n            }\\n            currTime++;\\n        }\\n        \\n        return currTime;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```Greedy```\n```PriorityQueue```\n```coolDown HashMap```\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        \\n        Map<Character, Integer> taskToCount = new HashMap<>();\\n        for (char c : tasks) {\\n            taskToCount.put(c, taskToCount.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        Queue<Integer> queue = new PriorityQueue<>((i1, i2) -> i2 - i1);\\n        for (char c : taskToCount.keySet()) queue.offer(taskToCount.get(c));\\n        \\n        Map<Integer, Integer> coolDown = new HashMap<>();\\n        int currTime = 0;\\n        while (!queue.isEmpty() || !coolDown.isEmpty()) {\\n            if (coolDown.containsKey(currTime - n - 1)) {\\n                queue.offer(coolDown.remove(currTime - n - 1));\\n            }\\n            if (!queue.isEmpty()) {\\n                int left = queue.poll() - 1;\\n        \\tif (left != 0) coolDown.put(currTime, left);\\n            }\\n            currTime++;\\n        }\\n        \\n        return currTime;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 370755,
                "title": "c-solution-95-time-space-with-good-explanation",
                "content": "The idea is to find a way to arrange these tasks, and use as less idle intervals as possible.\\n\\n1) By observing a few test cases, we know that it\\'s a lot easier to start from the task with the highest frequency of occurrence. Let\\'s say the task is A.\\n2) Then we can put all A tasks into the array, and make sure they are separated by n idle inervals.  \\n ```\\n A____A____A____A____A____A\\n \\n number of A = num(A)            // the number of task A\\n gap = (num(A) - 1) x n          // the number of idle intervals\\n total length = num(A) + gap     // the total length\\n ```\\n \\n3) Now we need to replace the idle intervals with other tasks. Similarily, we\\'d better start from tasks with the second highest frequency of occurrence. Let\\'s say it\\'s B, then \\na) `if num(B) < num(A) && num(B) < gap`, we know that the total length will not be affected. We simply decrement the gap by num(B). \\nAB___AB___AB____A____A____A\\nb) `if num(B) == num(A) && num(B) < gap`, we need to decrement the gap by `num(B) - 1`, and also increment total length by 1. \\nAB___AB___AB___AB___AB___AB\\nc) If we run out of gap, it is great, because this case is even easier to handle. It means we don\\'t need any idle intervals at all. Simply return the length of all tasks, and we are done.  Why? Let\\'s say We have all gaps filled, we have an array like this:\\nABCDABCDABCDABCDABCD\\nNow we need to insert task E, we can change the filled gaps a little bit, make extra spaces for task E, the number of changed gaps depends on how many E we have, then the array looks like:\\nABCD_ABCD_ABCDABCDABCD \\nWith E inserted:\\nABCDEABCDEABCDABCDABCD\\nIf E repeats as many times as A, the array will look like:\\nABCDEABCDEABCDEABCDEABCDE\\nWe can always find a way to arrange them without introducing idle intervals.\\n\\nSo we have this piece of code.\\n```\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int m[128] = {0};\\n        for (char c : tasks)  m[c]++;  \\n        sort(m, m + 128, [](int a, int b){ return a > b; });\\n        int gap = n * (m[0] - 1), total = m[0] + gap;\\n        for (int i=1; i<128 && m[i] != 0; i++) {\\n            if (gap >= m[i]) {\\n                if (m[i] == m[0]) {\\n                    gap -= (m[0] - 1);      \\n                    total++;\\n                } else {\\n                    gap -= m[i];\\n                }\\n            } else {\\n                return tasks.size();\\n            }\\n        } \\n        return total;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n A____A____A____A____A____A\\n \\n number of A = num(A)            // the number of task A\\n gap = (num(A) - 1) x n          // the number of idle intervals\\n total length = num(A) + gap     // the total length\\n ```\n```\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int m[128] = {0};\\n        for (char c : tasks)  m[c]++;  \\n        sort(m, m + 128, [](int a, int b){ return a > b; });\\n        int gap = n * (m[0] - 1), total = m[0] + gap;\\n        for (int i=1; i<128 && m[i] != 0; i++) {\\n            if (gap >= m[i]) {\\n                if (m[i] == m[0]) {\\n                    gap -= (m[0] - 1);      \\n                    total++;\\n                } else {\\n                    gap -= m[i];\\n                }\\n            } else {\\n                return tasks.size();\\n            }\\n        } \\n        return total;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3280549,
                "title": "full-explanation-using-priority-queue-and-formula-based-approach",
                "content": "# Intuition\\nIt took me a lot of time to figure this one out. The intuitive solution is to first count the occurence of each task and store it in a priority queue so that the highest frequency task can be done first and then other tasks can follow.\\nBut, we have to keep the cooldown period in mind. \\n\\n# Approach\\n## 1. Using priority queue\\n- First count the number of occurrences of each task and store that in a map/vector.\\n- Then push the count into a priority queue, so that the maximum frequency task can be accessed and completed first.\\n- Then until all tasks are completed (i.e the priority queue is not empty):\\n    - intialise the cycle length as n+1. n is the cooldown period so the cycle will be of n+1 length. \\nExample: for [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\'] and n=2, \\nthe tasks can occur in the following manner:\\n[A B idle]->[A B idle]->[A]. See here each cycle is n+1 length long, only then A can repeat itself.\\n    - for all elements in the priority queue, until the cycle length is exhausted, pop the elements out of the queue and if the task is occurring more than once then add it to the remaining array (which stores the remaining tasks). \\n    This means that we are completing that task once in this cycle.So keep counting the time.\\n    - Then, add the occurrence of tasks back to the priority queue.\\n    - Add the idle time into the time count.\\n\\nIdle time is the time that was needed in the cycle because no task was available. It is the remaining cycle length in our algorithm. Idle time should be only added if the priority queue is empty (i.e all tasks are completed).\\n\\n\\n\\n## 2. By deducing a formula\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s understand this with an example:\\n```\\ntasks= [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'D\\'], n=2\\n```\\nMaximum frequency=3 and maximum occurring task= A,B\\nHere our possible solution is:\\n```\\n[\\'A\\'->\\'B\\'->\\'C\\'] -> [\\'A\\',\\'B\\',\\'D\\'] ->[\\'A\\',\\'B\\']\\ntotal time: 3+3+2=8\\n```\\nNotice something: The cycle A->B->other_task is repeating 2 (maximum frequency-1) times and then A->B occurs.\\nA and B are the maximum frequency elements which are making the cycle of length 3(n+1).\\nWe can say that\\n```\\ntotal time= (cycle length)*(maximum frequency-1) + number maximum frequency tasks that are left  \\ni.e total time=(n+1)*(max_freq-1)+count_maxfreq_task\\n```\\nIn scenarios where the total time is less than the number of tasks, the minimum time required would be the number of tasks itself.\\n\\n\\n\\n# Code\\n### 1. Using priority queue \\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        vector<int>mp(26,0);\\n\\n        for(char i:tasks){\\n            mp[i-\\'A\\']++;  // count the number of times a task needs to be done\\n        }   \\n        for(int i=0;i<26;++i){\\n            if(mp[i]) \\n            pq.push(mp[i]);\\n        }\\n\\n        int time=0; // stores the total time taken \\n        while(!pq.empty()){\\n            vector<int>remain;\\n            int cycle=n+1;  // n+1 is the CPU cycle length, if n is the cooldown period then after a task A there will be n more tasks. Hence n+1.\\n\\n            while(cycle and !pq.empty()){\\n                int max_freq=pq.top(); // the task at the top should be first assigned the CPU as it has highest frequency\\n                pq.pop();\\n                if(max_freq>1){ // task with more than one occurrence, the next occurrence will be done in the next cycle \\n                    remain.push_back(max_freq-1); // add it to remaining task list\\n                }\\n                ++time; \\n                --cycle; \\n            }\\n\\n            for(int count:remain){\\n                pq.push(count); \\n            }\\n            if(pq.empty())break; // if the priority queue is empty than all tasks are completed and we don\\'t need to include the idle time\\n            time+=cycle; // this counts the idle time \\n        }\\n        return time;\\n    }\\n};\\n```\\n### 2. Using formula\\n```\\nclass Solution {\\npublic:\\n\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> mp(26,0);\\n        int max_freq=0, count_maxfreq=0, sz=tasks.size();\\n        for(char i:tasks){\\n            mp[i-\\'A\\']++;  // count the number of times a task needs to be done\\n            if(mp[i-\\'A\\']>max_freq){\\n                max_freq=mp[i-\\'A\\']; // find maximum frequency \\n            }\\n        }   \\n        for(int i=0;i<26;i++){\\n            if(mp[i]==max_freq) count_maxfreq++; // number of tasks having maximum frequency\\n        }\\n        int time= (max_freq-1)*(n+1)+count_maxfreq; // total time taken to complete all tasks\\n        return max(time,sz);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ntasks= [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'D\\'], n=2\\n```\n```\\n[\\'A\\'->\\'B\\'->\\'C\\'] -> [\\'A\\',\\'B\\',\\'D\\'] ->[\\'A\\',\\'B\\']\\ntotal time: 3+3+2=8\\n```\n```\\ntotal time= (cycle length)*(maximum frequency-1) + number maximum frequency tasks that are left  \\ni.e total time=(n+1)*(max_freq-1)+count_maxfreq_task\\n```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        vector<int>mp(26,0);\\n\\n        for(char i:tasks){\\n            mp[i-\\'A\\']++;  // count the number of times a task needs to be done\\n        }   \\n        for(int i=0;i<26;++i){\\n            if(mp[i]) \\n            pq.push(mp[i]);\\n        }\\n\\n        int time=0; // stores the total time taken \\n        while(!pq.empty()){\\n            vector<int>remain;\\n            int cycle=n+1;  // n+1 is the CPU cycle length, if n is the cooldown period then after a task A there will be n more tasks. Hence n+1.\\n\\n            while(cycle and !pq.empty()){\\n                int max_freq=pq.top(); // the task at the top should be first assigned the CPU as it has highest frequency\\n                pq.pop();\\n                if(max_freq>1){ // task with more than one occurrence, the next occurrence will be done in the next cycle \\n                    remain.push_back(max_freq-1); // add it to remaining task list\\n                }\\n                ++time; \\n                --cycle; \\n            }\\n\\n            for(int count:remain){\\n                pq.push(count); \\n            }\\n            if(pq.empty())break; // if the priority queue is empty than all tasks are completed and we don\\'t need to include the idle time\\n            time+=cycle; // this counts the idle time \\n        }\\n        return time;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> mp(26,0);\\n        int max_freq=0, count_maxfreq=0, sz=tasks.size();\\n        for(char i:tasks){\\n            mp[i-\\'A\\']++;  // count the number of times a task needs to be done\\n            if(mp[i-\\'A\\']>max_freq){\\n                max_freq=mp[i-\\'A\\']; // find maximum frequency \\n            }\\n        }   \\n        for(int i=0;i<26;i++){\\n            if(mp[i]==max_freq) count_maxfreq++; // number of tasks having maximum frequency\\n        }\\n        int time= (max_freq-1)*(n+1)+count_maxfreq; // total time taken to complete all tasks\\n        return max(time,sz);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760266,
                "title": "python-4-lines-linear-solution-detailed-explanation",
                "content": "This is quite difficult problem if you want to have optimal solution. First, I tried several ideas, using queue and greedy algorithm, where I tried to build sequence symbol by symbol, but it was working very slow and I get TLE. So, I decided to stop coding and to think. \\n\\nSo, what is the main trick? First of all notice, that what is matter, is frequence of each letter, not order.\\n For each letter we need to evaluate minimum window size we need to fully use this letter. For example, if we have `4` letters `A` in our tasks and `n = 3`, then minimum window looks like `A...A...A...A`. So, the minimum length in this case we need is `13 = (n+1) * 3 + 1`. Let us call this number 13 **characteristic** of letter `A`. More examples:\\n1. If `n = 4` and we have `BBBBB`, than **characteristic** of letter `B` is equal to `(n+1) * 4 + 1 = 21`.\\n2. If `n = 1` and we have `CC`, than **characteristic** of letter `C` is equal to `(n+1) * 1 + 1 = 3`.\\n\\nSo, we need to evaluate **characteristics** of all letters and just choose the maximum one? Similar, but not exaclty. What if we have two letters with the same **characteristic** (it means they have the same frequencies), like we have `AAAABBBB`. Then we need to have window `A...A...A...A` and also window `B...B...B...B`, and you can not put one inside another. So, in this case we need at least one symbol more, and example will be `AB..AB..AB..AB`.\\n\\nIn this problem we are asked, what is the **minimum** number of units we need to use, so, mathematicaly speaking, we need to do two steps:\\n\\n1. **Estimation:** prove, that we need at least say **k** units.\\n2. Give an **example** for this **k** units, how to construct desired sequence. (note, that in this problem you do not really ask to create example, but we still need to prove, that it exists).\\n\\nWe already considered **Estimation**: we need to find elements with the highest **characteristic** and check how many such elements we have. So, if `freq = Counter(tasks)` and `Most_freq = freq.most_common()[0][1]` is the element with highest frequency, than `Found_most = sum([freq[key] == Most_freq for key in freq])` is number of such elements and we return `max(len(tasks), (Most_freq - 1) * (n + 1) + Found_most)`, because we can not be shorter than `len(tasks)`.\\n\\nThe most difficult part is to prove that **example** exists. Let us consider case, where we have `AAAA`, `BBBB`, `n = 5` and also we have some letters. Then first step is to build:\\n\\n`AB....AB....AB....AB`\\n\\nWhat we know about other elements? Their frequencies are less than `Most_freq = 4`. So, let us start to fill dots in special order:\\n\\n`A B 1 4 7 10 A B 2 5 8 11 A B 3 6 9 12 A B`\\n\\nWhy we choose this order? Because for any `Most_freq - 2` elements with adjacent numbers, places will be at least `n` elements apart! So all we need to do is to fill elements with frequencies `Most_freq - 1` first, and then fill all the other empty places.\\n\\nThere is another case, where `(Most_freq - 1) * (n + 1) + Found_most < len(tasks)`, for example when we have something like `AABBCCD`, `n = 2` In this case we can show that answer should be equal to `len(tasks)`. We again start with most with most common letters and try to form answer. However we can see, that we can not combine properly `A.A`, `B.B` and `C.C` like we did previously, so we combine them as `ABCABC`. The last step is to insert remaining letters between constructed string. It is not very strict explanation, but I hope it helps. \\n\\n**Complexity**: time complexity is `O(n)`, to evaluate `freq` and one more pass to find all elements with highest frequency. Then we just evaluate answer in constant time. Space complexity is `O(26)`, because there are `26` different letters.\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        freq = Counter(tasks)\\n        Most_freq = freq.most_common()[0][1]\\n        Found_most = sum([freq[key] == Most_freq for key in freq])\\n        return max(len(tasks), (Most_freq - 1) * (n + 1) + Found_most)\\n```\\n\\nIf you have any questoins, feel free to ask. If you like the solution and explanation, please **upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        freq = Counter(tasks)\\n        Most_freq = freq.most_common()[0][1]\\n        Found_most = sum([freq[key] == Most_freq for key in freq])\\n        return max(len(tasks), (Most_freq - 1) * (n + 1) + Found_most)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760569,
                "title": "c-greedy-o-n-time-o-1-space-with-explanation-in-5-lines",
                "content": "This is a very good problem. It makes me immediately think of a problem in atcoder: \\nhttps://atcoder.jp/contests/abc143/tasks/abc143_f\\nI strongly recommend you trying this problem, it is very good!\\n\\nFor this problem it is simplier but still a bit tricky. Here are my ideas:\\n\\nQ0. It seems like a greedy problem. How to make the time units being occupied as many as possible?\\nA0. Choose every `n+1` elements in a round. And choose those with the maximum occurence.\\n\\nFor example: `[\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"C\"], n = 1`, `A` occurs `5` times, `B` occurs `2`, C occurs `1`. Then in the first round we choose `A,B`. Second round choose `A,B`. Third round choose `A,C`. Fourth round we can only choose `A,null`. Fifth rounds we choose `A` only. We use 5 rounds in total, which need 9 units.\\n\\nQ1. What is the \"lower bound\" of the answer? That is, what is \"forcing\" us to use more units?\\nA1. Obviously, the lower bound is determined by `maxcnt`, the maximum of the occurence of each element. In the above example, `maxncnt = 5`. So, we have to choose ***at least*** `maxcnt` rounds, hence the answer is at least `(maxcnt-1)*(n+1) + e`. Where `e` is the number of occurences which equals to `maxcnt`. In the above example, there is only one element with occruence equals to `5`, hence `e = 1`.\\n\\nQ1.5. Wait, why isn\\'t the lower bound equals to `maxcnt * (n+1)`? \\nA1.5. See the above example, in last round we don\\'t need to wait for anything. But if there are multiple elements having occurence = `maxcnt`, we still need to handle them.\\n\\nQ2. What is the \"upper bound\" of the answer? That is, what if we don\\'t have any idle time units, what is the answer then?\\nA2. Obviously, it is the size of input array `tasks`.\\n\\nSo we are done! The answer is just: `max(tasks.size(), (maxcnt-1)*(n+1) + e)`.\\n\\nQ3. But how to prove this? \\nA3. A serious proof is a bit long, but the intuition is that, if we are not bounded by the \"lower bound\". We can fully use all the time units.\\n\\n```\\nclass Solution {\\npublic:\\n    int cnt[26], maxcnt = 0, e = 0;\\n    int leastInterval(vector<char>& tasks, int n) {\\n        for (char c : tasks) cnt[c-\\'A\\']++;\\n        for (int i = 0; i < 26; i++) maxcnt = max(maxcnt, cnt[i]);\\n        for (int i = 0; i < 26; i++) \\n            if (cnt[i] == maxcnt) e++;\\n        return max(tasks.size(), (maxcnt-1)*(n+1) + e);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int cnt[26], maxcnt = 0, e = 0;\\n    int leastInterval(vector<char>& tasks, int n) {\\n        for (char c : tasks) cnt[c-\\'A\\']++;\\n        for (int i = 0; i < 26; i++) maxcnt = max(maxcnt, cnt[i]);\\n        for (int i = 0; i < 26; i++) \\n            if (cnt[i] == maxcnt) e++;\\n        return max(tasks.size(), (maxcnt-1)*(n+1) + e);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699297,
                "title": "python-very-detailed-explanation-with-examples",
                "content": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        ## RC ##\\n        ## APPROACH : HASHMAP ##\\n        ## LOGIC : TAKE THE MAXIMUM FREQUENCY ELEMENT AND MAKE THOSE MANY NUMBER OF SLOTS ##\\n        ##  Slot size = (n+1) if n= 2 => slotsize = 3 Example: {A:5, B:1} => ABxAxxAxxAxxAxx => indices of A = 0,2 and middle there should be n elements, so slot size should be n+1\\n        \\n        ## Ex: {A:6,B:4,C:2} n = 2\\n        ## final o/p will be\\n        ## slot size / cycle size = 3\\n        ## Number of rows = number of A\\'s (most freq element)\\n        # [\\n        #     [A, B,      C],\\n        #     [A, B,      C],\\n        #     [A, B,      idle],\\n        #     [A, B,      idle],\\n        #     [A, idle,   idle],\\n        #     [A   -        - ],\\n        # ]\\n        #\\n        # so from above total time intervals = (max_freq_element - 1) * (n + 1) + (all elements with max freq)\\n                                     # ans   =     rows_except_last   * columns +        last_row\\n            \\n            \\n        ## but consider {A:5, B:1, C:1, D:1, E:1, F:1, G:1, H:1, I:1, J:1, K:1, L:1} n = 1\\n        ## total time intervals by above formula will be 4 * 2 + 1 = 9, which is less than number of elements, which is not possible. so we have to return max(ans, number of tasks)\\n        \\n        \\n\\t\\t## TIME COMPLEXITY : O(N) ##\\n\\t\\t## SPACE COMPLEXITY : O(1) ##\\n\\n        freq = collections.Counter(tasks)\\n        max_freq = max(freq.values())\\n        freq = list(freq.values())\\n        max_freq_ele_count = 0                 # total_elements_with_max_freq, last row elements\\n        i = 0\\n        while( i < len(freq)):\\n            if freq[i] == max_freq:\\n                max_freq_ele_count += 1\\n            i += 1\\n            \\n        ans = (max_freq - 1) * (n+1) + max_freq_ele_count\\n        \\n        return max(ans, len(tasks))\\n```\\nPLEASE UPVOTE IF YOU LIKE MY SOLUTION",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        ## RC ##\\n        ## APPROACH : HASHMAP ##\\n        ## LOGIC : TAKE THE MAXIMUM FREQUENCY ELEMENT AND MAKE THOSE MANY NUMBER OF SLOTS ##\\n        ##  Slot size = (n+1) if n= 2 => slotsize = 3 Example: {A:5, B:1} => ABxAxxAxxAxxAxx => indices of A = 0,2 and middle there should be n elements, so slot size should be n+1\\n        \\n        ## Ex: {A:6,B:4,C:2} n = 2\\n        ## final o/p will be\\n        ## slot size / cycle size = 3\\n        ## Number of rows = number of A\\'s (most freq element)\\n        # [\\n        #     [A, B,      C],\\n        #     [A, B,      C],\\n        #     [A, B,      idle],\\n        #     [A, B,      idle],\\n        #     [A, idle,   idle],\\n        #     [A   -        - ],\\n        # ]\\n        #\\n        # so from above total time intervals = (max_freq_element - 1) * (n + 1) + (all elements with max freq)\\n                                     # ans   =     rows_except_last   * columns +        last_row\\n            \\n            \\n        ## but consider {A:5, B:1, C:1, D:1, E:1, F:1, G:1, H:1, I:1, J:1, K:1, L:1} n = 1\\n        ## total time intervals by above formula will be 4 * 2 + 1 = 9, which is less than number of elements, which is not possible. so we have to return max(ans, number of tasks)\\n        \\n        \\n\\t\\t## TIME COMPLEXITY : O(N) ##\\n\\t\\t## SPACE COMPLEXITY : O(1) ##\\n\\n        freq = collections.Counter(tasks)\\n        max_freq = max(freq.values())\\n        freq = list(freq.values())\\n        max_freq_ele_count = 0                 # total_elements_with_max_freq, last row elements\\n        i = 0\\n        while( i < len(freq)):\\n            if freq[i] == max_freq:\\n                max_freq_ele_count += 1\\n            i += 1\\n            \\n        ans = (max_freq - 1) * (n+1) + max_freq_ele_count\\n        \\n        return max(ans, len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104495,
                "title": "java-o-n-solution-beats-99-76-use-only-array-easy-understanding",
                "content": "There is one crucial point for you:\\nthe ONLY thing you need to care is **the max number of one task**!\\nWe set apart each max task with interval n, and we hope to put all other tasks into those intervals. If the number of those tasks exceeds the interval space, then we don't need any idle interval at all. If not, the interval space plus the max tasks will be the least interval. Be care for the existent of multiple max tasks. \\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] storage = new int[26];\\n        for (char c : tasks) {\\n            storage[(c - 'A')]++;\\n        }\\n        int max = 0;\\n        int count = 1;\\n        for (int num : storage) {\\n            if (num == 0) {\\n                continue;\\n            }\\n            if (max < num) {\\n                max = num;\\n                count = 1;\\n            } else if (max == num) {\\n                count++;\\n            }\\n        }\\n        int space = (n + 1) * (max - 1) + count;\\n        return (space < nums.length) ? nums.length : space;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] storage = new int[26];\\n        for (char c : tasks) {\\n            storage[(c - 'A')]++;\\n        }\\n        int max = 0;\\n        int count = 1;\\n        for (int num : storage) {\\n            if (num == 0) {\\n                continue;\\n            }\\n            if (max < num) {\\n                max = num;\\n                count = 1;\\n            } else if (max == num) {\\n                count++;\\n            }\\n        }\\n        int space = (n + 1) * (max - 1) + count;\\n        return (space < nums.length) ? nums.length : space;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 761070,
                "title": "python-heavily-visualized-detailed-explanation",
                "content": "I took some time to understand the logic behind it so I\\'m sharing my understanding here with some graphs. Hopefully it would help you if are still confused.\\n\\nPlease upvote if you like.\\n\\nTaking ```tasks=[A,A,A,B,B,B,C,C,D,D],n=3``` as an example, we have a variable ```mx```: the maximum frequency of tasks. In this case, ```mx=3``` (3 A and 3 B). Besides, there are totally ```x``` tasks appear ```mx```. We can divide the arrangement into two parts: the first one consist of ```mx-1``` chunks with the length equals to ```n+1```; the second part consist of ```x``` tasks.\\n\\n![image](https://assets.leetcode.com/users/images/e0c39a44-a2ab-45d1-a533-55e7421a0916_1596037085.6115298.png)\\n\\nThen we use greedy when filling in the idle times. We put the remaining tasks sequentially to the chunks and evenly filled in idle times.\\n\\n![image](https://assets.leetcode.com/users/images/b98e8b8d-f120-4b86-a664-7250de7a08f4_1596037874.2295947.png)\\n\\nIn this case, it\\u2019s easy to find out that the total time is ```(mx-1)*(n+1)+x```. This is actually the lower bound to process these tasks: when ```n``` gets really large, we have to hold this much time to satisfy that there are ```n``` timeslots between two same tasks.\\n\\n![image](https://assets.leetcode.com/users/images/5bd0ab10-3cb9-47e8-9ce0-2ef0ba1f8165_1596037121.9477017.png)\\n\\n\\nWhen ```n``` is small and after taking all idle times, however, we can safely place remaining tasks into the chunks, and the chunk size expands. In this case, there\\u2019s no idle time and the answer is simply the number of tasks.\\n\\n![image](https://assets.leetcode.com/users/images/1c83a001-27df-4250-99d3-85e45146ad84_1596037134.3476145.png)\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```tasks=[A,A,A,B,B,B,C,C,D,D],n=3```\n```mx```\n```mx=3```\n```x```\n```mx```\n```mx-1```\n```n+1```\n```x```\n```(mx-1)*(n+1)+x```\n```n```\n```n```\n```n```",
                "codeTag": "Unknown"
            },
            {
                "id": 401103,
                "title": "simple-javascript-idle-slots-1-pass-with-detailed-description",
                "content": "Concepts:  The result value can be calculated by determining the task(s) that occur(s) most often.  First let\\'s consider the case where there is just 1 task that occurs most often, in this case, \\'B\\'\\n\\n**Case 1: [A, B, B, C] n=2**\\nThe shortest solution would be `[B, A, C, B]`\\nNotice how the solution isn\\'t something like `[A, B, C, _, B]`.  We\\'ve spaced out the most occuring task (B) as wide as possible in the array, by having it be at the beginning and end.\\n\\n**Case 2: [A, B, B, C, C] n = 2**\\nConsider this, where there are multiple tasks that occur most often (B and C). The solution is essentially the same as Case 1, but with both of our max occuring tasks (B, C) spread out as much as possible, at the beginning and end, with the A in the middle.\\nShortest solution: `[B, C, A, B, C]`\\n\\n**Case 3: [A, B, C, C, C] n=2**\\nIf we consider the case where the number of occurrences for the max tasks is 3, we can see that a pattern shows itself.\\nShortest solution: `[C, A, _, C, B, _, C]`\\nC will always have 2 spaces between it, and we try to fill it in with the other tasks.  From this, we can see that the solution is a multiple of the max number of occurences - 1.\\n\\n*What if n = 3?*\\n\\n**Case 4: [A, B, B, C] n = 3**\\nFor the first example `[A, B, B, C]`, we\\'ll do the same as before by spreading out the most occurring task, but in order to satisfy the n=3 spacing, we will have to put 1 space somewhere in between (it doesn\\'t matter where).  \\nSolution => `[B, A, C, _, B]`\\n\\nWe can start to see a pattern here, and thus, we can create a formula to determine the answer!\\n\\nin short, the formula is...\\n`resultCount = (maxOccurrences - 1) * (n + 1) + (numMaxTasks);`\\n\\nLet\\'s break this down...\\n\\n`maxOccurences - 1`\\nAs seen in case 3, we know that we need to multiply times maxOccurences.  We must subtract 1 because we dont need to have any empty spaces or filling *after* the last occurence, at the end.\\n\\n`(n + 1)`\\nWe need to multiply times n+1 because there will always be n spaces *in between*, which when multiplying, would not be including the actual task if we were to not add 1.\\n\\n`+maxNumTasks`\\nThis is to consider the case where there is more than 1 task that needs to be appended at the end, such as in Case 2.\\n\\n**Edge cases**\\nIt\\'s possible that there is more than enough \"filler\" tasks to complete.\\nConsider `[A, B, C, C, D, E, F, G]` where n = 2;\\n\\nUsing our formula, our answer would be 4.  Clearly this isn\\'t correct because there are more than 4 tasks in the starting array!\\nThus, we can just return the length of the initial array.\\n\\n**Solution**\\n```\\n/**\\n * @param {array[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nvar leastInterval = function(tasks, n) {\\n  // the map will be our tracking mechanism\\n  let m = new Map();\\n  \\n  // the max occurrences\\n  let maxVal = 0;\\n  \\n  // the number of tasks that has the max occurrences\\n  let maxValCount = 0;\\n  \\n  for(let k of tasks){\\n    let tVal = m.has(k) ? m.get(k)+1: 1;\\n    m.set(k, tVal);\\n\\t// set our maxVal and number of maxVal tasks only if we have a new max\\n    if(tVal > maxVal){\\n      maxVal = tVal;\\n      maxValCount = 1;\\n\\t// otherwise, increment number of maxVal tasks\\n    } else if(tVal === maxVal){\\n      maxValCount++;\\n    }\\n  }\\n  // our formula, handle the edge case\\n  return Math.max(tasks.length, (maxVal - 1) * (n + 1) + maxValCount);\\n};\\n```\\n\\nFeedback welcome, I probably didn\\'t consider *something* :D",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {array[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nvar leastInterval = function(tasks, n) {\\n  // the map will be our tracking mechanism\\n  let m = new Map();\\n  \\n  // the max occurrences\\n  let maxVal = 0;\\n  \\n  // the number of tasks that has the max occurrences\\n  let maxValCount = 0;\\n  \\n  for(let k of tasks){\\n    let tVal = m.has(k) ? m.get(k)+1: 1;\\n    m.set(k, tVal);\\n\\t// set our maxVal and number of maxVal tasks only if we have a new max\\n    if(tVal > maxVal){\\n      maxVal = tVal;\\n      maxValCount = 1;\\n\\t// otherwise, increment number of maxVal tasks\\n    } else if(tVal === maxVal){\\n      maxValCount++;\\n    }\\n  }\\n  // our formula, handle the edge case\\n  return Math.max(tasks.length, (maxVal - 1) * (n + 1) + maxValCount);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1455348,
                "title": "c-simple-and-easy-6-line-solution-with-detailed-explanation-o-n-o-1",
                "content": "**Idea:**\\n* We store the frequencies of the same tasks in the  vector `freq`.\\n* Now, we know that the task that we have the most, we\\'ll need at least n units between each one, so we\\'ll need at least `(max_count-1) * (n+1)` units of time. \\n(`max_count-1` is because we need the n between tasks, so the last one doesn\\'t need another n, and `n_1` is because we need another unit for the task iitself).\\n* Next, what if we have more than one task with `max_count` frequency? We need one extra unit at the end for it. (And also for the original task, we didn\\'t count the last one, right?) so we iterate through the `freq` vector, and every time we see a task that has `max_count`, we increment `res`.\\n* We return the maximum between `res` and `tasks.size()` because we might have more tasks than the units we need for `max_count`.\\n\\n**Time Complexity:** O(n)\\n**Space Complexity:** O(1) (The vector  is constant space - 26)\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> freq(26, 0);\\n        for (auto ch : tasks) freq[ch - \\'A\\']++;\\n        \\n        int max_count = *max_element(freq.begin(), freq.end());\\n        \\n        int res = (max_count-1) * (n+1);\\n        for (auto f : freq) if (f == max_count) res++;\\n        return max(res, (int)tasks.size());\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> freq(26, 0);\\n        for (auto ch : tasks) freq[ch - \\'A\\']++;\\n        \\n        int max_count = *max_element(freq.begin(), freq.end());\\n        \\n        int res = (max_count-1) * (n+1);\\n        for (auto f : freq) if (f == max_count) res++;\\n        return max(res, (int)tasks.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 621839,
                "title": "easist-java-solution-beats-99-with-explanation-12-lines",
                "content": "```\\npublic int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        \\n        for (char c: tasks){\\n            count[c-\\'A\\']++;\\n            max = Math.max(count[c-\\'A\\'], max);\\n        }\\n        \\n        for (int i: count){\\n            if (i == max)\\n                maxCount++;\\n        }\\n        \\n        return Math.max(tasks.length, (max-1) * (n+1) + maxCount);\\n    }\\n```\\nThe key idea is that the interval is bounded by the tasks with most appearances. We need to fill the idles with other tasks. \\nHowever, in fact we do not need to care about the other tasks. If all the idles are filled, means the lengths is `tasks.length` is the result, if the idles are not filled, we only need to know the task with most count (`max`), then get the window size (`n+1`), add the number of tasks with most count.",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        \\n        for (char c: tasks){\\n            count[c-\\'A\\']++;\\n            max = Math.max(count[c-\\'A\\'], max);\\n        }\\n        \\n        for (int i: count){\\n            if (i == max)\\n                maxCount++;\\n        }\\n        \\n        return Math.max(tasks.length, (max-1) * (n+1) + maxCount);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 176214,
                "title": "java-solution-without-re-modify-any-existing-variables-in-magic-if-branch-o-n-time-with-o-1-spac",
                "content": "I saw a lot of answers that sign a value of  a variable, and in the if branch, they modify the value of existing variables. This is hard to understand! Why I have to change the value of the variable in a \"if\" branch?\\n\\nActually, I can\\'t 100% understand their thinking. And I think their way is too complex. Therefore I just share my easy understanding answer. Probably can\\'t get more vote than them, just hope you get some idea of this question.\\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();//char array is better, I just want to make this answer easier to read.\\n        for (char c : tasks) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        int max = 0;//Most frequent task.\\n        for (int val : map.values()) {\\n            max = Math.max(val, max);\\n        }\\n        \\n        int p = 0;//how many tasks that has the same frequency as the top frequent task.(include itself)\\n        for (int val : map.values()) {\\n            if (val == max) {\\n                p++;\\n            }\\n        }\\n            \\n        int total = (max - 1) * (n + 1) + p;//Totally intervals to fill out all empty space.\\n        \\n        if (total < tasks.length) {\\n            return tasks.length; //After I fill out all empty space, there are still some tasks that I have not use them.\\n        } else {\\n            return total; //Task is not enough, I used some idles.\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();//char array is better, I just want to make this answer easier to read.\\n        for (char c : tasks) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        int max = 0;//Most frequent task.\\n        for (int val : map.values()) {\\n            max = Math.max(val, max);\\n        }\\n        \\n        int p = 0;//how many tasks that has the same frequency as the top frequent task.(include itself)\\n        for (int val : map.values()) {\\n            if (val == max) {\\n                p++;\\n            }\\n        }\\n            \\n        int total = (max - 1) * (n + 1) + p;//Totally intervals to fill out all empty space.\\n        \\n        if (total < tasks.length) {\\n            return tasks.length; //After I fill out all empty space, there are still some tasks that I have not use them.\\n        } else {\\n            return total; //Task is not enough, I used some idles.\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 476819,
                "title": "python-o-n-sol-based-on-dictionary-95-with-explanation",
                "content": "Python O( n ) sol. based on dictionary\\n\\n```\\n\\'\\'\\'\\n\\nExample explanation:\\n\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nProcedure:\\n\\n1.\\n# Build a dictionary for tasks\\n# key   : task\\n# value : occurrence of task\\n\\nmax_occ = 3\\n\\nnumber_of_taks_of_max_occ = 2 with {\\'A\\', \\'B\\'}\\n\\n2.\\n#Make (max_occ - 1) = 2 groups, groups size = n+1 = 3\\n#Fill each group with uniform iterleaving as even as possible\\n\\ngroup = \\'_ _ _\\' with size = 3\\n\\n=> make 2 groups with uniform iterleaving \\n\\nA B _ A B _\\n\\n3.\\n# At last, execute for the last time of max_occ jobs\\n\\nA B _ A B _ A B\\n\\n\\nlength of task scheduling with cooling = 8\\n\\n\\'\\'\\'\\n\\n\\nfrom collections import Counter\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        if n == 0:\\n            # Quick response for special case on n = 0\\n            # no requirement for cooling, just do those jobs in original order\\n            return len(tasks)\\n        \\n        \\n        # key   : task\\n        # value : occurrence of tasks \\n        task_occ_dict = Counter( tasks )\\n        \\n        # max occurrence among tasks\\n        max_occ = max( task_occ_dict.values() )\\n        \\n        # number of tasks with max occurrence\\n        number_of_taks_of_max_occ = sum( ( 1 for task, occ in task_occ_dict.items() if occ == max_occ ) )\\n        \\n        # Make (max_occ-1) groups, each groups size is (n+1) to meet the requirement of cooling\\n        # Fill each group with uniform iterleaving as even as possible\\n        \\n        # At last, execute for the last time of max_occ jobs\\n        intervl_for_schedule = ( max_occ-1 )*( n+1 ) + number_of_taks_of_max_occ\\n        \\n        # Minimal length is original length on best case.\\n        # Otherswise, it need some cooling intervals in the middle\\n        return max( len(tasks), intervl_for_schedule)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n\\'\\'\\'\\n\\nExample explanation:\\n\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nProcedure:\\n\\n1.\\n# Build a dictionary for tasks\\n# key   : task\\n# value : occurrence of task\\n\\nmax_occ = 3\\n\\nnumber_of_taks_of_max_occ = 2 with {\\'A\\', \\'B\\'}\\n\\n2.\\n#Make (max_occ - 1) = 2 groups, groups size = n+1 = 3\\n#Fill each group with uniform iterleaving as even as possible\\n\\ngroup = \\'_ _ _\\' with size = 3\\n\\n=> make 2 groups with uniform iterleaving \\n\\nA B _ A B _\\n\\n3.\\n# At last, execute for the last time of max_occ jobs\\n\\nA B _ A B _ A B\\n\\n\\nlength of task scheduling with cooling = 8\\n\\n\\'\\'\\'\\n\\n\\nfrom collections import Counter\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        if n == 0:\\n            # Quick response for special case on n = 0\\n            # no requirement for cooling, just do those jobs in original order\\n            return len(tasks)\\n        \\n        \\n        # key   : task\\n        # value : occurrence of tasks \\n        task_occ_dict = Counter( tasks )\\n        \\n        # max occurrence among tasks\\n        max_occ = max( task_occ_dict.values() )\\n        \\n        # number of tasks with max occurrence\\n        number_of_taks_of_max_occ = sum( ( 1 for task, occ in task_occ_dict.items() if occ == max_occ ) )\\n        \\n        # Make (max_occ-1) groups, each groups size is (n+1) to meet the requirement of cooling\\n        # Fill each group with uniform iterleaving as even as possible\\n        \\n        # At last, execute for the last time of max_occ jobs\\n        intervl_for_schedule = ( max_occ-1 )*( n+1 ) + number_of_taks_of_max_occ\\n        \\n        # Minimal length is original length on best case.\\n        # Otherswise, it need some cooling intervals in the middle\\n        return max( len(tasks), intervl_for_schedule)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 207948,
                "title": "python-solution",
                "content": "First use a dictionary `dic` to count the number of appearances of each letter, and keep track of a most frequent element `e` and its corresponding frequency `maxfreq`. We also use a variable `count` to record the number of elements with frequency `maxfreq`. Then we schedule `e` first by putting them distance `n` apart. E.g., for `tasks = [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'C\\'], n = 2`, we have `e = B`, `maxfreq = 3`, and the schedule is `B -> [ ] -> [ ] -> B -> [ ] -> [ ] -> B -> [ ] -> [ ] `. Next, we put the rest of the tasks into the empty slots. There are two possible cases:\\n\\nCase I: The number of different tasks is smaller than or equal to `n+1`, i.e., `len(dic) <= n+1`, then not all empty slots can be filled. E.g., for `tasks = [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'C\\'], n = 2`, after filling in all the tasks besides `B`, the schedule looks like `B -> [A] -> [C] -> B -> [A] -> [C] -> B -> [A] -> [ ] `. In this case, the least number of intervals is `(n+1)*(maxfreq-1)+count`.\\n\\nCase II: The number of different tasks is larger than `n+1`, i.e., `len(dic) > n+1`, then either not all empty slots can be filled as in Case I, or the empty slots are completely filled (and there may not be enough slots). Consider the following two scenarios: \\n1. `tasks = [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'D\\'], n = 2`, in which case the filled schedule looks like `B -> [A] -> [C] -> B -> [A] -> [D] -> B -> [A] -> [ ] `, and the least number of intervals is `(n+1)*(maxfreq-1)+count`;\\n2. `tasks = [\\'A\\',\\'A\\',\\'A\\',\\'B\\',\\'B\\',\\'B\\',\\'C\\',\\'C\\',\\'D\\',\\'D\\',\\'E\\'], n = 2`. In this case, we first fill up all empty slots: `B -> [A] -> [C] -> B -> [A] -> [C] -> B -> [A] -> [D] `, after which we still have two tasks left, a `\\'D\\'`, and an `\\'E\\'`. A generic way to handle these cases is to insert these tasks into the filled schedule as follows: `B -> [A] -> [C] -> D -> B -> [A] -> [C] -> E -> B -> [A] -> [D] `, i.e., we iteratively insert each of the remaining tasks into sublists led by the most frequent element (in this example, `\\'B\\'`), until there are no remaining tasks left. Because all remaining elements of the same type appear with frequency less than or equal to `maxfreq`, after these insertions, it\\'s guaranteed that tasks of the same type are at least distance `n` apart. The least number of intervals is `len(tasks)`.\\n\\nTherefore, in Case II, the least number of intervals is `max((n+1)*(maxfreq-1)+count, len(tasks))`.\\n\\nThe time complexity: O(`len(tasks)`), and the space complexity: O(26) = O(1).\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        maxFreq = 0\\n        max_count = 0\\n        dic = {}\\n        for task in tasks:\\n            if task in dic:\\n                dic[task] += 1\\n            else:\\n                dic[task] = 1\\n            if dic[task] > maxFreq:\\n                maxFreq = dic[task]\\n                max_count = 1\\n            elif dic[task] == maxFreq:\\n                max_count += 1\\n        \\n        if len(dic) <= n+1:\\n            return (maxFreq-1) * (n+1) + max_count\\n        else:\\n            return max((maxFreq-1) * (n+1) + max_count, len(tasks))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        maxFreq = 0\\n        max_count = 0\\n        dic = {}\\n        for task in tasks:\\n            if task in dic:\\n                dic[task] += 1\\n            else:\\n                dic[task] = 1\\n            if dic[task] > maxFreq:\\n                maxFreq = dic[task]\\n                max_count = 1\\n            elif dic[task] == maxFreq:\\n                max_count += 1\\n        \\n        if len(dic) <= n+1:\\n            return (maxFreq-1) * (n+1) + max_count\\n        else:\\n            return max((maxFreq-1) * (n+1) + max_count, len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104531,
                "title": "java-solution-priorityqueue-cooldowntable",
                "content": "A brief summary:\\n- A valid task should be either in the `waitingQueue` or on the `tasksTable`\\n- At the moment `time`, tasksTable removes the frozen task at `time-1-n`,  and puts it back to the `waitingQueue` \\n- At the end of each cycle, if a task is still valid, put it in the `tasksTable`\\n\\n> When we say a task a valid, we mean there are remaining tasks of the same type waiting to be fulfilled. For example, task A is valid if there are 2 more task A waiting to be fulfilled.\\n\\n```java\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n \\n        Map<Character, Integer> tasksTable = new HashMap<>();\\n        for (char c : tasks) tasksTable.put(c, tasksTable.getOrDefault(c, 0)+1);\\n\\n        // A task should be either in a waiting queue or on the cooldown table\\n        PriorityQueue<Character> waitingQueue = \\n                new PriorityQueue<>((c1, c2)->tasksTable.get(c2)-tasksTable.get(c1));\\n        for (Character c : tasksTable.keySet()) waitingQueue.add(c);\\n\\n        // A task should be either in a waiting queue or on the cooldown table\\n        Map<Integer, Character> coolDownTable = new HashMap<>();\\n\\n        int time = 0;\\n        while(!waitingQueue.isEmpty() || !coolDownTable.isEmpty()) {\\n            // Cool down and release the defrost task if any\\n            int releaseTime = time - n - 1;\\n            if (coolDownTable.containsKey(releaseTime)) {\\n                waitingQueue.add(coolDownTable.remove(releaseTime));\\n            }\\n\\n            if (!waitingQueue.isEmpty()) {\\n                char task = waitingQueue.poll();\\n\\n                int remaining = tasksTable.get(task) - 1;\\n                tasksTable.put(task, remaining);\\n\\n                if (remaining != 0) {\\n                    coolDownTable.put(time, task);\\n                }\\n            }\\n\\n            ++time;\\n        }\\n\\n        return time;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n \\n        Map<Character, Integer> tasksTable = new HashMap<>();\\n        for (char c : tasks) tasksTable.put(c, tasksTable.getOrDefault(c, 0)+1);\\n\\n        // A task should be either in a waiting queue or on the cooldown table\\n        PriorityQueue<Character> waitingQueue = \\n                new PriorityQueue<>((c1, c2)->tasksTable.get(c2)-tasksTable.get(c1));\\n        for (Character c : tasksTable.keySet()) waitingQueue.add(c);\\n\\n        // A task should be either in a waiting queue or on the cooldown table\\n        Map<Integer, Character> coolDownTable = new HashMap<>();\\n\\n        int time = 0;\\n        while(!waitingQueue.isEmpty() || !coolDownTable.isEmpty()) {\\n            // Cool down and release the defrost task if any\\n            int releaseTime = time - n - 1;\\n            if (coolDownTable.containsKey(releaseTime)) {\\n                waitingQueue.add(coolDownTable.remove(releaseTime));\\n            }\\n\\n            if (!waitingQueue.isEmpty()) {\\n                char task = waitingQueue.poll();\\n\\n                int remaining = tasksTable.get(task) - 1;\\n                tasksTable.put(task, remaining);\\n\\n                if (remaining != 0) {\\n                    coolDownTable.put(time, task);\\n                }\\n            }\\n\\n            ++time;\\n        }\\n\\n        return time;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104494,
                "title": "java-greedy-algorithm-with-correctness-proof-using-priorityqueue-and-waiting-list",
                "content": "The idea of greedy algorithm is at each time point we choose the task with most amount to be done and is also at least n apart from the last execution of the same task. Below is a proof of the correctness:\\n\\nAt some time, task A has the most remaining amount to be done and A is also at least n apart from its most recent execution. However, suppose the optimal solution doesn't choose A as the first task but rather chooses B. Assume we have x task A remain and y task B remain, we know x >= y. \\nAlso assume in the optimal solution those m task A are done at a series of time points of a1, a2 ... ax, and n task B are done at a series of time points of b1, b2 ... by and we know that b1 <  a1.  \\nFurther, we assume k is the largest number that for all i <= k, bi < ai. Now if we swap a1 and b1, a2 and b2 ... ak and bk, it will still be a valid solution since the separation between ak and ak+1 (if exists) becomes even larger. As to bk, it's the previous ak and bk+1 > ak+1 > ak(prev) + n = bk(now) + n.\\n\\nSo we proved that no solution will better than schedule A first.\\n\\nBelow is the code, I used priority queue to keep track of task with highest remaining amount. And a job can only enter the priority queue after n time points elapse from the previous execution of the same task which is achieved by a waiting list.\\n```\\n    public static int leastInterval(char[] tasks, int n) {\\n        if(n == 0) return tasks.length;\\n        int[] count = new int[26];\\n        for (int t : tasks) count[t-'A']++;\\n        PriorityQueue<int[]> maxheap = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] o1, int[] o2) {\\n                return o2[1] - o1[1];\\n            }\\n        });\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] > 0) maxheap.add(new int[]{i, count[i]});\\n        }\\n        LinkedList<int[]> waitlist = new LinkedList<>();\\n        int t = 0, waitCount = 0;\\n        while (!maxheap.isEmpty() || waitCount > 0) {\\n            t++;\\n            int[] top = null;\\n            if (!maxheap.isEmpty()) top = maxheap.poll();\\n            if (top == null || --top[1] == 0) {\\n                waitlist.add(null);\\n            } else {\\n                waitlist.add(top);\\n                waitCount++;\\n            }\\n            if (waitlist.size() == n+1) {\\n                int[] job = waitlist.poll();\\n                if (job != null) {\\n                    maxheap.add(waitlist.poll());\\n                    waitCount--;\\n                }\\n            }\\n        }\\n        return t;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public static int leastInterval(char[] tasks, int n) {\\n        if(n == 0) return tasks.length;\\n        int[] count = new int[26];\\n        for (int t : tasks) count[t-'A']++;\\n        PriorityQueue<int[]> maxheap = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] o1, int[] o2) {\\n                return o2[1] - o1[1];\\n            }\\n        });\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] > 0) maxheap.add(new int[]{i, count[i]});\\n        }\\n        LinkedList<int[]> waitlist = new LinkedList<>();\\n        int t = 0, waitCount = 0;\\n        while (!maxheap.isEmpty() || waitCount > 0) {\\n            t++;\\n            int[] top = null;\\n            if (!maxheap.isEmpty()) top = maxheap.poll();\\n            if (top == null || --top[1] == 0) {\\n                waitlist.add(null);\\n            } else {\\n                waitlist.add(top);\\n                waitCount++;\\n            }\\n            if (waitlist.size() == n+1) {\\n                int[] job = waitlist.poll();\\n                if (job != null) {\\n                    maxheap.add(waitlist.poll());\\n                    waitCount--;\\n                }\\n            }\\n        }\\n        return t;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 373231,
                "title": "java-easy-to-understand-o-nlog-m-time-o-m-space-solution-with-explanation",
                "content": "The idea here is to greedily select the most repeated task available to schedule every time. Inorder to find the most repeated task, we use a priority queue to get the max repeated task efficiently. We have to make sure only tasks available for schedule are in the priority queue. For this, we add any scheduled task to a separate cool down queue. When top of this queue is available to schedule (i.e n steps have passed since it was last used) we add it back to priority queue.\\n\\nTime complexity is O(nlog(m)) with n being the number of tasks given to schedule and m being the number of unique tasks. The polling step in PriorityQueue is O(log(m)).\\n\\nSpace complexity is O(m) since the priority queue and cool down queue can at max have m items.\\n```\\nclass Solution {\\n    class Task {\\n        int freq, lastUsed = -1;\\n        public Task(int f) { freq = f; }\\n    }\\n    \\n    // Overall we always want to schedule the most repeated task that is available to schedule every time.\\n    // This greedy approach works because picking any other task will result in non optimal solution.\\n    public int leastInterval(char[] tasks, int n) {\\n        // if n == 0 there will be no idle periods, so return length of tasks\\n        if(n == 0) return tasks.length;\\n        \\n        Map<Character, Task> map = new HashMap<>();\\n        for(char c: tasks) {\\n            map.putIfAbsent(c, new Task(0));\\n            map.get(c).freq++;\\n        }\\n        \\n        PriorityQueue<Task> pq = new PriorityQueue<>((x, y) -> y.freq - x.freq);\\n        \\n        // Use a queue to add tasks that were scheduled at the end\\n        // Which means tasks that are at the top of the cooling are the ones first to go out of cooling and become available for scheduling.\\n        Queue<Task> cooling = new LinkedList<>();\\n        \\n        pq.addAll(map.values());\\n        int count = 0;\\n        \\n        while(!pq.isEmpty() || !cooling.isEmpty()) {\\n            // if no tasks are available to schedule at current time, go idle until the first cooling task becomes available\\n            if(pq.isEmpty()) count = cooling.peek().lastUsed + n + 1;\\n            \\n            // Add any tasks in cooling that just became available for scheduling\\n            while(!cooling.isEmpty() && count > cooling.peek().lastUsed + n) {\\n                pq.add(cooling.poll());\\n            }\\n            \\n            // Schedule the most frequent occurring task by polling priority queue.\\n            Task t = pq.poll();\\n            t.lastUsed = count++;\\n            t.freq--;\\n            \\n            // Add the task back into cooling if there are more instances of it to schedule.\\n            if(t.freq != 0) cooling.add(t);\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Queue",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    class Task {\\n        int freq, lastUsed = -1;\\n        public Task(int f) { freq = f; }\\n    }\\n    \\n    // Overall we always want to schedule the most repeated task that is available to schedule every time.\\n    // This greedy approach works because picking any other task will result in non optimal solution.\\n    public int leastInterval(char[] tasks, int n) {\\n        // if n == 0 there will be no idle periods, so return length of tasks\\n        if(n == 0) return tasks.length;\\n        \\n        Map<Character, Task> map = new HashMap<>();\\n        for(char c: tasks) {\\n            map.putIfAbsent(c, new Task(0));\\n            map.get(c).freq++;\\n        }\\n        \\n        PriorityQueue<Task> pq = new PriorityQueue<>((x, y) -> y.freq - x.freq);\\n        \\n        // Use a queue to add tasks that were scheduled at the end\\n        // Which means tasks that are at the top of the cooling are the ones first to go out of cooling and become available for scheduling.\\n        Queue<Task> cooling = new LinkedList<>();\\n        \\n        pq.addAll(map.values());\\n        int count = 0;\\n        \\n        while(!pq.isEmpty() || !cooling.isEmpty()) {\\n            // if no tasks are available to schedule at current time, go idle until the first cooling task becomes available\\n            if(pq.isEmpty()) count = cooling.peek().lastUsed + n + 1;\\n            \\n            // Add any tasks in cooling that just became available for scheduling\\n            while(!cooling.isEmpty() && count > cooling.peek().lastUsed + n) {\\n                pq.add(cooling.poll());\\n            }\\n            \\n            // Schedule the most frequent occurring task by polling priority queue.\\n            Task t = pq.poll();\\n            t.lastUsed = count++;\\n            t.freq--;\\n            \\n            // Add the task back into cooling if there are more instances of it to schedule.\\n            if(t.freq != 0) cooling.add(t);\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104499,
                "title": "python-o-n-time-o-1-space",
                "content": "First solution is O(nlogn) which uses a heap to place most frequent elements in first priority.\\nSecond solution is O(n): the number of the most frequent tasks will determine the length and tied tasks will exist in the last cycle.\\n```\\nclass Solution(object):\\n    \\n    # O(nlogn) greedy to place most popular and distinct tasks first\\n    # Actually, I don't think this is greedy\\n    # We always place different tasks in a cycle which will minimize steps\\n    # If not different tasks can be placed in a cycle, place an `idle`.\\n    \\n    def _leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        n += 1\\n        ans = 0\\n        d = collections.Counter(tasks)\\n        heap = [-c for c in d.values()]\\n        heapq.heapify(heap)\\n        while heap:\\n            stack = []\\n            cnt = 0\\n            for _ in range(n):\\n                if heap:\\n                    c = heapq.heappop(heap)\\n                    cnt += 1\\n                    if c < -1:\\n                        stack.append(c + 1)\\n            for item in stack:\\n                heapq.heappush(heap, item)\\n            ans += heap and n or cnt # == if heap then n else cnt\\n        return ans\\n        \\n    \\n    # O(n) # of the most frequent tasks, say longest, will determine the legnth\\n    # to void counting idle intervals, we count (longest - 1) * (n + 1)\\n    # then count how many will in the last cycle which means finding ties\\n    # if counted number is less than # of tasks which means \\n    # less frequent tasks can be always placed in such cycle\\n    # and it won't cause any conflicts with requirement since even most frequent can be settle\\n    # finally, return max(# of task, total counted number)\\n    \\n    def leastInterval(self, tasks, n):\\n        d = collections.Counter(tasks)\\n        counts = d.values()\\n        longest = max(counts)\\n        ans = (longest - 1) * (n + 1)\\n        for count in counts:\\n            ans += count == longest and 1 or 0\\n        return max(len(tasks), ans)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    \\n    # O(nlogn) greedy to place most popular and distinct tasks first\\n    # Actually, I don't think this is greedy\\n    # We always place different tasks in a cycle which will minimize steps\\n    # If not different tasks can be placed in a cycle, place an `idle`.\\n    \\n    def _leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        n += 1\\n        ans = 0\\n        d = collections.Counter(tasks)\\n        heap = [-c for c in d.values()]\\n        heapq.heapify(heap)\\n        while heap:\\n            stack = []\\n            cnt = 0\\n            for _ in range(n):\\n                if heap:\\n                    c = heapq.heappop(heap)\\n                    cnt += 1\\n                    if c < -1:\\n                        stack.append(c + 1)\\n            for item in stack:\\n                heapq.heappush(heap, item)\\n            ans += heap and n or cnt # == if heap then n else cnt\\n        return ans\\n        \\n    \\n    # O(n) # of the most frequent tasks, say longest, will determine the legnth\\n    # to void counting idle intervals, we count (longest - 1) * (n + 1)\\n    # then count how many will in the last cycle which means finding ties\\n    # if counted number is less than # of tasks which means \\n    # less frequent tasks can be always placed in such cycle\\n    # and it won't cause any conflicts with requirement since even most frequent can be settle\\n    # finally, return max(# of task, total counted number)\\n    \\n    def leastInterval(self, tasks, n):\\n        d = collections.Counter(tasks)\\n        counts = d.values()\\n        longest = max(counts)\\n        ans = (longest - 1) * (n + 1)\\n        for count in counts:\\n            ans += count == longest and 1 or 0\\n        return max(len(tasks), ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 824421,
                "title": "a-math-proof",
                "content": "This is a math proof for the equation\\n`len(optimal schedule) = max{t, (f-1)*(n+1)+m}`,\\nwhere `t` is the total number of tasks, `f` is the frequency count of the most frequent task type(s), `m` is the number of the most frequent task type(s), and `n` is the cool down time. For example, in case of 5A, 5B, 4C, 3D, 1E, 1F, `t=5+5+4+3+1+1=19`, `f=5`, `m=2`.\\n\\nObviously, the length of any optimal schedule is lower bounded by the total number of tasks `t`, since each task needs a slot. Also,  it is lower bounded by `(f-1)*(n+1)+m`. Why? Any optimal schedule of tasks (e.g., 5A, 5B, 4C, 3D, 1E, 1F) is no shorter than any optimal schedule of most frequent tasks only (e.g., 5A, 5B), which is of length `(f-1)*(n+1)+m`. Putting two observations together yields\\n`len(optimal schedule) >= max{t, (f-1)*(n+1)+m}`.\\n\\nThe idea of proof is to build a task schedule such that\\n`len(built schedule) = max{t, (f-1)*(n+1)+m}`.\\nThen a sandwich argument\\n`len(optimal schedule) <= len(built schedule)  = max{t, (f-1)*(n+1)+m} <= len(optimal schedule)`\\nconcludes that\\n`len(optimal schedule) = len(built schedule)  = max{t, (f-1)*(n+1)+m}`.\\n\\nHow to build such a schedule? Consider the following method.\\n* Get the frequency counts of each task type, say 5A, 5B, 4C, 3D, 1E, 1F.\\n* Find the number of the most frequent task types and their counts, say `f = 5` and `m = 2`.\\n* Divide `f * m = 10` most frequent tasks A, B into `f = 5` groups, each group consisting of `m = 2` distinct tasks.\\n\\t\\tgroup 1: A B\\n\\t\\tgroup 2: A B\\n\\t\\tgroup 3: A B\\n\\t\\tgroup 4: A B\\n\\t\\tgroup 5: A B\\n* Assign the remaining tasks 4C, 3D, 1E, 1F to groups 1-4 in a cyclic order. The numbers in the paratheses indicate the order to assign these tasks. None of theses tasks is assigned to the last group.\\n\\t\\tgroup 1: A B C(1) D(5) F(9)\\n\\t\\tgroup 2: A B C(2) D(6)\\n\\t\\tgroup 3: A B C(3) D(7)\\n\\t\\tgroup 4: A B C(4) E(8)\\n\\t\\tgroup 5: A B\\n* Pad idles such that all groups but the last are of size `>= n+1`. Concatenate all groups one by one to form a schedule.\\n\\t* If `n = 2` or `n = 3` then there is no need to pad any idle, as all groups but the last are of size `>= n+1`. The output schedule would be\\nA B C(1) D(5) F(9) A B C(2) D(6) A B C(3) D(7) A B C(4) E(8) A B\\n\\t* If `n = 4` then pad idles such that all groups but the last are of size `n+1 = 5`.\\n\\t\\tgroup 1: A B C(1) D(5) F(9)\\n\\t\\tgroup 2: A B C(2) D(6) Idle\\n\\t\\tgroup 3: A B C(3) D(7) Idle\\n\\t\\tgroup 4: A B C(4) E(8) Idle\\n\\t\\tgroup 5: A B\\n\\t\\tThe ouput schedule would be \\n\\t\\tA B C(1) D(5) F(9); A B C(2) D(6) Idle; A B C(3) D(7) Idle; A B C(4) E(8) Idle; A B\\n\\t* \\tIf `n = 5` then pad idles such that all groups but the last are of size `n+1 = 6`.\\n\\t\\tgroup 1: A B C(1) D(5) F(9) Idle\\n\\t\\tgroup 2: A B C(2) D(6) Idle  Idle\\n\\t\\tgroup 3: A B C(3) D(7) Idle  Idle\\n\\t\\tgroup 4: A B C(4) E(8) Idle  Idle\\n\\t\\tgroup 5: A B\\n\\t\\tThe output schedule would be\\n\\t\\tA B C(1) D(5) F(9) Idle; A B C(2) D(6) Idle Idle; A B C(3) D(7) Idle Idle; A B C(4) E(8) Idle Idle; A B\\n\\nWhy this method obtain a feasible schedule? The tasks of the same type are separated by `>= n` slots, which are enough for cool-downs.\\n\\nWhy this method obtain an optimal schedule? Let us compute the length of the schedule built by the method.\\n* If `1.0*(t-m)/(f-1) < n + 1` then we need to pad some idles to groups. In this case, all groups but the last are of length `n+1`, therefore `len(built schedule) = (f-1)*(n+1) + m`. Note that in the case of `f = 1`, `1.0*(t-m)/(f-1)` should be taken as `inf`.\\n* Otherwise, we don\\'t need to pad any idle, therefore `len(built schedule) = t`.\\n* Finally, we observe that `1.0*(t-m)/(f-1) < n + 1` is **equivalent** to `t < (f-1)*(n+1) + m`. Thus, combining two cases and simplifying the if-condition yields\\n`len(built schedule) = max{t, (f-1)*(n+1)+m}`.\\nQED.\\n\\n\\n\\t\\n\\n\\t\\n",
                "solutionTags": [],
                "code": "This is a math proof for the equation\\n`len(optimal schedule) = max{t, (f-1)*(n+1)+m}`,\\nwhere `t` is the total number of tasks, `f` is the frequency count of the most frequent task type(s), `m` is the number of the most frequent task type(s), and `n` is the cool down time. For example, in case of 5A, 5B, 4C, 3D, 1E, 1F, `t=5+5+4+3+1+1=19`, `f=5`, `m=2`.\\n\\nObviously, the length of any optimal schedule is lower bounded by the total number of tasks `t`, since each task needs a slot. Also,  it is lower bounded by `(f-1)*(n+1)+m`. Why? Any optimal schedule of tasks (e.g., 5A, 5B, 4C, 3D, 1E, 1F) is no shorter than any optimal schedule of most frequent tasks only (e.g., 5A, 5B), which is of length `(f-1)*(n+1)+m`. Putting two observations together yields\\n`len(optimal schedule) >= max{t, (f-1)*(n+1)+m}`.\\n\\nThe idea of proof is to build a task schedule such that\\n`len(built schedule) = max{t, (f-1)*(n+1)+m}`.\\nThen a sandwich argument\\n`len(optimal schedule) <= len(built schedule)  = max{t, (f-1)*(n+1)+m} <= len(optimal schedule)`\\nconcludes that\\n`len(optimal schedule) = len(built schedule)  = max{t, (f-1)*(n+1)+m}`.\\n\\nHow to build such a schedule? Consider the following method.\\n* Get the frequency counts of each task type, say 5A, 5B, 4C, 3D, 1E, 1F.\\n* Find the number of the most frequent task types and their counts, say `f = 5` and `m = 2`.\\n* Divide `f * m = 10` most frequent tasks A, B into `f = 5` groups, each group consisting of `m = 2` distinct tasks.\\n\\t\\tgroup 1: A B\\n\\t\\tgroup 2: A B\\n\\t\\tgroup 3: A B\\n\\t\\tgroup 4: A B\\n\\t\\tgroup 5: A B\\n* Assign the remaining tasks 4C, 3D, 1E, 1F to groups 1-4 in a cyclic order. The numbers in the paratheses indicate the order to assign these tasks. None of theses tasks is assigned to the last group.\\n\\t\\tgroup 1: A B C(1) D(5) F(9)\\n\\t\\tgroup 2: A B C(2) D(6)\\n\\t\\tgroup 3: A B C(3) D(7)\\n\\t\\tgroup 4: A B C(4) E(8)\\n\\t\\tgroup 5: A B\\n* Pad idles such that all groups but the last are of size `>= n+1`. Concatenate all groups one by one to form a schedule.\\n\\t* If `n = 2` or `n = 3` then there is no need to pad any idle, as all groups but the last are of size `>= n+1`. The output schedule would be\\nA B C(1) D(5) F(9) A B C(2) D(6) A B C(3) D(7) A B C(4) E(8) A B\\n\\t* If `n = 4` then pad idles such that all groups but the last are of size `n+1 = 5`.\\n\\t\\tgroup 1: A B C(1) D(5) F(9)\\n\\t\\tgroup 2: A B C(2) D(6) Idle\\n\\t\\tgroup 3: A B C(3) D(7) Idle\\n\\t\\tgroup 4: A B C(4) E(8) Idle\\n\\t\\tgroup 5: A B\\n\\t\\tThe ouput schedule would be \\n\\t\\tA B C(1) D(5) F(9); A B C(2) D(6) Idle; A B C(3) D(7) Idle; A B C(4) E(8) Idle; A B\\n\\t* \\tIf `n = 5` then pad idles such that all groups but the last are of size `n+1 = 6`.\\n\\t\\tgroup 1: A B C(1) D(5) F(9) Idle\\n\\t\\tgroup 2: A B C(2) D(6) Idle  Idle\\n\\t\\tgroup 3: A B C(3) D(7) Idle  Idle\\n\\t\\tgroup 4: A B C(4) E(8) Idle  Idle\\n\\t\\tgroup 5: A B\\n\\t\\tThe output schedule would be\\n\\t\\tA B C(1) D(5) F(9) Idle; A B C(2) D(6) Idle Idle; A B C(3) D(7) Idle Idle; A B C(4) E(8) Idle Idle; A B\\n\\nWhy this method obtain a feasible schedule? The tasks of the same type are separated by `>= n` slots, which are enough for cool-downs.\\n\\nWhy this method obtain an optimal schedule? Let us compute the length of the schedule built by the method.\\n* If `1.0*(t-m)/(f-1) < n + 1` then we need to pad some idles to groups. In this case, all groups but the last are of length `n+1`, therefore `len(built schedule) = (f-1)*(n+1) + m`. Note that in the case of `f = 1`, `1.0*(t-m)/(f-1)` should be taken as `inf`.\\n* Otherwise, we don\\'t need to pad any idle, therefore `len(built schedule) = t`.\\n* Finally, we observe that `1.0*(t-m)/(f-1) < n + 1` is **equivalent** to `t < (f-1)*(n+1) + m`. Thus, combining two cases and simplifying the if-condition yields\\n`len(built schedule) = max{t, (f-1)*(n+1)+m}`.\\nQED.\\n\\n\\n\\t\\n\\n\\t\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1381709,
                "title": "python-faster-than-99-2-of-solution-intution-and-detailed-explanation",
                "content": "```\\n# Suppose {A:6,B:4,C:2} n = 2 then we can fill the slot  in the matrix for clear visualization\\n\\t# At every row there will be three element since n = 2\\n\\t# So [\\n\\t#\\t\\t[ A  , B , C ],\\n\\t#\\t\\t[ A  , B , C ],\\n\\t#\\t\\t[ A , B , idle],\\n\\t#\\t\\t[ A , B , idle ],\\n\\t#\\t\\t[ A, idle , idle ],\\n\\t#       [ A , empty ,empty ]\\n\\t#    Here we can see that for first 5 row number of element is \\n\\t#     (maxfreq - 1) * ( number of element in column i.e (n + 1)\\n\\t\\n\\t#    For last row there might be all all three n + 1 element or less than that ,which depends upon \\n\\t#    frequency  of  elements in array.So we handle that case diffrently.\\n\\t\\n\\t#    For calculating number of element in last row,we can check how many character have\\n\\t\\n\\t#    max frequency which value of  last_row\\n\\t# So final answer will be \\n\\t\\t\\t\\t\\t#    ans = (number of row - 1) * ( column) + number of element in last row\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        freq = Counter(tasks)\\n        max_freq = max(freq.values())\\n        freq = list(freq.values())\\n        last_row = freq.count(max_freq)\\n        ans = (max_freq - 1) * (n + 1) + last_row\\n        return max(len(tasks),ans)\\n```\\n# TC : O(N)\\n# SC : O(1)\\n# If you found this helpful kindly upvote",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Suppose {A:6,B:4,C:2} n = 2 then we can fill the slot  in the matrix for clear visualization\\n\\t# At every row there will be three element since n = 2\\n\\t# So [\\n\\t#\\t\\t[ A  , B , C ],\\n\\t#\\t\\t[ A  , B , C ],\\n\\t#\\t\\t[ A , B , idle],\\n\\t#\\t\\t[ A , B , idle ],\\n\\t#\\t\\t[ A, idle , idle ],\\n\\t#       [ A , empty ,empty ]\\n\\t#    Here we can see that for first 5 row number of element is \\n\\t#     (maxfreq - 1) * ( number of element in column i.e (n + 1)\\n\\t\\n\\t#    For last row there might be all all three n + 1 element or less than that ,which depends upon \\n\\t#    frequency  of  elements in array.So we handle that case diffrently.\\n\\t\\n\\t#    For calculating number of element in last row,we can check how many character have\\n\\t\\n\\t#    max frequency which value of  last_row\\n\\t# So final answer will be \\n\\t\\t\\t\\t\\t#    ans = (number of row - 1) * ( column) + number of element in last row\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        freq = Counter(tasks)\\n        max_freq = max(freq.values())\\n        freq = list(freq.values())\\n        last_row = freq.count(max_freq)\\n        ans = (max_freq - 1) * (n + 1) + last_row\\n        return max(len(tasks),ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1543785,
                "title": "python-priority-queue-stack-pattern",
                "content": "This is a tipical Reorganize String problem.\\nThe solution is to simply push characters , sorted by frequacy, k times. Where k is the min legal distance between instaces of the same character. \\nthen repeat the same process again until you exhaust all the count of the unique characters in the string.\\n\\n\\nWe use a heap to pop the element with most frequacy and we don\\'t push it again to the heap (with count-1) before poping k characters so we keep it in a stack untill we push it again.\\n\\nOne more step is to deal with the case where unique characters is less than k, so you have to keep the process idel. you can consider idel \\'*\\' is a character with infinite amount and keep the same logic.\\nHere I just increment the counter after making sure there are still items in the stack (meaning we didn\\'t use all characters of the string yet)\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        time, queue, stack = 0, [(-1*count, char) for char, count in Counter(tasks).items()], []\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(n+1):\\n                if queue or stack: time += 1\\n                if queue:\\n                    count, char = heappop(queue)\\n                    if count<-1: stack.append((count+1,char))\\n                    \\n            while stack: heappush(queue, stack.pop())\\n                \\n        return time\\n```\\n__________________________________________________\\nOther problems with same pattern: \\nhttps://leetcode.com/problems/reorganize-string/\\n```\\nclass Solution:\\n    def reorganizeString(self, s):\\n        queue, stack, ans =[(-count,char) for char, count in Counter(s).items()], [], \"\"\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(2):\\n                if not queue and stack: return \"\"\\n                if queue:\\n                    count, char = heappop(queue)\\n                    ans += char\\n                    if count<-1: stack.append((count+1, char))\\n                        \\n            while stack: heappush(queue, stack.pop())\\n        \\n        return ans\\n```\\n__________________\\nhttps://leetcode.com/problems/rearrange-string-k-distance-apart/\\n```\\nclass Solution:\\n    def reorganizeString(self, s):\\n        queue, stack, ans =[(-count,char) for char, count in Counter(s).items()], [], \"\"\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(k):\\n                if not queue and stack: return \"\"\\n                if queue:\\n                    count, char = heappop(queue)\\n                    ans += char\\n                    if count<-1: stack.append((count+1, char))\\n                        \\n            while stack: heappush(queue, stack.pop())\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Stack",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        time, queue, stack = 0, [(-1*count, char) for char, count in Counter(tasks).items()], []\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(n+1):\\n                if queue or stack: time += 1\\n                if queue:\\n                    count, char = heappop(queue)\\n                    if count<-1: stack.append((count+1,char))\\n                    \\n            while stack: heappush(queue, stack.pop())\\n                \\n        return time\\n```\n```\\nclass Solution:\\n    def reorganizeString(self, s):\\n        queue, stack, ans =[(-count,char) for char, count in Counter(s).items()], [], \"\"\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(2):\\n                if not queue and stack: return \"\"\\n                if queue:\\n                    count, char = heappop(queue)\\n                    ans += char\\n                    if count<-1: stack.append((count+1, char))\\n                        \\n            while stack: heappush(queue, stack.pop())\\n        \\n        return ans\\n```\n```\\nclass Solution:\\n    def reorganizeString(self, s):\\n        queue, stack, ans =[(-count,char) for char, count in Counter(s).items()], [], \"\"\\n        heapify(queue)\\n        \\n        while queue:\\n            for _ in range(k):\\n                if not queue and stack: return \"\"\\n                if queue:\\n                    count, char = heappop(queue)\\n                    ans += char\\n                    if count<-1: stack.append((count+1, char))\\n                        \\n            while stack: heappush(queue, stack.pop())\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 104528,
                "title": "python-solution-max-heap-queue-easier-than-awice-s",
                "content": "The trick is that Python does not have a max heap queue, so we must make every number negative when we throw it into the heap.\\n\\n```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 0:\\n            return len(tasks)\\n\\n        hs = collections.defaultdict(int)\\n        for task in tasks:\\n            hs[task] += 1\\n\\n        count = 0\\n        cycle = n + 1\\n\\n        heap = []\\n\\n        for k, i in hs.iteritems():\\n            if i > 0:\\n                heapq.heappush(heap, (-i))                \\n        while heap:\\n            worktime = 0\\n            tmp = []\\n            for i in xrange(cycle):\\n                if heap:\\n                    tmp.append(heapq.heappop(heap))\\n                    worktime += 1\\n            for cnt in tmp:\\n                cnt *= -1\\n                cnt -= 1\\n                if cnt > 0:\\n                    heapq.heappush(heap, -cnt)\\n            \\n            count += cycle if len(heap) > 0 else worktime\\n\\n        return count\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 0:\\n            return len(tasks)\\n\\n        hs = collections.defaultdict(int)\\n        for task in tasks:\\n            hs[task] += 1\\n\\n        count = 0\\n        cycle = n + 1\\n\\n        heap = []\\n\\n        for k, i in hs.iteritems():\\n            if i > 0:\\n                heapq.heappush(heap, (-i))                \\n        while heap:\\n            worktime = 0\\n            tmp = []\\n            for i in xrange(cycle):\\n                if heap:\\n                    tmp.append(heapq.heappop(heap))\\n                    worktime += 1\\n            for cnt in tmp:\\n                cnt *= -1\\n                cnt -= 1\\n                if cnt > 0:\\n                    heapq.heappush(heap, -cnt)\\n            \\n            count += cycle if len(heap) > 0 else worktime\\n\\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760729,
                "title": "simple-explanation-for-optimal-formula",
                "content": "I\\'ve seen a couple of other threads which derive this formula but, hey, sometimes another perspective can be helpful.\\n\\nFirst consider a single letter with a gap of `n`. Say, the letter `A` 5 times with a gap of 2. Then we\\'ll have a list of the form\\n\\n```\\nA _ _ A _ _ A _ _ A _ _ A\\n```\\n\\nWe can write this in column form\\n```\\nA _ _ \\nA _ _ \\nA _ _ \\nA _ _ \\nA\\n```\\nNow, if A is the most common letter, then a minimal configuration has at least this length. \\n\\nWe wish to fill blank spaces ` _ ` with other letters, since a null value is simply a wasted space. If we have multiple \\'most common\\' letters, then the case is very similar. Suppose we also had the letter `B` with the same number of occurences to `A`. Then in columnar form a minimal configuration has at least the same length as the following:\\n\\n``` \\nA B _\\nA B _ \\nA B _ \\nA B _\\nA B\\n```\\n\\nThis is clearly the case since A and B yield the same minimal configuration, and hence if B is in position 1 (0-indexed), then the minimal configuration grows by 1. We can extrapolate this result easily to larger `n` and more elements. Any blank spaces can be filled top-to-bottom, left-to-right in descending order of letter frequency. Since we order by frequency, there will never be too many of one type of element for a column (so max one per row), and by this construction we\\'re safe from elements coming too close.\\n\\nLet `max_freq` be the maximal frequency of any letter and let `max_freq_mult` be the number of letters with that frequency. Then we have that the size of the optimal configuration is given by `(max_freq - 1)*( n + 1) + max_freq_mult`. That comes from the number of full rows of length `n + 1`, plus the size of the trailing row.\\n\\nThis holds so long as gaps remain or we\\'ve managed fill the gaps \\'exactly\\'. After that point, we can continue with the top-to-bottom, left-to-right placement, but the rows will be greater than width `n + 1`. However, since we no longer have gaps, then the optimal configuration will just be equal to `len(tasks)`.\\n\\nHence you\\'d have a formula of the form\\n\\n`max( len(tasks) , (max_freq - 1)*(n + 1) + max_freq_mult )`",
                "solutionTags": [],
                "code": "```\\nA _ _ A _ _ A _ _ A _ _ A\\n```\n```\\nA _ _ \\nA _ _ \\nA _ _ \\nA _ _ \\nA\\n```\n``` \\nA B _\\nA B _ \\nA B _ \\nA B _\\nA B\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 640772,
                "title": "javascript-clean-human-readable-solution",
                "content": "```javascript\\nvar leastInterval = function(tasks, n) {\\n  \\n    const charMap = new Map();\\n    let maxCharCount = 0;\\n    let maxChar = tasks[0];\\n    \\n    for(let char of tasks) {\\n        charMap.set(char, (charMap.get(char) || 0) + 1);\\n        if(charMap.get(char) > maxCharCount) {\\n            maxCharCount = charMap.get(char);\\n            maxChar = char;\\n        }\\n    }\\n    \\n    let idleCount = (maxCharCount - 1) * n;\\n    \\n    charMap.forEach((count, char) => {\\n        // \\'return\\' inside forEach() serve as \\'continue\\'\\n        if(char === maxChar) return;\\n        if(count === maxCharCount) idleCount -= (count - 1);\\n        else idleCount -= count;\\n    })\\n    \\n    if(idleCount <= 0) return tasks.length;\\n    return tasks.length + idleCount;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar leastInterval = function(tasks, n) {\\n  \\n    const charMap = new Map();\\n    let maxCharCount = 0;\\n    let maxChar = tasks[0];\\n    \\n    for(let char of tasks) {\\n        charMap.set(char, (charMap.get(char) || 0) + 1);\\n        if(charMap.get(char) > maxCharCount) {\\n            maxCharCount = charMap.get(char);\\n            maxChar = char;\\n        }\\n    }\\n    \\n    let idleCount = (maxCharCount - 1) * n;\\n    \\n    charMap.forEach((count, char) => {\\n        // \\'return\\' inside forEach() serve as \\'continue\\'\\n        if(char === maxChar) return;\\n        if(count === maxCharCount) idleCount -= (count - 1);\\n        else idleCount -= count;\\n    })\\n    \\n    if(idleCount <= 0) return tasks.length;\\n    return tasks.length + idleCount;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3721395,
                "title": "max-heap-c-with-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCalculate the **frequency** of each character and store them into a **priority queue** and start the Task from maximum frequency.\\n\\n**For Ex:- Task = [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'C\\'] , n = 2**\\n**Priority_queue = [{3,\\'A}],[2,\\'B\\'],[1,\\'C\\']**\\nstart from \\'A\\'  first iteration:- **\\'A\\',\\'B\\',\\'C\\'**, count1 = 3\\n**now Priority_queue = [{2,\\'A\\'}],[{1,\\'B\\'}]** \\nstart from \\'A\\' second iteration:- **\\'A\\' ,\\'B\\'**, \\'idle\\' count2 = 3\\n**now Priority_queue = [{1,\\'A\\'}]**\\n start from \\'A\\'  third iteration:- **\\'A\\'** count3 = 1\\n\\n**Task = \\'A\\',\\'B\\',\\'C\\',\\'A\\' ,\\'B\\',\\'idle\\',\\'A\\'**\\n**return answer = count1+count2+count3 = 7**\\n\\n\\n# Complexity\\n- Time complexity:O(N * n * Log(N))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n\\n        if(n==0) return tasks.size();\\n\\n        priority_queue<pair<int,char>> pq;\\n        unordered_map<int,int> freq;\\n\\n        for(int i = 0;i<tasks.size();i++)\\n        freq[tasks[i]]++;\\n\\n        for(auto x : freq)\\n        pq.push({x.second,x.first});\\n        \\n        int ans = 0;\\n        while(pq.size()>0)\\n        {\\n           if(pq.top().first==1)\\n           {\\n            ans+=pq.size();\\n            break;\\n           }\\n           vector<pair<int,char>> v;\\n           v.push_back(pq.top());\\n           pq.pop();\\n           ans+=1;\\n           for(int i = 0;i<n;i++)\\n           {\\n               if(pq.size()>0)\\n               {\\n                 v.push_back(pq.top());\\n                 pq.pop();\\n               }\\n               ans++;\\n           }\\n           for(auto x : v)\\n           if(x.first>1) pq.push({x.first-1,x.second});\\n        }\\n        return ans; \\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/a824e0c2-f79e-45a1-82fb-90d6f93d00c3_1688546251.3291755.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n\\n        if(n==0) return tasks.size();\\n\\n        priority_queue<pair<int,char>> pq;\\n        unordered_map<int,int> freq;\\n\\n        for(int i = 0;i<tasks.size();i++)\\n        freq[tasks[i]]++;\\n\\n        for(auto x : freq)\\n        pq.push({x.second,x.first});\\n        \\n        int ans = 0;\\n        while(pq.size()>0)\\n        {\\n           if(pq.top().first==1)\\n           {\\n            ans+=pq.size();\\n            break;\\n           }\\n           vector<pair<int,char>> v;\\n           v.push_back(pq.top());\\n           pq.pop();\\n           ans+=1;\\n           for(int i = 0;i<n;i++)\\n           {\\n               if(pq.size()>0)\\n               {\\n                 v.push_back(pq.top());\\n                 pq.pop();\\n               }\\n               ans++;\\n           }\\n           for(auto x : v)\\n           if(x.first>1) pq.push({x.first-1,x.second});\\n        }\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 719689,
                "title": "draw-a-picture-to-intuitively-understand-the-math-solution",
                "content": "In every row, we list different tasks descendently in term of their frequence, and imagine different **lines** with the same length `n+1` to **thread all of them**. Note that tasks in a line should be distinct but this can be easily guaranteed by making sure that **every line only moves horizontally** (but may jump to different rows). Then **the number of lines** is the answer.\\n\\nFor example, if `n == 2` and tasks = [A, A, A, B, B, B, E, F]\\uFF0C then we array tasks like:\\nA  B  E  F\\nA  B\\nA  B\\n\\nDenote the length of shortest rows (A B) is `min_n_cols`, the number of rows is `n_rows`. We know that each line is of length n+1=3. Then we can draw like below\\n![image](https://assets.leetcode.com/users/images/39b0f6e4-8047-47eb-9660-7d59719d22f5_1593889260.242671.png)\\n\\nThere are **two** situations.\\n\\n### Situation 1\\n\\nThe picture above is the situation where we can fit them into `n_rows` lines (a line per row). Note that the last line **may not be full** but the previous lines should be padded with `idle` if it\\'s not full. It\\'s easily to know that the answer is `(n_rows - 1) * (n + 1) + min_n_cols`, where the first part is the `n_rows -1` lines (that should be padded to n+1 if it\\'s not full) and the second part is just the rest of them (which is the third row (A B) in the picture).\\n\\n### Situation 2\\n\\nWhen `n_rows` lines are not enough, which means that `len(tasks) >= (n_rows - 1) * (n + 1) + min_n_cols`, it is easy to find a way to prove that the answer is just `len(tasks)`.\\n\\nAlso an example:\\n\\n![image](https://assets.leetcode.com/users/images/5f251b7d-eac4-4aa9-97bc-16c3645b5dc1_1593889993.5662136.png)\\n\\nOne possibility (picture above) might be `min_n_cols >= n`, which guaratees that you can just draws lines left to right, up to down without collisions\\n\\nAnother possibility is that although `min_n_cols < n + 1`,  there are way too many tasks with low frequencies that you can fit them into shorter lines below.\\n![image](https://assets.leetcode.com/users/images/51b10e4a-c889-4fa9-9ad8-fa64749bf4cb_1593891170.3883245.png)\\n\\nAn example python code as follow:\\n```python\\ndef leastInterval(self, tasks: List[str], n: int) -> int:\\n    cnts = [*collections.Counter(tasks).values()]\\n    n_rows = max(cnts)\\n    min_n_cols = cnts.count(n_rows)\\n    return max((n + 1) * (n_rows - 1) + min_n_cols, len(tasks))\\n```\\n",
                "solutionTags": [],
                "code": "```python\\ndef leastInterval(self, tasks: List[str], n: int) -> int:\\n    cnts = [*collections.Counter(tasks).values()]\\n    n_rows = max(cnts)\\n    min_n_cols = cnts.count(n_rows)\\n    return max((n + 1) * (n_rows - 1) + min_n_cols, len(tasks))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3441264,
                "title": "c-java-python-javascript-optimal-approach-fully-explained-easy-solution",
                "content": "# Intuition:\\nThe problem requires us to find the minimum time required to complete all tasks given the constraint that at least n units of time must elapse between two identical tasks. To minimize the time, we should first consider scheduling the most frequent tasks such that they are separated by n units of time. Then, we can fill the idle slots with the remaining tasks.\\n\\n# Approach:\\n\\n1. Create a frequency array freq to count the number of occurrences of each task.\\n2. Sort the freq array in ascending order.\\n3. Calculate the maximum frequency maxFreq of any task.\\n4. Calculate the number of idle slots idleSlots required by the most frequent task, which is equal to `(maxFreq - 1) * n`.\\n5. Iterate over the remaining tasks in descending order of frequency and subtract the minimum of maxFreq and the frequency of the task from idleSlots.\\n6. If idleSlots is still positive, add it to the length of the input task list tasks. Otherwise, return tasks.size().\\n# Complexity:\\n- Time complexity: The time complexity of the algorithm is O(26 log 26 + n), where 26 log 26 is the time complexity of sorting the frequency array, and n is the length of the input task list.\\n- Space complexity: The space complexity of the algorithm is O(26), which is the size of the frequency array.\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        // Create a frequency array to keep track of the count of each task\\n        vector<int> freq(26);\\n        for (char task : tasks) {\\n            freq[task - \\'A\\']++;\\n        }\\n        // Sort the frequency array in non-decreasing order\\n        sort(freq.begin(), freq.end());\\n        // Calculate the maximum frequency of any task\\n        int maxFreq = freq[25] - 1;\\n        // Calculate the number of idle slots that will be required\\n        int idleSlots = maxFreq * n;\\n        // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for (int i = 24; i >= 0 && freq[i] > 0; i--) {\\n            // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n            idleSlots -= min(maxFreq, freq[i]);\\n        }\\n        // If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots > 0 ? idleSlots + tasks.size() : tasks.size();\\n    }\\n};\\n```\\n# JavaScript\\n```\\nvar leastInterval = function(tasks, n) {\\n  // Create a frequency array to keep track of the count of each task\\n  const freq = Array(26).fill(0);\\n  for (const task of tasks) {\\n    freq[task.charCodeAt(0) - \\'A\\'.charCodeAt(0)]++;\\n  }\\n  // Sort the frequency array in non-decreasing order\\n  freq.sort((a, b) => a - b);\\n  // Calculate the maximum frequency of any task\\n  const maxFreq = freq[25] - 1;\\n  // Calculate the number of idle slots that will be required\\n  let idleSlots = maxFreq * n;\\n  // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n  for (let i = 24; i >= 0 && freq[i] > 0; i--) {\\n    // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n    idleSlots -= Math.min(maxFreq, freq[i]);\\n  }\\n  // If there are any idle slots left, add them to the total number of tasks\\n  return idleSlots > 0 ? idleSlots + tasks.length : tasks.length;\\n}\\n\\n```\\n# JAVA\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // Create a frequency array to keep track of the count of each task\\n        int[] freq = new int[26];\\n        for (char task : tasks) {\\n            freq[task - \\'A\\']++;\\n        }\\n        // Sort the frequency array in non-decreasing order\\n        Arrays.sort(freq);\\n        // Calculate the maximum frequency of any task\\n        int maxFreq = freq[25] - 1;\\n        // Calculate the number of idle slots that will be required\\n        int idleSlots = maxFreq * n;\\n        // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for (int i = 24; i >= 0 && freq[i] > 0; i--) {\\n            // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n            idleSlots -= Math.min(maxFreq, freq[i]);\\n        }\\n        // If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots > 0 ? idleSlots + tasks.length : tasks.length;\\n    }\\n}\\n\\n```\\n# Python\\n```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        # Create a frequency array to keep track of the count of each task\\n        freq = [0] * 26\\n        for task in tasks:\\n            freq[ord(task) - ord(\\'A\\')] += 1\\n        # Sort the frequency array in non-decreasing order\\n        freq.sort()\\n        # Calculate the maximum frequency of any task\\n        maxFreq = freq[25] - 1\\n        # Calculate the number of idle slots that will be required\\n        idleSlots = maxFreq * n\\n        # Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for i in range(24, -1, -1):\\n            if freq[i] > 0:\\n                # Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n                idleSlots -= min(maxFreq, freq[i])\\n        # If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots + len(tasks) if idleSlots > 0 else len(tasks)\\n\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        // Create a frequency array to keep track of the count of each task\\n        vector<int> freq(26);\\n        for (char task : tasks) {\\n            freq[task - \\'A\\']++;\\n        }\\n        // Sort the frequency array in non-decreasing order\\n        sort(freq.begin(), freq.end());\\n        // Calculate the maximum frequency of any task\\n        int maxFreq = freq[25] - 1;\\n        // Calculate the number of idle slots that will be required\\n        int idleSlots = maxFreq * n;\\n        // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for (int i = 24; i >= 0 && freq[i] > 0; i--) {\\n            // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n            idleSlots -= min(maxFreq, freq[i]);\\n        }\\n        // If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots > 0 ? idleSlots + tasks.size() : tasks.size();\\n    }\\n};\\n```\n```\\nvar leastInterval = function(tasks, n) {\\n  // Create a frequency array to keep track of the count of each task\\n  const freq = Array(26).fill(0);\\n  for (const task of tasks) {\\n    freq[task.charCodeAt(0) - \\'A\\'.charCodeAt(0)]++;\\n  }\\n  // Sort the frequency array in non-decreasing order\\n  freq.sort((a, b) => a - b);\\n  // Calculate the maximum frequency of any task\\n  const maxFreq = freq[25] - 1;\\n  // Calculate the number of idle slots that will be required\\n  let idleSlots = maxFreq * n;\\n  // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n  for (let i = 24; i >= 0 && freq[i] > 0; i--) {\\n    // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n    idleSlots -= Math.min(maxFreq, freq[i]);\\n  }\\n  // If there are any idle slots left, add them to the total number of tasks\\n  return idleSlots > 0 ? idleSlots + tasks.length : tasks.length;\\n}\\n\\n```\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // Create a frequency array to keep track of the count of each task\\n        int[] freq = new int[26];\\n        for (char task : tasks) {\\n            freq[task - \\'A\\']++;\\n        }\\n        // Sort the frequency array in non-decreasing order\\n        Arrays.sort(freq);\\n        // Calculate the maximum frequency of any task\\n        int maxFreq = freq[25] - 1;\\n        // Calculate the number of idle slots that will be required\\n        int idleSlots = maxFreq * n;\\n        // Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for (int i = 24; i >= 0 && freq[i] > 0; i--) {\\n            // Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n            idleSlots -= Math.min(maxFreq, freq[i]);\\n        }\\n        // If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots > 0 ? idleSlots + tasks.length : tasks.length;\\n    }\\n}\\n\\n```\n```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        # Create a frequency array to keep track of the count of each task\\n        freq = [0] * 26\\n        for task in tasks:\\n            freq[ord(task) - ord(\\'A\\')] += 1\\n        # Sort the frequency array in non-decreasing order\\n        freq.sort()\\n        # Calculate the maximum frequency of any task\\n        maxFreq = freq[25] - 1\\n        # Calculate the number of idle slots that will be required\\n        idleSlots = maxFreq * n\\n        # Iterate over the frequency array from the second highest frequency to the lowest frequency\\n        for i in range(24, -1, -1):\\n            if freq[i] > 0:\\n                # Subtract the minimum of the maximum frequency and the current frequency from the idle slots\\n                idleSlots -= min(maxFreq, freq[i])\\n        # If there are any idle slots left, add them to the total number of tasks\\n        return idleSlots + len(tasks) if idleSlots > 0 else len(tasks)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2138624,
                "title": "c-priority-queue-with-comments",
                "content": "#  Explaination\\n\\nThe question states that once you start a particular task say \\'A\\' you need atleast *k seconds* to pick up another A right? \\nHence we can think of the problem as trying to make as many blocks as we can of size **(k+1)** \\nNow we need to do that greedily, i.e. by picking up tasks with higher freq than others. Hence we can use a priority queue to get k elements of max_freq right?\\n\\n\\n##  Code\\n\\n```\\n\\n#define pb push_back\\n\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int k) {\\n        \\n        //k is the wait time between 2 same tasks\\n        \\n        unordered_map<char,int> hash;\\n        for(int i = 0; i<tasks.size(); i++) hash[tasks[i]]++;\\n        \\n        priority_queue<int> pq; // max queue\\n        \\n        for(auto it : hash) pq.push(it.second);\\n        \\n        int timer = 0;\\n        \\n        while(!pq.empty()) {\\n            vector<int> temp;\\n            for(int i = 0; i<=k; i++) { // block of size (k+1)\\n                if(!pq.empty()) {\\n                    temp.pb(pq.top()); // pick frequently occuring tasks (greedy)\\n                    pq.pop();\\n                }\\n            }\\n            \\n            for(int i = 0; i<temp.size(); i++) {\\n                if(--temp[i] > 0) pq.push(temp[i]); (if tasks of the kind remain push them back in)\\n            }\\n            \\n            timer += pq.empty() ? temp.size() : k+1; // if queue is empty then we got no remaining tasks hence the current block size \\n\\t\\t\\t// is temp.size() else we got a block of size k+1\\n        }\\n        return timer;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n\\n#define pb push_back\\n\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int k) {\\n        \\n        //k is the wait time between 2 same tasks\\n        \\n        unordered_map<char,int> hash;\\n        for(int i = 0; i<tasks.size(); i++) hash[tasks[i]]++;\\n        \\n        priority_queue<int> pq; // max queue\\n        \\n        for(auto it : hash) pq.push(it.second);\\n        \\n        int timer = 0;\\n        \\n        while(!pq.empty()) {\\n            vector<int> temp;\\n            for(int i = 0; i<=k; i++) { // block of size (k+1)\\n                if(!pq.empty()) {\\n                    temp.pb(pq.top()); // pick frequently occuring tasks (greedy)\\n                    pq.pop();\\n                }\\n            }\\n            \\n            for(int i = 0; i<temp.size(); i++) {\\n                if(--temp[i] > 0) pq.push(temp[i]); (if tasks of the kind remain push them back in)\\n            }\\n            \\n            timer += pq.empty() ? temp.size() : k+1; // if queue is empty then we got no remaining tasks hence the current block size \\n\\t\\t\\t// is temp.size() else we got a block of size k+1\\n        }\\n        return timer;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 404655,
                "title": "c-simple-2-cases-can-fill-idle-or-not",
                "content": "# Intuition\\nCalculate the most number of tasks (maximum number, and the number of tasks with maximum number).\\nIf there are enough tasks to fill up the idle time, then just return the number of tasks.\\nOtherwise, calculate the maximum number of tasks, the idle time, and then add additional tasks with maximum number.\\n\\n# Explanation\\nThere are 2 cases:\\n\\nCase 1:\\nThere is enough task to fill up the idle time.\\nE.g. `[\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"C\"], n = 2`\\nIn this case, the task will finish in the following order:\\n`A -> B -> C -> A -> B -> C -> A`\\nSince there is enough task to fill up the idle time, we can just return the number of task.\\n\\nCase 2:\\nThere is not enough task to fill up the idle time.\\nE.g. `[\"A\", \"A\", \"A\", \"B\"], n = 2`\\nIn this case, the task will finish in the following order:\\n`A -> B -> idle -> A -> idle -> idle -> A`\\n\\nThe formula is:\\n`maxCount + n * (maxCount - 1) + numMax - 1`\\n`maxCount` is to add up the number of task A.\\n`n * (maxCount + 1)` is to add up the number of idle time.\\n`numMax - 1` will be explained below.\\n\\nWhat if there are more than 2 types of task that has the same number of tasks.\\nE.g. `[\"A\", \"A\", \"B\", \"B\"], n = 2`\\n`A -> B -> idle -> A -> B`\\nIn this case, we have to add `numMax - 1` which is `B` in this example.\\n\\n# Complexity\\nTime: `O(N` where n is the number of task.\\nSpace: `O(1)`\\n\\n# C++\\n```C++\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tint counts[26] = { 0 };\\n\\tint max = 0;\\n\\tint numMax = 0;\\n\\tfor (char &task : tasks) {\\n\\t\\tcounts[task - \\'A\\']++;\\n\\t\\tif (counts[task - \\'A\\'] > max) {\\n\\t\\t\\tmax = counts[task - \\'A\\'];\\n\\t\\t\\tnumMax = 1;\\n\\t\\t} else if (counts[task - \\'A\\'] == max) {\\n\\t\\t\\tnumMax++;\\n\\t\\t}\\n\\t}\\n\\n\\t// check to see if there\\'s enough task to fill up the idles\\n\\tif (tasks.size() - max > n * (max - 1)) {\\n\\t\\treturn tasks.size();\\n\\t}\\n\\treturn max + n * (max - 1) + numMax - 1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```C++\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tint counts[26] = { 0 };\\n\\tint max = 0;\\n\\tint numMax = 0;\\n\\tfor (char &task : tasks) {\\n\\t\\tcounts[task - \\'A\\']++;\\n\\t\\tif (counts[task - \\'A\\'] > max) {\\n\\t\\t\\tmax = counts[task - \\'A\\'];\\n\\t\\t\\tnumMax = 1;\\n\\t\\t} else if (counts[task - \\'A\\'] == max) {\\n\\t\\t\\tnumMax++;\\n\\t\\t}\\n\\t}\\n\\n\\t// check to see if there\\'s enough task to fill up the idles\\n\\tif (tasks.size() - max > n * (max - 1)) {\\n\\t\\treturn tasks.size();\\n\\t}\\n\\treturn max + n * (max - 1) + numMax - 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2314557,
                "title": "easiest-solution-o-n-time-o-26-space-detailed-and-easiest-explanation",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0, maxCount = 0;\\n        \\n        for(char ch : tasks){\\n            count[ch-\\'A\\']++;\\n            if(count[ch-\\'A\\']==max){\\n                maxCount++;\\n            }else if(count[ch-\\'A\\']>max){\\n                max=count[ch-\\'A\\'];\\n                maxCount=1;\\n            }\\n        }\\n        \\n        return Math.max(tasks.length, (max-1)*(n+1) + maxCount);\\n    }\\n}\\n\\nTime - Complexity : O(n)\\nSpace - Complexity: O(26)\\n```\\n\\n### Explanation:\\n\\n**max** = length of maximum occuring character\\n**maxCount** = total number of character that are occuring for max times.\\n\\nLet\\'s take a example **AAABBBC** , **n=2**\\nresult: **7** => **ABCAB#AB**\\n\\nfirst we try to fill most frequent character and a empty gap of length n is created between these two characters\\n\\nA _ _ A _ _ A\\n\\nhere places of most frequent character is fixed , and in empty spaces we have to fill remaining character, we can also notice that length of all part (excluding last character \\'A\\') is equals to **(max - 1) * (n+1)** , i.e. **A _ _ A _ _**\\n\\n**Reason** -> as we are excluding last \\'A\\' total slots created is **(max-1)**  and after including \\'A\\' and empty spaces **(A _ _ )** , length of one slot is **(n+1)**\\nso, length after excluding last \\'A\\' = **(max-1)*(n+1)**\\n\\nBut, there can be a case where more than one character can appear for max times, so in this case we have to fill second character just after first, \\n\\n**A B _ A B _ A B**\\n\\nin this case, length of last part which was excluded earlier is equals to maxCount, A B _ A B _ **A B**\\nso,  totalLength = **((max-1) * (n+1)) + maxCount;**\\n\\n**But, wait!,** what if we have given **n=0,** we don\\'t have to bother about the order of occurences, so it result will be equals to tasks.length.\\nSo, \\n\\n**result=Math.max(tasks.length, ((max-1) * (n+1)) + maxCount);**\\n",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0, maxCount = 0;\\n        \\n        for(char ch : tasks){\\n            count[ch-\\'A\\']++;\\n            if(count[ch-\\'A\\']==max){\\n                maxCount++;\\n            }else if(count[ch-\\'A\\']>max){\\n                max=count[ch-\\'A\\'];\\n                maxCount=1;\\n            }\\n        }\\n        \\n        return Math.max(tasks.length, (max-1)*(n+1) + maxCount);\\n    }\\n}\\n\\nTime - Complexity : O(n)\\nSpace - Complexity: O(26)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1512298,
                "title": "using-priority-queue-anfd-hashing-c-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) return tasks.size();\\n        unordered_map<char,int>m;\\n        for(auto ch : tasks)\\n        {\\n            if(m.find(ch)==m.end())\\n                m[ch]=0;\\n            \\n            m[ch]++;//adding the count of every character to the map\\n        }\\n        priority_queue<int> q;\\n        for(auto x:m)\\n            q.push(x.second);\\n        int cycles=0;\\n        while(q.empty()==false)\\n        {\\n            vector<int>temp;\\n            for(int i=0;i<=n;i++)//running our process for the cooldown process\\n            {\\n                if(q.empty()==false)\\n                {\\n                    temp.push_back(q.top());//we are seeing the tasks that we are processing during this cooldown pweriod\\n                    q.pop();\\n                }\\n            }\\n            for(int i:temp)\\n            {\\n                if(--i>0)\\n                    q.push(i);\\n            }\\n            cycles+= (q.empty()==true)? temp.size():n+1;\\n        }\\n        \\n        return cycles;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "class Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) return tasks.size();\\n        unordered_map<char,int>m;\\n        for(auto ch : tasks)\\n        {\\n            if(m.find(ch)==m.end())\\n                m[ch]=0;\\n            \\n            m[ch]++;//adding the count of every character to the map\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2667200,
                "title": "python-o-n-time-count-it-directly",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        cnt = [0] * 26\\n        for i in tasks: cnt[ord(i) - ord(\\'A\\')] += 1\\n        mx, mxcnt = max(cnt), 0\\n        for i in cnt: \\n            if i == mx: mxcnt += 1\\n        return max((mx - 1) * (n + 1) + mxcnt, len(tasks))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        cnt = [0] * 26\\n        for i in tasks: cnt[ord(i) - ord(\\'A\\')] += 1\\n        mx, mxcnt = max(cnt), 0\\n        for i in cnt: \\n            if i == mx: mxcnt += 1\\n        return max((mx - 1) * (n + 1) + mxcnt, len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2462989,
                "title": "c-small-simple-concise-99-fast-code-with-explanation",
                "content": "```\\nint leastInterval(vector<char>& tasks, int n) {\\n        vector<int>mp(26,0);\\n        for(auto i :tasks)\\n        {\\n            mp[i-\\'A\\']++;\\n        }\\n        sort(mp.begin(),mp.end());\\n        int maxFreq = mp[25]-1;\\n        int idleSlot = maxFreq*n;\\n        \\n        for(int i=24;i>=0;i--)\\n        {\\n            idleSlot-=min(mp[i],maxFreq);\\n        }   \\n        return idleSlot>0?idleSlot+tasks.size():tasks.size(); \\n    }\\n```\\n\\nEXPLANATION \\n\\nLets say you\\'re given the array tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\\nThe frequency of A is 3 and that of B is 3. So the maximum frequency is 3. We can pick either A or B as they both have the maximum frequency. For this example I\\'m picking A.\\n\\nNow the idle time n = 2 meaning that we have to wait 2 units of time before performing a similar task. Assuming we have only A , 3 A tasks can be done in the following manner:-\\n\\nA _ _ A _ _ A\\n\\nSo we have 4 idle time in between (represented by _ ) which can be utilized to perform other task. Since we only have B, these idle spots can be filled as :-\\n\\nA B _ A B _ A B\\n\\nSo the total time will be = length of tasks array + total no of idle spots remaining = 6 + 2 =8.\\n\\n\\nLet us consider the example:  tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\n\\nThe frequency of elements are :\\n\\nA->6\\nB->1\\nC->1\\nD->1\\nE->1\\nF->1\\nG->1\\n\\nThe max Frequency is A = 6.\\nThe no of idle spots assuming we only have A will be  = (max Frequency - 1)* n = 5*2 = 10\\n\\n\\tA _ _ A _ _ A _ _ A _ _ A _ _ A\\n\\t\\nNow lets fill the idle spots with the remaining tasks\\n\\nA B C A D E A F G A _ _A _ _ A\\n\\nTherefore, Total Time = Length of task array + No of idle spots remaining = 12 + 4 = 16\\n\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint leastInterval(vector<char>& tasks, int n) {\\n        vector<int>mp(26,0);\\n        for(auto i :tasks)\\n        {\\n            mp[i-\\'A\\']++;\\n        }\\n        sort(mp.begin(),mp.end());\\n        int maxFreq = mp[25]-1;\\n        int idleSlot = maxFreq*n;\\n        \\n        for(int i=24;i>=0;i--)\\n        {\\n            idleSlot-=min(mp[i],maxFreq);\\n        }   \\n        return idleSlot>0?idleSlot+tasks.size():tasks.size(); \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 722756,
                "title": "easily-understandable-java-solution",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n         if(n == 0){\\n                return tasks.length;\\n            }\\n\\n            HashMap<Character,Integer> map = new HashMap<>();\\n\\n\\n            for(int i=0;i<tasks.length;i++){\\n                map.put(tasks[i],map.getOrDefault(tasks[i],0)+1);\\n            }\\n\\n            // by default pq is min_heap\\n            // thats why reversOrder\\n            PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n\\n            //.Add all the frequency values\\n            pq.addAll(map.values());\\n\\n            // Find the maxFrequency since we are using Max Heap\\n            int maxFreq = pq.poll();\\n\\n            int totalIdleTime = (maxFreq - 1) * n;\\n\\n            // Now looping through all the frequencies\\n            while (!pq.isEmpty()){\\n                // Find the current Frequency\\n                int currentFreq = pq.poll();\\n                // If its equal to max frequency then we need add 1 since we need to consider the last task\\n                // Example A B idle A B idle A B (so this B needs to be considered)\\n                if(currentFreq == maxFreq){\\n                    totalIdleTime-=currentFreq;\\n                    totalIdleTime+=1;\\n                }else {\\n                    // else we just keep subtracting idle time\\n                    totalIdleTime -= currentFreq;\\n                }\\n            }\\n\\n            // If its greater than zero the add it with tasks length\\n            if(totalIdleTime > 0){\\n                return totalIdleTime + tasks.length;\\n            }else {\\n                return tasks.length;\\n            }\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n         if(n == 0){\\n                return tasks.length;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 617201,
                "title": "c-solution-o-n",
                "content": "![image](https://assets.leetcode.com/users/newbiecoder1/image_1588791256.png)\\n\\n**Implementation 1**\\n```\\n/*\\n    Time: O(n) where n is the length of tasks.\\n    Space: O(1)\\n*/\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        \\n        int maxFreq = 0, interval = 0, cnt = 0;        \\n        int[] freq = new int[26];\\n        \\n       \\n        foreach(char t in tasks)\\n        {\\n            freq[t - \\'A\\']++;\\n\\t\\t\\t\\n\\t\\t\\t // Find the most frequent task\\n            if(freq[t - \\'A\\'] > maxFreq)\\n            {\\n                maxFreq = freq[t - \\'A\\'];\\n                cnt = 1;\\n            }\\n\\t\\t\\t// Count the number of most frequent tasks\\n            else if(freq[t - \\'A\\'] == maxFreq)\\n                cnt++;\\n        }\\n        \\n        // maxFreq - 1: blocks needed to allocate the first maxFreq-1 most-frequent task\\n        // n + 1: each block needs n+1 spaces due the the cooling interval.\\n        // cnt: Size of last block = number of most-frequent tasks\\n        interval = (maxFreq - 1) * (n + 1) + cnt;\\n        \\n        return interval < tasks.Length?  tasks.Length : interval;\\n    }\\n}\\n```\\n**Implementation 2**\\n```\\n/*\\n    Time: O(n) where n is the length of tasks.\\n    Space: O(n)\\n*/\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        \\n        int maxFreq = 0, interval = 0, cnt = 0;\\n        Dictionary<char, int> dic = new Dictionary<char, int>();\\n        \\n        // Find the max frequency that any task can have \\n        foreach(char t in tasks)\\n        {\\n            if(dic.ContainsKey(t))\\n                dic[t]++;\\n            else\\n                dic.Add(t, 1);\\n            \\n            maxFreq = Math.Max(maxFreq, dic[t]);\\n        }\\n        \\n        // Find the number of tasks that have the max frequency\\n        foreach(var kv in dic)\\n        {\\n            if(dic[kv.Key] == maxFreq)\\n                cnt++;\\n        }\\n        \\n        // maxFreq - 1: blocks needed to allocate the first maxFreq-1 most-frequent task\\n        // n + 1: each block needs n+1 spaces due the the cooling interval.\\n        // cnt: Size of last block = number of most-frequent tasks\\n        interval = (maxFreq - 1) * (n + 1) + cnt;\\n        \\n        return interval < tasks.Length?  tasks.Length : interval;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n    Time: O(n) where n is the length of tasks.\\n    Space: O(1)\\n*/\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        \\n        int maxFreq = 0, interval = 0, cnt = 0;        \\n        int[] freq = new int[26];\\n        \\n       \\n        foreach(char t in tasks)\\n        {\\n            freq[t - \\'A\\']++;\\n\\t\\t\\t\\n\\t\\t\\t // Find the most frequent task\\n            if(freq[t - \\'A\\'] > maxFreq)\\n            {\\n                maxFreq = freq[t - \\'A\\'];\\n                cnt = 1;\\n            }\\n\\t\\t\\t// Count the number of most frequent tasks\\n            else if(freq[t - \\'A\\'] == maxFreq)\\n                cnt++;\\n        }\\n        \\n        // maxFreq - 1: blocks needed to allocate the first maxFreq-1 most-frequent task\\n        // n + 1: each block needs n+1 spaces due the the cooling interval.\\n        // cnt: Size of last block = number of most-frequent tasks\\n        interval = (maxFreq - 1) * (n + 1) + cnt;\\n        \\n        return interval < tasks.Length?  tasks.Length : interval;\\n    }\\n}\\n```\n```\\n/*\\n    Time: O(n) where n is the length of tasks.\\n    Space: O(n)\\n*/\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        \\n        int maxFreq = 0, interval = 0, cnt = 0;\\n        Dictionary<char, int> dic = new Dictionary<char, int>();\\n        \\n        // Find the max frequency that any task can have \\n        foreach(char t in tasks)\\n        {\\n            if(dic.ContainsKey(t))\\n                dic[t]++;\\n            else\\n                dic.Add(t, 1);\\n            \\n            maxFreq = Math.Max(maxFreq, dic[t]);\\n        }\\n        \\n        // Find the number of tasks that have the max frequency\\n        foreach(var kv in dic)\\n        {\\n            if(dic[kv.Key] == maxFreq)\\n                cnt++;\\n        }\\n        \\n        // maxFreq - 1: blocks needed to allocate the first maxFreq-1 most-frequent task\\n        // n + 1: each block needs n+1 spaces due the the cooling interval.\\n        // cnt: Size of last block = number of most-frequent tasks\\n        interval = (maxFreq - 1) * (n + 1) + cnt;\\n        \\n        return interval < tasks.Length?  tasks.Length : interval;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1757687,
                "title": "c-8-line-solution-with-detailed-explanation",
                "content": "**Approach:**\\n1) most occuring char can be the deciding point for minimum number of slots required\\n2) ex : A is most occured (3times ) and n= 3, A _ _ _  A _ _ _ A _ _ _\\n3) if other chars like B occured less than 3 times they can be adjusted in the gaps like this A B _ _  A B _ _ A _ _ _\\n4) initially ans = (n+1)(max-1) in above example n = 3 , max = 3 ans = 4 x 2 = 8 , but it requires 9 slots one will be added in next step\\n5) if any char is occuring max number of times , ans will be increased by one as new char with frequency of max  takes its last slot in the end which increases no of slots by 1\\n6) now check ans = max(tasks.size(),ans) explanation for this step is \\n    n = 2;\\n\\t ex : AAABBBCCCDD\\n\\t1) ABCABCABCD_ _ D is not optimal or our ans gives 3 x 2 = 6 + 3 = 9 which is also not correct\\n\\t2) correct ans is 11 , if size of tasks is greater than ans i.e required by max frequency chars size of task \\n    AAABBBCCCDD => ABCDABCDABC here the reason for size being the answer is gap between similar is     at atleast n but we can more than n gap and still arrange all chars in size number of slots\\n\\t\\n\\t\\n**Code :**\\n```\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> m;\\n        int mx = 0;\\n        \\n        for(auto it:tasks){\\n            m[it]++;\\n            mx = max(mx,m[it]);\\n        }\\n        \\n        int ans = (mx-1)*(n+1);\\n        for(auto it:m)if(it.second==mx)ans++;\\n        \\n        return max((int)tasks.size(),ans);\\n    }\\n```\\n\\nPlease Upvote  If you like this Solution and explanation , please give suggestions in comments",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> m;\\n        int mx = 0;\\n        \\n        for(auto it:tasks){\\n            m[it]++;\\n            mx = max(mx,m[it]);\\n        }\\n        \\n        int ans = (mx-1)*(n+1);\\n        for(auto it:m)if(it.second==mx)ans++;\\n        \\n        return max((int)tasks.size(),ans);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1234144,
                "title": "c-explained-solution-faster-than-98",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) \\n            return tasks.size();\\n        int freq[26] = {0};\\n        for(char c: tasks) \\n            freq[c-\\'A\\']++;\\n        sort(freq,freq+26);\\n        int max_val = freq[25]-1; //don\\'t need to wait at the end\\n        //max_val indicates the number of times the task with maximum frequency has to cool\\n        int idle_slots = max_val*n; \\n        //try to do other tasks in the idle positions \\n        for(int i=24;i>=0;i--) {\\n            idle_slots -= min(freq[i],max_val);    \\n//because there can be others slot with same maximum frequency and in that case, it\\'s not possible to accomodate them all that within the idle slots (as in case1 [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"])\\n            cout<< min(freq[i],max_val)<<\" \" ;\\n        }\\n        return (idle_slots>0)?tasks.size()+idle_slots : tasks.size();\\n    }\\n};\\n//Eg task AAABBC\\n\\n/*  0 1  2  3 4  5 6\\n    A _  _  A _  _ A \\n    \\n    A B  _  A B  _ A \\n    \\n    A B  C  A B _  A  //index 5 is for cooling \\n\\n*/\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) \\n            return tasks.size();\\n        int freq[26] = {0};\\n        for(char c: tasks) \\n            freq[c-\\'A\\']++;\\n        sort(freq,freq+26);\\n        int max_val = freq[25]-1; //don\\'t need to wait at the end\\n        //max_val indicates the number of times the task with maximum frequency has to cool\\n        int idle_slots = max_val*n; \\n        //try to do other tasks in the idle positions \\n        for(int i=24;i>=0;i--) {\\n            idle_slots -= min(freq[i],max_val);    \\n//because there can be others slot with same maximum frequency and in that case, it\\'s not possible to accomodate them all that within the idle slots (as in case1 [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"])\\n            cout<< min(freq[i],max_val)<<\" \" ;\\n        }\\n        return (idle_slots>0)?tasks.size()+idle_slots : tasks.size();\\n    }\\n};\\n//Eg task AAABBC\\n\\n/*  0 1  2  3 4  5 6\\n    A _  _  A _  _ A \\n    \\n    A B  _  A B  _ A \\n    \\n    A B  C  A B _  A  //index 5 is for cooling \\n\\n*/\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 259218,
                "title": "java-solution-using-priority-queue-with-explanation",
                "content": "**We** always want the machine do task with higher frequence first.  If we let machine do lower ones, then after machine finish all lower frequence tasks, we have to put idle between higher frequence tasks, which result in higher number of intervals. \\n\\n**If** we look closer to the task schedule, we can find out a pattern that each period is of length (n+1).  For example, tasks = [A A A A B B B B C C C D] and n = 3, the schedule should be:\\n[A _ _ _ A _ _ _ A _ _ _ A ...].\\n\\n**Whenever** there are tasks not finished, machine should start a new work period with length (n+1). The reason we have period of length (n+1) is to prevent two same tasks have intervals shorter than n.\\n\\n**So** the idea to finish tasks is: if there are tasks not finished, start a new period. In this period, get the highest frequence task from all remaining tasks, and put it to the start of this period. Then get the second highest task and put to this period until this period ends or there is no task available. If there is no task avalable before this period ends, we have to let the machine in idle state. After each period ends, we try to put tasks back to task pool. If there is no task in task pool, we finish all tasks.\\n        \\n**So** we (1) Sort tasks by frequency in descending order. (2) While task pool has tasks, start a new word period. (3) Get highest frequnce task from task pool to fill the slot of this period untill period ends or no more task avalable (4) Put unfinished task back to task pool (5) If task pool has no task, job done.\\n\\n```\\n   public int leastInterval(char[] tasks, int n) {\\n        if (tasks.length == 0 || n == 0) return tasks.length;\\n\\n        Map<Character, Integer> taskCount = new HashMap<>(); /* key: task, value: amount of this task remained */\\n        for (Character t : tasks) {\\n            taskCount.put(t, taskCount.getOrDefault(t, 0) + 1);\\n        }\\n\\n        PriorityQueue<Map.Entry<Character, Integer>> taskPool = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {\\n            @Override\\n            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {\\n                return o2.getValue() - o1.getValue();\\n            }\\n        });\\n\\n        for (Map.Entry<Character, Integer> entry : taskCount.entrySet()) {\\n            taskPool.add(entry);\\n        }\\n\\n        int intervals = 0;\\n        while (!taskPool.isEmpty()) {\\n            /* start a new work period */\\n            List<Map.Entry<Character, Integer>> tasksInPeriod = new ArrayList<>();\\n            int period = n + 1;\\n            while (period > 0 && !taskPool.isEmpty()) {\\n                Map.Entry<Character, Integer> currTask = taskPool.poll();\\n                currTask.setValue(currTask.getValue() - 1);\\n                tasksInPeriod.add(currTask);\\n                \\n                intervals++;\\n                period--;\\n            }\\n            \\n            /* add remaining tasks to taskPool */\\n            for (Map.Entry<Character, Integer> remainedTask : tasksInPeriod) {\\n                if (remainedTask.getValue() > 0) taskPool.add(remainedTask);\\n            }\\n            \\n            /* check if job done */\\n            if (taskPool.isEmpty()) break;\\n            else {\\n                /* check if idle slots needed */\\n                if (period > 0) intervals += period;\\n            }\\n        }\\n        return intervals;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n   public int leastInterval(char[] tasks, int n) {\\n        if (tasks.length == 0 || n == 0) return tasks.length;\\n\\n        Map<Character, Integer> taskCount = new HashMap<>(); /* key: task, value: amount of this task remained */\\n        for (Character t : tasks) {\\n            taskCount.put(t, taskCount.getOrDefault(t, 0) + 1);\\n        }\\n\\n        PriorityQueue<Map.Entry<Character, Integer>> taskPool = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {\\n            @Override\\n            public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {\\n                return o2.getValue() - o1.getValue();\\n            }\\n        });\\n\\n        for (Map.Entry<Character, Integer> entry : taskCount.entrySet()) {\\n            taskPool.add(entry);\\n        }\\n\\n        int intervals = 0;\\n        while (!taskPool.isEmpty()) {\\n            /* start a new work period */\\n            List<Map.Entry<Character, Integer>> tasksInPeriod = new ArrayList<>();\\n            int period = n + 1;\\n            while (period > 0 && !taskPool.isEmpty()) {\\n                Map.Entry<Character, Integer> currTask = taskPool.poll();\\n                currTask.setValue(currTask.getValue() - 1);\\n                tasksInPeriod.add(currTask);\\n                \\n                intervals++;\\n                period--;\\n            }\\n            \\n            /* add remaining tasks to taskPool */\\n            for (Map.Entry<Character, Integer> remainedTask : tasksInPeriod) {\\n                if (remainedTask.getValue() > 0) taskPool.add(remainedTask);\\n            }\\n            \\n            /* check if job done */\\n            if (taskPool.isEmpty()) break;\\n            else {\\n                /* check if idle slots needed */\\n                if (period > 0) intervals += period;\\n            }\\n        }\\n        return intervals;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1051417,
                "title": "python-solution-with-explanation",
                "content": "This problem can be broken down as shown below:\\n```\\n1. tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nA B X\\nA B X\\nA B\\n\\nanswer = 8 (3 * 2 + 2)\\n```\\n```\\n2. tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nA B C\\nA D E\\nA F G\\nA X X\\nA X X\\nA\\n\\nanswer = 16 (5 * 3 + 1)\\n```\\n```\\n3. tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"], n = 2\\nA B C D E\\nA B C D A\\nB C \\n\\nanswer = 12 (no idle time so this is just len(tasks))\\n```\\n\\tIf you generalize this, you get this formula\\n\\n\\t(frequency of the max task - 1) * (n + 1) + last_row\\n\\tor\\n\\tlen(tasks) \\n\\twhichever is higher\\n```\\nlast_row = count of max frequency tasks\\n```\\n\\nCode:\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        d = {}\\n        for task in tasks:\\n            if task in d:\\n                d[task] += 1\\n            else:\\n                d[task] = 1\\n        max_freq = max(d.values())\\n        last_row = 0\\n        for k, v in d.items():\\n            if v == max_freq:\\n                last_row += 1\\n        \\n        return max((max_freq - 1) * (n + 1) + last_row, len(tasks))\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n1. tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nA B X\\nA B X\\nA B\\n\\nanswer = 8 (3 * 2 + 2)\\n```\n```\\n2. tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nA B C\\nA D E\\nA F G\\nA X X\\nA X X\\nA\\n\\nanswer = 16 (5 * 3 + 1)\\n```\n```\\n3. tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"], n = 2\\nA B C D E\\nA B C D A\\nB C \\n\\nanswer = 12 (no idle time so this is just len(tasks))\\n```\n```\\nlast_row = count of max frequency tasks\\n```\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        d = {}\\n        for task in tasks:\\n            if task in d:\\n                d[task] += 1\\n            else:\\n                d[task] = 1\\n        max_freq = max(d.values())\\n        last_row = 0\\n        for k, v in d.items():\\n            if v == max_freq:\\n                last_row += 1\\n        \\n        return max((max_freq - 1) * (n + 1) + last_row, len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760120,
                "title": "my-c-solution-easy-to-understand",
                "content": "The most frequent character will be placed at (n+1)th distance from each other, such that the gap between them remains \\'n\\'. So, ```max_freq``` will count the maximum occurence of the character. Finally, minimum time ```idle_time``` will be   ```(max_freq-1)*(n+1)+1```, +1 because at the last occurence of the element we must stop, This minimum required time can be extended if there are same number of maximum frequency elements in the character array,here, denoted by ```inc```, so +1 for all such elements. Now, if the other char does not fit in this time we must consider the complete ```tasks.size()```.\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) return (int)tasks.size();\\n        map<char,int> freq; \\n        int max_freq = 0,inc=0;\\n        for(int x : tasks) {freq[x]++; max_freq = max(max_freq, freq[x]);}\\n        int idle_time = (max_freq-1)*(n+1)+1;\\n        for(auto it: freq){\\n            if(it.second==max_freq) inc++;\\n        }\\n        int ans = idle_time+(inc-1); // One of which was already used for the maximum frequency char earlier //\\n        return max(ans, (int)tasks.size());\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```max_freq```\n```idle_time```\n```(max_freq-1)*(n+1)+1```\n```inc```\n```tasks.size()```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        if(n==0) return (int)tasks.size();\\n        map<char,int> freq; \\n        int max_freq = 0,inc=0;\\n        for(int x : tasks) {freq[x]++; max_freq = max(max_freq, freq[x]);}\\n        int idle_time = (max_freq-1)*(n+1)+1;\\n        for(auto it: freq){\\n            if(it.second==max_freq) inc++;\\n        }\\n        int ans = idle_time+(inc-1); // One of which was already used for the maximum frequency char earlier //\\n        return max(ans, (int)tasks.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 673003,
                "title": "java-intuitive-solutions",
                "content": "Vaguely recall I was asked this question at f about 3.5 years ago but I did not remember what solution I gave if any during the interview. The only thing I still remember is I was rejected.\\n1. Greedy O(n). The intuition is to schedule the task with max frequency first, then put it on hold for n intervals. \\nProof by controdiction: Assume the least intervals solution must have a low frequency task A scheduled before a high frequency task B. For example ...A1...B1...A2...B2...Bn... Then we can always change it to ...B1...A1...B2..A2...Bn, which schedules high frequency task B before A and is valid. So the assumption is wrong. Optimal solution does not have to have a low frequency task scheduled before a high frequency task. Thus high frequency task first is always optimal.\\n```\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for(char c:tasks) freq[c-\\'A\\']++;\\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n        for(int f:freq) if(f>0) pq.add(f);\\n        int time=0;\\n        while(!pq.isEmpty()) {\\n            int idle=n+1;\\n            List<Integer> list = new ArrayList<>();\\n            while(idle>0 && !pq.isEmpty()) {\\n                int f = pq.poll();\\n                if(f>1) list.add(f-1);\\n                idle--;\\n            }\\n            time += list.isEmpty()?n+1-idle:n+1; //list is empty when all tasks are scheduled, so no need to add seperation for additional tasks\\n            pq.addAll(list);            \\n        }\\n       return time;\\n    }\\n```\\n2. O(n) Another simple idea is to schedule the highest frequency task with n intervals apart. Then fill the idle intervals with other tasks. For example,\\n1st task A...A...A...A\\n2nd task AB...AB...A...A\\n3rd task ABC...AB...AC...A\\nThe tricky part is what to do if the idle intervals are less than the remaining tasks. This is actually a good and easy case. n is the minimum separation. It is always ok to have larger seperation. So we can schedule the additional tasks in the same way and there is no idle interval.\\n```\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        int maxFreq = 0, maxFreqCount = 0;\\n        for(char c:tasks) mf = Math.max(maxFreq, ++freq[c-\\'A\\']);\\n        for(int f:freq) if(f==maxFreq) maxFreqCount++;\\n        return Math.max(tasks.length, (n+1)*(maxFreq-1)+maxFreqCount);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for(char c:tasks) freq[c-\\'A\\']++;\\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n        for(int f:freq) if(f>0) pq.add(f);\\n        int time=0;\\n        while(!pq.isEmpty()) {\\n            int idle=n+1;\\n            List<Integer> list = new ArrayList<>();\\n            while(idle>0 && !pq.isEmpty()) {\\n                int f = pq.poll();\\n                if(f>1) list.add(f-1);\\n                idle--;\\n            }\\n            time += list.isEmpty()?n+1-idle:n+1; //list is empty when all tasks are scheduled, so no need to add seperation for additional tasks\\n            pq.addAll(list);            \\n        }\\n       return time;\\n    }\\n```\n```\\n\\tpublic int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        int maxFreq = 0, maxFreqCount = 0;\\n        for(char c:tasks) mf = Math.max(maxFreq, ++freq[c-\\'A\\']);\\n        for(int f:freq) if(f==maxFreq) maxFreqCount++;\\n        return Math.max(tasks.length, (n+1)*(maxFreq-1)+maxFreqCount);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 656449,
                "title": "python-priority-queue-heap-solution",
                "content": "```\\nfrom heapq import *\\nfrom collections import Counter\\n\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        counter = Counter(tasks)\\n        heap = [(-v,k) for k,v in counter.items()]\\n        heapify(heap)\\n        time = 0\\n        while heap:\\n            i = 0\\n            temp = []\\n            while i<=n:\\n                if heap:\\n                    v,k = heappop(heap)\\n                    if -v > 1:\\n                        temp.append((v+1,k))\\n                time += 1\\n                if not heap and not temp: #\\u8FD9\\u4E00\\u8F6Efreezing cycle\\u6CA1\\u8DD1\\u5B8C\\n                    break\\n                i += 1\\n            for l in temp:\\n                heappush(heap,l)\\n        \\n        return time\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import *\\nfrom collections import Counter\\n\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        counter = Counter(tasks)\\n        heap = [(-v,k) for k,v in counter.items()]\\n        heapify(heap)\\n        time = 0\\n        while heap:\\n            i = 0\\n            temp = []\\n            while i<=n:\\n                if heap:\\n                    v,k = heappop(heap)\\n                    if -v > 1:\\n                        temp.append((v+1,k))\\n                time += 1\\n                if not heap and not temp: #\\u8FD9\\u4E00\\u8F6Efreezing cycle\\u6CA1\\u8DD1\\u5B8C\\n                    break\\n                i += 1\\n            for l in temp:\\n                heappush(heap,l)\\n        \\n        return time\\n```",
                "codeTag": "Java"
            },
            {
                "id": 627169,
                "title": "java-intuitive-easy-to-understand-explained",
                "content": "It is critical to understant that **the number of interval is depended on the most occurred tasks.** \\n\\n1. get the frequency for each task `task_freq`.\\n2. get the most frequent task\\'s count. `max_freq`\\n3. get the number of time `max_freq` occures. `max_freq_count` \\n    (as in example `A` and `B` occured for `3` times each).\\n4. now we can calculate the intervals with `intervals = max_freq -1 X n+1 + max_freq_count`\\n5. our answer would be either the intervals calculated in above step or the length of input\\n\\t\\n```java\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] task_freq = new int[26];\\n        for(char task : tasks){\\n            task_freq[task-\\'A\\']++;    \\n        }\\n        \\n        Arrays.sort(task_freq);\\n        int max_freq = task_freq[task_freq.length - 1];\\n        int max_freq_count = 0;\\n        for(int freq : task_freq){\\n            if(freq == max_freq) max_freq_count++;\\n        }\\n        int intervals = (max_freq-1) * (n+1) + max_freq_count\\n        return Math.max(tasks.length, intervals);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] task_freq = new int[26];\\n        for(char task : tasks){\\n            task_freq[task-\\'A\\']++;    \\n        }\\n        \\n        Arrays.sort(task_freq);\\n        int max_freq = task_freq[task_freq.length - 1];\\n        int max_freq_count = 0;\\n        for(int freq : task_freq){\\n            if(freq == max_freq) max_freq_count++;\\n        }\\n        int intervals = (max_freq-1) * (n+1) + max_freq_count\\n        return Math.max(tasks.length, intervals);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 168867,
                "title": "newbie-answer-something-code-able-in-actual-interview",
                "content": "After understanding the ask of this problem, you should be asking yourself what kind of problem is this. Certain key words like **least number of intervals** might cause you think of DP, but you need to be **certain** that it can be solved with DP before saying it to your interviewer. While it can be solved in such a way but it is logically complicated and indirect, try to brute force and walk through the example to get a real good understanding of how to approach. \\n\\nAnd it turns out that it is a greedy problem. When you identify the subproblem and different paths (tasks) you can approach at every turn (A, B, ... or Idle). Always pick the most recurred task whenever possible. Don\\'t be worried if you can\\'t spot this, you have to learn to see the problem in a different way (takes time and experiences with more problems like this). You will begin to see that a cooling interval of n can be seen as window in which different tasks can be ran. \\n|A B * | A B * |\\n\\nThis should make you think of sorting the tasks by its occurences at every interval and going through them one by one until reaching the new interval window\\n\\nIf you understand the above concepts, your code will look something similar to this. Using PriorityQueue should only be a **tool** used to manifest this way of thinking, you don\\'t just look at this problem and think of applying PriorityQueue without properly understanding the ask and have a plan to approach this problem. \\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        int[] counts = new int[26];\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> -(o1.compareTo(o2)));\\n        for (char task : tasks) {\\n            counts[task-\\'A\\']++;\\n        }\\n        for (int count : counts) {\\n            if (count != 0) {\\n                pq.offer(count);\\n            }\\n        }\\n        int intervals = 0;\\n        while (!pq.isEmpty()) {\\n            List<Integer> temp = new ArrayList<>();\\n            for (int i = 0; i <= n; i++) {\\n                if (pq.isEmpty() && temp.size() == 0) break;\\n                if (!pq.isEmpty()) {\\n                    int task = pq.poll();\\n                    if (task != 1) {\\n                        temp.add(task-1);\\n                    }\\n                }\\n                intervals++;\\n            }\\n            for (int next : temp) {\\n                pq.offer(next);\\n            }\\n        }\\n        return intervals;\\n    }\\n}\\n```\\n\\nIn summary: The above alogrithm should run in O(N lg N) because we are either completing new tasks or being idle (in other words, not going back in our previous calculations). \\nThe Space complexity is O(1) because we have identified the types to be [A-Z] which can be mapped using an int array. (Our priority queue will also hold no more than 26 integers)\\n\\nGive thumbs up if this helps you! :)\\nKeep Coding!\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        int[] counts = new int[26];\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((o1, o2) -> -(o1.compareTo(o2)));\\n        for (char task : tasks) {\\n            counts[task-\\'A\\']++;\\n        }\\n        for (int count : counts) {\\n            if (count != 0) {\\n                pq.offer(count);\\n            }\\n        }\\n        int intervals = 0;\\n        while (!pq.isEmpty()) {\\n            List<Integer> temp = new ArrayList<>();\\n            for (int i = 0; i <= n; i++) {\\n                if (pq.isEmpty() && temp.size() == 0) break;\\n                if (!pq.isEmpty()) {\\n                    int task = pq.poll();\\n                    if (task != 1) {\\n                        temp.add(task-1);\\n                    }\\n                }\\n                intervals++;\\n            }\\n            for (int next : temp) {\\n                pq.offer(next);\\n            }\\n        }\\n        return intervals;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 134716,
                "title": "clean-javascript-solution",
                "content": "Reference: https://leetcode.com/problems/task-scheduler/discuss/104496/concise-Java-Solution-O(N)-time-O(26)-space\\n\\n(1)\\n\\n```js\\nfunction leastInterval(tasks, n) {\\n  const arr = new Array(26).fill(0);\\n\\n  for (let t of tasks) {\\n    arr[t.charCodeAt(0) - \\'A\\'.charCodeAt(0)]++;\\n  }\\n\\n  arr.sort((a, b) => a - b);\\n\\n  let i = 25;\\n  while (i >= 0 && arr[i] === arr[25]) {\\n    i--;\\n  }\\n\\n  return Math.max(\\n    // case 1\\n    // AB...AB... = (arr[25] - 1) * (n + 1)\\n    // AB...AB...AB = (arr[25] - 1) * (n + 1) + (25 - i)\\n    (arr[25] - 1) * (n + 1) + (25 - i),\\n\\n    // case 2\\n    // e.g. (ABC)(ABD)(ABEF)\\n    tasks.length,\\n  );\\n}\\n```\\n\\n(2) Another similar good one (I just added some English explaniation, and cleaned a little bit, the original post is at https://leetcode.com/problems/task-scheduler/discuss/259329/O(n)-JavaScript-solution)\\n\\n```\\nfunction leastInterval(tasks, n) {\\n  if (n === 0) return tasks.length;\\n\\n  const map = {};\\n  for (let t of tasks) {\\n    if (map[t] == null) map[t] = 0;\\n    map[t]++;\\n  }\\n\\n  let max = 0;  // task max frequency\\n  for (let t in map) {\\n    max = Math.max(max, map[t]);\\n  }\\n\\n  let count = 0;  // the number of tasks with same max frequency\\n  for (let t in map) {\\n    if (map[t] === max) {\\n      count++;\\n    }\\n  }\\n\\n  return Math.max(\\n    // case 1\\n    // AB...AB... = (max - 1) * (n + 1)\\n    // AB...AB...AB = (max - 1) * (n + 1) + count\\n    (max - 1) * (n + 1) + count,\\n\\n    // case 2\\n    // e.g. (ABC)(ABD)(ABEF)\\n    tasks.length,\\n  );\\n}\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nfunction leastInterval(tasks, n) {\\n  const arr = new Array(26).fill(0);\\n\\n  for (let t of tasks) {\\n    arr[t.charCodeAt(0) - \\'A\\'.charCodeAt(0)]++;\\n  }\\n\\n  arr.sort((a, b) => a - b);\\n\\n  let i = 25;\\n  while (i >= 0 && arr[i] === arr[25]) {\\n    i--;\\n  }\\n\\n  return Math.max(\\n    // case 1\\n    // AB...AB... = (arr[25] - 1) * (n + 1)\\n    // AB...AB...AB = (arr[25] - 1) * (n + 1) + (25 - i)\\n    (arr[25] - 1) * (n + 1) + (25 - i),\\n\\n    // case 2\\n    // e.g. (ABC)(ABD)(ABEF)\\n    tasks.length,\\n  );\\n}\\n```\n```\\nfunction leastInterval(tasks, n) {\\n  if (n === 0) return tasks.length;\\n\\n  const map = {};\\n  for (let t of tasks) {\\n    if (map[t] == null) map[t] = 0;\\n    map[t]++;\\n  }\\n\\n  let max = 0;  // task max frequency\\n  for (let t in map) {\\n    max = Math.max(max, map[t]);\\n  }\\n\\n  let count = 0;  // the number of tasks with same max frequency\\n  for (let t in map) {\\n    if (map[t] === max) {\\n      count++;\\n    }\\n  }\\n\\n  return Math.max(\\n    // case 1\\n    // AB...AB... = (max - 1) * (n + 1)\\n    // AB...AB...AB = (max - 1) * (n + 1) + count\\n    (max - 1) * (n + 1) + count,\\n\\n    // case 2\\n    // e.g. (ABC)(ABD)(ABEF)\\n    tasks.length,\\n  );\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3157384,
                "title": "python-3-priority-queue-using-counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBe greedy; schedule the n most common in round-robin fashion. Pad with idle states when there are fewer than n tasks available.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe\\'ll use **collections.Counter**, which is a useful extension of a Dictionary. The Counter\\'s **most_common(*n*)** method seems made to order for our need here, a kind of priority queue. An alternative data structure for the queue would be **heapq**.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nWe may assume **O(*n log n*)** for n tasks, because of Counter set-up. \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n**O(*n*)** for n tasks\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\'\\'\\'\\n          STRATEGY\\n          Greedy; schedule the n most common in round-robin fashion.\\n          The \"n most common\" adjusts as \"time\" progresses.\\n          If there are fewer than n distinct tasks in todo, pad to n with idle states.\\n\\n          QUEUING METHOD\\n          A Counter is a dictionary, with extensions like the convenient constructor\\n          below and most_common(). We\\'ll be using our Counter as a priority queue.\\n        \\'\\'\\'\\n        todo = Counter(tasks)\\n        units = 0                   # \"Time\" units\\n        n += 1                      # Actual cycle length is more convenient\\n        while todo:\\n            # Pick the n items with highest count\\n            ready = todo.most_common(n)\\n            n_ready = len(ready)\\n            units += n_ready\\n            for k, _ in ready:\\n                if todo[k] > 1:\\n                    todo[k] -= 1\\n                else:\\n                    del todo[k]     # Would go to 0; delete\\n            if todo:\\n                # Fill in with idle time as needed\\n                units += n - n_ready\\n        return units\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\'\\'\\'\\n          STRATEGY\\n          Greedy; schedule the n most common in round-robin fashion.\\n          The \"n most common\" adjusts as \"time\" progresses.\\n          If there are fewer than n distinct tasks in todo, pad to n with idle states.\\n\\n          QUEUING METHOD\\n          A Counter is a dictionary, with extensions like the convenient constructor\\n          below and most_common(). We\\'ll be using our Counter as a priority queue.\\n        \\'\\'\\'\\n        todo = Counter(tasks)\\n        units = 0                   # \"Time\" units\\n        n += 1                      # Actual cycle length is more convenient\\n        while todo:\\n            # Pick the n items with highest count\\n            ready = todo.most_common(n)\\n            n_ready = len(ready)\\n            units += n_ready\\n            for k, _ in ready:\\n                if todo[k] > 1:\\n                    todo[k] -= 1\\n                else:\\n                    del todo[k]     # Would go to 0; delete\\n            if todo:\\n                # Fill in with idle time as needed\\n                units += n - n_ready\\n        return units\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2128569,
                "title": "two-java-different-solutions-easy-to-understand",
                "content": "**First Solution**\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for(char task : tasks) {\\n            freq[task-\\'A\\']++;\\n        }\\n        \\n        Arrays.sort(freq);\\n        \\n        // [A, A, A, B, B] and n = 2\\n        int maxVal = freq[25]-1;\\n        // A, i, i, A, i, i, A (last task does not require idle time)\\n        // Now the plan is to fill the i with other values.\\n        int ideal_slots = maxVal * n;\\n        \\n        for(int i=24; i>=0; i--) {\\n            // Min because, in the case when 2 or more tasks have same unit of work\\n            ideal_slots -= Math.min(freq[i], maxVal);\\n        }\\n        \\n        return ideal_slots > 0 ?  ideal_slots + tasks.length : tasks.length;\\n    }\\n}\\n```\\n\\n**Second Solution:**\\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        \\n        for(char task : tasks) {\\n            map.put(task, map.getOrDefault(task,0)+1);\\n        }\\n        \\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a);\\n        \\n        maxHeap.addAll(map.values());\\n        \\n        int cycle = 0;\\n        \\n        while(!maxHeap.isEmpty()) {\\n            List<Integer> temp = new ArrayList<>();\\n            \\n            for(int i=0; i<n+1 ; i++) {\\n                if(!maxHeap.isEmpty()) {\\n                    temp.add(maxHeap.poll());\\n                }\\n            }\\n            \\n            for(int i=0; i<temp.size(); i++) {\\n                if(temp.get(i) - 1  > 0) {\\n                    maxHeap.add(temp.get(i)-1);\\n                }\\n            }\\n            \\n            cycle += maxHeap.isEmpty() ? temp.size() : n+1;\\n        }\\n        \\n        return cycle;\\n    }\\n}\\n\\n```\\n\\nPlease, upvote if it is useful.",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for(char task : tasks) {\\n            freq[task-\\'A\\']++;\\n        }\\n        \\n        Arrays.sort(freq);\\n        \\n        // [A, A, A, B, B] and n = 2\\n        int maxVal = freq[25]-1;\\n        // A, i, i, A, i, i, A (last task does not require idle time)\\n        // Now the plan is to fill the i with other values.\\n        int ideal_slots = maxVal * n;\\n        \\n        for(int i=24; i>=0; i--) {\\n            // Min because, in the case when 2 or more tasks have same unit of work\\n            ideal_slots -= Math.min(freq[i], maxVal);\\n        }\\n        \\n        return ideal_slots > 0 ?  ideal_slots + tasks.length : tasks.length;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        \\n        for(char task : tasks) {\\n            map.put(task, map.getOrDefault(task,0)+1);\\n        }\\n        \\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b) -> b-a);\\n        \\n        maxHeap.addAll(map.values());\\n        \\n        int cycle = 0;\\n        \\n        while(!maxHeap.isEmpty()) {\\n            List<Integer> temp = new ArrayList<>();\\n            \\n            for(int i=0; i<n+1 ; i++) {\\n                if(!maxHeap.isEmpty()) {\\n                    temp.add(maxHeap.poll());\\n                }\\n            }\\n            \\n            for(int i=0; i<temp.size(); i++) {\\n                if(temp.get(i) - 1  > 0) {\\n                    maxHeap.add(temp.get(i)-1);\\n                }\\n            }\\n            \\n            cycle += maxHeap.isEmpty() ? temp.size() : n+1;\\n        }\\n        \\n        return cycle;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1706018,
                "title": "python-simple-priority-queue-max-heap-explained",
                "content": "This is not my solution, I\\'ve just tried to add more explanation on top of others\\' solution.\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        counter = dict()\\n        for task in tasks:\\n            counter[task] = counter.get(task, 0) + 1\\n        \\n        # create a max heap of the frequency\\n        # of the task occuring using the map\\n        hq = list()\\n        for task, count in counter.items():\\n            heappush(hq, (-count, task))\\n        \\n        time = 0\\n        while hq:\\n            tmp = []\\n            for _ in range(n+1): # units are inclusive hence n+1\\n                # add all tasks to the temp list\\n                # if there are tasks to be processed\\n                # in the queue, note that for this n\\n                # cycles, we\\'re not pushing processed\\n                # items back in the queue but rather in the\\n                # tmp list so that they don\\'t appear before n\\n                # cycles have been passed.\\n                if hq: tmp.append((heappop(hq)))\\n                \\n            # but once we\\'ve done n cycles from the\\n            # queue, we can safely add the processed\\n            # tasks back to the queue to be processed\\n            # again if they have repititions left (count)\\n            for count, task in tmp:\\n                if count+1 < 0: heappush(hq, (count+1, task))\\n            \\n            # for every cycle, we will add n+1 cycles to the total\\n            # time because that\\'s the max number of cycles you can\\n            # perform at a time without repeating characters\\n            # BUT for the last few tasks, there can be <n tasks\\n            # in the queue and we would\\'ve put them inside tmp\\n            # so only in that case, we\\'ll check if queue is empty\\n            # and if so, we\\'ll add len(tmp) to the overall time\\n            time += len(tmp) if not hq else n+1\\n                \\n        return time\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        counter = dict()\\n        for task in tasks:\\n            counter[task] = counter.get(task, 0) + 1\\n        \\n        # create a max heap of the frequency\\n        # of the task occuring using the map\\n        hq = list()\\n        for task, count in counter.items():\\n            heappush(hq, (-count, task))\\n        \\n        time = 0\\n        while hq:\\n            tmp = []\\n            for _ in range(n+1): # units are inclusive hence n+1\\n                # add all tasks to the temp list\\n                # if there are tasks to be processed\\n                # in the queue, note that for this n\\n                # cycles, we\\'re not pushing processed\\n                # items back in the queue but rather in the\\n                # tmp list so that they don\\'t appear before n\\n                # cycles have been passed.\\n                if hq: tmp.append((heappop(hq)))\\n                \\n            # but once we\\'ve done n cycles from the\\n            # queue, we can safely add the processed\\n            # tasks back to the queue to be processed\\n            # again if they have repititions left (count)\\n            for count, task in tmp:\\n                if count+1 < 0: heappush(hq, (count+1, task))\\n            \\n            # for every cycle, we will add n+1 cycles to the total\\n            # time because that\\'s the max number of cycles you can\\n            # perform at a time without repeating characters\\n            # BUT for the last few tasks, there can be <n tasks\\n            # in the queue and we would\\'ve put them inside tmp\\n            # so only in that case, we\\'ll check if queue is empty\\n            # and if so, we\\'ll add len(tmp) to the overall time\\n            time += len(tmp) if not hq else n+1\\n                \\n        return time\\n```",
                "codeTag": "Java"
            },
            {
                "id": 931832,
                "title": "my-java-solution-with-comments-and-a-sample-testing",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0)\\n            return tasks.length;\\n        if (tasks.length == 0)\\n            return 0;\\n        // lets create an int array to store the frequency\\n        int [] freq = new int [26];\\n        for (char ch: tasks) \\n            freq[ch-\\'A\\'] += 1;\\n        // now sort the array to get the most frequenct charcater at the last\\n        Arrays.sort(freq); // 26 * log(26) => Considered as O(1)\\n        int maxValue = freq[25] - 1;  // we do -1 as we dont want idle state if we are at the very end;\\n        int availableIdleSlot = maxValue * n;  // this many idle slot will be avaiable\\n        for (int i=24; i>=0; i--) {\\n            // now update the available slot\\n            availableIdleSlot -= Math.min(freq[i], maxValue);\\n        }\\n        return availableIdleSlot > 0 ? availableIdleSlot + tasks.length : tasks.length; \\n    }\\n}\\n\\n/*\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nfreq after sorting = [3, 3, 0, .....] \\n    maxValue = 3 - 1 = 2\\n    idleslot = 2 * 2 = 4\\n        \\n            idleslot -= min(3, 2)\\n            4 -= 2\\n            = 2\\nidleslot > 0 therefore final asnwer = idleslotremaining + taskslength\\n= 2 + 6 = 8\\n\\n*/\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0)\\n            return tasks.length;\\n        if (tasks.length == 0)\\n            return 0;\\n        // lets create an int array to store the frequency\\n        int [] freq = new int [26];\\n        for (char ch: tasks) \\n            freq[ch-\\'A\\'] += 1;\\n        // now sort the array to get the most frequenct charcater at the last\\n        Arrays.sort(freq); // 26 * log(26) => Considered as O(1)\\n        int maxValue = freq[25] - 1;  // we do -1 as we dont want idle state if we are at the very end;\\n        int availableIdleSlot = maxValue * n;  // this many idle slot will be avaiable\\n        for (int i=24; i>=0; i--) {\\n            // now update the available slot\\n            availableIdleSlot -= Math.min(freq[i], maxValue);\\n        }\\n        return availableIdleSlot > 0 ? availableIdleSlot + tasks.length : tasks.length; \\n    }\\n}\\n\\n/*\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nfreq after sorting = [3, 3, 0, .....] \\n    maxValue = 3 - 1 = 2\\n    idleslot = 2 * 2 = 4\\n        \\n            idleslot -= min(3, 2)\\n            4 -= 2\\n            = 2\\nidleslot > 0 therefore final asnwer = idleslotremaining + taskslength\\n= 2 + 6 = 8\\n\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 763655,
                "title": "python-short-solution-and-detailed-explanation-w-rules",
                "content": "# Full solution:\\n```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        freq = [0] * 26\\n        for i in tasks:\\n            freq[ord(i)-ord(\"A\")] += 1\\n        freq.sort(reverse=True)\\n        idleBlocks = freq[0]-1\\n        idle = idleBlocks * n\\n\\n        for i in range(1,26):\\n            idle -= min(freq[i], idleBlocks)\\n\\n        return len(tasks) + max(idle, 0)\\n```\\n\\nFirst off, we need to look for the **fastest** way to complete the tasks. To do this, we follow a rule:\\n\\n### RULE 1: The amount of consecutive similar letters should be minimized.\\n\\n* Having the same letters adjacent to each other means that we will need to insert ***n*** idle states in between them, which will waste time. We need to avoid this as much as possible, so we insert ***n*** distinct letters in between similar letters.\\n\\n#### Step 1. *We take the most frequent letter f, and insert n idle states in between each f. We then replace these idles states with distinct letters to reduce idle time.*\\n* We use the most frequent letter since this allows the most slots for the other tasks to be inserted into.\\n* Initially, we have this amount of idle states: `idle = idleBlocks * n`. Since we are replacing these idle states, ***idle*** will be subtracted by how many distinct letters will replace these idle states.\\n\\t* ***idleBlocks*** denotes how many sets of adjacent idle states there are, which is equal to **the frequency of *f* subtracted by 1**. This is declared to make the code more understandable (In the example below, the \"**. .**\" in between each A is an idleBlock. Each period is an idle state).\\n\\nHere\\'s an example with ***n*** = 2, and with each idle state denoted by a period:\\n`A A A A B B B` *- initial state*\\n`A . . A . . A . . A B B B` *- idle states (periods) inserted, ***idleBlocks*** = 3, ***idle*** = 6*\\n`A B. A B. A B. A` *- idle states replaced, ***idle*** = 3*\\n\\n\\\\* Note that for each set of adjacent idle states (or ***idleBlocks***), only one idle state is replaced with B to avoid duplicates. This is because of another rule:\\n\\n### RULE 2: Each set of letters replacing an *idleBlock* should NOT contain duplicate letters.\\n* Having similar letters within an idleBlock will only increase idle states. For example (n = 3): `A . . . A . . . A B B B`. If we have similar letters within an idleBlock: `A B.B A B.. A`, there is only one idle state between the first two B\\'s, so we need to add **two more idle states** to satisfy n = 3. *This is not efficient.*\\n\\nThus, \\n#### Step 2. *We replace a maximum of 1 idle state per idleBlock for every other letter i that is not f.*\\n\\nThere are two ways this could go:\\n1. **CASE 1:** `freq[i] >= idleBlocks`.  This happens when ***i*** is  >= ***idleBlocks*** for every ***i***, where ***i*** corresponds to every letter aside from ***f***). This will be used in a loop later on.\\n\\t * By **Rule 2**, we can only have one of each letter in an idleBlock. So if we come across a letter ***i*** with a frequency >= ***idleBlocks***, then we should be able to replace **only one idle state** for every ***idleBlock***: `idle -= idleBlocks`. If we replace more than one, then **Rule 2** is broken.\\n\\n2. **CASE 2:** `freq[i] < idleBlocks` (or simply `else`).\\n\\t* We still follow **Rule 2** for this case. Since ***freq[i]* <= *idleBlocks***, we won\\'t be able to replace an idle state for every ***idleBlock***. We can only replace ***freq[i]*** idle states: `idle -= freq[i]`\\n\\n#### Step 3. *We then return the total length of the given tasks + the remaining idles states*\\n\\n## In summary:\\n**1. Insert *n* idle states in between every *f*\\n2. Replace as much idle states as possible with every letter aside from *f* while following Rule 2\\n3. Return the total amount of *tasks*, including the remaining idle states**\\n\\n# The Procedure\\nSo how do we actually implement this in code?\\n\\n1. Create a list containing the frequency of each letter, and sort it in reversed (highest to lowest):\\n```\\nfreq = [0] * 26\\nfor i in tasks:\\n\\tfreq[ord(i)-ord(\"A\")] += 1 \\nfreq.sort(reverse=True)\\n```\\n* *The 3rd line assigns an index for every letter: A is index 0, B is index 1, ... until Z is index 26.*\\n\\n2. Calculate idleBlocks and idle:\\n```\\nidleBlocks = freq[0] - 1 # freq[0] is the frequency of f, the most frequent letter.\\nidle = idleBlocks * n\\n```\\n\\n2. For every letter ***i*** that is not ***f*** (for every letter aside from the most frequent one), replace the idle states while following **Rule 2**:\\n```\\n# Long version\\nfor i in range(1,26):\\n\\tif freq[i] >= idleBlocks: # Case 1\\n\\t\\tidle -= idleBlocks\\n\\telse: # Case 2\\n\\t\\tidle -= freq[i] \\n```\\n```\\n# Shorter version\\nfor i in range(1,26):\\n\\tidle -= min(freq[i], idleBlocks)\\n```\\n3. Return the following:\\n```\\n# Long version\\nreturn len(tasks) + idle if idle >= 0 else len(tasks)\\n```\\n```\\n# Short version\\nreturn len(tasks) + max(idle, 0)\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        freq = [0] * 26\\n        for i in tasks:\\n            freq[ord(i)-ord(\"A\")] += 1\\n        freq.sort(reverse=True)\\n        idleBlocks = freq[0]-1\\n        idle = idleBlocks * n\\n\\n        for i in range(1,26):\\n            idle -= min(freq[i], idleBlocks)\\n\\n        return len(tasks) + max(idle, 0)\\n```\n```\\nfreq = [0] * 26\\nfor i in tasks:\\n\\tfreq[ord(i)-ord(\"A\")] += 1 \\nfreq.sort(reverse=True)\\n```\n```\\nidleBlocks = freq[0] - 1 # freq[0] is the frequency of f, the most frequent letter.\\nidle = idleBlocks * n\\n```\n```\\n# Long version\\nfor i in range(1,26):\\n\\tif freq[i] >= idleBlocks: # Case 1\\n\\t\\tidle -= idleBlocks\\n\\telse: # Case 2\\n\\t\\tidle -= freq[i] \\n```\n```\\n# Shorter version\\nfor i in range(1,26):\\n\\tidle -= min(freq[i], idleBlocks)\\n```\n```\\n# Long version\\nreturn len(tasks) + idle if idle >= 0 else len(tasks)\\n```\n```\\n# Short version\\nreturn len(tasks) + max(idle, 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 675358,
                "title": "python-heap-solution",
                "content": "Code:\\n```\\nimport collections\\nimport heapq\\n\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        t = collections.Counter(tasks)\\n        step = 0\\n        heap = []\\n        for k, v in t.items():\\n\\t\\t    # put the element with largest count on the top of the heap. \\n\\t\\t\\t# Remember python heap model return the smallest element while using pop, so use -v instead of v\\n            heapq.heappush(heap, (-v, k))\\n        while heap:\\n            temp = []\\n            cnt = 0\\n            mx_time = min(len(heap), n + 1)\\n            while cnt < mx_time:\\n                curtime, curele = heapq.heappop(heap)\\n                step += 1\\n                cnt += 1\\n                if curtime < -1:\\n                    temp.append((curtime + 1, curele))\\n\\t\\t\\t# if you don\\'t use if temp, them there will be a problem in the final loop.\\n            if temp:\\n\\t\\t\\t    #step += idle time\\t\\n                step += n + 1 - mx_time\\n            for tempitem in temp:\\n                heapq.heappush(heap, tempitem)\\n        return step\\n```\\n\\nPretty similar with problem #358",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport collections\\nimport heapq\\n\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        t = collections.Counter(tasks)\\n        step = 0\\n        heap = []\\n        for k, v in t.items():\\n\\t\\t    # put the element with largest count on the top of the heap. \\n\\t\\t\\t# Remember python heap model return the smallest element while using pop, so use -v instead of v\\n            heapq.heappush(heap, (-v, k))\\n        while heap:\\n            temp = []\\n            cnt = 0\\n            mx_time = min(len(heap), n + 1)\\n            while cnt < mx_time:\\n                curtime, curele = heapq.heappop(heap)\\n                step += 1\\n                cnt += 1\\n                if curtime < -1:\\n                    temp.append((curtime + 1, curele))\\n\\t\\t\\t# if you don\\'t use if temp, them there will be a problem in the final loop.\\n            if temp:\\n\\t\\t\\t    #step += idle time\\t\\n                step += n + 1 - mx_time\\n            for tempitem in temp:\\n                heapq.heappush(heap, tempitem)\\n        return step\\n```",
                "codeTag": "Java"
            },
            {
                "id": 417363,
                "title": "python-2-line-solution-explained",
                "content": "Idea:\\n1. Only place the tasks with the greatest number of occurrences in the solution array, with `n` number of slots to be filled by other tasks (or idle) between every neighbors. Suppose this initial arrangement takes `m` segments at best. (e.g. for `tasks = [\"A\",\"A\",\"B\",\"B\",\"C\"], n = 2`, the arrangement is `[\"A\",\"B\", _ ,\"A\",\"B\", _ ]`)\\n2. If the total number of tasks is no greater than `m`, then we can put the rest of tasks into the array without collision;\\n3. otherwise, we have to manually increase the period of cooling in order to insert additional tasks. Note that it does not create any idle state and thus the number of segments required is simply the total number of tasks.\\n```python\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        v = list(collections.Counter(tasks).values())\\n        return max((max(v)-1) * (n+1) + v.count(max(v)), len(tasks))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        v = list(collections.Counter(tasks).values())\\n        return max((max(v)-1) * (n+1) + v.count(max(v)), len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 392670,
                "title": "python-easy-to-read-solution-explained",
                "content": "```\\nimport collections, heapq\\n\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        \\n        d = collections.defaultdict(int)\\n        \\n        for t in tasks:\\n            d[t] += 1\\n        \\n        h = []\\n        # get the most frequent items to heap top\\n        for k, v in d.items():\\n            heapq.heappush(h, (-1*v, k))\\n        \\n        c = 0\\n        while h:\\n            tmp = []\\n    \\n            # iterate by min distance between repeating chars\\n            # e.g. n = 2, then two spaces are needed after A _ _ A \\n            for _ in range(n+1):\\n                c += 1\\n                if h:    \\n                    p, key = heapq.heappop(h)\\n                    # only add back to heap if > 1 chars remain\\n                    if p != -1:\\n                        tmp += [(p+1, key)]\\n                    \\n                # if no heap, and no addition to heap, count is complete\\n                if not h and not tmp:\\n                    return c\\n                \\n            # add back to heap    \\n            for t in tmp:\\n                heapq.heappush(h, t)\\n            \\n        return c\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport collections, heapq\\n\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        \\n        d = collections.defaultdict(int)\\n        \\n        for t in tasks:\\n            d[t] += 1\\n        \\n        h = []\\n        # get the most frequent items to heap top\\n        for k, v in d.items():\\n            heapq.heappush(h, (-1*v, k))\\n        \\n        c = 0\\n        while h:\\n            tmp = []\\n    \\n            # iterate by min distance between repeating chars\\n            # e.g. n = 2, then two spaces are needed after A _ _ A \\n            for _ in range(n+1):\\n                c += 1\\n                if h:    \\n                    p, key = heapq.heappop(h)\\n                    # only add back to heap if > 1 chars remain\\n                    if p != -1:\\n                        tmp += [(p+1, key)]\\n                    \\n                # if no heap, and no addition to heap, count is complete\\n                if not h and not tmp:\\n                    return c\\n                \\n            # add back to heap    \\n            for t in tmp:\\n                heapq.heappush(h, t)\\n            \\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2907259,
                "title": "java-queue-heap-hashmap-frequency-array",
                "content": "# Please Upvote :D\\n---\\n\\n``` java[]\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (char c : tasks) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\\n        pq.addAll(map.values());\\n        \\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\\n        int time = 0;\\n\\n        while (!pq.isEmpty() || !q.isEmpty()) {\\n            time++;\\n\\n            if (!pq.isEmpty()) {\\n                int cnt = pq.poll() - 1;\\n\\n                if (cnt != 0) {\\n                    q.offer(new Pair(cnt, time + n));\\n                }\\n            }\\n\\n            if (!q.isEmpty() && q.peek().getValue() == time) {\\n                pq.offer(q.poll().getKey());\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n\\n// TC: O(n * log26) => O(n)\\n// SC: O(26) => O(1)\\n```\\n---\\n##### Same solution but using a frequency array:\\n``` java []\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for (char c : tasks) {\\n            freq[c - \\'A\\']++;\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\\n        for (int f : freq) {\\n            if (f > 0) pq.offer(f);\\n        }\\n\\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\\n        int time = 0;\\n\\n        while (!pq.isEmpty() || !q.isEmpty()) {\\n            time++;\\n\\n            if (!pq.isEmpty()) {\\n                int cnt = pq.poll() - 1;\\n\\n                if (cnt != 0) {\\n                    q.offer(new Pair(cnt, time + n));\\n                }\\n            }\\n\\n            if (!q.isEmpty() && q.peek().getValue() == time) {\\n                pq.offer(q.poll().getKey());\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n\\n// TC: O(n * log26) => O(n)\\n// SC: O(26) => O(1)\\n```\\n---\\n### Watch this video to understand the approach ;D\\nhttps://www.youtube.com/watch?v=s8p8ukTyA2I",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Queue",
                    "Heap (Priority Queue)"
                ],
                "code": "``` java[]\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (char c : tasks) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\\n        pq.addAll(map.values());\\n        \\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\\n        int time = 0;\\n\\n        while (!pq.isEmpty() || !q.isEmpty()) {\\n            time++;\\n\\n            if (!pq.isEmpty()) {\\n                int cnt = pq.poll() - 1;\\n\\n                if (cnt != 0) {\\n                    q.offer(new Pair(cnt, time + n));\\n                }\\n            }\\n\\n            if (!q.isEmpty() && q.peek().getValue() == time) {\\n                pq.offer(q.poll().getKey());\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n\\n// TC: O(n * log26) => O(n)\\n// SC: O(26) => O(1)\\n```\n``` java []\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] freq = new int[26];\\n        for (char c : tasks) {\\n            freq[c - \\'A\\']++;\\n        }\\n\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);\\n        for (int f : freq) {\\n            if (f > 0) pq.offer(f);\\n        }\\n\\n        Queue<Pair<Integer, Integer>> q = new LinkedList<>();\\n        int time = 0;\\n\\n        while (!pq.isEmpty() || !q.isEmpty()) {\\n            time++;\\n\\n            if (!pq.isEmpty()) {\\n                int cnt = pq.poll() - 1;\\n\\n                if (cnt != 0) {\\n                    q.offer(new Pair(cnt, time + n));\\n                }\\n            }\\n\\n            if (!q.isEmpty() && q.peek().getValue() == time) {\\n                pq.offer(q.poll().getKey());\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n\\n// TC: O(n * log26) => O(n)\\n// SC: O(26) => O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2001956,
                "title": "python-priority-queue-heapq-deque-simple-solution-with-explanation",
                "content": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n == 0:\\n            return len(tasks)\\n        \\n        # Count frequency of each task\\n        hashmap = {}\\n        for task in tasks:\\n            if task in hashmap:\\n                hashmap[task] += 1\\n            else:\\n                hashmap[task] = 1\\n        \\n        # Build a max-heap of all the frequencies\\n        heap = [-val for val in hashmap.values()]\\n        heapq.heapify(heap)\\n        \\n        # Initialize a queue to hold the tasks which are waiting for cool down period\\n        queue = deque() # [frequency, timeAtWhichItCanStartExecuting]\\n        \\n        timeTaken = 0\\n        # Iterate till all the tasks are processed.\\n        while heap or queue:\\n            timeTaken += 1\\n            # Pick the task from heap having the maximum frequency.\\n            if heap:\\n                frequency = -heapq.heappop(heap)\\n                # Since only one task can be processed in a unit time. So process the task.\\n                frequency -= 1\\n                # Now if this task is left then it will have to wait for the cooldown period. So, enque the task till its cooldown period is expired.\\n                if frequency:\\n                    queue.append([frequency, timeTaken + n])\\n                    \\n            # Now process the tasks whose cooling period is expired.\\n            while queue and queue[0][1] == timeTaken:\\n                heapq.heappush(heap, -queue.popleft()[0])\\n        \\n        return timeTaken\\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python",
                    "Queue",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n == 0:\\n            return len(tasks)\\n        \\n        # Count frequency of each task\\n        hashmap = {}\\n        for task in tasks:\\n            if task in hashmap:\\n                hashmap[task] += 1\\n            else:\\n                hashmap[task] = 1\\n        \\n        # Build a max-heap of all the frequencies\\n        heap = [-val for val in hashmap.values()]\\n        heapq.heapify(heap)\\n        \\n        # Initialize a queue to hold the tasks which are waiting for cool down period\\n        queue = deque() # [frequency, timeAtWhichItCanStartExecuting]\\n        \\n        timeTaken = 0\\n        # Iterate till all the tasks are processed.\\n        while heap or queue:\\n            timeTaken += 1\\n            # Pick the task from heap having the maximum frequency.\\n            if heap:\\n                frequency = -heapq.heappop(heap)\\n                # Since only one task can be processed in a unit time. So process the task.\\n                frequency -= 1\\n                # Now if this task is left then it will have to wait for the cooldown period. So, enque the task till its cooldown period is expired.\\n                if frequency:\\n                    queue.append([frequency, timeTaken + n])\\n                    \\n            # Now process the tasks whose cooling period is expired.\\n            while queue and queue[0][1] == timeTaken:\\n                heapq.heappush(heap, -queue.popleft()[0])\\n        \\n        return timeTaken\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1663553,
                "title": "easy-understanding-java-solution-using-priority-queue-max-heap",
                "content": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        \\n        // solution: pretty much based on intution on how we would schedule the tasks normally on paper.\\n\\t\\t// always schedule the tasks that have more count first; later for wait time schedule other low count tasks \\n\\t\\t// if no low count tasks avaialble; use idle time.\\n        \\n        // data structure needed:\\n        // use a dict to initially story the task and count of each task\\n        // later add the count values along with task to max-heap (Priority queue). this gives better retrieving of tasks.\\n\\t\\t// use `add_back` as a storage to add back the counts to `pq` once we use extractMax().   \\n        \\n\\t\\t\\n\\t\\t// Implementation:\\n        // outer loop until the Priority queue  all counts are zero\\n        // use an innner for-loop to grab \\'n\\' tasks from the max-heap and decrement the counts of max heap.\\n        // implementation of the max heap queue may vary here:\\n        // as we don\\'t have direct way to  decrement the counts in max-heap; we poll() the element the from maxheap\\n        // and store the counts to list(if counts > 0); and later add back the list to `pq` after the end of while loop.\\n        \\n        \\n        // time complexity: O(result) --> As we only compute till the time counter is incremented.\\n        // space: O(tasks_count)\\n        Map<Character, Integer> task_counter = new HashMap<>();\\n        for(Character task: tasks) {\\n            task_counter.put(task, task_counter.getOrDefault(task,0) + 1);    \\n        }\\n        \\n        \\n        // add the frequency of all tasks  to pq (Priority-Queue)\\n        // use reverseOrder to account for max-heap implementation\\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\\n        pq.addAll(task_counter.values());\\n        \\n        \\n        int time = 0;\\n        while(pq.size() > 0) {\\n            List<Integer> add_back = new ArrayList<>();\\n            \\n            // loop for grabbing n tasks from  pq or for idle itme only\\n            for(int i= 0; i <= n; i++) {\\n                \\n                // for grabbing n tasks from  pq \\n                if(pq.size() > 0) {\\n                    int count = pq.poll(); // retreives max and removes an element from pq.\\n                    count--;\\n                    if(count > 0) { // needs add_back\\n                        add_back.add(count);\\n                    }  \\n                }\\n                \\n                time += 1; // accounts for idle time and real task too.\\n                if(pq.size() == 0 && add_back.size() == 0) {  // this accounts when the last run of tasks is done and no more tasks to ensure no idle runs happen when no tasks to schecule.\\n                    break;\\n                }  \\n\\n            }   \\n            pq.addAll(add_back);  // re-arrange the max-heap proeprty by adding the add_back counts to pq.\\n\\n        }\\n        return time;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        \\n        // solution: pretty much based on intution on how we would schedule the tasks normally on paper.\\n\\t\\t// always schedule the tasks that have more count first; later for wait time schedule other low count tasks \\n\\t\\t// if no low count tasks avaialble; use idle time.\\n        \\n        // data structure needed:\\n        // use a dict to initially story the task and count of each task\\n        // later add the count values along with task to max-heap (Priority queue). this gives better retrieving of tasks.\\n\\t\\t// use `add_back` as a storage to add back the counts to `pq` once we use extractMax().   \\n        \\n\\t\\t\\n\\t\\t// Implementation:\\n        // outer loop until the Priority queue  all counts are zero\\n        // use an innner for-loop to grab \\'n\\' tasks from the max-heap and decrement the counts of max heap.\\n        // implementation of the max heap queue may vary here:\\n        // as we don\\'t have direct way to  decrement the counts in max-heap; we poll() the element the from maxheap\\n        // and store the counts to list(if counts > 0); and later add back the list to `pq` after the end of while loop.\\n        \\n        \\n        // time complexity: O(result) --> As we only compute till the time counter is incremented.\\n        // space: O(tasks_count)\\n        Map<Character, Integer> task_counter = new HashMap<>();\\n        for(Character task: tasks) {\\n            task_counter.put(task, task_counter.getOrDefault(task,0) + 1);    \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1616696,
                "title": "simple-clear-c-solution",
                "content": "**Approach** :\\n1.We need to know that which task has occured the most so we use a map to store the count of every occured task , you can also use an char vector to store the frequeucies \\n2. From the map we find the task with the most no of ocurrence and then store it in a maxCount now we know that for this task we will atleast need n units between so we will need `(maxCount-1)*n+1` units .\\n3. Now if two tasks have same no of max frequecies we can just add +1 to the res as we would need one extra unit .\\n4. Now we return which ever is the max between no of tasks and the units as we might have more no of tasks than the units required for the maxCount.\\n**Code** :\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> mp;\\n        for(auto it : tasks)\\n        {\\n            mp[it]++;\\n        }\\n        int maxCount=0;\\n        for(auto it : mp)\\n        {\\n            maxCount=max(maxCount,it.second);\\n        }\\n        int res=(maxCount-1)*(n+1);\\n        for(auto it : mp){\\n            if(it.second==maxCount) res++;\\n        }\\n        \\n        res=max(res,(int)tasks.size());\\n        return res;\\n    }\\n};\\n```\\n**Pls Upvote if this helped**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> mp;\\n        for(auto it : tasks)\\n        {\\n            mp[it]++;\\n        }\\n        int maxCount=0;\\n        for(auto it : mp)\\n        {\\n            maxCount=max(maxCount,it.second);\\n        }\\n        int res=(maxCount-1)*(n+1);\\n        for(auto it : mp){\\n            if(it.second==maxCount) res++;\\n        }\\n        \\n        res=max(res,(int)tasks.size());\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760519,
                "title": "python-o-n-solution-explained",
                "content": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        count = list(collections.Counter(tasks).values())\\n        max_num = max(count)\\n        max_num_count = count.count(max_num)\\n        return max(len(tasks), (n+1)*(max_num-1)+ max_num_count)\\n```\\nExplanation:\\nBasically this is a math question.\\nmax_nums is the maximum number of same tasks that appear in the tasks list.\\nmax_nums_count is the number of how many tasks appear max_nums times in the tasks list.\\nn = cool down period between two same tasks\\n\\nHow to find the pattern?\\nLet\\'s consider the following lists.\\nexamples: [A A A A A B B B B B C C]  n = 2\\nmax_nums = 5 (A appears 5 times, B appears 5 times, C appears 2 times)\\nmax_nums_count = 2 (Both A and B appears 5 times, which is max_nums)\\nn = 2\\nThen if we want to arrange these tasks, we want to seperate A by n spaces.\\nx - represents the cool down space\\n**A x x A x x A x x A x x A**\\nthen we want to insert B into the space between A\\nsince B appears also 5 times the list will look like the following\\n**A B x A B x A B x A B x A B**\\nthen we want to insert C\\nsince C only appears twice and we have 4 empty space left, so it won\\'t make the list longer.\\n**A B C A B C A B x A B x A B**\\n\\nSo the pattern is like:\\n**(A B C) (A B C) (A B x) (A B x) || A B**\\nBefore the last arrangement of A and B(the max_nums tasks), \\nthe pattern is (n+1)*(max_nums-1) i.e. (2+1) x (5-1) = 3x4 = 12\\nwhat is left is A, B. That is the max_nums_count.\\nSo the least length of this example would be 12+2 = 14\\n##### The pattern is (n+1)*(max_nums-1)+max_nums_count\\n\\nHowever, there is another situations we must consider.\\nThat is when there is not enough empty space for other tasks to fit in.\\nFor example:\\nexamples: [A A A A A B B B B B C C D D E ]  n = 2\\nmax_nums = 5 (A appears 5 times, B appears 5 times, C appears 2 times, D appears 2 times, E appears 1 time)\\nmax_nums_count = 2 (Both A and B appears 5 times, which is max_nums)\\nn = 2\\nThen if we want to arrange these tasks, we want to seperate A by n spaces.\\nx - represents the cool down space\\nOne possible way of arrangement:\\n**A x x A x x A x x A x x A** (Insert A)\\n**A B x A B x A B x A B x A B** (insert B)\\n**A B C A B C A B x A B x A B**(insert C)\\n**A B C A B C A B D A B D A B** (insert D) at this point there is no empty space left for E to fit in\\n**A B C A B C A B D A B D A B E** (insert E)\\nso there is no empty space in this example arrangement.\\nThen the least length would be **len(task)**.\\n\\nBut if n is not 2, but 4. \\nThen\\n(A x x x x) (A x x x x) (A x x x x) (A x x x x) || A (Insert A)\\n(A B x x x) (A B x x x) (A B x x x) (A B x x x) || A B (insert B)\\n(A B C x x) (A B C x x) (A B x x x) (A B x x x) ||A B (insert C)\\n(A B C D x) (A B C D x) (A B x x x) (A B x x x) || A B (insert D) \\n(A B C D E) (A B C D x) (A B x x x) (A B x x x) || A B (insert D) \\nthen the least length would be (n+1)*(max_nums-1)+max_nums_count = 5x4+2 =22\\n\\n\\nSo we take max(len(tasks), (n+1)*(max_nums-1)+max_nums_count) as the final answers.\\n\\n\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        count = list(collections.Counter(tasks).values())\\n        max_num = max(count)\\n        max_num_count = count.count(max_num)\\n        return max(len(tasks), (n+1)*(max_num-1)+ max_num_count)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 714460,
                "title": "java-99-70-faster-with-explanation",
                "content": "If you found the solution helpful, kindly upvote. :)\\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] charFreq= new int[26];\\n\\t\\tfor(char c:tasks)\\n\\t\\t{\\n\\t\\t\\tcharFreq[c-\\'A\\']++;\\t//Gets to the index of the array of the current character\\n\\t\\t}\\n\\t\\t\\n\\t\\tArrays.sort(charFreq);\\t//So that most frequent task is at the end of the array\\n\\t\\tint mostFreq= charFreq[25] -1;\\t//subtract 1, because we dont have to wait for the last one \\n\\t\\t\\n\\t\\tint idleSlots= mostFreq*n;\\n\\t\\t\\n\\t\\tfor(int i=24; i>=0; i--)\\n\\t\\t{\\n\\t\\t\\tidleSlots -= Math.min(charFreq[i], mostFreq);\\t\\n\\t\\t}\\n\\t\\t//If we could not fill up all the tasks, we will have to add them to the len of tasks\\n\\t\\treturn idleSlots > 0 ? idleSlots+tasks.length: tasks.length;  \\n\\t\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] charFreq= new int[26];\\n\\t\\tfor(char c:tasks)\\n\\t\\t{\\n\\t\\t\\tcharFreq[c-\\'A\\']++;\\t//Gets to the index of the array of the current character\\n\\t\\t}\\n\\t\\t\\n\\t\\tArrays.sort(charFreq);\\t//So that most frequent task is at the end of the array\\n\\t\\tint mostFreq= charFreq[25] -1;\\t//subtract 1, because we dont have to wait for the last one \\n\\t\\t\\n\\t\\tint idleSlots= mostFreq*n;\\n\\t\\t\\n\\t\\tfor(int i=24; i>=0; i--)\\n\\t\\t{\\n\\t\\t\\tidleSlots -= Math.min(charFreq[i], mostFreq);\\t\\n\\t\\t}\\n\\t\\t//If we could not fill up all the tasks, we will have to add them to the len of tasks\\n\\t\\treturn idleSlots > 0 ? idleSlots+tasks.length: tasks.length;  \\n\\t\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 635909,
                "title": "c-explain-the-slot-filling-simple-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int counter[26] = {0};\\n        for(char &c:tasks){\\n            counter[c - \\'A\\']++;\\n        }\\n        int max_val = 0;\\n        for(int &v: counter){\\n            max_val = max(v, max_val);\\n        }\\n        int max_cnt = 0;\\n        for(int &v: counter){\\n            if(v == max_val) max_cnt++;\\n        }\\n        return max((int)tasks.size(), (max_val - 1) * (n + 1) + max_cnt);\\n    }\\n};\\n```\\n\\n*Note: To make it easier to understand, I choose the most simple way to implement my algorithm. You may write your own high performance version after you understand the idea.*\\n\\nYou might have already read the official solution and known that we can reach the optimal arrangement by always choosing the availabe task with largest number of instances.\\n\\nFor example, if the there are 3 kinds of tasks that are not in cool down, says \"AAABBBCC\" to choose from, we choose A as the next task since there are 3 A\\'s, which is the most frequent one among all the available tasks.\\n\\nIn this article, the proof of this greedy approach will not be covered, because it is not the focus of this article. (However, if neccessary, I might write an extra paragraph to explain about it in the future.) What we care about is how to calculate the total time spent on this greedy arrangement, without actually traversing all the time slots.\\n\\n**To understand what happen during the greedy arrangement, you only need to consider three  cases.**\\n\\nLet\\'s suppose n = 2.\\n\\nCase 1. There are more than n kinds of tasks that have the largest number of instances.\\n\\n\"AAAABBBBCCCCDD\"\\n\\nIn this case, there will never be a idle time slot, because it takes more than n step for you to choose the same task again. So the answer is the total number of the tasks.\\n\\nNote that there are 3 kinds of tasks have the largest number of instances in the beginning, and after 6 steps, there will be 4 kinds of tasks. Therefore, the time interval between the same tasks you choose will only increase, which makes it impossible for idle time slots to appear.\\n\\nCase 2. There are less than n kinds of tasks that have the largest number of instances, and there are only few other tasks.\\n\\n\"AAAABBBBCC\"\\n\\nThe greedy arrangement will be \"ABCABCAB_AB\"\\n\\nYou can see that the main issue is that even though some kinds of tasks are all done, we need idle  time slots in order to finish those tasks with higher frequency.\\n\\nWe can see from the case that the time that we need to finish those tasks having the largest number of instances is \"(max_val - 1) * (n + 1) + max_cnt\". And actually, we don\\'t need to care about which time slot is idle. We only need to know the total time is \"(max_val - 1) * (n + 1) + max_cnt\" if the CPU ever idled.\\n\\nCase 3. There are less than n kinds of tasks that have the largest number of instances, and there are MANY other tasks.\\n\\n\"AAAABBBBCCDDEEFF\"\\n\\nThe greedy arrangement will be \"ABCABDABE*F*ABCDEF\"\\n\\nFrom case 2, we already know that there are at least \"(max_val - 1) * (n + 1) + max_cnt\" time slots to use. And in case 3 is what happens if all the time slots are filled and there are still tasks remain. \\n\\nYou can see two properties of the arrangement. First, there might be some \"extra\" task inserted to the expected \"(max_val - 1) * (n + 1) + max_cnt\" time slots. For example, the first F. Second, there might be some tasks remained after the expected \"(max_val - 1) * (n + 1) + max_cnt\" time slots, and all of them are ***non-repeated***. (Since the tasks require more time slots are NOT those having the largest number of instances.) Becase nothing is repeated, the remaining tasks can be done without cooldown.\\n\\nAs a result, there is no cooldown in Case 3. The answer is the total number of the tasks.\\n\\n**What can we see from those three cases?**\\n\\nThe most different between case 2 and case 3 is that \"whether the expected time slots (max_val - 1) * (n + 1) + max_cnt are enough or not.\" And actually, case 1 can be considered a variant of case 3. \\n\\nTherefore, we only need to answer one question - \"whether the expected time slots (max_val - 1) * (n + 1) + max_cnt are enough or not.\"  If it is, the expected time (max_val - 1) * (n + 1) + max_cnt is the answer. If not, the answer will be the total number of tasks. We can simply describle this by choosing the larger one between the expected time slots and the total number of tasks.\\n\\n**Why there are other slot filling solutions different from this one?**\\n\\nThose slot filling solutions (e.g. the official one, *idle slots filling*) are actually based on the same idea with this one. What we calculated are mathematically the same. We just explained from different points of view.\\n\\n*Hope this article is helpful to you.*",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int counter[26] = {0};\\n        for(char &c:tasks){\\n            counter[c - \\'A\\']++;\\n        }\\n        int max_val = 0;\\n        for(int &v: counter){\\n            max_val = max(v, max_val);\\n        }\\n        int max_cnt = 0;\\n        for(int &v: counter){\\n            if(v == max_val) max_cnt++;\\n        }\\n        return max((int)tasks.size(), (max_val - 1) * (n + 1) + max_cnt);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 287148,
                "title": "python-priority-queue-o-n-solution-with-concise-solution",
                "content": "The first thing you should be worried about is that no two same tasks can be within `n` distance of each other. \\n\\nThe second thing is the ordering of these tasks. Naturally, if I have lesser unique tasks, I\\'ll be worried about processor staying `IDLE`, which is bad. In other words **I have to be concerned about tasks with higher frequencies**. This makes it a perfect candidate for a Priority Queue, or a Max-Heap.\\n\\nExplained in a little more detail [here](https://abhinandandubey.github.io/posts/2019/05/05/Task-Scheduler.html) .\\n\\n\\n```python\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        # [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"] \\n        # A: 3 B: 4\\n        tasksMap = collections.Counter(tasks)\\n        q = []\\n        for task in tasksMap:\\n            heapq.heappush(q, (-1*tasksMap[task], task))\\n        \\n        count = 0\\n        while q:\\n            k = n+1\\n            temp = []\\n            while(k >0 and len(q)>0):\\n                # len(q) actually represents the number of unique tasks \\n                # so we are checking either we run out of k, or num of unique tasks\\n                task = heapq.heappop(q)\\n                print(\"EXEC \" + task[1])\\n                temp.append((-1*task[0]-1, task[1]))\\n                k-=1\\n                count +=1\\n            \\n            print(\"temp = {}\".format(temp))\\n            for task in temp:\\n                if task[0] > 0:\\n                    heapq.heappush(q, (-1*task[0], task[1]))\\n            \\n            \\n            print(k, len(q))\\n            if len(q) == 0: break\\n            count += k; # if k > 0, then it means we need to be idle\\n            print(\"IDLE\"*k)\\n            print(\"-----------\")\\n        return count\\n```\\n\\nThanks for reading through - and make sure you upvote if it helped you (gives me some validation ;) to post more solutions on discuss!)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        # [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"] \\n        # A: 3 B: 4\\n        tasksMap = collections.Counter(tasks)\\n        q = []\\n        for task in tasksMap:\\n            heapq.heappush(q, (-1*tasksMap[task], task))\\n        \\n        count = 0\\n        while q:\\n            k = n+1\\n            temp = []\\n            while(k >0 and len(q)>0):\\n                # len(q) actually represents the number of unique tasks \\n                # so we are checking either we run out of k, or num of unique tasks\\n                task = heapq.heappop(q)\\n                print(\"EXEC \" + task[1])\\n                temp.append((-1*task[0]-1, task[1]))\\n                k-=1\\n                count +=1\\n            \\n            print(\"temp = {}\".format(temp))\\n            for task in temp:\\n                if task[0] > 0:\\n                    heapq.heappush(q, (-1*task[0], task[1]))\\n            \\n            \\n            print(k, len(q))\\n            if len(q) == 0: break\\n            count += k; # if k > 0, then it means we need to be idle\\n            print(\"IDLE\"*k)\\n            print(\"-----------\")\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 275186,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        c = collections.Counter(tasks)\\n        vals = sorted(c.values(), reverse = True)\\n        \\n        max_val = vals[0] - 1\\n        max_idle_slots = max_val * n\\n        vals.pop(0)\\n        \\n        for val in vals:\\n            max_idle_slots -= min(max_val, val)\\n        return max_idle_slots + len(tasks) if max_idle_slots > 0 else len(tasks)\\n         \\n      \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        c = collections.Counter(tasks)\\n        vals = sorted(c.values(), reverse = True)\\n        \\n        max_val = vals[0] - 1\\n        max_idle_slots = max_val * n\\n        vals.pop(0)\\n        \\n        for val in vals:\\n            max_idle_slots -= min(max_val, val)\\n        return max_idle_slots + len(tasks) if max_idle_slots > 0 else len(tasks)\\n         \\n      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2612825,
                "title": "c-solution-simplified-with-explaination",
                "content": "STEPS:\\n\\n1. We need to use 3 data structures a hashmap, a max heap, and a queue of pair.\\n2. First we will store the frequency of all characters in a hashmap.\\n3. Then by using the hashmap store the frequencies in max heap, we are using a max heap because that will help us getting the least number of units but if we use a min heap we would not get the correct ans.\\n4. Now iterate until the maxheap is empty or the queue is empty, first pop the top element of the heap, increment the time and decrement the heap value and store it in the queue also store the wait time that when it will be processed again i.e. time + n. **Note**: only push the task in the queue if its value is greater than 0.\\n5. Also in each iteration check if the element at the queue front has wait time equal to current time or not if it is then insert it back into the heap.\\n6. if both queue and heap are empty the loop will stop and then return the time.\\n\\n**Time Complexity will be:** O(n)\\n\\n**Space Complexity will be:** O(3n)\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> mp;\\n        priority_queue<int>pq;\\n        queue<pair<int,int>> process;\\n        int ans;\\n        \\n        for(auto it : tasks){\\n            mp[it]++;\\n            \\n        }\\n        for(auto it : mp){\\n            pq.push(it.second);\\n        }\\n        \\n       int time=0;\\n        \\n        while(!pq.empty() or !process.empty()){\\n            \\n            \\n            if(!process.empty() and time == process.front().second){\\n                pq.push(process.front().first);\\n                process.pop();\\n            }\\n            \\n            time+=1;\\n            if(!pq.empty()){\\n                int task = pq.top();\\n                pq.pop();\\n                task--;\\n                if(task>0){\\n                    process.push({task,time+n});\\n                }\\n                \\n            }\\n            \\n        }\\n        \\n        return time;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char,int> mp;\\n        priority_queue<int>pq;\\n        queue<pair<int,int>> process;\\n        int ans;\\n        \\n        for(auto it : tasks){\\n            mp[it]++;\\n            \\n        }\\n        for(auto it : mp){\\n            pq.push(it.second);\\n        }\\n        \\n       int time=0;\\n        \\n        while(!pq.empty() or !process.empty()){\\n            \\n            \\n            if(!process.empty() and time == process.front().second){\\n                pq.push(process.front().first);\\n                process.pop();\\n            }\\n            \\n            time+=1;\\n            if(!pq.empty()){\\n                int task = pq.top();\\n                pq.pop();\\n                task--;\\n                if(task>0){\\n                    process.push({task,time+n});\\n                }\\n                \\n            }\\n            \\n        }\\n        \\n        return time;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2267905,
                "title": "greedy-c-sorting",
                "content": "Time Complexity O(N) \\nSpace Complexity O(1) Only hash space of size 26\\nSorting will take constant space because of fixed size array (26)\\n```\\n// Build a hashmap and sort by freq in decreasing order\\n// Fill the max Freq first at n separation and then fill the remaining in the empty slots\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int>hash(26,0);\\n        for(char c:tasks)hash[c-\\'A\\']++;\\n        sort(hash.begin(),hash.end(),greater<int>());\\n        int slots=hash[0]-1;\\n        int idle=slots*n;\\n        for(int i=1;i<hash.size();i++)\\n        {\\n            idle-=min(slots,hash[i]);\\n        }\\n        return tasks.size()+max(0,idle);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\n// Build a hashmap and sort by freq in decreasing order\\n// Fill the max Freq first at n separation and then fill the remaining in the empty slots\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int>hash(26,0);\\n        for(char c:tasks)hash[c-\\'A\\']++;\\n        sort(hash.begin(),hash.end(),greater<int>());\\n        int slots=hash[0]-1;\\n        int idle=slots*n;\\n        for(int i=1;i<hash.size();i++)\\n        {\\n            idle-=min(slots,hash[i]);\\n        }\\n        return tasks.size()+max(0,idle);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1874475,
                "title": "easy-solution-with-writeup",
                "content": "## **A mental model for solving this problem**\\n\\nConsider the following input:\\n\\n`tasks = [\"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"C\", \"C\", \"C\", \"D\", \"D\", \"E\"]`\\n`n = 2`\\n\\nFirst let\\'s find the most frequently occuring task and lay it out like so (an underscore represents a cooldown period):\\n\\n**A** _ _ **A** _ _ **A**\\n\\nOur goal is to insert all the other tasks into this sequence by filling the cooldown periods **first**.\\n\\nWe know any other task can be scheduled into this sequence without creating additional cooldown slots because:\\n1. The number of occurrences of any task *x* is less than or equal to the number occurences of the most frequrntly occuring task **A**; and\\n2. We can always find a sequence of *n* different tasks to schedule between any pair of tasks *x*.\\n\\n\\nLet\\'s insert in the second most frequently occuring task **B** (we fill the two cooldown slots first and append the third task to the end):\\n\\nA **B** _ A **B** _ A **B**\\n\\nNext let\\'s insert in the third most frequently occuring task **C** (we fill in the two cooldown slots first and append the third task to the end):\\n\\nA B **C** A B **C** A B **C**\\n\\nNext let\\'s insert the fourth most frequently occuring task **D**. At this point we\\'ve used up all our cooldown slots so we can insert these tasks pretty much anywhere we like as long as there are at least *n* tasks between every pair of **D** tasks.\\n\\n**D** A B **D** C A B C A B C\\n\\nLastly, the least frequently occuring task **E** can be inserted literally anywhere we like. Because it only occurs once there is no cooldown period we need to respect.\\n\\nD A B D C A B C A **E** B C\\n\\nThe sequence above is the shortest possible sequence these tasks can be scheduled in. Note that there are multiple possible sequences of this length.\\n\\n## **Code**\\nThe answer to the problem is the number of tasks + the number of cooldown periods.\\n\\n```\\n/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nvar leastInterval = function(tasks, n) {   \\n    // Count the occurence of each letter from A - Z in tasks\\n    const count = new Array(26).fill(0);\\n    for(const task of tasks){\\n        const idx = task.charCodeAt(0) - \\'A\\'.charCodeAt(0);\\n        count[idx] += 1;\\n    }\\n    \\n    // Sort count in descending order ... the largest task count is at index 0\\n    count.sort((a, b)=>b-a);\\n    \\n    const max_task_count = count[0];\\n    \\n    // Find out how many cooldown slots the most frequent tasks requires\\n    let num_cooldown_slots = (max_task_count-1) * n;\\n\\n    // Try and fill all the cooldown slots created by the most frequent tasks with other tasks\\n    for(let i = 1; i < count.length; ++i){\\n        if(count[i] === max_task_count){\\n            // Edge Case: If a task occurs max_task_count times then all but one of the tasks will fill a cooldown slot. \\n            num_cooldown_slots -= count[i]-1;\\n        }else{\\n            num_cooldown_slots -= count[i]; \\n        }\\n    }\\n\\t\\n\\t// The number of cooldown slots can go negative ... that simply means we\\'ve used them all up ... If it\\'s negative let\\'s clamp it to zero\\n    num_cooldown_slots = Math.max(num_cooldown_slots, 0);\\n\\t\\n    return tasks.length + num_cooldown_slots;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Greedy"
                ],
                "code": "```\\n/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nvar leastInterval = function(tasks, n) {   \\n    // Count the occurence of each letter from A - Z in tasks\\n    const count = new Array(26).fill(0);\\n    for(const task of tasks){\\n        const idx = task.charCodeAt(0) - \\'A\\'.charCodeAt(0);\\n        count[idx] += 1;\\n    }\\n    \\n    // Sort count in descending order ... the largest task count is at index 0\\n    count.sort((a, b)=>b-a);\\n    \\n    const max_task_count = count[0];\\n    \\n    // Find out how many cooldown slots the most frequent tasks requires\\n    let num_cooldown_slots = (max_task_count-1) * n;\\n\\n    // Try and fill all the cooldown slots created by the most frequent tasks with other tasks\\n    for(let i = 1; i < count.length; ++i){\\n        if(count[i] === max_task_count){\\n            // Edge Case: If a task occurs max_task_count times then all but one of the tasks will fill a cooldown slot. \\n            num_cooldown_slots -= count[i]-1;\\n        }else{\\n            num_cooldown_slots -= count[i]; \\n        }\\n    }\\n\\t\\n\\t// The number of cooldown slots can go negative ... that simply means we\\'ve used them all up ... If it\\'s negative let\\'s clamp it to zero\\n    num_cooldown_slots = Math.max(num_cooldown_slots, 0);\\n\\t\\n    return tasks.length + num_cooldown_slots;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1382283,
                "title": "c-greedy-solution-o-n",
                "content": "Runtime: 56 ms, faster than 85.72% of C++ online submissions for Task Scheduler.\\nMemory Usage: 34.3 MB, less than 89.22% of C++ online submissions for Task Scheduler.\\n\\n\\n```\\nWe have to assign each tasks such a way so that each task has cool down time period between them. \\nThe finish time of all tasks will always depend on the task with max frequency when cool down period n > 0.\\nIf the max frequency of all task is maxFreq and their count is maxFreqCount then we can find the \\nfinish time using the arithmetic interval formula easily. Let, we start from the time 1 assigning maxFreq\\ntask first. So, the last time of the maxFreq task will be => 1 + (maxFreq-1) * (n+1). Now if there is more than\\n1 maxFreq task then we can assign (maxFreqCount-1) tasks after each first maxFreq task and thus the finish\\ntime will be\\n\\n=> 1 + (maxFreq-1) * (n+1) + (maxFreqCount-1)\\n=> (maxFreq-1) * (n+1) + maxFreqCount\\n\\nNow this formula can give us the finish time for tasks which has size less or equal the formula output,\\notherwise the tasks size will be the final finish time.\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        if(n==0)return tasks.size();\\n        \\n        int freq[26] = {0};\\n        int maxFreq = INT_MIN;\\n        for(int i=0;i<tasks.size();i++)\\n        {\\n            freq[tasks[i]-\\'A\\']++;\\n            maxFreq = max(maxFreq,freq[tasks[i]-\\'A\\']);\\n        }\\n        \\n        int maxFreqCount  = 0;\\n        for(int i=0;i<26;i++)if(freq[i]==maxFreq)maxFreqCount++;\\n        \\n        return max((int)tasks.size(),(maxFreq-1)*(n+1)+maxFreqCount);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Greedy"
                ],
                "code": "```\\nWe have to assign each tasks such a way so that each task has cool down time period between them. \\nThe finish time of all tasks will always depend on the task with max frequency when cool down period n > 0.\\nIf the max frequency of all task is maxFreq and their count is maxFreqCount then we can find the \\nfinish time using the arithmetic interval formula easily. Let, we start from the time 1 assigning maxFreq\\ntask first. So, the last time of the maxFreq task will be => 1 + (maxFreq-1) * (n+1). Now if there is more than\\n1 maxFreq task then we can assign (maxFreqCount-1) tasks after each first maxFreq task and thus the finish\\ntime will be\\n\\n=> 1 + (maxFreq-1) * (n+1) + (maxFreqCount-1)\\n=> (maxFreq-1) * (n+1) + maxFreqCount\\n\\nNow this formula can give us the finish time for tasks which has size less or equal the formula output,\\notherwise the tasks size will be the final finish time.\\n```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        if(n==0)return tasks.size();\\n        \\n        int freq[26] = {0};\\n        int maxFreq = INT_MIN;\\n        for(int i=0;i<tasks.size();i++)\\n        {\\n            freq[tasks[i]-\\'A\\']++;\\n            maxFreq = max(maxFreq,freq[tasks[i]-\\'A\\']);\\n        }\\n        \\n        int maxFreqCount  = 0;\\n        for(int i=0;i<26;i++)if(freq[i]==maxFreq)maxFreqCount++;\\n        \\n        return max((int)tasks.size(),(maxFreq-1)*(n+1)+maxFreqCount);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1194451,
                "title": "intuitive-c-code-with-explanation",
                "content": "```\\nint leastInterval(vector<char>& tasks, int n) \\n    {\\n        int n_tasks=tasks.size();\\n        vector<int> freq(26,0);\\n        for(int i=0;i<tasks.size();i++)\\n        {\\n            freq[tasks[i]-\\'A\\']++;\\n        }\\n        //Sorting Frequency array for characters in decending order\\n        sort(freq.begin(),freq.end(),greater<int>());\\n        //Max number of gaps between max occuring character\\n        int gaps=freq[0]-1;\\n        //Total idle slots= Sum of Number of idle slots in each gap\\n        int idle_slots=gaps*n;\\n        //Alloting idle slots to characters with decreasing order of freq\\n        for(int i=1;i<freq.size();i++)\\n        {\\n            //If gaps>frequency of character, allocate only freq[i] amount of tasks to idle slots\\n            //Else allot all idle slots\\n            idle_slots-=min(freq[i],gaps);\\n        }\\n        //If idle slots remain after allocating, then total time slots used=total tasks+remaining idle slots\\n        if(idle_slots>0)\\n            return idle_slots+n_tasks;\\n        return n_tasks;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint leastInterval(vector<char>& tasks, int n) \\n    {\\n        int n_tasks=tasks.size();\\n        vector<int> freq(26,0);\\n        for(int i=0;i<tasks.size();i++)\\n        {\\n            freq[tasks[i]-\\'A\\']++;\\n        }\\n        //Sorting Frequency array for characters in decending order\\n        sort(freq.begin(),freq.end(),greater<int>());\\n        //Max number of gaps between max occuring character\\n        int gaps=freq[0]-1;\\n        //Total idle slots= Sum of Number of idle slots in each gap\\n        int idle_slots=gaps*n;\\n        //Alloting idle slots to characters with decreasing order of freq\\n        for(int i=1;i<freq.size();i++)\\n        {\\n            //If gaps>frequency of character, allocate only freq[i] amount of tasks to idle slots\\n            //Else allot all idle slots\\n            idle_slots-=min(freq[i],gaps);\\n        }\\n        //If idle slots remain after allocating, then total time slots used=total tasks+remaining idle slots\\n        if(idle_slots>0)\\n            return idle_slots+n_tasks;\\n        return n_tasks;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1184616,
                "title": "java-easy-to-understand-commented-greedy-heap",
                "content": "\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        //record the counts of frequencies of each task, in this greedy approach we need this\\n        //because we want to schedule the mosr frequent tasks first to be able to fill the cool down \\n        //zone with processes instead of idle time as much as possible. \\n        Map<Character, Integer> taskFreq = new HashMap<>();\\n        for(char task : tasks){\\n            //this is a fancy way of defaulting to one occurence if we havent seen the task before.\\n            taskFreq.put(task, taskFreq.getOrDefault(task,0)+1);\\n        }\\n        //this is a max heap storing the most frequent items at the top. \\n        Queue<Integer> maxFreqAtTop = new PriorityQueue<>(Collections.reverseOrder());\\n         for(Character task : taskFreq.keySet()){\\n             Integer occurences = taskFreq.get(task);\\n             maxFreqAtTop.add(occurences);\\n             \\n         }\\n         int totalTime = 0; \\n        //when the heap is empty we still have processes to complete.\\n         while(!maxFreqAtTop.isEmpty()){\\n             //this is because we need a record of the tasks that have not been completed and need\\n             //to be carried on to the next iteration.\\n             List<Integer> ranButNotCompleted = new ArrayList<Integer>();\\n             //until the end the total time in each cycle is always n+1. This is because it does not matter \\n             //whether we fill the cooldown interval with tasks or idle time or some combination of the two\\n             //the total cycle is n+1 time. (n+1 not just n because we have the task AND cool down not just cool down)\\n             int tasksRunThisCycle=0;\\n             //iterate  <= because we have task + cooldown and are zero-based.\\n             for(int task=0; task <= n ; task++){\\n                 //prevent null pointer\\n                 if(!maxFreqAtTop.isEmpty()){\\n                 Integer currentMax = maxFreqAtTop.poll();\\n                 //decrement because we have run the task\\n                 currentMax--; \\n                 //this variable is maintained in case we are on the last cycle and will not use the full n+1 time\\n                 tasksRunThisCycle++;\\n                //if the task has some occurences left just add it to the list to be added back to the heap for the next cycle.\\n                 if(currentMax!=0){\\n                     ranButNotCompleted.add(currentMax);\\n                 }                 \\n                 \\n             }\\n             }\\n             //add them back to the heap!\\n             maxFreqAtTop.addAll(ranButNotCompleted);\\n             //if the heap is still empty after adding back for the next iteration, this was our last iteration \\n             //this is the only time when the time added in this cycle is not just n+1 time slots. It is just the number of tasks that have been run. We dont need to account for idle time either because there are no more tasks to run so we dont need to add in idle time before completing them. This is why we add just the tasks run this cycle if the heap is empty after adding back the tasks that still need to be run again.\\n             totalTime += maxFreqAtTop.isEmpty() ? tasksRunThisCycle : n+1;\\n             \\n         }\\n        return totalTime;\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        //record the counts of frequencies of each task, in this greedy approach we need this\\n        //because we want to schedule the mosr frequent tasks first to be able to fill the cool down \\n        //zone with processes instead of idle time as much as possible. \\n        Map<Character, Integer> taskFreq = new HashMap<>();\\n        for(char task : tasks){\\n            //this is a fancy way of defaulting to one occurence if we havent seen the task before.\\n            taskFreq.put(task, taskFreq.getOrDefault(task,0)+1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 760339,
                "title": "very-easy-and-intuitive-c-solution-using-vectors",
                "content": "```\\nint leastInterval(vector<char>& tasks, int n) {\\n       vector<int> ch (26, 0);\\n        for(auto task: tasks)\\n            ch[task-\\'A\\']++;\\n        sort(ch.begin(), ch.end());\\n        int maxTotalSlots = ch[25] - 1;\\n        int idleSlots = maxTotalSlots * n;\\n        \\n        for(int i = 24; i >= 0; i--)\\n        {\\n            if(!ch[i])\\n                break;\\n            idleSlots -= min(ch[i], maxTotalSlots);\\n        }\\n        return tasks.size() + (idleSlots > 0 ? idleSlots : 0);\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint leastInterval(vector<char>& tasks, int n) {\\n       vector<int> ch (26, 0);\\n        for(auto task: tasks)\\n            ch[task-\\'A\\']++;\\n        sort(ch.begin(), ch.end());\\n        int maxTotalSlots = ch[25] - 1;\\n        int idleSlots = maxTotalSlots * n;\\n        \\n        for(int i = 24; i >= 0; i--)\\n        {\\n            if(!ch[i])\\n                break;\\n            idleSlots -= min(ch[i], maxTotalSlots);\\n        }\\n        return tasks.size() + (idleSlots > 0 ? idleSlots : 0);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 341568,
                "title": "c-8ms-100-o-n-solution-w-explanation",
                "content": "So the idea is to fill in empty slots based on interval of the maximum frequency task(s). The official explanation kinda sucked, so here is mine.\\n\\nAssume that the most frequent task occurs ```k``` times, and there are ```m``` of them. We can start by setting some lower boundaries on the number of intervals we need. Because there must be at least ```n``` intervals between each tasks, say we only bother to schedule one of the highest frequency tasks, then we need: ```(1_1 + n) + (1_2 + n) + (1_k-1 + n) + 1_k```. ```1_i``` is used to represent running tasks ```i``` of ```k```. Based on this, we know that we need at least ```(1 + n) + 1``` intervals to schedule just one of the maximum frequency count tasks. This leaves us with a minimum interval, and a lot of empty slots. We can represent running the tasks like this, with ```A``` being one of the most frequent tasks, and assuming ```n = 3``` as an example: \\n\\n```A _ _ _ * A _ _ _ * A _ _ _ * A _ _ _ * A _ _ _ * A```\\n\\n```_``` represents an empty slot, and ```*``` represent ***potential*** slots. By this I mean I add any number of other tasks to be scheduled in ```*``` and the task execution is still valid, since ```A``` is at least ```3``` apart from the next ```A```.\\n\\nAfter this skeleton frame, we are left with two kinds of tasks:\\n\\n1. **tasks with lower frequency count than A**\\n2. **tasks with equal frequency count to A**\\n\\nIf we look at how we would handle equal frequency count tasks, we can see that we would simply fill in the empty slots. Say now we have another tasks ```B, C ``` with the same frequencyt as ```A```. We would end up with:\\n\\n```A B C _ * A B C _ * A B C _ * A B C _ * A B C _ * A B C```\\n\\nAs one can see, handling tasks with the same frequency as maximum frequency **will increase minimum cycles by 1**. There is no other way to push in these tasks without increasing the minimum intervals in the frame or violating the rule of being ```n``` apart, or add in extra cooldown periods which is trivially greater than 1. This means increasing the minimum cycle by 1 is the best we can do.\\n\\nNow say we have tasks ```D, E``` that have lower frequency than ```A```. We would simply push them into the empty slots, but *we are guaranteed to be able to put them either in ```_``` or ```*```.* This is because we know that the number of ```_``` or ```*``` corresponds to ```freq(A) - 1```, and since ```freq(D), freq(E) < freq(A); freq(D), freq(E) <= freq(A)-1```. Thus, we can schedule them like this (assuming ```freq(D) = 3, freq(E) = 4```\\n\\n*after inserting Ds*: ```A B C D * A B C D * A B C D * A B C D * A B C _ * A B C```\\n*after inserting Es*: ```A B C D E * A B C D E * A B C D E * A B C D * A B C E * A B C```\\n\\nBasically, we find the next ```_```, and if it doesn\\'t exist, we go for ```*```. We can put arbitrarily any number of elements in in ```*```. \\n\\nThe important thing to notice here is that if we run out of empty slots, we must put the remaining lower frequency items into ```*```. We know we are guaranteed to be able to put all of them in ```*``` without incuring cooldown penalty. Thus, **the minimum number of intervals required is same as the number of tasks**. It is easy to see that if the total number of elements do not fit into the framework based on the highest frequency tasks, this is the result.\\n\\nSimilarly, if we do not run out of empty slots, then the minimum interval does not change. We know we won\\'t run out of slots, if the number of slots in the framework ```(n+1) * (max freq -1) + 1 + count of other max freq tasks = (n+1) * (max freq - 1) + total number of max freq tasks = total number of cycles in the minimum interval frame```. \\n\\nWith these two results, we can see that the minimum number of intervals must be **the maximum of number of tasks, or the number of slots in the frame, which is ```(n+1)(max freq - 1) + count of max freq tasks```.**\\n\\nThus, all we actually need is to calculate the number of maximum frequency tasks, and the maximum frequency, which can be done in ```O(n)``` time. Most of the work for this problem is to figure out how to optimally schedule the tasks, and prove that the configuration is optimal.\\n\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int maxFreq = 0, maxFreqCount = 0;\\n        vector<int> m(26, 0);\\n        for(const auto &n: tasks) maxFreq = max(maxFreq, ++m[n - \\'A\\']);\\n        for(const auto &n: m)\\n            if(n == maxCount) ++maxFreqCount;\\n        return max((int)tasks.size(), (n+1) * (maxFreq-1) + maxFreqCount);\\n    }\\n};\\n\\nauto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\\n```",
                "solutionTags": [],
                "code": "```k```\n```m```\n```n```\n```(1_1 + n) + (1_2 + n) + (1_k-1 + n) + 1_k```\n```1_i```\n```i```\n```k```\n```(1 + n) + 1```\n```A```\n```n = 3```\n```A _ _ _ * A _ _ _ * A _ _ _ * A _ _ _ * A _ _ _ * A```\n```_```\n```*```\n```*```\n```A```\n```3```\n```A```\n```B, C ```\n```A```\n```A B C _ * A B C _ * A B C _ * A B C _ * A B C _ * A B C```\n```n```\n```D, E```\n```A```\n```_```\n```*```\n```_```\n```*```\n```freq(A) - 1```\n```freq(D), freq(E) < freq(A); freq(D), freq(E) <= freq(A)-1```\n```freq(D) = 3, freq(E) = 4```\n```A B C D * A B C D * A B C D * A B C D * A B C _ * A B C```\n```A B C D E * A B C D E * A B C D E * A B C D * A B C E * A B C```\n```_```\n```*```\n```*```\n```*```\n```*```\n```(n+1) * (max freq -1) + 1 + count of other max freq tasks = (n+1) * (max freq - 1) + total number of max freq tasks = total number of cycles in the minimum interval frame```\n```(n+1)(max freq - 1) + count of max freq tasks```\n```O(n)```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int maxFreq = 0, maxFreqCount = 0;\\n        vector<int> m(26, 0);\\n        for(const auto &n: tasks) maxFreq = max(maxFreq, ++m[n - \\'A\\']);\\n        for(const auto &n: m)\\n            if(n == maxCount) ++maxFreqCount;\\n        return max((int)tasks.size(), (n+1) * (maxFreq-1) + maxFreqCount);\\n    }\\n};\\n\\nauto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\\n```",
                "codeTag": "C++"
            },
            {
                "id": 329505,
                "title": "oo-intuitive-solution-with-explanation-ac-priorityqueue-and-cooldown-table",
                "content": "Almost inspired from : https://leetcode.com/problems/task-scheduler/discuss/104531/Java-Solution-PriorityQueue-CoolDownTable, this solution emphasises more on the next cooldown time stamp for a task. Also, I made an object for the task node with the counts so it becomes easier to navigate through the code. I imagined this problem, like a thread wake up and sleep problem when there are a bunch of tasks to be done with a number of threads involved. I call the coolDownTable as a sleepingTable which stores the sleeping tasks along with their times at which they should be woken up.\\n\\n**Explanation**: \\n\\nWe store the counts of each task, and add those tasks into a serving queue. This serving queue is a max Heap arranged in order of decreasing instances of that task. As we process each task from the serving queue, we check if the sleepingTable contains any task at the current timestamp to be served. If yes, we wake that task up (remove it from the sleepingTable) and add it to the serving queue. After this, we process the task from the queue, which had highest counts available, and then serve that task (decrementing it\\'s count and adding it back to the sleepingTable if there were more instances of that task). If at any time, there were no tasks that could be served for the current Timestamp (with the cooldown constraint) or there were no tasks in the queue then this is the idle time for the scheduler and we simply increment the timer. We keep on doing this until the serving queue or sleepingTable was empty.\\n\\n**Here is the solution**, \\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> taskCountsMap = new HashMap<>();\\n        Queue<TaskNode> servingQueue = new PriorityQueue<>((a, b) -> b.counts - a.counts);\\n        Map<Integer, TaskNode> sleepingTable = new HashMap<>();\\n        int currentTs = 0;\\n        for (char task : tasks) {\\n            taskCountsMap.put(task, taskCountsMap.getOrDefault(task, 0) + 1);\\n        }\\n        for (Map.Entry<Character, Integer> entry: taskCountsMap.entrySet()) {\\n            servingQueue.add(new TaskNode(entry.getKey(), entry.getValue()));\\n        }\\n        \\n        while (!servingQueue.isEmpty() || !sleepingTable.isEmpty()) {\\n            if (sleepingTable.containsKey(currentTs)) {\\n                TaskNode taskToBeServed = sleepingTable.remove(currentTs);\\n                // add this task to the servingQueue\\n                servingQueue.offer(taskToBeServed);\\n            }        \\n            int coolDownTs = currentTs + n + 1; // added one since after the end of this loop, we will increment currentTs\\n            if (!servingQueue.isEmpty()) {\\n                // serve this task\\n                TaskNode currentTask = servingQueue.poll();\\n                int counts = currentTask.counts;\\n                counts -= 1;\\n                if (counts != 0) {\\n                    sleepingTable.put(coolDownTs, new TaskNode(currentTask.task, counts));\\n                }\\n            }\\n            currentTs++;\\n        }\\n        return currentTs;\\n    }\\n    \\n    class TaskNode {\\n        Character task;\\n        int counts;\\n        \\n        public TaskNode(Character task, int counts) {\\n            this.task = task;\\n            this.counts = counts;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> taskCountsMap = new HashMap<>();\\n        Queue<TaskNode> servingQueue = new PriorityQueue<>((a, b) -> b.counts - a.counts);\\n        Map<Integer, TaskNode> sleepingTable = new HashMap<>();\\n        int currentTs = 0;\\n        for (char task : tasks) {\\n            taskCountsMap.put(task, taskCountsMap.getOrDefault(task, 0) + 1);\\n        }\\n        for (Map.Entry<Character, Integer> entry: taskCountsMap.entrySet()) {\\n            servingQueue.add(new TaskNode(entry.getKey(), entry.getValue()));\\n        }\\n        \\n        while (!servingQueue.isEmpty() || !sleepingTable.isEmpty()) {\\n            if (sleepingTable.containsKey(currentTs)) {\\n                TaskNode taskToBeServed = sleepingTable.remove(currentTs);\\n                // add this task to the servingQueue\\n                servingQueue.offer(taskToBeServed);\\n            }        \\n            int coolDownTs = currentTs + n + 1; // added one since after the end of this loop, we will increment currentTs\\n            if (!servingQueue.isEmpty()) {\\n                // serve this task\\n                TaskNode currentTask = servingQueue.poll();\\n                int counts = currentTask.counts;\\n                counts -= 1;\\n                if (counts != 0) {\\n                    sleepingTable.put(coolDownTs, new TaskNode(currentTask.task, counts));\\n                }\\n            }\\n            currentTs++;\\n        }\\n        return currentTs;\\n    }\\n    \\n    class TaskNode {\\n        Character task;\\n        int counts;\\n        \\n        public TaskNode(Character task, int counts) {\\n            this.task = task;\\n            this.counts = counts;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 272698,
                "title": "python-o-n-time-hash-table",
                "content": "Same as approach 4 I believe.\\n```\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        d,count,l = {},0,len(tasks)\\n        if not n: return l\\n        for c in tasks:\\n            if c in d:\\n                d[c] +=1\\n            else:\\n                d[c] = 1\\n        max_val = max(d.values())\\n        for i in d.values():\\n            if i == max_val:\\n                count+=1\\n        return max((max_val-1)*(n+1)+count,l)\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Hash Table"
                ],
                "code": "```\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        d,count,l = {},0,len(tasks)\\n        if not n: return l\\n        for c in tasks:\\n            if c in d:\\n                d[c] +=1\\n            else:\\n                d[c] = 1\\n        max_val = max(d.values())\\n        for i in d.values():\\n            if i == max_val:\\n                count+=1\\n        return max((max_val-1)*(n+1)+count,l)\\n        \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 259329,
                "title": "o-n-javascript-solution",
                "content": "```\\nvar leastInterval = function(tasks, n) {\\n  if (n === 0) return tasks.length\\n  // \\u7EDF\\u8BA1\\u5404\\u4EFB\\u52A1\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\n  let map = {}\\n  for (let key of tasks) {\\n    map[key] = map[key] ? map[key]+1 : 1\\n  }\\n  // \\u6211\\u4EEC\\u53EA\\u9700\\u8981\\u8003\\u8651\\u51FA\\u73B0\\u6B21\\u6570\\u6700\\u591A\\u7684\\u4EFB\\u52A1\\n  // max \\u4E3A\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\uFF0Ccount \\u4E3A\\u6709\\u591A\\u5C11\\u79CD\\u4EFB\\u52A1\\u51FA\\u73B0\\u4E86\\u6700\\u591A\\u6B21\\n  let max = 0, count = 0\\n  Object.keys(map).forEach(key => {\\n    if (map[key] > max) {\\n      max = map[key]\\n      count = 1\\n    } else if (map[key] === max) {\\n      count++\\n    }\\n  })\\n  return Math.max((max-1)*(n+1) + count, tasks.length)\\n};\\n```\\n\\u91CD\\u70B9\\u89E3\\u91CA\\u4E00\\u4E0B (max-1)\\\\*(n+1)+count \\u8FD9\\u4E2A\\u5F0F\\u5B50\\u3002\\n\\u9996\\u5148\\u6211\\u4EEC\\u628A\\u51FA\\u73B0\\u6700\\u591A\\u6B21\\u7684\\u4EFB\\u52A1\\u505A\\u4E3A\\u6846\\u67B6\\uFF0C\\u4F8B\\u5982 [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\"] \\u5C31\\u5199\\u6210\\nAB...AB...AB\\n\\u56E0\\u4E3A\\u5269\\u4E0B\\u7684\\u5176\\u4ED6\\u4EFB\\u52A1\\u51FA\\u73B0\\u6B21\\u6570\\u90FD\\u6BD4A\\u548CB\\u5C11\\uFF0C\\u6240\\u4EE5\\u63D2\\u5165\\u5230\\u4ED6\\u4EEC\\u4E4B\\u95F4\\u5C31\\u53EF\\u4EE5\\u4E86\\u3002\\n\\u6211\\u4EEC\\u53EF\\u4EE5\\u628A\\u8FD9\\u4E2A\\u5F0F\\u5B50\\u5206\\u4E3A\\u4E24\\u90E8\\u5206\\u8BA1\\u7B97\\uFF1A\\n\\u7B2C\\u4E00\\u90E8\\u5206 (AB...AB...)\\u3002\\u6309\\u7167n\\u7684\\u8981\\u6C42\\uFF0C\\u4E24\\u4E2AA\\u4E4B\\u95F4\\u6700\\u5C11\\u6709n\\u4E2A\\u4EFB\\u52A1\\u6216idle\\uFF0C\\u6240\\u4EE5\\n(AB...AB...) = (max-1)\\\\*(n+1)\\n\\u7B2C\\u4E8C\\u90E8\\u5206 AB\\u3002\\u8FD9\\u4E00\\u90E8\\u5206\\u5C31\\u662F\\u51FA\\u73B0\\u6B21\\u6570\\u6700\\u591A\\u7684\\u4EFB\\u52A1\\u7684\\u4E2A\\u6570 count\\n\\u6240\\u4EE5 AB...AB...AB \\u6700\\u5C11\\u4E3A (max-1)\\\\*(n+1)+count\\n\\u5982\\u679C\\u4EFB\\u52A1\\u603B\\u4E2A\\u6570\\u8D85\\u8FC7\\u8FD9\\u4E2A\\u6570\\uFF0C\\u90A3\\u8BF4\\u660E\\u5728\\u4E24\\u4E2AA\\u4E4B\\u95F4\\u63D2\\u5165\\u4E86\\u5927\\u4E8En\\u4E2A\\u4EFB\\u52A1\\uFF0C\\u6B64\\u65F6\\u4E0D\\u9700\\u8981\\u63D2\\u5165idle\\uFF0C\\u6240\\u4EE5\\u6700\\u540E\\u62FF\\u8FD9\\u4E2A\\u503C\\u4E0E\\u4EFB\\u52A1\\u603B\\u4E2A\\u6570\\u4F5C\\u6BD4\\u8F83\\uFF0C\\u8FD4\\u56DE\\u5927\\u7684\\u90A3\\u4E00\\u4E2A\\u3002",
                "solutionTags": [],
                "code": "```\\nvar leastInterval = function(tasks, n) {\\n  if (n === 0) return tasks.length\\n  // \\u7EDF\\u8BA1\\u5404\\u4EFB\\u52A1\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\n  let map = {}\\n  for (let key of tasks) {\\n    map[key] = map[key] ? map[key]+1 : 1\\n  }\\n  // \\u6211\\u4EEC\\u53EA\\u9700\\u8981\\u8003\\u8651\\u51FA\\u73B0\\u6B21\\u6570\\u6700\\u591A\\u7684\\u4EFB\\u52A1\\n  // max \\u4E3A\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\uFF0Ccount \\u4E3A\\u6709\\u591A\\u5C11\\u79CD\\u4EFB\\u52A1\\u51FA\\u73B0\\u4E86\\u6700\\u591A\\u6B21\\n  let max = 0, count = 0\\n  Object.keys(map).forEach(key => {\\n    if (map[key] > max) {\\n      max = map[key]\\n      count = 1\\n    } else if (map[key] === max) {\\n      count++\\n    }\\n  })\\n  return Math.max((max-1)*(n+1) + count, tasks.length)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 141496,
                "title": "you-only-need-to-count-most-frequent-tasks-java-10ms",
                "content": "Imagine task A appeared 4 times, others less than 4. And n=2. You only need to arrange A in the way that doesn\\'t violate the rule first, then insert other tasks in any order:\\n`A - - A - - A - - A` \\nIt\\'s obvious that we need 6 other tasks to fill it. If other tasks are less 6, we need `(4 - 1) * (n + 1) + 1 = 10` tasks in total, if other tasks are equal to or more than 6, `tasks.length` will be our result.\\nNow if we have more than one tasks have the same max occurrence, the scheduling will look like this:\\n`A B - A B - A B - A B` \\nSo we only need to modify the formula by replacing `1` with the different amount of tasks that has the max occurrence: `(4 - 1) * (n + 1) + taskCountOfMax = 11`\\n\\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0, taskCountOfMax = 0;\\n        for (char task : tasks) {\\n            int c = ++count[task - \\'A\\'];\\n            if (c == max) {\\n                taskCountOfMax++;\\n            } else if (c > max) {\\n                max = c;\\n                taskCountOfMax = 1;\\n            }\\n        }\\n        return Math.max(tasks.length, (max - 1) * (n + 1) + taskCountOfMax);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0, taskCountOfMax = 0;\\n        for (char task : tasks) {\\n            int c = ++count[task - \\'A\\'];\\n            if (c == max) {\\n                taskCountOfMax++;\\n            } else if (c > max) {\\n                max = c;\\n                taskCountOfMax = 1;\\n            }\\n        }\\n        return Math.max(tasks.length, (max - 1) * (n + 1) + taskCountOfMax);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 139549,
                "title": "java-greedy-solution-with-comments",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // count char freq, task name doesn\\'t matter, only freq matters\\n        int[] freq = new int[26];\\n        for (char c: tasks) freq[c - \\'A\\']++;\\n        // sort first, so we have max freq at freq[25]\\n        Arrays.sort(freq);\\n        int time = 0;\\n        while (freq[25] > 0) { // while we still have task to do, start from most freq task\\n            // GREEDY\\n            // each round/row, try to finish n tasks\\n            for (int i = 0, p = 25; i <= n; i++) { // n is the cooling down factor, p points to the next task to consume\\n                if (p >= 0 && freq[p] > 0) { // if there is still task to do\\n                    freq[p]--; // do task\\n                    p--;       // move p to next freq task\\n                    time++;    // take one cycle\\n                } else if (freq[25] != 0) { // if this is NOT last row, need to fill in idle cycle\\n                    time++;    // take one cycle\\n                } // else freq[25] == 0 .   no more task to do and last row. we WON\\'T fill in idle cycle\\n            }\\n            // sort again so next round we\\'re going to start from most freq task and consume n task if possible\\n            Arrays.sort(freq);\\n        }\\n        return time; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // count char freq, task name doesn\\'t matter, only freq matters\\n        int[] freq = new int[26];\\n        for (char c: tasks) freq[c - \\'A\\']++;\\n        // sort first, so we have max freq at freq[25]\\n        Arrays.sort(freq);\\n        int time = 0;\\n        while (freq[25] > 0) { // while we still have task to do, start from most freq task\\n            // GREEDY\\n            // each round/row, try to finish n tasks\\n            for (int i = 0, p = 25; i <= n; i++) { // n is the cooling down factor, p points to the next task to consume\\n                if (p >= 0 && freq[p] > 0) { // if there is still task to do\\n                    freq[p]--; // do task\\n                    p--;       // move p to next freq task\\n                    time++;    // take one cycle\\n                } else if (freq[25] != 0) { // if this is NOT last row, need to fill in idle cycle\\n                    time++;    // take one cycle\\n                } // else freq[25] == 0 .   no more task to do and last row. we WON\\'T fill in idle cycle\\n            }\\n            // sort again so next round we\\'re going to start from most freq task and consume n task if possible\\n            Arrays.sort(freq);\\n        }\\n        return time; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2781024,
                "title": "easy-python-method-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTry to find the worst situation ->\\nThe max count of \\'A\\' is so unefficient that cpu need to waste so much times ->\\nEX:  tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\"], n = 2\\n\\nSo cpu need to wait\\nA->idle->idle->A->idle->idle->A->idle->idle->A->idle->idle->A->idle->idle->A\\nAnd that we find the output shoud be (n+1) * (the count of A -1) + 1 ->\\n3*(6-1)+1=16\\n\\nAnd then imagine that there is B * 6 in task and the cpu would be like->\\nA->B->idle->A->B->idle->A->B->idle->A->B->idle->A->B->idle->A->B\\n->\\nAnd that we find the output shoud be (n+1) * (the count of A -1) + 2 ->\\n3*(6-1)+2=17\\n\\nSo we find that when maxCount from 1(A) to 2(A+B) the task just need to change +1 to +2\\n\\n\\nAnd then we add C * 6 to task and find that ->\\nA->B->C->A->B->C->A->B->C->A->B->C->A->B->C->A->B->C\\nWe have no need to waste time! \\n\\nAnd then add D * 6 too ->\\nA->B->C->D->A->B->C->D->A->B->C->D->A->B->C->D->A->B->C->D->A->B->C->D\\n\\nSo we can finally find the rule :\\nThe anser is the max value from the worst situation :\\n(n+1) * ((maxValue) -1) + maxCount or we dont waste any time then just lens(tasks)\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse the counter to build the map efficiently\\nThen we can find the maxValue from counter \\nand find the maxCount too\\n\\nThen just return.\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n == 0: return len(tasks)\\n        counter = collections.Counter(tasks)\\n        maxCount = 0\\n        maxValue = max(counter.values())\\n        for cha, val in counter.items():\\n            if val == maxValue:\\n                maxCount += 1\\n        return max((n + 1) * (maxValue - 1) + maxCount ,len(tasks))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n == 0: return len(tasks)\\n        counter = collections.Counter(tasks)\\n        maxCount = 0\\n        maxValue = max(counter.values())\\n        for cha, val in counter.items():\\n            if val == maxValue:\\n                maxCount += 1\\n        return max((n + 1) * (maxValue - 1) + maxCount ,len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2417605,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char> tasks, int n) {\\n        int freq[26];\\n        for(int i=0;i<26;i++) freq[i] = 0; \\n        for(char task : tasks) ++freq[task-\\'A\\'];\\n\\n        int time = 0;\\n        priority_queue<int> taskQue;\\n        for (int f : freq) if (f != 0) taskQue.push(f);\\n        queue<pair<int,int>> upcomingTask; // task & time\\n        while(!taskQue.empty() || !upcomingTask.empty()) {\\n            if (!upcomingTask.empty() && upcomingTask.front().second <= time) {\\n                taskQue.push(upcomingTask.front().first);\\n                upcomingTask.pop();\\n            }\\n            time +=1; // timer\\n            if(!taskQue.empty()) {\\n                int task = taskQue.top() - 1; taskQue.pop();\\n                if(task > 0) upcomingTask.push({task, time + n});\\n            }\\n        }\\n        return time;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char> tasks, int n) {\\n        int freq[26];\\n        for(int i=0;i<26;i++) freq[i] = 0; \\n        for(char task : tasks) ++freq[task-\\'A\\'];\\n\\n        int time = 0;\\n        priority_queue<int> taskQue;\\n        for (int f : freq) if (f != 0) taskQue.push(f);\\n        queue<pair<int,int>> upcomingTask; // task & time\\n        while(!taskQue.empty() || !upcomingTask.empty()) {\\n            if (!upcomingTask.empty() && upcomingTask.front().second <= time) {\\n                taskQue.push(upcomingTask.front().first);\\n                upcomingTask.pop();\\n            }\\n            time +=1; // timer\\n            if(!taskQue.empty()) {\\n                int task = taskQue.top() - 1; taskQue.pop();\\n                if(task > 0) upcomingTask.push({task, time + n});\\n            }\\n        }\\n        return time;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2255719,
                "title": "c-using-greedy-and-priority-queue-approach",
                "content": "```\\nint leastInterval(vector<char> &arr, int n)\\n{\\n    // the best approach for this question is using our own mind, we can see that if we have a value A, and n value is 2\\n    // then there will be 3 space needed for it, one for A and other two is the cooldown period\\n    // we can device that formula using this only that output=(freq(A)-1)*(n+1)+1\\n    // if we have other values with same max frequency too, then we can add 1 to it, since they will be inbetween those\\n    // cooldown peroid only\\n\\n    unordered_map<char, int> mp;\\n    int mx = INT_MIN;\\n    for (char c : arr)\\n    {\\n        mp[c]++;\\n        mx = max(mx, mp[c]);\\n    }\\n    int ans = (mx - 1) * (n + 1);\\n    for (auto it : mp)\\n    {\\n        if (it.second == mx)\\n            ans++;\\n    }\\n    ans = max(ans, (int)arr.size());\\n    return ans;\\n}\\n\\nint leastInterval(vector<char> &arr, int n)\\n{\\n    // another approach is to use the heap for this process\\n    // we will go till a length of n in every iteration in our process\\n    // we will take the help of map for storing the count of every element\\n    unordered_map<char, int> mp;\\n    int ans = 0;\\n    for (int it : arr)\\n        mp[it]++;\\n    priority_queue<int> mx;\\n    for (auto it : mp)\\n        mx.push(it.second);\\n    \\n    // we will work on our heap, where every element will be used after a span of n \\n    \\n    while (!mx.empty())\\n    {\\n        vector<int> temp;\\n        for (int i = 0; i <= n; i++)\\n        {\\n            if (!mx.empty())\\n            {\\n                temp.push_back(mx.top());\\n                mx.pop();\\n            }\\n        }\\n        for (int it : temp)\\n        {\\n            if (--it > 0)\\n                mx.push(it);\\n        }\\n        ans += (mx.empty() ? temp.size() : n + 1);\\n    }\\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nint leastInterval(vector<char> &arr, int n)\\n{\\n    // the best approach for this question is using our own mind, we can see that if we have a value A, and n value is 2\\n    // then there will be 3 space needed for it, one for A and other two is the cooldown period\\n    // we can device that formula using this only that output=(freq(A)-1)*(n+1)+1\\n    // if we have other values with same max frequency too, then we can add 1 to it, since they will be inbetween those\\n    // cooldown peroid only\\n\\n    unordered_map<char, int> mp;\\n    int mx = INT_MIN;\\n    for (char c : arr)\\n    {\\n        mp[c]++;\\n        mx = max(mx, mp[c]);\\n    }\\n    int ans = (mx - 1) * (n + 1);\\n    for (auto it : mp)\\n    {\\n        if (it.second == mx)\\n            ans++;\\n    }\\n    ans = max(ans, (int)arr.size());\\n    return ans;\\n}\\n\\nint leastInterval(vector<char> &arr, int n)\\n{\\n    // another approach is to use the heap for this process\\n    // we will go till a length of n in every iteration in our process\\n    // we will take the help of map for storing the count of every element\\n    unordered_map<char, int> mp;\\n    int ans = 0;\\n    for (int it : arr)\\n        mp[it]++;\\n    priority_queue<int> mx;\\n    for (auto it : mp)\\n        mx.push(it.second);\\n    \\n    // we will work on our heap, where every element will be used after a span of n \\n    \\n    while (!mx.empty())\\n    {\\n        vector<int> temp;\\n        for (int i = 0; i <= n; i++)\\n        {\\n            if (!mx.empty())\\n            {\\n                temp.push_back(mx.top());\\n                mx.pop();\\n            }\\n        }\\n        for (int it : temp)\\n        {\\n            if (--it > 0)\\n                mx.push(it);\\n        }\\n        ans += (mx.empty() ? temp.size() : n + 1);\\n    }\\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2197186,
                "title": "python3-hashmap-maxheap-queue-tc-o-mlogm-n-sc-o-m-clearly-explained",
                "content": "Input: List of tasks with task-name.\\n\\nOutput: total time needed to process all tasks.\\n\\nData Structure:\\n- Hashmap: to keep count the number of tasks\\' appearances in the task-list.\\n- Max-heap: to return the max task-number. The reason for using this: due to idle (aka, n) time, the earlier we execute the task, the less time we have to wait (idle). \\n- Queue\\nIntuition: We can think as the max-heap and queue works together to process all tasks. The max-heap stores the \"ready-to-be-processsed\" tasks, in which we can use immediately, while the queue stores the \"processed tasks that is needed to wait for the eligible time_count + n time\" before getting to be added back to the max-heap.\\n\\nSteps: \\n- First, we count the tasks\\' appearance with hashmap.\\n- Second, we populate the tasks\\' counts into the max-heap indicating the ready-to-be-processed tasks.\\n- Third, we start the process, increment the time_count; pop the max-appearance task-count from heap, update the remaining task-count, add to the queue if eligible; then we check if there is any task having the eligible wait time to be added to the max-heap. As long as there are task in either the queue or the heap, we still need to keep processing (aka while loop).\\n\\n```\\nimport heapq\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_count = {}\\n        max_heap = []\\n        queue = collections.deque()\\n        time_count = 0\\n        \\n        # map the task with number of time it appears\\n        for task in tasks:\\n            if task not in task_count:\\n                task_count[task] = 1\\n            else:\\n                task_count[task] += 1\\n        \\n        # populate the max-heap, note, we don\\'t care about the name of the task since the problem doesn\\'t ask for it\\n        for task in task_count:\\n            heapq.heappush(max_heap, -task_count[task])\\n        \\n        # while there are tasks to be process in heap or queue\\n        while max_heap or queue:\\n            time_count += 1\\n            \\n            # if there is a task that is ready to be use\\n            if max_heap:\\n                # get the task with the greatest count. \\n\\t\\t\\t\\t# Note: we just get the count, not really the task it self since we only care about the updating of time_count at the end\\n\\t\\t\\t\\tcount = heapq.heappop(max_heap) \\n\\t\\t\\t\\t\\n                # since we store the count as negative in the max-heap, we convert it back to positive, then deduct it with 1 indicating we just used it once\\n                count = -count - 1 \\n                \\n                # if there are still task to be done, we append it to the queue with the time we need to wait\\n                if count:\\n                    queue.append((count, time_count + n))\\n            \\n            # if the queue is not empty and the queue\\'s front-element\\'s wait time is legit with the current time, we consider it as \"ready\" and push to the heap\\n            if queue and queue[0][1] == time_count:\\n                heapq.heappush(max_heap, -queue.popleft()[0])\\n                \\n        return time_count\\n    \\n    # TC: O(mlogm + n): Populate Hashmap - O(m); Populate Heap - O(mlogm); Process between max-heap and queue - O(mlogm + n) with m is the number of task\\n    # SC: O(m): Storage for the hashmap and the heap\\n\\n```\\nPls give an upvote if this helps :)",
                "solutionTags": [
                    "Python3",
                    "Queue"
                ],
                "code": "```\\nimport heapq\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_count = {}\\n        max_heap = []\\n        queue = collections.deque()\\n        time_count = 0\\n        \\n        # map the task with number of time it appears\\n        for task in tasks:\\n            if task not in task_count:\\n                task_count[task] = 1\\n            else:\\n                task_count[task] += 1\\n        \\n        # populate the max-heap, note, we don\\'t care about the name of the task since the problem doesn\\'t ask for it\\n        for task in task_count:\\n            heapq.heappush(max_heap, -task_count[task])\\n        \\n        # while there are tasks to be process in heap or queue\\n        while max_heap or queue:\\n            time_count += 1\\n            \\n            # if there is a task that is ready to be use\\n            if max_heap:\\n                # get the task with the greatest count. \\n\\t\\t\\t\\t# Note: we just get the count, not really the task it self since we only care about the updating of time_count at the end\\n\\t\\t\\t\\tcount = heapq.heappop(max_heap) \\n\\t\\t\\t\\t\\n                # since we store the count as negative in the max-heap, we convert it back to positive, then deduct it with 1 indicating we just used it once\\n                count = -count - 1 \\n                \\n                # if there are still task to be done, we append it to the queue with the time we need to wait\\n                if count:\\n                    queue.append((count, time_count + n))\\n            \\n            # if the queue is not empty and the queue\\'s front-element\\'s wait time is legit with the current time, we consider it as \"ready\" and push to the heap\\n            if queue and queue[0][1] == time_count:\\n                heapq.heappush(max_heap, -queue.popleft()[0])\\n                \\n        return time_count\\n    \\n    # TC: O(mlogm + n): Populate Hashmap - O(m); Populate Heap - O(mlogm); Process between max-heap and queue - O(mlogm + n) with m is the number of task\\n    # SC: O(m): Storage for the hashmap and the heap\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1318448,
                "title": "c-prioroty-queue-solution-simple-and-clear",
                "content": "Idea is to add tasks to a priority pq based on the highest frequency.\\n\\nAnd the we iterate over cycles[`1`-`n+1`], pick highest frequency then decrease frequency and if after decrease `frequency > 0` put them back to pq again then do the next cycle.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> count;\\n        for(auto & t : tasks) {\\n            count[t]++;\\n        }\\n        priority_queue<int> pq;\\n        for(auto & c : count) {\\n            pq.push(c.second);\\n        }\\n        \\n        int ret = 0;\\n        while(!pq.empty()) {\\n            int cycle = n+1;\\n            vector<int> tmp;\\n            //execute for one cycle pick highest frequent task each time\\n            while(cycle > 0 && !pq.empty()) {\\n                int top = pq.top(); pq.pop();\\n                top--; cycle--; ret++;\\n                tmp.push_back(top);\\n            }\\n            //add back tasks for the next cycle\\n            for(auto & t : tmp) {\\n                if(t > 0) pq.push(t);\\n            }\\n            if(pq.empty()) break;\\n            //if we still have remains in that cycle then add idle \\n            if(cycle > 0) ret += cycle;\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> count;\\n        for(auto & t : tasks) {\\n            count[t]++;\\n        }\\n        priority_queue<int> pq;\\n        for(auto & c : count) {\\n            pq.push(c.second);\\n        }\\n        \\n        int ret = 0;\\n        while(!pq.empty()) {\\n            int cycle = n+1;\\n            vector<int> tmp;\\n            //execute for one cycle pick highest frequent task each time\\n            while(cycle > 0 && !pq.empty()) {\\n                int top = pq.top(); pq.pop();\\n                top--; cycle--; ret++;\\n                tmp.push_back(top);\\n            }\\n            //add back tasks for the next cycle\\n            for(auto & t : tmp) {\\n                if(t > 0) pq.push(t);\\n            }\\n            if(pq.empty()) break;\\n            //if we still have remains in that cycle then add idle \\n            if(cycle > 0) ret += cycle;\\n        }\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1149821,
                "title": "everything-explained-in-desi-language",
                "content": "eg. \\n1.AAB n=2\\n2.AABBC n=2\\n\\n(max-1) * (n+1) + maxCount\\n \\n \\n solving 1:\\n kuch aisa milna chaiye A _ _ A ,bcz n=2 to hrr repeatitive me ye gap to aana hi aana chaiye\\n now ye gap hrr same Char me to given hi hai \"n\",\\n A _ _ A, ab is expression ki length kya hogi? kaise niklegi?\\n dekho hrr 2 A k beech me 2 ka gap hoga hi hoga\\n ab agar ye 3 A hote to -- kuch aise hota  A _ _ A _ _ A\\n dekho yahan gap kitna hoga total,,,, n=2 or 3 baar repeat ho ra hai A,that means hrr 2 A k beech me \"n\" ka gap hoga hi hoga to total => (3-1) * n  => 2 * 2 = 4\\nor eg le lo == A _ _ A _ _ A _ _ A  => (4-1) * n =>3 * 2 =6\\n\\nthik hai no. of gaps kitne aayenge beech me ye pta lg gya -----> (max-1) * n\\n ab agar hum ye bole ki jo repeat ho rha hai like A, to wo hrr \"n\" gap me, pehle gap se hi to pehle aayega/aara hai\\n like in this ==> A _ _ A _ _ A\\n\\t\\t\\t\\t\\t\\t   |        |       |\\nto ek hisaab se hum ye bol re hai ki bhyi , gap tum jb bhi apni gajah add ho to bss apne se pehle hmare ek A ko add kr lena, bcz whi uski shi jagah hai like ==> | A _ _  |  A _ _  |\\n ab ek A rehe gya uska kya?\\n \\n hmm ek baat to tey hai ki ab jo Char honge A se kmm freq k wo in sb gaps me add ho jayenge without any tension ki same adjacent honge\\n thik hai,  ab ye bacha last A bolta hai ki mai hi sbse zyada repeat ho ra hu ,mujhe pehle gaps k hisaab se pehle k A to add ho gye meri max freq hai to uss baat ka 1 extra space dedo\\n \\n ok ==> A _ _ A _ _ A\\n**eg ,, AABC    n=2**                     answer should be this = A B C A\\n max freq = 2 A\\n gaps kitne honge = (2-1)2 = 2      A _ _ A\\n ab bolte hai gap tum hmare ek A ko bhi saath le lo\\n to length kya aayegi = (2-1) * (2+1) = 3     A _ _\\n ab less freq wale to adjust kr hi lenge = A B C\\n ab sirf ek hi hai jo max freq ka hai, to (ek extra space)maxCount de do = A B C _\\n final answer  = A B C A\\n \\n **Another eg :**\\n AABBC    n=2\\n max freq  2 A , 2 B\\n total gaps = (2-1) * 2 = 2    =>  A _ _ A\\n ab or bache hai unko settle kr do   => A B C A\\n thik hai ab hmare pass ek A and ek B bacha\\n ab last hmne kya bola tha ki ek hi tha jo max freq ka tha to ek (extra space) maxCount de do, but yahan 2 hai jo max freq k hai i.e A 2 and B 2\\n that means maxCount 2 => A B C _ _\\n yahan bache settle kr do\\n  => A B C A B,     that\\'s it.\\n \\n \\n\\n\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        \\n        for (char c: tasks){\\n            count[c-\\'A\\']++;\\n            max = Math.max(count[c-\\'A\\'], max);\\n        }\\n        \\n        for (int i: count){\\n            if (i == max)   maxCount++;\\n        }\\n        \\n        return Math.max(tasks.length, (max-1) * (n+1) + maxCount);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] count = new int[26];\\n        int max = 0;\\n        int maxCount = 0;\\n        \\n        for (char c: tasks){\\n            count[c-\\'A\\']++;\\n            max = Math.max(count[c-\\'A\\'], max);\\n        }\\n        \\n        for (int i: count){\\n            if (i == max)   maxCount++;\\n        }\\n        \\n        return Math.max(tasks.length, (max-1) * (n+1) + maxCount);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 548002,
                "title": "both-priority-queue-heap-and-array-approach-explained-with-code",
                "content": "If you are reading this I would first personally suggest you to **go through below points** to understand the solution better. Understanding below points would make you code/understand by yourself. \\n\\n1) The tasks with the currently maximum frequency will contribute to a large number of idle cycles in the future, if not executed with appropriate interleavings with the other tasks. Thus, we need to re-execute such a task as soon as its cooling time is finished.\\n2) The Characters hold no importance in our question only frequency does.\\n3) So that is why we do sorting or make a Heap of frequencies.\\n4) Run the loop n+1(cooling period +1) times as it is inclusive.\\n5) Consider a case 10A, 2B, 2C. Now there will be a time when only A will remain so beacuse of cooling time we will need to wait n+1 time for each A. However when last A remains we need not wait n+1 times and exit as soon as we add time cycle for that A itself.\\n\\nI personally prefer Priority Queue approach understanding that will make you understand array implementaion quickly.\\n\\n**Heap implmentation**\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        /* create a Map of the fequency of each task */\\n        Map<Character,Integer> store = new HashMap<>();\\n        for(char ch : tasks)\\n            store.put(ch,store.getOrDefault(ch,0)+1);\\n        \\n        PriorityQueue<Integer> heap = new PriorityQueue<>((obj1,obj2)->(obj2-obj1));\\n        heap.addAll(store.values());\\n        \\n        int cycles=0;\\n        while(!heap.isEmpty()){\\n            List<Integer> temp = new ArrayList<>();\\n            for(int i=0;i<n+1;i++){\\n                if(!heap.isEmpty())\\n                    temp.add(heap.remove());\\n            }\\n            \\n            for(int each : temp){\\n                if(each-1>0)\\n                    heap.add(--each);\\n            }\\n            \\n            cycles += heap.isEmpty() ? temp.size() : n+1;\\n        }\\n    return cycles;\\n    }\\n}\\n```\\n\\n**Array Implementation**\\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] map = new int[26];\\n        for (char c: tasks)\\n            map[c - \\'A\\']++;\\n        Arrays.sort(map);\\n        int time = 0;\\n        \\n        while (map[25] > 0) { /* compare this with heap being empty */\\n            int i = 0;\\n            while (i <= n) {\\n                if (map[25] == 0) /* if heap empty we are done  so say if only A is left as 3 and at last A we donot need to wait for again n times as we are not left with anymore A so we need to return time and avoid incrementing it.*/\\n                    break;\\n                if (i < 26 && map[25 - i] > 0)\\n                    map[25 - i]--;\\n                time++;\\n                i++;\\n            }\\n            Arrays.sort(map);\\n        }\\n        return time;\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        /* create a Map of the fequency of each task */\\n        Map<Character,Integer> store = new HashMap<>();\\n        for(char ch : tasks)\\n            store.put(ch,store.getOrDefault(ch,0)+1);\\n        \\n        PriorityQueue<Integer> heap = new PriorityQueue<>((obj1,obj2)->(obj2-obj1));\\n        heap.addAll(store.values());\\n        \\n        int cycles=0;\\n        while(!heap.isEmpty()){\\n            List<Integer> temp = new ArrayList<>();\\n            for(int i=0;i<n+1;i++){\\n                if(!heap.isEmpty())\\n                    temp.add(heap.remove());\\n            }\\n            \\n            for(int each : temp){\\n                if(each-1>0)\\n                    heap.add(--each);\\n            }\\n            \\n            cycles += heap.isEmpty() ? temp.size() : n+1;\\n        }\\n    return cycles;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] map = new int[26];\\n        for (char c: tasks)\\n            map[c - \\'A\\']++;\\n        Arrays.sort(map);\\n        int time = 0;\\n        \\n        while (map[25] > 0) { /* compare this with heap being empty */\\n            int i = 0;\\n            while (i <= n) {\\n                if (map[25] == 0) /* if heap empty we are done  so say if only A is left as 3 and at last A we donot need to wait for again n times as we are not left with anymore A so we need to return time and avoid incrementing it.*/\\n                    break;\\n                if (i < 26 && map[25 - i] > 0)\\n                    map[25 - i]--;\\n                time++;\\n                i++;\\n            }\\n            Arrays.sort(map);\\n        }\\n        return time;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 472620,
                "title": "java-this-is-really-hard-problem-not-medium",
                "content": "```\\npublic int leastInterval(char[] tasks, int n) {\\n\\tif (tasks == null || tasks.length == 0 || n < 0) return -1;\\n\\n\\tMap<Character, Integer> map = new HashMap<>();\\n\\tfor (char c : tasks)\\n\\t\\tmap.merge(c, 1, Integer::sum);\\n\\n\\tPriorityQueue<Map.Entry<Character, Integer>> maxHeap = \\n\\t\\tnew PriorityQueue<Map.Entry<Character, Integer>>(\\n\\t\\t\\t(e1, e2) -> Integer.compare(e2.getValue(), e1.getValue()));\\n\\n\\tmaxHeap.addAll(map.entrySet());\\n\\n\\tint intervals = 0;\\n\\n\\twhile (!maxHeap.isEmpty()) {\\n\\n\\t\\tint slots = n + 1;\\n\\n\\t\\tList<Map.Entry<Character, Integer>> waited = new LinkedList<>();\\n\\n\\t\\twhile (slots > 0 && !maxHeap.isEmpty()) { // Task execution\\n\\t\\t\\tintervals++;\\n\\t\\t\\tslots--;\\n\\n\\t\\t\\tMap.Entry<Character, Integer> current = maxHeap.poll();\\n\\t\\t\\tcurrent.setValue(current.getValue() - 1);\\n\\n\\t\\t\\tif (current.getValue() > 0)\\n\\t\\t\\t\\twaited.add(current);         \\n\\t\\t}\\n\\n\\t\\tmaxHeap.addAll(waited);\\n\\n\\t\\tif (!maxHeap.isEmpty()) // Means that tasks are there to be executed, so, add the idles\\n\\t\\t\\tintervals += slots;\\n\\t}\\n\\treturn intervals;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int leastInterval(char[] tasks, int n) {\\n\\tif (tasks == null || tasks.length == 0 || n < 0) return -1;\\n\\n\\tMap<Character, Integer> map = new HashMap<>();\\n\\tfor (char c : tasks)\\n\\t\\tmap.merge(c, 1, Integer::sum);\\n\\n\\tPriorityQueue<Map.Entry<Character, Integer>> maxHeap = \\n\\t\\tnew PriorityQueue<Map.Entry<Character, Integer>>(\\n\\t\\t\\t(e1, e2) -> Integer.compare(e2.getValue(), e1.getValue()));\\n\\n\\tmaxHeap.addAll(map.entrySet());\\n\\n\\tint intervals = 0;\\n\\n\\twhile (!maxHeap.isEmpty()) {\\n\\n\\t\\tint slots = n + 1;\\n\\n\\t\\tList<Map.Entry<Character, Integer>> waited = new LinkedList<>();\\n\\n\\t\\twhile (slots > 0 && !maxHeap.isEmpty()) { // Task execution\\n\\t\\t\\tintervals++;\\n\\t\\t\\tslots--;\\n\\n\\t\\t\\tMap.Entry<Character, Integer> current = maxHeap.poll();\\n\\t\\t\\tcurrent.setValue(current.getValue() - 1);\\n\\n\\t\\t\\tif (current.getValue() > 0)\\n\\t\\t\\t\\twaited.add(current);         \\n\\t\\t}\\n\\n\\t\\tmaxHeap.addAll(waited);\\n\\n\\t\\tif (!maxHeap.isEmpty()) // Means that tasks are there to be executed, so, add the idles\\n\\t\\t\\tintervals += slots;\\n\\t}\\n\\treturn intervals;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 466959,
                "title": "python-easiest-solution",
                "content": "Key insight: the total required is len(tasks) + idles\\n\\nWe only need to worry about the case where there aren\\'t enough tasks to fill the idles because if there are enough tasks to fill the idles, we just return the length of tasks. \\n\\t\\t\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if len(tasks) <= 1:\\n            return len(tasks)\\n        \\n        # Key insight: the total required is len(tasks) + idles\\n        # We only need to worry about the case where tasks don\\'t fill the idles\\n        \\n        max_count = [None, -1]\\n        counts = {}\\n        for t in tasks: \\n            if t not in counts:\\n                counts[t] = 1\\n            else:\\n                counts[t] += 1\\n            if counts[t] > max_count[1]:\\n                max_count[1] = counts[t]\\n                max_count[0] = t\\n        \\n        # worse case scenario\\n        idles = (max_count[1]-1) * n\\n        \\n        del counts[max_count[0]]\\n        \\n        for task, c in counts.items():\\n            subtract = c \\n            # if frequency is the same as max_freq, its addition will not take away idles\\n            if subtract > (max_count[1]-1):\\n                subtract = max_count[1]-1\\n            idles -= subtract\\n        \\n\\t\\t# if not idles are needed (there are more than enough elements filling the space in between), idles will end up being negative, so we just returns the length of tasks\\n        return max(len(tasks)+idles, len(tasks))\\n        \\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if len(tasks) <= 1:\\n            return len(tasks)\\n        \\n        # Key insight: the total required is len(tasks) + idles\\n        # We only need to worry about the case where tasks don\\'t fill the idles\\n        \\n        max_count = [None, -1]\\n        counts = {}\\n        for t in tasks: \\n            if t not in counts:\\n                counts[t] = 1\\n            else:\\n                counts[t] += 1\\n            if counts[t] > max_count[1]:\\n                max_count[1] = counts[t]\\n                max_count[0] = t\\n        \\n        # worse case scenario\\n        idles = (max_count[1]-1) * n\\n        \\n        del counts[max_count[0]]\\n        \\n        for task, c in counts.items():\\n            subtract = c \\n            # if frequency is the same as max_freq, its addition will not take away idles\\n            if subtract > (max_count[1]-1):\\n                subtract = max_count[1]-1\\n            idles -= subtract\\n        \\n\\t\\t# if not idles are needed (there are more than enough elements filling the space in between), idles will end up being negative, so we just returns the length of tasks\\n        return max(len(tasks)+idles, len(tasks))\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 393975,
                "title": "c-concise-solution-beat100",
                "content": "```\\n#define min(a,b) (a<b?a:b)\\n#define max(a,b) (a>b?a:b)\\n\\nint leastInterval(char* tasks, int tasksSize, int n){\\n    int map[26]={0};\\n    int highFreq = 0;\\n\\n    for (int i = 0 ; i < tasksSize ; i++)\\n    {\\n        map[tasks[i]-\\'A\\'] += 1;\\n        highFreq = max(map[tasks[i]-\\'A\\'], highFreq) ;\\n    }\\n    \\n    highFreq = highFreq-1;\\n    int idleTask = highFreq*(n+1);\\n    \\n    for (int i = 0 ; i < 26 ; i++)\\n    {\\n        idleTask -= min(map[i], highFreq);\\n    }\\n    \\n    return idleTask > 0 ? idleTask+tasksSize : tasksSize; \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n#define min(a,b) (a<b?a:b)\\n#define max(a,b) (a>b?a:b)\\n\\nint leastInterval(char* tasks, int tasksSize, int n){\\n    int map[26]={0};\\n    int highFreq = 0;\\n\\n    for (int i = 0 ; i < tasksSize ; i++)\\n    {\\n        map[tasks[i]-\\'A\\'] += 1;\\n        highFreq = max(map[tasks[i]-\\'A\\'], highFreq) ;\\n    }\\n    \\n    highFreq = highFreq-1;\\n    int idleTask = highFreq*(n+1);\\n    \\n    for (int i = 0 ; i < 26 ; i++)\\n    {\\n        idleTask -= min(map[i], highFreq);\\n    }\\n    \\n    return idleTask > 0 ? idleTask+tasksSize : tasksSize; \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 354713,
                "title": "c-concise-solution",
                "content": "* `hi` is the highest frequency of any single task.\\n* `hiCount` is the number of tasks that occur `hi` times.\\n* The general formula for the answer is `(hi - 1) * (n + 1) + hiCount`.\\n* With an input such as `tasks = {\\'A\\', \\'A\\', \\'B\\', \\'C\\', \\'D\\'}, n = 1`, the formula yields too small of a number, so we return the size of the input array instead.\\n```cpp\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tvector<int> count(26);\\n\\tint hi = 0, hiCount = 0;\\n\\tfor(char t : tasks) hi = max(hi, ++count[t - \\'A\\']);\\n\\tfor(int i = 0; i < 26; i++) if(count[i] == hi) hiCount++;\\n\\treturn max((int)tasks.size(), (hi - 1) * (n + 1) + hiCount);\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tvector<int> count(26);\\n\\tint hi = 0, hiCount = 0;\\n\\tfor(char t : tasks) hi = max(hi, ++count[t - \\'A\\']);\\n\\tfor(int i = 0; i < 26; i++) if(count[i] == hi) hiCount++;\\n\\treturn max((int)tasks.size(), (hi - 1) * (n + 1) + hiCount);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 314168,
                "title": "different-python-greedy-solutions",
                "content": "Please see and vote for my solution for these similar problems.\\n[767. Reorganize String](https://leetcode.com/problems/reorganize-string/discuss/442993/Python-greedy-solution-(24ms-beat-98.17))\\n[621. Task Scheduler](https://leetcode.com/problems/task-scheduler/discuss/314168/Different-Python-greedy-solutions)\\n[358. Rearrange String k Distance Apart](https://leetcode.com/problems/rearrange-string-k-distance-apart/discuss/444186/Different-Python-Greedy-solutions)\\n\\nSolution 1: naive greedy solution\\nstep 1: get the sorted frequences of different letters in descending order: f_1, f_2, ..., f_l\\nif l >= n + 1: schedule the first (n + 1) tasks, update the sorted frequencies, go to step 1\\nif l < n + 1: add some idles until all tasks are finished\\n```\\n    def leastInterval(self, tasks, n):\\n        res = 0\\n        freqs = sorted(list(Counter(tasks).values()), reverse=True)\\n        while len(freqs) >= n + 1:\\n            for i in range(n + 1):\\n                freqs[i] -= 1\\n            res += n + 1\\n            freqs = sorted([f for f in freqs if f > 0], reverse=True)\\n        if freqs == []:\\n            return res\\n        f_max = freqs[0]\\n        num_f_max = freqs.count(f_max)\\n        res += num_f_max + (f_max - 1) * (n + 1)\\n        return res\\n```\\n\\nSolution 2: our intuition is to schedule these tasks row-by-row, where each row has at least n + 1 tasks.\\nget the sorted frequences of different letters in descending order: f_1, f_2, ..., f_l, so we get l columns with heights f_1, f_2, ..., f_l.\\nfind the maximal frequency \\'f_max\\' and its repeated times \\'num_f_max\\',\\nif num_f_max >= n + 1: the scheduled sequence is row_1, row_2, ..., row_(f_max)\\nif num_f_max < n + 1: there are (n + 1 - num_f_max) * (f_max - 1) empty spaces needed to be filled, \\nwe can use the remaining tasks to fill them column-by-column \\nfrom the tasks from higher frequency to lower one, add idles if necessary. \\nThe scheduled sequence is row_1, row_2, ..., row_(f_max).\\n\\nExample 1: tasks = {A: 4, B: 4, C: 2, D: 2, E: 1}, n = 1\\nA B C D E\\nA B C D\\nA B \\nA B\\nThe scheduled sequence is [A,B,C,D,E,A,B,C,D,A,B,A,B].\\nExample 2: tasks = {A: 4, B: 4, C: 2, D: 2, E: 1}, n = 2\\nA B C D E\\nA B C \\nA B D\\nA B\\nThe scheduled sequence is [A,B,C,D,E,A,B,C,A,B,D,A,B]\\nExample 2: tasks = {A: 4, B: 4, C: 2, D: 2, E: 1}, n = 3\\nA B C D\\nA B C E\\nA B D #\\nA B\\nThe scheduled sequence is [A,B,C,D,A,B,C,D,E,A,B,D,#,A,B], # means idle.\\n```\\n    def leastInterval(self, tasks, n):\\n        if tasks == []:\\n            return 0\\n        freqs = list(Counter(tasks).values())\\n        f_max = max(freqs)\\n        num_f_max = freqs.count(f_max)\\n        needed_to_fill = (n + 1 - num_f_max) * (f_max - 1)\\n        remaining = len(tasks) - f_max * num_f_max\\n        return f_max * num_f_max + max(needed_to_fill, remaining)\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\n    def leastInterval(self, tasks, n):\\n        res = 0\\n        freqs = sorted(list(Counter(tasks).values()), reverse=True)\\n        while len(freqs) >= n + 1:\\n            for i in range(n + 1):\\n                freqs[i] -= 1\\n            res += n + 1\\n            freqs = sorted([f for f in freqs if f > 0], reverse=True)\\n        if freqs == []:\\n            return res\\n        f_max = freqs[0]\\n        num_f_max = freqs.count(f_max)\\n        res += num_f_max + (f_max - 1) * (n + 1)\\n        return res\\n```\n```\\n    def leastInterval(self, tasks, n):\\n        if tasks == []:\\n            return 0\\n        freqs = list(Counter(tasks).values())\\n        f_max = max(freqs)\\n        num_f_max = freqs.count(f_max)\\n        needed_to_fill = (n + 1 - num_f_max) * (f_max - 1)\\n        remaining = len(tasks) - f_max * num_f_max\\n        return f_max * num_f_max + max(needed_to_fill, remaining)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 114018,
                "title": "ac-solution-code",
                "content": "**Solution1. time = O(n); space = O(n)**\\n     First consider the most frequent characters, we can determine their relative positions first and use them as a frame to insert the remaining less frequent characters. Here is a proof by construction\\n     \\n     1. Let F be the set of most frequent chars with frequency k.\\n     2. We can create k chunks, each chunk is identical and is a string consists of chars in F in a specific fixed order.\\n     3. Let the heads of these chunks to be H_i; then H_2 should be at least n chars away from H_1, and so on so forth\\n     4. then we insert the less frequent chars into the gaps between these chunks sequentially one by one ordered by frequency in a decreasing order\\n     5. try to fill the k-1 gaps as full or evenly as possible each time you insert a character.\\n     In summary, append the less frequent characters to the end of each chunk of the first k-1 chunks sequentially and round and round, then join the chunks and keep their heads\\' relative distance from each other to be at least n.\\n\\n![0_1517784975180_Screen Shot 2018-02-04 at 2.55.52 PM.png](/assets/uploads/files/1517784974951-screen-shot-2018-02-04-at-2.55.52-pm-resized.png) \\n\\n**Examples:**\\n\\nAAAABBBEEFFGG 3\\n```\\nhere X represents a space gap:\\n\\nFrame: \"AXXXAXXXAXXXA\"\\ninsert \\'B\\': \"ABXXABXXABXXA\" <--- \\'B\\' has higher frequency than the other characters, insert it first.\\ninsert \\'E\\': \"ABEXABEXABXXA\"\\ninsert \\'F\\': \"ABEFABEXABFXA\" <--- each time try to fill the k-1 gaps as full or evenly as possible.\\ninsert \\'G\\': \"ABEFABEGABFGA\"\\n```\\n\\nAACCCBEEE 2\\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\ninsert \\'A\\' among the gaps of chunks since it has higher frequency than \\'B\\' ---> \"CEACEACE\"\\ninsert \\'B\\' ---> \"CEABCEACE\" <----- result is tasks.length;\\n```\\n\\nAACCCDDEEE 3\\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <--- this is a frame.\\nBegin to insert \\'A\\'->\"CEA CEA CE\"\\nBegin to insert \\'B\\'->\"CEABCEABCE\" <---- result is tasks.length;\\n```\\n\\nACCCEEE 2\\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\nBegin to insert \\'A\\' --> \"CEACE CE\" <-- result is (c[25] - 1) * (n + 1) + 25 -i = 2 * 3 + 2 = 8\\n```\\n**Swift Code:**\\n```\\nfunc leastInterval(_ tasks: [Character], _ n: Int) -> Int {\\n    guard tasks.count > 0 else { return 0 }\\n    var counter = [Int](repeating: 0, count: 26)                            // Counter: [Char: Count] - frequency of 26 unique chars\\n    for task in tasks {                                                     // 1. Count tasks: A - Z\\n        counter[task.ascii - \"A\".ascii] += 1\\n    }\\n    counter.sort()                                                          // 2. Sort counter by frquency ascendingly\\n    \\n    var mostFrequentUniqueChars = 0\\n    let topFrequency = counter[25]\\n    for i in 0..<26 where counter[i] == topFrequency {                       // 3. count of uniqueChars with \"same frequency of most frequentChar\" (counter.last!)\\n        mostFrequentUniqueChars += 1\\n    }\\n    return Swift.max(tasks.count, (topFrequency - 1) * (n + 1) + mostFrequentUniqueChars) // 4. Return greater one between tasks.count, frameSize\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/cheng_zhang/image_1542866172.png)\\n\\n\\n![0_1517810688645_IMG_5416.PNG](/assets/uploads/files/1517810691897-img_5416-resized.png)",
                "solutionTags": [],
                "code": "```\\nhere X represents a space gap:\\n\\nFrame: \"AXXXAXXXAXXXA\"\\ninsert \\'B\\': \"ABXXABXXABXXA\" <--- \\'B\\' has higher frequency than the other characters, insert it first.\\ninsert \\'E\\': \"ABEXABEXABXXA\"\\ninsert \\'F\\': \"ABEFABEXABFXA\" <--- each time try to fill the k-1 gaps as full or evenly as possible.\\ninsert \\'G\\': \"ABEFABEGABFGA\"\\n```\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\ninsert \\'A\\' among the gaps of chunks since it has higher frequency than \\'B\\' ---> \"CEACEACE\"\\ninsert \\'B\\' ---> \"CEABCEACE\" <----- result is tasks.length;\\n```\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <--- this is a frame.\\nBegin to insert \\'A\\'->\"CEA CEA CE\"\\nBegin to insert \\'B\\'->\"CEABCEABCE\" <---- result is tasks.length;\\n```\n```\\n3 identical chunks \"CE\", \"CE CE CE\" <-- this is a frame\\nBegin to insert \\'A\\' --> \"CEACE CE\" <-- result is (c[25] - 1) * (n + 1) + 25 -i = 2 * 3 + 2 = 8\\n```\n```\\nfunc leastInterval(_ tasks: [Character], _ n: Int) -> Int {\\n    guard tasks.count > 0 else { return 0 }\\n    var counter = [Int](repeating: 0, count: 26)                            // Counter: [Char: Count] - frequency of 26 unique chars\\n    for task in tasks {                                                     // 1. Count tasks: A - Z\\n        counter[task.ascii - \"A\".ascii] += 1\\n    }\\n    counter.sort()                                                          // 2. Sort counter by frquency ascendingly\\n    \\n    var mostFrequentUniqueChars = 0\\n    let topFrequency = counter[25]\\n    for i in 0..<26 where counter[i] == topFrequency {                       // 3. count of uniqueChars with \"same frequency of most frequentChar\" (counter.last!)\\n        mostFrequentUniqueChars += 1\\n    }\\n    return Swift.max(tasks.count, (topFrequency - 1) * (n + 1) + mostFrequentUniqueChars) // 4. Return greater one between tasks.count, frameSize\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957131,
                "title": "explanation-of-the-greedy-solution",
                "content": "This is my explanation of the [Official Greedy Solution](https://leetcode.com/problems/task-scheduler/editorial/) \\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe arrange the task with the maximium occurence with a cooldown period of n. Then we insert the remaining tasks into the idle time slots.\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->\\nFor example, \\n> input: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\', \\'C\\', \\'C\\', \\'D\\', \\'D\\'], n=2\\n\\n1. We first pick tasks marked with \\'A\\' and arrange them like the description in the last section, which results:\\n\\n| A |   |   | A |   |   | A |\\n|---|---|---|---|---|---|---|\\n\\nFor convienice, we call the area between the first and the last \\'A\\' as the `scope`.\\n\\n2. Then we can pick the task type with maximium occurence and insert tasks and let them take up as many idle time as possible.\\n\\n| A | B |   | A | B |   | A | B |\\n|---|---|---|---|---|---|---|---|\\n\\nNotice that there is one task B outside the original scope, we will look back at this case later.\\n\\n3. Repeat step 2, suppose we pick task type C. \\n\\n| A | B | C | A | B | C | A | B |\\n|---|---|---|---|---|---|---|---|\\n\\n4. Finally we pick task type D, this is most tricky part. Do we need to put them at the tail, which results more idle slots? No! We can put them just right to each of the \\'A\\'s:\\n\\n| A | D | B | C | A | D | B | C | A | B |\\n|---|---|---|---|---|---|---|---|---|---|\\n\\nWe can always do like this to avoid extra idle time slots even if there are remaining \\'E\\'s, \\'F\\'s... \\n\\nNow let\\'s calculate the total length. Intuitively, \\n- if the idle time slots can all be filled with tasks and there are `X` extra tasks, we need a new scope with a length of `original scope length`+`X` slots in tatal. \\n- if the idle time slots can not be filled, since no tasks is out of the original scope, we need `original scope length`\\n\\nBut remember in step 2, we have a task \\'B\\' out of scope. \\'A\\' is one of the task type with the maximium occurence, so we can conclude that\\n- if there are extra task types share the maximium occurence, for each type, we need to add 1 to the tatal length.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        occurences = [0] * 26\\n        for t in tasks:\\n            occurences[ord(t)-ord(\\'A\\')] += 1\\n        max_occurence = max(occurences)\\n\\n        # arrange task with max occurence evenly with a distance of n\\n        idle_time = (max_occurence-1) * n\\n        occurences.remove(max_occurence) # remove one max_occurence which is picked to arrange evenly\\n        remain_task_time_in_scope = 0\\n        remain_task_time_out_scope = 0\\n        for task in occurences:\\n            if task == max_occurence:\\n                remain_task_time_in_scope += task-1\\n                remain_task_time_out_scope += 1\\n            else:\\n                remain_task_time_in_scope += task\\n\\n        extra_time = max(0, remain_task_time_in_scope - idle_time) + remain_task_time_out_scope\\n        return (max_occurence-1)*(n+1)+1 + extra_time\\n\\n```\\n\\n# Improvement - The Math Approach\\n\\nHowever, we do not really need to \\'simulate\\' the fill progress. When using the greedy thinking like decribed above, results can be divided into 2 situations:\\n\\n1. The `scope` is filled and there is no idle time slot.\\n2. The `scope` is not filled and there exists idle time slots.\\n\\nIn situation 1, since there is no idle slot, the total length equal to the lengh of `tasks`, which is the input list.\\n\\nIn situation 2, because the original `scope` is not filled, which means the `scope` is not extended, we can calculate the total length with `original scope length` and `num of maximiun-occurence task type`\\n\\n```python\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        cnts = [0] * 26\\n        for t in tasks:\\n            cnts[ord(t)-ord(\\'A\\')] += 1\\n        max_occurence = max(cnts)\\n        max_occurence_cnt = cnts.count(max_occurence)\\n        len_full_fill = len(tasks)\\n        len_part_fill = (max_occurence-1)*(n+1)+max_occurence_cnt\\n        return max(len_full_fill, len_part_fill)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        occurences = [0] * 26\\n        for t in tasks:\\n            occurences[ord(t)-ord(\\'A\\')] += 1\\n        max_occurence = max(occurences)\\n\\n        # arrange task with max occurence evenly with a distance of n\\n        idle_time = (max_occurence-1) * n\\n        occurences.remove(max_occurence) # remove one max_occurence which is picked to arrange evenly\\n        remain_task_time_in_scope = 0\\n        remain_task_time_out_scope = 0\\n        for task in occurences:\\n            if task == max_occurence:\\n                remain_task_time_in_scope += task-1\\n                remain_task_time_out_scope += 1\\n            else:\\n                remain_task_time_in_scope += task\\n\\n        extra_time = max(0, remain_task_time_in_scope - idle_time) + remain_task_time_out_scope\\n        return (max_occurence-1)*(n+1)+1 + extra_time\\n\\n```\n```python\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        cnts = [0] * 26\\n        for t in tasks:\\n            cnts[ord(t)-ord(\\'A\\')] += 1\\n        max_occurence = max(cnts)\\n        max_occurence_cnt = cnts.count(max_occurence)\\n        len_full_fill = len(tasks)\\n        len_part_fill = (max_occurence-1)*(n+1)+max_occurence_cnt\\n        return max(len_full_fill, len_part_fill)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3810799,
                "title": "easy-explained-c-maths",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) : constant space\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int k) {\\n        int N = tasks.size();        \\n        int counter[26] = {0};\\n        int maxF = 0; // max_freq\\n        int maxFc = 0; // no of ch having max_freq\\n        \\n        for (int i = 0; i < N; i++) {\\n            counter[tasks[i] - \\'A\\']++;\\n        }\\n        \\n        for (int x : counter) {\\n            if (maxF == x) {\\n                maxFc++;\\n            }\\n            if (maxF < x) {\\n                maxF = x;\\n                maxFc = 1;\\n            }\\n        }\\n        \\n        int gaps = maxF - 1; // number of gaps required\\n        \\n        int gaps_len = k - (maxFc - 1); // number of ch that can be fit in partition gaps\\n        \\n        int avail_slot = gaps * gaps_len; // empty slots = number of gaps * gaps_len\\n        \\n        int avail_task = N - maxF * maxFc;\\n        \\n        int idles = max(0, avail_slot - avail_task); // place available tasks in total available\\n        // slots and rest as idle\\n        \\n        return N + idles;\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int k) {\\n        int N = tasks.size();        \\n        int counter[26] = {0};\\n        int maxF = 0; // max_freq\\n        int maxFc = 0; // no of ch having max_freq\\n        \\n        for (int i = 0; i < N; i++) {\\n            counter[tasks[i] - \\'A\\']++;\\n        }\\n        \\n        for (int x : counter) {\\n            if (maxF == x) {\\n                maxFc++;\\n            }\\n            if (maxF < x) {\\n                maxF = x;\\n                maxFc = 1;\\n            }\\n        }\\n        \\n        int gaps = maxF - 1; // number of gaps required\\n        \\n        int gaps_len = k - (maxFc - 1); // number of ch that can be fit in partition gaps\\n        \\n        int avail_slot = gaps * gaps_len; // empty slots = number of gaps * gaps_len\\n        \\n        int avail_task = N - maxF * maxFc;\\n        \\n        int idles = max(0, avail_slot - avail_task); // place available tasks in total available\\n        // slots and rest as idle\\n        \\n        return N + idles;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3144170,
                "title": "easy-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] char_map=new int[26];\\n        for(char c : tasks){\\n            char_map[c-\\'A\\']++;\\n        }\\n\\n        Arrays.sort(char_map);\\n        int max_val=char_map[25]-1; // last mein hogi na aur vaha wait nahi karna padega \\n        int idle_slots=max_val * n;\\n        for(int i=24; i>=0; i--){\\n            idle_slots-=Math.min(char_map[i], max_val);\\n        }\\n\\n        return idle_slots > 0 ? idle_slots + tasks.length : tasks.length;\\n\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int[] char_map=new int[26];\\n        for(char c : tasks){\\n            char_map[c-\\'A\\']++;\\n        }\\n\\n        Arrays.sort(char_map);\\n        int max_val=char_map[25]-1; // last mein hogi na aur vaha wait nahi karna padega \\n        int idle_slots=max_val * n;\\n        for(int i=24; i>=0; i--){\\n            idle_slots-=Math.min(char_map[i], max_val);\\n        }\\n\\n        return idle_slots > 0 ? idle_slots + tasks.length : tasks.length;\\n\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2957749,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> mp;\\n        priority_queue<int> pq;\\n        for(char c:tasks)\\n        mp[c]++;\\n        for(auto it:mp)\\n        pq.push(it.second);\\n        int ans=0;\\n        while(!pq.empty())\\n        {\\n            vector<int> v;\\n            for(int i=0;i<=n;i++)\\n            {\\n                if(!pq.empty())\\n                {\\n                    v.push_back(pq.top());\\n                    pq.pop();\\n                }\\n            }\\n            for(int i=0;i<v.size();i++)\\n            {\\n                v[i]--;\\n                if(v[i]>0)\\n                pq.push(v[i]);\\n            }\\n            if(pq.empty())\\n            ans+=v.size();\\n            else\\n            ans+=(n+1);\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        unordered_map<char, int> mp;\\n        priority_queue<int> pq;\\n        for(char c:tasks)\\n        mp[c]++;\\n        for(auto it:mp)\\n        pq.push(it.second);\\n        int ans=0;\\n        while(!pq.empty())\\n        {\\n            vector<int> v;\\n            for(int i=0;i<=n;i++)\\n            {\\n                if(!pq.empty())\\n                {\\n                    v.push_back(pq.top());\\n                    pq.pop();\\n                }\\n            }\\n            for(int i=0;i<v.size();i++)\\n            {\\n                v[i]--;\\n                if(v[i]>0)\\n                pq.push(v[i]);\\n            }\\n            if(pq.empty())\\n            ans+=v.size();\\n            else\\n            ans+=(n+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2728778,
                "title": "simple-java-solution-with-explaination-o-n-time-and-o-26-space",
                "content": "Idea is to first calculate frequency of each char. and then sort them frequency wise in increasing order. in this way map[25] will contain element with highest frequency.\\nNow just think in best case what would be the answer. i.e. all char can rearrange themselves with-in tasks.length. hence in such case answer will be tasks.length. but for cases where we might need some ideal slots, desired length will increase.\\n\\nNow, to understand further process lets take example\\nEX-\\n{ \\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\', \\'G\\' } , 2\\n\\nA - 6\\nB - 1\\nC - 1\\nD- 1\\nE - 1\\nF - 1\\nG - 1\\n\\nwhat we can do is to alot chunks of sizes n+1 each, and then try to form string with other chars.\\nSo, how many chunks needed. i.e. total 6. i.e. highest freq char.\\nAXX AXX AXX AXX AXX AXX\\nIn above case now we need to fill XX with other characters.\\nSo, total length = 3+3+3+3+3+3=18 or it can also be written as 3*6\\n\\n\\nbut for last chunk, it might be possible that we dont need to consume entire n+1 length. so updated formule will be (6-1)*3\\n\\nor (map[25]-1) * (n+1)\\n\\nNow we need to find length of last chunk. for that think a case how can a character will be end up falling into last chunk. i.e. only if the highest frequency of multiple charcters matches. i.e. suppose in above example B also has 6 freq. in such case last chunk will needed to have AB both, otherwise it will get consumed in earlier chunk.\\nhence updated final formula->\\nMath.max(tasks.length,(map[25]-1) * (n+1)+i)\\n\\nwhere i will be the length of last chunk. we can calculate value of i like below->\\n```\\n        int i=0;\\n        while(i<=25 && map[25-i]==map[25]) {\\n            i++;\\n        }\\n```\\nComplete solution->\\n```\\npublic int leastInterval(char[] tasks, int n) {\\n\\t\\tint[] map = new int[26];\\n\\t\\tfor (char ch : tasks) {\\n\\t\\t\\tmap[ch - \\'A\\'] += 1;\\n\\t\\t}\\n\\t\\tArrays.sort(map);\\n        int i=0;\\n        while(i<=25 && map[25-i]==map[25]) {\\n            i++;\\n        }\\n\\t\\treturn Math.max(tasks.length,(map[25]-1)*(n+1)+i);\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\n        int i=0;\\n        while(i<=25 && map[25-i]==map[25]) {\\n            i++;\\n        }\\n```\n```\\npublic int leastInterval(char[] tasks, int n) {\\n\\t\\tint[] map = new int[26];\\n\\t\\tfor (char ch : tasks) {\\n\\t\\t\\tmap[ch - \\'A\\'] += 1;\\n\\t\\t}\\n\\t\\tArrays.sort(map);\\n        int i=0;\\n        while(i<=25 && map[25-i]==map[25]) {\\n            i++;\\n        }\\n\\t\\treturn Math.max(tasks.length,(map[25]-1)*(n+1)+i);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2716365,
                "title": "detailed-explanations-on-why-the-solutions-work",
                "content": "Idea: In the optimal solution, the amount of idle time is decided by the most frequent item.(Because we can always put less frequent item into the cooling slots associated with the most frequent item. If there is no more slot left, we simply put the task at the end of the round robin queue.)\\n\\n**************Example**************\\n\\nImagine the following two cases where cooling time = 2. We execute the tasks column by column from left to right. \\n\\nCase 1: more available idle slots than needed \\u2192 Total time = # tasks + idle time = 6 + 1 = 7\\n![image](https://assets.leetcode.com/users/images/6d3bc1c1-1811-4060-9299-06aed2e8390c_1666060837.4732614.png)\\n\\nCase 2: No idle slots. Append extra tasks to the end of queue \\u2192 Total time = # tasks = 11\\n![image](https://assets.leetcode.com/users/images/fba5e608-d354-4b6e-9586-fab0b0b5e172_1666060877.8144066.png)\\n\\n********************************How to schedule?********************************\\n\\nWe adopt a greedy approach to arrange tasks. First we arrange the most frequent tasks and mark its cooling time to be potentially idle. Then we fill in the idle slots row by row by filling in the 2nd most frequent tasks, 3rd most frequent, and so on, until all the idle slots are filled. (A nuance here is that we won\\u2019t break the cooling rule for any task since we\\u2019ve already set the bound to be the most frequent task. Think about why \\uD83D\\uDE09)\\n\\nThis approach is O(nlogn) because of sorting.\\n\\n**********************************How to find the minimal time needed to finish the tasks?**********************************\\n\\nIf all we need is the minimal time, we no longer need to sort the tasks by frequency, but only need an one-pass traversal to find the most frequent item. Then we can decide the minimal time from the two possible cases above. \\n\\nThis approach is O(n).\\n",
                "solutionTags": [
                    "Greedy",
                    "Sorting"
                ],
                "code": "Idea: In the optimal solution, the amount of idle time is decided by the most frequent item.(Because we can always put less frequent item into the cooling slots associated with the most frequent item. If there is no more slot left, we simply put the task at the end of the round robin queue.)\\n\\n**************Example**************\\n\\nImagine the following two cases where cooling time = 2. We execute the tasks column by column from left to right. \\n\\nCase 1: more available idle slots than needed \\u2192 Total time = # tasks + idle time = 6 + 1 = 7\\n![image](https://assets.leetcode.com/users/images/6d3bc1c1-1811-4060-9299-06aed2e8390c_1666060837.4732614.png)\\n\\nCase 2: No idle slots. Append extra tasks to the end of queue \\u2192 Total time = # tasks = 11\\n![image](https://assets.leetcode.com/users/images/fba5e608-d354-4b6e-9586-fab0b0b5e172_1666060877.8144066.png)\\n\\n********************************How to schedule?********************************\\n\\nWe adopt a greedy approach to arrange tasks. First we arrange the most frequent tasks and mark its cooling time to be potentially idle. Then we fill in the idle slots row by row by filling in the 2nd most frequent tasks, 3rd most frequent, and so on, until all the idle slots are filled. (A nuance here is that we won\\u2019t break the cooling rule for any task since we\\u2019ve already set the bound to be the most frequent task. Think about why \\uD83D\\uDE09)\\n\\nThis approach is O(nlogn) because of sorting.\\n\\n**********************************How to find the minimal time needed to finish the tasks?**********************************\\n\\nIf all we need is the minimal time, we no longer need to sort the tasks by frequency, but only need an one-pass traversal to find the most frequent item. Then we can decide the minimal time from the two possible cases above. \\n\\nThis approach is O(n).\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2472957,
                "title": "java-explained-the-logic-easy-to-understand",
                "content": "```\\nclass Pair{\\n    int taskCount, availableTime; //availableTime denotes the time at which task will be available for exec.\\n    Pair(int taskCount, int availableTime)\\n    {\\n        this.taskCount = taskCount;\\n        this.availableTime = availableTime;\\n    }\\n}\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) \\n    {\\n        int[] mp = new int[26];\\n        for (char task : tasks) mp[task - \\'A\\']++;\\n        PriorityQueue<Integer>pq = new PriorityQueue<Integer>((a, b)->(b - a)); //MAX_HEAP\\n        for (char taskIdx = 0; taskIdx < 26; taskIdx++)\\n        {\\n            int count = mp[taskIdx];\\n            if (count >= 1) pq.add(count); //putting all the frequencies in max heap\\n        }\\n        //===========================================================\\n        Queue<Pair>waitingQueue = new LinkedList();\\n        int currTime = 1;\\n        while(!pq.isEmpty() || !waitingQueue.isEmpty())\\n        {\\n            //=================================\\n            //Check in the waitingQueue if some tasks are ready/available for execution\\n            while(!waitingQueue.isEmpty())\\n            {\\n                if (waitingQueue.peek().availableTime == currTime) \\n                    pq.add(waitingQueue.poll().taskCount);\\n                else break;\\n            }\\n            //==================================\\n            //Now among all the available task at currTime, execute the one having highest count \\n            if (!pq.isEmpty())\\n            {\\n                int leftOutTaskCount = pq.poll() - 1;\\n                if (leftOutTaskCount != 0) waitingQueue.add(new Pair(leftOutTaskCount, currTime + n + 1));\\n            }\\n            //====================================\\n            currTime++;\\n        }\\n        return currTime - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Pair{\\n    int taskCount, availableTime; //availableTime denotes the time at which task will be available for exec.\\n    Pair(int taskCount, int availableTime)\\n    {\\n        this.taskCount = taskCount;\\n        this.availableTime = availableTime;\\n    }\\n}\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) \\n    {\\n        int[] mp = new int[26];\\n        for (char task : tasks) mp[task - \\'A\\']++;\\n        PriorityQueue<Integer>pq = new PriorityQueue<Integer>((a, b)->(b - a)); //MAX_HEAP\\n        for (char taskIdx = 0; taskIdx < 26; taskIdx++)\\n        {\\n            int count = mp[taskIdx];\\n            if (count >= 1) pq.add(count); //putting all the frequencies in max heap\\n        }\\n        //===========================================================\\n        Queue<Pair>waitingQueue = new LinkedList();\\n        int currTime = 1;\\n        while(!pq.isEmpty() || !waitingQueue.isEmpty())\\n        {\\n            //=================================\\n            //Check in the waitingQueue if some tasks are ready/available for execution\\n            while(!waitingQueue.isEmpty())\\n            {\\n                if (waitingQueue.peek().availableTime == currTime) \\n                    pq.add(waitingQueue.poll().taskCount);\\n                else break;\\n            }\\n            //==================================\\n            //Now among all the available task at currTime, execute the one having highest count \\n            if (!pq.isEmpty())\\n            {\\n                int leftOutTaskCount = pq.poll() - 1;\\n                if (leftOutTaskCount != 0) waitingQueue.add(new Pair(leftOutTaskCount, currTime + n + 1));\\n            }\\n            //====================================\\n            currTime++;\\n        }\\n        return currTime - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2436931,
                "title": "c-o-nlogn-priority-queue-map-easy-to-understand",
                "content": "**Priority Queue and Map Approach!!**\\n\\n**Time Complexity:- O(nlogn)\\nSpace Complexity:- O(n)**\\n\\n*Simple solution for Task Scheduler Problem!!*\\n\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        // ans variable for storing least number of units of times that the CPU will take\\n        int ans=0;\\n        unordered_map<char,int> mp;\\n        priority_queue<int> q;\\n        \\n        // storing count of each character in map\\n        for(auto i: tasks){\\n            mp[i]++;\\n        }\\n        \\n        // Pushing all elements to the Priority Queue\\n        for(auto j: mp){\\n            q.push(j.second);\\n        }\\n        \\n        while(!q.empty()){\\n            \\n            // tt variable for storing time for executing n task \\n            int tt=0;\\n            \\n            // vector v for storing the element that is popped from the queue ((element -1) is pushed)\\n            vector<int> v;\\n            \\n            // executing the n+1 task\\n            for(int i=0;i<=n;i++){\\n                if(!q.empty()){\\n                    v.push_back(q.top()-1);\\n                    q.pop();\\n                    tt=tt+1;\\n                }\\n            }\\n            \\n             // If elements in vector are still greater than 0 then again push them back to the priority queue)\\n            for(auto i: v){\\n                if(i>0){\\n                    q.push(i);\\n                }\\n            }\\n            \\n            // If all the task are over(priority queue is empty) then adding \\'tt\\' to the ans variable otherwise adding n+1 which includes idle time as well\\n            if(q.empty()){\\n                ans+=tt;\\n            }\\n            else{\\n                ans+=(n+1);\\n            }\\n            \\n            \\n        }\\n        \\n        // Returning the final least number of units of time\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        // ans variable for storing least number of units of times that the CPU will take\\n        int ans=0;\\n        unordered_map<char,int> mp;\\n        priority_queue<int> q;\\n        \\n        // storing count of each character in map\\n        for(auto i: tasks){\\n            mp[i]++;\\n        }\\n        \\n        // Pushing all elements to the Priority Queue\\n        for(auto j: mp){\\n            q.push(j.second);\\n        }\\n        \\n        while(!q.empty()){\\n            \\n            // tt variable for storing time for executing n task \\n            int tt=0;\\n            \\n            // vector v for storing the element that is popped from the queue ((element -1) is pushed)\\n            vector<int> v;\\n            \\n            // executing the n+1 task\\n            for(int i=0;i<=n;i++){\\n                if(!q.empty()){\\n                    v.push_back(q.top()-1);\\n                    q.pop();\\n                    tt=tt+1;\\n                }\\n            }\\n            \\n             // If elements in vector are still greater than 0 then again push them back to the priority queue)\\n            for(auto i: v){\\n                if(i>0){\\n                    q.push(i);\\n                }\\n            }\\n            \\n            // If all the task are over(priority queue is empty) then adding \\'tt\\' to the ans variable otherwise adding n+1 which includes idle time as well\\n            if(q.empty()){\\n                ans+=tt;\\n            }\\n            else{\\n                ans+=(n+1);\\n            }\\n            \\n            \\n        }\\n        \\n        // Returning the final least number of units of time\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2351249,
                "title": "c-o-n-pure-math",
                "content": "The key here is you do not actually need to generate the way to get the result - so yo just need pure math. Consider slots with `n+1` placeholders (1 character + `n` for cooldown). You can not have such slots less than a number of occurrences of most frequent character. All other characters you can simply fit into placeholders or expand each slot if # of unique characters to fit into slot is larger than slot size. So the only corner case is when some characters are as frequent as the most frequent one. They will be also in every slot. Last slot is a bit different from any other one as it must not be aligned to `n+1`. That slot will only be populated with the most frequent characters.\\nSay `f` is a frequency of most frequent character then for slots `[1 .. f-1]` you can just compare what is larger size of a slot `n +1` or characters to fit into and for the last slot you just take # of most frequent characters. That is it.\\n\\n```\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        var counts = new int[26];\\n        var max = 0;\\n        \\n        foreach (var c in tasks)\\n        {\\n            var i = c - \\'A\\';\\n            if (++counts[i] > max) max = counts[i];\\n        }\\n        \\n        var tops = 0;\\n        for (var i = 0; i < 26; i++)\\n            if (counts[i] == max) tops++;\\n        \\n        return tops + Math.Max((max - 1) * (n + 1), tasks.Length - tops);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) {\\n        var counts = new int[26];\\n        var max = 0;\\n        \\n        foreach (var c in tasks)\\n        {\\n            var i = c - \\'A\\';\\n            if (++counts[i] > max) max = counts[i];\\n        }\\n        \\n        var tops = 0;\\n        for (var i = 0; i < 26; i++)\\n            if (counts[i] == max) tops++;\\n        \\n        return tops + Math.Max((max - 1) * (n + 1), tasks.Length - tops);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2221933,
                "title": "javascript-tc-o-n-m-using-custom-max-heap-deque",
                "content": "**Constraints**:\\n* Each task takes 1 unit of time\\n* Tasks can be done in any order\\n* Same tasks should have cool down period (idle time)\\n**GOAL = minimize the idle time**\\n\\nWe don\\'t care about the characters of the task, we care about the task which occurs more frequently (count).\\n**Why ?**\\n    If CPU takes the more frequent tasks 1st, alternately doing the less freq tasks in between, then we can reduce the idle time.\\n\\t\\t\\n**What we can use?**\\n*MaxHeap* = To store the more freq tasks, *Deque* = to keep track of the next doable task\\n \\n **Complexity:**\\nTime = O(n * m) + O(log 26) ~ O(n * m)  | Space = O(n)\\nm is the idle time, (It matters if the Array has all same tasks)\\nEx: tasks = [\\'A\\', \\'A\\', \\'A\\', \\'A\\']\\n\\nPS: I think this is the time complexity, please correct me if I\\'m wrong:)\\n\\n**Code:**\\n```\\nvar leastInterval = function(tasks, n) {\\n    // count the task frequencies -- O(n)\\n    let count = {};\\n    for(let task of tasks) {\\n        if(!(task in count))\\n            count[task] = 0;\\n        count[task]++;\\n    }\\n    \\n\\t// Store the frequencies (count) in the Max heap\\n    const maxHeap = new MaxHeap();\\n    for(let n of Object.values(count))\\n        maxHeap.insert(n);\\n    \\n    const deque = []; // pair of [count, idleTime]\\n    let time = 0;\\n  \\n    while(maxHeap.size() || deque.length) {\\n        time++;\\n        // perform the most freq task, add the remaining count in Deque to perform later\\n        if(maxHeap.size()) {\\n            let cnt = maxHeap.getMax() - 1;\\n            if(cnt !== 0)\\n                deque.push([cnt, time + n]) // time + n -> when this task will be available next\\n        }\\n        // When the time comes, take the task from Deque, add it to the maxHeap (for the CPU to perform)\\n        if(deque.length && deque[0][1] === time) \\n            maxHeap.insert(deque.shift()[0]);  // Note: the JavaScript shift() methods runs in linear time. This might sum up to the complexity. But we can ignore it as we are not focuing on Language specific.\\n    }\\n    return time;\\n};\\n\\n// Custom JavaScript MaxHeap Implementation\\nfunction MaxHeap() {\\n    this.list = [];\\n    \\n    this.maxHeapify = (i) => {\\n        let n = this.list.length;\\n        let largest = i;\\n        let l = 2 * i + 1;   // left child index\\n        let r = 2 * i + 2;   // right child index\\n        \\n        if(l < n && this.list[l] > this.list[largest])   // if left child is greater than parent\\n            largest = l;\\n        if(r < n && this.list[r] > this.list[largest])  // if right child is greater than parent\\n            largest = r;\\n        \\n        if(largest !== i) {  // if largest element is not the parent (heap property violated, so restore it)\\n            [this.list[i], this.list[largest]] = [this.list[largest], this.list[i]];\\n            this.maxHeapify(largest);\\n        }\\n    }\\n    \\n    this.insert = (value) => {\\n        this.list.push(value);\\n        for(let i = parseInt(this.list.length / 2 - 1); i >= 0; i--)  // heapify the affected sub-tree\\n            this.maxHeapify(i);\\n    }\\n    \\n    this.delete = (value) => {\\n\\t\\t// 1. Find the element to be deleted\\n        let i, n = this.list.length;\\n        for(i = 0; i < n; i++)\\n            if(this.list[i] === value) break;\\n        \\n\\t\\t// 2. Swap that number with last element in the list & delete the last element\\n        [this.list[i], this.list[n - 1]] = [this.list[n - 1], this.list[i]];\\n        this.list.splice(n - 1);\\n\\t\\t\\n        // 3. Heapify\\n        for(let i = parseInt(n / 2 - 1); i >= 0; i--)\\n            this.maxHeapify(i);\\n    }\\n    \\n    this.findMax = () => this.list[0];\\n    this.getMax = () => {\\n        let max = this.findMax();\\n        this.delete(max);\\n        return max;\\n    }\\n    this.size = () => this.list.length;\\n}\\n\\n```\\n\\nVisit NeetCode for more visual explanation. He is really doing a great job!\\nhttps://www.youtube.com/watch?v=s8p8ukTyA2I&ab_channel=NeetCode",
                "solutionTags": [
                    "JavaScript",
                    "Queue",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nvar leastInterval = function(tasks, n) {\\n    // count the task frequencies -- O(n)\\n    let count = {};\\n    for(let task of tasks) {\\n        if(!(task in count))\\n            count[task] = 0;\\n        count[task]++;\\n    }\\n    \\n\\t// Store the frequencies (count) in the Max heap\\n    const maxHeap = new MaxHeap();\\n    for(let n of Object.values(count))\\n        maxHeap.insert(n);\\n    \\n    const deque = []; // pair of [count, idleTime]\\n    let time = 0;\\n  \\n    while(maxHeap.size() || deque.length) {\\n        time++;\\n        // perform the most freq task, add the remaining count in Deque to perform later\\n        if(maxHeap.size()) {\\n            let cnt = maxHeap.getMax() - 1;\\n            if(cnt !== 0)\\n                deque.push([cnt, time + n]) // time + n -> when this task will be available next\\n        }\\n        // When the time comes, take the task from Deque, add it to the maxHeap (for the CPU to perform)\\n        if(deque.length && deque[0][1] === time) \\n            maxHeap.insert(deque.shift()[0]);  // Note: the JavaScript shift() methods runs in linear time. This might sum up to the complexity. But we can ignore it as we are not focuing on Language specific.\\n    }\\n    return time;\\n};\\n\\n// Custom JavaScript MaxHeap Implementation\\nfunction MaxHeap() {\\n    this.list = [];\\n    \\n    this.maxHeapify = (i) => {\\n        let n = this.list.length;\\n        let largest = i;\\n        let l = 2 * i + 1;   // left child index\\n        let r = 2 * i + 2;   // right child index\\n        \\n        if(l < n && this.list[l] > this.list[largest])   // if left child is greater than parent\\n            largest = l;\\n        if(r < n && this.list[r] > this.list[largest])  // if right child is greater than parent\\n            largest = r;\\n        \\n        if(largest !== i) {  // if largest element is not the parent (heap property violated, so restore it)\\n            [this.list[i], this.list[largest]] = [this.list[largest], this.list[i]];\\n            this.maxHeapify(largest);\\n        }\\n    }\\n    \\n    this.insert = (value) => {\\n        this.list.push(value);\\n        for(let i = parseInt(this.list.length / 2 - 1); i >= 0; i--)  // heapify the affected sub-tree\\n            this.maxHeapify(i);\\n    }\\n    \\n    this.delete = (value) => {\\n\\t\\t// 1. Find the element to be deleted\\n        let i, n = this.list.length;\\n        for(i = 0; i < n; i++)\\n            if(this.list[i] === value) break;\\n        \\n\\t\\t// 2. Swap that number with last element in the list & delete the last element\\n        [this.list[i], this.list[n - 1]] = [this.list[n - 1], this.list[i]];\\n        this.list.splice(n - 1);\\n\\t\\t\\n        // 3. Heapify\\n        for(let i = parseInt(n / 2 - 1); i >= 0; i--)\\n            this.maxHeapify(i);\\n    }\\n    \\n    this.findMax = () => this.list[0];\\n    this.getMax = () => {\\n        let max = this.findMax();\\n        this.delete(max);\\n        return max;\\n    }\\n    this.size = () => this.list.length;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2143509,
                "title": "detailed-intuitive-explanation-for-the-o-n-solution",
                "content": "```\\n\\npublic class Solution{\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        int[] taskFrequency = new int[26];\\n        for (char task : tasks) {\\n            ++taskFrequency[task - \\'A\\'];\\n        }\\n        Arrays.sort(taskFrequency);\\n        int maxFrequency = taskFrequency[25];\\n        /*\\n         * AAABBBCCDD n = 2\\n         * A X X A X X A\\n         * The idea is to utilize the idle periods created between the most frequent tasks like the previous solution\\n         * so max slots here = (3-1)*2 = 4\\n         * Now, if frequency = maxFrequency like for B, all idle slots cannot be used, only freq - 1 freq idle\\n         * slots can be used as follows:\\n         * A B X A B X A (B*) <------- notice this B* that doesn\\'t occupy the idle slots!\\n         * Now place C:\\n         * A B C A B C A B <---- all idle slots filled up!\\n         * where do we place the D now?\\n         * Can place it anywhere between the already placed tasks as long as the distance >= n is maintained:\\n         * A B C D A B C D A B <--- as the distance between two A\\'s is n, and D was added only after all idle slots\\n         * between A (=n) were filled, therefore the distance between two D\\'s has to be n\\n         *\\n         * Thus, we can simply return # of tasks if all idle spots are filled up!\\n         */\\n        int maxIdleSlots = (maxFrequency - 1) * n;\\n        for (int i = 24; i >= 0; i--) {\\n            int frequency = taskFrequency[i];\\n            if (frequency == maxFrequency) {\\n                maxIdleSlots -= maxFrequency - 1;\\n            } else {\\n                maxIdleSlots -= taskFrequency[i];\\n            }\\n\\n            if (maxIdleSlots <= 0) return tasks.length;\\n        }\\n        return tasks.length + maxIdleSlots;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy"
                ],
                "code": "```\\n\\npublic class Solution{\\n    public int leastInterval(char[] tasks, int n) {\\n        if (n == 0) return tasks.length;\\n        int[] taskFrequency = new int[26];\\n        for (char task : tasks) {\\n            ++taskFrequency[task - \\'A\\'];\\n        }\\n        Arrays.sort(taskFrequency);\\n        int maxFrequency = taskFrequency[25];\\n        /*\\n         * AAABBBCCDD n = 2\\n         * A X X A X X A\\n         * The idea is to utilize the idle periods created between the most frequent tasks like the previous solution\\n         * so max slots here = (3-1)*2 = 4\\n         * Now, if frequency = maxFrequency like for B, all idle slots cannot be used, only freq - 1 freq idle\\n         * slots can be used as follows:\\n         * A B X A B X A (B*) <------- notice this B* that doesn\\'t occupy the idle slots!\\n         * Now place C:\\n         * A B C A B C A B <---- all idle slots filled up!\\n         * where do we place the D now?\\n         * Can place it anywhere between the already placed tasks as long as the distance >= n is maintained:\\n         * A B C D A B C D A B <--- as the distance between two A\\'s is n, and D was added only after all idle slots\\n         * between A (=n) were filled, therefore the distance between two D\\'s has to be n\\n         *\\n         * Thus, we can simply return # of tasks if all idle spots are filled up!\\n         */\\n        int maxIdleSlots = (maxFrequency - 1) * n;\\n        for (int i = 24; i >= 0; i--) {\\n            int frequency = taskFrequency[i];\\n            if (frequency == maxFrequency) {\\n                maxIdleSlots -= maxFrequency - 1;\\n            } else {\\n                maxIdleSlots -= taskFrequency[i];\\n            }\\n\\n            if (maxIdleSlots <= 0) return tasks.length;\\n        }\\n        return tasks.length + maxIdleSlots;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1878258,
                "title": "c-one-pass-solution-with-explanation-100-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        //INTUITION: Say we have 3 A, 2 B, 1 C tasks\\n        //We place the most frequent tasks first\\n        //A ? ? A ? ? A ... gap between two same tasks must be alteast n = 2 (let)\\n        //We place next most frequent now: A B ? A B ? A\\n        //Then finally: A B C A B ? A\\n        //Only one place left which will be idle\\n        \\n        //So if we calculate the total idle time, then total time = tasks.length()+idle time\\n        //ALGO: Find the maximum frequent letter and then accordingly calculate the number of elements in between them.\\n        \\n        vector<int> count(26,0);\\n        int max = 0, maxc = 0;\\n        for(auto t: tasks)\\n        {\\n            count[t-\\'A\\']++;\\n            if(max==count[t-\\'A\\'])\\n                maxc++;\\n            if(count[t-\\'A\\']>max)\\n            {\\n                max = count[t-\\'A\\'];\\n                maxc = 1;\\n            }\\n        }\\n        \\n        int gapCount = max - 1; // A ... A. ..A ..so gaps in between  = 3-1 = 2\\n        int gapLength = n - (maxc-1); // n is the minimum gap length between two similar elements. So if maxc no. of elements have the max frequency, the gap will be reduced.\\n        int slotsEmpty = gapCount * gapLength;\\n        int tasksAvailable = tasks.size() - (max * maxc); //tasks other than the most frequent tasks\\n        int idleSlots = (slotsEmpty - tasksAvailable)>0?(slotsEmpty - tasksAvailable):0;\\n        //if slotsEmpty < tasksAvailable by any chance, we know we can arrange all distinct letters in between, but no idle slots will be left. This will handle the condition of more than one most frequent elements present.\\n        \\n        return tasks.size() + idleSlots;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        //INTUITION: Say we have 3 A, 2 B, 1 C tasks\\n        //We place the most frequent tasks first\\n        //A ? ? A ? ? A ... gap between two same tasks must be alteast n = 2 (let)\\n        //We place next most frequent now: A B ? A B ? A\\n        //Then finally: A B C A B ? A\\n        //Only one place left which will be idle\\n        \\n        //So if we calculate the total idle time, then total time = tasks.length()+idle time\\n        //ALGO: Find the maximum frequent letter and then accordingly calculate the number of elements in between them.\\n        \\n        vector<int> count(26,0);\\n        int max = 0, maxc = 0;\\n        for(auto t: tasks)\\n        {\\n            count[t-\\'A\\']++;\\n            if(max==count[t-\\'A\\'])\\n                maxc++;\\n            if(count[t-\\'A\\']>max)\\n            {\\n                max = count[t-\\'A\\'];\\n                maxc = 1;\\n            }\\n        }\\n        \\n        int gapCount = max - 1; // A ... A. ..A ..so gaps in between  = 3-1 = 2\\n        int gapLength = n - (maxc-1); // n is the minimum gap length between two similar elements. So if maxc no. of elements have the max frequency, the gap will be reduced.\\n        int slotsEmpty = gapCount * gapLength;\\n        int tasksAvailable = tasks.size() - (max * maxc); //tasks other than the most frequent tasks\\n        int idleSlots = (slotsEmpty - tasksAvailable)>0?(slotsEmpty - tasksAvailable):0;\\n        //if slotsEmpty < tasksAvailable by any chance, we know we can arrange all distinct letters in between, but no idle slots will be left. This will handle the condition of more than one most frequent elements present.\\n        \\n        return tasks.size() + idleSlots;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1252565,
                "title": "clarification-on-a-a-a-b-b-b-n-2",
                "content": "I do not understand why for input\\n```\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n```\\nthe output should be\\n```\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n```\\nBased on the description\\n> However, there is a non-negative integer n that represents the cooldown period between **two same tasks (the same letter in the array)**, that is that there must be at least n units of time between any two same tasks.\\n\\nThus we should have\\n```\\nA -> B -> A -> B -> A -> B \\n```\\nFor this input we should have no idle state in the CPU since we can always schedule different tasks one after the other. All adjacent tasks are different. There are no same adjacent tasks.\\n\\nCan somebody provide feedback on this?\\n",
                "solutionTags": [],
                "code": "```\\ntasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n```\n```\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n```\n```\\nA -> B -> A -> B -> A -> B \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 918027,
                "title": "o-n-time-o-1-space-javascript-solution-with-clear-explanation",
                "content": "```js\\n/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nconst leastInterval = function(tasks, n) {\\n  if (n === 0) return tasks.length; \\n  const counts = Array.from(counter(tasks).values());\\n  \\n  // sort at most 26 numbers, O(1)\\n  counts.sort((a, b) => b - a);\\n  \\n  const most = counts[0]; \\n  let idle = (most - 1) * n;\\n  \\n  for (let i = 1; i < counts.length; i += 1) {\\n    // count range is [1, most]\\n    \\n    // idle we can fill at most [most- 1]\\n    idle -= Math.min(counts[i], most - 1, idle);\\n    \\n    // can\\'t be negative\\n    if (idle === 0) break;\\n  }\\n  \\n  return tasks.length + idle;\\n};\\n\\nconst counter = (tasks) => {\\n  const map = new Map();\\n  \\n  for (const task of tasks) {\\n    map.set(task, (map.get(task) || 0) + 1);\\n  }\\n  \\n  return map;\\n}\\n```\\n\\n\\n## Summary\\n\\nThink about this problem as finding how many `idle` blocks we need, and then we can simply return `tasks.length + idle`.\\n\\nFirst come up with the worst case how many `idle` we need: Let the most frequent tasks\\' count be `most`, we need `(most - 1) * n` slots. \\n\\nFor example, if we have `[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]`. We can have the following:\\n```js\\n//    n = 2\\n// [A  x  x]\\n// [A  x  x]\\n// [A  x  x]   most - 1 = 5\\n// [A  x  x]\\n// [A  x  x]\\n// [A] \\n```\\n\\nThe `x` here represent `idles`. In this example, we have `(5 * 2) = 10` idles at worst case.\\n\\nWe need to count the frequencies of the tasks into `counts`, and sort it.\\n\\nNow we can fit the other tasks into the `idles` slots: iterate through the `counts` from most frequent to least frequent, and decrement `idles`. \\n\\nBecause we can fit at most `most - 1` tasks for each column, we decrement `idle` by `Math.min(counts[i], most - 1, idle)`. \\n\\nFor example, let the column has `3` slots (i.e. `most - 1 = 3`):  \\n  * If the next task\\'s count is `2`, we decrement `2`.\\n  * If the next task\\'s count is `4`, we can at most fit `3`.\\n  * Of course, if the idle space is not enough, we can only decrement `idle` to `0`. ( the last term).\\n\\nTo terminate faster, we can check if we used all of `idle`, i.e. `idle == 0`, we break the iteration.\\n\\nFinally return `tasks.length` + `idle.`\\n\\n## Complexity\\n\\n#### Time `O(N)`\\n`N` is the length of the tasks.\\n\\nIt takes `O(N)` to build the `counts` counter map. \\n\\nSorting the `counts` and iterating over it takes constant time `O(1)` because it\\'s at most `26` items.\\n\\n#### Space `O(1)` \\n\\nThe `counts` counter map takes constant space `O(26)`\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\n/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\nconst leastInterval = function(tasks, n) {\\n  if (n === 0) return tasks.length; \\n  const counts = Array.from(counter(tasks).values());\\n  \\n  // sort at most 26 numbers, O(1)\\n  counts.sort((a, b) => b - a);\\n  \\n  const most = counts[0]; \\n  let idle = (most - 1) * n;\\n  \\n  for (let i = 1; i < counts.length; i += 1) {\\n    // count range is [1, most]\\n    \\n    // idle we can fill at most [most- 1]\\n    idle -= Math.min(counts[i], most - 1, idle);\\n    \\n    // can\\'t be negative\\n    if (idle === 0) break;\\n  }\\n  \\n  return tasks.length + idle;\\n};\\n\\nconst counter = (tasks) => {\\n  const map = new Map();\\n  \\n  for (const task of tasks) {\\n    map.set(task, (map.get(task) || 0) + 1);\\n  }\\n  \\n  return map;\\n}\\n```\n```js\\n//    n = 2\\n// [A  x  x]\\n// [A  x  x]\\n// [A  x  x]   most - 1 = 5\\n// [A  x  x]\\n// [A  x  x]\\n// [A] \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 911403,
                "title": "sharing-my-sol-with-comments-easy-understanding-greedy-sol",
                "content": "```\\nApproach:- \\n\\nStep 1:- Find most occuring character in given stream\\nStep 2:- This is bit tricky --- the maximum time can be taken, according to gap of  \"n\"  would be, result = (max_freq - 1) * (n+1);\\n     let\\'s take an example -- tasks = [\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\t A _ _ A _ _ A_ _ A\\n\\t Observe here :- From Step1, we get \"A\" Now result would be this only, and for filler need to recurse again above steps\\n\\t -- why n+1? because if you see closely, Including \"A\" next \"A\" will come after with n (fillers) +1\\n ```\\n``` \\n\\t Now what if Input would be --  tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n \\t Now most occuring words has same frequency, they wont comes in as expression given below according to \"n\"\\n\\t A _ _ A _ _ A\\n\\t \\n\\t they should be like  A _ _ A _ _ A_ _\\n\\t \\n\\t To solve this we need to use:-   \\n            if (max_freq == it) {\\n                result++;\\n            }\\n       so that one alone \"B\" at least fits in after last \"A\"\\n\\t \\n\\t I hope, you\\'ll understand this now. if not, use comment down\\n ````\\n# \\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> count(26, 0);\\n        int tasks_size = tasks.size();\\n        int max_freq = 0;\\n        for (auto &it : tasks) {\\n            count[it - 65]++;   // 65 is ascii value of \\'A\\'\\n            max_freq = max(max_freq, count[it - 65]);\\n        }\\n\\n        int result = (max_freq - 1) * (n+1);\\n        for (auto &it : count) {\\n            if (max_freq == it) {\\n                result++;\\n            }\\n        }\\n\\n        return max(result, tasks_size);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy"
                ],
                "code": "```\\nApproach:- \\n\\nStep 1:- Find most occuring character in given stream\\nStep 2:- This is bit tricky --- the maximum time can be taken, according to gap of  \"n\"  would be, result = (max_freq - 1) * (n+1);\\n     let\\'s take an example -- tasks = [\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\t A _ _ A _ _ A_ _ A\\n\\t Observe here :- From Step1, we get \"A\" Now result would be this only, and for filler need to recurse again above steps\\n\\t -- why n+1? because if you see closely, Including \"A\" next \"A\" will come after with n (fillers) +1\\n ```\n``` \\n\\t Now what if Input would be --  tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n \\t Now most occuring words has same frequency, they wont comes in as expression given below according to \"n\"\\n\\t A _ _ A _ _ A\\n\\t \\n\\t they should be like  A _ _ A _ _ A_ _\\n\\t \\n\\t To solve this we need to use:-   \\n            if (max_freq == it) {\\n                result++;\\n            }\\n       so that one alone \"B\" at least fits in after last \"A\"\\n\\t \\n\\t I hope, you\\'ll understand this now. if not, use comment down\\n ```\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        vector<int> count(26, 0);\\n        int tasks_size = tasks.size();\\n        int max_freq = 0;\\n        for (auto &it : tasks) {\\n            count[it - 65]++;   // 65 is ascii value of \\'A\\'\\n            max_freq = max(max_freq, count[it - 65]);\\n        }\\n\\n        int result = (max_freq - 1) * (n+1);\\n        for (auto &it : count) {\\n            if (max_freq == it) {\\n                result++;\\n            }\\n        }\\n\\n        return max(result, tasks_size);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 761428,
                "title": "c-greedy",
                "content": "### [\\u53C2\\u8003](https://zxi.mytechroad.com/blog/greedy/leetcode-621-task-scheduler/)\\n\\n![image](https://assets.leetcode.com/users/images/57e522bd-36c0-4009-a898-1186473ccb1d_1595994812.1593027.png)\\n\\n![image](https://assets.leetcode.com/users/images/e863ca19-08b9-4c99-bd00-5feaa27dac45_1595994820.0236707.png)\\n\\n```C++\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        vector<int> count(26);\\n        \\n        for (const auto & item : tasks)\\n        {\\n            ++count[item - \\'A\\'];\\n        }\\n        \\n        const int max_count = *max_element(count.begin(), count.end());\\n        \\n        int ans = (max_count - 1) * (n + 1);\\n        \\n        ans += count_if(count.begin(), count.end(), [& max_count] (const int & c) { return c == max_count; });\\n        \\n        ans = max(ans, (int)tasks.size());\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        \\n        vector<int> count(26);\\n        \\n        for (const auto & item : tasks)\\n        {\\n            ++count[item - \\'A\\'];\\n        }\\n        \\n        const int max_count = *max_element(count.begin(), count.end());\\n        \\n        int ans = (max_count - 1) * (n + 1);\\n        \\n        ans += count_if(count.begin(), count.end(), [& max_count] (const int & c) { return c == max_count; });\\n        \\n        ans = max(ans, (int)tasks.size());\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760744,
                "title": "task-scheduler-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    int leastInterval(vector<char>& tasks, int k) {\\n        \\n        map <int,int> mp;\\n        int n = tasks.size();\\n        int number_of_cycles = 0;\\n        \\n        // the approach employed here is to find the maximum number of cycles(m) of atleast length k\\n        // (which is the minimum distance between two same executions). The length of first (m-1)\\n        // cycles have to be fixed but the last cycle\\'s length may vary, as the last cycle will always contain\\n        // the processes that require maximum number of cycles. Therefore, assuming the final length to be \\n        // \\'ans\\', we have to add 1 to the length as and when we encounter the number_of_cycles required for\\n        // a process to be equal to the maximum number_of_cycles.\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            mp[tasks[i] - \\'A\\'] += 1;\\n            number_of_cycles = max(number_of_cycles,mp[tasks[i] - \\'A\\']);\\n        }\\n        \\n        int ans = (number_of_cycles - 1) * (k+1); // minimum length required to complete (m-1) cycles\\n        \\n        for(auto it : mp)\\n        {\\n            if(it.second == number_of_cycles)\\n                ans += 1;\\n        }\\n        \\n        ans = max(ans,n);\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    int leastInterval(vector<char>& tasks, int k) {\\n        \\n        map <int,int> mp;\\n        int n = tasks.size();\\n        int number_of_cycles = 0;\\n        \\n        // the approach employed here is to find the maximum number of cycles(m) of atleast length k\\n        // (which is the minimum distance between two same executions). The length of first (m-1)\\n        // cycles have to be fixed but the last cycle\\'s length may vary, as the last cycle will always contain\\n        // the processes that require maximum number of cycles. Therefore, assuming the final length to be \\n        // \\'ans\\', we have to add 1 to the length as and when we encounter the number_of_cycles required for\\n        // a process to be equal to the maximum number_of_cycles.\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            mp[tasks[i] - \\'A\\'] += 1;\\n            number_of_cycles = max(number_of_cycles,mp[tasks[i] - \\'A\\']);\\n        }\\n        \\n        int ans = (number_of_cycles - 1) * (k+1); // minimum length required to complete (m-1) cycles\\n        \\n        for(auto it : mp)\\n        {\\n            if(it.second == number_of_cycles)\\n                ans += 1;\\n        }\\n        \\n        ans = max(ans,n);\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760183,
                "title": "java-easiest-way-with-explanation",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // Intuition behind solution: Count the number of times each type of tasks occurs with a hash map.\\n\\t\\t//From the values in the hash map create a max heap. \\n\\t\\t//While the max heap is not empty, at every \"cycle\" in the cpu cooldown time of n, \\n\\t\\t//try to run the task that occurs the most adding these tasks to a temporary list. \\n\\t\\t//After iterating through the cooldown time (given as n in the problem) iterate through the temporary list \\n\\t\\t//checking for which tasks still need to be run (if the value in the list is greater than zero add it back to the max heap). \\n\\t\\t//Then, increment our return value by either the size of the temporary list (i.e. all the tasks you were able to run) \\n\\t\\t//or by the cooldown time (if you ran out of tasks to run you have to wait the full cooldown). \\n\\t\\t//Finally, once the max heap is empty, return cycles.\\n        \\n        //step-1 map all char to freq\\n        Map<Character,Integer> map=new HashMap<>();\\n        for(char c:tasks){\\n            map.put(c,map.getOrDefault(c,0)+1);\\n        }\\n        //step-2 create maxheap acc to freq\\n        PriorityQueue<Integer> maxHeap=new PriorityQueue<>((a,b)->b-a);\\n        maxHeap.addAll(map.values());\\n        //step-3 run task \\n        \\n        int cycles=0;\\n        while(!maxHeap.isEmpty()){\\n            List<Integer> list=new ArrayList<>(); //add n+1 element \\n            for(int i=0;i<n+1;i++){\\n                if(!maxHeap.isEmpty()){\\n                    list.add(maxHeap.remove());\\n                }\\n            }\\n            for(int i:list){\\n                if(--i>0){  //means that element can we use further\\n                    maxHeap.add(i);\\n                }\\n            }\\n            //if any element have freq then it can run with idle state ,so n+1\\n            cycles+=maxHeap.isEmpty()?list.size():n+1;\\n            \\n        }\\n        return cycles;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        // Intuition behind solution: Count the number of times each type of tasks occurs with a hash map.\\n\\t\\t//From the values in the hash map create a max heap. \\n\\t\\t//While the max heap is not empty, at every \"cycle\" in the cpu cooldown time of n, \\n\\t\\t//try to run the task that occurs the most adding these tasks to a temporary list. \\n\\t\\t//After iterating through the cooldown time (given as n in the problem) iterate through the temporary list \\n\\t\\t//checking for which tasks still need to be run (if the value in the list is greater than zero add it back to the max heap). \\n\\t\\t//Then, increment our return value by either the size of the temporary list (i.e. all the tasks you were able to run) \\n\\t\\t//or by the cooldown time (if you ran out of tasks to run you have to wait the full cooldown). \\n\\t\\t//Finally, once the max heap is empty, return cycles.\\n        \\n        //step-1 map all char to freq\\n        Map<Character,Integer> map=new HashMap<>();\\n        for(char c:tasks){\\n            map.put(c,map.getOrDefault(c,0)+1);\\n        }\\n        //step-2 create maxheap acc to freq\\n        PriorityQueue<Integer> maxHeap=new PriorityQueue<>((a,b)->b-a);\\n        maxHeap.addAll(map.values());\\n        //step-3 run task \\n        \\n        int cycles=0;\\n        while(!maxHeap.isEmpty()){\\n            List<Integer> list=new ArrayList<>(); //add n+1 element \\n            for(int i=0;i<n+1;i++){\\n                if(!maxHeap.isEmpty()){\\n                    list.add(maxHeap.remove());\\n                }\\n            }\\n            for(int i:list){\\n                if(--i>0){  //means that element can we use further\\n                    maxHeap.add(i);\\n                }\\n            }\\n            //if any element have freq then it can run with idle state ,so n+1\\n            cycles+=maxHeap.isEmpty()?list.size():n+1;\\n            \\n        }\\n        return cycles;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 616009,
                "title": "python3-maxheap-explanation",
                "content": "```\\n\"\"\"\\nThis problem took me a lot of struggle to get it done. Here is one way of how it can be done.\\n\\nBasically to maintain an interval of \\'n\\' we need to pop \\'n+1\\' different tasks from heap\\neg.1 [A,A,A,B,B,B] n = 2,  \\n=> heap = [2,2] \\nhere we dont have 3 different tasks so not possible to pop all 3 distinct tasks \\neg.2 [A,A,B,B,C,C] n = 2,\\n=> heap = [2,2,2] here we can\\n\\n\\n\\n\\n\\nHowever if we dont have n + 1 distinct taks we can use idle (i) as fillers to make them n + 1.\\nfrom eg 1.  pop(heap) gives 2 and heap = [2] and temp = [2-1]\\n            pop(heap) gives 2 and heap = [] and temp = [2-1, 2-1]\\n            refill heap from temp : heap = [1,1]\\nhere even though we only popped 2 tasks we count them as \\'n+1\\' = 3\\nbeacause rest are idle fillers required before same machine can work again\\n\\n\\n\\n\\nThe only time we dont want to count idle fillers is when our temp is all 0s i.e temp = [0,0]\\nThis is because we dont have more tasks for the machine. so we should not count for cooling\\n\\n\\n\"\"\"\\n\\nfrom heapq import heapify, heappush, heappop\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        ## Map task to negative count (forming max heap)\\n        counter = [0]*26\\n        for task in tasks:\\n            index = ord(task) - ord(\\'A\\')\\n            counter[index] -= 1\\n            \\n            \\n            \\n        ## filter tasks with 0 count and heapify\\n        heap = [ count for count in counter if count < 0]\\n        heapify(heap)\\n        \\n        \\n        intervals = 0\\n        tasks = []\\n        \\n        ## run this loop as long as we have tasks pending tasks (in @heap or @tasks)\\n        while heap or tasks:\\n            worked = 0\\n            \\n            ## try to remove n + 1 distinct tasks from the heap\\n            for i in range(n+1):\\n                if heap:\\n                    \\n                    ## count the number of tasks that were completed\\n                    worked += 1\\n                    task = heappop(heap)\\n                    \\n                    ## if the task value is not 0 include it in @tasks\\n                    if task + 1 < 0: tasks.append(task + 1)\\n                    continue\\n                break\\n                \\n                \\n            ## we were succuessful in completing n + 1 distinct tasks\\n            if worked == n + 1:\\n                intervals += n + 1\\n                \\n            ## heap ran out before n + 1 tasks could be completed\\n            ## but we still have pending tasks \\n            ## so in order to maintain interval n we add n + 1 to intervals\\n            elif worked < n + 1 and tasks:\\n                intervals += n + 1\\n            \\n            \\n            ## heap ran out before n + 1 tasks could be completed\\n            ## but we dont have pending tasks\\n            ## so maintaining interval n is not necessary\\n            elif worked < n + 1 and not tasks:\\n                intervals += worked\\n                \\n            \\n            ## refill heap\\n            while tasks:\\n                heappush(heap, tasks.pop())\\n                \\n        return intervals\\n\\t\\t\\n```",
                "solutionTags": [
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n\"\"\"\\nThis problem took me a lot of struggle to get it done. Here is one way of how it can be done.\\n\\nBasically to maintain an interval of \\'n\\' we need to pop \\'n+1\\' different tasks from heap\\neg.1 [A,A,A,B,B,B] n = 2,  \\n=> heap = [2,2] \\nhere we dont have 3 different tasks so not possible to pop all 3 distinct tasks \\neg.2 [A,A,B,B,C,C] n = 2,\\n=> heap = [2,2,2] here we can\\n\\n\\n\\n\\n\\nHowever if we dont have n + 1 distinct taks we can use idle (i) as fillers to make them n + 1.\\nfrom eg 1.  pop(heap) gives 2 and heap = [2] and temp = [2-1]\\n            pop(heap) gives 2 and heap = [] and temp = [2-1, 2-1]\\n            refill heap from temp : heap = [1,1]\\nhere even though we only popped 2 tasks we count them as \\'n+1\\' = 3\\nbeacause rest are idle fillers required before same machine can work again\\n\\n\\n\\n\\nThe only time we dont want to count idle fillers is when our temp is all 0s i.e temp = [0,0]\\nThis is because we dont have more tasks for the machine. so we should not count for cooling\\n\\n\\n\"\"\"\\n\\nfrom heapq import heapify, heappush, heappop\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        ## Map task to negative count (forming max heap)\\n        counter = [0]*26\\n        for task in tasks:\\n            index = ord(task) - ord(\\'A\\')\\n            counter[index] -= 1\\n            \\n            \\n            \\n        ## filter tasks with 0 count and heapify\\n        heap = [ count for count in counter if count < 0]\\n        heapify(heap)\\n        \\n        \\n        intervals = 0\\n        tasks = []\\n        \\n        ## run this loop as long as we have tasks pending tasks (in @heap or @tasks)\\n        while heap or tasks:\\n            worked = 0\\n            \\n            ## try to remove n + 1 distinct tasks from the heap\\n            for i in range(n+1):\\n                if heap:\\n                    \\n                    ## count the number of tasks that were completed\\n                    worked += 1\\n                    task = heappop(heap)\\n                    \\n                    ## if the task value is not 0 include it in @tasks\\n                    if task + 1 < 0: tasks.append(task + 1)\\n                    continue\\n                break\\n                \\n                \\n            ## we were succuessful in completing n + 1 distinct tasks\\n            if worked == n + 1:\\n                intervals += n + 1\\n                \\n            ## heap ran out before n + 1 tasks could be completed\\n            ## but we still have pending tasks \\n            ## so in order to maintain interval n we add n + 1 to intervals\\n            elif worked < n + 1 and tasks:\\n                intervals += n + 1\\n            \\n            \\n            ## heap ran out before n + 1 tasks could be completed\\n            ## but we dont have pending tasks\\n            ## so maintaining interval n is not necessary\\n            elif worked < n + 1 and not tasks:\\n                intervals += worked\\n                \\n            \\n            ## refill heap\\n            while tasks:\\n                heappush(heap, tasks.pop())\\n                \\n        return intervals\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 557332,
                "title": "python-heap-solution",
                "content": "I wrote my own version of priority queue after reading the solutions from here, hope it could be easy to understand for someone.\\n\\n```\\nimport collections\\n\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        tasks_dict=collections.Counter(tasks)\\n        heap=[]\\n        counter=0\\n        \\n        for k,v in tasks_dict.items():\\n            heappush(heap, (-v,k))\\n        \\n        while heap:\\n            i=0\\n            temp=[]\\n            while i<=n:\\n                if len(heap)>0:\\n                    index,task=heappop(heap)\\n                    if index!=-1:\\n                        temp.append((index+1,task)) \\n                counter+=1\\n                if len(heap)==0 and len(temp)==0:\\n                    break\\n                i+=1\\n            for i in temp:\\n                heappush(heap,i)\\n        \\n        \\n        return counter\\n```",
                "solutionTags": [],
                "code": "```\\nimport collections\\n\\n\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        tasks_dict=collections.Counter(tasks)\\n        heap=[]\\n        counter=0\\n        \\n        for k,v in tasks_dict.items():\\n            heappush(heap, (-v,k))\\n        \\n        while heap:\\n            i=0\\n            temp=[]\\n            while i<=n:\\n                if len(heap)>0:\\n                    index,task=heappop(heap)\\n                    if index!=-1:\\n                        temp.append((index+1,task)) \\n                counter+=1\\n                if len(heap)==0 and len(temp)==0:\\n                    break\\n                i+=1\\n            for i in temp:\\n                heappush(heap,i)\\n        \\n        \\n        return counter\\n```",
                "codeTag": "Java"
            },
            {
                "id": 225214,
                "title": "python-count-sort-o-n",
                "content": "```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        taskCount = collections.Counter(tasks)\\n        taskCount = sorted(taskCount.values(), reverse = True)\\n        nGap = taskCount[0] - 1\\n        idle = n * nGap\\n        for count in taskCount[1:]:\\n            idle -= min(nGap, count)\\n        return idle + sum(taskCount) if idle > 0 else sum(taskCount)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks, n):\\n        \"\"\"\\n        :type tasks: List[str]\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        taskCount = collections.Counter(tasks)\\n        taskCount = sorted(taskCount.values(), reverse = True)\\n        nGap = taskCount[0] - 1\\n        idle = n * nGap\\n        for count in taskCount[1:]:\\n            idle -= min(nGap, count)\\n        return idle + sum(taskCount) if idle > 0 else sum(taskCount)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 216328,
                "title": "simple-javascript-solution-using-calculating-idle-slots-with-explaination",
                "content": "```\\n// Using the example of [A, A, A, B, B, B], n = 2:\\n// Total Interval = No. of Tasks + Idle Slots\\n// We know no. of idle slots we need is 2 by drawing the following chart:\\n// A B idle\\n// A B idle\\n// A B idle\\n// A B\\n\\n// We only care about the task(s) with the highest frequency in order to satisfy the requirement. The rest of the space is filled by either less frequent tasks or idle slots or both. \\n// We start by pretending the rest of the space is occupied by idle slots, and the way to calculate that is: (maxFrequency - 1) * n\\n// If we have more than enough other tasks to fill these idle slots, then great, we will take no. of tasks as the answer\\n// One caveat is that there may be more than one task that shares this max frequency, and in which case we need to count those tasks in the last row of the chart\\n\\nvar leastInterval = function(tasks, n) {\\n    // use map to find the task(s) with the max frequency\\n    let map = {};\\n    tasks.forEach(task => map[task] = map[task]+1 || 1);\\n    let maxFreq = 0;\\n    for (task in map) {\\n        maxFreq = Math.max(map[task], maxFreq);\\n    }\\n\\t// In case there are more than one task with this maxFreq, we need to add them to the last row\\n    let sameMaxFreq = 0;\\n    for (task in map) {\\n        if (map[task] === maxFreq) {\\n            sameMaxFreq++;\\n        }\\n    }    \\n    return Math.max(tasks.length, maxFreq + n*(maxFreq - 1) + sameMaxFreq - 1)   \\n};\\n```",
                "solutionTags": [],
                "code": "```\\n// Using the example of [A, A, A, B, B, B], n = 2:\\n// Total Interval = No. of Tasks + Idle Slots\\n// We know no. of idle slots we need is 2 by drawing the following chart:\\n// A B idle\\n// A B idle\\n// A B idle\\n// A B\\n\\n// We only care about the task(s) with the highest frequency in order to satisfy the requirement. The rest of the space is filled by either less frequent tasks or idle slots or both. \\n// We start by pretending the rest of the space is occupied by idle slots, and the way to calculate that is: (maxFrequency - 1) * n\\n// If we have more than enough other tasks to fill these idle slots, then great, we will take no. of tasks as the answer\\n// One caveat is that there may be more than one task that shares this max frequency, and in which case we need to count those tasks in the last row of the chart\\n\\nvar leastInterval = function(tasks, n) {\\n    // use map to find the task(s) with the max frequency\\n    let map = {};\\n    tasks.forEach(task => map[task] = map[task]+1 || 1);\\n    let maxFreq = 0;\\n    for (task in map) {\\n        maxFreq = Math.max(map[task], maxFreq);\\n    }\\n\\t// In case there are more than one task with this maxFreq, we need to add them to the last row\\n    let sameMaxFreq = 0;\\n    for (task in map) {\\n        if (map[task] === maxFreq) {\\n            sameMaxFreq++;\\n        }\\n    }    \\n    return Math.max(tasks.length, maxFreq + n*(maxFreq - 1) + sameMaxFreq - 1)   \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 184769,
                "title": "compiled-3-approaches-python-solution-with-complexity-analysis-perfect-for-interviews",
                "content": "```python\nfrom heapq import heappush, heappop\nfrom collections import Counter\n\n# 621. Task Scheduler\n# https://leetcode.com/problems/task-scheduler/\n\n# Approach 1: Using sorting Time: O(time), Space: O(1)\n# Not implemented, as internet is full of it and its sub-optimal anyways\n\n# Approach 2: Using priority queue, Time: O(n), Space: O(1)\n# Very similar approach and intuition to:\n# https://leetcode.com/problems/rearrange-string-k-distance-apart\n\n# We need to arrange the characters in string such that each same character is K distance apart,\n# where distance in this problems is time b/w two similar task execution.\n\n# 1. Add tasks based on frequency to priority queue. We use negative values to get maxheap.\n# 2. Pick the task in each round of 'n' with highest frequency. (heappop)\n# 3. As you pick the task, decrease the frequency, and put them back after the round.\n\n# Time: O(n), Actually it is: O(Nlog(N) * n) where N is the number of tasks and n is the cool-off period.\n#       N <= 26 so we have O(Nlog(N) * n) => O(26log(26) * n) => O(n)\n# Space: O(1), will not be more than O(26).\nclass Solution(object):\n    def leastInterval(self, tasks, n):\n        \"\"\"\n        :type tasks: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        time, q = 0, []\n\n        for k, v in Counter(tasks).items():\n            heappush(q, -v) # Use negatives to make min heap, max heap\n\n        while q:\n            i, temp = 0, []\n\n            while i <= n:\n                time += 1\n\n                if q:\n                    x = heappop(q)\n                    if x < -1: temp.append(x + 1)   # >= -1 means, the task was completed,\n                                                    # else dec frequency and add to temp for next round\n\n                if not q and not temp: break        # q is empty and no more tasks left\n                i += 1                              # keep inrementing the cooling timer\n\n            for item in temp: heappush(q, item)     # push all pending task frequencies onto maxheap (min heap with -ve values)\n                                                    # or ADT priority queue (hence the variable name q)\n        return time\n\n# Approach 3: Calculating the idle slots, Time: O(n), Space: O(1)\nclass Solution2(object):\n    # O(n) # of the most frequent tasks, say longest, will determine the legnth\n    # to void counting idle intervals, we count (longest - 1) * (n + 1)\n    # then count how many will in the last cycle which means finding ties\n    # if counted number is less than # of tasks which means \n    # less frequent tasks can be always placed in such cycle\n    # and it won't cause any conflicts with requirement since even most frequent can be settle\n    # finally, return max(# of task, total counted number)\n    def leastInterval(self, tasks, n):\n        d = collections.Counter(tasks)\n        counts = d.values()\n        longest = max(counts)\n        ans = (longest - 1) * (n + 1)\n\n        for count in counts:\n            ans += 1 if count == longest else 0\n\n        return max(len(tasks), ans)\n```",
                "solutionTags": [],
                "code": "```python\nfrom heapq import heappush, heappop\nfrom collections import Counter\n\n# 621. Task Scheduler\n# https://leetcode.com/problems/task-scheduler/\n\n# Approach 1: Using sorting Time: O(time), Space: O(1)\n# Not implemented, as internet is full of it and its sub-optimal anyways\n\n# Approach 2: Using priority queue, Time: O(n), Space: O(1)\n# Very similar approach and intuition to:\n# https://leetcode.com/problems/rearrange-string-k-distance-apart\n\n# We need to arrange the characters in string such that each same character is K distance apart,\n# where distance in this problems is time b/w two similar task execution.\n\n# 1. Add tasks based on frequency to priority queue. We use negative values to get maxheap.\n# 2. Pick the task in each round of 'n' with highest frequency. (heappop)\n# 3. As you pick the task, decrease the frequency, and put them back after the round.\n\n# Time: O(n), Actually it is: O(Nlog(N) * n) where N is the number of tasks and n is the cool-off period.\n#       N <= 26 so we have O(Nlog(N) * n) => O(26log(26) * n) => O(n)\n# Space: O(1), will not be more than O(26).\nclass Solution(object):\n    def leastInterval(self, tasks, n):\n        \"\"\"\n        :type tasks: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        time, q = 0, []\n\n        for k, v in Counter(tasks).items():\n            heappush(q, -v) # Use negatives to make min heap, max heap\n\n        while q:\n            i, temp = 0, []\n\n            while i <= n:\n                time += 1\n\n                if q:\n                    x = heappop(q)\n                    if x < -1: temp.append(x + 1)   # >= -1 means, the task was completed,\n                                                    # else dec frequency and add to temp for next round\n\n                if not q and not temp: break        # q is empty and no more tasks left\n                i += 1                              # keep inrementing the cooling timer\n\n            for item in temp: heappush(q, item)     # push all pending task frequencies onto maxheap (min heap with -ve values)\n                                                    # or ADT priority queue (hence the variable name q)\n        return time\n\n# Approach 3: Calculating the idle slots, Time: O(n), Space: O(1)\nclass Solution2(object):\n    # O(n) # of the most frequent tasks, say longest, will determine the legnth\n    # to void counting idle intervals, we count (longest - 1) * (n + 1)\n    # then count how many will in the last cycle which means finding ties\n    # if counted number is less than # of tasks which means \n    # less frequent tasks can be always placed in such cycle\n    # and it won't cause any conflicts with requirement since even most frequent can be settle\n    # finally, return max(# of task, total counted number)\n    def leastInterval(self, tasks, n):\n        d = collections.Counter(tasks)\n        counts = d.values()\n        longest = max(counts)\n        ans = (longest - 1) * (n + 1)\n\n        for count in counts:\n            ans += 1 if count == longest else 0\n\n        return max(len(tasks), ans)\n```",
                "codeTag": "Java"
            },
            {
                "id": 142589,
                "title": "100th-percentile-runtime-python-o-n-time-o-26-space-hash-map-and-some-math-with-explanation",
                "content": "\\n```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        hm = {}\\n        for t in tasks:\\n            if t not in hm:\\n                hm[t] = 1\\n            else:\\n                hm[t]+= 1\\n        \\n        m = 0   # max task frequency\\n        mc = 1   # num tasks at that max frequency\\n        for v in hm.values():\\n            if v == m:\\n                mc += 1\\n            elif v > m:\\n                mc = 1\\n                m = v         \\n\\n        base = m*mc # count of all max frequency tasks\\n        base += (m-1)*(n-(mc-1)) # add in the \"spacer\" elements\\n       \\n        return max(base, len(tasks))\\n\\t\\t\\t\\t\\n```\\n\\t\\t\\t\\t\\nWe can start just by calculating the time to run for just the set of highest frequency tasks and the needed fillers/idle-spaces for them  (e.g. if \"A\" and \"B\" happen most frequently, both at 5 times- then we just calculate the schedule for them alone - along with the spaces between them)\\n\\nFor example if our input is \\n[\"A\",\"A\",\"A\",\"C\",\"F\",\"B\",\"B\",\"B\"]\\nthis \"base schedule\" would look like\\nAB_AB_AB\\n\\nOnce we have done that - we know: \\n\\t\\t\\t\\t1) we won\\'t ever need more idle spaces (since all remaining tasks are lesser in frequency - we can safely \"intersperse\" remaining tasks into the schedule without  running past the end and needing to add more idles) \\n\\t\\t\\t\\t2) we can\\'t have any fewer spaces either (since there is no legal way to bring these tasks closer together time-wise in the schedule) (i\\'m not counting \"filling\" spaces here - we just can\\'t delete any more without breaking a cooldown)\\n\\nI called the length of this this initial schedule \"base\" in the code above.\\n\\nThen, we have 1 of 2 conditions:\\n\\t1) we have enough tasks left over to fill up all remaining idle spaces - in which case we have no idle spaces at all - so our run-time is just len(tasks)\\n\\t2) we don\\'t have enough tasks to fill  idle spaces - in which case - we can schedule all remaining tasks within the length of the \"base\" schedule calculated above - so base will end up being our overall length",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def leastInterval(self, tasks, n):\\n        hm = {}\\n        for t in tasks:\\n            if t not in hm:\\n                hm[t] = 1\\n            else:\\n                hm[t]+= 1\\n        \\n        m = 0   # max task frequency\\n        mc = 1   # num tasks at that max frequency\\n        for v in hm.values():\\n            if v == m:\\n                mc += 1\\n            elif v > m:\\n                mc = 1\\n                m = v         \\n\\n        base = m*mc # count of all max frequency tasks\\n        base += (m-1)*(n-(mc-1)) # add in the \"spacer\" elements\\n       \\n        return max(base, len(tasks))\\n\\t\\t\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946442,
                "title": "beginner-friendly-approach-maxheaps",
                "content": "# Intuition\\nThe problem asks to schedule a sequence of tasks with cooling intervals such that the same task cannot be scheduled within \\'n\\' units of time. We need to find the minimum time required to execute all tasks under these constraints. To solve this, we can use a priority queue (max-heap) to keep track of the most frequent tasks and a queue to handle the cooling intervals.\\n\\n# Approach\\n1. Initialize a max-heap (priority_queue) \\'pq\\' to store the frequencies of tasks in descending order.\\n2. Initialize a queue of vectors \\'q\\', where each vector contains two elements: [remaining frequency, next available time]. This queue will be used to handle cooling intervals.\\n3. Initialize a vector \\'counter\\' of size 26 (to represent characters \\'A\\' to \\'Z\\') to count the frequency of each task.\\n4. Iterate through the \\'tasks\\' vector:\\n   a. Increment the corresponding counter for each task.\\n5. Iterate through the 26 characters (\\'A\\' to \\'Z\\'):\\n   a. If the counter for a character is greater than 0, push its frequency onto the \\'pq\\'.\\n6. Initialize a variable \\'time\\' to 0 to keep track of the current time.\\n7. While \\'q\\' is not empty or \\'pq\\' is not empty:\\n   a. Increment \\'time\\' to represent the passage of time.\\n   b. If \\'pq\\' is not empty (i.e., there are tasks available to execute):\\n      i. Pop the top element from \\'pq\\' (representing the most frequent task).\\n      ii. If the frequency of this task is greater than 1, push a vector [remaining frequency - 1, time + n] onto \\'q\\' to schedule it for a cooling interval.\\n   c. If \\'q\\' is not empty and the next task in \\'q\\' can be executed at time \\'time\\':\\n      i. Pop the task from \\'q\\'.\\n      ii. Push the remaining frequency of this task back onto \\'pq\\' to make it available for execution.\\n8. Return \\'time\\', which represents the minimum time required to complete all tasks.\\n\\n# Complexity\\n- Time complexity:\\n  - Iterating through \\'tasks\\' to count frequencies takes O(n) time, where \\'n\\' is the number of tasks.\\n  - Pushing tasks onto \\'pq\\' takes O(26 * log(26)) = O(1) time, as there are at most 26 distinct tasks.\\n  - In the worst case, we iterate through the queue \\'q\\' for each task, which takes O(n) time.\\n  - Overall time complexity is O(n).\\n- Space complexity:\\n  - The space complexity is O(26) for the \\'counter\\' vector, which is O(1).\\n  - The priority queue \\'pq\\' can store at most 26 tasks, which is O(1).\\n  - The queue \\'q\\' can store at most \\'n\\' elements, which is O(n).\\n  - Overall space complexity is O(n).\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        queue<vector<int>> q;\\n        vector<int> counter(26);\\n\\n        for (int i = 0; i < tasks.size(); ++i)\\n            ++counter[tasks[i] - \\'A\\'];\\n        for (int i = 0; i < 26; ++i){\\n            if (counter[i])\\n                pq.push(counter[i]);\\n        }\\n\\n        int time = 0;\\n        while (!q.empty() || !pq.empty()){\\n            ++time;\\n            if (!pq.empty()){\\n                if (pq.top() - 1)\\n                    q.push({pq.top() - 1, time + n});\\n                pq.pop();\\n            }\\n            if (!q.empty() && q.front()[1] == time){\\n                pq.push(q.front()[0]);\\n                q.pop();\\n            }\\n        }\\n        return time;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        queue<vector<int>> q;\\n        vector<int> counter(26);\\n\\n        for (int i = 0; i < tasks.size(); ++i)\\n            ++counter[tasks[i] - \\'A\\'];\\n        for (int i = 0; i < 26; ++i){\\n            if (counter[i])\\n                pq.push(counter[i]);\\n        }\\n\\n        int time = 0;\\n        while (!q.empty() || !pq.empty()){\\n            ++time;\\n            if (!pq.empty()){\\n                if (pq.top() - 1)\\n                    q.push({pq.top() - 1, time + n});\\n                pq.pop();\\n            }\\n            if (!q.empty() && q.front()[1] == time){\\n                pq.push(q.front()[0]);\\n                q.pop();\\n            }\\n        }\\n        return time;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432224,
                "title": "simple-and-easy-solution-100-6-lines-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int leastInterval(char[] arr, int n) {\\n        int feq[] = new int[26];\\n        for(char i: arr)feq[i-\\'A\\']++;\\n        Arrays.sort(feq);\\n        int max = feq[feq.length-1], count =0;\\n        for(int i:feq)if(i==max)count++;\\n        return Math.max(arr.length, (max-1)*(n+1)+count);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Greedy",
                    "Sorting",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] arr, int n) {\\n        int feq[] = new int[26];\\n        for(char i: arr)feq[i-\\'A\\']++;\\n        Arrays.sort(feq);\\n        int max = feq[feq.length-1], count =0;\\n        for(int i:feq)if(i==max)count++;\\n        return Math.max(arr.length, (max-1)*(n+1)+count);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367589,
                "title": "c-priority-queue",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) \\n    {\\n        if (n == 0 || tasks == null || tasks.Length == 0)\\n        {\\n            return tasks?.Length ?? 0;\\n        }\\n\\n        var map = tasks\\n                .GroupBy(it => it)\\n                .Select(it => (0, Count: it.Count()))\\n                .OrderByDescending(it => it.Count);\\n\\n        var workQueue = new PriorityQueue<int, int>(map, Comparer<int>.Create((l, r) => r - l));\\n        var idleQueue = new Queue<(int count, int next)>();\\n\\n        var time = 0;\\n        while (workQueue.Count > 0 || idleQueue.Any())\\n        {\\n            time++;\\n            if (workQueue.TryDequeue(out _, out var count) && count > 1)\\n            {\\n                idleQueue.Enqueue((--count, time + n));\\n            }\\n\\n            if (idleQueue.Any() && idleQueue.Peek().next == time)\\n            {\\n                workQueue.Enqueue(0, idleQueue.Dequeue().count);\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int LeastInterval(char[] tasks, int n) \\n    {\\n        if (n == 0 || tasks == null || tasks.Length == 0)\\n        {\\n            return tasks?.Length ?? 0;\\n        }\\n\\n        var map = tasks\\n                .GroupBy(it => it)\\n                .Select(it => (0, Count: it.Count()))\\n                .OrderByDescending(it => it.Count);\\n\\n        var workQueue = new PriorityQueue<int, int>(map, Comparer<int>.Create((l, r) => r - l));\\n        var idleQueue = new Queue<(int count, int next)>();\\n\\n        var time = 0;\\n        while (workQueue.Count > 0 || idleQueue.Any())\\n        {\\n            time++;\\n            if (workQueue.TryDequeue(out _, out var count) && count > 1)\\n            {\\n                idleQueue.Enqueue((--count, time + n));\\n            }\\n\\n            if (idleQueue.Any() && idleQueue.Peek().next == time)\\n            {\\n                workQueue.Enqueue(0, idleQueue.Dequeue().count);\\n            }\\n        }\\n\\n        return time;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308483,
                "title": "621-time-96-89-and-space-99-50-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Use the \"collections.Counter\" method to count the number of occurrences of each task in the \"tasks\" list, and store the result in the \"task_count\" variable.\\n2. Find the maximum count of any task in the \"task_count\" dictionary by calling the \"max\" method on \"task_count.values()\", and store the result in the \"max_count\" variable.\\n3. Count the number of tasks that have a count equal to \"max_count\" by using a generator expression and the \"sum\" function, and store the result in the \"max_tasks\" variable.\\n4. Calculate the total number of time slots required to complete all tasks, using the formula: (max_count - 1) * (n + 1) + max_tasks. The \"-1\" in the formula accounts for the fact that the last task does not need to be followed by an idle period.\\n5. Return the maximum of the total number of time slots and the total number of tasks, which represents the minimum number of time slots required to complete all tasks. This is done using the \"max\" function on \"total_slots\" and \"len(tasks)\".\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_count = collections.Counter(tasks)\\n        max_count = max(task_count.values())\\n        max_tasks = sum(1 for count in task_count.values() if count == max_count)\\n        total_slots = (max_count - 1) * (n + 1) + max_tasks\\n        return max(total_slots, len(tasks))\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Hash Table",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_count = collections.Counter(tasks)\\n        max_count = max(task_count.values())\\n        max_tasks = sum(1 for count in task_count.values() if count == max_count)\\n        total_slots = (max_count - 1) * (n + 1) + max_tasks\\n        return max(total_slots, len(tasks))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2912817,
                "title": "easy-understanding-solution",
                "content": "# Intuition\\n1.) create max priority queue with frequency of task. \\n2.) Remove the maximum freq task from priority queue and reduce frequecy by one(as we used it once). \\n3.) Keep this task in queue and it will be in queue till colling period. Once cooling period reached then take it out from queue and put back in max priority queue for processing.\\n4.) keep this process till priority queue and holding queue is empty. \\n \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if(n == 0) return tasks.length;\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b)-> b-a);\\n        int[] freq = new int[26];\\n        for(char c : tasks){\\n            freq[c - \\'A\\']++;\\n        }\\n        for(int val : freq ){\\n            if(val > 0) pq.add(val);\\n        }\\n        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();\\n        int time = 0;\\n        while(!pq.isEmpty() || !queue.isEmpty()){\\n            time++;\\n            if(!pq.isEmpty()){\\n                int val = pq.remove();\\n                val--;\\n                if(val > 0)\\n                    queue.add(new Pair(time+n, val));\\n            }\\n            if(!queue.isEmpty() && queue.peek().getKey() == time){\\n                pq.add(queue.remove().getValue());\\n            }\\n        }\\n        return time;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        if(n == 0) return tasks.length;\\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b)-> b-a);\\n        int[] freq = new int[26];\\n        for(char c : tasks){\\n            freq[c - \\'A\\']++;\\n        }\\n        for(int val : freq ){\\n            if(val > 0) pq.add(val);\\n        }\\n        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();\\n        int time = 0;\\n        while(!pq.isEmpty() || !queue.isEmpty()){\\n            time++;\\n            if(!pq.isEmpty()){\\n                int val = pq.remove();\\n                val--;\\n                if(val > 0)\\n                    queue.add(new Pair(time+n, val));\\n            }\\n            if(!queue.isEmpty() && queue.peek().getKey() == time){\\n                pq.add(queue.remove().getValue());\\n            }\\n        }\\n        return time;\\n    }\\n}\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2907683,
                "title": "python-intuitive-solution-explanation-o-n-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe need to keep track of all the available tasks that we can action and the tasks that still need to wait. The most efficient way to pick the next task is to greedily pick the one that has the greatest count every iteration. This is because if we leave the large count tasks for the end, we are left with a lot of tasks that must wait on each other. N has to be 1 or greater so we cannot put multiple tasks in at once. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo get the tasks that have the highest count, we can use a maxHeap to retrieve them. We do not need to keep track of the actual tasks, only their counts because the final result is simply the minTime taken. We can also use a queue to store the tasks that must still wait along with when they can be actioned. For every iteration, we increase the current time. Then we pop the task with the greatest count from the heap and add it to the queue along with when it will be ready to action (currTime + n). If the task has no count, we know that we are finished with it. Then, we pop from the queue if a task is ready to be actioned and add it to the heap. If there are no ready tasks in the ready heap and there are no tasks in the waiting queue that can be actioned, we simply wait and increment the currTime.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity is O(n) because the heap actions are O(1) and queue actions are O(1). It may technically be O(n*m) with m being (n or the waiting time) because we might go through several loop cycles of waiting.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the maximum number of elements in either data structure is 26 or the number of letter in the alphabet.\\n\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        countDict = Counter(tasks)\\n        readyHeap = [-count for count in countDict.values()]\\n        heapq.heapify(readyHeap)\\n        waitingQueue = deque()\\n        currTime = 0\\n        \\n        while waitingQueue or readyHeap:\\n            currTime += 1\\n\\n            if readyHeap:\\n                currItem = heapq.heappop(readyHeap) + 1\\n                if currItem != 0:\\n                    waitingQueue.append((currItem,currTime + n))\\n\\n            if waitingQueue and waitingQueue[0][1] == currTime:\\n                heapq.heappush(readyHeap,waitingQueue.popleft()[0])\\n\\n        return currTime\\n```",
                "solutionTags": [
                    "Python3",
                    "Queue",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        countDict = Counter(tasks)\\n        readyHeap = [-count for count in countDict.values()]\\n        heapq.heapify(readyHeap)\\n        waitingQueue = deque()\\n        currTime = 0\\n        \\n        while waitingQueue or readyHeap:\\n            currTime += 1\\n\\n            if readyHeap:\\n                currItem = heapq.heappop(readyHeap) + 1\\n                if currItem != 0:\\n                    waitingQueue.append((currItem,currTime + n))\\n\\n            if waitingQueue and waitingQueue[0][1] == currTime:\\n                heapq.heappush(readyHeap,waitingQueue.popleft()[0])\\n\\n        return currTime\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2495192,
                "title": "java-solution-o-n-1-pass",
                "content": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n      \\n        int len = tasks.length;\\n        if(n==0)\\n            return len;\\n        int map[] = new int[26];\\n        for(char c : tasks)\\n        {\\n            map[c-\\'A\\']++;\\n        }\\n        Arrays.sort(map);\\n        int max_frq = map[25];\\n        int count = 0;\\n        for(int i=24;i>=0;i--)\\n        {\\n            if(max_frq==map[i])\\n                count++;\\n        }\\n        int ans = (max_frq-1)*(n+1)+1;\\n        ans +=count; \\n        if(len-ans>0)\\n          return ans+(len-ans);    \\n        return ans;\\n    }\\n}``",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n      \\n        int len = tasks.length;\\n        if(n==0)\\n            return len;\\n        int map[] = new int[26];\\n        for(char c : tasks)\\n        {\\n            map[c-\\'A\\']++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2345756,
                "title": "c-o-n",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint leastInterval(vector<char>& tasks, int n) {\\n\\t\\t\\tint t = tasks.size();\\n\\t\\t\\tvector<int>freq(26,0);\\n\\t\\t\\tfor(int i=0;i<t;i++)\\n\\t\\t\\t\\tfreq[tasks[i]-\\'A\\']++;\\n\\t\\t\\tsort(freq.begin(),freq.end());\\n\\t\\t\\tint chunk = freq[25]-1;\\n\\t\\t\\tint idle = chunk*n;\\n\\t\\t\\tfor(int i=24;i>-1;i--)  \\n\\t\\t\\t\\t idle -= min(chunk,freq[i]);\\n\\t\\t\\treturn idle<0?t:t+idle;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint leastInterval(vector<char>& tasks, int n) {\\n\\t\\t\\tint t = tasks.size();\\n\\t\\t\\tvector<int>freq(26,0);\\n\\t\\t\\tfor(int i=0;i<t;i++)\\n\\t\\t\\t\\tfreq[tasks[i]-\\'A\\']++;\\n\\t\\t\\tsort(freq.begin(),freq.end());\\n\\t\\t\\tint chunk = freq[25]-1;\\n\\t\\t\\tint idle = chunk*n;\\n\\t\\t\\tfor(int i=24;i>-1;i--)  \\n\\t\\t\\t\\t idle -= min(chunk,freq[i]);\\n\\t\\t\\treturn idle<0?t:t+idle;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2319988,
                "title": "java-max-heap-easy",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> charCount = new HashMap<>();\\n        \\n        for(char ch : tasks) {\\n            int count = charCount.getOrDefault(ch, 0);\\n            charCount.put(ch, count + 1);\\n        }\\n        \\n        // max Heap\\n        Queue<Task> pq = new PriorityQueue<>((t1, t2) -> t2.freq - t1.freq);\\n        for(char ch : charCount.keySet()) {\\n            pq.add(new Task(ch, charCount.get(ch)));\\n        }\\n        \\n        int time = 0;\\n        Queue<Task> coolDownQ = new LinkedList<>();\\n        \\n        while(!pq.isEmpty() || !coolDownQ.isEmpty()) {\\n            \\n            time++;\\n            \\n            Task curTask = pq.poll();\\n            \\n            if(curTask != null) {\\n                curTask.freq--;\\n                \\n                // cur task not completed\\n                if(curTask.freq > 0) {\\n                    // add it to cool down q\\n                    curTask.notAvailableTillTime = time + n;\\n                    coolDownQ.add(curTask);\\n                }\\n            }\\n            \\n            Task coolDownTask = coolDownQ.peek();\\n            \\n            if(coolDownTask != null) {\\n                \\n                if(coolDownTask.notAvailableTillTime <= time) {\\n                    coolDownQ.remove();\\n                    pq.add(coolDownTask);\\n                }\\n            }\\n            \\n        }\\n        \\n        return time;\\n    }\\n}\\n\\npublic class Task {\\n    char id;\\n    int freq;\\n    int notAvailableTillTime;\\n    \\n    Task(char id, int freq) {\\n        this.id = id;\\n        this.freq = freq;\\n        this.notAvailableTillTime = 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        Map<Character, Integer> charCount = new HashMap<>();\\n        \\n        for(char ch : tasks) {\\n            int count = charCount.getOrDefault(ch, 0);\\n            charCount.put(ch, count + 1);\\n        }\\n        \\n        // max Heap\\n        Queue<Task> pq = new PriorityQueue<>((t1, t2) -> t2.freq - t1.freq);\\n        for(char ch : charCount.keySet()) {\\n            pq.add(new Task(ch, charCount.get(ch)));\\n        }\\n        \\n        int time = 0;\\n        Queue<Task> coolDownQ = new LinkedList<>();\\n        \\n        while(!pq.isEmpty() || !coolDownQ.isEmpty()) {\\n            \\n            time++;\\n            \\n            Task curTask = pq.poll();\\n            \\n            if(curTask != null) {\\n                curTask.freq--;\\n                \\n                // cur task not completed\\n                if(curTask.freq > 0) {\\n                    // add it to cool down q\\n                    curTask.notAvailableTillTime = time + n;\\n                    coolDownQ.add(curTask);\\n                }\\n            }\\n            \\n            Task coolDownTask = coolDownQ.peek();\\n            \\n            if(coolDownTask != null) {\\n                \\n                if(coolDownTask.notAvailableTillTime <= time) {\\n                    coolDownQ.remove();\\n                    pq.add(coolDownTask);\\n                }\\n            }\\n            \\n        }\\n        \\n        return time;\\n    }\\n}\\n\\npublic class Task {\\n    char id;\\n    int freq;\\n    int notAvailableTillTime;\\n    \\n    Task(char id, int freq) {\\n        this.id = id;\\n        this.freq = freq;\\n        this.notAvailableTillTime = 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2003164,
                "title": "python-o-n-time-beats-95-annotated-mathematical-solution",
                "content": "![image](https://assets.leetcode.com/users/images/75efa7d8-c254-48cc-a3e5-92ce47e63556_1651546461.820764.png)\\n\\nThe return statement isn\\'t annotated, so here\\'s the explanation on that (and the bulk of the creativity of this solution):\\nThere are two cases for the task schedule. Either the schedule will have \"idle\" time units, or it won\\'t. Let\\'s look into each case:\\n\\nIn the case where the schedule has no \"idle\" time units, it\\'s trivially the number of tasks. This makes up the left side of the return statement.\\n\\nThe case where the schedule does have \"idle\" time units is caused by there being a task with such a frequency that there aren\\'t enough other tasks to fill up those idle time units. Let us define a \"cycle\" as n+1 time units. In the example tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2 resulting in the solution A -> B -> idle -> A -> B -> idle -> A -> B, a \"cycle\" comprises of \"A -> B -> idle\". In our solution with idle time units, There is some task that is a bottleneck/limiting factor on how quickly we can complete all our tasks. Let\\'s call the frequency of this task to be X. There must be X-1 cycles that are all the same size (n+1), and on the next cycle, the amount of tasks remaining will be either >= n+1, or less than n+1. Exploring the case where it\\'s >= n+1, this can\\'t be possible since we assumed there are idle time units and previous cycles, so non-bottleneck tasks should have filled those up. In the case it\\'s less than n+1, the number of tasks to run in the very last cycle is equal to the number of tasks that have frequency X, matching the bottleneck we chose. Mathematically, the total number of time units comes out to be the right hand side of the return statement.\\n\\nWe can use the max() to simply bridge these two cases, since in the first case the number of tasks will exceed the right hand side actually by being the contradictory subcase mentioned for the last cycle of the second case. In the second case, the right hand side exceeds the left hand side since there are idle time units added onto the total number of tasks.\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        # Redefine n to be max tasks per cycle\\n        n += 1\\n        \\n        # Collect tasks into a dictionary to count frequencies\\n        dic = {}\\n        for x in tasks:\\n            if x not in dic:\\n                dic[x] = 1\\n            else:\\n                dic[x] += 1\\n        \\n        # Find the frequency of the largest bottlneck\\n        bneck = 0\\n        # And how many tasks have that frequency\\n        bnecks = 1\\n        for x in dic.values():\\n            if x > bneck:\\n                bneck = x\\n                bnecks = 1\\n            elif x == bneck:\\n                bnecks += 1\\n        \\n        return max(len(tasks), n * (bneck - 1) + bnecks)",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        # Redefine n to be max tasks per cycle\\n        n += 1\\n        \\n        # Collect tasks into a dictionary to count frequencies\\n        dic = {}",
                "codeTag": "Java"
            },
            {
                "id": 2000320,
                "title": "you-will-understand-gaurenteed",
                "content": "```\\n/*\\nNOTE: This question can be tricky to understand for some people, atleast for me it was tricky! \\n\\nExplanation :- \\nThe aim in this question is to get total time taken by CPU to execute all tasks considering the cooldown period\\n\\nfor example: \\nCase1: \\tTasks = [A A A A] cooldown = 2\\t\\t\\n\\t    CPU Execution = [A _ _ A _ _ A _ _ A]\\n\\t    Total Time = 10\\n\\t\\t\\t \\nCase2:  Tasks = [A A A B B]  cooldown = 2\\n\\t\\tCPU Execution = [A B _ A B _ A]\\t\\n\\t\\tTotal Time = 7\\t\\t \\n\\nCase3:  Tasks = [A A A B B B]  cooldown = 2\\n\\t\\tCPU Execution = [A B _ A B _ A B]\\n\\t\\tTotal Time = 8\\n\\nIf we observe carefully in above examples we can see that total time depends on the task which is executing maximum no. of times because it will require maximum time to get executed. How ? .....see example below!\\n\\nCPU Execution = (max_task_freq-1) * (n+1) + count(max_task_freq)\\n* (n+1) is the task execution + cooldown \\n\\ni.e. for case1: Tasks = [A A A A]  cooldown = 2\\n\\t\\t\\t\\tmax task freq = A-->4\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution = A will be executing 4 times + idle state (*due to cooldowm)\\n\\t\\t\\t\\tCPU Execution = A _ _ + A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution = (4-1) * (2+1) + 1 = 10\\t\\t\\t\\n\\n\\tfor case2: Tasks = [A A A B B]  cooldown = 2\\n\\t\\t\\t\\tNOTE: Here you\\'ll see that any task which has less freq than max_freq _task will not contribute in total time \\n\\t\\t\\t\\there, max task freq = A-->3\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution for A = A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution for B = A B _ + A B _ + A\\n\\t\\t\\t\\tCPU Execution (A+B) = A B _ A B _ A \\n\\t\\t\\t\\tCPU Execution = (3-1) * (2+1) + 1 = 7\\n\\n\\tfor case3: Tasks = [A A A B B B]  cooldown = 2\\n\\t\\t\\t\\tNOTE: Here you\\'ll see that any task which has less freq than max_freq _task will not contribute in total time \\n\\t\\t\\t\\there, max task freq = A-->3 | B-->3\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution for A = A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution for B = A B _ + A B _ + AB\\n\\t\\t\\t\\tCPU Execution (A+B) = A B _ A B _ A B\\n\\t\\t\\t\\tCPU Execution = (3-1) * (2+1) + 2 = 8\\t\\n*/\\n\\n\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tif(n == 0) return tasks.size();\\n\\t\\n\\tint cnt = 0;\\n\\tint max_task_freq = 0;\\t\\n\\tvector<int> task_freq(26);\\n\\tfor(char ch : tasks) task_freq[ch-\\'A\\']++;\\n\\t\\n\\tfor(int i=0; i<26; i++) {\\n\\t\\tif(task_freq[i] == 0) continue;\\n\\t\\tif(max_task_freq < task_freq[i]) {\\n\\t\\t\\tmax_task_freq = task_freq[i];\\n\\t\\t\\tcnt = 1;\\n\\t\\t}\\n\\t\\telse if(max_task_freq == task_freq[i]) cnt++;\\n\\t}\\n\\t\\n\\tint req_days = (n+1) * (max_task_freq-1) + cnt;\\n\\treturn req_days > tasks.size() ? req_days : tasks.size();\\n}\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/*\\nNOTE: This question can be tricky to understand for some people, atleast for me it was tricky! \\n\\nExplanation :- \\nThe aim in this question is to get total time taken by CPU to execute all tasks considering the cooldown period\\n\\nfor example: \\nCase1: \\tTasks = [A A A A] cooldown = 2\\t\\t\\n\\t    CPU Execution = [A _ _ A _ _ A _ _ A]\\n\\t    Total Time = 10\\n\\t\\t\\t \\nCase2:  Tasks = [A A A B B]  cooldown = 2\\n\\t\\tCPU Execution = [A B _ A B _ A]\\t\\n\\t\\tTotal Time = 7\\t\\t \\n\\nCase3:  Tasks = [A A A B B B]  cooldown = 2\\n\\t\\tCPU Execution = [A B _ A B _ A B]\\n\\t\\tTotal Time = 8\\n\\nIf we observe carefully in above examples we can see that total time depends on the task which is executing maximum no. of times because it will require maximum time to get executed. How ? .....see example below!\\n\\nCPU Execution = (max_task_freq-1) * (n+1) + count(max_task_freq)\\n* (n+1) is the task execution + cooldown \\n\\ni.e. for case1: Tasks = [A A A A]  cooldown = 2\\n\\t\\t\\t\\tmax task freq = A-->4\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution = A will be executing 4 times + idle state (*due to cooldowm)\\n\\t\\t\\t\\tCPU Execution = A _ _ + A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution = (4-1) * (2+1) + 1 = 10\\t\\t\\t\\n\\n\\tfor case2: Tasks = [A A A B B]  cooldown = 2\\n\\t\\t\\t\\tNOTE: Here you\\'ll see that any task which has less freq than max_freq _task will not contribute in total time \\n\\t\\t\\t\\there, max task freq = A-->3\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution for A = A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution for B = A B _ + A B _ + A\\n\\t\\t\\t\\tCPU Execution (A+B) = A B _ A B _ A \\n\\t\\t\\t\\tCPU Execution = (3-1) * (2+1) + 1 = 7\\n\\n\\tfor case3: Tasks = [A A A B B B]  cooldown = 2\\n\\t\\t\\t\\tNOTE: Here you\\'ll see that any task which has less freq than max_freq _task will not contribute in total time \\n\\t\\t\\t\\there, max task freq = A-->3 | B-->3\\n\\t\\t\\t\\tSo, \\n\\t\\t\\t\\tCPU Execution for A = A _ _ + A _ _ + A \\n\\t\\t\\t\\tCPU Execution for B = A B _ + A B _ + AB\\n\\t\\t\\t\\tCPU Execution (A+B) = A B _ A B _ A B\\n\\t\\t\\t\\tCPU Execution = (3-1) * (2+1) + 2 = 8\\t\\n*/\\n\\n\\nint leastInterval(vector<char>& tasks, int n) {\\n\\tif(n == 0) return tasks.size();\\n\\t\\n\\tint cnt = 0;\\n\\tint max_task_freq = 0;\\t\\n\\tvector<int> task_freq(26);\\n\\tfor(char ch : tasks) task_freq[ch-\\'A\\']++;\\n\\t\\n\\tfor(int i=0; i<26; i++) {\\n\\t\\tif(task_freq[i] == 0) continue;\\n\\t\\tif(max_task_freq < task_freq[i]) {\\n\\t\\t\\tmax_task_freq = task_freq[i];\\n\\t\\t\\tcnt = 1;\\n\\t\\t}\\n\\t\\telse if(max_task_freq == task_freq[i]) cnt++;\\n\\t}\\n\\t\\n\\tint req_days = (n+1) * (max_task_freq-1) + cnt;\\n\\treturn req_days > tasks.size() ? req_days : tasks.size();\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1864448,
                "title": "faster-than-84-89-of-python3-online-submissions-for-task-scheduler",
                "content": "```\\nfrom operator import itemgetter\\n\\nclass Solution:\\n    \\'\\'\\'\\n    The main idea to solving this problem is:\\n    you first identify the maximum idle slots.\\n    Maxium idle slots will be equal to n * (m - 1)\\n    where m is the frequency of the task occuring maximum times\\n    \\n    then we try to fill the idle slots with remaining tasks\\n    if we are able to fill all idle slots, then no of unit times will be total no of tasks\\n    else it will be total tasks + idle slots\\n    \\n    say, we have four tasks (A, B, C, D) with frequency (5, 3, 3, 2) and n=2\\n    then, maximum idle slots = (5-1) * 2 = 8\\n    A _ _ A _ _ A _ _ A _ _ A\\n    then we iterate over remaining tasks and reduce the idle slots based on frequency of other tasks\\n    now we will encounter B with frequency of 3\\n    A B _ A B _ A B _ A _ _ A\\n    Similarly fill with C \\n    A B C A B C A B _ A C _ A\\n    A B C A B C A B D A C D A\\n    \\'\\'\\'\\n        \\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_map = {}\\n        for task in tasks:\\n            task_map[task] = task_map.get(task, 0) + 1\\n            \\n        task_list = sorted(task_map.items(), key=itemgetter(1), reverse=True)\\n        idle_slots = (task_list[0][1] - 1 ) * n\\n        for task in task_list[1:]:\\n            # if frequency of task is equal to the frequency at task_list[0]\\n            # then idle slots that can be filled will be frequency - 1\\n            # else idle slots that can be filled will be frequency\\n            idle_slots -= min(task[1], task_list[0][1]-1)\\n        return len(tasks) + idle_slots if idle_slots > 0 else len(tasks)\\n```",
                "solutionTags": [
                    "Python",
                    "Greedy"
                ],
                "code": "```\\nfrom operator import itemgetter\\n\\nclass Solution:\\n    \\'\\'\\'\\n    The main idea to solving this problem is:\\n    you first identify the maximum idle slots.\\n    Maxium idle slots will be equal to n * (m - 1)\\n    where m is the frequency of the task occuring maximum times\\n    \\n    then we try to fill the idle slots with remaining tasks\\n    if we are able to fill all idle slots, then no of unit times will be total no of tasks\\n    else it will be total tasks + idle slots\\n    \\n    say, we have four tasks (A, B, C, D) with frequency (5, 3, 3, 2) and n=2\\n    then, maximum idle slots = (5-1) * 2 = 8\\n    A _ _ A _ _ A _ _ A _ _ A\\n    then we iterate over remaining tasks and reduce the idle slots based on frequency of other tasks\\n    now we will encounter B with frequency of 3\\n    A B _ A B _ A B _ A _ _ A\\n    Similarly fill with C \\n    A B C A B C A B _ A C _ A\\n    A B C A B C A B D A C D A\\n    \\'\\'\\'\\n        \\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        task_map = {}\\n        for task in tasks:\\n            task_map[task] = task_map.get(task, 0) + 1\\n            \\n        task_list = sorted(task_map.items(), key=itemgetter(1), reverse=True)\\n        idle_slots = (task_list[0][1] - 1 ) * n\\n        for task in task_list[1:]:\\n            # if frequency of task is equal to the frequency at task_list[0]\\n            # then idle slots that can be filled will be frequency - 1\\n            # else idle slots that can be filled will be frequency\\n            idle_slots -= min(task[1], task_list[0][1]-1)\\n        return len(tasks) + idle_slots if idle_slots > 0 else len(tasks)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1798528,
                "title": "java-solution-using-heap-map",
                "content": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int del) {\\n        \\n        int ans=0,n=tasks.length;\\n        if(del==0) \\n            return n;\\n        \\n        Map<Character,Integer>mp = new HashMap<>();\\n        \\n        for(var ch:tasks)\\n            mp.put(ch,mp.getOrDefault(ch,0)+1);\\n\\n        Queue<Pair>pq = new PriorityQueue<>((a,b)->b.val-a.val);\\n        List<Pair>wait = new ArrayList<>();\\n        \\n        for(var ent:mp.entrySet())\\n            pq.add(new Pair(ent.getKey(),ent.getValue()));\\n        \\n        while(!pq.isEmpty()){\\n            \\n            for(int i= 0; i <= del; i++) {\\n                if(!pq.isEmpty()) {\\n                    Pair top = pq.poll();\\n                    top.val--;\\n                    if(top.val > 0) {\\n                        wait.add(top);\\n                    }  \\n                }\\n                ans++;\\n                if(pq.isEmpty() && wait.isEmpty())  break;\\n            }   \\n            \\n            pq.addAll(wait);\\n            wait.clear();\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    class Pair{\\n        char ch;\\n        int val;\\n        \\n        Pair(char ch,int val){\\n            this.ch=ch;\\n            this.val=val;\\n        }\\n        \\n        @Override\\n        public String toString(){\\n            return \"[ \"+this.ch+\" \"+this.val+\" ]\";\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int del) {\\n        \\n        int ans=0,n=tasks.length;\\n        if(del==0) \\n            return n;\\n        \\n        Map<Character,Integer>mp = new HashMap<>();\\n        \\n        for(var ch:tasks)\\n            mp.put(ch,mp.getOrDefault(ch,0)+1);\\n\\n        Queue<Pair>pq = new PriorityQueue<>((a,b)->b.val-a.val);\\n        List<Pair>wait = new ArrayList<>();\\n        \\n        for(var ent:mp.entrySet())\\n            pq.add(new Pair(ent.getKey(),ent.getValue()));\\n        \\n        while(!pq.isEmpty()){\\n            \\n            for(int i= 0; i <= del; i++) {\\n                if(!pq.isEmpty()) {\\n                    Pair top = pq.poll();\\n                    top.val--;\\n                    if(top.val > 0) {\\n                        wait.add(top);\\n                    }  \\n                }\\n                ans++;\\n                if(pq.isEmpty() && wait.isEmpty())  break;\\n            }   \\n            \\n            pq.addAll(wait);\\n            wait.clear();\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    class Pair{\\n        char ch;\\n        int val;\\n        \\n        Pair(char ch,int val){\\n            this.ch=ch;\\n            this.val=val;\\n        }\\n        \\n        @Override\\n        public String toString(){\\n            return \"[ \"+this.ch+\" \"+this.val+\" ]\";\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754757,
                "title": "simple-java-solution-using-priority-queue",
                "content": "```\\npublic int leastInterval(char[] tasks, int n) {\\n        //return length\\n        if(n==0) {\\n            return tasks.length;\\n        }\\n        //count frequency of each item\\n        int[] freq = new int[26];\\n        for(char ch:tasks) {\\n            freq[ch-\\'A\\']+=1;\\n        }\\n        //maxHeap to store the frequency in desc order\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((i1,i2)->i2-i1);\\n        for(int i=0;i<26;i++) {\\n            if(freq[i]!=0) {\\n                maxHeap.add(freq[i]);\\n            }\\n        }\\n        //hold answer\\n        int total=0;\\n        //iterate till maxHeap has some data\\n        while(!maxHeap.isEmpty()) {\\n            //curren time\\n            int time=0;\\n            //temp list to hold the polled item from maxHeap\\n            List<Integer> list = new ArrayList<>();\\n            //loop from 0 to n+1 as cooling period \\n            for(int i=0;i<=n;i++) {\\n                 //try to exhaust every item in heap\\n                 if(!maxHeap.isEmpty()) {\\n                     //add it to temp list for later use\\n                     list.add(maxHeap.poll()-1);\\n                     //incremen time unit\\n                     time++;\\n                 }\\n            }\\n            //copy back from temp list to maxHeap for next iteration\\n            for(int item:list) {\\n                if(item!=0)\\n                    maxHeap.add(item);\\n            }\\n            //it list is empty it means no element is left hence time will be added. otherwise n+1 will be added.\\n            total+=maxHeap.isEmpty()?time:n+1;\\n        }\\n        //return answer\\n        return total;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\npublic int leastInterval(char[] tasks, int n) {\\n        //return length\\n        if(n==0) {\\n            return tasks.length;\\n        }\\n        //count frequency of each item\\n        int[] freq = new int[26];\\n        for(char ch:tasks) {\\n            freq[ch-\\'A\\']+=1;\\n        }\\n        //maxHeap to store the frequency in desc order\\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((i1,i2)->i2-i1);\\n        for(int i=0;i<26;i++) {\\n            if(freq[i]!=0) {\\n                maxHeap.add(freq[i]);\\n            }\\n        }\\n        //hold answer\\n        int total=0;\\n        //iterate till maxHeap has some data\\n        while(!maxHeap.isEmpty()) {\\n            //curren time\\n            int time=0;\\n            //temp list to hold the polled item from maxHeap\\n            List<Integer> list = new ArrayList<>();\\n            //loop from 0 to n+1 as cooling period \\n            for(int i=0;i<=n;i++) {\\n                 //try to exhaust every item in heap\\n                 if(!maxHeap.isEmpty()) {\\n                     //add it to temp list for later use\\n                     list.add(maxHeap.poll()-1);\\n                     //incremen time unit\\n                     time++;\\n                 }\\n            }\\n            //copy back from temp list to maxHeap for next iteration\\n            for(int item:list) {\\n                if(item!=0)\\n                    maxHeap.add(item);\\n            }\\n            //it list is empty it means no element is left hence time will be added. otherwise n+1 will be added.\\n            total+=maxHeap.isEmpty()?time:n+1;\\n        }\\n        //return answer\\n        return total;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1738808,
                "title": "printing-a-valid-sequence-of-task-priority-queue-c",
                "content": "```\\ntypedef pair<int,pair<int,char>>p;\\n\\nclass Solution {                          \\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n\\t\\n        vector<int>task(26);                        // count number of instance of each task\\n        for(int i=0;i<tasks.size();++i){\\n            task[tasks[i]-\\'A\\']++;\\n        }\\n        priority_queue<pair<int,char>>pq;           // to store the next task for execution\\n        for(int i=0;i<26;++i){\\n            if(task[i]!=0){\\n                pq.push({task[i],\\'A\\'+i});\\n            }\\n        }\\n        \\n        priority_queue<p,vector<p>,greater<p>>mpq;   // to store the tasks in cooldown\\n\\t\\t\\n        int time=0;\\n        while(!pq.empty() || !mpq.empty()){\\n            \\n            if(!mpq.empty()){                        // if there are some task in cooldown            \\n                if(time-mpq.top().first>=n){\\n                    pq.push(mpq.top().second);\\n                    mpq.pop();\\n                }\\n            }\\n            \\n            char tsk=\\'#\\';                               // to store next task\\n            if(!pq.empty()){                            // if there is next task in line\\n                auto top=pq.top();\\n                pq.pop();\\n                tsk=top.second;\\n                --top.first;\\n                if(top.first!=0){\\n                    mpq.push({time+1,top});\\n                }\\n            }\\n            \\n            if(tsk==\\'#\\'){                           // if no valid next task\\n                cout<<\"idle\"<<\"->\";\\n            }else{                                  // print next task\\n                cout<<tsk<<\"->\";\\n            }\\n            \\n            ++time;\\n        }\\n        cout<<\"completed\";\\n        \\n        return time;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef pair<int,pair<int,char>>p;\\n\\nclass Solution {                          \\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n\\t\\n        vector<int>task(26);                        // count number of instance of each task\\n        for(int i=0;i<tasks.size();++i){\\n            task[tasks[i]-\\'A\\']++;\\n        }\\n        priority_queue<pair<int,char>>pq;           // to store the next task for execution\\n        for(int i=0;i<26;++i){\\n            if(task[i]!=0){\\n                pq.push({task[i],\\'A\\'+i});\\n            }\\n        }\\n        \\n        priority_queue<p,vector<p>,greater<p>>mpq;   // to store the tasks in cooldown\\n\\t\\t\\n        int time=0;\\n        while(!pq.empty() || !mpq.empty()){\\n            \\n            if(!mpq.empty()){                        // if there are some task in cooldown            \\n                if(time-mpq.top().first>=n){\\n                    pq.push(mpq.top().second);\\n                    mpq.pop();\\n                }\\n            }\\n            \\n            char tsk=\\'#\\';                               // to store next task\\n            if(!pq.empty()){                            // if there is next task in line\\n                auto top=pq.top();\\n                pq.pop();\\n                tsk=top.second;\\n                --top.first;\\n                if(top.first!=0){\\n                    mpq.push({time+1,top});\\n                }\\n            }\\n            \\n            if(tsk==\\'#\\'){                           // if no valid next task\\n                cout<<\"idle\"<<\"->\";\\n            }else{                                  // print next task\\n                cout<<tsk<<\"->\";\\n            }\\n            \\n            ++time;\\n        }\\n        cout<<\"completed\";\\n        \\n        return time;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1525329,
                "title": "c-priority-queue-map",
                "content": "**C++**\\n```\\nclass Solution {\\npublic: \\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        unordered_map<char, int> mp;\\n        for(int i = 0 ; i < tasks.size(); i++){\\n            mp[tasks[i]]++;\\n        }\\n        for(auto it: mp){\\n            pq.push(it.second);\\n        }\\n        int ans = 0;\\n        while(!pq.empty()){\\n            int top = pq.top(); pq.pop();\\n            top -= 1;\\n            vector<int> v;\\n            if(top > 0)\\n            v.push_back(top);\\n            int i = 0;\\n            ans +=1;\\n            while(i < n && !pq.empty()){\\n                if(pq.top() - 1 > 0)\\n                v.push_back(pq.top() - 1);\\n                pq.pop();\\n                ans++;\\n                i++;\\n            }\\n            if(i < n && v.size() > 0) ans += (n - i);\\n            for(int i = 0; i < v.size(); i++){pq.push(v[i]);}\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic: \\n    int leastInterval(vector<char>& tasks, int n) {\\n        priority_queue<int> pq;\\n        unordered_map<char, int> mp;\\n        for(int i = 0 ; i < tasks.size(); i++){\\n            mp[tasks[i]]++;\\n        }\\n        for(auto it: mp){\\n            pq.push(it.second);\\n        }\\n        int ans = 0;\\n        while(!pq.empty()){\\n            int top = pq.top(); pq.pop();\\n            top -= 1;\\n            vector<int> v;\\n            if(top > 0)\\n            v.push_back(top);\\n            int i = 0;\\n            ans +=1;\\n            while(i < n && !pq.empty()){\\n                if(pq.top() - 1 > 0)\\n                v.push_back(pq.top() - 1);\\n                pq.pop();\\n                ans++;\\n                i++;\\n            }\\n            if(i < n && v.size() > 0) ans += (n - i);\\n            for(int i = 0; i < v.size(); i++){pq.push(v[i]);}\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1473410,
                "title": "easy-to-understand-java-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    \\n    // need this helper class for cleaner code\\n    class Task {\\n        int count = 0;\\n        int nextRun = 0;\\n    }\\n    \\n    public int leastInterval(char[] chars, int n) {\\n        // we need to count the number of each tasks\\n        Map<Character, Task> map = new HashMap<>();\\n        for (char c : chars) {\\n            if (map.get(c) == null) {\\n                map.put(c, new Task());\\n            }\\n            map.get(c).count++;\\n        }\\n        \\n        // put all tasks into the priority queue and\\n        // sort by task\\'s count: the largest one is\\n        // on the top of the queue, so we always process\\n        // the task that has most remaining count\\n        Queue<Task> tasks = new PriorityQueue<>((a, b) -> {\\n            return Integer.compare(b.count, a.count);\\n        });\\n        tasks.addAll(map.values());\\n        \\n        // we need this waiting queue to store tasks\\n        // that are waiting for cooldown\\n        Queue<Task> waiting = new LinkedList<>();\\n        \\n        // mark the current CPU time as 0\\n        int cpuTime = 0;\\n        \\n        // we need to continue process until both queues\\n        // are empty\\n        while (!tasks.isEmpty() || !waiting.isEmpty()) {\\n            // when the code hits here, it means there must be\\n            // 1 task that needs to be process, or there must be\\n            // 1 task waiting, thus a cost of 1 cpu time is inevitable\\n            cpuTime++;\\n            \\n            // 1. check whether is the a waiting task due, if so,\\n            // we need to put it back to the tasks queue\\n            if (!waiting.isEmpty() && waiting.peek().nextRun == cpuTime) {\\n                tasks.add(waiting.remove());\\n            }\\n            \\n            // 2. we need to check whether the tasks is empty. altho we\\n            // tried to remove one task from the waiting queue and add to\\n            // the tasks queue, but it is not guaranteed (e.g., the task still\\n            // needs to be waiting)\\n            if (tasks.isEmpty()) {\\n                continue;\\n            }\\n            \\n            // 3. when code hits here, we are sure there will be one task available\\n            // to process. if there is still remaining count left, we need to mark the\\n            // earliest time to run it and put it into the waiting queue\\n            Task task = tasks.remove();\\n            task.count--;\\n            if (task.count > 0) {\\n                task.nextRun = cpuTime + n + 1;\\n                waiting.add(task);\\n            }\\n        }\\n        \\n        return cpuTime;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    // need this helper class for cleaner code\\n    class Task {\\n        int count = 0;\\n        int nextRun = 0;\\n    }\\n    \\n    public int leastInterval(char[] chars, int n) {\\n        // we need to count the number of each tasks\\n        Map<Character, Task> map = new HashMap<>();\\n        for (char c : chars) {\\n            if (map.get(c) == null) {\\n                map.put(c, new Task());\\n            }\\n            map.get(c).count++;\\n        }\\n        \\n        // put all tasks into the priority queue and\\n        // sort by task\\'s count: the largest one is\\n        // on the top of the queue, so we always process\\n        // the task that has most remaining count\\n        Queue<Task> tasks = new PriorityQueue<>((a, b) -> {\\n            return Integer.compare(b.count, a.count);\\n        });\\n        tasks.addAll(map.values());\\n        \\n        // we need this waiting queue to store tasks\\n        // that are waiting for cooldown\\n        Queue<Task> waiting = new LinkedList<>();\\n        \\n        // mark the current CPU time as 0\\n        int cpuTime = 0;\\n        \\n        // we need to continue process until both queues\\n        // are empty\\n        while (!tasks.isEmpty() || !waiting.isEmpty()) {\\n            // when the code hits here, it means there must be\\n            // 1 task that needs to be process, or there must be\\n            // 1 task waiting, thus a cost of 1 cpu time is inevitable\\n            cpuTime++;\\n            \\n            // 1. check whether is the a waiting task due, if so,\\n            // we need to put it back to the tasks queue\\n            if (!waiting.isEmpty() && waiting.peek().nextRun == cpuTime) {\\n                tasks.add(waiting.remove());\\n            }\\n            \\n            // 2. we need to check whether the tasks is empty. altho we\\n            // tried to remove one task from the waiting queue and add to\\n            // the tasks queue, but it is not guaranteed (e.g., the task still\\n            // needs to be waiting)\\n            if (tasks.isEmpty()) {\\n                continue;\\n            }\\n            \\n            // 3. when code hits here, we are sure there will be one task available\\n            // to process. if there is still remaining count left, we need to mark the\\n            // earliest time to run it and put it into the waiting queue\\n            Task task = tasks.remove();\\n            task.count--;\\n            if (task.count > 0) {\\n                task.nextRun = cpuTime + n + 1;\\n                waiting.add(task);\\n            }\\n        }\\n        \\n        return cpuTime;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1459692,
                "title": "proof-that-remaining-tasks-can-fit",
                "content": "```\\nWhy can I be sure that the remaining tasks can perfectly fit in the idle slots (required to fit the most frequent task(s)), and without introducing any new idle slots?\\n```\\nIf you have this question after reading the official / discussion thread solutions, this is the post for you\\n\\n**Background**\\nIf you\\'ve been reading the official solutioin and many discussion threads, all the optimal solutions seem to be building upon this \"obvious\" assumption:\\n* The number of total idle time is upper bounded by the the number of idle time to fit only the most frequent task(s), or k. \\n* If the total number of remaining tasks is greater than k, then no idle slots are needed at all to fit the entire sequence. Otherwise, the number of idle slots to fit the entire sequence of tasks is given by k - # remaining tasks\\n\\nFor example, if you have [A,A,A,A,B,B,B,C,C,C,C,C,D,D,D] (i,e, 4 A\\'s, 3 B\\'s, 5 C\\'s, and 3 D\\'s) and n = 2, then, to fit **only** the most frequent task, C, in this case, we have:\\n*C - - C - - C - - C - - C* \\nwhere - denotes a idle time slot, so we have 8 idle slots. The total number of remaining tasks is 4+3+3 = 10 > 8, therefore no idles slots are needed to fit the entire sequence and total time = len(tasks)\\n\\nBut... **WHY?** Why can I be sure that the remaining tasks can perfectly fit in the idle slots (required to fit the most frequent task(s)), and without introducing any new idle slots?\\n\\n**Method**\\nNow, I\\'m going to propose a way to fill in the slots with remaining tasks which guarantees that all open slots are occupied and no more idle slots are introduced.\\n\\nso, we start with this skeleton:\\n*C - - C - - C - - C - - C* \\nFor the remaining tasks, A is the most frequent, so we fill all the slots right next to each C using A (that is, all slots at position 1 reletive to each C), so it becomes\\nC A - C A - C A - C A - C\\nNow, because all relative position 1\\'s all taken, we go to relative position 2\\'s, and we fill in these positions with the most frequent tasks in the remaing task. Now, the most frequent task is B, so it becomes:\\nC A B C A B C A B C A - C\\nNow, because we only have 3 B\\'s, so there is one more idle slots to be filled. Still, we fill it with the most frequent task, which is D\\nC A B C A B C A B C A D C\\nNow, we have 2 more D\\'s, we can still follow the above procedure and insert them into reletive position 3 of each C, so it becomes\\nC A B D C A B D C A B C A D C\\nRemember, we can always insert more tasks between each C as it does not break the constraints.\\n\\n\\nSo, this is the text version of how we are going to fill in the slots goes like this: (let\\'s keep using the above example)\\n\\n1. The empty slots are to be filled in the following order: we first fill in all the idle slots that is to the right of each C, and then fill in all the idle slots that is the second place to the right of each C, and then all the idle slots that is the third... until all remaing tasks are used.\\n2. When filling in the slots, we always first use the most frequent tasks in the remaining tasks, followed by the second most frequent... \\n\\nNow, if you think about it, we can have the following conclusion:\\ni) by following the above procedure, every task will only appear once between any 2 C\\'s (remember, for all types of tasks (A, B, D) in the remaing task, its number will be at most Count(C) - 1 = 4 ), this makes sure that every task cannot appear more than once in each cycle\\nii)  also, it is impossible to have case like this C A **B** C **B** ... (where B breaks the rule), because, following our procedure, **if the same task appears in adajecant cycles and have different relative position**(let\\'s call this event E), then the number of that task must be exactly equal to Count(most_frequent) - 1, and the number of the previous task that we use to fill the slots must be strictly less than Count(most_frequent) - 1, (otherwise it is impossible for the event E to happen). However, as we always fill in the slots with the most frequent remaining task first, this brings a contradiction and thus this case is impossible\\n\\nTherefore, by following this procedure, it is guaranteed that all slots are filled and no more slots are introduced, and this proves the assumption at the begining of this post.",
                "solutionTags": [],
                "code": "```\\nWhy can I be sure that the remaining tasks can perfectly fit in the idle slots (required to fit the most frequent task(s)), and without introducing any new idle slots?\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1443708,
                "title": "javascript-with-comments",
                "content": "Solution Referenced from : https://leetcode.com/problems/task-scheduler/discuss/640772/JavaScript-Clean-Human-Readable-Solution\\n\\n```/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\n var leastInterval = function(tasks, n) {\\n  \\n    // Get all the tasks which are letters of the alphabet from \\'A\\' to \\'Z\\' and add them in an array or a map\\n    let charMap = new Map();\\n\\n    // Keep track of the task with max frequency and its count\\n    // Let\\'s start with the first task as the max occurring for now\\n    let maxOccurringTask = tasks[0];\\n    let maxOccurrences = 0;\\n\\n    // While we add our tasks to our map, we also maintain a running count of max occurrences and the max task\\n    for (let char of tasks) {\\n        if (charMap.has(char)) {\\n            charMap.set(char, charMap.get(char)+1);\\n        } else {\\n            charMap.set(char, 1);\\n        }\\n\\n        if (charMap.get(char) > maxOccurrences) {\\n            maxOccurrences = charMap.get(char);\\n            maxOccurringTask = char;\\n        }\\n    }\\n\\n    // If we have the max occuring task frequency and we subtract it by 1 (because the edges don\\'t need to maintain the n distance) and multiply this value by n, we get the number of spaces we need to fill.\\n    // These spaces could be filled with idle values or other tasks\\n    let idleCount = (maxOccurrences - 1) * n;\\n\\n\\n    // Now iterate through the char map and for each entry subtract the idle count accordingly\\n    charMap.forEach((value, key) => {\\n        // value here is the count and key is the task\\n        if (key === maxOccurringTask) {\\n            return; // return here acts like a continue, meaning do nothing. We do nothing here because max occurring task has already been accounted for. we\\'re only filling in other tasks where idle values are present\\n        }\\n\\n        // If another task has the same number of occurrences as the max occurring task, it doesn\\'t take the place of an idle entry. so we only need to subtract 1 less than the number of occurrences it has.. because the last occurrence will not be\\n        // replaced by an idle entry\\n        if (value === maxOccurrences) {\\n            idleCount -= (value - 1);\\n        } else {\\n            // for all other tasks, we can just subtract that many idle entries from their counts\\n            idleCount -= value;\\n        }\\n    });\\n\\n    // If there are no idle spaces, that means that all tasks are able to be scheduled without the processor being idle. we can just return the tasks length.\\n    if (idleCount <= 0) {\\n        return tasks.length;\\n    }\\n\\n    // Else we just return the tasks length + idle count\\n    return tasks.length+idleCount;\\n    \\n};```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```/**\\n * @param {character[]} tasks\\n * @param {number} n\\n * @return {number}\\n */\\n var leastInterval = function(tasks, n) {\\n  \\n    // Get all the tasks which are letters of the alphabet from \\'A\\' to \\'Z\\' and add them in an array or a map\\n    let charMap = new Map();\\n\\n    // Keep track of the task with max frequency and its count\\n    // Let\\'s start with the first task as the max occurring for now\\n    let maxOccurringTask = tasks[0];\\n    let maxOccurrences = 0;\\n\\n    // While we add our tasks to our map, we also maintain a running count of max occurrences and the max task\\n    for (let char of tasks) {\\n        if (charMap.has(char)) {\\n            charMap.set(char, charMap.get(char)+1);\\n        } else {\\n            charMap.set(char, 1);\\n        }\\n\\n        if (charMap.get(char) > maxOccurrences) {\\n            maxOccurrences = charMap.get(char);\\n            maxOccurringTask = char;\\n        }\\n    }\\n\\n    // If we have the max occuring task frequency and we subtract it by 1 (because the edges don\\'t need to maintain the n distance) and multiply this value by n, we get the number of spaces we need to fill.\\n    // These spaces could be filled with idle values or other tasks\\n    let idleCount = (maxOccurrences - 1) * n;\\n\\n\\n    // Now iterate through the char map and for each entry subtract the idle count accordingly\\n    charMap.forEach((value, key) => {\\n        // value here is the count and key is the task\\n        if (key === maxOccurringTask) {\\n            return; // return here acts like a continue, meaning do nothing. We do nothing here because max occurring task has already been accounted for. we\\'re only filling in other tasks where idle values are present\\n        }\\n\\n        // If another task has the same number of occurrences as the max occurring task, it doesn\\'t take the place of an idle entry. so we only need to subtract 1 less than the number of occurrences it has.. because the last occurrence will not be\\n        // replaced by an idle entry\\n        if (value === maxOccurrences) {\\n            idleCount -= (value - 1);\\n        } else {\\n            // for all other tasks, we can just subtract that many idle entries from their counts\\n            idleCount -= value;\\n        }\\n    });\\n\\n    // If there are no idle spaces, that means that all tasks are able to be scheduled without the processor being idle. we can just return the tasks length.\\n    if (idleCount <= 0) {\\n        return tasks.length;\\n    }\\n\\n    // Else we just return the tasks length + idle count\\n    return tasks.length+idleCount;\\n    \\n};```",
                "codeTag": "Unknown"
            },
            {
                "id": 1393545,
                "title": "human-readable-explanations-no-code",
                "content": "This question is the same as [358 Rearrange String k Distance Apart](https://leetcode.com/problems/rearrange-string-k-distance-apart/).\\n\\nWe can repharase the question as: we need to execute each task X times, and each takes N minutes for one execution except for the last execution always takes 1 min.\\n```\\n[A, A, A, B, B, B] N = 2\\n=> execute A and B 3 times respectively, each task takes N+1 minutes to finish.  \\n=> How to arrange so that total time to execute all is shortest?\\n=> A, B, idle, A, B, idle, A, B,\\n```\\n\\nIn order to get shortest execution time, we need to execute task with most execution cnts first. \\nSo we have two task queues:\\n1 available tasks priority queue(max heap) stores {taskName, reminingExecutionTimes}\\n2 busy tasks regular queue stores  {taskName, reminingExecutionTimes, earliestTimeToExecuteAgain}\\n\\nSteps:\\n0 Push {taskName, reminingExecutionTimes} into available task queue.\\n1 Keep running if we have task from either busy queue or available queue.\\n2 Check busy tasks queue, if any task is ok to execute again, put it on available task queue.\\n3 If we have task from available queue, pop one and execute it, put {taskName, reminingExecutionTimes-1, earliestTimeToExecuteAgain} in busy queue.\\n3.1 If no task is in available queue, idle and increase time, hope next minute some task will be available to execute again.\\n4 Repeat 1.\\n",
                "solutionTags": [],
                "code": "```\\n[A, A, A, B, B, B] N = 2\\n=> execute A and B 3 times respectively, each task takes N+1 minutes to finish.  \\n=> How to arrange so that total time to execute all is shortest?\\n=> A, B, idle, A, B, idle, A, B,\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1332740,
                "title": "java-task-scheduler-simple-and-easy-to-understand-faster-than-99",
                "content": "Using Simple logic and creating formula:\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int len=tasks.length;\\n        int[] arr=new int[26];\\n        \\n        for(int i=0;i<len;i++)\\n        {\\n            arr[tasks[i]-\\'A\\']++;\\n        }\\n        \\n        int max=arr[0];\\n        int count=0;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(max<arr[i])\\n            {\\n                max=arr[i];\\n            }\\n        }\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(max==arr[i])\\n            {\\n                count++;\\n            }\\n        }\\n        \\n        return Math.max(len, (max-1)*(n+1)+count);\\n        \\n    }\\n}\\n```\\n\\nUsing Priority Queue:\\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        \\n        if(tasks.length==0)\\n        {\\n            return 0;\\n        }\\n        \\n        HashMap<Character,Integer> hm=new HashMap<>();\\n \\n        for(char c : tasks) \\n        {\\n            hm.put(c, hm.getOrDefault(c, 0)+1);\\n        }\\n \\n\\t\\tPriorityQueue<Integer> PQ=new PriorityQueue<>(Collections.reverseOrder());\\n\\t\\tPQ.addAll(hm.values());\\n \\n\\t\\tint diff=PQ.poll()-1;\\n\\t\\tint totalIdles=diff*n;\\n \\n\\t\\twhile(!PQ.isEmpty())\\n        {\\n            totalIdles-=Math.min(PQ.poll(), diff);\\n        }\\n \\n\\t\\treturn totalIdles>0?totalIdles+tasks.length:tasks.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        int len=tasks.length;\\n        int[] arr=new int[26];\\n        \\n        for(int i=0;i<len;i++)\\n        {\\n            arr[tasks[i]-\\'A\\']++;\\n        }\\n        \\n        int max=arr[0];\\n        int count=0;\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(max<arr[i])\\n            {\\n                max=arr[i];\\n            }\\n        }\\n        \\n        for(int i=0;i<26;i++)\\n        {\\n            if(max==arr[i])\\n            {\\n                count++;\\n            }\\n        }\\n        \\n        return Math.max(len, (max-1)*(n+1)+count);\\n        \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n        \\n        if(tasks.length==0)\\n        {\\n            return 0;\\n        }\\n        \\n        HashMap<Character,Integer> hm=new HashMap<>();\\n \\n        for(char c : tasks) \\n        {\\n            hm.put(c, hm.getOrDefault(c, 0)+1);\\n        }\\n \\n\\t\\tPriorityQueue<Integer> PQ=new PriorityQueue<>(Collections.reverseOrder());\\n\\t\\tPQ.addAll(hm.values());\\n \\n\\t\\tint diff=PQ.poll()-1;\\n\\t\\tint totalIdles=diff*n;\\n \\n\\t\\twhile(!PQ.isEmpty())\\n        {\\n            totalIdles-=Math.min(PQ.poll(), diff);\\n        }\\n \\n\\t\\treturn totalIdles>0?totalIdles+tasks.length:tasks.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228213,
                "title": "python-seven-lines-and-fast-99",
                "content": "Others suggested the same algo, so this is the Python version.\\nRationale: Start with a single task with frequency m=3 ([\"A\", \"A\", \"A\"]) and n=2. We simply need (m-1) * (n+1)+1: \"A--A--A\". It is m-1 sequences of n+1 length, and then the last task.\\nNext:\\n- If A is not the only longest, e.g. AAABBBCCC, we will need +3 in the end rather than +1.\\n- We cannot go shorter than len(tasks), for the case of AAABCDEFGHI, hence the max in the last line.\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n==0:                                               # not important, just saves a bit of time\\n            return len(tasks)\\n        import collections\\n        frequency = collections.Counter(tasks)\\n        m = max(frequency.values())                             # what is the freq of the most frequent task\\n        c = collections.Counter(list(frequency.values()))[m]    # how many tasks do we have at that max frequency\\n        return max(len(tasks), (m-1)*(n+1)+c)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        if n==0:                                               # not important, just saves a bit of time\\n            return len(tasks)\\n        import collections\\n        frequency = collections.Counter(tasks)\\n        m = max(frequency.values())                             # what is the freq of the most frequent task\\n        c = collections.Counter(list(frequency.values()))[m]    # how many tasks do we have at that max frequency\\n        return max(len(tasks), (m-1)*(n+1)+c)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1154618,
                "title": "python-easiest-without-heaps-and-pq-beats-90-time-95-space",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        size = len(tasks)\\n        c = Counter(tasks)\\n        most_common, num = c.most_common(1)[0]\\n        max_c = 0\\n        \\n        for i in c:\\n            if c[i] == num:\\n                max_c += 1\\n        \\n        return max(size, max_c + (n+1)*(num-1))\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        \\n        size = len(tasks)\\n        c = Counter(tasks)\\n        most_common, num = c.most_common(1)[0]\\n        max_c = 0\\n        \\n        for i in c:\\n            if c[i] == num:\\n                max_c += 1\\n        \\n        return max(size, max_c + (n+1)*(num-1))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1083590,
                "title": "python3",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        # \\u9019\\u7A2E\\u554F\\u984C\\u7684\\u5206\\u6790\\u5C31\\u6709\\u9EDE\\u50CF\\u9AD8\\u4E2D\\u5B78\\u6392\\u5217\\u7D44\\u5408\\u7684 \\u201C\\u63D2\\u677F\\u6CD5\\u201D\\n        # \\u5148\\u4EE5\\u983B\\u7387\\u6700\\u9AD8\\u7684A\\u70BA\\u6A21\\u677F\\u63D2\\u5165\\uFF0C\\u4E2D\\u9593\\u9010\\u6F38\\u586B\\u5145\\u5176\\u4ED6\\u503C\\uFF1B\\n        # \\u50CF\\u9019\\u500B\\u6A23\\uFF1AA--A--A ,n=2\\n        # \\u9010\\u6B65\\u601D\\u8003 \\u52A0\\u5165\\u5176\\u4ED6\\u7684\\u5143\\u7D20\\u7684\\u4E00\\u500B\\u8B8A\\u5316\\u904E\\u7A0B B:1 => AB-A--A\\n        #                                    B:2 => AB-AB-A\\n        #                                    B:3 => AB-AB-AB attention\\n        #                                    B:4 => BA-BA-BA-B \\u5105B\\u7684\\u983B\\u7387\\u6700\\u7232\\u6700\\u5927\\u503C\\u7684\\u6642\\u5019\\u66F4\\u50BE\\u5411\\u62FFB\\u4F86\\u9EE8\\u6A21\\u677F\\uFF0C\\u4F86\\u63D2\\u5165\\u5176\\u4ED6\\u7684\\u503C\\u3002\\n        #\\u6700\\u5F8C\\u6CE8\\u610F\\u6C92\\u6709\\u7A7A\\u9699\\u4F4D\\u7F6E\\u7684\\u6642\\u5019\\uFF0C\\u5C31\\u53EF\\u4EE5\\u96A8\\u610F\\u63D2\\u5165\\u4E86\\u3002            \\n        c = Counter(tasks).values() \\n        m = max(c)\\n        times = Counter(c)[m] \\n        return max((m-1)*(n+1) + times,len(tasks))\\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        # \\u9019\\u7A2E\\u554F\\u984C\\u7684\\u5206\\u6790\\u5C31\\u6709\\u9EDE\\u50CF\\u9AD8\\u4E2D\\u5B78\\u6392\\u5217\\u7D44\\u5408\\u7684 \\u201C\\u63D2\\u677F\\u6CD5\\u201D\\n        # \\u5148\\u4EE5\\u983B\\u7387\\u6700\\u9AD8\\u7684A\\u70BA\\u6A21\\u677F\\u63D2\\u5165\\uFF0C\\u4E2D\\u9593\\u9010\\u6F38\\u586B\\u5145\\u5176\\u4ED6\\u503C\\uFF1B\\n        # \\u50CF\\u9019\\u500B\\u6A23\\uFF1AA--A--A ,n=2\\n        # \\u9010\\u6B65\\u601D\\u8003 \\u52A0\\u5165\\u5176\\u4ED6\\u7684\\u5143\\u7D20\\u7684\\u4E00\\u500B\\u8B8A\\u5316\\u904E\\u7A0B B:1 => AB-A--A\\n        #                                    B:2 => AB-AB-A\\n        #                                    B:3 => AB-AB-AB attention\\n        #                                    B:4 => BA-BA-BA-B \\u5105B\\u7684\\u983B\\u7387\\u6700\\u7232\\u6700\\u5927\\u503C\\u7684\\u6642\\u5019\\u66F4\\u50BE\\u5411\\u62FFB\\u4F86\\u9EE8\\u6A21\\u677F\\uFF0C\\u4F86\\u63D2\\u5165\\u5176\\u4ED6\\u7684\\u503C\\u3002\\n        #\\u6700\\u5F8C\\u6CE8\\u610F\\u6C92\\u6709\\u7A7A\\u9699\\u4F4D\\u7F6E\\u7684\\u6642\\u5019\\uFF0C\\u5C31\\u53EF\\u4EE5\\u96A8\\u610F\\u63D2\\u5165\\u4E86\\u3002            \\n        c = Counter(tasks).values() \\n        m = max(c)\\n        times = Counter(c)[m] \\n        return max((m-1)*(n+1) + times,len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 842471,
                "title": "javascript-solution-easy-to-understand-with-comments",
                "content": "Simple approach is to count each task & find longest one. Then find maximum of count & longest. After that calculate how many tasks which have longest.\\n```\\nvar leastInterval = function(tasks, n) {\\n    var count = {}\\n    var longest  = 0\\n    \\n    // count each task and find longest one\\n    for (let c of tasks) {\\n        if (count[c] == null) count[c] = 0\\n        count[c]++\\n        longest = Math.max(longest, count[c])\\n    }\\n\\n    var longestCount = 0\\n    // count how many tasks which have longest.\\n    for (let c in count){\\n        if (count[c] == longest) longestCount++\\n    }\\n\\n    return Math.max((n + 1) * (longest - 1) + longestCount, tasks.length)\\n};\\n```\\n\\nFocus on explaining the formula (max-1)*(n+1)+count.\\nFirst, we use the most frequently occurring tasks as the framework, for example, [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\"] will be written as\\nAB...AB...AB\\nBecause the remaining tasks appear less frequently than A and B, just insert them between them.\\nWe can divide this formula into two parts:\\nThe first part (AB...AB...). According to the requirement of n, there are at least n tasks or idle between two A, so\\n(AB...AB...) = (max-1)*(n+1)\\n*The second part AB. This part is the number of tasks with the most occurrences count\\nSo AB...AB...AB is at least (max-1)(n+1)+count*\\n*If the total number of tasks exceeds this number, it means that more than n tasks are inserted between the two A, and there is no need to insert idle at this time, so finally this value is compared with the total number of tasks and the larger one is returned.*\\n\\nExplaination refereance: https://leetcode.com/problems/task-scheduler/discuss/259329/O(n)-JavaScript-solution\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar leastInterval = function(tasks, n) {\\n    var count = {}\\n    var longest  = 0\\n    \\n    // count each task and find longest one\\n    for (let c of tasks) {\\n        if (count[c] == null) count[c] = 0\\n        count[c]++\\n        longest = Math.max(longest, count[c])\\n    }\\n\\n    var longestCount = 0\\n    // count how many tasks which have longest.\\n    for (let c in count){\\n        if (count[c] == longest) longestCount++\\n    }\\n\\n    return Math.max((n + 1) * (longest - 1) + longestCount, tasks.length)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 795740,
                "title": "408-ms-faster-than-96-63-of-python3",
                "content": "# Theorem\\nThere are totally 2 factors can decide the lower bound of this problem\\n### 1. The total tasks\\nWe cannot finish the execution using CPU cycles less than the count of the tasks. ---> `len(tasks)`\\n### 2. The dominating task count\\nLike here we have `[\\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\', \\'G\\']` then the `A` will be the task that dominate the task scheduling.\\nEach time we execute an `A`, and we then have other tasks scheduled into the idle time between executions between `A`s.\\n\\nThe total gaps are `k-1` and the execute time of each schedule cycle is `n+1`. Then at the last schedule cycle, we execute all the dominating tasks (if we have multiple)\\n### 3. equation\\nWe have `n` to be the idle time we have\\nLet `k` to be the execution count of dominate task\\nLet `m` to be how many dominate tasks we have.\\nLet `N` be the total tasks we have\\n\\nThen total running time shall be:\\n#### T = max(N, (n+1)(k-1)+m)\\n# Code\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        counter = Counter(tasks)\\n        maximum = max(counter.values())\\n        maxTask = 0\\n        for i in counter:\\n            if counter[i] == maximum:\\n                maxTask += 1\\n        \\n        return max(((maximum-1) * (n+1) + maxTask), len(tasks))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        counter = Counter(tasks)\\n        maximum = max(counter.values())\\n        maxTask = 0\\n        for i in counter:\\n            if counter[i] == maximum:\\n                maxTask += 1\\n        \\n        return max(((maximum-1) * (n+1) + maxTask), len(tasks))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 769746,
                "title": "c-simple-solution-explained-100-time-85-space",
                "content": "This is a tricky one; so, first of all let\\'s avoid any major computation in the easier case: if `n == 0`, we just return the size of the task list, since we do not have to worry about intermediate intervals.\\n\\nNow, things of course complicate when we *do* have intervals: in this case it is more wise to start looking for the most frequent element: if for example you add `[\\'A\\', \\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B, \\'B\\']` and `n == 2`, you have to think about your time like:\\n`A i i A i i A i i A` (where `i` represent an idle state).\\n\\nWell, but that means that we will have, given `mostFreq` as the frequency of the most frequent element, `(mostFreq - 1) * n` idle slots to try to fill in with the rest of the tasks; at this point, the math seems already much simpler.\\n\\nThings can be slightly trickier when we have more than one kind of task with the same `mostFreq` frequency, but that would in the end mean that instead of adding 1 extra task (in the previous formula we left out the last `\\'A\\'` task, if you noticed), we will have to add all the ones having the same top frequency.\\n\\nThe formula of course work when both `n` and `mostFreq` are big enough, that is why in the end we return either the result of our computation (the product of `mostFreq - 1` by `n + 1`, plus the number of elements with value `== mostFreq`) or, well, just the initial length of the task list.\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int len = tasks.size();\\n        if (!n) return len;\\n        vector<int> freqs(26);\\n        for (auto e: tasks) freqs[e - \\'A\\']++;\\n        int mostFreq = *max_element(begin(freqs), end(freqs));\\n        return max(len, (mostFreq - 1) * (n + 1) + accumulate(begin(freqs), end(freqs), 0, [&mostFreq](int a, int b){return a + (b == mostFreq);}));\\n    }\\n};\\n```\\n\\nRefactored for better readability and performance (now it is about 3X as fast):\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        // support variables\\n        int len = tasks.size(), mostFreq = INT_MIN, mostFreqQuantity, freqs[26] = {};\\n        // edge case: empty list\\n        if (!n) return len;\\n        // computing the frequencies\\n        for (auto e: tasks) freqs[e - \\'A\\']++;\\n        // finding the most frequent amount and how many are like that\\n        for (int n: freqs) {\\n            if (n == mostFreq) mostFreqQuantity++;\\n            else if (n > mostFreq) mostFreq = n, mostFreqQuantity = 1;\\n        }\\n        return max(len, (mostFreq - 1) * (n + 1) + mostFreqQuantity);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Counting"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        int len = tasks.size();\\n        if (!n) return len;\\n        vector<int> freqs(26);\\n        for (auto e: tasks) freqs[e - \\'A\\']++;\\n        int mostFreq = *max_element(begin(freqs), end(freqs));\\n        return max(len, (mostFreq - 1) * (n + 1) + accumulate(begin(freqs), end(freqs), 0, [&mostFreq](int a, int b){return a + (b == mostFreq);}));\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks, int n) {\\n        // support variables\\n        int len = tasks.size(), mostFreq = INT_MIN, mostFreqQuantity, freqs[26] = {};\\n        // edge case: empty list\\n        if (!n) return len;\\n        // computing the frequencies\\n        for (auto e: tasks) freqs[e - \\'A\\']++;\\n        // finding the most frequent amount and how many are like that\\n        for (int n: freqs) {\\n            if (n == mostFreq) mostFreqQuantity++;\\n            else if (n > mostFreq) mostFreq = n, mostFreqQuantity = 1;\\n        }\\n        return max(len, (mostFreq - 1) * (n + 1) + mostFreqQuantity);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 763466,
                "title": "python-priority-queue",
                "content": "Code has explanation comments and very easy to follow.\\nIf you have any questions feel free to ask :)\\n\\n```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        pq = [(-occurence, task) for task, occurence in Counter(tasks).items()]\\n        task_queue = deque()\\n        last_use = defaultdict(int)\\n        heapq.heapify(pq) # O(n)\\n        unit_of_time = 0\\n        \\n        # While we have tasks\\n        while pq:\\n            for i in range(n + 1):\\n                # We need to try to deque n + 1 items for efficiency\\n                if pq:\\n                    task_queue.append(heapq.heappop(pq))\\n                    \\n            # We append the most efficient items greedily\\n            while task_queue:\\n                unit_of_time += 1\\n                occurence, task = task_queue.popleft()\\n                \\n                # Delay\\n                if last_use[task]:\\n                    unit_of_time += max(n - (unit_of_time - last_use[task] - 1), 0)\\n                \\n                # Append to heap left overs\\n                if -occurence - 1 > 0:\\n                    heapq.heappush(pq, (occurence + 1, task))\\n                \\n                last_use[task] = unit_of_time\\n            \\n        return unit_of_time\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def leastInterval(self, tasks: List[str], n: int) -> int:\\n        pq = [(-occurence, task) for task, occurence in Counter(tasks).items()]\\n        task_queue = deque()\\n        last_use = defaultdict(int)\\n        heapq.heapify(pq) # O(n)\\n        unit_of_time = 0\\n        \\n        # While we have tasks\\n        while pq:\\n            for i in range(n + 1):\\n                # We need to try to deque n + 1 items for efficiency\\n                if pq:\\n                    task_queue.append(heapq.heappop(pq))\\n                    \\n            # We append the most efficient items greedily\\n            while task_queue:\\n                unit_of_time += 1\\n                occurence, task = task_queue.popleft()\\n                \\n                # Delay\\n                if last_use[task]:\\n                    unit_of_time += max(n - (unit_of_time - last_use[task] - 1), 0)\\n                \\n                # Append to heap left overs\\n                if -occurence - 1 > 0:\\n                    heapq.heappush(pq, (occurence + 1, task))\\n                \\n                last_use[task] = unit_of_time\\n            \\n        return unit_of_time\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760212,
                "title": "c-possibly-slowest-yet-accepted-and-quite-simple-solution",
                "content": "The algorithm is not very complicated: at each moment we are trying to find a task to perform with the maximum frequency that isn\\'t \\'on cooldown\\' now, and if there is no such task then we don\\'t perform any task, and we are repeating this steps until all tasks are done.\\nIt was quite surprising for me that such a straightforward solution passes leetcode tests, as time complexity of this program in worst case is O(n m^2), where n is cooldown time, and m is number of tasks.\\n```\\nstruct task {\\n    char id;\\n    int count;\\n};\\n\\nbool operator<(const task& t1, const task& t2) {\\n    if (t1.count != t2.count) return t1.count > t2.count;\\n    return t1.id < t2.id;\\n}\\n\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks_, int n) {\\n        if (n == 0) return tasks_.size();\\n        if (tasks_.size() == 1) return 1;\\n        \\n        unordered_map<char, int> m;\\n        for (char c : tasks_) ++m[c];\\n        \\n        set<task> tasks;\\n        for (auto [id, count] : m) tasks.insert({id, count});\\n\\n        queue<char> lastNTasks;\\n        unordered_multiset<char> lastNTasksSet;\\n        \\n        int res = 0;\\n\\n        while (!tasks.empty()) {\\n            bool idle = true;\\n\\n            for (auto [id, count] : tasks) {\\n                if (lastNTasksSet.find(id) == lastNTasksSet.end()) {\\n                    lastNTasks.push(id);\\n                    lastNTasksSet.insert(id);\\n                    \\n                    tasks.erase({id, count});\\n                    if (count != 1)\\n                        tasks.insert({id, count - 1});\\n                    \\n                    idle = false;\\n                    break;\\n                }\\n            }\\n            if (idle) {\\n                lastNTasks.push(\\' \\');\\n                lastNTasksSet.insert(\\' \\');\\n            }\\n            \\n            if (lastNTasks.size() > n) {\\n                char t = lastNTasks.front();\\n                lastNTasks.pop();\\n                auto it = lastNTasksSet.find(t);\\n                lastNTasksSet.erase(it);\\n            }\\n            ++res;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nstruct task {\\n    char id;\\n    int count;\\n};\\n\\nbool operator<(const task& t1, const task& t2) {\\n    if (t1.count != t2.count) return t1.count > t2.count;\\n    return t1.id < t2.id;\\n}\\n\\nclass Solution {\\npublic:\\n    int leastInterval(vector<char>& tasks_, int n) {\\n        if (n == 0) return tasks_.size();\\n        if (tasks_.size() == 1) return 1;\\n        \\n        unordered_map<char, int> m;\\n        for (char c : tasks_) ++m[c];\\n        \\n        set<task> tasks;\\n        for (auto [id, count] : m) tasks.insert({id, count});\\n\\n        queue<char> lastNTasks;\\n        unordered_multiset<char> lastNTasksSet;\\n        \\n        int res = 0;\\n\\n        while (!tasks.empty()) {\\n            bool idle = true;\\n\\n            for (auto [id, count] : tasks) {\\n                if (lastNTasksSet.find(id) == lastNTasksSet.end()) {\\n                    lastNTasks.push(id);\\n                    lastNTasksSet.insert(id);\\n                    \\n                    tasks.erase({id, count});\\n                    if (count != 1)\\n                        tasks.insert({id, count - 1});\\n                    \\n                    idle = false;\\n                    break;\\n                }\\n            }\\n            if (idle) {\\n                lastNTasks.push(\\' \\');\\n                lastNTasksSet.insert(\\' \\');\\n            }\\n            \\n            if (lastNTasks.size() > n) {\\n                char t = lastNTasks.front();\\n                lastNTasks.pop();\\n                auto it = lastNTasksSet.find(t);\\n                lastNTasksSet.erase(it);\\n            }\\n            ++res;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760181,
                "title": "simple-java-using-hashmap-o-n",
                "content": "```\\n public int leastInterval(char[] tasks, int n) {\\n        //Get the ammount of each task\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i = 0; i < tasks.length; i++){\\n            if(!hm.containsKey(tasks[i]))\\n                hm.put(tasks[i],0);\\n            hm.put(tasks[i], hm.get(tasks[i]) + 1);\\n        }\\n        \\n        //Find the task(s) with maximum ammount of elements\\n        int max = 0, nrOfmax = 0;\\n        for(Character key: hm.keySet()){\\n            if(hm.get(key) > max){\\n                max = hm.get(key);\\n                nrOfmax = 1;\\n            }\\n            else if (hm.get(key) == max){\\n                ++nrOfmax;\\n            }\\n        }\\n        \\n        /*Lets say the task A has the most elements, hence the scheduling will be A...A...A, where ... - is n.\\n        We find the number of these elements like this: (max-1)*(n-1)+1\\n        All the other tasks can fit in between unless there are tasks with the same count\\n        Then it will look like this: AB...AB...AB, so 1 more element at the end for each tasks with the same number of elements\\n        Hence we add this to the formula: (max-1)*(n-1)+ 1 + (nrOfmax-1)\\n        Simplifying the formula we get: max*n +max - n + (nrOfmax-1)\\n        Now we found the minimum ammount of time needed. If there are more elements in total, take it instead.\\n        */\\n        int ans = max*n +max - n + (nrOfmax-1);\\n        return Math.max(ans, tasks.length);\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public int leastInterval(char[] tasks, int n) {\\n        //Get the ammount of each task\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i = 0; i < tasks.length; i++){\\n            if(!hm.containsKey(tasks[i]))\\n                hm.put(tasks[i],0);\\n            hm.put(tasks[i], hm.get(tasks[i]) + 1);\\n        }\\n        \\n        //Find the task(s) with maximum ammount of elements\\n        int max = 0, nrOfmax = 0;\\n        for(Character key: hm.keySet()){\\n            if(hm.get(key) > max){\\n                max = hm.get(key);\\n                nrOfmax = 1;\\n            }\\n            else if (hm.get(key) == max){\\n                ++nrOfmax;\\n            }\\n        }\\n        \\n        /*Lets say the task A has the most elements, hence the scheduling will be A...A...A, where ... - is n.\\n        We find the number of these elements like this: (max-1)*(n-1)+1\\n        All the other tasks can fit in between unless there are tasks with the same count\\n        Then it will look like this: AB...AB...AB, so 1 more element at the end for each tasks with the same number of elements\\n        Hence we add this to the formula: (max-1)*(n-1)+ 1 + (nrOfmax-1)\\n        Simplifying the formula we get: max*n +max - n + (nrOfmax-1)\\n        Now we found the minimum ammount of time needed. If there are more elements in total, take it instead.\\n        */\\n        int ans = max*n +max - n + (nrOfmax-1);\\n        return Math.max(ans, tasks.length);\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1564647,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1564661,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1564765,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1567519,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566970,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1567434,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1576481,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566670,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566582,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1568404,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1564647,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1564661,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1564765,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1567519,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566970,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1567434,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1576481,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566670,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1566582,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1568404,
                "content": [
                    {
                        "username": "sethdbaah",
                        "content": "I\\'m having trouble understanding what specifically the problem is asking.\\n\\nIt says that\\n\"However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\"\\n\\nBut then the example shows\\nA -> B -> idle -> A -> B -> idle -> A -> B\\nWhere the idle is coming between two DIFFERENT tasks not two SAME tasks\\n\\nCan anyone explain please? Thanks"
                    },
                    {
                        "username": "pascalskillz",
                        "content": "Using the example you gave; the problem with the description is that it made it seem like once you've executed say B that you can immediately execute another A even if the cool down period has not been met. But the cool down period must be met before executing A again. \n\nSo given:\n\nA -> B -> idle -> A\n\nHere is the breakdown:\n\n1. Execute A (After this we need at least 2 unit of time to execute A again)\n2. So execute B (+1 unit)\n3. No other type task available. So idle (+1 unit)\n4. Total of 2 units of time has passed since we executed A: B execution + idle time =  2 units\n5. So we can execute another A now\n\nPS: This wasn't clear in the description but a task execution or an idle time takes one unit of time.\n\nThis video explanation is what clicked for me. Highly recommend:\nhttps://youtu.be/s8p8ukTyA2I"
                    },
                    {
                        "username": "leetcode_neu",
                        "content": "execute A then cool down for 2 units of time in which you execute task B in 1 unit of time and be idle for 1 unit of time and then you again execute A. And you repeat this. That is why idle is coming in between two different tasks. The way in which question is phrased is bit confusing."
                    },
                    {
                        "username": "RedLeader",
                        "content": "Definitely a badly written question. "
                    },
                    {
                        "username": "ercanK",
                        "content": "After selecting A->B, \\n1 - we cannot select B; if we want to select B, we need to add 2 idle time. \\n2 - we cannot select A because then it would become A->B->A; then between two As, there\\'s only one time unit (that is task B); there should be at least 2 time unit difference between any two As or Bs"
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "adriansky",
                        "content": "# Problem\\n\\nYou have an array of CPU **tasks** named from A to Z and cooling time **n**. On each cycle/interval you can complete one task. The tasks can done in any order. The only constraint is that repeated tasks should be at least **n** intervals appart from each other because of the cooling time. \\n\\nReturn the least number of intervals needed to process all the tasks.\\n\\n## Example 1:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 2\\n\\noutput: 8\\n\\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\n**Explanation**: after you do A, you have to wait two cyles for cooling time to do A again. After doing B, we also have to wait to cyles. So, the 3rd interval, we can\\'t do A again nor B, the only option is idle. For the 4rd cyle, we can do A again since it has been at least 2 interval since the las time.\\n\\n## Example 2:\\n\\ninput: [\\'A\\', \\'C\\', \\'A\\', \\'B\\', \\'D\\', \\'B\\'], n = 1\\n\\noutput: 6\\n\\nA -> B -> C -> D -> A -> B\\n\\n**Explanation**: since the cooling interval is 1, after one task we can repeat the same task.\\n\\n## Example 3:\\n\\ninput: [\\'A\\', \\'A\\', \\'A\\', \\'B\\', \\'B\\', \\'B\\'], n = 3\\n\\noutput: 10\\n\\nA -> B -> idle -> idle -> A -> B -> idle -> idle -> A -> B\\n\\n**Explanation:** since we have only two kinds of tasks: A and B. We have to separate them by 3 intervals before repeating any of them. These causes that we have to idle twice between tasks."
                    },
                    {
                        "username": "huowa222",
                        "content": "what the hell meaning of this question?  anybody can explain it in a easy-understand way?"
                    },
                    {
                        "username": "Faamng_fsho",
                        "content": "Shouldn\\'t this be a hard question, given the complexity and condition checks to implement with a priority queue?"
                    },
                    {
                        "username": "lampuiho",
                        "content": "well, you don\\'t even need to actually schedule. You just need the leastInterval. So you can just calculate it using counts."
                    },
                    {
                        "username": "kwu30",
                        "content": "![image](https://assets.leetcode.com/users/images/d0b255f6-f8d5-4731-826a-52988b717e65_1596534405.0498543.png)\\n![image](https://assets.leetcode.com/users/images/55cc616a-deb1-4948-ae45-a79c1d1e8937_1596534387.2808952.png)\\nTIME: O(n) because of dictionary population and 26 letters in alphabet takes constant time to sort\\nSPACE: O(1) because 26 letters in alphabet of dictionary is constant\\n"
                    },
                    {
                        "username": "pantigalt",
                        "content": "# **Very intuitive approach**\\n\\nLet\\'s consider situation when there are idles\\n\\n**I marked idles with underscore symbol**\\n\\n**Case 1: Only 1 character with maximum occurence.**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\n\\n**Minimum sequence will be the following:**\\n`A _ _ A _ _ A`\\n\\nAs you see the **minimum possible length will be 7**\\n\\n**Case 2: There are several characters with maximum occurences**\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\n\\n**Minimum sequence will be the following:**\\n`A B _ A B _ A`B\\n\\nAs you see the **minimum possible length will be 8**\\n\\n**Case 3: There one or several characters with maximum occurences and there are other symbols**\\n\\nDepending on the number of symbols there could be 2 situations\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C A B _ A`B\\n\\nAs you see there are still gaps between symbols the **minimum possible length will be still 8**\\nNote that the minimum length cannot be less than 8 and the total number of characters 7 is still less than 8\\n\\nExample input:\\nn = 2\\nA occures 3 times \\nB occures 3 times\\nC occures 2 times\\nD occures 2 times\\nE occures 1 time\\n\\n**Minimum sequence will be the following:**\\n`A B C D A B C D A`B E\\n\\nAs you see there are no gaps between characters and **the minimum possible length will be still 11**\\nNote than 11 is the total number of all elements\\n\\n\\n**How we calculate the minimum length of sequence?**\\n**Observe Case 1 and Case 2:**\\n`A _ _ A _ _ A is the same as (A _ _ A _ _) + (A)`\\n`A B _ A B _ AB is the same as (A B _ A B _) + (A B)`\\n\\nThe formula is the following:\\ncount - occurence of symbol with maximum number of occurences\\n(n + 1) - number of elements in repeated interval \\'A _ _\\' or \\'A B _\\'.\\n(count - 1) - maximum occurences of character with maximum maximum occurence except the last occurence of that character\\n(count - 1) * (n + 1) - minimum number of symbols except the last one\\nk - number of characters with maximum occurence. \\nIn Case 1 k = 1 \\nIn Case 2 k = 2\\n\\n(count - 1) * (n + 1) + k - minimum number of elements for Case 1 or Case 2\\n\\n**What about Case 3?**\\nIt is minimum of 2 situations:\\na) if there are gaps then the minimum is the same as for Case 1 and Case 2\\nb) if there are no gaps then the minimum is total number of characters\\n\\nSo final formula for minimum\\nLet\\'s call \\nmin3a = minimum for Case 3a = (count - 1) * (n + 1) + k\\nmin3b = minimum for Case 3b = total number of characters\\n\\n`finalMinimum = Math.Min(min3a, min3b)`\\n\\nn - number of characters in input\\n**Time complexity: O(n)**\\n**Space complexity: O(n)**\\n"
                    },
                    {
                        "username": "Saksham1005",
                        "content": "Actually you need to take max(min3a, min3b)."
                    },
                    {
                        "username": "satyem",
                        "content": "Very simple explanation using maths. After reading you will never forget the answer for this :)\\n\\nhttps://medium.com/@satyem77/task-scheduler-leetcode-39d579f3440"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "it really helped me xD, thank you"
                    },
                    {
                        "username": "yl7928",
                        "content": "tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\n\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\n\\nWhy there is an \\'idle\\' between B and A? According to the description, cool period is only needed for between two **same tasks**?"
                    },
                    {
                        "username": "techlead_uz",
                        "content": "because you cant perform neither task A nor task B at time 2, you finished task A at time 1, so you need to wait until 3 to perform task A, similar for B you need to wait until 4. "
                    },
                    {
                        "username": "swiftytesla",
                        "content": "I\\'m not sure I understand the problem. Anybody care to explain?"
                    },
                    {
                        "username": "ShoibalK",
                        "content": "Can someone please explain me for the below input\\n\\n[A,A,A,A,A,A,B,C,D,E,F,G] and n=2\\n\\nWhy can\\'t we have a solution as below\\n\\nA->B->A->C->A->D->A->E->A->F->A->G whose length is 12. But as we need to have atleast n \"idles\" the length will be 14. But the answer to the above question is 16. \\n\\nWith this above approach, we are having no same task in continous order.\\n\\nCan someone please explain what is wrong  with the above approach?"
                    },
                    {
                        "username": "koff82",
                        "content": "Your solution is not valid, since n = 2, which means that A cannot be in the two preceding tasks, which the beginning (A->B->A) already violates. This also got me at the beginning."
                    }
                ]
            },
            {
                "id": 1710019,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1570264,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1566601,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1570086,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1568384,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1569509,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1976180,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1576000,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1570347,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1574815,
                "content": [
                    {
                        "username": "vik333",
                        "content": "How is this just a medium though? This should be a hard in my opinion, given the complexity of using queues and heaps."
                    },
                    {
                        "username": "LuisNY",
                        "content": "This test case \\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]\\n2\\n\\ngives output = 12, how is it possible? \\n\\nI believe the sequence in this case would be: A B C A B C A B C D E - D which gives output 13. Is there a better solution than this? How do we get 12 in this case?"
                    },
                    {
                        "username": "mgiul2606",
                        "content": "Actually the optimum solution is 12: try (for example) to switch the last \"C\" with a \"D\". You get: ABCABCABDCED that is a valid sequence and requires no idles."
                    },
                    {
                        "username": "c-clin",
                        "content": "touch the fuzz"
                    },
                    {
                        "username": "Shobhit_kumar",
                        "content": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\nI want to know why we require idle time when we want to do A after B as they are not the same task...??\\nshouldn\\'t be this test case answer be 6 instead of 8"
                    },
                    {
                        "username": "AdamSHurwitz",
                        "content": "**Expect**\\n\\nIn example 1 there is never a condition where the same task (the same letter in the array) is run consecutively. \\n\\nTherefore, the expected output is 0.\\n\\n**Observe**\\n\\nThe output given is 8.\\n\\nExample 1\\n\\n> Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks."
                    },
                    {
                        "username": "user1748",
                        "content": "Consider the case \\n[\"A\", \"A\", \"A\", \"A\", \"A\", \"B\",  \"B\",  \"B\", \"C\", \"C\", \"C\", \"D\", \"D\"]\\n2\\n\\nWe have 5 As, 3 Bs, 3 Cs and 2 D\\'s and the cool down time between 2 identical processes is 2.\\nShouldnt the result be 14? The expected answer is 13.\\n\\nA -> B ->C -> A -> B -> C ->  A -> B -> C -> A -> D -> idle -> A-> D"
                    },
                    {
                        "username": "Divyam6969",
                        "content": "It should be in hard category"
                    },
                    {
                        "username": "bitjumper",
                        "content": "Whenever I see a problem like this, I try to model the problem directly: ie, I have a map of tasks `to_do = {\\'A\\': 3, \\'B\\': 3}` and then a map of `cooldowns = {\\'A\\': 2, \\'B\\': 1}`) , and then I iterate through `to_do` while it\\'s not empty and decrement all the cooldown timers, decrement tasks from `to_do` etc. \\n\\nThis seems logical and fine to me but I always hit TLE exception.\\n\\nHow do I avoid going down this rabbit hole in an interview? I\\'ll spend 10-15 minutes whiteboarding it out and convincing myself it will work and handle edge cases and then when I click **Submit** and it\\'s like: \"Hmm, well I would have failed that interview.\"\\n\\nIt\\'s hard to balance wanting to keep thinking of better solutions with needing to get something coded up on the whiteboard, esp for a FB interview where you\\'re doing 2 mediums in 40 mins. \\n\\nIs the answer just be smarter and recognize patterns sooner? Or just memorize LC answers?"
                    },
                    {
                        "username": "coder99",
                        "content": "I am struggling with proof of correctness for the Greedy method mentioned in the Solution section. Below is a case I am struggling with. Assume following are the frequencies:\\n1. A -> 4\\n2. B -> 2\\n3. C -> 2\\n4. D -> 2\\n5. n = 2\\n\\nThe idle slots generated by picking up A (max frequency) is (4-1) * 2 = 6 which is equal to the sum of the frequencies for the other tasks. But, then my question, is how do you prove that you can place the 6 tasks in the 6 idle slots and meet the cooling constraint of 2.\\n\\nFor example, if one is not careful, you could have case like this:\\nABCABCA _ _ A\\nNow, to place D, you would have to apppend it last resulting into a sub-optimal solution of 11.\\nThe optimal solution here could be:\\nABCABDACDA\\n\\nAlso, would be interesting to get an algorithm that can generate the actual sequence."
                    },
                    {
                        "username": "sdzh422",
                        "content": "When I solved this problem, I had some questions about the method. Cuz I just follow my hunch and not try to prove the correctness of the method.\\n\\nMy question is how can we prove that the result length is tasks\\'s length when the most frequent task is not frequent enough to force the presence of idle slots. \\n\\nThe prove is very strict. Assume that we have a result that already filled with idle slots. We can arbitary add any tasks which is not in the result and equal or less than most frequent tasks\\' number.\\n\\nFor example,\\nwe have an result like A,B,C,A,B,C,A   n=2\\nAssume that new task is X\\nwe can easily add every X in front of the most frequent task (in this case is A) like X (A,B,C) X (A,B,C) X A\\nCuz X\\'s number is equal or less than A, and every idle slots have already been filled, so X also meet the cooldown requirements. And the other tasks in this new result also meet the requirement. \\n\\nSo from previous statement, we can easily know that if the most frequency tasks\\' idle slots have been filled, the length of result is equal to the length of tasks.\\n\\n\\n"
                    }
                ]
            },
            {
                "id": 1569662,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 2024652,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1921635,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1864267,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1637094,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1576129,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1575527,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1574118,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1574117,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 1572581,
                "content": [
                    {
                        "username": "SalvadorRomoMc",
                        "content": "Why does this test case give me 12? isn\\'t it supposed to be 13? As far i understand this should be the resulting list, shouldn\\'t it?  A B C A B C A B D F ~ D F   = 13\\n\\n**Test case**\\n\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"D\",\"D\",\"F\",\"F\"]\\n2\\n\\nMoreover if I increase the value of n to 4 or 5 the result is still the same. it also happened with a real test case which input was 1000 elements and the result for n = 2 was 1000, shouldn\\'t be more? \\n\\nI will appreciate your help; thanks!!"
                    },
                    {
                        "username": "Abhinav2707",
                        "content": "if you get this question in your interview then just quit buddy"
                    },
                    {
                        "username": "who_rules",
                        "content": "Not clear, why for this case [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\",\"C\",\"C\",\"C\",\"D\",\"D\",\"E\"], n = 2, do we need 12 steps?\\n9 steps to solve ABC, then we have DDE remaining\\nD + E + idle = 12\\nand we have last D that is 13"
                    },
                    {
                        "username": "who_rules",
                        "content": "[@ercanK](/ercanK) got it, thanks!"
                    },
                    {
                        "username": "ercanK",
                        "content": "n=2 means at least 2. You can use more; instead of leaving `D`s to the end and using idle time, you can distribute them between `ABC`s: ABCDABCDABCE"
                    },
                    {
                        "username": "ya17kun",
                        "content": "The explanation is pretty bad for this question. n is basically a cooldown before you can use the same letter again."
                    },
                    {
                        "username": "vl021188",
                        "content": "Wow, it\\'s so cool, my brain is broken by now"
                    },
                    {
                        "username": "Valtiel",
                        "content": "Hi,\\n\\nI feel stupid but I just don\\'t get it.\\nIn the first exemple we have [A,A,A,B,B,B]\\nWhy is there a idle between AB, AB and AB (A => B => Idle => A => B => Idle => A => B)\\nI understand the n wait between the 2 SAME tasks but why the Idle ? Why can\\'t we do A B A B A B ? As they are not the same tasks we don\\'t have to wait between them right ?\\n\\nI just can\\'t understand or come with a solution without understanding that...\\n\\nMaybe I just don\\'t understand english that well...\\n\\nThank you."
                    },
                    {
                        "username": "nihil2501",
                        "content": "The cooldown means that for a given type of task A, instances of A need to be spaced apart by at least the cooldown time N. Instances of tasks of type B occurring between two instances of A do not eliminate this strict cooldown requirement that requires them to be spaced apart by the cooldown."
                    },
                    {
                        "username": "penrosecat",
                        "content": "For a first go of this problem, rather than the most upvoted answer, I found the answer using **prioirity queues** to be more instructional. Moreover, it also explicitly **constructs** the scheduling scheme which is easier to comprehend for both a solver and an interviewer in a time constrained setting.\\n\\nThe first thing to notice is that we must try to round robin for every idle cycle. Also, the order within a cycle (idle cycle) must be from highest to lowest frequency task.\\n\\nSo, because using an element causes an idle time of n, upto n+1 different elements may be inserted before trying again. By inserting the frequencies of elements in a priority queue, we can always deque the element with the greatest frequency, add one copy to the current cycle. After adding all the elements to the current cycle the frequencies should all be reinserted into the prioirity queue after decrementing by 1. If after the decrement 0 copies are left it need not be added back to the queue. \\n\\nFor every cycle, n+1 time can be added to the total time. For the last cycle, if no elements remain in the prioirity queue after trying to add back decremented elements, then only the number of elements that were removed from the priority queue before trying to add them back needs to be added to the total time.\\n\\nThe total time then gives the correct answer."
                    },
                    {
                        "username": "sandytiwari",
                        "content": "**Can someone please explain test case.**\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n/********************************************************************/\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n"
                    },
                    {
                        "username": "anujpuri72",
                        "content": "Can anyone explain me this question?\\nas in testcase :`\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2`\\n what is the meaning of n?\\n if i schedule it [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n answer should be 6 why as there are no same tasks occuring consecutively"
                    },
                    {
                        "username": "fortuna911",
                        "content": "Is the runtime complexity for the 3 solutions in the official LC article the same? i.e. the size of the `tasks` input parameter? The analyses are worded very confusingly."
                    }
                ]
            },
            {
                "id": 2068878,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 2045956,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 2037138,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 2005148,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 2001765,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1997234,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1989563,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1982714,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1948097,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1933365,
                "content": [
                    {
                        "username": "User147077",
                        "content": "This is a great problem, but the directions should be more clear"
                    },
                    {
                        "username": "arushi-08",
                        "content": "For anybody wondering why the greedy solution updates the idle time like this:\\n```\\nidle_time -= min(max_freq-1, freq.pop())\\n```\\ninstead of just : `idle_time  -= freq.pop()`\\nConsider this example: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n=2.\\nIn this case, the freq.pop() will be 3 (as B frequency = 3), but the number of idle slots filled by B, between A\\'s scheduled jobs will be 2 (i.e. max_freq-1). The last B job, will come after the last A job, and so it\\'s not counted as filling the idle_time. \\nThis is the only case, where max_freq-1 > freq.pop()."
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "the point is :\n-> no two similar tasks have to be treated respectively!!\nif there is no different tasks that have to be inplaced between other tasks then the cpu is forced to enter the idle/sleep state\nnumber_idles= (frequency(character)-1)*n"
                    },
                    {
                        "username": "Prth123",
                        "content": "There is an issue with a test case #63 right??"
                    },
                    {
                        "username": "Sarthak_Vaidya",
                        "content": "Example 3:\\n\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\nFor the above example can the answer be:\\nA -> B -> A -> C -> A -> D -> A -> E -> A -> F -> A -> G\\nOutput: 12"
                    },
                    {
                        "username": "zenshaun",
                        "content": "<b>If you did not understand the question:</b>\nThere needs to be n gaps between a particular task and it's repetition. So between 2 A's there needs to be n other tasks or idle time.\nThis is not a hint for the approach, not at all. This is just for those who could not understand the (rather pathetically framed) question."
                    },
                    {
                        "username": "rahulsah6003",
                        "content": "Does i am the only one who did not understood the question hows things are going ?"
                    },
                    {
                        "username": "webguru77777",
                        "content": "Some test cases:\\n\\n```\\n[\"F\", \"E\", \"C\", \"B\", \"A\", \"D\", \"A\", \"E\", \"C\", \"D\", \"D\", \"A\", \"A\", \"B\", \"A\", \"A\", \"F\", \"B\", \"F\", \"B\", \"E\", \"F\", \"F\", \"D\", \"F\", \"C\", \"E\", \"B\", \"D\", \"A\", \"F\", \"C\", \"D\", \"B\", \"B\", \"C\", \"F\", \"A\", \"A\", \"E\", \"F\", \"C\", \"B\", \"D\", \"F\", \"C\", \"A\", \"C\", \"D\", \"D\"]\\n\\n[\"A\", \"A\", \"D\", \"A\", \"D\", \"F\", \"C\", \"F\", \"E\", \"D\", \"D\", \"A\", \"C\", \"C\", \"F\", \"C\", \"E\", \"A\", \"D\", \"E\", \"B\", \"C\", \"E\", \"A\", \"C\", \"A\", \"D\", \"F\", \"E\", \"A\", \"B\", \"E\", \"C\", \"A\", \"E\", \"D\", \"B\", \"B\", \"C\", \"D\", \"B\", \"E\", \"F\", \"E\", \"B\", \"C\", \"B\", \"F\", \"B\", \"D\"]\\n```\\n\\nPython code to generate test cases\\n\\n```\\nchr_from = \"A\"\\nchr_to = \"Z\"\\ntest_length = 10000\\ntasks = [chr(random.randint(ord(chr_from), ord(chr_to))) for _ in range(test_length)]\\njson_str = json.dumps(tasks)\\nprint(json_str)\\npyperclip.copy(json_str)\\n```\\n"
                    },
                    {
                        "username": "aman_online67",
                        "content": "Are all the chars int vector is in the sorted order according to their frequency?"
                    },
                    {
                        "username": "uncttao",
                        "content": "This is more like a math problem than a computer science/programming problem, as you can essentially work it out purely on paper; no computer is necessary."
                    }
                ]
            },
            {
                "id": 1918183,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1880884,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1880883,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1877472,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1864469,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1810712,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1799123,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1774771,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1773165,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            },
            {
                "id": 1741584,
                "content": [
                    {
                        "username": "mayursonowal7",
                        "content": "shit question"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sunnykumarbr85",
                        "content": "[leetcode](https://leetcode.com)"
                    },
                    {
                        "username": "fedorgoncharov",
                        "content": "This problem is really poorly formulated. I spent quite some time to understand what is meant to do, since the statement essentially contradicts the given example. @To authors of such problems: please, try to formulate statement clearly to avoid ambiguities. "
                    },
                    {
                        "username": "cemalturkogluiu",
                        "content": "Could someone explain me why the following greedy approach fails for the given input:\\n\\ninput: `[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]`\\nn: 2\\n\\nwhen I print out the arr that I fill I get the following:\\n`[A, B, C, A, B, C, A, B, C, D, E, null, D, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]`\\n\\nso my answer is 13 but expected 12. It makes sense that it could fit in 12 spots, but I dont understand why using the items of DESC sorted freq arr in order does fail ?\\n\\n\\n ```\\n\\nclass Solution {\\n    public int leastInterval(char[] tasks, int n) {\\n\\n        Map<Character, Integer> countMap = new HashMap<>();\\n        for (char ch: tasks) {\\n            countMap.compute(ch, (k,v) -> {\\n                if (v==null) return 1;\\n                return v+1;\\n            });\\n        }\\n\\n        List<Character> sortedFreqChar = countMap.keySet().stream()\\n            .sorted((k1, k2) -> countMap.get(k2) - countMap.get(k1))\\n            .toList();\\n\\n        \\n        Character[] arr = new Character[(n+1) * tasks.length];\\n\\n        for (int i = 0; i < sortedFreqChar.size(); i++) {\\n            char ch = sortedFreqChar.get(i);\\n            int times = countMap.get(ch);\\n\\n            // finding next empty slot\\n            int ptr = i;\\n            while (ptr < arr.length && arr[ptr] != null) {\\n                ptr++;\\n            }\\n\\n            // adding the char with n spaces\\n            for (int j=0; j<(times)*(1+n) ; j=j+n+1) {\\n                arr[ptr + j] = ch;\\n            }\\n        }\\n\\n        // A - BC - A -DE- A - FG - B__B__B == 16\\n        // A - BC - A -BD -A - BE - fg\\n\\n        int res = 0;\\n        for (int i=0; i<arr.length; i++) {\\n            if (arr[i] != null) {\\n                res = i;\\n            }\\n        }\\n        return res+1;\\n        \\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "Here is the General Approach for this problem.\\n\\nCount the frequency of each task in the input array.\\nSort the tasks in descending order of frequency.\\nIterate through the sorted tasks and try to schedule them in a way that maximizes the CPU usage.\\nKeep track of the number of idle slots and add them to the total number of cycles at the end."
                    },
                    {
                        "username": "2811guin",
                        "content": "`[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\", \"C\",\"C\",\"C\", \"D\", \"D\", \"E\"]` where `n=2`\n\nCorrect Answer is **`12`** ?\n\n# HOW ???\n\nMy Thoughts.... **`Answer = 13`**\n\n```\n#, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, #, #, A, #, #, A, #, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, #, A, B, #, A, B, #, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, #, #, #, #, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, #, #, D, #, #, #, #, #, #, #, \nA, B, C, A, B, C, A, B, C, D, E, #, D, #, #, #, #, #, #, #, \n```"
                    },
                    {
                        "username": "2811guin",
                        "content": "[@ercanK](/ercanK) \\n\\n`there must be at least n units of time between any two same tasks.`\\n\\nI missed the point **`atleast`**\\n\\n**Thank You**"
                    },
                    {
                        "username": "ercanK",
                        "content": "A -> B -> C -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nor\n\nA -> B -> C -> D -> A -> B -> C -> D -> A -> B -> C -> D -> E\n\nThere should be at least 2 different tasks or idle time between 2 same tasks.\nYou can find one approach how we may solve this problem in this link: https://leetcode.com/problems/task-scheduler/solutions/3078948/solved-using-simulation-like-method-at-each-step-select-n-1-arrayssort/\n\nIn short: 1- Before selecting any task, at each step order tasks in descending order by their count.\n2- Try to choose n + 1 tasks at each step starting from most frequent one. If n + 1 tasks is not available, then use idle time (n - number of chosen). \n3- After each step reduce the number of tasks chosen by one, reorder them and continue selecting in this manner."
                    },
                    {
                        "username": "wangzhenyu0314",
                        "content": "Problem about Example3:\\n\\nI have trouble understanding the example 3.\\nThe original example is below:\\n\\nTasks =\\n[\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"]\\nn = 2\\nOne possible solution:\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\nOutput: 16\\n\\nHowever, I am think anthers solution which can reduce the output to 12.\\nmy solution\\nA -> B -> A -> C-> A -> D -> A -> E -> A -> F -> A -> G \\nIn this solution the output is 12.\\n\\nIs this solution correct? if not, could anyone please tell me what the problem is.\\n\\nThank you!\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "puebla_larregle",
                        "content": "For the 3er example:\\n`Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A`\\nCan anyone explain why the answer isn\\'t 15?\\nlike:\\n` A -> A -> iddle -> A -> A -> iddle -> A -> A -> iddle -> B -> C -> D -> E -> F -> G`"
                    },
                    {
                        "username": "ssshra",
                        "content": "because between A and A you need at least two operations (n is 2), or you should put A->B->C->A or (if you don't have other types of ops) A -> idle -> idle -> A "
                    }
                ]
            }
        ]
    }
]