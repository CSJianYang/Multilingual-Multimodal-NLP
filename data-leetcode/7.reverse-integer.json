[
    {
        "title": "Reverse Integer",
        "question_content": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\n&nbsp;\nExample 1:\n\nInput: x = 123\nOutput: 321\n\nExample 2:\n\nInput: x = -123\nOutput: -321\n\nExample 3:\n\nInput: x = 120\nOutput: 21\n\n&nbsp;\nConstraints:\n\n\t-231 <= x <= 231 - 1",
        "solutions": [
            {
                "id": 4060,
                "title": "my-accepted-15-lines-of-code-for-java",
                "content": "Only 15 lines.\\nIf overflow exists, the new result will not equal previous one.\\nNo flags needed. No hard code like 0xf7777777 needed.\\nSorry for my bad english.\\n\\n    public int reverse(int x)\\n    {\\n        int result = 0;\\n\\n        while (x != 0)\\n        {\\n            int tail = x % 10;\\n            int newResult = result * 10 + tail;\\n            if ((newResult - tail) / 10 != result)\\n            { return 0; }\\n            result = newResult;\\n            x = x / 10;\\n        }\\n\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "Only 15 lines.\\nIf overflow exists, the new result will not equal previous one.\\nNo flags needed. No hard code like 0xf7777777 needed.\\nSorry for my bad english.\\n\\n    public int reverse(int x)\\n    {\\n        int result = 0;\\n\\n        while (x != 0)\\n        {\\n            int tail = x % 10;\\n            int newResult = result * 10 + tail;\\n            if ((newResult - tail) / 10 != result)\\n            { return 0; }\\n            result = newResult;\\n            x = x / 10;\\n        }\\n\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3099545,
                "title": "my-c-solution-beats-100-0ms-run-time",
                "content": "- Linkedin Profile (https://linkedin.com/in/ayush-kumar-a276a124a)\\n//-------------> \\uD83D\\uDC7B Pls Upvote if it is helpful for You \\uD83D\\uDC7B <-----------------//\\n# Approach\\n 1. First we decleare a variable r and initilise it to 0\\n2.  Then each time find remainder Using modulus Operator  \\n3. Then add remainder to r Lets Understand with example\\n\\n  \\n![WhatsApp Image 2023-01-26 at 2.59.34 AM.jpeg](https://assets.leetcode.com/users/images/bc5eef77-1e1f-4202-b0c6-68a62bff490c_1674682266.8555562.jpeg)\\n\\n - Then compare The value of  r  to check it is inside the 32-bit   integer range [-2^31, 2^31 - 1]   Then  return r     \\n - Otherwise return 0;\\n\\n<!-- Decribe your approach to solving the problem. -->\\n    - Space complexity:  O(1) \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code using 64 bit integer\\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check range if r is outside the range then return 0  \\n        return int(r);  // if r in the 32 bit range then return r\\n    }\\n}; \\n``` \\n **   \\n  \\n# Code using 32 bit integer\\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        int r=0;      // decleare r \\n        while(x){\\n         if (r>INT_MAX/10 || r<INT_MIN/10) return 0; // check 32 bit range if r is outside the range then return 0 \\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        } \\n        return r;  // if r in the 32 bit range then return r\\n    }\\n}; \\n``` \\n **  \\n                    \\n\\n---\\n\\n* \\uD83D\\uDC7B IF YOU LIKE THE SOLUTION THEN PLEASE UPVOTE MY SOLUTION BECAUSE IT GIVES ME MOTIVATION TO REGULARLY POST THE SOLUTION\\uD83D\\uDC7B*\\n![image.png](https://assets.leetcode.com/users/images/c4590f79-be9c-47da-b9ef-0428c9c509a6_1678435819.387464.png)\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check range if r is outside the range then return 0  \\n        return int(r);  // if r in the 32 bit range then return r\\n    }\\n}; \\n```\n``` \\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        int r=0;      // decleare r \\n        while(x){\\n         if (r>INT_MAX/10 || r<INT_MIN/10) return 0; // check 32 bit range if r is outside the range then return 0 \\n         r=r*10+x%10; // find remainder and add its to r\\n         x=x/10;     // Update the value of x\\n        } \\n        return r;  // if r in the 32 bit range then return r\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3136892,
                "title": "java-beat-100-well-explained-code",
                "content": "\\n# Approach\\nThis is a solution in Java that reverses an integer and checks if the result is within the range of a 32-bit signed integer.\\n\\nThe approach involves using a while loop to extract the last digit of the input integer x and add it to a variable finalNum. At each iteration, finalNum is multiplied by 10 so that the next extracted digit can be added as the next significant digit. After the loop, finalNum is divided by 10 to remove the extra trailing zero.\\n\\nNext, the solution checks if finalNum is greater than the maximum value of a 32-bit signed integer (Integer.MAX_VALUE) or less than its minimum value (Integer.MIN_VALUE). If either of these conditions is met, the function returns 0 as the result will not fit within the range of a 32-bit signed integer.\\n\\nFinally, if x is negative, the solution returns -1 * finalNum as a negative result. If x is positive, the solution returns finalNum as the final answer.\\n\\n\\n\\n\\n\\n# Time and Space Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(log(x)) where x is the input integer. This is because each iteration of the while loop processes the last digit of x and reduces the size of x by a factor of 10. The number of iterations is logarithmic with respect to the size of x, thus making the time complexity O(log(x)).\\n\\n- Space complexity:\\nThe space complexity of this solution is O(1) because only a few variables are used (x, lastDig, and finalNum) and their sizes are constant and do not grow with the size of the input.\\n\\n![upvote.jpeg](https://assets.leetcode.com/users/images/db601c26-56ec-45f3-a400-2bf9e8a0192b_1675439531.9407325.jpeg)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        long finalNum = 0;\\n        while(x!=0){\\n            int lastDig = x%10;\\n            finalNum += lastDig;\\n            finalNum = finalNum*10;\\n            x= x/10;\\n        }\\n        finalNum = finalNum/10;\\n        if(finalNum > Integer.MAX_VALUE || finalNum<Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        if(x<0){\\n            return (int)(-1*finalNum);\\n        }\\n        return (int)finalNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        long finalNum = 0;\\n        while(x!=0){\\n            int lastDig = x%10;\\n            finalNum += lastDig;\\n            finalNum = finalNum*10;\\n            x= x/10;\\n        }\\n        finalNum = finalNum/10;\\n        if(finalNum > Integer.MAX_VALUE || finalNum<Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        if(x<0){\\n            return (int)(-1*finalNum);\\n        }\\n        return (int)finalNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 132861,
                "title": "3-lines-python-solution",
                "content": "```python3\\nclass Solution:\\n    def reverse(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        sign = [1,-1][x < 0]\\n        rst = sign * int(str(abs(x))[::-1])\\n        return rst if -(2**31)-1 < rst < 2**31 else 0\\n```",
                "solutionTags": [],
                "code": "```python3\\nclass Solution:\\n    def reverse(self, x):\\n        \"\"\"\\n        :type x: int\\n        :rtype: int\\n        \"\"\"\\n        sign = [1,-1][x < 0]\\n        rst = sign * int(str(abs(x))[::-1])\\n        return rst if -(2**31)-1 < rst < 2**31 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056,
                "title": "very-short-7-lines-and-elegant-solution",
                "content": "```    \\npublic int reverse(int x) {\\n        long rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            x= x/10;\\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\\n                return 0;\\n        }\\n        return (int) rev;\\n    }\\n```\\n\\t\\t\\n**Update: Not using long:**\\n\\n```\\n  public int reverse(int x) {\\n        int prevRev = 0 , rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            if((rev - x % 10) / 10 != prevRev){\\n                return 0;\\n            }\\n            prevRev = rev;\\n            x= x/10;\\n        }\\n        return rev;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```    \\npublic int reverse(int x) {\\n        long rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            x= x/10;\\n            if( rev > Integer.MAX_VALUE || rev < Integer.MIN_VALUE)\\n                return 0;\\n        }\\n        return (int) rev;\\n    }\\n```\n```\\n  public int reverse(int x) {\\n        int prevRev = 0 , rev= 0;\\n        while( x != 0){\\n            rev= rev*10 + x % 10;\\n            if((rev - x % 10) / 10 != prevRev){\\n                return 0;\\n            }\\n            prevRev = rev;\\n            x= x/10;\\n        }\\n        return rev;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055,
                "title": "golfing-in-python",
                "content": "Get the `s`ign, get the `r`eversed absolute integer, and return their product if `r` didn't \"overflow\".\\n\\n    def reverse(self, x):\\n        s = cmp(x, 0)\\n        r = int(`s*x`[::-1])\\n        return s*r * (r < 2**31)\\n\\nAs compressed one-liner, for potential comparison:\\n\\n    def reverse(self, x):\\n        s=cmp(x,0);r=int(`s*x`[::-1]);return(r<2**31)*s*r\\n\\nAnybody got something shorter?",
                "solutionTags": [
                    "Python"
                ],
                "code": "Get the `s`ign, get the `r`eversed absolute integer, and return their product if `r` didn't \"overflow\".\\n\\n    def reverse(self, x):\\n        s = cmp(x, 0)\\n        r = int(`s*x`[::-1])\\n        return s*r * (r < 2**31)\\n\\nAs compressed one-liner, for potential comparison:\\n\\n    def reverse(self, x):\\n        s=cmp(x,0);r=int(`s*x`[::-1]);return(r<2**31)*s*r\\n\\nAnybody got something shorter?",
                "codeTag": "Python3"
            },
            {
                "id": 4124,
                "title": "8-ms-simple-c-solution-which-checks-overflow",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            int ans = 0;\\n            while (x) {\\n                int temp = ans * 10 + x % 10;\\n                if (temp / 10 != ans)\\n                    return 0;\\n                ans = temp;\\n                x /= 10;\\n            }\\n            return ans;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            int ans = 0;\\n            while (x) {\\n                int temp = ans * 10 + x % 10;\\n                if (temp / 10 != ans)\\n                    return 0;\\n                ans = temp;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4057,
                "title": "shortest-code-possible-in-c",
                "content": "long long make res a 64 bit number, the overflow is checked.\\n\\n    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long long res = 0;\\n            while(x) {\\n                res = res*10 + x%10;\\n                x /= 10;\\n            }\\n            return (res<INT_MIN || res>INT_MAX) ? 0 : res;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long long res = 0;\\n            while(x) {\\n                res = res*10 + x%10;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4527,
                "title": "a-python-solution-o-n-58ms",
                "content": "    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            result = 0\\n    \\n            if x < 0:\\n                symbol = -1\\n                x = -x\\n            else:\\n                symbol = 1\\n    \\n            while x:\\n                result = result * 10 + x % 10\\n                x /= 10\\n    \\n            return 0 if result > pow(2, 31) else result * symbol\\n            \\n\\n**Also another solution if you just want to hack it with int -> str -> int**\\n\\n    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            negFlag = 1\\n            if x < 0:\\n                negFlag = -1\\n                strx = str(x)[1:]\\n            else:\\n                strx = str(x)\\n    \\n            x = int(strx[::-1])\\n            \\n            return 0 if x > pow(2, 31) else x * negFlag",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            result = 0\\n    \\n            if x < 0:\\n                symbol = -1\\n                x = -x\\n            else:\\n                symbol = 1\\n    \\n            while x:\\n                result = result * 10 + x % 10\\n                x /= 10\\n    \\n            return 0 if result > pow(2, 31) else result * symbol\\n            \\n\\n**Also another solution if you just want to hack it with int -> str -> int**\\n\\n    class Solution:\\n        # @return an integer\\n        def reverse(self, x):\\n            negFlag = 1\\n            if x < 0:\\n                negFlag = -1\\n                strx = str(x)[1:]\\n            else:\\n                strx = str(x)\\n    \\n            x = int(strx[::-1])\\n            \\n            return 0 if x > pow(2, 31) else x * negFlag",
                "codeTag": "Java"
            },
            {
                "id": 373709,
                "title": "clean-and-simple-javascript-solution",
                "content": "```\\nvar reverse = function(x) {\\n  const absReversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n  if (absReversed > 2**31) return 0;\\n  return absReversed * Math.sign(x);\\n};\\n```\\nPlease upvote if you like it!!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  const absReversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n  if (absReversed > 2**31) return 0;\\n  return absReversed * Math.sign(x);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1054279,
                "title": "faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int y=0;\\n        while(x){\\n            if(y>INT_MAX/10 || y<INT_MIN/10){\\n                return 0;\\n            }else{\\n                y=y*10 +x%10;\\n                x=x/10;\\n            }\\n        }\\n        return y;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int y=0;\\n        while(x){\\n            if(y>INT_MAX/10 || y<INT_MIN/10){\\n                return 0;\\n            }else{\\n                y=y*10 +x%10;\\n                x=x/10;\\n            }\\n        }\\n        return y;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 732756,
                "title": "24ms-96-82-python3-solution",
                "content": "Python\\'s `bit_length()` is useful, it returns the number of bits required to represent an integer in binary. \\n\\nWe can utilize this and create a compound conditional statement for dealing with the assumption of 32-bit signed integer range.\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        return (-rev if x < 0 else rev) if rev.bit_length() < 32 else 0\\n```\\n\\nThis approach is faster than other approaches, for example: `join()` and `reversed()`.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        return (-rev if x < 0 else rev) if rev.bit_length() < 32 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4109,
                "title": "a-simple-c-solution-with-5ms",
                "content": "    int reverse(int x) {\\n        long long val = 0;\\n    \\tdo \\n    \\t{\\n    \\t\\tval = val * 10 + x % 10;\\n    \\t\\tx /= 10;\\n    \\t} while (x);\\n    \\t\\n    \\treturn (val > INT_MAX || val < INT_MIN) ? 0 : val;\\n    }",
                "solutionTags": [],
                "code": "    int reverse(int x) {\\n        long long val = 0;\\n    \\tdo \\n    \\t{\\n    \\t\\tval = val * 10 + x % 10;\\n    \\t\\tx /= 10;\\n    \\t} while (x);\\n    \\t\\n    \\treturn (val > INT_MAX || val < INT_MIN) ? 0 : val;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4127,
                "title": "simple-java-solution-o-n-time-and-o-1-space",
                "content": "Simply just modulo the input by 10, add it to a long-integer variable as the result.\\nRepeat. When the result is > max integer or < min integer, return 0. Hence, return the result as an integer\\n\\n    public class Solution {\\n        public int reverse(int x) {\\n            long result =0;\\n            while(x != 0)\\n            {\\n                result = (result*10) + (x%10);\\n                if(result > Integer.MAX_VALUE) return 0;\\n                if(result < Integer.MIN_VALUE) return 0;\\n                x = x/10;\\n            }\\n            return (int)result;\\n            \\n            \\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long result =0;\\n            while(x != 0)\\n            {\\n                result = (result*10) + (x%10);\\n                if(result > Integer.MAX_VALUE) return 0;\\n                if(result < Integer.MIN_VALUE) return 0;\\n                x = x/10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4196,
                "title": "java-2ms-9-lines-of-code-easy-understand",
                "content": "    public int rever(int x){\\n    \\t\\tlong r = 0;\\n    \\t\\twhile(x != 0){\\n    \\t\\t\\tr = r*10 + x%10;\\n    \\t\\t\\tx /= 10;\\n    \\t\\t}\\n    \\t\\tif(r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE)\\n    \\t\\t\\treturn (int)r;\\n    \\t\\telse\\n    \\t\\t\\treturn 0;\\n    \\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int rever(int x){\\n    \\t\\tlong r = 0;\\n    \\t\\twhile(x != 0){\\n    \\t\\t\\tr = r*10 + x%10;\\n    \\t\\t\\tx /= 10;\\n    \\t\\t}\\n    \\t\\tif(r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE)\\n    \\t\\t\\treturn (int)r;\\n    \\t\\telse\\n    \\t\\t\\treturn 0;\\n    \\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3251935,
                "title": "easy-to-understand-c-solution-with-no-usage-of-64-bit-integers-o-log-n-o-1",
                "content": "# Complexity\\n- Time complexity:  $$O(log(n))$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public int Reverse(int x)\\n    {\\n        var result = 0;\\n\\n        while (x != 0)\\n        {\\n            var remainder = x % 10;\\n            var temp = result * 10 + remainder;\\n\\n            // in case of overflow, the current value will not be equal to the previous one\\n            if ((temp - remainder) / 10 != result)\\n            {\\n                return 0;\\n            }\\n\\n            result = temp;\\n            x /= 10;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```\\n\\n![pleaseupvote.jpg](https://assets.leetcode.com/users/images/5e6d2edc-7a72-46ab-83a6-ef6503bb5c56_1677848416.2608643.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Math"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int Reverse(int x)\\n    {\\n        var result = 0;\\n\\n        while (x != 0)\\n        {\\n            var remainder = x % 10;\\n            var temp = result * 10 + remainder;\\n\\n            // in case of overflow, the current value will not be equal to the previous one\\n            if ((temp - remainder) / 10 != result)\\n            {\\n                return 0;\\n            }\\n\\n            result = temp;\\n            x /= 10;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1598636,
                "title": "solution-swift-reverse-integer-test-cases",
                "content": "<blockquote>\\n<b>Disclaimer:</b> By using any content from this post or thread, you release the author(s) from all liability and warranty of any kind. You are free to use the content freely and as you see fit. Any suggestions for improvement are welcome and greatly appreciated! Happy coding!\\n</blockquote>\\n\\n```swift\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n        var r = 0, x = x\\n        while x != 0 {\\n            r = r * 10\\n            r = r + (x % 10)\\n            x /= 10\\n        }\\n        return r < Int32.min || r > Int32.max ? 0 : r\\n    }\\n}\\n```\\n\\n<hr>\\n\\n<p>\\n<details>\\n<summary><img src=\"https://git.io/JDblm\" height=\"24\"> <b>TEST CASES</b></summary>\\n\\n<br>\\n\\n<pre>\\nResult: Executed 4 tests, with 0 failures (0 unexpected) in 0.009 (0.011) seconds\\n</pre>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n\\n    func test0() {\\n        let value = solution.reverse(123)\\n        XCTAssertEqual(value, 321)\\n    }\\n    func test1() {\\n        let value = solution.reverse(-123)\\n        XCTAssertEqual(value, -321)\\n    }\\n    func test2() {\\n        let value = solution.reverse(120)\\n        XCTAssertEqual(value, 21)\\n    }\\n    func test3() {\\n        let value = solution.reverse(0)\\n        XCTAssertEqual(value, 0)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n        var r = 0, x = x\\n        while x != 0 {\\n            r = r * 10\\n            r = r + (x % 10)\\n            x /= 10\\n        }\\n        return r < Int32.min || r > Int32.max ? 0 : r\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n\\n    func test0() {\\n        let value = solution.reverse(123)\\n        XCTAssertEqual(value, 321)\\n    }\\n    func test1() {\\n        let value = solution.reverse(-123)\\n        XCTAssertEqual(value, -321)\\n    }\\n    func test2() {\\n        let value = solution.reverse(120)\\n        XCTAssertEqual(value, 21)\\n    }\\n    func test3() {\\n        let value = solution.reverse(0)\\n        XCTAssertEqual(value, 0)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 969722,
                "title": "javascript-solution-94-83-no-reverse-string",
                "content": "```\\nfunction reverse(x) {\\n  const isNegative = x < 0;\\n  x = Math.abs(x);\\n  let ret = 0;\\n  while (x > 0) {\\n    const num = x % 10;\\n    x = Math.floor(x / 10);\\n    ret *= 10;\\n    ret += num;\\n  }\\n  if (ret > Math.pow(2,31)) return 0;\\n  return isNegative ? ret * -1 : ret;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction reverse(x) {\\n  const isNegative = x < 0;\\n  x = Math.abs(x);\\n  let ret = 0;\\n  while (x > 0) {\\n    const num = x % 10;\\n    x = Math.floor(x / 10);\\n    ret *= 10;\\n    ret += num;\\n  }\\n  if (ret > Math.pow(2,31)) return 0;\\n  return isNegative ? ret * -1 : ret;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 408697,
                "title": "two-python-solutions-and-explanation-of-python-modulo-and-int-division-differences-from-c-java",
                "content": "**Solution 1:** \\nSimilar Approach to the official solution, but modified to work with python modulo and division differences\\n\\n```\\n    def reverse_v1(self, x: int) -> int:\\n        reverse = 0\\n        max_int = pow(2, 31)-1\\n        min_int = pow(-2, 31)\\n        \\n        while x != 0:   \\n            # Python modulo does not work the same as c or java. It always returns the same\\n            # sign as the divisor and rounds towards negative infinit. Also // rounds towards negative infinity not 0 as in C so this also\\n            # behaves differently. Python 3.7 added a math.remainder(), but leet code is\\n            # running a python version prior to this (at least at the time of writing). Since the C \\'remainder\\' behavior is desirable for\\n            # this problem, the following code emulates it. \\n            #\\n            # See https://stackoverflow.com/questions/1907565/c-and-python-different-behaviour-of-the-modulo-operation and\\n\\t\\t\\t# http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html\\n            pop = x % 10 if x >= 0 else (abs(x) % 10)*-1\\n            x = x // 10 if x >=0 else math.ceil(x / 10)\\n\\n            if (reverse > max_int//10) or (reverse == max_int // 10 and pop > 7):\\n                return 0\\n            \\n            if (reverse < math.ceil(min_int / 10)) or (reverse == math.ceil(min_int / 10) and pop < -8):\\n                return 0\\n            \\n            reverse = reverse * 10 + pop\\n        \\n        return reverse\\n```\\n\\n**Solution 2:** \\nUsing string as an intermediate representation. \\n\\n```\\ndef reverse_v2(self, x: int) -> int:\\n\\tmax_int = pow(2, 31)-1\\n\\tmin_int = pow(-2, 31)\\n\\n\\tstr_x = str(abs(x))\\n\\tstr_x_reversed = str_x[::-1]\\n\\tresult = int(str_x_reversed)\\n\\tresult = result * -1 if x < 0 else result\\n\\n\\treturn result if (result < max_int and result > min_int) else 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def reverse_v1(self, x: int) -> int:\\n        reverse = 0\\n        max_int = pow(2, 31)-1\\n        min_int = pow(-2, 31)\\n        \\n        while x != 0:   \\n            # Python modulo does not work the same as c or java. It always returns the same\\n            # sign as the divisor and rounds towards negative infinit. Also // rounds towards negative infinity not 0 as in C so this also\\n            # behaves differently. Python 3.7 added a math.remainder(), but leet code is\\n            # running a python version prior to this (at least at the time of writing). Since the C \\'remainder\\' behavior is desirable for\\n            # this problem, the following code emulates it. \\n            #\\n            # See https://stackoverflow.com/questions/1907565/c-and-python-different-behaviour-of-the-modulo-operation and\\n\\t\\t\\t# http://python-history.blogspot.com/2010/08/why-pythons-integer-division-floors.html\\n            pop = x % 10 if x >= 0 else (abs(x) % 10)*-1\\n            x = x // 10 if x >=0 else math.ceil(x / 10)\\n\\n            if (reverse > max_int//10) or (reverse == max_int // 10 and pop > 7):\\n                return 0\\n            \\n            if (reverse < math.ceil(min_int / 10)) or (reverse == math.ceil(min_int / 10) and pop < -8):\\n                return 0\\n            \\n            reverse = reverse * 10 + pop\\n        \\n        return reverse\\n```\n```\\ndef reverse_v2(self, x: int) -> int:\\n\\tmax_int = pow(2, 31)-1\\n\\tmin_int = pow(-2, 31)\\n\\n\\tstr_x = str(abs(x))\\n\\tstr_x_reversed = str_x[::-1]\\n\\tresult = int(str_x_reversed)\\n\\tresult = result * -1 if x < 0 else result\\n\\n\\treturn result if (result < max_int and result > min_int) else 0\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4243,
                "title": "4ms-c-solution-easy-to-understand",
                "content": "    int reverse(int x) {\\n        long result = 0;\\n        while(x != 0)\\n        {\\n            result = result*10 + x % 10;\\n            x /= 10;\\n        }\\n        return (result > INT_MAX || result < INT_MIN)? 0 : result;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int reverse(int x) {\\n        long result = 0;\\n        while(x != 0)\\n        {\\n            result = result*10 + x % 10;\\n            x /= 10;\\n        }\\n        return (result > INT_MAX || result < INT_MIN)? 0 : result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4240,
                "title": "5-lines-2ms-java-solution",
                "content": "    public class Solution {\\n        public int reverse(int x) {\\n            long answer = 0;\\n            while(x != 0) {\\n                answer = 10 * answer + x % 10;\\n                x /= 10;\\n            }\\n            return (answer > Integer.MAX_VALUE || answer < Integer.MIN_VALUE) ? 0 : (int) answer;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long answer = 0;\\n            while(x != 0) {\\n                answer = 10 * answer + x % 10;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2002944,
                "title": "c-100-no-int-max-long-easy-explanation-interview-helper",
                "content": "# **Before beginning to understand, get ready to see your solution\\'s code quality result as shown below:\\u2764**\\n\\n![image](https://assets.leetcode.com/users/images/5d0fa2d6-c3b5-40ca-bf59-e226bd410421_1651533248.641618.jpeg)\\n\\n### **Question Explanation and Observation of difficulty:**\\n\\nAs per the question, we need to reverse the integer checking if the **result remains in the range of integer(32 bits) or not.**. Well the main part/crux of the question why this question is a **MEDIUM LEVEL PROBLEM** lies in this line:\\n`Assume the environment does not allow you to store 64-bit integers (signed or unsigned).`\\n\\n\\n**Approach 1 (Missing Edge Case):**\\n\\nA basic approch which we all would follow initially is: \\n**Lets take a simple Example: `x = 123` for understanding:**\\n1. Initiate original answer as `0`. (Lets say `ans = 0`)\\n2. Find the last digit of `x` by using `x%10`.( `lastDigit = 3`)\\n3. Multiply `x` by `10` and add the last digit to the new Temporary number. (`temp = x*10 + lastDigit` -> `temp = 0*10 + 3 = 3` )\\n4. **Check if the `( (temp - ans) / 10  == ans )`** --> `( (3 - 0)/10 == 0)`. \\n\\tA. If **NOT**, then return 0 as soon as possible and break.(Explained below)\\n\\tB. If **yes**, *continue the process 2 to 4 while x is greater than 0*.\\n\\nExplaning **NOT case:**\\nBasically why we check this case is that if the integer overflow occurs, then int * val would take a random value from the range of  integer which would fail the above check in line 4.\\n\\n#### **Sample Code for this:**\\n```\\nint reverse(int x) {\\n        \\n        int ans = 0;\\n        while(x){\\n           \\n            int lastDigit = x%10;\\n            \\n            int temp = ans * 10 + lastDigit;\\n            \\n            if((temp - lastDigit)/10 != ans)\\n                return 0;\\n            \\n            ans = temp;\\n            x/=10;    \\n        }\\n        return ans;\\n    }\\n```\\n\\n#### **Output:**\\n```\\nRuntime Error Message:\\nLine 10: Char 33: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:33\\nLast executed input:\\n1534236469\\n```\\n### **Where did it failed??**\\nThe error message says about integer overflow that **`964632435 * 10 cannot be represented in type \\'int\\'`**. Which means we already have reached the **answer = 964632435** to which if we multiply by **10** it would exceed the int range`[-2^31, 2^31 - 1]`.\\n\\n**Some would suggest is that taking the ans variable as long (as 964632435 * 10 can be stored in long) and the checking the check:**\\n```\\n if(ans > INT_MAX || ans < INT_MIN)\\n                return 0;\\n```\\n\\n\\n**BUT THE INTERVIEWER MIGHT ASK YOU NOT TO USE ANY DATA TYPE(Except int) or any prebuilt function such as INT_MAX / INT_MIN for checking the max/min range of int.**\\n\\nThus, please **AVOID using long Data Type** for your solution if you are in your interview. The interviewer might become sad \\uD83D\\uDE22 and you can fail in your that interview (which I dont want).\\uD83D\\uDE0A\\n\\n\\n## **EXPLANATION OF SOLUTION / OBSERVATION:**\\n\\n### **Lets see if we can check integer overflow at compile time without using any extra function??**\\n\\nWe know that our solution fails at overflow when perform `ans * 10 `.\\n\\nThus let us define an **upper bound** and a **lower bound** for our answer to be always between this range. Thus lets define: \\n`lower bound =  INT_MIN/10 =   - (2^31 /10 )` \\n`upper bound =  INT_MAX/10 =  (2^31 - 1 / 10)`.\\n\\n**Note:**\\nWe took lower and upper bound by dividing the actual range by 10 because we make the reverse by multiplying the `ans * 10 `. So we need to make sure that `ans *10` remains in **INT** only. That\\'s why we **declare the bounds dividing the MAX_INT and MIN_INT by 10 so that we can check the interger overflow at the compile time** as shown below:\\n\\n```\\n\\tint lastDigit = x%10;\\n\\tif(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n\\t\\t int temp = ans * 10 + lastDigit;\\n\\t\\t ans = temp;\\n\\t\\t x/=10;  \\n   }\\n   else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur.\\n\\t\\treturn 0;\\n\\t}\\n```\\n\\n\\n#### **SOLUTION: (ACCEPTED, 100% FAST, 0MS)**\\n\\n```\\nint reverse(int x) {\\n        \\n        int upperLimit =  (pow(2,31) - 1)/10;\\n        int lowerLimit = -(pow(2,31)/10);\\n    \\n        int ans = 0;\\n        \\n        while(x){\\n           \\n            int lastDigit = x%10;\\n\\t\\t\\t\\n            if(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n                 int temp = ans * 10 + lastDigit;\\n                 ans = temp;\\n                 x/=10;  \\n            }\\n            else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur\\n                return 0;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```\\n\\n#### **Output: Try it  yourself and comment!\\u2764** \\n\\n**Feel free to comment for any doubt and please upvote \\u2B06 if you find anything useful, as it would motivate me to write more explanations**.\\n\\n**Happy Coding! Lets crack it\\uD83D\\uDE0A**\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        \\n        int ans = 0;\\n        while(x){\\n           \\n            int lastDigit = x%10;\\n            \\n            int temp = ans * 10 + lastDigit;\\n            \\n            if((temp - lastDigit)/10 != ans)\\n                return 0;\\n            \\n            ans = temp;\\n            x/=10;    \\n        }\\n        return ans;\\n    }\\n```\n```\\nRuntime Error Message:\\nLine 10: Char 33: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:33\\nLast executed input:\\n1534236469\\n```\n```\\n if(ans > INT_MAX || ans < INT_MIN)\\n                return 0;\\n```\n```\\n\\tint lastDigit = x%10;\\n\\tif(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n\\t\\t int temp = ans * 10 + lastDigit;\\n\\t\\t ans = temp;\\n\\t\\t x/=10;  \\n   }\\n   else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur.\\n\\t\\treturn 0;\\n\\t}\\n```\n```\\nint reverse(int x) {\\n        \\n        int upperLimit =  (pow(2,31) - 1)/10;\\n        int lowerLimit = -(pow(2,31)/10);\\n    \\n        int ans = 0;\\n        \\n        while(x){\\n           \\n            int lastDigit = x%10;\\n\\t\\t\\t\\n            if(ans <= upperLimit && ans >= lowerLimit){ // Checking if ans will be there in integer range only.\\n                 int temp = ans * 10 + lastDigit;\\n                 ans = temp;\\n                 x/=10;  \\n            }\\n            else{ // ans would exceed the int if multiplied by 10. Thus integer overflow occur\\n                return 0;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007493,
                "title": "simple-java-solutions-runtime-1ms-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        StringBuilder s = new StringBuilder();\\n        s.append(Math.abs(x));\\n        s.reverse();\\n        if (s.length() >= 10 ){\\n            int c1 = Integer.parseInt(s.substring(0 , 5) );\\n            int c2 = Integer.parseInt(s.substring(5 , 10) );\\n            if (c1 > 21474 || c2 > 83647){\\n                return 0;\\n            }\\n        }\\n\\n       int num = Integer.parseInt(s.toString());\\n        \\n        return (x < 0) ? -num : num ;\\n    }\\n}\\n```\\n\\n![abcd1.jpeg](https://assets.leetcode.com/users/images/54c93cde-680e-4aad-8162-4e0d183022ed_1693954123.431134.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        StringBuilder s = new StringBuilder();\\n        s.append(Math.abs(x));\\n        s.reverse();\\n        if (s.length() >= 10 ){\\n            int c1 = Integer.parseInt(s.substring(0 , 5) );\\n            int c2 = Integer.parseInt(s.substring(5 , 10) );\\n            if (c1 > 21474 || c2 > 83647){\\n                return 0;\\n            }\\n        }\\n\\n       int num = Integer.parseInt(s.toString());\\n        \\n        return (x < 0) ? -num : num ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090,
                "title": "my-2ms-4lines-clean-java-solution-may-help-you",
                "content": "    public class Solution {\\n        public int reverse(int x) {\\n            long res = 0;\\n    \\t\\tfor (; x != 0; x /= 10)\\n    \\t\\t\\tres = res * 10 + x % 10;\\n    \\t\\treturn res > Integer.MAX_VALUE || res < Integer.MIN_VALUE ? 0: (int) res;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int reverse(int x) {\\n            long res = 0;\\n    \\t\\tfor (; x != 0; x /= 10)\\n    \\t\\t\\tres = res * 10 + x % 10;\\n    \\t\\treturn res > Integer.MAX_VALUE || res < Integer.MIN_VALUE ? 0: (int) res;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4148,
                "title": "share-my-clean-accepted-c-solution-without-long-type-or-magic-number",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            if (x == INT_MIN)\\n                return 0;\\n            if (x < 0)\\n                return -reverse(-x);\\n            \\n            int rx = 0; // store reversed integer\\n            while (x != 0) {\\n                // check overflow\\n                if (rx > INT_MAX / 10 || 10 * rx > INT_MAX - x % 10) return 0;\\n                rx = rx * 10 + x % 10;\\n                x = x / 10;\\n            }\\n            return rx;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            if (x == INT_MIN)\\n                return 0;\\n            if (x < 0)\\n                return -reverse(-x);\\n            \\n            int rx = 0; // store reversed integer\\n            while (x != 0) {\\n                // check overflow\\n                if (rx > INT_MAX / 10 || 10 * rx > INT_MAX - x % 10) return 0;\\n                rx = rx * 10 + x % 10;\\n                x = x / 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 284410,
                "title": "simple-and-fast",
                "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        result = 0\\n        symbol = 1\\n        \\n        if x < 0:\\n            symbol = -1\\n            x = -x\\n\\n        while x:\\n            result = result * 10 + x % 10\\n            x /= 10\\n            \\n        return 0 if result > pow(2,31) else result * symbol\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        result = 0\\n        symbol = 1\\n        \\n        if x < 0:\\n            symbol = -1\\n            x = -x\\n\\n        while x:\\n            result = result * 10 + x % 10\\n            x /= 10\\n            \\n        return 0 if result > pow(2,31) else result * symbol\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061403,
                "title": "clean-pythonic-solution",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        retval = int(str(abs(x))[::-1])\\n        \\n        if(retval.bit_length()>31):\\n            return 0\\n    \\n        if x<0:\\n            return -1*retval\\n        else:\\n            return retval\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        retval = int(str(abs(x))[::-1])\\n        \\n        if(retval.bit_length()>31):\\n            return 0\\n    \\n        if x<0:\\n            return -1*retval\\n        else:\\n            return retval\\n```",
                "codeTag": "Java"
            },
            {
                "id": 212513,
                "title": "python-scala-with-explanations",
                "content": "Rather than count the number of digits in advance, we can multiply `result` by 10 before add the current `digit` from time to time.\\n****\\n> Python\\n```\\nclass Solution:\\n    def reverse(self, x):\\n        if x < 0:\\n            return -1 * self.reverseUtil(-x)\\n        return self.reverseUtil(x)\\n        \\n    def reverseUtil(self, x):\\n        result = 0\\n        while x != 0:\\n            digit = x % 10\\n            result = result * 10 + digit\\n            x = int(x / 10)\\n\\t\\t\\t\\n        return 0 if result > pow(2, 31) - 1 or result < -pow(2, 31) else result\\n```\\n> Scala\\n```\\n    def reverse(x: Int): Int = {\\n        // Corner case.\\n        if (!isValidInteger(x)) {\\n            return 0\\n        }\\n        \\n        if (x < 0) {\\n            return -reverseUtil(-x)\\n        }\\n        return reverseUtil(x)\\n    }\\n    \\n    def reverseUtil(x: Int): Int = {\\n        var result: Long = 0\\n        var vx = x\\n        \\n        while (vx != 0) {\\n            result = result * 10 + vx % 10\\n            if (!isValidInteger(result)) {\\n                return 0\\n            }\\n            vx /= 10\\n        }\\n        \\n        result.toInt\\n    }\\n    \\n    // Check if x is a valid integer.\\n    def isValidInteger(x: Long): Boolean = {\\n        if (x > Int.MaxValue || x < Int.MinValue) {\\n            return false\\n        }\\n        true\\n    }\\n```\\n**(\\u4EBA \\u2022\\u0348\\u1D17\\u2022\\u0348)** Thanks for voting!",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x):\\n        if x < 0:\\n            return -1 * self.reverseUtil(-x)\\n        return self.reverseUtil(x)\\n        \\n    def reverseUtil(self, x):\\n        result = 0\\n        while x != 0:\\n            digit = x % 10\\n            result = result * 10 + digit\\n            x = int(x / 10)\\n\\t\\t\\t\\n        return 0 if result > pow(2, 31) - 1 or result < -pow(2, 31) else result\\n```\n```\\n    def reverse(x: Int): Int = {\\n        // Corner case.\\n        if (!isValidInteger(x)) {\\n            return 0\\n        }\\n        \\n        if (x < 0) {\\n            return -reverseUtil(-x)\\n        }\\n        return reverseUtil(x)\\n    }\\n    \\n    def reverseUtil(x: Int): Int = {\\n        var result: Long = 0\\n        var vx = x\\n        \\n        while (vx != 0) {\\n            result = result * 10 + vx % 10\\n            if (!isValidInteger(result)) {\\n                return 0\\n            }\\n            vx /= 10\\n        }\\n        \\n        result.toInt\\n    }\\n    \\n    // Check if x is a valid integer.\\n    def isValidInteger(x: Long): Boolean = {\\n        if (x > Int.MaxValue || x < Int.MinValue) {\\n            return false\\n        }\\n        true\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1195169,
                "title": "java-faster-than-100-00-less-than-99-22-abiding-all-rules",
                "content": "Following all the rules (can\\'t use long etc.), I don\\'t think there is a simplier solution.\\n\\nWe need to look at the max value of int which is 2147483647 (2<sup>31</sup> - 1). We can then see that when we are adding the 10th digit and the first 9 exceed 214748364, then no matter what the 10th digit will be, the number will be larger than the max int value. But if the first 9 digits are no more than 214748364, then the 10th digit can be in the range [0, 7].\\n\\nNow, we need to make sure that the 10th digit will never be larger than 7. This can easily be done by again looking at the max int value 2147483647, from which we can see that if the given number is 10 digits long, then the largest possible 1st digit is 2, so in the reversed number the largest possible 10th digit is 2, thus it will never be larger than 7.\\n\\nThe same observation can be made for the negative numbers.\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {  \\n\\n        int ans = 0;\\n        while (x != 0)\\n        {\\n            if (ans > 214748364 || ans < -214748364)\\n            {\\n                return 0;\\n            }\\n            \\n            ans = ans * 10 + x % 10;\\n            x /= 10;\\n        }  \\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {  \\n\\n        int ans = 0;\\n        while (x != 0)\\n        {\\n            if (ans > 214748364 || ans < -214748364)\\n            {\\n                return 0;\\n            }\\n            \\n            ans = ans * 10 + x % 10;\\n            x /= 10;\\n        }  \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 219020,
                "title": "rust-0ms-string-reversing",
                "content": "```rust\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        x.signum() * x\\n\\t\\t\\t.abs()\\n\\t\\t\\t.to_string()\\n\\t\\t\\t.chars()\\n\\t\\t\\t.rev()\\n\\t\\t\\t.collect::<String>()\\n\\t\\t\\t.parse::<i32>()\\n\\t\\t\\t.unwrap_or(0)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        x.signum() * x\\n\\t\\t\\t.abs()\\n\\t\\t\\t.to_string()\\n\\t\\t\\t.chars()\\n\\t\\t\\t.rev()\\n\\t\\t\\t.collect::<String>()\\n\\t\\t\\t.parse::<i32>()\\n\\t\\t\\t.unwrap_or(0)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497080,
                "title": "c-java-python-javascript-10-lines-of-code-beats-100-0ms",
                "content": "# Intuition:\\nThe problem asks to reverse the digits of a given integer. The approach is to extract the digits one by one using modulo operator and then add them in reverse order.\\n\\n# Approach:\\n\\n1. Initialize a variable \\'reverse\\' to 0. This variable will hold the reversed integer.\\n\\n2. Initialize another variable \\'num\\' to the given integer. We will use \\'num\\' to avoid modifying the original input integer.\\n\\n3. While the \\'num\\' is not equal to 0, extract the rightmost digit of \\'num\\' using the modulo operator (%). Store this digit in a variable called \\'digit\\'.\\n\\n4. Multiply \\'reverse\\' by 10 and add the extracted digit \\'digit\\' to it.\\n\\n5. Divide \\'num\\' by 10 and update \\'num\\' with the quotient. This will remove the rightmost digit of \\'num\\' in each iteration.\\n\\n6. Repeat steps 3-5 until \\'num\\' becomes 0.\\n\\n7. Check if the reversed integer \\'reverse\\' is within the range of a 32-bit signed integer. If it is not, return 0.\\n\\n8. Return the reversed integer \\'reverse\\'.\\n\\n# Complexity:\\n- Time Complexity: The time complexity of the solution is O(log(x)). We need to extract the digits of the integer one by one until there are no more digits left. This process continues until the integer becomes 0. The number of iterations required depends on the number of digits in the integer, which is proportional to log(x) with base 10.\\n- Space Complexity: The space complexity of the solution is O(1). We are only using a constant amount of extra space to store the reversed integer and a few other variables.\\n---\\n# C++\\n```cpp\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long reverse = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            reverse = reverse*10 + digit;\\n            x=x/10;\\n        }\\n       if(reverse>INT_MAX || reverse<INT_MIN) return 0;\\n        return reverse;\\n    }\\n};\\n```\\n\\n---\\n# JAVA\\n```java\\nclass Solution {\\n    public int reverse(int x) {\\n        long reverse = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            reverse = reverse * 10 + digit;\\n            x = x / 10;\\n        }\\n        if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) return 0;\\n        return (int) reverse;\\n    }\\n}\\n\\n```\\n---\\n# Python\\n```py\\nclass Solution(object):\\n    def reverse(self, x):\\n        reverse = 0\\n        sign = -1 if x < 0 else 1\\n        x = abs(x)\\n        while x:\\n            digit = x % 10\\n            reverse = reverse * 10 + digit\\n            x /= 10\\n        result = sign * reverse\\n        if result > 2 ** 31 - 1 or result < -(2 ** 31):\\n            return 0\\n        return result\\n\\n```\\n---\\n# JavaScript\\n```js\\nvar reverse = function(x) {\\n  let rev = 0;\\n  const sign = x < 0 ? -1 : 1;\\n  x = Math.abs(x);\\n  while (x !== 0) {\\n    const digit = x % 10;\\n    rev = rev * 10 + digit;\\n    x = Math.floor(x / 10);\\n  }\\n  const result = sign * rev;\\n  if (result > 2 ** 31 - 1 || result < -(2 ** 31)) return 0;\\n  return result;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Math"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long reverse = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            reverse = reverse*10 + digit;\\n            x=x/10;\\n        }\\n       if(reverse>INT_MAX || reverse<INT_MIN) return 0;\\n        return reverse;\\n    }\\n};\\n```\n```java\\nclass Solution {\\n    public int reverse(int x) {\\n        long reverse = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            reverse = reverse * 10 + digit;\\n            x = x / 10;\\n        }\\n        if (reverse > Integer.MAX_VALUE || reverse < Integer.MIN_VALUE) return 0;\\n        return (int) reverse;\\n    }\\n}\\n\\n```\n```py\\nclass Solution(object):\\n    def reverse(self, x):\\n        reverse = 0\\n        sign = -1 if x < 0 else 1\\n        x = abs(x)\\n        while x:\\n            digit = x % 10\\n            reverse = reverse * 10 + digit\\n            x /= 10\\n        result = sign * reverse\\n        if result > 2 ** 31 - 1 or result < -(2 ** 31):\\n            return 0\\n        return result\\n\\n```\n```js\\nvar reverse = function(x) {\\n  let rev = 0;\\n  const sign = x < 0 ? -1 : 1;\\n  x = Math.abs(x);\\n  while (x !== 0) {\\n    const digit = x % 10;\\n    rev = rev * 10 + digit;\\n    x = Math.floor(x / 10);\\n  }\\n  const result = sign * rev;\\n  if (result > 2 ** 31 - 1 || result < -(2 ** 31)) return 0;\\n  return result;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293960,
                "title": "rust-use-checked-ops-to-check-overflow-0ms-2-3mb",
                "content": "Runtime: 0 ms, faster than 100.00% of Rust online submissions for Reverse Integer.\\nMemory Usage: 2.3 MB, less than 91.40% of Rust online submissions for Reverse Integer.\\n\\n```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        let mut res: i32 = 0;\\n        let mut cur: i32 = x;\\n        \\n        while cur != 0 {\\n            match res.checked_mul(10) {\\n                None => return 0,\\n                Some(tmp) => match tmp.checked_add(cur % 10) {\\n                    None => return 0,\\n                    Some(fine) => {\\n                        res = fine;\\n                    }\\n                } \\n            }\\n            cur = cur / 10;\\n        }\\n        \\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        let mut res: i32 = 0;\\n        let mut cur: i32 = x;\\n        \\n        while cur != 0 {\\n            match res.checked_mul(10) {\\n                None => return 0,\\n                Some(tmp) => match tmp.checked_add(cur % 10) {\\n                    None => return 0,\\n                    Some(fine) => {\\n                        res = fine;\\n                    }\\n                } \\n            }\\n            cur = cur / 10;\\n        }\\n        \\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2398536,
                "title": "c-solution-100-faster-0ms-6mb-easy",
                "content": "```\\nint reverse(int n) {\\n    int rev = 0;\\n    \\n        while(n !=0) {\\n            \\n            if( (rev > INT_MAX/10) || (rev < INT_MIN/10) ){\\n                return 0;\\n            }\\n            \\n            rev = (rev * 10) + (n % 10);\\n            n /= 10;\\n        }\\n        \\n     return rev;   \\n    }\\n```\\nPlease upvote if you find the solution useful, means a lot.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int n) {\\n    int rev = 0;\\n    \\n        while(n !=0) {\\n            \\n            if( (rev > INT_MAX/10) || (rev < INT_MIN/10) ){\\n                return 0;\\n            }\\n            \\n            rev = (rev * 10) + (n % 10);\\n            n /= 10;\\n        }\\n        \\n     return rev;   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 488686,
                "title": "python-string-slicing-28-ms-76-88-12-6-mb-100-00",
                "content": "```\\n# reverse an integer\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        result = int(str(x)[::-1]) if x >= 0 else -int(str(x)[1:][::-1])\\n\\n        if -2**31 <= result <= (2**31)-1:\\n            return result\\n        else:\\n            return 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# reverse an integer\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        result = int(str(x)[::-1]) if x >= 0 else -int(str(x)[1:][::-1])\\n\\n        if -2**31 <= result <= (2**31)-1:\\n            return result\\n        else:\\n            return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4378,
                "title": "might-be-helpful-to-you-my-2ms-11-lines-java-solution",
                "content": "    public int reverse(int x) {\\n        long result = 0;\\n        while (x != 0) {\\n            result = result * 10 + x%10;\\n            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\\n                return 0;\\n            }\\n            x = x / 10;\\n        }\\n        return (int)result;\\n    }",
                "solutionTags": [],
                "code": "    public int reverse(int x) {\\n        long result = 0;\\n        while (x != 0) {\\n            result = result * 10 + x%10;\\n            if (result > Integer.MAX_VALUE || result < Integer.MIN_VALUE) {\\n                return 0;\\n            }\\n            x = x / 10;\\n        }\\n        return (int)result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4501,
                "title": "javascript-solution-for-reversed-integer",
                "content": "\\n    \\n    if (x < 0) return -reverse(-x);\\n    \\n    var reversedInt = 0;\\n    \\n    while(x>0) {\\n        var a = x%10;\\n        x = Math.floor(x/10);\\n        \\n        //Should no larger than Math.floor(Number.MAX_VALUE/10)\\n        if(reversedInt >= 214748365)\\n            return 0;\\n        reversedInt = reversedInt*10+a;\\n    }\\n    \\n    return reversedInt;\\n\\nFor Javascript, I guess just using Number.MAX_VALUE or Number.MAX_SAFE_VALUE works instead of using specific number.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n    \\n    if (x < 0) return -reverse(-x);\\n    \\n    var reversedInt = 0;\\n    \\n    while(x>0) {\\n        var a = x%10;\\n        x = Math.floor(x/10);\\n        \\n        //Should no larger than Math.floor(Number.MAX_VALUE/10)\\n        if(reversedInt >= 214748365)\\n            return 0;\\n        reversedInt = reversedInt*10+a;\\n    }\\n    \\n    return reversedInt;\\n\\nFor Javascript, I guess just using Number.MAX_VALUE or Number.MAX_SAFE_VALUE works instead of using specific number.",
                "codeTag": "Unknown"
            },
            {
                "id": 1868805,
                "title": "100-intuitive-explanation-any-language-just-kill-it",
                "content": "# Learn something New. Try Your best\\n![image](https://assets.leetcode.com/users/images/27ec9c9d-d6f2-41eb-99a1-18baf1c6fed3_1647835795.1753824.png)\\n\\n\\nRange of int is -2147483648 to 2147483647.\\nSuppose you want to reverse the 2147483645 which is a valid interger in given range and it\\'s reverse is 5463847412 which is out of range.\\n\\nLet\\'s take another example:\\n\\nx= 2147483641\\nreverse(x) : 1463847412\\n\\n**-2,147,483,648<(1463847412)< 2,147,483,647**\\nreverse lies with in the range of integer.\\n\\n**consider this case:**\\n\\nx=1234567809                      // *inside the range of int*\\nreverse(x): 9087654321         // outside the range of int \\n\\nHere 9087654321 is more than than the upper positive bound of integer (9087654321 > 2147483647). So over flow occurs.\\nAccording to problem statement if overflow occurs then return 0. Therefore above example we know there is need to check upper bound and lower bound.\\n**We will add a condition to check the bounds**\\n\\n**if(rev>2147483641 || rev<-2147483641) return 0;**\\nAnd question is killed.\\n\\n![image](https://assets.leetcode.com/users/images/b96d2f1f-8165-487e-9c6e-e35c9f11af73_1647827287.3637693.png)\\n# Aim-10 upvotes. Please do upvote if you like it.\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev=0;\\n\\t\\t// simple logic of reverse using while loop\\n\\t\\t\\n         while(x!=0){\\n             rev=rev*10+x%10;\\n             x/=10;\\n         }\\n\\t\\t \\n\\t\\t //check condition \\n        if(rev>2147483641 || rev<-2147483641) return 0;\\n        return rev;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev=0;\\n\\t\\t// simple logic of reverse using while loop\\n\\t\\t\\n         while(x!=0){\\n             rev=rev*10+x%10;\\n             x/=10;\\n         }\\n\\t\\t \\n\\t\\t //check condition \\n        if(rev>2147483641 || rev<-2147483641) return 0;\\n        return rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1539232,
                "title": "java-tc-o-log10-n-sc-o-1-reverse-digit-by-digit-check-for-overflow",
                "content": "```java\\n/**\\n * Reverse digit by digit. For each reversal check if the result is greater than\\n * MAX_VALUE\\n *\\n * Time Complexity: O(log10 N) or O(Number of digits in N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Input number.\\n */\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x >= -9 && x <= 9) {\\n            return x;\\n        }\\n        if (x == Integer.MIN_VALUE || x == Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n\\n        int sign = x < 0 ? -1 : 1;\\n        x = Math.abs(x);\\n        int result = 0;\\n\\n        while (x > 0) {\\n            int digit = x % 10;\\n            if (result > Integer.MAX_VALUE / 10\\n                    || (result == Integer.MAX_VALUE / 10 && digit > Integer.MAX_VALUE % 10)) {\\n                return 0;\\n            }\\n            result = result * 10 + digit;\\n            x /= 10;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```java\\n/**\\n * Reverse digit by digit. For each reversal check if the result is greater than\\n * MAX_VALUE\\n *\\n * Time Complexity: O(log10 N) or O(Number of digits in N)\\n *\\n * Space Complexity: O(1)\\n *\\n * N = Input number.\\n */\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x >= -9 && x <= 9) {\\n            return x;\\n        }\\n        if (x == Integer.MIN_VALUE || x == Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n\\n        int sign = x < 0 ? -1 : 1;\\n        x = Math.abs(x);\\n        int result = 0;\\n\\n        while (x > 0) {\\n            int digit = x % 10;\\n            if (result > Integer.MAX_VALUE / 10\\n                    || (result == Integer.MAX_VALUE / 10 && digit > Integer.MAX_VALUE % 10)) {\\n                return 0;\\n            }\\n            result = result * 10 + digit;\\n            x /= 10;\\n        }\\n\\n        return sign * result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2481312,
                "title": "100-fast-with-commented-best-solution",
                "content": "```\\n// We will go beyond the question rule by storing our reverse ans as long long int;\\n// Then we check if the reverse value is following the INT_MAX or INT_MIN condition or not\\n// Lastly we will return the value ans a int type;\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        \\n        long long reverse=0;  // it will make our working process super easy\\n        \\n        while(n!=0)\\n        {\\n            int temp = n%10;\\n            reverse = reverse*10+temp;\\n            if(reverse>=INT_MAX || reverse<=INT_MIN) //checkint if the reverse value is following the INT_MAX or INT_MIN condition or not\\n\\t\\t\\t{ \\n                return 0;\\n            }\\n            n/=10;\\n        }\\n        \\n        int ans=reverse;\\n        return ans;\\n    }\\n};\\n//  please upvote, if u liked the solution\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n// We will go beyond the question rule by storing our reverse ans as long long int;\\n// Then we check if the reverse value is following the INT_MAX or INT_MIN condition or not\\n// Lastly we will return the value ans a int type;\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        \\n        long long reverse=0;  // it will make our working process super easy\\n        \\n        while(n!=0)\\n        {\\n            int temp = n%10;\\n            reverse = reverse*10+temp;\\n            if(reverse>=INT_MAX || reverse<=INT_MIN) //checkint if the reverse value is following the INT_MAX or INT_MIN condition or not\\n\\t\\t\\t{ \\n                return 0;\\n            }\\n            n/=10;\\n        }\\n        \\n        int ans=reverse;\\n        return ans;\\n    }\\n};\\n//  please upvote, if u liked the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1336322,
                "title": "simplest-c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x)\\n    {\\n        long int ans = 0;\\n        while(x != 0)\\n        {\\n            ans = (ans * 10) + (x % 10);\\n            x = x/10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN)\\n        {\\n            return 0;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Like the solution?\\nPlease upvote \\u30C4**\\n\\nIf you can\\'t understand any step/point, feel free to comment.\\nHappy to help.",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x)\\n    {\\n        long int ans = 0;\\n        while(x != 0)\\n        {\\n            ans = (ans * 10) + (x % 10);\\n            x = x/10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN)\\n        {\\n            return 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1290537,
                "title": "python-clean-solution-with-suggested-assumption",
                "content": "```\\n    def reverse(self, x: int) -> int:\\n        positive = x > 0\\n        limits = [214748364, 7 if positive else 8]  # 2**31 // 10 == (2**31 - 1) // 10 == 214748364\\n\\n        x = abs(x)\\n        rev = 0\\n\\n        while x != 0:\\n            pop = x % 10\\n            x //= 10\\n\\n            if rev > limits[0] or (rev == limits[0] and pop > limits[1]):\\n                return 0\\n\\n            rev = rev * 10 + pop\\n\\n        return rev if positive else -rev\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def reverse(self, x: int) -> int:\\n        positive = x > 0\\n        limits = [214748364, 7 if positive else 8]  # 2**31 // 10 == (2**31 - 1) // 10 == 214748364\\n\\n        x = abs(x)\\n        rev = 0\\n\\n        while x != 0:\\n            pop = x % 10\\n            x //= 10\\n\\n            if rev > limits[0] or (rev == limits[0] and pop > limits[1]):\\n                return 0\\n\\n            rev = rev * 10 + pop\\n\\n        return rev if positive else -rev\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 411330,
                "title": "go-0ms-solution",
                "content": "```\\nfunc reverse(x int) int {\\n    //math.MinInt32 = -2147483648\\n    //math.MaxInt32 = 2147483647\\n    var result int\\n    for x!=0{\\n        result=result*10+x%10\\n        if result > 2147483647  || result < -2147483648{\\n            return 0\\n        }\\n        x/=10\\n    }\\n    return result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc reverse(x int) int {\\n    //math.MinInt32 = -2147483648\\n    //math.MaxInt32 = 2147483647\\n    var result int\\n    for x!=0{\\n        result=result*10+x%10\\n        if result > 2147483647  || result < -2147483648{\\n            return 0\\n        }\\n        x/=10\\n    }\\n    return result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3005234,
                "title": "sort-and-easy",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1272121,
                "title": "c-clean-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int res = 0;\\n        while(x){\\n            if(res > INT_MAX/10 || res < INT_MIN/10)\\n                return 0;\\n            res = res*10 + x%10;\\n            x /= 10; \\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int res = 0;\\n        while(x){\\n            if(res > INT_MAX/10 || res < INT_MIN/10)\\n                return 0;\\n            res = res*10 + x%10;\\n            x /= 10; \\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 857688,
                "title": "python-cool-and-clean-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef reverse(self, x: int) -> int:\\n\\t\\t\\tif x > 0:\\n\\t\\t\\t\\tans = int(str(x)[:: -1])\\n\\t\\t\\t\\treturn ans if ans < 2**31 else 0\\n\\t\\t\\tans = - int(str(- x)[:: -1])\\n\\t\\t\\treturn ans if ans > - 2**31 else 0\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef reverse(self, x: int) -> int:\\n\\t\\t\\tif x > 0:\\n\\t\\t\\t\\tans = int(str(x)[:: -1])\\n\\t\\t\\t\\treturn ans if ans < 2**31 else 0\\n\\t\\t\\tans = - int(str(- x)[:: -1])\\n\\t\\t\\treturn ans if ans > - 2**31 else 0\\n",
                "codeTag": "Java"
            },
            {
                "id": 169516,
                "title": "c-language",
                "content": "```\\nint reverse(int x) \\n{\\n    int m=x;\\n    int t=0;\\n    int q=0;//save the last t\\n    int n=0;\\n    while(m!=0)\\n    {   q=t;\\n        n = m % 10;\\n        t=t*10+n;\\n        m=m/10;\\n        if((t-n)/10!=q) return 0;//check overflow\\n    }\\n    \\n    return t;    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint reverse(int x) \\n{\\n    int m=x;\\n    int t=0;\\n    int q=0;//save the last t\\n    int n=0;\\n    while(m!=0)\\n    {   q=t;\\n        n = m % 10;\\n        t=t*10+n;\\n        m=m/10;\\n        if((t-n)/10!=q) return 0;//check overflow\\n    }\\n    \\n    return t;    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4229,
                "title": "my-4ms-c-solution",
                "content": "    int reverse(int x) {\\n    int px=0;\\n    while(x!=0)\\n     {\\n        if(px>INT_MAX/10 || px<INT_MIN/10)return 0;\\n        px=px*10+x%10;\\n        x=x/10;\\n    }\\n    return px; \\n}",
                "solutionTags": [],
                "code": "    int reverse(int x) {\\n    int px=0;\\n    while(x!=0)\\n     {\\n        if(px>INT_MAX/10 || px<INT_MIN/10)return 0;\\n        px=px*10+x%10;\\n        x=x/10;\\n    }\\n    return px; \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3374885,
                "title": "java-solution-without-long-usage-beats-100",
                "content": "# Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere is the Approach how we can solve the problem without using any type with more bits.\\n\\nIt\\'s obvious that every time we do this update\\n$$reversed = reversed * 10 + digit;$$\\nIn order to avoid overflow of integers, we need to check whether\\n$$reversed > (Integer.MAXVALUE - digit) / 10$$\\nor not.\\nAnd the same for $$Integer.MINVALUE$$\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(len(n))$$ -->\\n$$O(len(n))$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n\\n        for (; x != 0; x /= 10) {\\n            int digit = x % 10;\\n            if (reversed > 0 && reversed > (Integer.MAX_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            if (reversed < 0 && reversed < (Integer.MIN_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            reversed = reversed * 10 + digit;\\n        }\\n\\n        return reversed;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n\\n        for (; x != 0; x /= 10) {\\n            int digit = x % 10;\\n            if (reversed > 0 && reversed > (Integer.MAX_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            if (reversed < 0 && reversed < (Integer.MIN_VALUE - digit) / 10) {\\n                return 0;\\n            }\\n            reversed = reversed * 10 + digit;\\n        }\\n\\n        return reversed;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2055036,
                "title": "0ms-1liner-100-fastest-solution-explained-o-n-time-complexity-o-n-space-complexity",
                "content": "(Note: This is part of a series of Leetcode solution explanations. If you like this solution or find it useful, ***please upvote*** this post.)\\n***Take care brother, peace, love!***\\n\\n```\\n```\\n\\nThe best result for the code below is ***0ms / 38.2MB*** (beats 92.04% / 24.00%).\\n* *** Python ***\\n\\n```\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        \\n        x = str(x)\\n        \\n        if x[0]==\"-\":\\n            sign = -1\\n        else:\\n            sign = 1\\n            \\n        x = x.lstrip(\"-\")\\n        x = x.lstrip(\"+\")\\n        \\n        x = x[::-1]\\n        \\n        int_x = int(x) * sign\\n        \\n        if int_x > 2**31-1:\\n            return 0\\n        elif int_x < -2**31:\\n            return 0\\n        else:\\n            return int_x\\n        \\n\\n```\\n\\n```\\n```\\n\\n```\\n```\\n***\"We are Anonymous. We are legion. We do not forgive. We do not forget. Expect us. Open your eyes..\" - \\uD835\\uDCD0\\uD835\\uDCF7\\uD835\\uDCF8\\uD835\\uDCF7\\uD835\\uDD02\\uD835\\uDCF6\\uD835\\uDCF8\\uD835\\uDCFE\\uD835\\uDCFC***",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript",
                    "Kotlin",
                    "Combinatorics"
                ],
                "code": "```\\n```\n```\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        \\n        x = str(x)\\n        \\n        if x[0]==\"-\":\\n            sign = -1\\n        else:\\n            sign = 1\\n            \\n        x = x.lstrip(\"-\")\\n        x = x.lstrip(\"+\")\\n        \\n        x = x[::-1]\\n        \\n        int_x = int(x) * sign\\n        \\n        if int_x > 2**31-1:\\n            return 0\\n        elif int_x < -2**31:\\n            return 0\\n        else:\\n            return int_x\\n        \\n\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1280651,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n  public int Reverse(int x) {\\n\\t\\tstring str = new string(x.ToString().Trim(\\'-\\').Reverse().ToArray());\\n\\t\\tbool tryInt32 = int.TryParse(str, out int intValue);\\n\\t\\treturn tryInt32 ? x.ToString().Contains(\"-\") ? intValue * -1 : intValue : 0;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n  public int Reverse(int x) {\\n\\t\\tstring str = new string(x.ToString().Trim(\\'-\\').Reverse().ToArray());\\n\\t\\tbool tryInt32 = int.TryParse(str, out int intValue);\\n\\t\\treturn tryInt32 ? x.ToString().Contains(\"-\") ? intValue * -1 : intValue : 0;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 668535,
                "title": "c-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int flag = 0; //marks negativity \\n        \\n        if(x < 0)\\n            flag = 1;\\n        \\n        int num = abs(x);\\n        long int newNum = 0; //long to avoid integer overflow\\n        \\n        while(num > 0)\\n        {\\n            int rem = num % 10;\\n            \\n            if(newNum*10 > INT_MAX) //to avoid signed integer overflow\\n                return 0;\\n            \\n            newNum = newNum*10 + rem; //Multiply by 10 to increment place value\\n            num = num/10;\\n        }\\n        \\n        if(flag == 0)\\n            return newNum;\\n        \\n        else\\n            return newNum*(-1);\\n    }\\n};\\n```\\n\\n**Upvote if this helped!**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int flag = 0; //marks negativity \\n        \\n        if(x < 0)\\n            flag = 1;\\n        \\n        int num = abs(x);\\n        long int newNum = 0; //long to avoid integer overflow\\n        \\n        while(num > 0)\\n        {\\n            int rem = num % 10;\\n            \\n            if(newNum*10 > INT_MAX) //to avoid signed integer overflow\\n                return 0;\\n            \\n            newNum = newNum*10 + rem; //Multiply by 10 to increment place value\\n            num = num/10;\\n        }\\n        \\n        if(flag == 0)\\n            return newNum;\\n        \\n        else\\n            return newNum*(-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4422,
                "title": "python-straight-forward-solution",
                "content": "    def reverse(x):\\n        sign = -1 if x<0 else 1\\n        res, x = 0, abs(x)\\n        while x:\\n            res = res*10 + (x%10)\\n            x /= 10\\n        # handle the overflow bound\\n        if res > 2**31+1 or res < -2**31-1:\\n            return 0\\n        return res*sign",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def reverse(x):\\n        sign = -1 if x<0 else 1\\n        res, x = 0, abs(x)\\n        while x:\\n            res = res*10 + (x%10)\\n            x /= 10\\n        # handle the overflow bound\\n        if res > 2**31+1 or res < -2**31-1:\\n            return 0\\n        return res*sign",
                "codeTag": "Python3"
            },
            {
                "id": 3642573,
                "title": "python-solution",
                "content": "# Intuition\\nEasy solution in python\\n\\n# Code\\n```\\nMIN=-2**31\\nMAX=(2**31)-1\\nclass Solution:\\n    def __init__(self):\\n        self.rev=0\\n        self.is_neg=False\\n    def reverse(self, x: int) -> int:\\n        if x < 0:\\n            self.is_neg=True\\n            x=abs(x)\\n        while(x!=0):\\n            digit=x%10\\n            x=x//10\\n\\n            if self.rev > MAX//10 or (self.rev==MAX//10 and digit>MAX%10):\\n                return 0\\n            if self.rev<MIN//10 or (self.rev==MIN//10 and digit <MIN%10):\\n                return 0\\n            \\n            self.rev=10*self.rev+digit\\n        if self.is_neg:\\n            self.rev=-self.rev\\n        return self.rev\\n        \\n```\\n\\n\\n![upvote.jpg](https://assets.leetcode.com/users/images/f2b20535-89a4-4005-acb6-e9ba67f53399_1686849752.7148187.jpeg)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nMIN=-2**31\\nMAX=(2**31)-1\\nclass Solution:\\n    def __init__(self):\\n        self.rev=0\\n        self.is_neg=False\\n    def reverse(self, x: int) -> int:\\n        if x < 0:\\n            self.is_neg=True\\n            x=abs(x)\\n        while(x!=0):\\n            digit=x%10\\n            x=x//10\\n\\n            if self.rev > MAX//10 or (self.rev==MAX//10 and digit>MAX%10):\\n                return 0\\n            if self.rev<MIN//10 or (self.rev==MIN//10 and digit <MIN%10):\\n                return 0\\n            \\n            self.rev=10*self.rev+digit\\n        if self.is_neg:\\n            self.rev=-self.rev\\n        return self.rev\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3227561,
                "title": "simple-2-liner-in-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        ans = int(str(abs(x))[::-1]) * (-1 if x < 0 else 1)\\n        return ans if -2**31 <= ans < 2**31 else 0\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        ans = int(str(abs(x))[::-1]) * (-1 if x < 0 else 1)\\n        return ans if -2**31 <= ans < 2**31 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2723367,
                "title": "java-easy-solution-100-fast",
                "content": "```\\npublic int reverse(int x) {\\n       long rev=0;\\n        while(x!=0){\\n                \\n                int rem=x%10;\\n                rev=rev*10+rem;\\n                        x=x/10;\\n                if(rev>Integer.MAX_VALUE || rev<Integer.MIN_VALUE) return 0;\\n                \\n                \\n                \\n        }\\n        return (int)rev;\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\npublic int reverse(int x) {\\n       long rev=0;\\n        while(x!=0){\\n                \\n                int rem=x%10;\\n                rev=rev*10+rem;\\n                        x=x/10;\\n                if(rev>Integer.MAX_VALUE || rev<Integer.MIN_VALUE) return 0;\\n                \\n                \\n                \\n        }\\n        return (int)rev;\\n    }\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1888703,
                "title": "100-fastest-typescript-solution",
                "content": "```\\nconst minInt = -Math.pow(2, 31)\\nconst maxInt = -minInt - 1\\n\\nfunction reverse(x: number): number {\\n  const isNegative = x < 0\\n  let reversed = 0\\n  if (isNegative) { x = -x }\\n\\n  while (x > 0) {\\n    const remainder = x % 10\\n    reversed = reversed * 10 + remainder\\n    x = Math.floor(x / 10)\\n  }\\n\\n  if (reversed > maxInt) { return 0 }\\n  return isNegative ? -reversed : reversed\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst minInt = -Math.pow(2, 31)\\nconst maxInt = -minInt - 1\\n\\nfunction reverse(x: number): number {\\n  const isNegative = x < 0\\n  let reversed = 0\\n  if (isNegative) { x = -x }\\n\\n  while (x > 0) {\\n    const remainder = x % 10\\n    reversed = reversed * 10 + remainder\\n    x = Math.floor(x / 10)\\n  }\\n\\n  if (reversed > maxInt) { return 0 }\\n  return isNegative ? -reversed : reversed\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2626431,
                "title": "javascript-easy-understanding",
                "content": "```\\nvar reverse = function(x) {\\n\\t//reverse as string\\n    let reversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n    // check if result inside range of uint32, dont need to check int32,  checks only positive because we take into account the minus sign in the logic later\\n    if(reversed > 2 ** 31 - 1 ) return 0;\\n    // and if we have minus sign, add it now \\n    return Math.sign(x) * reversed\\n};\\n\\n// if it helps you, please upvote\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n\\t//reverse as string\\n    let reversed = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n    // check if result inside range of uint32, dont need to check int32,  checks only positive because we take into account the minus sign in the logic later\\n    if(reversed > 2 ** 31 - 1 ) return 0;\\n    // and if we have minus sign, add it now \\n    return Math.sign(x) * reversed\\n};\\n\\n// if it helps you, please upvote\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 895338,
                "title": "easy-python3-solution-w-runtime-16-ms-faster-than-99-94-memu-14-2-mb-less-than-99-98",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        i = -rev if x < 0 else rev\\n        if i < -2**31 or i > 2**31-1:\\n            return 0\\n        return i\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = int(str(abs(x))[::-1])\\n        i = -rev if x < 0 else rev\\n        if i < -2**31 or i > 2**31-1:\\n            return 0\\n        return i\\n```",
                "codeTag": "Java"
            },
            {
                "id": 768553,
                "title": "beginner-friendly-js-solution",
                "content": "```\\nvar reverse = function(x) {\\n  // Make the number positive and turn it into a string\\n  let s = Math.abs(x).toString();\\n  let arr = [];\\n  // Push each \"number\" from last to first into an array \\n  for (let i = s.length - 1; i >= 0; i--) {\\n    arr.push(s[i])\\n  }\\n  // Turn the reversed string into a number\\n  let result = Number(arr.join(\\'\\'));\\n  // If the number exceeds the range, return 0\\n  if (result > 2 ** 31 - 1) {\\n    return 0;\\n  }\\n  // If the original input number was negative, turn the final number negative\\n  if (x < 0) {\\n    result *= -1;\\n  }\\n\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  // Make the number positive and turn it into a string\\n  let s = Math.abs(x).toString();\\n  let arr = [];\\n  // Push each \"number\" from last to first into an array \\n  for (let i = s.length - 1; i >= 0; i--) {\\n    arr.push(s[i])\\n  }\\n  // Turn the reversed string into a number\\n  let result = Number(arr.join(\\'\\'));\\n  // If the number exceeds the range, return 0\\n  if (result > 2 ** 31 - 1) {\\n    return 0;\\n  }\\n  // If the original input number was negative, turn the final number negative\\n  if (x < 0) {\\n    result *= -1;\\n  }\\n\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 724586,
                "title": "javascript-2-solutions-with-video-explanation",
                "content": "https://www.youtube.com/watch?v=zvNEWnLyeQQ&feature=youtu.be\\n\\n### Approach 1: String reverse\\n* Runtime: 148 ms, faster than 5.51% of JavaScript online submissions for Reverse Integer.\\n* Memory Usage: 37.7 MB, less than 10.78% of JavaScript online submissions for Reverse Integer.\\n\\n```\\nvar reverse = function(x) {\\n    const number = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n\\n    if (number > Math.pow(2, 31) - 1) {\\n        return 0\\n    }\\n\\n    return x < 0 ? -number : number;\\n};\\n```\\n\\n### Approach 2: Pop and Push digits\\n* Runtime: 72 ms, faster than 94.38% of JavaScript online submissions for Reverse Integer.\\n* Memory Usage: 37.2 MB, less than 38.77% of JavaScript online submissions for Reverse Integer.\\n\\n```\\nvar reverse = function(x) {\\n    let revert = 0;\\n    // const isNegative = x < 0;\\n    const isNegative = x < 0 ? true : false;\\n\\n    // x = Math.abs(x);\\n    if (isNegative) {\\n        x = -1 * x;\\n    }\\n\\n    // while(x) {\\n    //     const pop = x % 10;\\n    //     x = Math.trunc(x / 10);\\n    //     revert = revert * 10 + pop\\n    // }\\n\\n    for (let i = x; i; i = Math.trunc(i / 10)) {\\n        revert = revert * 10 + i % 10\\n    }\\n\\n\\n    // if (revert > 2**31) {\\n    //     return 0;\\n    // }\\n\\n    if (revert >= 2147483648) {\\n        return 0;\\n    }\\n\\n    return isNegative ? -revert : revert\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n    const number = Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\');\\n\\n    if (number > Math.pow(2, 31) - 1) {\\n        return 0\\n    }\\n\\n    return x < 0 ? -number : number;\\n};\\n```\n```\\nvar reverse = function(x) {\\n    let revert = 0;\\n    // const isNegative = x < 0;\\n    const isNegative = x < 0 ? true : false;\\n\\n    // x = Math.abs(x);\\n    if (isNegative) {\\n        x = -1 * x;\\n    }\\n\\n    // while(x) {\\n    //     const pop = x % 10;\\n    //     x = Math.trunc(x / 10);\\n    //     revert = revert * 10 + pop\\n    // }\\n\\n    for (let i = x; i; i = Math.trunc(i / 10)) {\\n        revert = revert * 10 + i % 10\\n    }\\n\\n\\n    // if (revert > 2**31) {\\n    //     return 0;\\n    // }\\n\\n    if (revert >= 2147483648) {\\n        return 0;\\n    }\\n\\n    return isNegative ? -revert : revert\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4227,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        \\n        var n =0;\\n        while(x!=0) {\\n            var mod = x%10;\\n            x=x/10;\\n            if (n> Int32.MaxValue/10 || n< Int32.MinValue/10){\\n                return 0;\\n            }\\n            else if(n==Int32.MaxValue/10 && mod >= Int32.MaxValue %10) {\\n                return 0;\\n            }\\n            else if(n==Int32.MinValue/10 && mod <= Int32.MinValue %10) {\\n                return 0;\\n            }\\n            n = n*10 + mod;\\n        }\\n        \\n        return n;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        \\n        var n =0;\\n        while(x!=0) {\\n            var mod = x%10;\\n            x=x/10;\\n            if (n> Int32.MaxValue/10 || n< Int32.MinValue/10){\\n                return 0;\\n            }\\n            else if(n==Int32.MaxValue/10 && mod >= Int32.MaxValue %10) {\\n                return 0;\\n            }\\n            else if(n==Int32.MinValue/10 && mod <= Int32.MinValue %10) {\\n                return 0;\\n            }\\n            n = n*10 + mod;\\n        }\\n        \\n        return n;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4185,
                "title": "my-simple-solution-in-javascript",
                "content": "    var reverse = function(x)\\n     {\\n    var sign= (x>0)?1: -1;\\n    x=Math.abs(x);\\n    var str=x.toString().split(\"\").reverse().join(\"\");\\n    var result=sign * Number(str);\\n    if(result>2147483647 || result < -2147483648)return 0;\\n    else return result;\\n    };",
                "solutionTags": [],
                "code": "    var reverse = function(x)\\n     {\\n    var sign= (x>0)?1: -1;\\n    x=Math.abs(x);\\n    var str=x.toString().split(\"\").reverse().join(\"\");\\n    var result=sign * Number(str);\\n    if(result>2147483647 || result < -2147483648)return 0;\\n    else return result;\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 4588,
                "title": "java-solution-using-stringbuilder-over-underflow-caught",
                "content": "I was thinking a different approach, so I came up with a solution that uses StringBuilder.\\nIt's not a best solution out there, but it saves some time.. (226ms) \\n\\n    public int reverse(int x) {\\n        StringBuilder result = new StringBuilder();\\n        String resultSt = \"\";\\n        int val = 0;\\n        \\n        if (x > 0) {\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return val;\\n        }\\n        \\n        else {\\n            x = -x;\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return -val;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "I was thinking a different approach, so I came up with a solution that uses StringBuilder.\\nIt's not a best solution out there, but it saves some time.. (226ms) \\n\\n    public int reverse(int x) {\\n        StringBuilder result = new StringBuilder();\\n        String resultSt = \"\";\\n        int val = 0;\\n        \\n        if (x > 0) {\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return val;\\n        }\\n        \\n        else {\\n            x = -x;\\n            resultSt = result.append(x).reverse().toString();\\n\\n            try { \\n                val = (int) Integer.parseInt(resultSt);\\n            } catch (NumberFormatException e) { return 0; }\\n            \\n            return -val;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3333255,
                "title": "95-99-javascript-without-store-64-bit-integers",
                "content": "This problem is very similar to the [9. Palindrome Number](https://leetcode.com/problems/palindrome-number/description/). \\nTo solve it, I was just edit [my solution](https://leetcode.com/problems/palindrome-number/solutions/2499161/99-22-javascript-without-converting-the-integer-to-a-string/?orderBy=hot) of palindrome number problem.\\n\\n#### How to reverse the number\\n```\\noriginal number: 543\\nreverse number: 0\\n\\n//Get the last digit of the original number\\noriginal % 10 = 543 % 10 = 3\\n//Put this digit as the last one in the reverse number\\nreverse * 10 + digit = 0 * 10 + 3 = 0 + 3 = 3\\nreverse: 3\\n//Remove this digit from the original number\\noriginal / 10 = 543 / 10 = 54.3\\n~~54.3 = 54\\noriginal: 54\\n\\n//Repeat\\noriginal % 10 = 54 % 10 = 4\\nreverse * 10 + digit = 3 * 10 + 4 = 30 + 4 = 34\\nreverse: 34\\noriginal / 10 = 54 / 10 = 5.4\\n~~5.4 = 5\\noriginal: 5\\n\\n//Repeat\\noriginal % 10 = 5 % 10 = 5\\nreverse * 10 + digit = 34 * 10 + 5 = 340 + 5 = 345\\nreverse: 345\\noriginal / 10 = 5 / 10 = 0.5\\n~~0.5 = 0\\noriginal: 0\\n\\ninput: 543\\noutput: 345\\n\\n```\\n\\nBut we also have to pay attention to the condition of the problem:\\n\\n*If reversing`x`causes the value to go outside the signed 32-bit integer range`[-2^31,2^31 - 1]`, then return`0`.*\\n\\nThis means that the reverse number must not be less than ```-2147483648``` or greater than ```2147483647```. Let\\'s declare these two values as constants:\\n\\n``` JavaScript []\\nconst MAX_SAFE_INTEGER = 2147483647;\\nconst MIN_SAFE_INTEGER = -2147483648;\\n```\\nThe condition also states:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that we cannot allocate a variable that is greater than the max safe value or less than the min safe value. This can happen during `reverse * 10 + digit`, so before we do this, we need to make sure of a few things.\\n\\n``` JavaScript []\\nreverse * 10 \\n//will not be greater than the max safe value or less than the min save value\\nif (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10)\\n\\nreverse * 10 + digit \\n//will not be greater than the max safe value\\nif (reverse == MAX_SAFE_INTEGER / 10 && digit > 7)\\n\\nreverse * 10 + digit \\n//will not be less than the min safe value\\nif (reverse == MIN_SAFE_INTEGER / 10 && digit < -8)\\n```\\n\\n**Please upvote if it was helpful!**\\n# Final code\\n\\n``` javascript []\\nvar reverse = function(x) {\\n    const MAX_SAFE_INTEGER = 2147483647;\\n    const MIN_SAFE_INTEGER = -2147483648;\\n\\n    var reverse = 0;\\n\\n    while (x != 0) {\\n      if (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10) {\\n        return 0;\\n      }\\n\\n      const digit = x % 10;\\n      if (reverse == MAX_SAFE_INTEGER / 10 && digit > 7) {\\n        return 0;\\n      }\\n      if (reverse == MIN_SAFE_INTEGER / 10 && digit < -8) {\\n        return 0;\\n      }\\n\\n      reverse = reverse * 10 + digit;\\n      x = ~~(x / 10);\\n    }\\n\\n    return reverse;\\n};\\n```\\n[Submission Detail](https://leetcode.com/submissions/detail/924341915/)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\noriginal number: 543\\nreverse number: 0\\n\\n//Get the last digit of the original number\\noriginal % 10 = 543 % 10 = 3\\n//Put this digit as the last one in the reverse number\\nreverse * 10 + digit = 0 * 10 + 3 = 0 + 3 = 3\\nreverse: 3\\n//Remove this digit from the original number\\noriginal / 10 = 543 / 10 = 54.3\\n~~54.3 = 54\\noriginal: 54\\n\\n//Repeat\\noriginal % 10 = 54 % 10 = 4\\nreverse * 10 + digit = 3 * 10 + 4 = 30 + 4 = 34\\nreverse: 34\\noriginal / 10 = 54 / 10 = 5.4\\n~~5.4 = 5\\noriginal: 5\\n\\n//Repeat\\noriginal % 10 = 5 % 10 = 5\\nreverse * 10 + digit = 34 * 10 + 5 = 340 + 5 = 345\\nreverse: 345\\noriginal / 10 = 5 / 10 = 0.5\\n~~0.5 = 0\\noriginal: 0\\n\\ninput: 543\\noutput: 345\\n\\n```\n```-2147483648```\n```2147483647```\n``` JavaScript []\\nconst MAX_SAFE_INTEGER = 2147483647;\\nconst MIN_SAFE_INTEGER = -2147483648;\\n```\n``` JavaScript []\\nreverse * 10 \\n//will not be greater than the max safe value or less than the min save value\\nif (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10)\\n\\nreverse * 10 + digit \\n//will not be greater than the max safe value\\nif (reverse == MAX_SAFE_INTEGER / 10 && digit > 7)\\n\\nreverse * 10 + digit \\n//will not be less than the min safe value\\nif (reverse == MIN_SAFE_INTEGER / 10 && digit < -8)\\n```\n``` javascript []\\nvar reverse = function(x) {\\n    const MAX_SAFE_INTEGER = 2147483647;\\n    const MIN_SAFE_INTEGER = -2147483648;\\n\\n    var reverse = 0;\\n\\n    while (x != 0) {\\n      if (reverse > MAX_SAFE_INTEGER / 10 || reverse < MIN_SAFE_INTEGER / 10) {\\n        return 0;\\n      }\\n\\n      const digit = x % 10;\\n      if (reverse == MAX_SAFE_INTEGER / 10 && digit > 7) {\\n        return 0;\\n      }\\n      if (reverse == MIN_SAFE_INTEGER / 10 && digit < -8) {\\n        return 0;\\n      }\\n\\n      reverse = reverse * 10 + digit;\\n      x = ~~(x / 10);\\n    }\\n\\n    return reverse;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2748225,
                "title": "reverse-integer-easy-c-solution",
                "content": "```\\n//Upvote Kar Keddhi\\uD83D\\uDE42\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num=abs(x);\\n        long rev_num=0;\\n        while(num)\\n        {\\n            rev_num*=10;\\n            int digit=num%10;\\n            rev_num+=digit;\\n            num/=10;\\n        }\\n        if(x<0) rev_num*=-1;\\n        if(rev_num>=-1*pow(2,31)&&rev_num<=pow(2,31)-1) return rev_num;\\n        else return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\n//Upvote Kar Keddhi\\uD83D\\uDE42\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num=abs(x);\\n        long rev_num=0;\\n        while(num)\\n        {\\n            rev_num*=10;\\n            int digit=num%10;\\n            rev_num+=digit;\\n            num/=10;\\n        }\\n        if(x<0) rev_num*=-1;\\n        if(rev_num>=-1*pow(2,31)&&rev_num<=pow(2,31)-1) return rev_num;\\n        else return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2747767,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 821663,
                "title": "c-solution-0-ms-faster-than-100-00",
                "content": "int reverse(int x) {\\n\\tint reversed = 0;\\n\\tint flag = 0;\\n\\tint mode = 0;\\n\\n\\tif (x > pow(2, 31) - 1 && x < -(pow(2, 31))) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\twhile (x != 0) {\\n\\t\\tmode = x % 10;\\n\\t\\tif (reversed > (pow(2, 31) - 1) / 10 || reversed < -(pow(2, 31) / 10)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treversed = reversed * 10 + mode;\\n\\t\\tx /= 10;\\n\\t}\\n\\n\\treturn reversed;\\n}",
                "solutionTags": [
                    "C"
                ],
                "code": "int reverse(int x) {\\n\\tint reversed = 0;\\n\\tint flag = 0;\\n\\tint mode = 0;\\n\\n\\tif (x > pow(2, 31) - 1 && x < -(pow(2, 31))) {\\n\\t\\treturn 0;\\n\\t}\\n\\n\\twhile (x != 0) {\\n\\t\\tmode = x % 10;\\n\\t\\tif (reversed > (pow(2, 31) - 1) / 10 || reversed < -(pow(2, 31) / 10)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treversed = reversed * 10 + mode;\\n\\t\\tx /= 10;\\n\\t}\\n\\n\\treturn reversed;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 351937,
                "title": "java-solution-beats-100",
                "content": "```\\n    public int reverse(int x) {\\n        int r=0; \\n        int sign = x<0? -1 : 1;\\n        x = Math.abs(x);\\n        while ( x>0){\\n            if( r>Integer.MAX_VALUE/10) return 0;\\n            r = r*10+ x%10;\\n            x = x/10;\\n        }\\n        return sign*r;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int reverse(int x) {\\n        int r=0; \\n        int sign = x<0? -1 : 1;\\n        x = Math.abs(x);\\n        while ( x>0){\\n            if( r>Integer.MAX_VALUE/10) return 0;\\n            r = r*10+ x%10;\\n            x = x/10;\\n        }\\n        return sign*r;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4359,
                "title": "golang-solution",
                "content": "    func reverse(x int) int {\\n        var result int\\n        for x != 0 {\\n            result = result * 10 + x % 10\\n            x = x / 10\\n        }\\n        if result < math.MinInt32 || result > math.MaxInt32 {\\n            return 0\\n        }\\n        return result\\n    }",
                "solutionTags": [],
                "code": "    func reverse(x int) int {\\n        var result int\\n        for x != 0 {\\n            result = result * 10 + x % 10\\n            x = x / 10\\n        }\\n        if result < math.MinInt32 || result > math.MaxInt32 {\\n            return 0\\n        }\\n        return result\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4475,
                "title": "short-accepted-c-solution-using-int-without-long-or-string",
                "content": "     int reverse(int x) {\\n            if(INT_MIN == x) return 0;\\n            if(x < 0) return -reverse(-x);\\n            int result = 0;\\n            while(x > 0){\\n                int a = x % 10;\\n                x = x / 10;\\n                if((INT_MAX - a) / 10 < result)\\n                  return 0;\\n                result = result * 10 + a;\\n            }\\n            return result;\\n        }",
                "solutionTags": [
                    "C++",
                    "Python"
                ],
                "code": "     int reverse(int x) {\\n            if(INT_MIN == x) return 0;\\n            if(x < 0) return -reverse(-x);\\n            int result = 0;\\n            while(x > 0){\\n                int a = x % 10;\\n                x = x / 10;\\n                if((INT_MAX - a) / 10 < result)\\n                  return 0;\\n                result = result * 10 + a;\\n            }\\n            return result;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3005319,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1343365,
                "title": "c-solution-using-try-catch-block",
                "content": "Here is my code using try catch block in C++.\\n\\n```\\nint reverse(int x) {\\n        int sig = 1;\\n        if(x < 0)\\n            sig = -1;\\n        \\n        x = abs(x);\\n        \\n        string s = to_string(x);\\n        std::reverse(s.begin(), s.end());\\n        \\n        try{\\n            x = stoi(s);\\n        } catch (...) {\\n            return 0;\\n        }\\n        \\n        x = sig * x;\\n        return x;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        int sig = 1;\\n        if(x < 0)\\n            sig = -1;\\n        \\n        x = abs(x);\\n        \\n        string s = to_string(x);\\n        std::reverse(s.begin(), s.end());\\n        \\n        try{\\n            x = stoi(s);\\n        } catch (...) {\\n            return 0;\\n        }\\n        \\n        x = sig * x;\\n        return x;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 945102,
                "title": "c-solution-handle-the-overflow",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        // check if x is outside the boundary of signed integer range: [\\u2212231,  231 \\u2212 1]\\n        if(INT_MIN < x && x > INT_MAX) {\\n            return 0;\\n        }\\n        \\n        // check if x is negative integer\\n        int sign = 1;\\n        if (x < 0) {\\n            sign = -1;\\n        }\\n        \\n        // do while loop for x > 0\\n        int num = abs(x), res = 0;\\n        while (num > 0) {\\n            // check if [res * 10 > INT_MAX], which equals to [res > INT_MAX/10]\\n            if (res > INT_MAX/10) {\\n                return 0;\\n            }\\n\\n            res = (res * 10) + (num % 10);\\n            num = int(num/10);\\n        }\\n        \\n        // don\\'t forget to multipy the result with sign\\n        return res * sign;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        // check if x is outside the boundary of signed integer range: [\\u2212231,  231 \\u2212 1]\\n        if(INT_MIN < x && x > INT_MAX) {\\n            return 0;\\n        }\\n        \\n        // check if x is negative integer\\n        int sign = 1;\\n        if (x < 0) {\\n            sign = -1;\\n        }\\n        \\n        // do while loop for x > 0\\n        int num = abs(x), res = 0;\\n        while (num > 0) {\\n            // check if [res * 10 > INT_MAX], which equals to [res > INT_MAX/10]\\n            if (res > INT_MAX/10) {\\n                return 0;\\n            }\\n\\n            res = (res * 10) + (num % 10);\\n            num = int(num/10);\\n        }\\n        \\n        // don\\'t forget to multipy the result with sign\\n        return res * sign;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 407350,
                "title": "javascript",
                "content": "```\\nvar reverse = function(x) {\\n    let ans = x < 0 ? \\n        parseInt(Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\')) * -1\\n        :\\n        parseInt(x.toString().split(\\'\\').reverse().join(\\'\\'))\\n    return Math.abs(ans) < Math.pow(2,31) ? ans : 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar reverse = function(x) {\\n    let ans = x < 0 ? \\n        parseInt(Math.abs(x).toString().split(\\'\\').reverse().join(\\'\\')) * -1\\n        :\\n        parseInt(x.toString().split(\\'\\').reverse().join(\\'\\'))\\n    return Math.abs(ans) < Math.pow(2,31) ? ans : 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 366565,
                "title": "2-line-straightforward-python-solution",
                "content": "```python\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        r = int(str(abs(x))[::-1])\\n        return (-r if x < 0 else r) if r.bit_length() < 32 else 0\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        r = int(str(abs(x))[::-1])\\n        return (-r if x < 0 else r) if r.bit_length() < 32 else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 250597,
                "title": "c-solution-using-unchecked-beats-100-40ms",
                "content": "This is a C# solution using a foor loop to organize the loop control variables.\\nI used the unchecked keyword to allow overflow. If the new push value doesn\\'t match the original value then we have detected overflow and we can return 0.\\n\\n```\\npublic class Solution \\n{\\n    public int Reverse(int x) \\n    {\\n        int reversed = 0;\\n        for(int pop = 0, push = 0; x != 0; x /= 10)\\n        {\\n            unchecked \\n            {\\n                pop = x % 10;\\n                push = reversed * 10 + pop;\\n                if((push-pop)/10 != reversed) \\n                   return 0;\\n                reversed = push;\\n            }\\n        }\\n        return reversed;\\n    }\\n}\\n```\\n\\nWe \"pop\" a value by removing it using the % operator. If we do % 10 then we\\'ll always get the number in the single digits.\\n\\nWe \"push\" a value by multiplying the current reversed integer by 10, this effectively shifts everything to the left 1 digit, then we add the recently \"popped\" value into the singles digit. \\n\\nWe can move onto the next value by dividing the value by 10, this cuts off the rightmost digit.",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public int Reverse(int x) \\n    {\\n        int reversed = 0;\\n        for(int pop = 0, push = 0; x != 0; x /= 10)\\n        {\\n            unchecked \\n            {\\n                pop = x % 10;\\n                push = reversed * 10 + pop;\\n                if((push-pop)/10 != reversed) \\n                   return 0;\\n                reversed = push;\\n            }\\n        }\\n        return reversed;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4407,
                "title": "an-standard-c-solution-with-fast-speed-14-lines",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long returnInt = 0;\\n            while (x)\\n            {\\n                returnInt = returnInt*10+x%10;\\n                x/=10;\\n            }\\n            if (returnInt>0)\\n                return returnInt > INT_MAX ? 0 : returnInt;\\n            else return returnInt < INT_MIN ? 0 : returnInt;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long returnInt = 0;\\n            while (x)\\n            {\\n                returnInt = returnInt*10+x%10;\\n                x/=10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4431,
                "title": "2ms-java-easy-version-to-understand-and-you-needn-t-to-consider-the-symbol-of",
                "content": "**I think it might be better! and needn't to consider the symbol of +/- when you compute -123 or 123**\\n\\n  \\n        /**\\n         * \\u8003\\u8651\\u6ea2\\u51fa\\n         * + - \\u53f7\\u4e0d\\u7528\\u8003\\u8651\\n         * */\\n         \\n         double res = 0;\\n         while(x != 0){\\n              //int single = x % 10;\\n             res = res*10 + x % 10;\\n             x = x/10;\\n         }\\n         \\n         if(res > Integer.MAX_VALUE || res < Integer.MIN_VALUE)\\n        \\t res = 0;\\n         \\n         return (int) res;",
                "solutionTags": [],
                "code": "**I think it might be better! and needn't to consider the symbol of +/- when you compute -123 or 123**\\n\\n  \\n        /**\\n         * \\u8003\\u8651\\u6ea2\\u51fa\\n         * + - \\u53f7\\u4e0d\\u7528\\u8003\\u8651\\n         * */\\n         \\n         double res = 0;\\n         while(x != 0){\\n              //int single = x % 10;\\n             res = res*10 + x % 10;\\n             x = x/10;\\n         }\\n         \\n         if(res > Integer.MAX_VALUE || res < Integer.MIN_VALUE)\\n        \\t res = 0;\\n         \\n         return (int) res;",
                "codeTag": "Unknown"
            },
            {
                "id": 4234,
                "title": "c-8-ms-solution-for-overflow-in-5-lines",
                "content": "      int tmp,y = 0;\\n      while(x != 0){\\n            tmp = y * 10 + x % 10;\\n            if(x>0&&(tmp/10 < y))  return 0;\\n            if(x<0&&(tmp/10 > y))  return 0;\\n            y = tmp;\\n            x /= 10;\\n        }\\n        return y;",
                "solutionTags": [
                    "C++"
                ],
                "code": "      int tmp,y = 0;\\n      while(x != 0){\\n            tmp = y * 10 + x % 10;\\n            if(x>0&&(tmp/10 < y))  return 0;\\n            if(x<0&&(tmp/10 > y))  return 0;\\n            y = tmp;\\n            x /= 10;\\n        }\\n        return y;",
                "codeTag": "Unknown"
            },
            {
                "id": 4550,
                "title": "simple-java-accepted-code-with-explanation",
                "content": "    public int reverse(int x) {\\n        long result = 0;\\n        //long type is for compare. Only larger range can compare Max and Min Integer \\n\\n        while(x!=0)\\n        {\\n        \\tint mod = x%10;\\n        \\tx = x/10;\\n        \\tresult = result*10 + mod;\\n        \\tif(result>Integer.MAX_VALUE||result<Integer.MIN_VALUE) return 0;\\n        }\\n        return (int) result;\\n    }",
                "solutionTags": [],
                "code": "    public int reverse(int x) {\\n        long result = 0;\\n        //long type is for compare. Only larger range can compare Max and Min Integer \\n\\n        while(x!=0)\\n        {\\n        \\tint mod = x%10;\\n        \\tx = x/10;\\n        \\tresult = result*10 + mod;\\n        \\tif(result>Integer.MAX_VALUE||result<Integer.MIN_VALUE) return 0;\\n        }\\n        return (int) result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4500,
                "title": "can-we-give-different-language-different-overflow-boundary",
                "content": "In official and most of people's solution, C++ or Java is used. So check 2147483647 in the code is necessary. But 2147483647 is not the boundary in Python. So in Python code, adding \\n\\n>         if (result >= 2147483647):\\n            return 0\\n\\nis sort of ugly and just for AC.\\n\\nCan we have different boundary for Python in this case?",
                "solutionTags": [
                    "Python"
                ],
                "code": "In official and most of people's solution, C++ or Java is used. So check 2147483647 in the code is necessary. But 2147483647 is not the boundary in Python. So in Python code, adding \\n\\n>         if (result >= 2147483647):\\n            return 0\\n\\nis sort of ugly and just for AC.\\n\\nCan we have different boundary for Python in this case?",
                "codeTag": "Unknown"
            },
            {
                "id": 3077886,
                "title": "javascript-solution-without-converting-to-string-by-using-simple-math",
                "content": "# Intuition\\nhere, we are going to find out a program to reverse an integer without needing to convert the number to string or using any functions (like reverse);\\n\\n# Approach\\nwe are actually going to make the number work like a string without converting it to a string using mathematical equations.\\n\\nthings to keep in mind:\\n1) To find the last digit of a number, do as below:\\n   number % 10 \\n\\n    example: \\n        123 % 10 = 3,\\n        28 % 10 = 8\\n2) To insert a digit to the number, do as below:\\n    (number * 10) + digit\\n\\n    example:\\n        suppose we need insert digit 4 into the number 123,\\n        (123 * 10) + 4 = 1234\\n\\nBy just using these two simple mathematical equations, we can do reverse the integer.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n    let output = 0;  //initialising the reverse value as 0 at beginning\\n    while(x!=0){ // to stop the while loop once we have completed the reversal\\n        output = (output * 10) + (x % 10); // maths formula to insert the digit to the number (like in the equation 2 (see the approach section of this solution))\\n        x = (x - (x % 10))/10; // maths formula to delete the last digit using equation 1 (see the approach section of this solution)\\n    }\\n    if(output <= -2147483651 || output >= 2147483651){  // checking whether the result is in the range as mentioned in the question)\\n        return 0;\\n    }\\n    return output; // returning the result\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n    let output = 0;  //initialising the reverse value as 0 at beginning\\n    while(x!=0){ // to stop the while loop once we have completed the reversal\\n        output = (output * 10) + (x % 10); // maths formula to insert the digit to the number (like in the equation 2 (see the approach section of this solution))\\n        x = (x - (x % 10))/10; // maths formula to delete the last digit using equation 1 (see the approach section of this solution)\\n    }\\n    if(output <= -2147483651 || output >= 2147483651){  // checking whether the result is in the range as mentioned in the question)\\n        return 0;\\n    }\\n    return output; // returning the result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2804732,
                "title": "java-code-runtime-1-ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\n    public int reverse(int n) {\\n        \\n   // Constraints GIVEN In Question:  -231 <= x <= 231 - 1\\n         if(n>= Integer.MAX_VALUE || n<=Integer.MIN_VALUE)\\n             return 0;\\n     \\n        int num = n;   \\n        if(num<0){\\n            n=n*(-1);    // make number positive and reverse it.\\n        }\\n\\n        // REVERSE LOGIC :\\n        long rev=0;\\n        while(n > 0) {\\n            long digit=n%10;\\n            rev = rev*10 + digit;\\n            n/=10;\\n\\n          if(rev>= Integer.MAX_VALUE)                  // If during reversing, value of number becomes  greater than MAX_VALUE  -> return 0\\n           return 0;\\n        }\\n\\n //If Original Number is negative - then convert reverse also number to negative.          \\n   \\n       if(num<0)\\n             rev=rev*(-1);         \\n        \\n        return (int)rev; \\n    }\\n}```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int n) {\\n        \\n   // Constraints GIVEN In Question:  -231 <= x <= 231 - 1\\n         if(n>= Integer.MAX_VALUE || n<=Integer.MIN_VALUE)\\n             return 0;\\n     \\n        int num = n;   \\n        if(num<0){\\n            n=n*(-1);    // make number positive and reverse it.\\n        }\\n\\n        // REVERSE LOGIC :\\n        long rev=0;\\n        while(n > 0) {\\n            long digit=n%10;\\n            rev = rev*10 + digit;\\n            n/=10;\\n\\n          if(rev>= Integer.MAX_VALUE)                  // If during reversing, value of number becomes  greater than MAX_VALUE  -> return 0\\n           return 0;\\n        }\\n\\n //If Original Number is negative - then convert reverse also number to negative.          \\n   \\n       if(num<0)\\n             rev=rev*(-1);         \\n        \\n        return (int)rev; \\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 2387483,
                "title": "solution-without-converting-into-string",
                "content": "```\\nvar reverse = function(x) {\\n    let val = Math.abs(x)\\n    let res = 0\\n    while(val !=0){\\n         res = (res*10) + val %10\\n         val = Math.floor(val/10)\\n    }\\n    if(x < 0)res = 0 - res\\n    return (res > ((2**31)-1) || res < (-2)**31) ? 0 : res \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n    let val = Math.abs(x)\\n    let res = 0\\n    while(val !=0){\\n         res = (res*10) + val %10\\n         val = Math.floor(val/10)\\n    }\\n    if(x < 0)res = 0 - res\\n    return (res > ((2**31)-1) || res < (-2)**31) ? 0 : res \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1417747,
                "title": "python-without-string",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        INT_MAX = 2**31\\n        INT_MIN = -2**31 -1\\n        ans = 0\\n        xabs = abs(x)\\n        \\n        while xabs > 0:\\n            ans *= 10\\n            ans += xabs % 10\\n            xabs = int(xabs/10)      \\n        \\n        ans = ans if x > 0 else -ans\\n        \\n        return ans if INT_MIN <= ans <= INT_MAX else 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        INT_MAX = 2**31\\n        INT_MIN = -2**31 -1\\n        ans = 0\\n        xabs = abs(x)\\n        \\n        while xabs > 0:\\n            ans *= 10\\n            ans += xabs % 10\\n            xabs = int(xabs/10)      \\n        \\n        ans = ans if x > 0 else -ans\\n        \\n        return ans if INT_MIN <= ans <= INT_MAX else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1064206,
                "title": "simple-java-beats-100",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x<10 && x>-10) {\\n            return x;\\n        }\\n        long answer = 0;\\n        while(x!=0) {\\n            answer = answer * 10 + x%10;\\n            x /= 10;\\n        }\\n        return answer>=Integer.MIN_VALUE && answer <= Integer.MAX_VALUE ? (int)answer:0;\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x<10 && x>-10) {\\n            return x;\\n        }\\n        long answer = 0;\\n        while(x!=0) {\\n            answer = answer * 10 + x%10;\\n            x /= 10;\\n        }\\n        return answer>=Integer.MIN_VALUE && answer <= Integer.MAX_VALUE ? (int)answer:0;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 401225,
                "title": "swift-5-solution",
                "content": "```swift\\n  func reverse(_ x: Int) -> Int {\\n    if x >= 0 {\\n      return Int(Int32(String(String(x).reversed())) ?? 0)\\n    }\\n    else {\\n      return -Int(Int32(String(String(-x).reversed())) ?? 0)\\n    }\\n  }\\n```",
                "solutionTags": [],
                "code": "```swift\\n  func reverse(_ x: Int) -> Int {\\n    if x >= 0 {\\n      return Int(Int32(String(String(x).reversed())) ?? 0)\\n    }\\n    else {\\n      return -Int(Int32(String(String(-x).reversed())) ?? 0)\\n    }\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 333081,
                "title": "cpp-code",
                "content": "```\\nint reverse(int x) {\\n      int a = INT_MAX;\\n      int b = INT_MIN;\\n\\n      int ans = 0;\\n      while(x != 0){\\n        if(a/10 < ans) return 0;\\n        if(b/10 > ans) return 0;\\n        ans = ans * 10 + x % 10;\\n        x = x / 10;\\n      }\\n      \\n      return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint reverse(int x) {\\n      int a = INT_MAX;\\n      int b = INT_MIN;\\n\\n      int ans = 0;\\n      while(x != 0){\\n        if(a/10 < ans) return 0;\\n        if(b/10 > ans) return 0;\\n        ans = ans * 10 + x % 10;\\n        x = x / 10;\\n      }\\n      \\n      return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4220,
                "title": "simple-python-solution-56ms",
                "content": "In Python, integer has no true fixed maximum, only limited by available memory.\\n\\n    def reverse(self, x):\\n        s = str(x)\\n        res = int('-' + s[1:][::-1]) if s[0] == '-' else int(s[::-1])\\n        return res if -2147483648 <= res <= 2147483647 else 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "In Python, integer has no true fixed maximum, only limited by available memory.\\n\\n    def reverse(self, x):\\n        s = str(x)\\n        res = int('-' + s[1:][::-1]) if s[0] == '-' else int(s[::-1])\\n        return res if -2147483648 <= res <= 2147483647 else 0",
                "codeTag": "Python3"
            },
            {
                "id": 4494,
                "title": "also-8ms-c-solution-with-comments",
                "content": "    class Solution {\\n     public:\\n        int reverse(int x) {\\n            long result = 0;           // Final result\\n            long op = x < 0 ? -1 : 1;  // Get the operator\\n    \\n            long tmp = abs((long)x);  // Avoid too many type conversions and work with positive number\\n            while (tmp) {             // When tmp is zero, stops\\n                result += tmp % 10;   // Get the last number\\n                result *= 10;\\n                tmp /= 10;\\n            }\\n            result /= 10;  // Remove the last zero\\n    \\n            return result > (long)INT_MAX ? 0 : result * op;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n     public:\\n        int reverse(int x) {\\n            long result = 0;           // Final result\\n            long op = x < 0 ? -1 : 1;  // Get the operator\\n    \\n            long tmp = abs((long)x);  // Avoid too many type conversions and work with positive number\\n            while (tmp) {             // When tmp is zero, stops\\n                result += tmp % 10;   // Get the last number\\n                result *= 10;\\n                tmp /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4338,
                "title": "4-ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        int reverse(int x) {\\n            long num = abs((long)x);\\n            long new_num = 0;\\n            while(num) {\\n                new_num = new_num*10 + num%10;\\n                num /= 10;\\n            }\\n            \\n            if (new_num > INT_MAX) {\\n                return 0;\\n            }\\n            return (x<0 ? -1*new_num : new_num);\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int reverse(int x) {\\n            long num = abs((long)x);\\n            long new_num = 0;\\n            while(num) {\\n                new_num = new_num*10 + num%10;\\n                num /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4613,
                "title": "why-compared-with-214748364-in-the-solution",
                "content": "In the solution, the ret value is compared with 214748364, why?\\n\\nThe Integer.MAX_VALUE  should be  2147483647 , isn't it? \\n\\nThe solution code is as below:  \\n\\n    public int reverse(int x) {\\n       int ret = 0;\\n       while (x != 0) {\\n          // handle overflow/underflow\\n          if (Math.abs(ret) > 214748364) {\\n             return 0;\\n          }\\n          ret = ret * 10 + x % 10;\\n          x /= 10;\\n       }\\n       return ret;\\n    }",
                "solutionTags": [],
                "code": "In the solution, the ret value is compared with 214748364, why?\\n\\nThe Integer.MAX_VALUE  should be  2147483647 , isn't it? \\n\\nThe solution code is as below:  \\n\\n    public int reverse(int x) {\\n       int ret = 0;\\n       while (x != 0) {\\n          // handle overflow/underflow\\n          if (Math.abs(ret) > 214748364) {\\n             return 0;\\n          }\\n          ret = ret * 10 + x % 10;\\n          x /= 10;\\n       }\\n       return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4616,
                "title": "more-test-cases-needed",
                "content": "I have the following code w/o taking care of the overflow, but it's got AC.\\n\\n    int reverse(int x) {\\n        int sign=x>0?1:-1;\\n        x=x*sign;\\n        int rev=0;\\n        while(x!=0) {\\n            rev=10*rev+x%10;\\n            x/=10;\\n        }\\n        return rev*sign;\\n    }",
                "solutionTags": [],
                "code": "I have the following code w/o taking care of the overflow, but it's got AC.\\n\\n    int reverse(int x) {\\n        int sign=x>0?1:-1;\\n        x=x*sign;\\n        int rev=0;\\n        while(x!=0) {\\n            rev=10*rev+x%10;\\n            x/=10;\\n        }\\n        return rev*sign;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3946651,
                "title": "reverse-integer-in-java-beats-98-91-runtime-solutions",
                "content": "\\n# Approach\\nFirst of all I have chosen the basic formula for reverseing integers,\\nthen as the questing says (after reversing) if the reversed integer is out \\nof range then it should return 0, so for that i have used conditional statement for checking MIN and MAX range .\\nAnd if its in range then it returned reversed integer.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n- Space complexity:\\nO(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long reversedx=0;\\n        int remainder=0;\\n\\n        int temp = x;\\n\\n        while (temp != 0) {\\n            remainder = temp % 10;\\n            reversedx = (reversedx * 10) + remainder;\\n            temp /= 10;\\n        }\\n        if(reversedx > Integer.MAX_VALUE || reversedx < Integer.MIN_VALUE)\\n            return 0;\\n        return (int)reversedx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long reversedx=0;\\n        int remainder=0;\\n\\n        int temp = x;\\n\\n        while (temp != 0) {\\n            remainder = temp % 10;\\n            reversedx = (reversedx * 10) + remainder;\\n            temp /= 10;\\n        }\\n        if(reversedx > Integer.MAX_VALUE || reversedx < Integer.MIN_VALUE)\\n            return 0;\\n        return (int)reversedx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3769355,
                "title": "java-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int ld = x % 10;\\n            ans = ans * 10 + ld;\\n            x /= 10;\\n        }\\n        if(ans<Math.pow(-2,31) || ans>Math.pow(2,31) )\\n            return 0;\\n        else \\n            return (int)ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int ld = x % 10;\\n            ans = ans * 10 + ld;\\n            x /= 10;\\n        }\\n        if(ans<Math.pow(-2,31) || ans>Math.pow(2,31) )\\n            return 0;\\n        else \\n            return (int)ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3538899,
                "title": "best-o-logn-solution",
                "content": "# Approach\\nUsing Math\\n\\n# Complexity\\n- Time complexity:\\n$$O(logn)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            if ((ans > INT_MAX / 10) || (ans < INT_MIN / 10))\\n                return 0;\\n            ans = ans * 10 + digit;\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while (x != 0) {\\n            int digit = x % 10;\\n            if ((ans > INT_MAX / 10) || (ans < INT_MIN / 10))\\n                return 0;\\n            ans = ans * 10 + digit;\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3315471,
                "title": "java-solution-of-reverse-integer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sum=0, r;\\n        \\n        while(x!=0){\\n            r=x%10;\\n            \\n            x=x/10;\\n              if (sum > Integer.MAX_VALUE/10 || (sum == Integer.MAX_VALUE / 10 && r > 7)) \\n                  return 0;\\n            if (sum  < Integer.MIN_VALUE/10 || (sum == Integer.MIN_VALUE / 10 && r < -8)) \\n                return 0;\\n            sum= sum*10+r;\\n        }\\n        \\n    \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sum=0, r;\\n        \\n        while(x!=0){\\n            r=x%10;\\n            \\n            x=x/10;\\n              if (sum > Integer.MAX_VALUE/10 || (sum == Integer.MAX_VALUE / 10 && r > 7)) \\n                  return 0;\\n            if (sum  < Integer.MIN_VALUE/10 || (sum == Integer.MIN_VALUE / 10 && r < -8)) \\n                return 0;\\n            sum= sum*10+r;\\n        }\\n        \\n    \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109185,
                "title": "easily-understandable-solution-beats-99-30",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find reminder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check 32 bit range \\n        return int(r);\\n    }\\n}; \\n```\\nPlease upvote to motivate me to write more solutions\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {                      \\npublic:\\n    int reverse(int x) {\\n        long r=0;      // decleare r \\n        while(x){\\n         r=r*10+x%10; // find reminder and add its to r\\n         x=x/10;     // Update the value of x\\n        }\\n        if(r>INT_MAX || r<INT_MIN) return 0; // check 32 bit range \\n        return int(r);\\n    }\\n}; \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3022114,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005345,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2916425,
                "title": "reverse-integer-100-medium-beginner-friendly",
                "content": "class Solution {\\npublic:\\n\\t\\n    int reverse(int x) \\n    {\\n       int r , s=0;\\n            while(x)\\n            {\\n                r = x%10;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//as int cant handle value higher than its max value to it will check it a step before//\\n                if(s > INT_MAX/10 || s < INT_MIN/10) return 0;\\n                s = s*10 + r;\\n                x /= 10;\\n            }\\n        return s;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\t\\n    int reverse(int x) \\n    {\\n       int r , s=0;\\n            while(x)\\n            {\\n                r = x%10;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t//as int cant handle value higher than its max value to it will check it a step before//\\n                if(s > INT_MAX/10 || s < INT_MIN/10) return 0;\\n                s = s*10 + r;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2803440,
                "title": "python-easy-solution",
                "content": "\\n# Code\\u2705\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x not in range(-9,9):\\n            x = int(str(x)[::-1].lstrip(\\'0\\')) if x >= 0 else int(f\"-{str(x)[:0:-1]}\".lstrip(\\'0\\'))\\n        return x if (x < 2**31-1 and x > -2**31) else 0\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x not in range(-9,9):\\n            x = int(str(x)[::-1].lstrip(\\'0\\')) if x >= 0 else int(f\"-{str(x)[:0:-1]}\".lstrip(\\'0\\'))\\n        return x if (x < 2**31-1 and x > -2**31) else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2743588,
                "title": "2-ms-java-solution",
                "content": "class Solution {\\npublic int reverse(int x) {\\nint rem=0;\\nlong rev=0;\\nwhile(x!=0){\\nrem=x%10;\\nx=x/10;\\nrev=rev*10+rem;\\n\\n}\\n    \\nif (rev > Math.pow(2, 31)-1 || rev < -(Math.pow(2, 31))) {\\n       return 0;\\n    }\\nint check=(int)rev;\\n\\n      return check;\\n    \\n}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\npublic int reverse(int x) {\\nint rem=0;\\nlong rev=0;\\nwhile(x!=0){\\nrem=x%10;\\nx=x/10;\\nrev=rev*10+rem;\\n\\n}",
                "codeTag": "Java"
            },
            {
                "id": 2703631,
                "title": "most-possible-java-solution",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x == Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        else{\\n            int flag = 1;\\n            if (x < 0){\\n                flag = -1;\\n                x = -x;\\n            }\\n            int result = 0;\\n            while(x > 0){\\n                int digit = x % 10;\\n                int newresult = result * 10 + digit; \\n                if (result != (newresult - digit) / 10){\\n                    result = 0;\\n                    break;\\n                }\\n                result = newresult;\\n                x = x / 10;\\n            }\\n            result = result * flag;\\n            return result;\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        if (x == Integer.MIN_VALUE){\\n            return 0;\\n        }\\n        else{\\n            int flag = 1;\\n            if (x < 0){\\n                flag = -1;\\n                x = -x;\\n            }\\n            int result = 0;\\n            while(x > 0){\\n                int digit = x % 10;\\n                int newresult = result * 10 + digit; \\n                if (result != (newresult - digit) / 10){\\n                    result = 0;\\n                    break;\\n                }\\n                result = newresult;\\n                x = x / 10;\\n            }\\n            result = result * flag;\\n            return result;\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2458991,
                "title": "simple-solution-using-32-bit-integer-only",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2128445,
                "title": "short-c-solution-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int output = 0;\\n        while(x != 0){\\n            if(output > INT_MAX/10 || output < INT_MIN/10) //need to check this first (if input would overflow in next line) and if the value calculated will overflow\\n                return 0;\\n            output = output*10 + x%10;\\n            x /= 10;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int output = 0;\\n        while(x != 0){\\n            if(output > INT_MAX/10 || output < INT_MIN/10) //need to check this first (if input would overflow in next line) and if the value calculated will overflow\\n                return 0;\\n            output = output*10 + x%10;\\n            x /= 10;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1998253,
                "title": "100-fastest-solution-explained",
                "content": "Easy to understand and detailed step by step explanation with code(Java, Python, Go).\\n\\nhttps://www.code-recipe.com/post/reverse-integer\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you. Thank You**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Go"
                ],
                "code": "Easy to understand and detailed step by step explanation with code(Java, Python, Go).\\n\\nhttps://www.code-recipe.com/post/reverse-integer\\n\\nLet me know in comments section if you have any doubts. I will be happy to answer.\\n\\n**Kindly upvote if this helps you. Thank You**",
                "codeTag": "Unknown"
            },
            {
                "id": 1801738,
                "title": "java-most-easy-solution",
                "content": "\\n    class Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        for(; x!=0; x/=10){\\n            ans = ans*10 + x%10;\\n        }\\n        return ans>Integer.MAX_VALUE || ans<Integer.MIN_VALUE ?0: (int) ans;\\n      }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        for(; x!=0; x/=10){\\n            ans = ans*10 + x%10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1549555,
                "title": "python-simple-solution",
                "content": "**Python :**\\n\\n```\\ndef reverse(self, x: int) -> int:\\n\\tif int(str(abs(x))[::-1]) >= pow(2, 31):\\n\\t\\treturn 0\\n\\n\\tif x < 0:\\n\\t\\treturn -int(str(-x)[::-1])\\n\\n\\treturn int(str(x)[::-1])\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef reverse(self, x: int) -> int:\\n\\tif int(str(abs(x))[::-1]) >= pow(2, 31):\\n\\t\\treturn 0\\n\\n\\tif x < 0:\\n\\t\\treturn -int(str(-x)[::-1])\\n\\n\\treturn int(str(x)[::-1])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1303074,
                "title": "my-easy-solution-is-here",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev = 0;\\n        bool isMinus = false;\\n        \\n        if(x < 0){\\n            isMinus = true;\\n            x = abs(x);\\n        }\\n        \\n        while(x > 0) {\\n            rev = rev * 10;\\n            rev += x % 10;\\n            x = x / 10;\\n        }\\n        \\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : isMinus ? -rev : rev;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long rev = 0;\\n        bool isMinus = false;\\n        \\n        if(x < 0){\\n            isMinus = true;\\n            x = abs(x);\\n        }\\n        \\n        while(x > 0) {\\n            rev = rev * 10;\\n            rev += x % 10;\\n            x = x / 10;\\n        }\\n        \\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : isMinus ? -rev : rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1086285,
                "title": "idiomatic-rust-solution-via-checked-ops",
                "content": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        Solution::reverse_no_overflow(x).unwrap_or(0)\\n    }\\n\\n    fn reverse_no_overflow(x: i32) -> Option<i32> {\\n        let mut sum: i32 = 0;\\n        let mut rem: i32 = x;\\n        while rem != 0 {\\n            const DEC_BASE: i32 = 10;\\n            let digit = rem % DEC_BASE;\\n            rem = rem / DEC_BASE;\\n            \\n            sum = sum.checked_mul(DEC_BASE)?;\\n            sum = sum.checked_add(digit)?;\\n        }\\n        \\n        Some(sum)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn reverse(x: i32) -> i32 {\\n        Solution::reverse_no_overflow(x).unwrap_or(0)\\n    }\\n\\n    fn reverse_no_overflow(x: i32) -> Option<i32> {\\n        let mut sum: i32 = 0;\\n        let mut rem: i32 = x;\\n        while rem != 0 {\\n            const DEC_BASE: i32 = 10;\\n            let digit = rem % DEC_BASE;\\n            rem = rem / DEC_BASE;\\n            \\n            sum = sum.checked_mul(DEC_BASE)?;\\n            sum = sum.checked_add(digit)?;\\n        }\\n        \\n        Some(sum)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 685587,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long long int rem, ans = 0; \\n        while(x > 0 || x < 0){\\n            rem = x % 10;\\n            ans = (ans * 10) + rem;\\n            x /= 10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN){\\n            return 0;\\n        }\\n        else{\\n            return ans;\\n        }  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long long int rem, ans = 0; \\n        while(x > 0 || x < 0){\\n            rem = x % 10;\\n            ans = (ans * 10) + rem;\\n            x /= 10;\\n        }\\n        if(ans > INT_MAX || ans < INT_MIN){\\n            return 0;\\n        }\\n        else{\\n            return ans;\\n        }  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 680684,
                "title": "c-100-simple-and-short",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long res = 0;\\n        while (x) {\\n            res = (res * 10) + (x % 10);\\n            x /= 10;\\n        }\\n        return (res < INT_MIN || res > INT_MAX) ? 0 : (int) res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long res = 0;\\n        while (x) {\\n            res = (res * 10) + (x % 10);\\n            x /= 10;\\n        }\\n        return (res < INT_MIN || res > INT_MAX) ? 0 : (int) res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 322629,
                "title": "swift-4ms",
                "content": "```\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n      var number = x\\n      var revNumber: Int = 0\\n\\n      while number != 0 {\\n          let pop = number % 10\\n          number = number / 10\\n\\n          if revNumber > Int32.max / 10 || (revNumber == Int32.max / 10 && pop > 7) {\\n              return 0\\n          }\\n\\n          if revNumber < Int32.min / 10 || (revNumber == Int32.min / 10 && pop < -8) {\\n              return 0\\n          }\\n\\n          let temp = revNumber * 10 + pop\\n          revNumber = temp\\n      }\\n\\n      return revNumber\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func reverse(_ x: Int) -> Int {\\n      var number = x\\n      var revNumber: Int = 0\\n\\n      while number != 0 {\\n          let pop = number % 10\\n          number = number / 10\\n\\n          if revNumber > Int32.max / 10 || (revNumber == Int32.max / 10 && pop > 7) {\\n              return 0\\n          }\\n\\n          if revNumber < Int32.min / 10 || (revNumber == Int32.min / 10 && pop < -8) {\\n              return 0\\n          }\\n\\n          let temp = revNumber * 10 + pop\\n          revNumber = temp\\n      }\\n\\n      return revNumber\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 310510,
                "title": "c-solution-no-string-parsing-no-long-variables-no-try-catch",
                "content": "Thought I\\'d share my solution to this problem since all the other C# solutions seemed inadequate.\\nThe program detects the integer overflow right before the last multiplication by 10 of the result variable.\\n\\n\\n```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        int overflowLimit = int.MaxValue / 10;\\n        \\n        var negative = x < 0;\\n\\t\\tif (negative)\\n\\t\\t\\tx = -x;\\n        \\n        int result = 0;\\n        while(x > 0){\\n            if(result > overflowLimit)\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\n            result = 10 * result + x % 10;\\n            \\n            x = x / 10;\\n        };\\n        \\n\\t\\tif(negative)\\n\\t\\t\\tresult = -result;\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int Reverse(int x) {\\n        int overflowLimit = int.MaxValue / 10;\\n        \\n        var negative = x < 0;\\n\\t\\tif (negative)\\n\\t\\t\\tx = -x;\\n        \\n        int result = 0;\\n        while(x > 0){\\n            if(result > overflowLimit)\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t\\n            result = 10 * result + x % 10;\\n            \\n            x = x / 10;\\n        };\\n        \\n\\t\\tif(negative)\\n\\t\\t\\tresult = -result;\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 304394,
                "title": "simple-and-generic-overflow-test-before-operation-without-using-long-0ms-c-100-ile-solution",
                "content": "I was able to get a pretty simple solution and wanted to check the overflow conditions without using long because the problem statement technically says we can only use 32 bit integer (even though it isn\\'t really verified).\\n\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse = 0;\\n        \\n        while(x != 0){\\n            // Check overflow\\n            if(reverse > (INT_MAX/10 - (x%10)/10) || reverse < (INT_MIN/10-(x%10)/10)){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Calculate reversed integer\\n            reverse = reverse*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        return reverse;\\n    }\\n};\\n```\\n\\nIt is essentially derived from the need that we want to check if our next operation, (Ax + B)  > INT_MAX. We can write it as, x > (INT_MAX - B)/A. Since INT_MAX - B can itself overflow in cases where B is negative, its better to write this as, x > INT_MAX/A - B/A to ensure that no overflow happens during execution of this condition.\\n\\nYou can derive this conditions for all similar problems, by appropriately choosing A and B.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int reverse = 0;\\n        \\n        while(x != 0){\\n            // Check overflow\\n            if(reverse > (INT_MAX/10 - (x%10)/10) || reverse < (INT_MIN/10-(x%10)/10)){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t// Calculate reversed integer\\n            reverse = reverse*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        return reverse;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 294600,
                "title": "need-a-fix-for-the-error",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        bool flag = false;\\n        int num = 0;\\n        if(num < 0){\\n            num = num * (-1);\\n            flag = true;\\n        }\\n        while(x != 0){\\n            num = (num * 10) + (x % 10);\\n            x = x / 10;\\n        }\\n        if (flag == true)\\n            return (num * (-1));\\n        return num;\\n        }\\n};\\n\\'\\'\\'\\n\\nLine 11: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\n\\nIs there a fix for the error?",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        bool flag = false;\\n        int num = 0;\\n        if(num < 0){\\n            num = num * (-1);\\n            flag = true;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 154259,
                "title": "c-solution-10-lines",
                "content": "```\\n        if (x / 10 == 0) {return x;}\\n        \\n        int prev;\\n        int curr = 0;\\n        \\n        while (x != 0) {\\n            prev = curr;\\n            curr = curr*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        if (curr/10 != prev) {return 0;}\\n        return curr;\\n```\\nSimple iterative solution. The check for overflow is done by storing the inverted number with n-1 digits (with n being the number of digits in x). If the inverted number divided by 10 is not equal to the inverted number with n-1 digits, then overflow has occurred.",
                "solutionTags": [],
                "code": "```\\n        if (x / 10 == 0) {return x;}\\n        \\n        int prev;\\n        int curr = 0;\\n        \\n        while (x != 0) {\\n            prev = curr;\\n            curr = curr*10 + x%10;\\n            x /= 10;\\n        }\\n        \\n        if (curr/10 != prev) {return 0;}\\n        return curr;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4052,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n\\n    def reverse(self, x):\\n        def signCheck(n):\\n            if n >= 0:\\n                return 1\\n            else:\\n                return -1\\n    \\n        sign = signCheck(x)\\n        x = str(abs(x))\\n        reverse = x[::-1]\\n        num = sign * int(reverse)\\n        \\n        # check overflow\\n        if(abs(num) > (2 ** 31 - 1)):\\n            return 0\\n        else:\\n            return num\\n        ```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n\\n    def reverse(self, x):\\n        def signCheck(n):\\n            if n >= 0:\\n                return 1\\n            else:\\n                return -1\\n    \\n        sign = signCheck(x)\\n        x = str(abs(x))\\n        reverse = x[::-1]\\n        num = sign * int(reverse)\\n        \\n        # check overflow\\n        if(abs(num) > (2 ** 31 - 1)):\\n            return 0\\n        else:\\n            return num\\n        ```",
                "codeTag": "Java"
            },
            {
                "id": 4062,
                "title": "java-solution-that-takes-1-of-your-brain-to-understand-it",
                "content": "There are numerous awesome solutions over here. I like the trick with \"long\" + casting. And the crazy \"reminder\" \"tail\" magic. Maybe I'm missing the point of these exercises. Maybe the point is to provide the fastest and most elegant solution. If so I definitely enjoy and try to understand the one liners I see. However, in my day to day practice I prefer to see a solution that doesn't make me pause and scratch my head. That doesn't make me think - \"Wow, what kind of black magic is going on here.\"  Maybe that is just a reflection of how unsophisticated or average my intellect is.\\n\\nI apologize if similar solution was offered here before. To many of them to look over each one. Nonetheless here is my \"naive\" solution. If that would ever cause problem in QA or Prod only then I would think of optimizing it. My point is it doesn't require much brain power to understand. \\n\\n\\n\\nclass Solution {\\n\\n    public int reverse(int x) {\\n\\n        int reverse = 0;\\n        char[] chars =(\"\" + x).toCharArray();\\n        StringBuilder result = new StringBuilder();\\n\\n        if(chars[0] == '-'){\\n            result.append(chars[0]);\\n        }\\n\\n        for(int i = chars.length-1; i>=0; i--){\\n            if(chars[i] == '-') continue;\\n            result.append(chars[i]);        \\n        }\\n        \\n        try{\\n            reverse = Integer.parseInt(result.toString()); // takes care of leading 0s and overflow.\\n        }catch(Exception e){\\n            // do nothing;\\n        }\\n        \\n        return reverse;\\n    }\\n}\\n<code>",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int reverse(int x) {\\n\\n        int reverse = 0;\\n        char[] chars =(\"\" + x).toCharArray();\\n        StringBuilder result = new StringBuilder();\\n\\n        if(chars[0] == '-'){\\n            result.append(chars[0]);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 4447,
                "title": "7-line-c-simple-solution-explained",
                "content": "Use a long to detect overflow simply check if the long value has passed the allowed range of a 32 bit int. The heart of the problem is in the line `res = (x % 10) + (res * 10)` which builds the reversed value digit by digit. This line of code pulls the least significant digit from `x` and shifts our current accumulated `res` one digit over finally adding the results together. the `x` is then divided by 10 to get rid of the least significant digit since we have already accommodated this digit in our reversed integer. \\n\\n    public int Reverse(int x) {\\n            long res = 0;\\n            while(x != 0){\\n                res = (x % 10) + (res * 10);\\n                if(res > Int32.MaxValue || res < Int32.MinValue) return 0;\\n                x /= 10;\\n            }\\n            return (int)res;\\n    }",
                "solutionTags": [
                    "C#"
                ],
                "code": "Use a long to detect overflow simply check if the long value has passed the allowed range of a 32 bit int. The heart of the problem is in the line `res = (x % 10) + (res * 10)` which builds the reversed value digit by digit. This line of code pulls the least significant digit from `x` and shifts our current accumulated `res` one digit over finally adding the results together. the `x` is then divided by 10 to get rid of the least significant digit since we have already accommodated this digit in our reversed integer. \\n\\n    public int Reverse(int x) {\\n            long res = 0;\\n            while(x != 0){\\n                res = (x % 10) + (res * 10);\\n                if(res > Int32.MaxValue || res < Int32.MinValue) return 0;\\n                x /= 10;\\n            }\\n            return (int)res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4285,
                "title": "python-solution-for-reverse-integer-with-no-overflow-handling",
                "content": "This is my code:\\n\\n    class Solution:\\n    # @param {integer} x\\n    # @return {integer}\\n    def reverse(self, x):\\n        arr = []\\n        f = False\\n        if x < 0:\\n            x *= -1\\n            f = True\\n        while True:\\n            arr.append(x % 10)\\n            x /= 10\\n            if x == 0:\\n                break\\n        result = 0\\n        for i in arr:\\n            result = i + 10 * result\\n        if f:\\n            result *= -1\\n        return result\\n\\nActually python wouldn't overflow, but the test cases consider it.\\nWhen Input is1534236469 and my output is 9646324351,it says wrong.:-(",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n    # @param {integer}",
                "codeTag": "Java"
            },
            {
                "id": 4586,
                "title": "any-solution-for-reverse-interger-please-share-it",
                "content": "That's my code.\\n\\n    public class Solution {\\n        public int reverse(int x) {\\n    \\t\\tint sum = 0;\\n    \\t\\twhile (Math.abs(x) != 0)\\n    \\t\\t{\\n    \\t\\t\\tif(Math.abs(sum) > Integer.MAX_VALUE / 10)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn 0;\\n    \\t\\t\\t}\\n    \\t\\t\\tsum = sum * 10 + x % 10;\\n    \\t\\t\\tx = x / 10;\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\treturn sum;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int reverse(int x) {\\n    \\t\\tint sum = 0;\\n    \\t\\twhile (Math.abs(x) != 0)\\n    \\t\\t{\\n    \\t\\t\\tif(Math.abs(sum) > Integer.MAX_VALUE / 10)\\n    \\t\\t\\t{\\n    \\t\\t\\t\\treturn 0;\\n    \\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4102700,
                "title": "video-step-by-step-visualization-in-python",
                "content": "https://youtu.be/YCxDTkWqcxw\\n\\nStep 1: Extract the digit in the ones place of `x` by using the modulo operator and store it in `digit`\\n\\nStep 2: Add that digit to `reverse` as the rightmost digit\\n\\nStep 3: Remove the ones digit from `x` and continue until `x` equals 0.\\n\\nIn Python, the modulo operator works slightly differently than other languages (such as Java or C) when it comes to negative numbers.  Basically, you will get weird results if you try to do [positive number] mod [negative number].  If you want the modulo to behave the same way with negative numbers as it does with positive numbers, but just have the result be negative, then you need to make sure the divisor is also negative, since the modulo operation will always return a number with the same sign as the divisor.\\n\\nLastly, I use `math.trunc` instead of just using floor division `//` because of negative numbers.  When dividing `x` by 10 and truncating the decimal, if the number is negative, then it would round down <i>away</i> from zero, when really, we want it to round up <i>towards</i> zero.\\n\\n# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        MAX_INT = 2 ** 31 - 1 # 2,147,483,647\\n        MIN_INT = -2 ** 31    #-2,147,483,648\\n        reverse = 0\\n\\n        while x != 0:\\n            if reverse > MAX_INT / 10 or reverse < MIN_INT / 10:\\n                return 0\\n            digit = x % 10 if x > 0 else x % -10\\n            reverse = reverse * 10 + digit\\n            x = math.trunc(x / 10)\\n\\n        return reverse\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        MAX_INT = 2 ** 31 - 1 # 2,147,483,647\\n        MIN_INT = -2 ** 31    #-2,147,483,648\\n        reverse = 0\\n\\n        while x != 0:\\n            if reverse > MAX_INT / 10 or reverse < MIN_INT / 10:\\n                return 0\\n            digit = x % 10 if x > 0 else x % -10\\n            reverse = reverse * 10 + digit\\n            x = math.trunc(x / 10)\\n\\n        return reverse\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770118,
                "title": "python-3-5-lines-confession-and-strings-t-m-95-72",
                "content": "**Scoff\\u2022law** | \\u02C8sk\\xF4fl\\xF4 | *noun, North American informal* -- A person who flouts the rules, especially by failing to comply with a rule that is difficult to enforce effectively.\\n\\nMy first take on this problem was that it should be classified as *easy*. I reversed the digits, checked whether it was indeed less than 2^31-1 in absolute value, and submitted the code, which AC\\'d with time/memory 98%/100%.\\n\\nBut I unknowingly was being a scofflaw. The last line of the problem description is:\\n- **Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nI had broken this rule; by applying`int`to the reversed digits, I potentially created a 64-bit integer, which is not allowed.\\n\\nBelow is my revised code, which I now believe is non-scofflawish. Thanks for allowing me to get that off my chest.\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        mxStr =  \\'2147483647\\'\\n\\n        ansLst = reversed(str(abs(x)))\\n      \\n        ansStr = \\'\\'.join(ansLst).rjust(10,\\'0\\')\\n\\n        if ansStr > mxStr: return 0\\n       \\n        return int(ansStr)*(1 - 2*(x < 0))\\n```\\n[https://leetcode.com/problems/reverse-integer/submissions/995246504/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(*N*), in which *N* ~ `len(str(x))`.\\n\\nHere is my scofflaw code:\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        Neg, mxInt = x < 0, 2147483647\\n        \\n        ansStr = reversed(str(abs(x)))\\n\\n        ansInt = int(\\'\\'.join(ansStr))   #  <-- violates the \"no 64-bit\" rule\\n        if ansInt > mxInt: return 0     #  \\n            \\n        return -ansInt if Neg else ansInt",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        mxStr =  \\'2147483647\\'\\n\\n        ansLst = reversed(str(abs(x)))\\n      \\n        ansStr = \\'\\'.join(ansLst).rjust(10,\\'0\\')\\n\\n        if ansStr > mxStr: return 0\\n       \\n        return int(ansStr)*(1 - 2*(x < 0))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3730376,
                "title": "simple-c-solution-easy-to-understand-must-check",
                "content": "# Intuition\\nWe want to reverse the number , i.e we need to find the ```lastDigit``` of the number first, Now How to find the lastDigit of number ?\\n\\n---> When we perform the Modulus opertion on any number it gives the remainder but when we perform % 10 it gives the ```lastDigit```.\\n\\neg. 123 % 10 = 3 we get the lastDigit.\\n\\nwe want to update the number so divide it by 10\\n\\nhence number become 12\\n\\nSimilary \\n         \\n\\n         12 % 10 = 2\\n         12 / 10 = 1\\n         1 % 10 = 1;\\n         1 / 10 = 0 ----> Stop\\n\\n\\nby simple Mathematics \\n\\n    ans = ans*10 + lastDigit\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n---\\n\\n\\n**Solution:**\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            // find last Digit \\n\\n            int lastDigit = x%10;\\n            \\n            //check for the interger range\\n            if((ans>INT_MAX/10 || ans < INT_MIN/10)){\\n                return 0;\\n            }\\n\\n            // Update ans \\n            ans = 10*ans + lastDigit;\\n\\n            //Update the number (x)\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/*\\n    Analysis:\\n    Time Complexity : O(logn)\\n    Space Complexity : O(1)\\n*/    \\n```\\n\\n---\\n**Complexity:**\\n- Time complexity: $$O(logn)$$\\n<!-- Add your time complexity here, e.g. $$O(logn)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n----\\n\\nIf this Solution helps you then please ```UPVOTE```.\\nTill then **KEEP LEARNING, KEEP GROWING**\\n\\n**Thank You !!**\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```lastDigit```\n```lastDigit```\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            // find last Digit \\n\\n            int lastDigit = x%10;\\n            \\n            //check for the interger range\\n            if((ans>INT_MAX/10 || ans < INT_MIN/10)){\\n                return 0;\\n            }\\n\\n            // Update ans \\n            ans = 10*ans + lastDigit;\\n\\n            //Update the number (x)\\n            x = x / 10;\\n        }\\n        return ans;\\n    }\\n};\\n\\n/*\\n    Analysis:\\n    Time Complexity : O(logn)\\n    Space Complexity : O(1)\\n*/    \\n```\n```UPVOTE```",
                "codeTag": "Java"
            },
            {
                "id": 3354987,
                "title": "reverse-integer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> The problem requires us to reverse the given integer. We can do this by extracting the digits of the integer one by one and constructing the reversed integer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->The approach used in the given code is as follows:\\n\\n1. Initialize the upper and lower limits of the integer to be reversed. We use the constant values Integer.MAX_VALUE and Integer.MIN_VALUE for this purpose.\\n2. Initialize the answer variable to 0.\\n3. While the input integer is not zero:\\na. Check if adding the next digit to the answer variable will result in an overflow (i.e., the answer variable will be greater than the upper limit or less than the lower limit). If so, return 0.\\nb. Add the next digit to the answer variable by multiplying the current answer variable by 10 and adding the next digit.\\nc. Remove the extracted digit from the input integer by dividing it by 10.\\n4. Return the reversed integer.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->The time complexity of the given solution is O(log(x)), where x is the magnitude of the input integer. This is because the number of digits in x is log(x) with base 10.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->The space complexity of the given solution is O(1), as we are using only a constant amount of extra space irrespective of the magnitude of the input integer.\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n       int ans=0;\\n        while(x!=0)\\n        {\\n            if (ans > INT_MAX/10 || (ans == INT_MAX / 10 && x > 7)) return 0;\\n            if (ans < INT_MIN/10 || (ans == INT_MIN / 10 && x < -8)) return 0;   \\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans; \\n    }\\n};\\n```\\n```JAVA []\\nclass Solution {\\n    public int reverse(int x) {\\n        int h=Integer.MAX_VALUE,l=Integer.MIN_VALUE,ans=0;\\n        while(x!=0)\\n        {\\n            if(ans>h/10|| (ans==h/10&&x>7))\\n                return 0;\\n            if(ans<l/10|| (ans==l/10 && x<-8))\\n                return 0;\\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n       int ans=0;\\n        while(x!=0)\\n        {\\n            if (ans > INT_MAX/10 || (ans == INT_MAX / 10 && x > 7)) return 0;\\n            if (ans < INT_MIN/10 || (ans == INT_MIN / 10 && x < -8)) return 0;   \\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans; \\n    }\\n};\\n```\n```JAVA []\\nclass Solution {\\n    public int reverse(int x) {\\n        int h=Integer.MAX_VALUE,l=Integer.MIN_VALUE,ans=0;\\n        while(x!=0)\\n        {\\n            if(ans>h/10|| (ans==h/10&&x>7))\\n                return 0;\\n            if(ans<l/10|| (ans==l/10 && x<-8))\\n                return 0;\\n            ans=ans*10+x%10;\\n            x=x/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3311008,
                "title": "python-solution-that-checks-overflow-underflow-beats-83-32-bit-env",
                "content": "\\n# Complexity\\n- Time complexity: $$O(log_{10}n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        # store the absolute value of x in num\\n        # INTMIN = -2^31 = -2,147,483,648 can\\'t have absolute value\\n        # as INTMAX = 2^31 - 1 = 2,147,483,647\\n        if x <= (-2**31):\\n            return 0 # reversing/storing x not possible\\n        else:\\n            num = abs(x)\\n        # get the sign of x\\n        sign = 0 if x == 0 else x//num\\n        # intialize rev_num to 0\\n        rev_num = 0\\n\\n        # continue the loop until num is 0\\n        while num:\\n            # get the last digit\\n            last_digit = num % 10\\n\\n            # check the overflow condition before multiplying with 10\\n            # INTMAX = 2^31 - 1 = 2,147,483,647\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 7 to exclude\\n            # numbers 2,147,483,648 and 2,147,483,649\\n            if x > 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 7)):\\n                return 0\\n\\n            # check the underflow condition before multiplying with 10\\n            # INTMIN = -2^31 = -2,147,483,648\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 8 to exclude\\n            # number -2,147,483,649\\n            if x < 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 8)):\\n                return 0\\n\\n            # multiply rev_num by 10, add the last digit and reassign to rev_num\\n            rev_num = (rev_num * 10) + last_digit\\n            # divide num by 10\\n            num //= 10\\n\\n        # return the reversed num\\n        return (sign * rev_num)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        # store the absolute value of x in num\\n        # INTMIN = -2^31 = -2,147,483,648 can\\'t have absolute value\\n        # as INTMAX = 2^31 - 1 = 2,147,483,647\\n        if x <= (-2**31):\\n            return 0 # reversing/storing x not possible\\n        else:\\n            num = abs(x)\\n        # get the sign of x\\n        sign = 0 if x == 0 else x//num\\n        # intialize rev_num to 0\\n        rev_num = 0\\n\\n        # continue the loop until num is 0\\n        while num:\\n            # get the last digit\\n            last_digit = num % 10\\n\\n            # check the overflow condition before multiplying with 10\\n            # INTMAX = 2^31 - 1 = 2,147,483,647\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 7 to exclude\\n            # numbers 2,147,483,648 and 2,147,483,649\\n            if x > 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 7)):\\n                return 0\\n\\n            # check the underflow condition before multiplying with 10\\n            # INTMIN = -2^31 = -2,147,483,648\\n            # condition 1 - rev_num > (INTMAX/10)\\n            # condition 2 - rev_num = (INTMAX/10) and last_digit > 8 to exclude\\n            # number -2,147,483,649\\n            if x < 0 and ((rev_num > (2**31//10)) or (rev_num == (2**31) and last_digit > 8)):\\n                return 0\\n\\n            # multiply rev_num by 10, add the last digit and reassign to rev_num\\n            rev_num = (rev_num * 10) + last_digit\\n            # divide num by 10\\n            num //= 10\\n\\n        # return the reversed num\\n        return (sign * rev_num)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3150833,
                "title": "simple-short-java-solution",
                "content": "```\\nclass Solution \\n{\\n    public int reverse(int x) \\n    {\\n        String s=x+\"\";\\n        long ans=0;\\n        int flag=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\'-\\')\\n            {\\n                flag=1;\\n                continue;\\n            }\\n            ans=ans*10+(s.charAt(i)-\\'0\\');\\n        }\\n        if(ans>=Integer.MAX_VALUE)\\n            return 0;\\n        if(flag==1)\\n            ans=ans*-1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int reverse(int x) \\n    {\\n        String s=x+\"\";\\n        long ans=0;\\n        int flag=0;\\n        for(int i=s.length()-1;i>=0;i--)\\n        {\\n            if(s.charAt(i)==\\'-\\')\\n            {\\n                flag=1;\\n                continue;\\n            }\\n            ans=ans*10+(s.charAt(i)-\\'0\\');\\n        }\\n        if(ans>=Integer.MAX_VALUE)\\n            return 0;\\n        if(flag==1)\\n            ans=ans*-1;\\n        return (int)ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3048803,
                "title": "1-ms-100-faster-simple-java",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long store = x;\\n        long ans = 0;\\n        \\n        // if x is +ve just reverse it;\\n        if (x > 0) {     \\n            ans = helper (x, 0);\\n            if (ans > Integer.MAX_VALUE) store =  0;\\n            else store = ans;\\n            \\n        } else {\\n            \\n            // if x is -ne make it +ve by mutliplying with -1;\\n            long positive = x * -1;\\n            ans = helper (positive, 0);\\n            \\n            // if answer goes out of Integer range, set as 0;\\n            if (ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) store = 0;\\n            else store = -(ans);\\n        }\\n        return (int) store;\\n    }\\n    static long helper (long n, long rev) {\\n        \\n        // base case;\\n        if (n == 0) {\\n            return rev;\\n        }\\n        \\n        long rem = n % 10;\\n        return helper (n = n / 10, rev = (rev * 10) + rem);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        long store = x;\\n        long ans = 0;\\n        \\n        // if x is +ve just reverse it;\\n        if (x > 0) {     \\n            ans = helper (x, 0);\\n            if (ans > Integer.MAX_VALUE) store =  0;\\n            else store = ans;\\n            \\n        } else {\\n            \\n            // if x is -ne make it +ve by mutliplying with -1;\\n            long positive = x * -1;\\n            ans = helper (positive, 0);\\n            \\n            // if answer goes out of Integer range, set as 0;\\n            if (ans > Integer.MAX_VALUE || ans < Integer.MIN_VALUE) store = 0;\\n            else store = -(ans);\\n        }\\n        return (int) store;\\n    }\\n    static long helper (long n, long rev) {\\n        \\n        // base case;\\n        if (n == 0) {\\n            return rev;\\n        }\\n        \\n        long rem = n % 10;\\n        return helper (n = n / 10, rev = (rev * 10) + rem);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3005285,
                "title": "0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int n) {\\n        bool neg = n<0;\\n        n=abs(n);\\n        \\n        int ans=0;\\n        int temp;\\n        while(n>0)\\n        {\\n            temp=n%10;\\n            if((double)INT_MAX/ans<=10.0)\\n                return 0;\\n            ans*=10;\\n            ans+=temp;\\n            n/=10;\\n        }\\n        \\n        if(!neg)\\n        return ans;\\n        return ans*-1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2972482,
                "title": "simple-java-beats-100-runtime-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nAfter reading the problem, I find that we need to check two things:\\n1. Whether the number is positive or negative.\\n2. Whether the reversed number is greater than INTEGER range. \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will work on the \"Ones place\" of number i.e. the last digit.\\nSuppose the number is 321, we need to follow the following steps:\\n\\n    1. Make a long integer num initialized with 0. (long num = 0).\\n    2. Store the ones place of \"321\" in variable r. (int r = num%10).\\n    3. Multiply num by 10. (num *= 10).\\n    4. Add the remainder r to num. (num += r).\\n    3. Divide \"321\" by 10. Then it will become \"32\". (x /= 10).\\n    4. Continue the above steps untill x becomes 0.\\nYou will get your answer.\\n    \\n        **If this solution helped you, give it a like to help others.**\\n\\n\\n\\n# Complexity\\n- Time complexity: O(n) (where n is the total no. of digits)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n\\n        boolean flag = true;\\n        if(x < 0) flag = false; // if x is -ve then flag is false;\\n\\n        x = Math.abs(x);\\n\\n        long num = 0;\\n        int r;\\n\\n        while(x > 0)\\n        {\\n            num *= 10;      \\n            r = x % 10;         // r = remainder;\\n            num += r;           // remainder is added;\\n            x /= 10;            // x is divided by 10;\\n        }\\n        if(num > Integer.MAX_VALUE)     // if reversed is greater then 0 is returned;\\n        return 0;\\n\\n        int result = (int)num;\\n\\n        if(!flag)           // if the no. is -ve. Subtract it two times;\\n        {\\n            result -= num;\\n            result -= num;            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n\\n        boolean flag = true;\\n        if(x < 0) flag = false; // if x is -ve then flag is false;\\n\\n        x = Math.abs(x);\\n\\n        long num = 0;\\n        int r;\\n\\n        while(x > 0)\\n        {\\n            num *= 10;      \\n            r = x % 10;         // r = remainder;\\n            num += r;           // remainder is added;\\n            x /= 10;            // x is divided by 10;\\n        }\\n        if(num > Integer.MAX_VALUE)     // if reversed is greater then 0 is returned;\\n        return 0;\\n\\n        int result = (int)num;\\n\\n        if(!flag)           // if the no. is -ve. Subtract it two times;\\n        {\\n            result -= num;\\n            result -= num;            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2935773,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans=0;\\n        while(x)\\n        {\\n            int r=x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10)\\n                return 0;\\n            if(ans==INT_MAX/10 && r>7)\\n                return 0;\\n            ans=ans*10+r;\\n            x/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans=0;\\n        while(x)\\n        {\\n            int r=x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10)\\n                return 0;\\n            if(ans==INT_MAX/10 && r>7)\\n                return 0;\\n            ans=ans*10+r;\\n            x/=10;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2915725,
                "title": "beats-100-codedominar-solution",
                "content": "# approach - 1\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        return (1 if x>0 else -1)*int(str(abs(x))[::-1]) if -2147483648 < int(str(abs(x))[::-1]) < 2147483647 else 0\\n```\\n\\n\\n---\\n# approach - 2\\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = 0\\n        sign = 1 if x >= 0 else -1\\n        x = abs(x)\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            if rev > 2**31 - 1:\\n                return 0\\n            x //= 10\\n        return rev * sign\\n\\n\\n```\\n\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        return (1 if x>0 else -1)*int(str(abs(x))[::-1]) if -2147483648 < int(str(abs(x))[::-1]) < 2147483647 else 0\\n```\n```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        rev = 0\\n        sign = 1 if x >= 0 else -1\\n        x = abs(x)\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            if rev > 2**31 - 1:\\n                return 0\\n            x //= 10\\n        return rev * sign\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2814302,
                "title": "perfect-java-solution-with-explaination",
                "content": "Here the main logic is to check that if the number exceeds the Integer max or min value then we have to return 0.\\nIn order to to that, lets look at the situation we will be in when the number exceeds the min or max value.\\nIt will look something like this :\\n**(res * 10) + rem > Integer.MAX_VALUE**\\nSo now we can\\'t check this condition like this because the left hand side will exceed Integer max and give error, so we will shift the left side operands to right side and check.\\n**res > (Integer.MAX_VALUE - rem)/10**\\nAnd we use Math.abs for negative values of number.\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int res = 0, rem = 0;\\n        while(x != 0) {\\n            rem = x % 10;\\n            x = x/10;\\n            if(Math.abs(res) > (Integer.MAX_VALUE- Math.abs(rem))/10) return 0;\\n            res = (res * 10) + rem;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int res = 0, rem = 0;\\n        while(x != 0) {\\n            rem = x % 10;\\n            x = x/10;\\n            if(Math.abs(res) > (Integer.MAX_VALUE- Math.abs(rem))/10) return 0;\\n            res = (res * 10) + rem;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2809688,
                "title": "0-ms-faster-than-100-c-natural-approach",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int r=0,num;\\n        if(x==INT_MIN) //INT_MAX=2147483647 and INT_MIN = -2147483648 we wil be leaving out -2147483648 when multiplying by -1 in next step\\n            return 0;\\n\\n        if(x<0)//we will find reverse considering it a positive no\\n            num=x*(-1);\\n        else\\n            num=x;\\n        while(num!=0){\\n            if( r>(INT_MAX/10) || r>( (INT_MAX/10)+num%10) ) //if out of 32-bit int range\\n                return 0;\\n            r=r*10 + num%10;\\n            num=num/10;\\n        }\\n        if(x<0)//as we calculated num as positive no\\n            return r*(-1);\\n        return r;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        int r=0,num;\\n        if(x==INT_MIN) //INT_MAX=2147483647 and INT_MIN = -2147483648 we wil be leaving out -2147483648 when multiplying by -1 in next step\\n            return 0;\\n\\n        if(x<0)//we will find reverse considering it a positive no\\n            num=x*(-1);\\n        else\\n            num=x;\\n        while(num!=0){\\n            if( r>(INT_MAX/10) || r>( (INT_MAX/10)+num%10) ) //if out of 32-bit int range\\n                return 0;\\n            r=r*10 + num%10;\\n            num=num/10;\\n        }\\n        if(x<0)//as we calculated num as positive no\\n            return r*(-1);\\n        return r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2769750,
                "title": "simple-java-solution-o-n",
                "content": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int temp; \\n        long reverse = 0; \\n        \\n        while(x!=0){\\n            temp = x % 10; \\n            reverse = reverse * 10 + temp; \\n            x = x/10; \\n        }\\n        if(reverse >= Integer.MIN_VALUE && reverse <= Integer.MAX_VALUE)\\n            return (int)reverse; \\n         else\\n             return 0; \\n    }    \\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int reverse(int x) {\\n        int temp; \\n        long reverse = 0; \\n        \\n        while(x!=0){\\n            temp = x % 10; \\n            reverse = reverse * 10 + temp; \\n            x = x/10; \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2747878,
                "title": "c-simple",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int reverse(int x) \\n    {\\n        long long int x1=abs(x);\\n        long long int ans=0;\\n        while(x1>0)\\n        {\\n            long long int temp=x1%10;\\n            ans=ans*10+temp;\\n            x1/=10;\\n        }\\n        if(ans>-pow(2,31) && ans<pow(2,31)-1){if(x<0){return (-1)*ans;}else{return ans;}}\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int reverse(int x) \\n    {\\n        long long int x1=abs(x);\\n        long long int ans=0;\\n        while(x1>0)\\n        {\\n            long long int temp=x1%10;\\n            ans=ans*10+temp;\\n            x1/=10;\\n        }\\n        if(ans>-pow(2,31) && ans<pow(2,31)-1){if(x<0){return (-1)*ans;}else{return ans;}}\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2669023,
                "title": "python-best-solution",
                "content": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n        if x > 0:\\n            ans = int(str(x)[::-1])\\n        else:\\n            ans = int(str(x * -1)[::-1]) * -1\\n        \\n        mi = 2 ** 31 * (-1)\\n        ma = 2 ** 31 - 1\\n        \\n        if ans > ma or ans < mi:\\n            return 0\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571791,
                "title": "100-faster-solution-c-easy-solution",
                "content": "```\\n int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10){\\n                return 0;\\n            }\\n            ans = (ans*10)+ digit;\\n            x /= 10;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            int digit = x%10;\\n            if(ans>INT_MAX/10 || ans<INT_MIN/10){\\n                return 0;\\n            }\\n            ans = (ans*10)+ digit;\\n            x /= 10;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2565646,
                "title": "easy-and-fast-solution",
                "content": "```\\nint reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint reverse(int x) {\\n        int reverse=0;\\n        while (x) {\\n            if (INT_MAX/10 < reverse || INT_MIN/10 > reverse)\\n                return 0;\\n            reverse = reverse*10 + x % 10;\\n            x /= 10;\\n        }\\n        return reverse;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2283524,
                "title": "c-java-python3-javascript-solutions",
                "content": "Included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - LeetCode Solutions](https://zyrastory.com/en/category/coding-en/leetcode-en/)**",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "Included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - LeetCode Solutions](https://zyrastory.com/en/category/coding-en/leetcode-en/)**",
                "codeTag": "Unknown"
            },
            {
                "id": 2280962,
                "title": "very-easy-100-java-c-javascript-c-fully-explained-line-by-line",
                "content": "# **Java Solution:**\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean isNeg = false;\\n        //First we check if the number is negative\\n        //then we will store this information.\\n        if (x < 0) {\\n            isNeg = true;\\n            x = -x;\\n        }\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x > 0) {\\n            rev = rev * 10 + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        //check if the output is greater than the range...\\n        if (rev > Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n        //return the output with the correct sign (positive or negative)...\\n        return (int) (isNeg ? -rev : rev);\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x != 0) {\\n            rev = 10 * rev + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n    }\\n};\\n```\\n\\n# **Javascript Solution:**\\n```\\nvar reverse = function(x) {\\n    let isNeg = false;\\n    //First we check if the number is negative\\n    //then we will store this information.\\n    if (x < 0) {\\n        isNeg = true;\\n        x = -x;\\n    }\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    let rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x > 0) {\\n        rev = rev * 10 + x % 10;\\n        x = parseInt(x / 10);    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    //check if the output is greater than the range...\\n    if (rev >= Math.pow(2, 31) - 1 || rev <= Math.pow(-2, 31)) {\\n        return 0;\\n    }\\n    //return the output with the correct sign (positive or negative)...\\n    return isNeg ? -rev : rev;\\n};\\n```\\n\\n# **C Language:**\\n```\\nint reverse(int x){\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    long rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x != 0) {\\n        rev = 10 * rev + x % 10;\\n        x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean isNeg = false;\\n        //First we check if the number is negative\\n        //then we will store this information.\\n        if (x < 0) {\\n            isNeg = true;\\n            x = -x;\\n        }\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x > 0) {\\n            rev = rev * 10 + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        //check if the output is greater than the range...\\n        if (rev > Integer.MAX_VALUE) {\\n            return 0;\\n        }\\n        //return the output with the correct sign (positive or negative)...\\n        return (int) (isNeg ? -rev : rev);\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        //store the result in a data type which is bigger than an integer (here we use long)...\\n        long rev = 0;\\n        //the reverse process begins through the loop...\\n        while (x != 0) {\\n            rev = 10 * rev + x % 10;\\n            x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n        }\\n        return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n    }\\n};\\n```\n```\\nvar reverse = function(x) {\\n    let isNeg = false;\\n    //First we check if the number is negative\\n    //then we will store this information.\\n    if (x < 0) {\\n        isNeg = true;\\n        x = -x;\\n    }\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    let rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x > 0) {\\n        rev = rev * 10 + x % 10;\\n        x = parseInt(x / 10);    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    //check if the output is greater than the range...\\n    if (rev >= Math.pow(2, 31) - 1 || rev <= Math.pow(-2, 31)) {\\n        return 0;\\n    }\\n    //return the output with the correct sign (positive or negative)...\\n    return isNeg ? -rev : rev;\\n};\\n```\n```\\nint reverse(int x){\\n    //store the result in a data type which is bigger than an integer (here we use long)...\\n    long rev = 0;\\n    //the reverse process begins through the loop...\\n    while (x != 0) {\\n        rev = 10 * rev + x % 10;\\n        x /= 10;    //Divide the number repeatedly by 10 until the number becomes zero.\\n    }\\n    return (rev > INT_MAX || rev < INT_MIN) ? 0 : rev;  //check integer overflow and return..\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2042355,
                "title": "0-ms-c-solution-using-inbuilt-functions",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string str=to_string(x);\\n        if(str[0]==\\'-\\')\\n            std::reverse(str.begin()+1,str.end());\\n        else\\n            std::reverse(str.begin(),str.end());\\n        if(stol(str)>INT_MAX || stol(str)<INT_MIN) // checks for overflow\\n            return 0;\\n        else\\n            return stoi(str);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string str=to_string(x);\\n        if(str[0]==\\'-\\')\\n            std::reverse(str.begin()+1,str.end());\\n        else\\n            std::reverse(str.begin(),str.end());\\n        if(stol(str)>INT_MAX || stol(str)<INT_MIN) // checks for overflow\\n            return 0;\\n        else\\n            return stoi(str);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1855179,
                "title": "python-fun-type-casting-and-strings-solution",
                "content": "This solution is by no means the best approach, nor is it the shortest. It\\'s just a fun little solution I found that works and is fairly simple given that there is nothing complex going on. We want to intially set our 32-bit integer region\\'s boundaries so we can later use that to check if our answer is \"safe\". What I\\'ve wrote would work for positive integers just fine but if we input, say, \"-321\" our list of numbers (stored as characters) would be [\"1\", \"2\", \"3\", \"-\"] which would cause an error when doing the int(\"321-\") and so I\\'ve created the boolean a to specificy whether the number is negative, then later if True, it\\'ll remove the negative sign. Besides this, we\\'re simply breaking the integer down after making it into a string in an array of characters through which we creating the new string. At this point, our output string is converted back into an integer but always positive, if the original was negative, we multiply by -1, else just return it after a final check to make sure it\\'s in our range.\\n```\\nclass Solution:\\n    MIN_INT = - (2 ** 31)\\n    MAX_INT = 2 ** 31\\n    \\n    def reverse(self, x: int) -> int:\\n        if x == 0 : return 0\\n        a = False\\n        if x < 0:\\n            a = True\\n    \\n        x = str(x)\\n        x = list(x[::-1])\\n        \\n        for char in x:\\n            if char == \\'-\\':\\n                x.remove(char)\\n        \\n        ans = \"\"\\n        \\n        for char in x:\\n            ans += char\\n        \\n        ans = int(ans)  \\n        if a: ans *= -1\\n        \\n        if ans not in range(self.MIN_INT, self.MAX_INT) : return 0\\n        else : return int(ans)\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    MIN_INT = - (2 ** 31)\\n    MAX_INT = 2 ** 31\\n    \\n    def reverse(self, x: int) -> int:\\n        if x == 0 : return 0\\n        a = False\\n        if x < 0:\\n            a = True\\n    \\n        x = str(x)\\n        x = list(x[::-1])\\n        \\n        for char in x:\\n            if char == \\'-\\':\\n                x.remove(char)\\n        \\n        ans = \"\"\\n        \\n        for char in x:\\n            ans += char\\n        \\n        ans = int(ans)  \\n        if a: ans *= -1\\n        \\n        if ans not in range(self.MIN_INT, self.MAX_INT) : return 0\\n        else : return int(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1835942,
                "title": "easy-c-with-comments",
                "content": "int reverse(int x) {\\n        \\n     //convert integer to string \\n        \\n        string str=to_string(x);\\n        \\n    //manage the sign \\n        \\n        int sign=1;\\n        \\n        if(str[0]==\\'-\\')\\n        {\\n            sign=-1;\\n           \\n        }\\n        \\n     //reverse the string \\n        \\n        int n=str.length();\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high)\\n        {\\n            swap(str[low++],str[high--]);\\n        }\\n        \\n        //convert string to integer\\n        //stol ->convert string to long int\\n        \\n        if(stol(str)<INT_MIN || stol(str)>INT_MAX)return 0;//out of the bond condition\\n        \\n        \\n        return sign*stol(str);\\n    }",
                "solutionTags": [],
                "code": "int reverse(int x) {\\n        \\n     //convert integer to string \\n        \\n        string str=to_string(x);\\n        \\n    //manage the sign \\n        \\n        int sign=1;\\n        \\n        if(str[0]==\\'-\\')\\n        {\\n            sign=-1;\\n           \\n        }\\n        \\n     //reverse the string \\n        \\n        int n=str.length();\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high)\\n        {\\n            swap(str[low++],str[high--]);\\n        }\\n        \\n        //convert string to integer\\n        //stol ->convert string to long int\\n        \\n        if(stol(str)<INT_MIN || stol(str)>INT_MAX)return 0;//out of the bond condition\\n        \\n        \\n        return sign*stol(str);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1432176,
                "title": "java-100-efficient-o-n-time-o-1-space",
                "content": "**Idea**\\nJust check if we subtract the last digit from current number and it is not equal to previous number then return 0.\\nOtherwise return prevNum!\\n\\n\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n    \\t\\n    \\tint prevNum=0;\\n        while(x!=0)\\n        {\\n            int currNum=prevNum*10+x%10;\\n            if((currNum-x%10)/10!=prevNum)\\n                return 0;\\n            prevNum=currNum;\\n            x=x/10;\\n        }\\n        return prevNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n    \\t\\n    \\tint prevNum=0;\\n        while(x!=0)\\n        {\\n            int currNum=prevNum*10+x%10;\\n            if((currNum-x%10)/10!=prevNum)\\n                return 0;\\n            prevNum=currNum;\\n            x=x/10;\\n        }\\n        return prevNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1399160,
                "title": "javascript-3-lines-with-explanation",
                "content": "So this one is not so hard with JavaScript.\\nLet\\'s go through my solution step by step:\\n1. Convert type of number to string, so we can use the split() method\\n2. Split the string with the empty string (\\'\\') to get an array of single characters\\n3. Reverse the array of single characters\\n4. Use the join method to create a string again out of the array of single characters\\n5. Delete the - character with the replace function, because while reversing the string it will be at the end (e.g. 321-)\\n6. Use the parseInt function to parse the string to an int; numbers is JS have a greater range than the mentioned signed 32-bit integer range, so we shouild be safe here (see Number.MAX_SAFE_INTEGER) and multiply the number with -1 (make it negative), if the parameter x is smaller than 0\\n7. Check if the reversed number is outside the range, then return 0, otherwise return the reversed number\\n\\n```\\nvar reverse = function(x) {\\n  const reversedAsString = x.toString().split(\\'\\').reverse().join(\\'\\').replace(\\'-\\', \\'\\');\\n  const reversedNumber = x < 0 ? parseInt(reversedAsString) * (-1) : parseInt(reversedAsString);\\n  return (reversedNumber > (2**31 - 1) || reversedNumber < (-(2**31))) ? 0 : reversedNumber;\\n};\\n```\\n\\nHope this helps :)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reverse = function(x) {\\n  const reversedAsString = x.toString().split(\\'\\').reverse().join(\\'\\').replace(\\'-\\', \\'\\');\\n  const reversedNumber = x < 0 ? parseInt(reversedAsString) * (-1) : parseInt(reversedAsString);\\n  return (reversedNumber > (2**31 - 1) || reversedNumber < (-(2**31))) ? 0 : reversedNumber;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1391038,
                "title": "c-clean-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int rev= 0;\\n        while(x!=0)\\n        {\\n            if(rev > INT_MAX/10 || rev< INT_MIN/10)\\n            {\\n                return 0;\\n            }\\n            rev = rev*10 + x%10;\\n            x/=10;\\n        }\\n        return rev;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int rev= 0;\\n        while(x!=0)\\n        {\\n            if(rev > INT_MAX/10 || rev< INT_MIN/10)\\n            {\\n                return 0;\\n            }\\n            rev = rev*10 + x%10;\\n            x/=10;\\n        }\\n        return rev;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1338197,
                "title": "1ms-100-faster-35-8-mb-less-than-94-47-java-solution-without-long",
                "content": "This is a java solution without long, which is prohibited by the instructions: \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\n\\n```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sol = 0; \\n        \\n        while (x != 0) {\\n            sol += x % 10;\\n            int checker = sol;\\n            \\n            x /= 10;\\n            \\n            if (x != 0) {\\n                sol *= 10;\\n                if (sol / 10 != checker) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        \\n        return sol;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int reverse(int x) {\\n        int sol = 0; \\n        \\n        while (x != 0) {\\n            sol += x % 10;\\n            int checker = sol;\\n            \\n            x /= 10;\\n            \\n            if (x != 0) {\\n                sol *= 10;\\n                if (sol / 10 != checker) {\\n                    return 0;\\n                }\\n            }\\n        }\\n        \\n        return sol;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1565456,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566465,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564940,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565934,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566466,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564731,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565424,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566364,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1569557,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565732,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565456,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566465,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564940,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565934,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566466,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564731,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565424,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1566364,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1569557,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1565732,
                "content": [
                    {
                        "username": "zherebetskyy",
                        "content": "Looks like the test-values have invalid test cases for x:\\n 1534236469, 1563847412 and -1563847412\\n Because all these numbers are within the required range [-2^31 ; 2^31 -1]"
                    },
                    {
                        "username": "ParimalMatte26",
                        "content": "same problem for me. I tried every solution but the test cases are weird"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "mahendrareddykuncha",
                        "content": "yes , but there reverse is not in range of -2^31 and 2^31."
                    },
                    {
                        "username": "pk1002ps",
                        "content": "yes, you are right"
                    },
                    {
                        "username": "ganesh_nita",
                        "content": "the thing is after reversing the reversed value is out of the constrains. so we must return 0 in such cases as per the test case. i did so and it got accpeted\\n"
                    },
                    {
                        "username": "aryanb183",
                        "content": "[@vijaymodak](/vijaymodak)  right bro, dont know why this occurs"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "[@Amantvn1234](/Amantvn1234) hey, i used a while loop for reversing the integer and at the end of the loop is if( number gets over the shown range or under) break; return 0; but it still gives me the same error"
                    },
                    {
                        "username": "NishantKende",
                        "content": "https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/ Check this out once"
                    },
                    {
                        "username": "Odisseo76",
                        "content": "[@yogijagtap](/yogijagtap) ...and also check the type of the result because if it\\'s not long enough to accept the reverse number, this will be changed and maybe pass the final check"
                    },
                    {
                        "username": "vijaymodak",
                        "content": "While reversing when it reaches to 964632435 this stage and we try to multiply by 10 Java does some magic and returns 1056389758 which is very much strange expectation is to return 9646324350 and everything fails."
                    },
                    {
                        "username": "Amantvn1234",
                        "content": "[@yogijagtap](/yogijagtap)  In that case we need to return 0 . The case about which you are talking is clearly mentioned in the  question."
                    },
                    {
                        "username": "pozitron",
                        "content": "[@yogijagtap](/yogijagtap) the most irony here is that the commentary You responded onto got 71 upvote..."
                    },
                    {
                        "username": "yogijagtap",
                        "content": "When you try to reverse the above mentioned numbers they go out of the required range. That is when you get the error. Apply the check after reversing the number. That should work."
                    },
                    {
                        "username": "reddisatish07",
                        "content": "yes"
                    },
                    {
                        "username": "Weicheng",
                        "content": "Input:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nI submit my code,but it give a tip like that."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "shravani-art",
                        "content": "[@RishikaSri23](/RishikaSri23)  even i am getting the same output as you  "
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "yes,signed and unsigned int "
                    },
                    {
                        "username": "sravyajunju",
                        "content": "i think your output is exceeding the integer range(about 2*32 something not sure) soas per question we need to return 0 when this is the case.so ur output shouldbe 0 only.Hope u will get it."
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nam checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\nint rem=0;\\nint sum=0;\\nint sum1=0;\\nint x1=0;\\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>=-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 || sum>2147483647) \\n      return 0;\\n      else\\n      return sum; "
                    },
                    {
                        "username": "tohotom",
                        "content": "[@Ajay_Singh9990](/Ajay_Singh9990) \\nWhich is a very common pattern in the solution, but incorrect.\\nYou have to assume, that the architecture can\\'t store 64 bit integers. In this case res will never be outside the range, it will be mapped to some value in the 32bit integer range, and therefore you will never catch the error."
                    },
                    {
                        "username": "leomontugohain",
                        "content": "After reversal the result number must exist within this Range (Min -2147483648 to Max 2147483647).The condition is given in the question. That is revsed Number exceeds the range of 32-bit signed integer and it means the range will be [  -Math.pow(2,31), Math.pow(2,31)-1 ] in Javascript.Its confusing to catch the error we forget to consider this case."
                    },
                    {
                        "username": "NishantKende",
                        "content": "Check this out once: https://leetcode.com/problems/reverse-integer/solutions/3147242/1ms-java-program/"
                    },
                    {
                        "username": "Andreymh",
                        "content": "Similarly. And the answer is 0 in Jupyter Notebook . Used the Try-except construct. Apparently, it doesn't work."
                    },
                    {
                        "username": "Ajay_Singh9990",
                        "content": "if(res<-2147483648 || res>2147483647)\\n            return 0;"
                    },
                    {
                        "username": "code_breaker_geek",
                        "content": "TRY THIS \\n\\n\\nif((ans>INT_MAX/10) || (ans<INT_MIN/10) )\\n            {\\n                return 0;\\n            }"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "[@vivekpansari898](/vivekpansari898) Because an \"integer\" (32-bit) has a maximum \"range\". It is between -2147483648 and 2147483647. Your answer is bigger than the maximum allowed value of a 32-bit integer. I am finding when I fall foul of these questions, it is because I haven\\'t read the question properly. Just saying :)"
                    },
                    {
                        "username": "vivekpansari898",
                        "content": "same here"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "Yixian115",
                        "content": "Number in Python doesn't have limit, either the input or output number won't overflow anyway.\\nBut OJ still requires 0 as outcome of the huge reversed number."
                    },
                    {
                        "username": "harshith06",
                        "content": "[@kesikavenkestesan](/kesikavenkestesan) because we dont specifically declare any variable in python like c++ or java"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "You can use normal integer comparaison using the interval limits 2,147,483,647 and -2,147,483,648"
                    },
                    {
                        "username": "kesikavenkestesan",
                        "content": "how will you say that number in python has no limit?\\n"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "shiyinayuriko",
                        "content": "for the input of '1534236469'\\nJs can easily return '9646324351', not zero."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "looser1234",
                        "content": "2 power 31 = 2147483648, so 9646324351 is  beyond range, thus output = 0;\nhere the range is given"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "bmagana5",
                        "content": "[@AnkushMatyal0](/AnkushMatyal0) you must make sure to check for overflow using a mechanism like try-catch, MAXINT32 global constants, or if you\\'re using Python or JS which support larger ranges, do a comparison."
                    },
                    {
                        "username": "ategale",
                        "content": "The return is over 32 bit range."
                    },
                    {
                        "username": "Imrudra7",
                        "content": "Even java is also giving problems\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "im also stuck here\\n"
                    },
                    {
                        "username": "hh548",
                        "content": "Here is what I got:\\n\\nInput:\\t1534236469\\nOutput:\\t1056389759\\nExpected:\\t0\\n\\nI believe an int is not sufficient and the output is exceeding the limit of an 32-bit integer."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "pallavisri0077",
                        "content": "[@clumsyswapnil](/clumsyswapnil) same, were u able to solve?\\n"
                    },
                    {
                        "username": "sumant2003",
                        "content": "# with first two if conditions not getting error...     \\n         if -2**(31)> res:\\n                    return 0\\n        elif 2**(31)-1<res:\\n                    return 0   \\n        else:\\n            return  res    "
                    },
                    {
                        "username": "AnjaliSharan",
                        "content": "I am getting the same too"
                    },
                    {
                        "username": "anshusoni90",
                        "content": "i am too getting same issue. \\ntrying to resolve since 30 min. "
                    },
                    {
                        "username": "slayer786",
                        "content": "[@clumsyswapnil](/clumsyswapnil) and also its under the range also but dont knwo why"
                    },
                    {
                        "username": "clumsyswapnil",
                        "content": "it\\'s still the same. i used long long int but same result"
                    },
                    {
                        "username": "alexarg",
                        "content": "Does it really makes sense to emulate overflow in JavaScript? There is no int in JS. Number type is a floating point type. If overflow has to be simulated, \"integer\" cell size should be defined as something in the task, e.g. double word."
                    },
                    {
                        "username": "mdm2",
                        "content": "[@sandip1805](/sandip1805) well the question asks to \"assume the environment does not allow you to store 64-bit int\".  either js or python won\\'t be able to simulate that, since they lack integer overflow/underflow detection"
                    },
                    {
                        "username": "sandip1805",
                        "content": "Each language have different set of restriction, problem asked us to stay in range, we can compare output value is within range or not and if not return 0. "
                    },
                    {
                        "username": "zhaozhongyu_",
                        "content": "The problem should tell us that when the num is out of range of int, then we need to return 0"
                    },
                    {
                        "username": "Blake_Han12",
                        "content": "[@sandip1805](/sandip1805) I guess not in 2015 which is when the post was posted lol."
                    },
                    {
                        "username": "sandip1805",
                        "content": "They have provided range for it."
                    },
                    {
                        "username": "Netttt",
                        "content": "1534236469 < 2^31 should return the reverse, but the solution from test case was 0. Please check. Thanks!"
                    },
                    {
                        "username": "baominhbene",
                        "content": "[@pjstallone](/pjstallone) Just a question, why couldn\\'t Python throw an exception instead, but it still prints the number?"
                    },
                    {
                        "username": "pjstallone",
                        "content": "it is > 2^31 - 1 when you try to reverse it hence it should return 0"
                    },
                    {
                        "username": "pheonixarmvel",
                        "content": "Input:\\n1534236469\\nOutput:\\n1056389759\\nexpected:\\n0"
                    },
                    {
                        "username": "anasrabhi0",
                        "content": "use 64 bits inside your code and then turn the answer back in 32 or just convert to string and compare"
                    },
                    {
                        "username": "zyrastory",
                        "content": "Which have included C#, Java, Python3,JavaScript  solutions and their explanation\\n\\n**\\u2B50[https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/](https://zyrastory.com/en/coding-en/leetcode-en/leetcode-7-reverse-integer-solution-and-explanation-en/)\\u2B50**\\n\\n\\nAnd here is my submission detail ,**I had already test all the code in my blog**\\n![image](https://assets.leetcode.com/users/images/a4fa86ec-8c22-44c6-a453-d1355af02699_1654278174.3008726.png)\\n\\nIf you got any problem about the explanation or you need other programming language solution, please leave your comment to let me know.\\n\\nThanks!\\n\\n**See more problems solutions : [Zyrastory - More LeetCode Solutions with Explanation](https://zyrastory.com/en/category/coding-en/leetcode-en/)**"
                    },
                    {
                        "username": "mawhadmd",
                        "content": "wow java is very fast"
                    },
                    {
                        "username": "MalavPatel",
                        "content": "x =1534236469  gives output 1056389759 and expected output 0\\neven 1534236469 < 2^31."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "Thanks, this is really helpful! \\n"
                    }
                ]
            },
            {
                "id": 1564912,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567480,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1565734,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1566299,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567159,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1566584,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567319,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567306,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1567158,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 2003427,
                "content": [
                    {
                        "username": "caidiexunmeng",
                        "content": "Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter)."
                    },
                    {
                        "username": "stephen_wang_99",
                        "content": "1534236469 is less than 2^31, why this output should be 0?"
                    },
                    {
                        "username": "ryuusenshi",
                        "content": "because the reverse of it (9646324351) is greater than 2^31"
                    },
                    {
                        "username": "practice_pankaj",
                        "content": "Expected is 0.\\nBut the input is much smaller than INT_MAX which is 2147483647"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The output, which in those cases is usually about 9 billion, is greater, that is what you are failing to catch"
                    },
                    {
                        "username": "dal_geek",
                        "content": "All my Python 3 solutions for many problems (including this one) have been about 5-6th percentile for memory usage, regardless of speed. I\\'ve tried a couple of other people\\'s solutions on this board and they\\'re also 5-6th percentile.\\n\\nMine usually use a bunch of list comprehensions, slicing, etc, so I\\'m not surprised if they use more memory than usual, but **even the super lightweight solutions are 5-6th percentile for memory usage**.\\n\\nIs this metric accurate? Can someone please provide a solution which gets even 20th percentile?"
                    },
                    {
                        "username": "JeffBrown",
                        "content": "I think there\\'s a lot of randomness in those scores. I just scored 80th-ish percentile in speed and 5th-ish in memory, and then resubmitted the exact same answer and beat 95% of other solutions on memory and less than 50% on speed. My memory usage only fell from 14 MB to 13.7 MB."
                    },
                    {
                        "username": "rachna1508",
                        "content": "I'm getting a failure in one of the test cases for python, with the log:\\n\\nInput:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nIs there something I'm missing here?"
                    },
                    {
                        "username": "akasharjun3123",
                        "content": "if the output value exceeds the range of integer type, Then you must return 0"
                    },
                    {
                        "username": "cblakely",
                        "content": "Array methods don\\'t function properly.  This is the 2nd challenge in a row I\\'ve been unable to complete because perfectly valid JS that runs everywhere else in the world causes errors in this site\\'s editor."
                    },
                    {
                        "username": "jycy",
                        "content": "I think 2**31 -1 == 2147483647 > 1534236469. But the system does not."
                    },
                    {
                        "username": "Vishesh_Shrivastava",
                        "content": "because when you reverse it 9646324351 it exeeds the limit"
                    },
                    {
                        "username": "avin14052",
                        "content": "On Submission the code is failing for number 1534236469 be  value is not in range of integer"
                    },
                    {
                        "username": "borcheltski",
                        "content": "The reverse isn\\u2019t in the range, the reverse is about 9 billion."
                    },
                    {
                        "username": "kevinbrown",
                        "content": "Input:\\n1534236469\\n\\nOutput:\\n9646324351\\n\\nExpected:\\n0\\n\\nLooks to me like my code is doing what it should, but that the expected result is wrong."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0."
                    },
                    {
                        "username": "borcheltski",
                        "content": "Is 9 billion within the 2.1 billion limit?"
                    },
                    {
                        "username": "AlgoEngine",
                        "content": "Visualization using Python\\n\\nhttps://youtu.be/YCxDTkWqcxw"
                    }
                ]
            },
            {
                "id": 1568442,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568197,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568807,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1686033,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1575363,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1568270,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1567792,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1570991,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1869416,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1576738,
                "content": [
                    {
                        "username": "creditchoi",
                        "content": "As below: why is it damn wrong?\\n\\nSubmission Detail\\n1027 / 1032 test cases passed.\\nStatus: Wrong Answer\\nSubmitted: 2 minutes ago\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "Amanagg001",
                        "content": "its exceeding the range\\n"
                    },
                    {
                        "username": "EmmettHou",
                        "content": "![image](https://assets.leetcode.com/users/emmetthou/image_1567137030.png)\\n"
                    },
                    {
                        "username": "PeihaiZhao",
                        "content": "I submit my **python** code, now i get this:\\n\\n**1027 / 1032** test cases passed.\\n**Status**: Wrong Answer\\n**Input**: 1534236469\\n**Output**: 9646324351\\n**Expected**: 0\\n\\nCan anyone tells me why the expected answer is 0?"
                    },
                    {
                        "username": "Masoomshree",
                        "content": "Because your output lies outside the maximum integer value"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "write this 3 exception conditions for successful submission\\nif (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "canard0328",
                        "content": "I don\\'t think we should use % because the return value depends on the programing language.\\nFor C, -123 % 10 = -3 while -123 % 10 = 7 for python."
                    },
                    {
                        "username": "anandnld",
                        "content": "Getting number formay expcetion just even with single statement return 1; \\nIs there issue in backend testcass.?? Not able to submit the solution."
                    },
                    {
                        "username": "WTCCTW",
                        "content": "I think signature of go's version for Reverse Integer should use int32 instead of int."
                    },
                    {
                        "username": "bigtailbear",
                        "content": "When I ran my code, I got the following error message. \\nInput:\\t1563847412\\nOutput:\\t-2147483645\\nExpected:\\t0\\n\\nThe 32-bit integer's range is from -2,147,483,648 to 2,147,483,647. =( \\nIt is not overflow.."
                    },
                    {
                        "username": "im-naime",
                        "content": "It should be marked as an easy problem. It\\'s a pretty simple one, in my opinion. No need to brainstrom, DS or algo!"
                    },
                    {
                        "username": "kumarpravesh412",
                        "content": "1534236469 this test case is shaking my mind please help!!!!!"
                    }
                ]
            },
            {
                "id": 1570337,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1570191,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1574368,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1573450,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1569430,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1569297,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568805,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568806,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568809,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 1568097,
                "content": [
                    {
                        "username": "gmaster45",
                        "content": "Hello, I\\'d like to know why in the solution, pop must be > 7 ? Where does it come from ?\\n\\nThanks"
                    },
                    {
                        "username": "lhllyra",
                        "content": "Anyone ever try and solve this one using recursion? I\\'ve been trying to implement it but the struggle is real."
                    },
                    {
                        "username": "yeeumm",
                        "content": "![image](https://assets.leetcode.com/users/images/b79f66c1-2682-4975-aa64-d1ce7d5256e9_1600022068.7140918.png)\\n\\nCan anyone please kindly explain why is this expected answer 0 for this input 1534236469 ?"
                    },
                    {
                        "username": "mddrill",
                        "content": "Most of the solutions here handle the overflow case by storing the value in a long and checking if that long is over Integer.MAX_VALUE, but the problem clearly says we must assume the environment can only store 32 bit ints. If we could store longs we wouldn\\'t have to worrry about 32 bit int overflow in the first place."
                    },
                    {
                        "username": "abbyokleung",
                        "content": "![image](https://assets.leetcode.com/users/abbyokleung/image_1551193960.png)\\nHi all,\\nI\\'m confused why the expected answer is 0 insted of the actual reverse of the input integer? \\nthank you!"
                    },
                    {
                        "username": "gary16",
                        "content": "Is it really necessary to have a test case of 1534236469???"
                    },
                    {
                        "username": "exercion",
                        "content": "Seems to be an error with the checker\\n![0_1503159819006_Screenshot 2017-08-19 12.23.02.png](/assets/uploads/files/1503159820061-screenshot-2017-08-19-12.23.02-resized.png)"
                    },
                    {
                        "username": "rnachia",
                        "content": "How the expected answer is 0 for this input 1534236469?"
                    },
                    {
                        "username": "alex6",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\nwhy?"
                    },
                    {
                        "username": "gofastORgoslow",
                        "content": "Hi,\\n\\nFor input 1534236469, why the expected value is 0?"
                    }
                ]
            },
            {
                "id": 2041312,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 2009771,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 2007901,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1963925,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1962215,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1956737,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1895125,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1870649,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1867233,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1576798,
                "content": [
                    {
                        "username": "Harish_K_22",
                        "content": "People often get stuck on this test case when x = 1534236469. At first, it seems fine because x is within the range of [-2^31, 2^31 - 1]. However, when you try to reverse the digits of x, things get tricky because the reversed number might go out of that range."
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "I got this on case 12 with the input of 1534236469:\\nLine 20: Char 17: runtime error: 9.64632e+09 is outside the range of representable values of type \\'int\\' (solution.cpp)\\nbut in C++, the range of int is 2^31 - 1, no?"
                    },
                    {
                        "username": "Kanyo0514",
                        "content": "[@borcheltski](/borcheltski) oh, yes you\\'re right! i\\'ll think about this agian. thanks"
                    },
                    {
                        "username": "borcheltski",
                        "content": "2^31 is 2.1e9, so it is not an error as it is OoB"
                    },
                    {
                        "username": "Hafsa20",
                        "content": "Most of us may get this error for\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\nBecause we don\\'t check for output when the output is the renge is not [2**31-1 to -2**31]. "
                    },
                    {
                        "username": "Sornodeep",
                        "content": "tip: INT_MAX and INT_MIN returns maximum and minimum integer value."
                    },
                    {
                        "username": "ruturajpanditrao777",
                        "content": "If you wait for your reversed number to reach INT_MAX or INT_MIN, it will give integer overflow.\nHow about checking whether \nreversed_num > INT_MAX/10 or reversed_num < INT_MIN \nin the loop? Think it this way :)"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "simple but efficient solution in js\\n\\nvar reverse = function(x) {\\n    let number = Math.abs(x)\\n    let reverse = 0\\n    let sign = x==0 ? 0: x/number\\n\\n    while (number >0){\\n        const digit = number %10\\n        reverse = reverse * 10 + digit\\n        number = Math.floor(number/10)\\n    }\\n\\n    return reverse > (-2)**31 && reverse < 2**31 - 1 ? reverse *sign : 0\\n  };"
                    },
                    {
                        "username": "JacobCrofts",
                        "content": "Most of the other Ruby solutions I checked, especially the \"optimal\" ones, violate this rule:\\n\\n**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\\n\\nThis means that finding a numeric solution and then checking whether it\\'s within the 32-bit integer range is against the spirit of the problem. Even calculating `2**31` at runtime is technically forbidden."
                    },
                    {
                        "username": "user0362fD",
                        "content": "All the test case is Correct, we all are thinking that the Integer should be in range of (-2^31 <= x <= 2^31 - 1) but what if I told you maybe the reverse of the Number is higher than that?\\nE.G.\\nTest Case 1534236469, \\nReverse:- 9646324351 > 2^31 - 1, Result:- 0;\\nTest Case1563847412,\\nReverse:- 2147483651 > 2^31 - 1, Result:- 0;\\nand\\nTest Case -1563847412,\\nReverse:- -2147483651 < -2^31, Result:- 0;\\n\\nThanks me Later."
                    },
                    {
                        "username": "praveensinghji",
                        "content": "x =\\n1534236469\\nExpected =\\n0\\nthis is wrong testCase because x is lies between -2^31 <= x <= 2^31 - 1"
                    },
                    {
                        "username": "callback_suman",
                        "content": "Fastest Solution and easy-to-understand and detailed video explanation with JavaScript, Java, Python, and C++.\\nIf you have any doubts, let me know in the comments section\\nhttps://coderfact.com/data-structures/reverse-integer-leetcode-7-fastest-solution/\\nIf it helps you please upvote."
                    }
                ]
            },
            {
                "id": 1576528,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1575531,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573876,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573566,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573487,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573412,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573365,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573210,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573197,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1573116,
                "content": [
                    {
                        "username": "ahtisham225ali",
                        "content": "The Simple Solution to the Problem in python is here https://hecodesit.com/python-reverse-integer-leetcode-solutions/"
                    },
                    {
                        "username": "geetcode",
                        "content": "This is a tricky question as we need to keep track of the number if it is getting exceeded to the given range or not. once to get the concept it is very easy to code.\\n\\nTime Complexity: O(d)\\xA0 // where d is the digits in the number\\n\\nSpace Complexity: O(1) //We are just taking extra variables to store the result which are independent of input.\\n\\nDetailed Explanation with Video:\\nyoutu[dot]be/tbsKp9-fuD4\\n(Replace [dot] with .)"
                    },
                    {
                        "username": "siledUp",
                        "content": "So basically 9646324351 cannot be an integer, which the expected type argument for the solution"
                    },
                    {
                        "username": "bordoisila",
                        "content": "A lot of folks are ignoring the fact below : \\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\\n\\nUsing long isn\\'t allowed !\\nRead this : [Precondition Testing for overflow ](Read this : https://wiki.sei.cmu.edu/confluence/display/java/NUM00-J.+Detect+or+prevent+integer+overflow)"
                    },
                    {
                        "username": "btamilmani",
                        "content": "I don\\'t know how the hell this is marked as \"easy\" problem"
                    },
                    {
                        "username": "saad_ahmed",
                        "content": "rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) \\nwhere did pop > 7 come from I don\\'t understand this and someone explain?"
                    },
                    {
                        "username": "Ezequias",
                        "content": "Can someone explain me why the expected result of this reverse integer is 0 please?\\n\\n![image](https://assets.leetcode.com/users/ezequias/image_1579649288.png)\\n"
                    },
                    {
                        "username": "user2180q",
                        "content": "Not able to understand why it says in the solution that the Time Complexity is logarithmic\\n![image](https://assets.leetcode.com/users/user2180q/image_1574623750.png)\\n\\nDont we still have to go through all the digits in the number ?\\n"
                    },
                    {
                        "username": "sk0071",
                        "content": "I miss the test case with input 1534236469\\nMy program outputs 9646324351, but apparently the\\nexpected output is 0? How can that be right?\\nAm I reading it wrong? It says \"Expected: 0\"."
                    },
                    {
                        "username": "jaguilar26",
                        "content": "Does anyone know why should expected result is 0 if i reverse 1534236469 ?\\n"
                    }
                ]
            },
            {
                "id": 1572949,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572813,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572564,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572388,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572378,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572168,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572161,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1572109,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570986,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570988,
                "content": [
                    {
                        "username": "patilharsh555",
                        "content": "I feel this is very simple problem and I can expect this problem to be asked in an Interview.\\n\\nWhy are there so many dislikes?\\nIf you have disliked this problem, would you please share your thoughts?"
                    },
                    {
                        "username": "LiamDoult",
                        "content": "The output reversing this large number from the validation system seems incorrect?\\n\\nYour input: 7463847412\\nOutput: 2147483647\\nExpected: -817806211\\n\\nFIrstly, we have a positive being reversed to a negative and secondly, it is out of the range of -2^31.\\n\\nAny idea what has happened here?"
                    },
                    {
                        "username": "bjfuxueyanjie",
                        "content": "![image](https://assets.leetcode.com/users/bjfuxueyanjie/image_1553906577.png)\\n"
                    },
                    {
                        "username": "hopeNoPip",
                        "content": "1534236469\\n\\nThe question wants us to set a range between (2^31 to -2^31-).\\n2^31 is 2147483648.\\nHowever, for the test case \"1534236469 (less than 2^31)\", it expect an output of 0?\\n\\nPlease explain\\n"
                    },
                    {
                        "username": "lingjiajia",
                        "content": "![image](https://assets.leetcode.com/users/lingjiajia/image_1547192706.png)\\n"
                    },
                    {
                        "username": "btanmay",
                        "content": "How can this be the wrong answer?\\n\\n![image](https://assets.leetcode.com/users/btanmay/image_1537977559.png)\\n"
                    },
                    {
                        "username": "ca13",
                        "content": "Is the below testcase incorrect?\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0"
                    },
                    {
                        "username": "hoardin",
                        "content": "-8463847412 should not return 0 since it returns the minimum int which is -2^31\\n7463847412 should not return 0 since it returns the maximum int which is 2^31 -1\\n\\nright?\\n\\n"
                    },
                    {
                        "username": "Nan0416",
                        "content": "1. convert to string Integer.toString(x);\\n2. create StringBuilder and call .reverse().toString()\\n3. convert back to int and capture the possible NumberFormatException.\\n\\nThis worked. But I am wondering that are we allowed to use helper class e.g. StringBuilder."
                    },
                    {
                        "username": "ramanadmin",
                        "content": "![alt text](![0_1475364029841_upload-056d2f22-3ce7-423f-b069-d8f4265a57b3](/uploads/files/1475364032426-upload-056d2f22-3ce7-423f-b069-d8f4265a57b3.png) image url)"
                    }
                ]
            },
            {
                "id": 1570989,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570990,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1568808,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1568135,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1575198,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1572253,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1571969,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570985,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 1570987,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 2065543,
                "content": [
                    {
                        "username": "dorazhao",
                        "content": "I am  a little confused about the c++ reference website, it said\\n\\n> INT_MIN\\tMinimum value for an object of type int\\t-32767 (-2^15+1) or less*\\n\\n> INT_MAX\\tMaximum value for an object of type int\\t32767 (2^15-1) or greater*\\n\\n> UINT_MAX\\tMaximum value for an object of type unsigned int\\t65535 (2^16-1) or greater*\\n\\n> LONG_MIN\\tMinimum value for an object of type long int\\t-2147483647 (-2^31+1) or less*\\n\\n>LONG_MAX\\tMaximum value for an object of type long int\\t2147483647 (2^31-1) or greater* \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nHowever, it seems INT_MAX means 2^31-1 in \"leetcode\". Anyone can tell me why? \\n\\nThanks!!"
                    },
                    {
                        "username": "hu.cao1",
                        "content": "    Input:\\t1534236469\\n    Output:\\t9646324351\\n    Expected:\\t0\\n\\n\\nThis is for int 32.\\n\\nHowever, python's size limit is much bigger\\n\\nsys.maxint\\n9223372036854775807\\n\\nnote that  if you're using a 32-bit Python runtime, sys.maxint will return 2^31 - 1, However, Python will jump to 64-bit seamlessly with the long datatype."
                    },
                    {
                        "username": "abrarjahin",
                        "content": "Please check this testing condition, as far as I understand, testing case is wrong for the following input-\\n\\n![enter image description here][1]\\n\\n\\n  [1]: http://joxi.ru/MAjoEJYIv1lBDr.png"
                    },
                    {
                        "username": "ysii",
                        "content": "Line 37: Char 50: runtime error: signed integer overflow: 1000000000 * 9 cannot be represented in type \\'int\\' (solution.cpp) \\n\\nhow should I fix this?"
                    },
                    {
                        "username": "jishnusai",
                        "content": "x=input()\\nprint(x[::-1])"
                    },
                    {
                        "username": "arkham",
                        "content": "The problem says \"Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [\\u2212231,  231 \\u2212 1]\" but the discussed solutions I find all tell you things like \"store your result as a long and then check if it exceeds the max int\".  \\n\\nWe\\'re supposed to be operating in a system that doesn\\'t have longs, though, only 32-bit signed ints.  How can we detect overflow using only ints?"
                    },
                    {
                        "username": "nagarsuresh",
                        "content": "![image](https://s3-lc-upload.s3.amazonaws.com/users/nagarsuresh/image_1528011750.png)\\n"
                    },
                    {
                        "username": "kaashmonee",
                        "content": "The bit value for 1534236469 is 31, but the expected output for this input is 0? If anyone has a reason for why this might be, that'd be great."
                    },
                    {
                        "username": "borcheltski",
                        "content": "When you reverse it, it is over 9 billion, which is outside 2^31. That is what you need to detect."
                    },
                    {
                        "username": "Denace",
                        "content": "Hi,\\nI'm new to leetcode so I apologize in advance if my question is very elementary.\\nI answered my question by writing python code in my IDE. When I copy and paste it on leetcode, it gives me a compile error. I'm using Python 3. I think leetcode is using Python2. How can change my leetcode version to be python3?\\npythonVersion"
                    },
                    {
                        "username": "Uday1729",
                        "content": "Easy way to solve :\\n\\nhttps://leetcode.com/discuss/topic/4047700/simple-comparision-method-1-ms-runtime/"
                    }
                ]
            },
            {
                "id": 2061131,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2055107,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2053511,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2050593,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2049949,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2047916,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2046426,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2045962,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2044537,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2042631,
                "content": [
                    {
                        "username": "dinesh_chapiri",
                        "content": "for input 9646324351 its not returning desired output\\nits too long what should i do"
                    },
                    {
                        "username": "borcheltski",
                        "content": "From the instructions: If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0."
                    },
                    {
                        "username": "ramandeep2077",
                        "content": "My Code is not working. I am using below code:\n\n \n\nclass Solution {\n\n    public int reverse(int x) {\n        \n        int digits= (int) (Math.log10(x)) +1;\n        \n        if(x<0){\n            int num= Math.abs(x);\n            int dig= (int) (Math.log10(num)) +1;\n            int ans= (int)helper(num, dig);\n            return ans*-1;\n        }\n        return (int)helper(x, digits);\n    }\n\n    public long helper(long n, long digits){\n        if(n%10==n){\n            return n;\n        }\n        long rem=n%10;\n        return rem * (long)(Math.pow(10, digits-1)) +helper(n/10, digits-1);\n  \n   \n    }\n\n   }\n\nInput x =1534236469\n\nOutput = 1056389759\n\nExpected = 0\n\nPlease help me on this?"
                    },
                    {
                        "username": "Saurav_Singh_Rautela",
                        "content": "Simple Mathematic $O(log(N))$ Approach, Beats 99% Runtime, Detailed explanation:\\nhttps://leetcode.com/problems/reverse-integer/solutions/4031638/easy-mathematic-o-log-n-approach-beats-99-runtime-detailed-explanation/"
                    },
                    {
                        "username": "BhargavTibadiya",
                        "content": "Tip for any one for this test case \\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nwe also have to check whether it overflowed or not so please add condition to check overflow"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "what I'm did was, I'm checking number is negative or not if given number is negative then making it positive first.\nthen counting number of digits in number if number of digits are 10 then only there is a chance that after reversing the number it might exceed the limit.\nand\nstoring first digit of number in a variable with a condition\n         if(x<10 && x>0){\n                first = x;\n         }\nand if number of digits in number are equal to 10 then checking if first digit and last digit of our answer matches or not.\nif it matches we found our answer else it is exceeding Integer limit so return 0.\nlet me know if you have understood it.\n\nbut don't take variable as long for reversing that is given in question means which is \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\".\nwe have to solve it by storing the result into int variable only although it'll get submitted."
                    },
                    {
                        "username": "Kovuri_Vaishnavi",
                        "content": "class Solution:\\n    def reverse(self, x: int) -> int:\\n        b = list(str(x))\\n        if b[0] != \\'-\\':\\n            b.reverse()\\n            return int(\\'\\'.join(b))\\n        else:\\n            b.remove(\\'-\\')\\n            b.reverse()\\n            return -int(\\'\\'.join(b))\\n\\nwhy my code is not working at\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "32 bit limit, which is one of the things here \"If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\" and \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" the 32-bit limit is 2.1 billion"
                    },
                    {
                        "username": "udayasri_444",
                        "content": "[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "karanprasad2121",
                        "content": "WEAK TESTCASES:\\nThis solution gets accepted but it shouldn\\'t be as it will give error if the input value is of 10 digits (and reversing this 10 digit is out of range for integer) and it start with 10...... or 20.... for example\\nx = 1012345678 or 1000000007 or 2000000007 or 2004334003 etc. will give runtime error for this solution but it got accepted\\n\\nclass Solution {\\nprivate:\\n    int reverseNum(int num)\\n    {\\n        int rev = 0;\\n        while(num)\\n        {\\n            rev = rev * 10 + num % 10;\\n            num /= 10;\\n        }\\n        return rev;\\n    }\\npublic:\\n    int reverse(int x) {\\n        int tensPow = 1e9;\\n        if(-tensPow <= x && x <= tensPow)\\n            return reverseNum(x);\\n\\n        int intMax = ~(1<<31) / 10;\\n        int num = intMax - reverseNum(abs(x % tensPow));\\n        if(num < 0 || x == (1<<31) || (num == 0 && abs(x / tensPow) > 7))\\n            return 0;\\n        return reverseNum(x);\\n    }\\n};"
                    },
                    {
                        "username": "Rajveer_Chauhan_14",
                        "content": "What is the use of line : \\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n"
                    },
                    {
                        "username": "borcheltski",
                        "content": "just to create a challenge. it is easy to just reverse it and make it a long and check if greater than MAX_INT, but the removal of longs and other 64-bit data types makes it an actual challenge"
                    },
                    {
                        "username": "Rich_Lin",
                        "content": "Looks like I\\'m not the only one having\\n\\nInput:\\n1534236469\\nOutput:\\n9646324351\\nExpected:\\n0\\n\\nproblem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "There is no issue, 9.6 billion is greater than 2.1 billion, leading to an int overflow. So, return 0 if it is overflow. REMEMBER: You cannot use a 64-bit datatype like long."
                    },
                    {
                        "username": "ekinsipahi",
                        "content": "it was such a dumb question to solve in js that i needed to manually input the values the question wanted"
                    }
                ]
            },
            {
                "id": 2042607,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2039263,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2037810,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2033106,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2031324,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2022840,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2020389,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2016306,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2009440,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2006980,
                "content": [
                    {
                        "username": "itex",
                        "content": "For negative input convert the negative int to positive by first squaring the input and then again sqrt the input and make a flag which will change the result to negative or positive, For positive input test case fail make the result var as long and check before returning if the number is smaller than MAX limit"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, cannot make it a long, that breaks the rule \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\" you must do this without longs or any other 64-bit datatype"
                    },
                    {
                        "username": "benlhachemi",
                        "content": "there is a problem in this question\\nthe test cases results are false"
                    },
                    {
                        "username": "borcheltski",
                        "content": "how so, none of them are. the inputs are good, but when reversed they are not. That is what people are too ignorant to check. one of them is like 1.5 billion, but when reversed is over 9 billion, which is over the 2.1 billion int limit"
                    },
                    {
                        "username": "sadeodhar",
                        "content": "this should be in easy."
                    },
                    {
                        "username": "NotAHackusator",
                        "content": "I used SOMETHING (discussion rules) to detect overflow and return 0, which works perfectly on my machine but for some reason doesn\\'t on LeetCode for 8 test cases. The first wrong answer I\\'m getting is:\\n\\nInput:\\n1534236469\\nOutput:\\n1056389759\\nExpected:\\n0\\n\\nAnd yet it returns the expected result, 0, on my machine. I\\'m using Rust with no external crates and on release mode, so it should function identically. Any idea why it doesn\\'t?"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) I got it now this time I solved it without using long or anything \\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative =false;\\n        if(x<0){\\n            if(x==Integer.MIN_VALUE){\\n                return 0;\\n            }\\n            x = -x; // convert every number in positive if it is in negative\\n        \\tnegative = true;\\n        }\\n        int first = 0;\\n        int ans = 0;\\n        int N = (int)Math.log10(x)+1; //checking the number of digits in the integer\\n         while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(x<10 && x>0){  //storing first digit of the number\\n                first = x;\\n            }\\n        }\\n        if(N==10){ //if number of  digits are equal to 10 then there are chances that number might exceed limit\\n            if(ans%10 != first){ // comparing last digit of our answer and first digit if it\\'s not same then limit is exceeded\\n                return 0;\\n            }\\n        }\\n        if(negative){// convert in negative if the number was negative\\n            return -ans;\\n        }\\n        return ans;\\n\\n    }\\n}\\n"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) ohk I\\'ll try another way to do it. Actually I didn\\'t know that meaning of condition is you cannot you long or anything. BTW thanks "
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) There is still an issue with your code, and while it does not stop you, you do break the rules. \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned\" LONG CANNOT BE USED TO BEAT THE CHALLENGE LEGITAMENTLY. That is the issue with your code and probably everyone who did this fast did."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) \\nI also got wrong answer at same testcase in that situation you should just print answer in each iteration and observe where you\\'re doing wrong like I checked my answer by printing it at every step and I found that it was getting changed after it exceeds limit. remember it for future problem to solve any wrong test case.\\nand one more thing I just wanted to tell that you can solve this problem without even using extra space\\nyou can check my first submitted code .\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        long ans = 0;\\n        while(x!=0){\\n            int n = x%10;\\n            x /= 10;\\n            ans = ans*10 + n;\\n            if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n        }\\n        return (int)ans;\\n\\n    }\\n}\\nit beats 99% of java solution and not even using any extra space"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski)\\n just take variable as long in which you\\'re adding number by multiplying it by 10 and compare it after each iteration if it is greater than Integer.MAX_VALUE or not if that condition hits return 0.\\nI solved same problem with method you mentioned you can see my code\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        boolean negative = false;\\n        if(x<0){\\n            negative = true;\\n        }\\n        String s = new String(x+\"\");\\n        ArrayList<Character> list = new ArrayList<>();\\n        if(!negative){\\n            list.add(s.charAt(0));\\n        }\\n        for(int i=1;i<s.length();i++){\\n            list.add(s.charAt(i));\\n        }\\n        long ans = 0; //take it as a long\\n        for(int i=list.size()-1;i>=0;i--){\\n            ans = ans*10+(int)(list.get(i)-\\'0\\');\\n            // System.out.println(ans);\\n            if(ans>Integer.MAX_VALUE){\\n                return 0;\\n            }\\n        }\\n        if(negative){\\n            return -(int)ans;\\n        }\\n\\n        return (int)ans;\\n    }\\n}"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) Boolean value if it is negative, made it a char array, reversed the array, try catch the Integer of the string of the array. return 0 if error, then inline if statement of if it is negative to return the value out or negative of the value out"
                    },
                    {
                        "username": "SahilNikam",
                        "content": "[@borcheltski](/borcheltski) how you are reversing the number?"
                    },
                    {
                        "username": "borcheltski",
                        "content": "[@SahilNikam](/SahilNikam) That technically breaks the rules because that means that you are storing the number in a 64 bit data type. I just tried to cast it and did a try/catch statement."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "after reversing string you\\'re getting value which is greater that maximum Integer value which is 2147483647 so you can just do in every iteration that  if(ans>=Integer.MAX_VALUE || ans<=Integer.MIN_VALUE) return 0;\\n\\ntry it and let mw know if now you\\'re getting right answer."
                    },
                    {
                        "username": "borcheltski",
                        "content": "That isn\\'t even reversed correctly, because it should start with a 9, it isn\\'t bit reversal, but a literal string reversal. and it should return 0 because when reversed, it is over 2.1 billion, thus overflowing the 32 bit limit."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "Problem is very easy IDK why acceptance rate is very low. I was like cross-checking 10 times my solution for edge cases before submitting. solution got accepted in first attempt only.\nam I getting better or problem is really easy?"
                    },
                    {
                        "username": "jayamshah03",
                        "content": "The digits of max and min integer values should be given in the question."
                    },
                    {
                        "username": "AnushaPawar",
                        "content": "how to do for negative number?"
                    },
                    {
                        "username": "meet08",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        long long rev=0,rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10 + rem;\\n            x /=10;\\n        };\\n        if(rev>INT_MAX || rev<INT_MIN){\\n            return 0;\\n        }\\n        return static_cast<int>(rev);\\n    }\\n};"
                    },
                    {
                        "username": "Milan_Kumar_Mishra",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n            int ans = 0;\\n            while(x != 0){\\n                int digit = x / 10;\\n                if (ans > INT_MAX / 10 || (ans < INT_MIN / 10)){\\n                    return 0;\\n                }\\n                ans = (ans * 10) + digit;\\n                x = x / 10;\\n            }\\n            return ans;\\n        }    \\n        \\n};"
                    },
                    {
                        "username": "gopal_sharma_8626",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int n =x;\\n        int rev =0;\\n        while(x!=0){\\n            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10){\\n                return 0;\\n            }\\n        \\n        int remain =x%10;\\n        rev =rev*10+remain;\\n        x=x/10;\\n    }\\n    return rev;\\n}}"
                    }
                ]
            },
            {
                "id": 2003907,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 2003804,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1998328,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1996494,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1990676,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1986514,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1986379,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1974361,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1972646,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1971402,
                "content": [
                    {
                        "username": "Kseven",
                        "content": "umm I used long long to handle the cases and since reversed num  comes within the range of int I used static_cast<int>.. its passing all test cases but is it like recommended to use static_cast here ?\\n"
                    },
                    {
                        "username": "code_ghosh",
                        "content": "x =\\n1534236469\\nthat\\'s is within the range but still it is showing errors ,\\nI think this is a invalid test case...\\nPlease look into this matter....\\nwhat the idiotic test case this is???????\\nMY CODE:-nt reverse(int x){\\n  long long int num,mod,rev=0;\\n  if(x<=-2147483648 || x>2147483647)\\n  {\\n      return 0;\\n  }\\n   \\n    num=x;\\n    if(num<0)\\n    {\\n        num=num+(2*(-num));\\n    while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10-mod;\\n        num=num/10;\\n    }\\n    }\\n    if(num>0)\\n    {\\n        while(num>0)\\n    {\\n        mod=num%10;\\n        rev=rev*10+mod;\\n        num=num/10;\\n    }\\n\\n    }\\n    int p=rev;\\n    //rev=rev-(p*2);\\n\\n \\n    return rev;\\n}\\n "
                    },
                    {
                        "username": "borcheltski",
                        "content": "No, it is not in range, it may be when it is forward, but it is not when it is in reverse, and when it is reversed, it is throwing the error. To check oob using a long would be to break the rules of the challenge."
                    },
                    {
                        "username": "rian1995",
                        "content": "fixed range by following:\nif(x===1534236469 || x=== 2147483647 || x==(-2147483648) || x===1563847412 || x==(-1563847412)||x===1147483648||x===1137464807 || x===1235466808 || x===1221567417){return 0}\n\nI need to Add check at start function and before return;\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}\n.... your cal...\nif(x>MAX_SAFE_INTEGER || x<MIN_SAFE_INTEGER){return 0}"
                    },
                    {
                        "username": "sep_key",
                        "content": "This should be easy while it is marked as medium while some medium ones are marked easy. I am wondering who is behind the wheels!"
                    },
                    {
                        "username": "ankitparashar700",
                        "content": "The question should mention the constraint part in the starting as we ignore checking the constraint before solving the question to match the test cases"
                    },
                    {
                        "username": "DeclanGH",
                        "content": "I was able to pass the test case x = 1534236469 by initializing my result value as a long and then casting it to int after a check.\\n`return (res >= minInt && res <= maxInt) ? (int)res : 0;` min and max int can be hardcoded or supplied by the system using `Integer.MIN_VALUE` or `Integer.MAX_VALUE`. "
                    },
                    {
                        "username": "borcheltski",
                        "content": "You failed the challenge by converting to a long. The entire point of this challenge is that there is no 64-bit data type. "
                    },
                    {
                        "username": "svyatoslavratov",
                        "content": "Invalid test-cases"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "Kapish10",
                        "content": "Some testcases are wron like this one:\\nx =1534236469 ->0"
                    },
                    {
                        "username": "borcheltski",
                        "content": "nope, when the number is reversed it is 9 billion, which if my basic understanding of math is correct, is greater than 2 billion, thus fails the 32 bit limit, so return zero"
                    },
                    {
                        "username": "kheralluahung",
                        "content": "Oh shit this problem"
                    },
                    {
                        "username": "borcheltski",
                        "content": "For all the failed cases, One of them is about 1.5 billion, which is under the 32-bit limit, but when reversed is over 9 billion. These are the cases catching people up. I personally did a try-catch when I converted back to an int, that way when it was over the limit, the catch block returned zero."
                    }
                ]
            },
            {
                "id": 1971364,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1968168,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1965922,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1963789,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1960319,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1949609,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1948106,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1931033,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1930015,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1922606,
                "content": [
                    {
                        "username": "iamsanki1527",
                        "content": "Approach for This Question"
                    },
                    {
                        "username": "imramya",
                        "content": "why can\\'t i assign a variable long\\'s value equal to:-\\n\\n long a = \\u20132147483647;\\n\\nerror :- non-ASCII characters are not allowed outside of literals and identifiers"
                    },
                    {
                        "username": "avdheshojha7",
                        "content": "\\nDelete all the signs you might have used, and if you copy-paste, you can have all these problems. Rewrite with keyboard to avoid these mistakes .....\\nSee below for input and expected output.\\n\\nInput : x = -2147483647\\n\\nExpected output : 0"
                    },
                    {
                        "username": "moshbidon",
                        "content": "Thank you for testcases from 1035 to 1045! Delete this plz. It doesn\\'t work correctly."
                    },
                    {
                        "username": "dpw82",
                        "content": "this part of the code is not taking care of edge case (return 0 for big numbers). Everything else works\\n\\nif(Integer.MAX_VALUE < Math.abs(sum)){\\n          return 0;\\n}"
                    },
                    {
                        "username": "user5882HN",
                        "content": "GUYZ what is wrong with this code for test case -123 it is returning 0:\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum=0;\\n        while(x){\\n            num=x%10;\\n            sum = sum*10 + num;\\n            x/=10;\\n        } \\n        if(sum>=(pow(2,31)-1)/10 || sum<=pow(2,-31)/10){\\n            return 0;\\n        }\\n        \\n        return sum;\\n    }\\n};\\nplis figure out!!"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "[@user5882HN](/user5882HN) Hi, try this instead, I believe it should work\\npublic:\\n    int reverse(int x) {\\n        long num;\\n        long sum = 0;\\n        while (x != 0) {\\n            num = x % 10;\\n            sum = sum * 10 + num;\\n            x /= 10;\\n        }\\n        if (sum >= pow(2, 31) || sum < pow(-2, 31)) {\\n            return 0;\\n        }\\n        return sum;\\n    }\\n};"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "@user5882HN Use this condition: \\nif(sum>=(pow(2,31)-1.0)/10.0 || sum<=-(pow(2,31))/10.0){\\n        return 0;\\n}, well you were not using Pow properly, This is the range [-2^31, 2^31 - 1]."
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@user0933F](/user0933F) still failing ? btw thanx for giving your precious time"
                    },
                    {
                        "username": "user0933F",
                        "content": "Type cast is reason. pow(2,31)-1)/10. Is as int (not long). Change to pow(2,31)-1.0)/10.0"
                    },
                    {
                        "username": "user5882HN",
                        "content": "[@adnanitzer](/adnanitzer)  i changed still no response on the output side for input -123 output becomes still 0"
                    },
                    {
                        "username": "adnanitzer",
                        "content": "You should change final condition to sum<= pow(-2,-31)/10"
                    },
                    {
                        "username": "ramazani_ali",
                        "content": "Why is my code not working?\\n\\nMIN = -2147483648\\n        MAX = 2147483647\\n\\n        res = 0\\n\\n        while x:\\n            digit = int(math.fmod(x, 10))\\n            x = int(x // 10)\\n\\n            res = (res * 10) + digit\\n\\n            if (res > MAX // 10 or (res == MAX // 10 and digit >= MAX % 10)):\\n                return 0\\n            \\n            if (res < MIN // 10 or (res == MIN // 10 and digit <= MIN % 10)):\\n                return 0\\n\\n            \\n\\n        return -res if x < 0 else res"
                    },
                    {
                        "username": "shreya-kumari26",
                        "content": "how to check unsigned and signed int\\n"
                    },
                    {
                        "username": "AstroDeveloper1010",
                        "content": "simply check this condition \n```\nif (reverseNum > Math.pow(2, 31) - 1 || reverseNum < (-1) * Math.pow(2, 31)) {\n           return 0;\n}\n```"
                    },
                    {
                        "username": "chiragsuthar2001",
                        "content": "Runtime Error\\n==21==ERROR: AddressSanitizer failed to allocate 0xdfff0001000 (15392894357504) bytes at address 2008fff7000 (errno: 12)\\n==21==ReserveShadowMemoryRange failed while trying to map 0xdfff0001000 bytes. Perhaps you\\'re using ulimit -v, Getting this error, on just returning the same x;"
                    },
                    {
                        "username": "ganeshchowdhary2409",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x>0:\\n            x=str(x)\\n\\n            z=x[::-1]\\n            l=int(z)\\n\\n            return l\\n\\n        if x<0:\\n            k=-1*x\\n            z=str(k)\\n            rev=z[::-1]\\n            rev=int(rev)\\n            sol=-1 *rev\\n            return sol\\nval=int(input())\\nresult = Solution ()\\nrev_num = result.reverse(val)\\n\\ncan some one please help me with this ......... :) \\nit provides the desired output in vs code but it not passing the test casese here \\n\\n\\n"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "THIS TYPE OF SOLUTIONS ARE GOOD TO SOLVE FOR UNDERSTANDING THE CAPACITY OF INTEGERS NOT SUPRISED NOW AFTER SEEING THIS QUESTION LEVEL"
                    }
                ]
            },
            {
                "id": 1920061,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1919704,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1918444,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1911154,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1905931,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1898120,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1886424,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1884849,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1881591,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1880049,
                "content": [
                    {
                        "username": "nV3nom",
                        "content": "Why interchanging the line \\' x = int(x / 10) \\' with line \\'  res = (res * 10) + digit \\' throws error at -2147483412 in python 3?\\n\\nclass Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        MIN = -2147483648  # -2^31,\\n        MAX = 2147483647  #  2^31 - 1\\n        res = 0\\n        while x:\\n            digit = int(math.fmod(x, 10))  \\n            x = int(x / 10)  \\n\\n            if res > MAX // 10 or (res == MAX // 10 and digit > MAX % 10):\\n                return 0\\n            if res < MIN // 10 or (res == MIN // 10 and digit < MIN % 10):\\n                return 0\\n            res = (res * 10) + digit\\n\\n        return res`\\n\\n\\ni am just  calculating result before updating the given integer x"
                    },
                    {
                        "username": "user2258T",
                        "content": "Wrong test case\\nx = 1534236469\\nthis is in the constraint. It should not return 0. It can be reversed!\\n\\n-2**31 <= (x =1534236469) <= 2**31 - 1"
                    },
                    {
                        "username": "CT-7567",
                        "content": "when you reversed the number you should check the range; not the input"
                    },
                    {
                        "username": "sriram_lc",
                        "content": " `your inline code...your inline code...`class Solution {\\n    static int flag=1;\\n    static int rev = 0;\\n    public static int reverse(int x) {\\n        if (x <0){\\n            flag = 1;\\n            x = - x;\\n            flag = -1;\\n            //System.out.println(x);\\n\\n        }\\n        while ( x != 0) {\\n            int remainder = x%10;\\n            int dummy = rev*10;\\n            if (dummy >= 0){\\n                rev = dummy + remainder ;\\n            }\\n            else {\\n                rev = 0;\\n            }\\n            x = x/10;\\n        }\\n        return rev*flag;\\n        //System.out.println(rev*flag);\\n\\n    }\\n    public static void main (String[] args){\\n\\n        reverse (-123);\\n        System.out.println(rev*flag);\\n    }\\n}\\n\\n\\n\\nthis code is working fine in my IDE but here it is showing error ...I couldnt figure out why? can someone please have a look?"
                    },
                    {
                        "username": "rijalsuyog75",
                        "content": "i passed all 3 test case but when i submit, it says wrong answer:\\ninput = 1534236469\\noutput = 9646324351\\nexpected = 0\\n\\nHow its 0????"
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0"
                    },
                    {
                        "username": "dexter09",
                        "content": "why code 1 is right and code 2 is wrong?\\n\\ncode 1:\\nwhile (x) {\\n    if (res > (INT_MAX / 10) || res < (INT_MIN / 10))\\n        return 0;\\n    res = res * 10 + x % 10;\\n    x /= 10;\\n}\\n\\n\\ncode 2:\\nwhile (x) {\\n    res = res * 10 + x % 10;\\n    if (res > INT_MAX / 10 || res < INT_MIN / 10)\\n        return 0;\\n    x /= 10;\\n}\\n"
                    },
                    {
                        "username": "abhishek-a",
                        "content": "Invalid test case (1036)"
                    },
                    {
                        "username": "user0933F",
                        "content": "i see in fastest solutions code when result can be 64-bit integer. wtf?"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "am checking at last whether the reversed integer is in given range or not but am not getting 0 as result!!!!!!!!\\nip::::1534236469\\n\\nop:::1056389759\\nplease can anyone help me with this one???\\ncode:::\\n int rem=0;\\n        int sum=0;\\n        int sum1=0;\\n        int x1=0; \\n       if(x>0 && x<=2147483647){\\n\\n        while(x>0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        \\n       }\\n       else if(x<0)\\n      {     if(x>-2147483648)\\n           {\\n               x1=-x;\\n           }\\n             while(x1>0)\\n        {\\n            rem=x1%10;\\n            sum1=sum1*10+rem;\\n            x1=x1/10;\\n        }\\n        sum=-sum1;\\n    \\n      }\\n      if(sum<-2147483648 && sum>2147483647) \\n      return 0;\\n      else\\n      return sum; \\n"
                    },
                    {
                        "username": "RishikaSri23",
                        "content": "[@Ganesh](/Oozaro)"
                    },
                    {
                        "username": "galstyanart",
                        "content": "Bogus task. My code works correctly, 1534236469 must return 9646324351. Why it expects 0? no idea..."
                    },
                    {
                        "username": "sriram_lc",
                        "content": "If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0....\"9646324351\" this is greater than 32-bit int\\n"
                    },
                    {
                        "username": "kingo-byte",
                        "content": "Could Anybody tell why the int not reversing it is returning same as input int (c Sharp)\n\n var arrayx = x.ToString().ToCharArray();\n char [] reversex = new char [arrayx.Length];\n\n        string charsStr;\n\n        if(x > 0){\n\n            for(int i = arrayx.Length - 1; i >= 0; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n        else{\n            reversex[0] = '-';\n            for(int i = arrayx.Length - 1; i >= 1; i--)\n            {\n                reversex[i]  =  arrayx[i];\n            }\n\n            charsStr = new string(reversex);\n            return Int32.Parse(charsStr);\n        }\n\n       \n\n\n"
                    }
                ]
            },
            {
                "id": 1879558,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1875856,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1875499,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1872011,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1857628,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1855965,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1855725,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1853694,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1852448,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1852091,
                "content": [
                    {
                        "username": "santhosh27",
                        "content": "use Integer.MIN_VALUE makes the code to three lines"
                    },
                    {
                        "username": "nopeless",
                        "content": "Wait what is the challenge here"
                    },
                    {
                        "username": "Lwrrzzs",
                        "content": "i  found a solution which is  working in vc but leetcode said its not!)\\n"
                    },
                    {
                        "username": "ozgursoftware",
                        "content": "9646324351 is not a integer number. One of test case is wrong. "
                    },
                    {
                        "username": "DEVELOPER_777M",
                        "content": "```\\nclass Solution(object):\\n    def reverse(self, x):\\n        # x = str(x)\\n        # list = []\\n        # num = \"\"\\n        # for i in range(len(x)):\\n        #     if x[i] != \"-\":\\n        #         list.append(x[i])\\n        #     elif x[i] == \"-\":\\n        #         num = \"-\"\\n        # str1 = \"\"\\n        # for i in range(len(list)):\\n        #     str1 += list[i]\\n        # a = str1[::-1]\\n        # num += a\\n        # num = int(num)\\n        # if (-2) ** 31 <= num <= (2 ** 31) - 1:\\n        #     return num\\n        # else:\\n        #     return 0\\n        \\n        s = str(x)\\n        res = int(\"-\" + s[1:][::-1]) if s[0] == \"-\" else int(s[::-1])\\n        return res if (-2) ** 31 <= res <= (2 ** 31) - 1 else 0\\n```\\nHere is two solutions of this problem \\uD83D\\uDE09\\u2757\\uFE0F"
                    },
                    {
                        "username": "jesseharper42",
                        "content": "The prompt \"Assume the environment does not allow you to store 64-bit integers (signed or unsigned)\" is not literally checked. For what ever reason I took this literally and thought that if you calculated a number larger than 32bit and then checked before returning, it would disqualify the submersion. I was so disappointed to read other submissions and find that you could just check :/"
                    },
                    {
                        "username": "kisnapatel28",
                        "content": "why in this question simple condition not working. "
                    },
                    {
                        "username": "user4681ji",
                        "content": "\"Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\"\\nWhy can I store any value at all?"
                    },
                    {
                        "username": "ramu_anantha",
                        "content": "at 1027 case my program is not working can any one help?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Yeah. here I am got stuck.\\n\\nTry this : https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/ \\n\\n\\n"
                    },
                    {
                        "username": "user2784oJ",
                        "content": "This is Stupid. Test Case with number: 1534236469 is well with -2 power 31 and 2 power of 31 -1. How to submit this code in java?"
                    },
                    {
                        "username": "tapabrata_007",
                        "content": "Try this: https://leetcode.com/problems/reverse-integer/solutions/3349139/c-100-beat-very-easy-way-to-understand/\\n"
                    }
                ]
            },
            {
                "id": 1837880,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1836752,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1835813,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1833078,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829545,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829500,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1829151,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1827461,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1824308,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1822965,
                "content": [
                    {
                        "username": "vladzzzek",
                        "content": "I added exection about 1534236469, but i also have OverFlow with 2147483647"
                    },
                    {
                        "username": "tywarinabin",
                        "content": "Note : The input as well as the reverse number also should be in range of -2147483648 to 2147483647 .\\n\\n"
                    },
                    {
                        "username": "aelrouby",
                        "content": "exactly\\nand 1534236469  is within this range.\\nit is a 10-digit number with 1 in the most significant digit.\\nthe MAX_INT (2147483647) is also 10-digit number with 2 in the most significant digit.\\nso, it is very clear that 1534236469   < 1534236469  (MAX_INT ).\\nso the testcase is wrong."
                    },
                    {
                        "username": "aelrouby",
                        "content": "the test case of 1534236469 (x<INT_MAX. x<x^31) \\nit should not return 0\\nthis test case built in answer is wrong."
                    },
                    {
                        "username": "dpvidyasagar",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n        int ans = 0;\\n        while(x!=0){\\n            if((ans>INT_MAX/10) || (ans<INT_MIN/10)) return 0;\\n            int r = x%10;\\n            ans = ans*10 + r;\\n            x/=10;\\n        }\\n        return ans;\\n        \\n    }\\n};"
                    },
                    {
                        "username": "realnerfelitewar",
                        "content": "```py\nclass Solution:\n    def reverse(self, x: int) -> int:\n        res=''\n        if x < 0:\n            y=str(x)[1::]\n            for i in reversed(y):\n                res=res+str(i)\n                ans=res.strip('0')\n            if -2**31 <= int(res) and int(res) <= (2**31)-1:\n                return (-1*int(ans))\n            else:\n                return (0 )\n        elif x>0:\n            for i in reversed(str(x)):\n                res=res+str(i)\n                ans=res.strip(\"0\")\n            if -2**31 <= int(res) and int(res)<= (2**31)-1:\n                return (int(res))\n            else:\n                return (0 )\n```\n\nWTF is wrong here? it satisfies it all...and everything works on my PC well!! pls help me "
                    },
                    {
                        "username": "sandagolcea",
                        "content": "So if the reversed numbers are greater than the  stated limits of 2 at the power of 32, or smaller than negative 2 at pow of 32, we return 0.\\ni.e.\\n\\n```\\nif(answer < Math.pow(2,31) * (-1)) return 0;\\nif(answer > Math.pow(2,31)) return 0;\\n```\\n"
                    },
                    {
                        "username": "nitinchoudhary8",
                        "content": "c++\\nif you are using && for constraints try to use ||\\ni got my answer"
                    },
                    {
                        "username": "sudharsan_kmnst",
                        "content": "in my c program\\n defined char c[100] and i used \\'i\\' to iterate through it but it gives runtime error as index 100 out of bound i tried with 1000 also and even with 10 but the code works well in online compilers"
                    },
                    {
                        "username": "sudip07",
                        "content": "x=1534236469 is with in -2^(31) <= x <= 2^(31) - 1\\nso output  should not be 0."
                    },
                    {
                        "username": "benCoder2012",
                        "content": "The way it is stated is confusing, in your code use also an if else condition to test if the result is in the range.   -2^(31) <= Result<= 2^(31) - 1. Your code will work then."
                    },
                    {
                        "username": "Vaibhav346",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) \\n    {\\n        int ans = 0;\\n        while(x!=0)\\n        {\\n            int m=x%10;\\n            x=x/10;\\n            ans= (ans * 10) + m;\\n        }\\n    if ((ans < INT_MIN / 10) || (ans > INT_MAX/10))\\n    {\\n        return 0;\\n    }\\n    else\\n    {\\n    return ans;\\n    }\\n    }\\n};`\\n\\nCan anyone pls tell what\\'s wrong in the code ?\\nIt is showing \\nLine 10: Char 23: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:19:23"
                    }
                ]
            },
            {
                "id": 1821502,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1820681,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1819847,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1810516,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1809460,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1808397,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1808275,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1807193,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1804116,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1803000,
                "content": [
                    {
                        "username": "sam_learner",
                        "content": "I used Try catch in Java to ensure I return 0 when NumberFormatException is thrown."
                    },
                    {
                        "username": "ayushpoddarcodes",
                        "content": "CAN SOMEONE HELP TO FIND THE ERROR , IT\\'S SHOWING TIME LIMIT EXCEEDED !!\\n\\nclass Solution {\\npublic:\\n    int reverse(int x){\\n        int temp,num,flag = 0;\\n        long long int rev =0;\\n\\n        temp = x;\\n\\n        while(temp!=0){\\n            num = temp % 10;\\n            if(rev*10+num <= INT_MAX){\\n                rev = rev*10 + num;\\n                temp = temp/10;\\n            }\\n            else\\n                flag = 1;\\n        }\\n        \\n        if(flag == 0)\\n            return rev;\\n        else \\n            return 0;\\n    }\\n};"
                    },
                    {
                        "username": "tohotom",
                        "content": "This is not an answer to your question, but consider this: \"long long int \" is 64 bits if I\\'m right. But according to the problem: \"Assume the environment does not allow you to store 64-bit integers\". "
                    },
                    {
                        "username": "aka_964",
                        "content": "i wrote it in java it\\'s all right but i should send the result as long type but when i send it its shows error\\nx = 1534236469"
                    },
                    {
                        "username": "tohotom",
                        "content": "Seems like most people (at least all the ~5 solutions I checked so far) forget the following line, or don\\'t understand what it means: \"**Assume the environment does not allow you to store 64-bit integers (signed or unsigned).**\"\\nPeople just doing their calculations and at the end check whether number is out of the range.\\n\\nBut think about it: if 64-bit integers are NOT supported, the result will never be outside the range. Rather you may get an exception but more likely the number will simply overflow and will be represented as a 32 bit integer and therefore never be out of range.\\n\\nIn other words, if the testing environment could enforce this assumption all those solutions would fail."
                    },
                    {
                        "username": "user4681ji",
                        "content": "It is not clear to me whether this statement applies to the output or in general to all integer variables. But the tests do not throw an error if a variable is set that goes beyond this limit."
                    },
                    {
                        "username": "nileshrdhengre",
                        "content": "Simple solution using java \n\n `\n class Solution {\n    public int reverse(int x) {\n        boolean negativeNumber = false;\n        int result = 0;\n        if (x < 0) {\n            x = x * (-1);\n            if (x < 0) {\n                return 0;\n            }\n            negativeNumber = true;\n        }\n        while (x >= 0) {\n            if (result > 214748364){\n                return 0;\n            }\n            if (x >= 10) {\n                int x1 = x % 10;\n                x = x / 10;\n                result = (result * 10) + x1;\n            } else {\n                result = (result * 10) + x;\n                x = -1;\n            }\n        }\n        if (negativeNumber) {\n            result = result * (-1);\n        }\n        return result;\n        \n    }\n}\n`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "anwendeng",
                        "content": "I tried the number x=2147483647"
                    },
                    {
                        "username": "sriman743",
                        "content": "Efficient javascript solution\\n\\n `/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar reverse = function(x) {\\n        if (x < 0) {\\n            const res = -Math.abs(rev(Math.abs(x)));\\n            if (isBeyondLimit(res)) {\\n                return 0;\\n            } else {\\n                return res;\\n            } \\n        } else {\\n            if (isBeyondLimit(rev(x))) {\\n                return 0;\\n            } else {\\n                return rev(x);\\n            } \\n        }  \\n};\\n\\nfunction isBeyondLimit(x) {\\n    if (x < Math.pow(-2, 31) || x > (Math.pow(2, 31) - 1)) {\\n        return true;\\n    } else {\\n        return false;\\n    }\\n}\\n\\nfunction rev(x) {\\n    let res = 0;\\n    while(x > 0) {\\n        const mod = (x % 10);\\n        x = parseInt(x / 10);\\n        res = res * 10 + mod;\\n    }\\n    return res;\\n}`"
                    },
                    {
                        "username": "tohotom",
                        "content": "1. Please don\\'t post any solutions in this discussion tab.\\n"
                    },
                    {
                        "username": "devgupta4526",
                        "content": "#Why this  code was not working for test case  1534236469 what have i did wrong\\n\\n\\n\\n\\nclass Solution {\\n    public int reverse(int x) {\\n         if(x >0){\\n         int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         return rev;\\n        }\\n        else{\\n        x= -1*x;\\n        int rev = x%10;\\n        x = x/10;\\n        while(x>0){\\n            int dig = x%10;\\n            rev = rev*10 + dig;\\n            x = x/10;\\n        }\\n         rev = -1*rev;\\n          return rev;\\n         }\\n     \\n       }\\n  }\\n"
                    },
                    {
                        "username": "MohammadFaizel",
                        "content": "Can anyone explain why this try catch is not working \n\nint reverse(int x) {\n      int rev = 0;\n      while(x)\n      {\n          int digit = x % 10;\n          x /= 10;\n          try\n          {\n              rev = rev * 10 + digit;\n          }\n          catch (exception e)\n          {\n              return 0;\n          }\n      } \n      return rev;\n    }"
                    },
                    {
                        "username": "Y_ogesh",
                        "content": "Use this condition so that answer lie between the range:\\n\\nif(y>INT_MAX||y<INT_MIN)\\n {\\n            return 0;\\n}"
                    }
                ]
            },
            {
                "id": 1798199,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1795875,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1795001,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1792821,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1792447,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1789523,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1789458,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1786388,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1784878,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1783688,
                "content": [
                    {
                        "username": "yashpra222",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n    int y = Integer.reverse(x);\\n    return y ;   \\n\\nwhy i cant use this algo ; \\n"
                    },
                    {
                        "username": "Curlack",
                        "content": "The code should be robust enough so as to avoid resorting to `try catch` or `int.TryParse` to `return 0`.\n`.ToString()` and `.Reverse()` are much slower than basic arithmetic.\nDon't forget about the 64-bit assumption! Technically you should not use `decimal` or `long` data types."
                    },
                    {
                        "username": "KITSCODER",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int y=0;\\n        if(x<0){\\n            y = -(x);\\n        }\\n        else {\\n            y = x;\\n        }\\n        int n =0,sum =0;\\n        while(y>0){\\n            n = y%10;\\n            sum = sum*10+n;\\n            y = y/10;\\n        }\\n        if(x>=1534236469 || sum<=-1563847412){\\n            return 0;\\n        }\\n        else if(x<0){\\n            x = -sum;\\n            return x;\\n        }\\n        else{\\n            return sum;\\n        }\\n    }\\n}"
                    },
                    {
                        "username": "Sakthi_01001",
                        "content": "def reverse(self, x: int) -> int:\\n        y=str(x)[::-1]\\n        return int(y)\\n\\nWhy is this is not working ?\\nI made any mistake...?\\n\\n[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "sapna02",
                        "content": "How to handle -ve integer ? ... 505/1032 testcases passed\\n\\nimport java.util.*;\\nclass Solution {\\n    public int reverse(int x) {\\n        if(x < 0)\\n        String temp = Integer.toString(x);\\n        int len = temp.length();\\n        char[] digits = temp.toCharArray();\\n        String s = \"\";\\n        for(int i = len-1; i >= 0; i--){\\n            s += String.valueOf(digits[i]); \\n        } \\n        int res = 0;\\n        try{\\n            res = Integer.parseInt(s);\\n            } catch(NumberFormatException ex){ \\n                ex.printStackTrace();\\n            }\\n        \\n\\n        return res;\\n}\\n}\\n"
                    },
                    {
                        "username": "Advait_Bakshi",
                        "content": "Could anyone tell why the below code is working properly in eclispe but giving compilation error in leetcode or giving wrong output  ?\n\nclass Solution {\n    public long reverse(int x) {\n        String s = String.valueOf(x);\n        long intReverse=0;\n        String stringReverse=\"\";\n        int len=s.length();\n        if(s.charAt(0)=='-'){\n            String s1 = s.substring(1, len);\n            intReverse= reverse_new(Long.parseLong(s1));\n            stringReverse='-'+Long.toString(intReverse);\n            intReverse=Long.parseLong(stringReverse);\n        }\n        \n        else{\n          intReverse=reverse_new(x);\n        }\n        if((intReverse>=Math.pow(-2,31))&&(intReverse<=(Math.pow(2,31)-1)))\n          return intReverse ;\n        else\n           return 0;\n    }\n    public  long reverse_new(long s){\n        long rev =0;\n        \n        while(s>0){\n            rev=(rev*10)+(s%10);\n            s=s/10;\n        }\n        return rev;\n    }\n\n}\n"
                    },
                    {
                        "username": "Aishik_Sen",
                        "content": "anyone got any hints about the removal of the trailing 0s in the reversed number as seen in test case 3? I\\'m getting stuck on that"
                    },
                    {
                        "username": "4coreor87",
                        "content": "def re(x):\\n    x=x.replace(str(0),\"\")\\n    if \"-\" in str(x):\\n        x=abs(int(x))\\n        return str(x)[::-1]\\n\\n    return str(x)[::-1]\\n\\nanyone mind explain why this code is not working?\\nI am a beginner so I have absolutely no idea why this is not working"
                    },
                    {
                        "username": "charlieanthony",
                        "content": "Me having to quickly google 2 ^ 31   :)"
                    },
                    {
                        "username": "amarsai",
                        "content": "class Solution(object):\\n    def reverse(self, x):\\n        if x == 0:\\n            return 0\\n        elif x > 0:\\n            sign = 1\\n        else:\\n            sign = -1\\n            x = -x\\n        rev = 0\\n        while x > 0:\\n            rev = rev * 10 + x % 10\\n            x = x // 10\\n        rev *= sign\\n        if rev > 2**31-1 or rev < -2**31:\\n            return 0\\n        return rev"
                    }
                ]
            },
            {
                "id": 1781312,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1780626,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1778034,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1777454,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1776354,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1775284,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774984,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774238,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1774036,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1771176,
                "content": [
                    {
                        "username": "aashwinr",
                        "content": "Honestly one of the dumbest problems I\\'ve come across leetcode"
                    },
                    {
                        "username": "NishantKende",
                        "content": "I am new here & i was solving this reverse number problem,\\nbut at 1027th test case, its showing:\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nWhat can I do ?"
                    },
                    {
                        "username": "BalajiMP",
                        "content": "Have one invalid test case for x = 1534236469\\n\\nGiven x = 1534236469 \\nreverse of x = 9646324351 \\n\\nbut the expected result from test case is 0. "
                    },
                    {
                        "username": "Abhi_1018",
                        "content": "We have to check the condition in while loop itslef."
                    },
                    {
                        "username": "codeWithVaib2003",
                        "content": " class Solution {\\npublic:\\n    int rev_num(long long int x){\\n        long long int rev=0;\\n        long long int rem;\\n        while(x!=0){\\n            rem=x%10;\\n            rev=rev*10+rem;\\n            if(rev>INT_MAX){\\n                return 0;\\n            }\\n            if(rev<INT_MIN){\\n                return 0;\\n            }\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n    int reverse(long long int x) {\\n        if(x<0){\\n            x=x*-1;\\n           long long int res=rev_num(x);\\n           long long int res1=res*-1;\\n           return res1;\\n        }\\n        else{\\n            return rev_num(x);\\n        }\\n    }\\n}; "
                    },
                    {
                        "username": "muhammad_uzair1062001",
                        "content": "LeetCode Official Answer Problems:\\nProblem 1: If range is [ ((2^31) - 1) -- (-2^31) ] which means that code should be able to reverse 2147483645 but max it can reverse is MAX_REVERSE: 2147483601.\\n\\nProblem 2: if (ans > INT_MAX/10) { return 0} which means that we a comparing a 10 digit number to a 9 digit number in last iteration (2147483601 > 214748368) but still it can give up to 2147483601 {IDK HOW??}\\n\\nProblem 3: how compiler knows that INT_MAX = 2147383647 ( (2^31) - 1)"
                    },
                    {
                        "username": "mdabucse",
                        "content": "int reverse(int x){\\n    int a,rem;\\n    scanf(\"%d\",&a);\\n    int sum=0;\\n    while(a--)\\n    {\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        sum=0;\\n    }\\n    return NULL;\\n}"
                    },
                    {
                        "username": "user8170VB",
                        "content": "INPUT - -2147483412\\nOUTPUT - 0\\nEXPECTED - -2143847412\\n\\nint rev (int a){\\n        int ans=0,r;\\n        while(a>0)\\n        {\\n            r=a%10;\\n            ans = (ans * 10) + r;\\n            if((ans<INT_MIN/10) || (ans>INT_MAX/10))\\n            {\\n                return 0;\\n            }\\n            a = a/10;\\n        }\\n        return ans;\\n    }\\n\\nWhere i am going wrong?\\n"
                    },
                    {
                        "username": "yeazin",
                        "content": "there is a problem with my test case \\nmy code is  \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n\\n        if x in range(-2**31 , 2**31 - 1 ):\\n            if x < 0: return int(str(x * -1)[::-1]) * -1  \\n            else: return int(str(x)[::-1])\\n        else: return 0`\\n\\nIn test case the input was 1534236469\\nAlthough this number in range 32 signed bit why the testcase showing me the output would be 0 ?"
                    },
                    {
                        "username": "manglvisha",
                        "content": "-2147483412\\nmy output comes 0 but it is wrong"
                    }
                ]
            },
            {
                "id": 1769424,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1768198,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1767328,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1765166,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1764967,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1762304,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1760470,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1759522,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1759310,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1756425,
                "content": [
                    {
                        "username": "harshitpathak334",
                        "content": "you may use this to check if value is in 32 bit or not :\\n `if abs(rev) < 2**31 and rev != 2**31 - 1:`\\n            `pass`\\n       ` else :`\\n           ` return 0`"
                    },
                    {
                        "username": "shaxriyor_xusinov",
                        "content": "I used long type instead of int. \\nand I check value like this : \\n\\nif ( res < Integer.MIN_VALUE || res > Integer.MAX_VALUE ) \\n\\nthen finally, I returned my answer in int type. \\nAnd my solution to this problem faster than 100% of online submissions to this problem.\\nruntime just 1ms .  "
                    },
                    {
                        "username": "hemanthreddy31",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        int r=0;\\n        int min=Integer.MIN_VALUE;\\n        int max=Integer.MAX_VALUE;\\n\\n        while(x!=0){\\n            int l=x%10;\\n             if(r>max/10||(r==max/10&&l>7))\\n             return 0;\\n             if(r<min/10||(r==min/10&&l<-8))\\n             return 0;\\n             r=r*10+l;\\n             x=x/10;\\n        }\\n        return r;\\n    }\\n}  "
                    },
                    {
                        "username": "Lohit_12",
                        "content": "if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;\\ncan\\'t understand what the logic about \"pop>7\""
                    },
                    {
                        "username": "nithinvanga01",
                        "content": "java solution (but not accepting long type)                                                                 class Solution {\\n    public int reverse(int x) {\\n \\t \\n\\tint y=0;\\n\\tif(x>=0) {\\n\\tString s=String.valueOf(x);\\n\\tStringBuilder s1=new StringBuilder(s);\\n\\ts1.reverse();\\n\\tString s2=s1.toString();\\n\\t y =Integer.parseInt(s2);\\n\\t}\\n\\telse {\\n\\t\\tString s=String.valueOf(x);\\n\\t\\tStringBuilder s1=new StringBuilder(s.substring(1));\\n\\t\\ts1.reverse();\\n\\t\\ts1.insert(0, \\'-\\');\\n\\t\\tString s2=s1.toString();\\n\\t\\t y =Integer.parseInt(s2);\\n\\t\\t\\n\\t}\\n    \\treturn y;\\n}\\n}"
                    },
                    {
                        "username": "ahujas1203",
                        "content": "-1563847412\\nWhat is wrong with this test case? \\n"
                    },
                    {
                        "username": "NitinRao",
                        "content": "how to import math in java in leetcode\\n"
                    },
                    {
                        "username": "mrdineshkumar",
                        "content": "\\n        class Solution {\\npublic:\\n    int reverse(int x) {\\n     int sum=0;\\n        while(x!=0)\\n        {\\n          int rem=x%10;\\n          if(sum>INT_MAX/10 ||sum<INT_MIN/10){\\n              return 0;\\n          }\\n            sum=sum*10+rem;\\n            x=x/10;\\n        }\\n        return sum;\\n        \\n    }\\n};\\n       "
                    },
                    {
                        "username": "niteshtiwari17",
                        "content": "I am getting a run time error that is \\n\\nLine 12: Char 36: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:21:36\\n\\nHow to fix  it i used long long int instead of int but i got same error again and again . Please help me what should i use ? \\n"
                    },
                    {
                        "username": "escaman6096",
                        "content": "this question have some unexpected outputs, so just paste this after your correct code, it will work. \\nif(x==1534236469) return 0;\\n        if(x==2147483647) return 0;\\n        if(x==-2147483648) return 0;\\n        if(x==-2147483645) return 0;\\n        if(x==1563847412) return 0;\\n        if(x==-1563847412)\\xA0return\\xA00;"
                    }
                ]
            },
            {
                "id": 1753654,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1752539,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1751277,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1750047,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1749815,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1741754,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1740747,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1740384,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1739757,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1738380,
                "content": [
                    {
                        "username": "_gyanjs_",
                        "content": "The the LeetCode guys have gone mad, \nThe reverse of 1534236469 is 9646324351, not 0.\n\nI can't submit my answer coz of that dumb test case."
                    },
                    {
                        "username": "chandrahansprakashsaha",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com) @"
                    },
                    {
                        "username": "niteshkumar61725",
                        "content": "[leetcode](https://leetcode.com)\\n\\t\\tFull Explaination about this code\\n//\\t\\t1534236469 ans = 0;\\t\\t\\n//\\t\\tclass Solution {\\n//\\t\\t    public int reverse(int x) { x = 1534236469\\n//\\t\\t        int rev=0; //Nochange\\n//\\t\\t        while(x != 0){\\n//\\t\\t            // int rem = x%10;  214748364\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t-214748364\\n//\\t\\t            // rev = rev*10 + rem; \\n//\\t\\t\\t\\t\\trev=964632435\\n//\\t\\t            if(rev>Integer.MAX_VALUE/10 || rev<Integer.MIN_VALUE/10)\\n//\\t\\t             0>214748364||0<-214748364\\n//\\t\\t             9>214748364||9<-214748364\\n//\\t\\t\\t\\t\\t 96>214748364 || \\t96<-214748364\\n//\\t\\t\\t\\t\\t964>214748364 || \\t964<-214748364  \\n//\\t\\t           9646>214748364 ||   9646<-214748364\\n//\\t\\t          96463>214748364 ||  96463<-214748364\\n//\\t\\t\\t\\t 964632>214748364 || 964632<-214748364\\n//\\t\\t\\t\\t9646324>214748364 ||9646324<-214748364\\n//\\t\\t\\t   96463243>214748364 ||96463243<-21748364\\n//\\t\\t\\t  964632435>214748364 ||964632435<-21748364 \\n//\\t\\t           Yes ,condition true,\\n//\\t\\t               return 0; ans=0\\n//\\t\\t            \\n//\\t\\t            int rem = x%10;   // 1534236469%10 =9//153423646%10=6//15342364%10=4//1534236%10=6//153423%10=3\\n//\\t\\t\\t\\t\\t\\t\\t\\t\\t// 15342%10=2//1534%10=4//153%10=3//15%10=5\\n//\\t\\t\\n//\\t\\t\\n//\\t\\t            rev = rev*10 + rem;// 9/6/4/6/3/2/4/3/5\\n//\\t\\t            x = x/10;//153423646//15342364//1534236//153423//15342//1534//153//15//1\\n//\\t\\t        }\\n//\\t\\t        return (int) rev;\\n//\\t\\t    }\\n\\t\\t//}"
                    },
                    {
                        "username": "iianuragii",
                        "content": "Input\\nx =\\n1534236469\\n1028 / 1032 testcases passed\\nOutput\\n1056389759\\nExpected\\n0\\nDon\\'t know about this now but it still lies in the given range"
                    },
                    {
                        "username": "Dr_Doofenshmirz",
                        "content": "how come this question has such low acception rate ? \\n I passed on the first try  on python \\nIs this question hard to code in other languages ? "
                    },
                    {
                        "username": "parv1125",
                        "content": "showing this for input 1534236469 at line y=(y*10)+temp;\\nLine 15: Char 17: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:24:17"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "See what are the boundries of int, and in case of overflow return 0. You can store `result` in bigger type and before returning it you should check if value is ok."
                    },
                    {
                        "username": "AjayUpadhyay",
                        "content": "can anyone please explain that, why my if condition is not able to detect that ,for x =\\n1534236469 when we will reverse it , it will go out 0f the range and need to return 0 but returning \\n1056389759\\n,,,\\nclass Solution {\\n    public int reverse(int x) {\\n        \\n        int r = 0 ;\\n        while(x != 0){\\n            if((r*10 + x%10) >= Math.pow(2,31) || (r*10 + x%10) < Math.pow(-2,31)){\\n                return 0;\\n            }\\n            r = r*10 + x%10;\\n            x /= 10;\\n        }\\n        return r;\\n    }\\n}\\n,,,"
                    },
                    {
                        "username": "aprilman_j",
                        "content": "Your r should be of type `long`. And before return you should have condition `if(r > Integer.MaxValue) return 0`"
                    },
                    {
                        "username": "code-clutch",
                        "content": "I getting error for the case \"1534236469\" but it seem to be within the range. Can anyone explain me why"
                    },
                    {
                        "username": "mgeetha",
                        "content": "x=-214748412\\no/p=0\\nexpected=-214748412\\nhelp pls"
                    },
                    {
                        "username": "Pratik-Shrivastava",
                        "content": "\\n\\u2705Simple || Java || Beats 100% runtime || Easy to Understand\\n\\nhttps://leetcode.com/problems/reverse-integer/solutions/2972482/simple-java-beats-100-runtime-easy-to-understand/"
                    }
                ]
            },
            {
                "id": 1735658,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1734289,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1733512,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1732033,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1731961,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1731778,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1730326,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1730201,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1729311,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1728503,
                "content": [
                    {
                        "username": "TheCScience",
                        "content": "Here is problem solution in Python, Java, C++ and C programming.\\n[https://thecscience.com/leetcode-reverse-integer-problem-solution.html](https://thecscience.com/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "brainlessduncan",
                        "content": "This question was tricky!!!\\nI loved it"
                    },
                    {
                        "username": "Knightwing1941",
                        "content": "If the number is larger than the max value of an integer it should return 0. The problem should mention that"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "Input: 1534236469\\nOutput: 1056389759\\nExpected: 0\\nthis can be solved by this check\\nif(number< -2147483648 ){\\nreturn 0\\n}\\nif(number>=2147483647  ){\\n           return 0\\n       }\\n"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "testcase:1027:\\ninput =1534236469;\\noutput= 9646324351\\nexpected=0?\\ni dont understand"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range "
                    },
                    {
                        "username": "Arpan_Basu_",
                        "content": "//100% accurate\\n//Python 3\\nif x != 0:\\n            sign = int(x / abs(x))\\n            m = int(str(abs(x))[::-1])\\n        else:\\n            sign = 0\\n            m = 0\\n        if m <= 2**31:\\n            return sign * m\\n        else: \\n            return 0"
                    },
                    {
                        "username": "arashutosh01",
                        "content": "class Solution {\\npublic:\\n    int reverse(int x) {\\n       \\n    int ans = 0;\\n    while(x != 0)\\n    {\\n       int digit =  x%10;\\n    ans = (ans * 10) + digit;\\n        x = x/10;\\n    }\\n    return (ans > INT_MAX || ans < INT_MIN) ? 0 : ans;\\n    }\\n};\\n\\ni am getting this error:\\nLine 9: Char 16: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:18:16"
                    },
                    {
                        "username": "siddhant1207",
                        "content": "1534236469 is well with in the range, seems like error from their end."
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "codemode365",
                        "content": "Why my test 1027 failed \\n/*\\nInput\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\nStdout\\n1534236469\\n"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "karankumar234",
                        "content": "take that number with data type long in which you want to store reverse number\\nas\\nlong rev=o;\\n.......rev=rev*10+x%10;"
                    }
                ]
            },
            {
                "id": 1727337,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1726624,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1724808,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1723476,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1722605,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1722530,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1720476,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1717332,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1715229,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1714075,
                "content": [
                    {
                        "username": "akshay9933patil",
                        "content": "my code runs on my idle but here showing error such as: ValueError: invalid literal for int() with base 10:\\n `class Solution:\\n    def reverse(self,x):\\n        s_num = str(x)\\n        r_num = s_num[::-1]\\n        l= int(len(r_num))\\n        temp = 0\\n        for i in range(l):\\n            num =(int(int(r_num[i]))*(10**(l-i-1)))+temp\\n            temp = num\\n        return num`"
                    },
                    {
                        "username": "keathareswar",
                        "content": "how to check the integers within the range[ -2^31 ; 2^31 -1] in java"
                    },
                    {
                        "username": "spicedNoodle",
                        "content": "  [@Leetcode_Solutions](/Leetcode_Solutions) your testcase 1027 is wrong\\nx =\\n1534236469\\n1027 / 1032 testcases passed\\nOutput\\n9646324351\\nExpected\\n0\\n\\nJS can easily handle 1534236469 without an overflow. There\\'s even BigInt if you really want to get crazy. \\n\\nhere, run this in NodeJS or your browser console -> Number(1534236469).toString().split(\\'\\').reverse().join(\\'\\');"
                    },
                    {
                        "username": "godda97",
                        "content": "Because output also cannot go beyond the signed 32-bit integer range"
                    },
                    {
                        "username": "AnkushMatyal0",
                        "content": "case 1027 \\n\\nx=1534236469;\\nmy outPut= 9646324351;\\nexpected=0\\n????\\nany suggestion?\\n\\n"
                    },
                    {
                        "username": "muzzammilayoub",
                        "content": "apply the check if it is in range (-2^31-1 to 2^31-1)"
                    },
                    {
                        "username": "arindam001",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x!= 0){\\n            int digit = x % 10;\\n            if(( ans > INT_MAX/10) ||( ans < INT_MIN/10)){\\n                return 0;\\n            }\\n            ans = (ans*10) + digit;\\n            x = x/10;\\n        }\\n        return ans;\\n        \\n    }"
                    },
                    {
                        "username": "varapraveen",
                        "content": "// In this code  it is showing runtime error but not TLE(Time limit exceed). Can anyone please tell me what wrong I did.\\n\\n\\nclass Solution {\\npublic:\\n    int reverse(int x) {\\n        string s=to_string(x);\\n        int n=s.size();\\n        string str;\\n        int h=0;\\n        if(s[0]==\\'-\\') {\\n            for(int i=n-1;i>0;i--) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0-x;\\n        }\\n        else if(s[0]!=\\'-\\') {\\n            for(int i=n-1;i>=0;i++) {\\n                str[h]=s[i];\\n                h++;\\n            }\\n            x=stoi(str);\\n            x=0+x;\\n        }\\n        return x;\\n    }\\n};"
                    },
                    {
                        "username": "VIDESH_RAGUL_R",
                        "content": "if(y>=1534236469||y<=-1534236469&&y>-2147483412)\\n            a=0;\\n\\nis it ok?"
                    },
                    {
                        "username": "reddisatish07",
                        "content": "if (x==1534236469 or x==1563847412 or x==-1563847412 ):\\n            return 0"
                    },
                    {
                        "username": "Simran1604",
                        "content": "The intuition I can think of is,  \\n1) store the sign in a boolean type. \\n2) Take the absolute value of \\'x\\' and store the reverse in long type.\\n3) Check if the ans is greater than the integer limit, if yes return 0 else the answer with the respective sign."
                    },
                    {
                        "username": "ExtraSlowlySlowly",
                        "content": "Simple Java solution with Long and Special digits (7 and -8)\\n\\n```\\n\\nclass Solution {\\n    public int reverse(int x) {\\n        int reversed = 0;\\n        int sign = x < 0 ? -1 : 1;\\n        // To make x positive\\n        x = sign * x;\\n        while(x > 0 || x <0) {\\n            int dig = x%10;\\n            if((Integer.MAX_VALUE -dig)/10 < reversed){\\n                return 0;\\n            }\\n            reversed = reversed *10 + dig;\\n            x = x /10;\\n        }\\n        // Converting reversed number into correct sign.\\n        return reversed*sign;\\n    }\\n}\\n\\n```"
                    },
                    {
                        "username": "karimomaya",
                        "content": "Simplest Solution \n`\nvar reverse = function(x) {\n    let sum = 0;\n    while(x != 0) {\n        let pop = x %10\n        x = parseInt(x/10);\n        \n        sum = sum*10+pop;\n        if (sum > Math.pow(2, 31) - 1 || sum < Math.pow(-2, 31))  return 0;\n        \n    }\n    return sum;\n};\n`"
                    }
                ]
            },
            {
                "id": 1713786,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1711637,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1710953,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1710287,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708780,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708548,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1708328,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1707529,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1703567,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1702333,
                "content": [
                    {
                        "username": "AdityaBhate",
                        "content": "# \\u2705 Easiest \\uD83D\\uDE0E FAANG Method Ever !!! \\uD83D\\uDCA5\\nhttps://leetcode.com/problems/reverse-integer/solutions/2902798/easiest-faang-method-ever/?orderBy=most_votes"
                    },
                    {
                        "username": "pozitron",
                        "content": "this one is \\'medium\\' and reverse bits is \\'easy\\', hmm..."
                    },
                    {
                        "username": "x5up0",
                        "content": "`def reverse(self, x: int) -> int:\\n        x = (int(str(x * -1)[::-1])) * -1 if x < 0 else int(str(x)[::-1]); return x if -2 ** 31 <= x <= 2 ** 31 - 1 else 0 `\\n\\nAaah yes"
                    },
                    {
                        "username": "vishalvinayt",
                        "content": "My Solution for Reverse Integer Java\\n\\n\\n `class Solution {\\n    public static int reverse(int x) {\\n        String sol=\"\";\\n        int val=Math.abs(x);\\n        String newVal=\"\"+val;\\n        for(int i=newVal.length()-1;i>=0;i--){\\n            sol+=newVal.charAt(i);\\n        }\\n        try {\\n            int value = Integer.parseInt(sol);\\n            value = x < 0 ? -value : value;\\n            return value;\\n        }\\n        catch (NumberFormatException e){\\n            return 0;\\n        }\\n    }\\n} `"
                    },
                    {
                        "username": "AlmogM",
                        "content": "All the top solutions by time include using loong, which as far as I understand shouldn\\'t be allowed."
                    },
                    {
                        "username": "cherry-cakes",
                        "content": "No actual program would ever return 0 in case of overflow, nor should every operation check for overflow, unless in a very low level language which would have features allowing you to know if it\\'s a real overflow or just a real 0.\\n\\nA better way to approach this would be\\n1. throw an exception if out of range\\n2. modulo the result so it fits in range, then set off a corresponding flag"
                    },
                    {
                        "username": "Alterran",
                        "content": "writing this in c. actually flipping the number is the easy part; the hard part is returning 0 whenever the flipped number is out of bounds"
                    },
                    {
                        "username": "julabgamun",
                        "content": "Hello, \\n\\nclass Solution {\\npublic:\\n    int numReverse(int n){\\n        long int rev_num = 0;\\n        int rem;\\n        while(n != 0) {\\n            rem = n % 10;\\n            rev_num = rev_num * 10 + rem;\\n            n /= 10;\\n        }\\n        return rev_num;\\n    }\\n    int reverse(int x) {\\n        if (x >= pow(2, 31)-1 or x <= pow(-2, 31)){\\n            return 0;\\n        }\\n        if(x == 0){\\n            return 0;\\n        }\\n        if(x > 0){\\n            return (numReverse(x));\\n        }\\n        else{\\n            x = x*-1;\\n            int temp = numReverse(x);\\n            return temp * -1;\\n        }\\n    }\\n};\\n\\nThis is my solution. Why for 1534236469, the OP is 0? "
                    },
                    {
                        "username": "tanti1234arjun",
                        "content": "help to me solve this last 3cases"
                    },
                    {
                        "username": "kumarmanoj13",
                        "content": "good problem.\\n"
                    }
                ]
            },
            {
                "id": 1701910,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1701202,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1700123,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1699961,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1697929,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1691882,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1690787,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1689540,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1689251,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1688341,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "for C++ solution CHECKOUT THIS LINK\\nLEAVE A STAR  if you find it helpful.\\n\\nhttps://github.com/AnkushRawat10601/Leetcode/blob/main/07_reverse_int.cpp"
                    },
                    {
                        "username": "rohangautam219",
                        "content": "for x = 1534236469\\noutput = 1056389759\\nexpected = 0\\nmy question is that  for this value of x how can i return 0  ????\\n"
                    },
                    {
                        "username": "abhinav__19",
                        "content": "Instead of submitting repeatedly , just read the question thrice, you will understand what you are not getting.\nThe reversed value of 'x' should not exceed from the range of int, not the given value."
                    },
                    {
                        "username": "akashrajak512",
                        "content": "#include<stdio.h>\\nint main(){\\nint a,s, t, z;\\nprintf(\"Enter the integer: \");\\nscanf(\"%d\",&a);\\nt=a%10;\\ns=(a/10)%10;\\nz=a/100;\\nprintf(\"%d\",t*100+s*10+z);\\nreturn 0;\\n}"
                    },
                    {
                        "username": "VBekasovs",
                        "content": "long long double"
                    },
                    {
                        "username": "sharmag41735",
                        "content": " \npublic:\n    int reverse(int x) {\n     \n        int ans =  0;\n        while(x!=0){\n            int digit = x%10;\n            if((ans>INT_MAX/10)||(ans<INT_MIN/10)){\n                return 0;\n            }\n            ans =(ans*10)+digit;\n             x =  x/10;\n\n\n        }\n        return ans;\n        \n    }\n};"
                    },
                    {
                        "username": "atishtcs",
                        "content": "public class Solution {\\n    public static int reverse(int x) {\\n        int num = x;\\n        int rev=0;\\n        while(num>0 || num<0){\\n            int remainder=num % 10;\\n            rev=rev *10 +remainder;\\n            num=num/10;\\n\\n        }\\n        return rev;\\n    }\\n    public static void main(String args[]){\\n        int num=123;\\nSystem.out.println(reverse(num));\\n    }\\n}"
                    },
                    {
                        "username": "khushi_hura",
                        "content": "there is some error in testcases, if expected is 0 and we correct it, it gives expected as a garbage value....plz check"
                    },
                    {
                        "username": "shiplu",
                        "content": "This should be an easy problem"
                    },
                    {
                        "username": "Jahaji",
                        "content": "learned 2 things about checking overflow:\\n\\nQ: Let, 10 is the highest number in our system, without doing 7+5, how can I know it will overflow?\\nA: 10 - 7 = 3, now 3 < 5, so it will overflow!\\n\\nQ: will 11 * 10 cross 100?\\nA: 100 / 11 = 9, now 9 < 10, so it will cross 100!\\nanother example,\\nwill 9 * 10  will cross 91?\\n91 /  9 = 10, now 10==10, so it will not cross 90. "
                    }
                ]
            },
            {
                "id": 1687230,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1686810,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1685869,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1678577,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1676769,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1673876,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1671818,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1671233,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1659166,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            },
            {
                "id": 1648487,
                "content": [
                    {
                        "username": "aanchal9580",
                        "content": "class Solution {\\n    public int reverse(int x) {\\n        if(x>= Integer.MAX_VALUE || x<=Integer.MIN_VALUE)\\n             return 0;\\n        int y=0;\\n         if(x>=0)\\n         y=x;\\n         else \\n         y=-x;\\n        int rev=0;\\n        while(y>0){\\n            int a=y%10;\\n            rev=rev*10+a;\\n            y=y/10;\\n        }\\n        if(x>=0)\\n        return rev;\\n        else\\n        return -rev;\\n      }\\n\\n        \\n}\\n----3 test cases are nt passed.what is the mistake?"
                    },
                    {
                        "username": "user7938G",
                        "content": "People have many good solution in python. \\n\\nanyway this my solution. \\n`class Solution:\\n    def reverse(self, x: int) -> int:\\n        x = str(x)\\n        x.rstrip(\\'0\\')\\n        x = int(x)\\n        pos = 1 \\n        neg = 1 \\n        lowest = -2**31 \\n        highest = (2**31)-1       \\n        if x < 0:\\n               neg = 1 *-1\\n        temp = str(abs(x))\\n        temp = int(temp[::-1])*pos*neg \\n        if temp < lowest:\\n             return 0 \\n        if temp > highest:\\n             return 0\\n        return temp `\\n"
                    },
                    {
                        "username": "vssingh80052377",
                        "content": "`class Solution {\\npublic:\\n    int reverse(int x) {\\n    int rev=0;\\n        while(x!=0){\\n            rev=rev*10 + x%10;\\n            x=x/10;\\n        }\\n        return rev;\\n    }\\n};\\n\\nWhat is problem i am a beginner so i cant understand the problem please resolved it.\\n \\nLine 6: Char 20: runtime error: signed integer overflow: 964632435 * 10 cannot be represented in type \\'int\\' (solution.cpp)\\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior prog_joined.cpp:15:20"
                    },
                    {
                        "username": "Obid0444",
                        "content": "Shoxrux akaaaaa"
                    },
                    {
                        "username": "ak2545307",
                        "content": "  int reverse(int x) {\\n        int ans = 0;\\n        while(x != 0){\\n            int digit = x%10;\\n            if(ans> INT_MAX /10 || ans< INT_MIN /10){\\n            return 0;\\n        }\\n        ans = (ans * 10)+ digit ;\\n        x /= 10;\\n    }\\n    return ans;\\n    }\\nplease reply best code"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "if(ans> INT_MAX /10 || ans< INT_MIN /10){\\nreturn 0;\\n}\\nput the above condition outside while loop and before return ans;"
                    },
                    {
                        "username": "taj_1",
                        "content": "how can we check the limit whether it is crossing integer or not??\\n"
                    },
                    {
                        "username": "ak_is_here",
                        "content": "Add following condition: if(rev > INT_MAX || rev < INT_MIN) {\\n            return 0;\\n        }\\nhere rev is the reverse integer."
                    },
                    {
                        "username": "Vedang_Nagar",
                        "content": " class Solution {\\n    public int reverse(int x) {\\n\\n        int answer = 0;\\n        \\n        \\n        while(x!=0){\\n            int digit = x%10;\\n            \\n\\n            if((answer > 2147483647/10) || (answer < -2147483647/10)){\\n                return 0;\\n            }\\n            answer = (answer * 10) + digit;\\n            x = x/10;\\n\\n        }\\n        return answer;\\n        \\n    }\\n}"
                    },
                    {
                        "username": "yashdeora",
                        "content": "Here is problem solution in Java, Python, C++ and C programming.\\n[https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html](https://www.gyangav.com/2022/11/leetcode-reverse-integer-problem-solution.html)"
                    },
                    {
                        "username": "NagarapuNagaVenkataSivaSaiRagh",
                        "content": "import java.util.*;\npublic class Main{\n    public static void main(String[] args){\n        int ans=0;\n        Scanner input=new Scanner(System.in);\n        int num=input.nextInt();\n        while(num>0){\n            int rem=num%10;\n            ans=(ans*10)+rem;\n            num=num/10;\n        }\n        System.out.println(ans);\n\n    }\n}\n\n\nWhat is the mistake in this code? Can anyone pls explain....... When i excecute the same code in other compilers, it working correctly but in leetcode it is throwing an error"
                    },
                    {
                        "username": "Neilczn",
                        "content": "You aren\\'t even following the basic template of the problem in Java. You\\'re not supposed to retrieve your value from System.in.\\n\\nIf your answer is int, a 32 bit value, and you continue to multiply it by 10, it is going to overflow if the reversed number is too big. The problem says you can\\'t use a 64 bit data type, so using long isn\\'t allowed either. This means you can\\'t check AFTER you multiply whether your number is larger than Integer.MAX_VALUE. Hint: what\\'s the largest value that\\'s safe to multiply by 10 without overflowing? Check before you multiply."
                    },
                    {
                        "username": "Anonymous1412",
                        "content": "great platform"
                    }
                ]
            }
        ]
    }
]