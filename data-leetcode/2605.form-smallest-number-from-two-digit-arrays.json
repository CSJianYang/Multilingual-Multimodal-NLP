[
    {
        "title": "Minimum Time to Eat All Grains",
        "question_content": null,
        "solutions": [],
        "discussions": []
    },
    {
        "title": "Form Smallest Number From Two Digit Arrays",
        "question_content": "Given two arrays of <strong>unique</strong> digits <code>nums1</code> and <code>nums2</code>, return <em>the <strong>smallest</strong> number that contains <strong>at least</strong> one digit from each array</em>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,1,3], nums2 = [5,7]\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [3,5,2,6], nums2 = [3,1,7]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The number 3 contains the digit 3 which exists in both arrays.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 9</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[i] &lt;= 9</code></li>\n\t<li>All digits in each array are <strong>unique</strong>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 3366601,
                "title": "c-easiest-solution-ever-for-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe are making a frequency array of values that are present in `nums1` and `nums2`. If the frequency of any element in this means it is present in both the array. So we will return the smallest number with frequecy 2. \\nOtherwise, we will fetch the smallest numbers from `nums1` andn `nums2` and will return the smallest number from their combination.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nApproach is simple. Read the intuition and see the code, you will understand the solution easily\\n\\n# Complexity\\n- Time complexity: O(1) : Size of both arrays is less than 10.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> freq(10);\\n        for(int i=0; i<nums1.size(); i++) freq[nums1[i]]++;\\n        for(int i=0; i<nums2.size(); i++) freq[nums2[i]]++;\\n            \\n        int k=2;\\n        int ans =0;\\n        int mn1 = *min_element(nums1.begin(), nums1.end());\\n        int mn2 = *min_element(nums2.begin(), nums2.end());\\n        for(int i=1; i<=9; i++)\\n            if(freq[i]==2) return i;\\n        \\n        if(mn2<mn1) swap(mn2, mn1);\\n        return mn1*10+mn2;\\n    }\\n};\\n// PLEASE UPVOTE THE SOLUTION IF IT HELPED YOU SOMEHOW\\n\\n```\\n![0a95fea4-64f4-4502-82aa-41db6d77c05c_1676054939.8270252.jpeg](https://assets.leetcode.com/users/images/8832d8f0-1407-45e1-95c6-eba200006155_1680365505.4458308.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> freq(10);\\n        for(int i=0; i<nums1.size(); i++) freq[nums1[i]]++;\\n        for(int i=0; i<nums2.size(); i++) freq[nums2[i]]++;\\n            \\n        int k=2;\\n        int ans =0;\\n        int mn1 = *min_element(nums1.begin(), nums1.end());\\n        int mn2 = *min_element(nums2.begin(), nums2.end());\\n        for(int i=1; i<=9; i++)\\n            if(freq[i]==2) return i;\\n        \\n        if(mn2<mn1) swap(mn2, mn1);\\n        return mn1*10+mn2;\\n    }\\n};\\n// PLEASE UPVOTE THE SOLUTION IF IT HELPED YOU SOMEHOW\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366413,
                "title": "intersection",
                "content": "\\n**Python 3**\\n```python\\nclass Solution:\\n    def minNumber(self, n1: List[int], n2: List[int]) -> int:\\n        common, m1, m2 = set(n1).intersection(n2), min(n1), min(n2)\\n        return min(common) if common else min(m1, m2) * 10 + max(m1, m2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def minNumber(self, n1: List[int], n2: List[int]) -> int:\\n        common, m1, m2 = set(n1).intersection(n2), min(n1), min(n2)\\n        return min(common) if common else min(m1, m2) * 10 + max(m1, m2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366407,
                "title": "java-python-3-using-set",
                "content": "\\n\\n```java\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> s1 = getHashSet(nums1), s2 = getHashSet(nums2);\\n        s1.retainAll(s2);\\n        if (!s1.isEmpty()) {\\n            return s1.stream().mapToInt(i -> i).min().getAsInt();\\n        }\\n        int a = IntStream.of(nums1).min().getAsInt();\\n        int b = IntStream.of(nums2).min().getAsInt();\\n        return Math.min(a, b) * 10 + Math.max(a, b);\\n    }\\n    private HashSet<Integer> getHashSet(int[] nums) {\\n        HashSet<Integer> set = new HashSet<>();\\n        for (int num : nums) {\\n            set.add(num);\\n        }\\n        return set;\\n    }\\n```\\n```python\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        if s1 & s2:\\n            return min(s1 & s2)\\n        a, b = min(nums1), min(nums2)\\n        return min(a, b) * 10 + max(a, b)\\n```\\n\\n**Analysis:**\\n\\nTime & space: `O(m + n)`, where `m = nums1.length, n = nums2.length`.",
                "solutionTags": [],
                "code": "```java\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> s1 = getHashSet(nums1), s2 = getHashSet(nums2);\\n        s1.retainAll(s2);\\n        if (!s1.isEmpty()) {\\n            return s1.stream().mapToInt(i -> i).min().getAsInt();\\n        }\\n        int a = IntStream.of(nums1).min().getAsInt();\\n        int b = IntStream.of(nums2).min().getAsInt();\\n        return Math.min(a, b) * 10 + Math.max(a, b);\\n    }\\n    private HashSet<Integer> getHashSet(int[] nums) {\\n        HashSet<Integer> set = new HashSet<>();\\n        for (int num : nums) {\\n            set.add(num);\\n        }\\n        return set;\\n    }\\n```\n```python\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        if s1 & s2:\\n            return min(s1 & s2)\\n        a, b = min(nums1), min(nums2)\\n        return min(a, b) * 10 + max(a, b)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3366482,
                "title": "easiest-solution-in-n-2-no-fancy-solution-4-line-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int n=0,ans=INT_MAX;\\n        \\n        for(auto i:nums1){\\n            for(auto j:nums2){\\n                if(i==j) n=i;\\n                else n=min(i*10+j,j*10+i);\\n                ans=min(ans,n);\\n                \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int n=0,ans=INT_MAX;\\n        \\n        for(auto i:nums1){\\n            for(auto j:nums2){\\n                if(i==j) n=i;\\n                else n=min(i*10+j,j*10+i);\\n                ans=min(ans,n);\\n                \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366406,
                "title": "easy-short-clean-java-solution",
                "content": "\\n```java []\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int val = Integer.MAX_VALUE;\\n        for(int i=0; i<nums1.length; i++){\\n            for(int j=0; j<nums2.length; j++){\\n                if(nums1[i] == nums2[j])  val = Math.min(val,nums1[i]);\\n                val = Math.min(val,Math.min(nums1[i]*10+nums2[j],nums2[j]*10+nums1[i]));\\n            }\\n        }\\n        return val;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int val = Integer.MAX_VALUE;\\n        for(int i=0; i<nums1.length; i++){\\n            for(int j=0; j<nums2.length; j++){\\n                if(nums1[i] == nums2[j])  val = Math.min(val,nums1[i]);\\n                val = Math.min(val,Math.min(nums1[i]*10+nums2[j],nums2[j]*10+nums1[i]));\\n            }\\n        }\\n        return val;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366838,
                "title": "100-faster-and-easy-map-solution-with-explanation-using-c-my-approach-during-contest",
                "content": "**Step 1** : Sort both the Vectors.\\n\\n**Step 2** : Store the elements of nums1 into a map.\\n\\n**Step 3** : Now Traverse The map for each element in nums2 , if same element is found in both vectors return that element directly. \\n\\n**Step 4** : Simply return the nums1[0]*10 + nums2[0]   **if(nums1[0] < nums2[0])**\\nand nums2[0]*10 + nums1[0] **if(nums1[0] > nums2[0])**\\n\\n```\\nclass Solution {\\npublic:\\nint minNumber(vector<int> &nums1, vector<int> &nums2) {\\n\\n\\n    int n1 = nums1.size();\\n    int n2 = nums2.size();\\n    \\n    sort(nums1.begin(), nums1.end());\\n    sort(nums2.begin(), nums2.end());\\n    \\n    \\n    map<int,int>map;   //Store the element of nums1 into a map.\\n    \\n    \\n    for(int i=0;i<n1;i++){\\n        map[nums1[i]]++;\\n    }\\n    \\n    // Now Traverse The map for each element in nums2 , if same element is found in both array return that element directly. \\n    for(int i=0;i<n2;i++){\\n        if(map.find(nums2[i])!=map.end()){\\n            return nums2[i];\\n        }\\n    }\\n\\n\\n \\n    if(nums1[0] < nums2[0]){\\n        return nums1[0]*10 + nums2[0];\\n    }\\n    else{\\n        return nums2[0]*10 + nums1[0];\\n    }\\n\\n\\n\\n}\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint minNumber(vector<int> &nums1, vector<int> &nums2) {\\n\\n\\n    int n1 = nums1.size();\\n    int n2 = nums2.size();\\n    \\n    sort(nums1.begin(), nums1.end());\\n    sort(nums2.begin(), nums2.end());\\n    \\n    \\n    map<int,int>map;   //Store the element of nums1 into a map.\\n    \\n    \\n    for(int i=0;i<n1;i++){\\n        map[nums1[i]]++;\\n    }\\n    \\n    // Now Traverse The map for each element in nums2 , if same element is found in both array return that element directly. \\n    for(int i=0;i<n2;i++){\\n        if(map.find(nums2[i])!=map.end()){\\n            return nums2[i];\\n        }\\n    }\\n\\n\\n \\n    if(nums1[0] < nums2[0]){\\n        return nums1[0]*10 + nums2[0];\\n    }\\n    else{\\n        return nums2[0]*10 + nums1[0];\\n    }\\n\\n\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366789,
                "title": "simple-solution-with-1-won-extra-tip-to-remember-for-life-which-i-bet-no-won-will-provide",
                "content": "# Intuition\\nTHODA GYAN THODI BAKCHODI THODA CODE\\n\\n# Approach\\nSS\\nJUST SMILE AND SOLVE\\n\\n# Complexity\\nNOTHING COMPLEX\\n\\n# EXTRA TIP(GYAN)\\n![Bakchodi 1.jpg](https://assets.leetcode.com/users/images/68ea9a42-bce9-4ed3-85f3-843bd9e31ab6_1680367347.3906567.jpeg)\\n\\n\\n# POORA JAVA Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int sm=10,sm2=10,p=Integer.MAX_VALUE;\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            if(sm>nums1[i])\\n                sm=nums1[i];\\n        }\\n         for(int i=0;i<nums2.length;i++)\\n        {\\n            if(sm2>nums2[i])\\n                sm2=nums2[i];\\n        }\\n        int x=Math.max(sm,sm2);\\n        int y=Math.min(sm,sm2);\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            for(int j=0;j<nums2.length;j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    if(p>nums1[i])\\n                        p=nums1[i];\\n                }\\n            }\\n        }\\n        return  Math.min(y*10+x,p);\\n        \\n        \\n    }\\n}\\n```\\n# THODI VINATI\\n![Bakchodi 2.jpeg](https://assets.leetcode.com/users/images/91bbdfde-02da-4b55-a3d1-669c0813fa29_1680367384.861429.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "Suffix Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int sm=10,sm2=10,p=Integer.MAX_VALUE;\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            if(sm>nums1[i])\\n                sm=nums1[i];\\n        }\\n         for(int i=0;i<nums2.length;i++)\\n        {\\n            if(sm2>nums2[i])\\n                sm2=nums2[i];\\n        }\\n        int x=Math.max(sm,sm2);\\n        int y=Math.min(sm,sm2);\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            for(int j=0;j<nums2.length;j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    if(p>nums1[i])\\n                        p=nums1[i];\\n                }\\n            }\\n        }\\n        return  Math.min(y*10+x,p);\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385343,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        small1, small2, common = min(nums1), min(nums2), set(nums1) & set(nums2)\\n        output1, output2 = int(f\"{small1}{small2}\"), int(f\"{small2}{small1}\")\\n        if common:\\n            common = min(common)\\n            if common < output1 and common < output2:\\n                return common\\n        if small1 < small2:\\n            return output1\\n        return output2\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        small1, small2, common = min(nums1), min(nums2), set(nums1) & set(nums2)\\n        output1, output2 = int(f\"{small1}{small2}\"), int(f\"{small2}{small1}\")\\n        if common:\\n            common = min(common)\\n            if common < output1 and common < output2:\\n                return common\\n        if small1 < small2:\\n            return output1\\n        return output2\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367793,
                "title": "python-3-3-lines-set-t-m-100-100",
                "content": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        \\n        if mn := min(set(nums1)&set(nums2),\\n                    default = None): return mn      #  <-- one-digit case\\n\\n        d1, d2 = min(nums1), min(nums2)             #  <-- two-digit case\\n        return 10*d1+d2 if d1 < d2 else 10*d2+d1    #\\n```\\n[https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/submissions/926220757/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N1+N2*) and space complexity is *O*(*N*).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        \\n        if mn := min(set(nums1)&set(nums2),\\n                    default = None): return mn      #  <-- one-digit case\\n\\n        d1, d2 = min(nums1), min(nums2)             #  <-- two-digit case\\n        return 10*d1+d2 if d1 < d2 else 10*d2+d1    #\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366805,
                "title": "easiest-java-solution",
                "content": "![b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png](https://assets.leetcode.com/users/images/f2ae0a30-985d-4475-b60d-cf2cb9354b0a_1680367496.4392107.png)\\nFastest Java code. Please like and comment.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> set = new HashSet<>();\\n        int min1=Integer.MAX_VALUE,min2=Integer.MAX_VALUE,min=Integer.MAX_VALUE;\\n        boolean temp = false;\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            min1 = Math.min(min1,nums1[i]);\\n            set.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++)\\n        {\\n            min2 = Math.min(min2,nums2[i]);\\n            if(set.contains(nums2[i])) \\n            {\\n                min = Math.min(min,nums2[i]);\\n                temp = true;\\n            }\\n        }\\n        if(temp) return min;\\n        if(min1<min2)\\n        {\\n            return min1*10+min2;\\n        }\\n        else\\n            return min2*10+min1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> set = new HashSet<>();\\n        int min1=Integer.MAX_VALUE,min2=Integer.MAX_VALUE,min=Integer.MAX_VALUE;\\n        boolean temp = false;\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            min1 = Math.min(min1,nums1[i]);\\n            set.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++)\\n        {\\n            min2 = Math.min(min2,nums2[i]);\\n            if(set.contains(nums2[i])) \\n            {\\n                min = Math.min(min,nums2[i]);\\n                temp = true;\\n            }\\n        }\\n        if(temp) return min;\\n        if(min1<min2)\\n        {\\n            return min1*10+min2;\\n        }\\n        else\\n            return min2*10+min1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3503533,
                "title": "optimized-c-easy-to-understand",
                "content": "check if a no present in both array if present than return minimum.\\nelse make smallest possible no using nums1[i] && nums2[j];\\n\\n# Complexity\\n- Time complexity:\\nO(n+m+81);\\n\\n- Space complexity:\\nO(10+10);\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v1(10,0),v2(10,0);\\n        for(auto &i: nums1)v1[i]++;\\n        for(auto &i: nums2)v2[i]++;\\n        int i,j;\\n        for(i = 1; i <= 9; i++){\\n            if(v1[i]&&v2[i])return i;\\n        }\\n        int ans = 100;\\n        for(i =1; i <= 9; i++){\\n            if(v1[i]){\\n                for(j = 1; j <= 9; j++){\\n                    if(v2[j]){\\n                        ans = min({i*10+j,j*10+i,ans});\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v1(10,0),v2(10,0);\\n        for(auto &i: nums1)v1[i]++;\\n        for(auto &i: nums2)v2[i]++;\\n        int i,j;\\n        for(i = 1; i <= 9; i++){\\n            if(v1[i]&&v2[i])return i;\\n        }\\n        int ans = 100;\\n        for(i =1; i <= 9; i++){\\n            if(v1[i]){\\n                for(j = 1; j <= 9; j++){\\n                    if(v2[j]){\\n                        ans = min({i*10+j,j*10+i,ans});\\n                    }\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391461,
                "title": "java-solution",
                "content": "**JAVA SOLUTION**\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int ans=Integer.MAX_VALUE;\\n        for(int i = 0; i<nums1.length; i++){\\n            for(int j = 0; j<nums2.length; j++){\\n                if(nums1[i]==nums2[j])\\n                 ans = Math.min(ans,nums2[j]);\\n                else{\\n                    ans = Math.min(nums1[i]*10+nums2[j], ans);\\n                    ans = Math.min(nums2[j]*10 + nums1[i], ans);\\n                }\\n            }\\n        }\\n         return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int ans=Integer.MAX_VALUE;\\n        for(int i = 0; i<nums1.length; i++){\\n            for(int j = 0; j<nums2.length; j++){\\n                if(nums1[i]==nums2[j])\\n                 ans = Math.min(ans,nums2[j]);\\n                else{\\n                    ans = Math.min(nums1[i]*10+nums2[j], ans);\\n                    ans = Math.min(nums2[j]*10 + nums1[i], ans);\\n                }\\n            }\\n        }\\n         return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3368216,
                "title": "python-o-n-very-easy-with-explanation-100-faster",
                "content": "# Intuition\\nDescribed the thought process and solution approach in the comments of the code.\\n\\n- Time complexity: o(n)\\n\\n- Space complexity: o(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        # Create a list of common numbers using \\'set\\' and \\'&\\'\\n        common = list(set(nums1) & set(nums2))\\n        # Check if there is any common element\\n        # Since it is given that the 1 <= nums1[i], nums2[i] <= 9, \\n        # we can confirm that the common element will be smaller\\n        # than creating a smalll number using two elements\\n        if common:\\n            # Ensure that we return the smallest common element\\n            # I have seen solutions where sort is used instead of using min\\n            # Time complexity when using sort: O(nlogn)\\n            # Time complexity when using min: O(n)\\n            return min(common)\\n\\n        # If there is no common element, we will have to create a \\n        # new 2-digit element such that we get the smallest value\\n        min1 = min(nums1)\\n        min2 = min(nums2)\\n        \\n        if min1 > min2:\\n            res = min2*10 + min1\\n        else:\\n            res = min1* 10 + min2\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Sort"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        # Create a list of common numbers using \\'set\\' and \\'&\\'\\n        common = list(set(nums1) & set(nums2))\\n        # Check if there is any common element\\n        # Since it is given that the 1 <= nums1[i], nums2[i] <= 9, \\n        # we can confirm that the common element will be smaller\\n        # than creating a smalll number using two elements\\n        if common:\\n            # Ensure that we return the smallest common element\\n            # I have seen solutions where sort is used instead of using min\\n            # Time complexity when using sort: O(nlogn)\\n            # Time complexity when using min: O(n)\\n            return min(common)\\n\\n        # If there is no common element, we will have to create a \\n        # new 2-digit element such that we get the smallest value\\n        min1 = min(nums1)\\n        min2 = min(nums2)\\n        \\n        if min1 > min2:\\n            res = min2*10 + min1\\n        else:\\n            res = min1* 10 + min2\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367115,
                "title": "python3-check-intersection",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/1dc118daa80cfe1161dcee412e7c3536970ca60d) for solutions of biweely 101. \\n\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        inter = set(nums1) & set(nums2)\\n        if inter: return min(inter)\\n        d1 = min(nums1)\\n        d2 = min(nums2)\\n        return 10*d1+d2 if d1 < d2 else 10*d2+d1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        inter = set(nums1) & set(nums2)\\n        if inter: return min(inter)\\n        d1 = min(nums1)\\n        d2 = min(nums2)\\n        return 10*d1+d2 if d1 < d2 else 10*d2+d1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366512,
                "title": "python3-solution-well-explained-easy-clear",
                "content": "# Intuition:\\nThe problem asks us to find the smallest number that can be formed by concatenating two numbers, one from each of the given lists, nums1 and nums2. If there are common elements in both the lists, the smallest such element can be used to form the smallest number. If there are no common elements, then we need to choose the minimum elements from each list to form the smallest number.\\n\\n# Approach:\\nThe given solution has two parts. The first part checks if there are any common elements in the two lists. If there are, it selects the smallest common element as the starting digit of the smallest number. If there are no common elements, the second part selects the minimum element from each list to form the smallest number.\\n\\nThe code first initializes n as 10, a value that is higher than any possible element in the given lists. It then iterates through each element of nums1 and checks if it is present in nums2. If it is, n is updated to the minimum of its current value and the common element. If there is a common element, the method returns the value of n as the starting digit of the smallest number.\\n\\nIf there are no common elements, the method constructs two possible numbers by concatenating the minimum elements from nums1 and nums2 in different orders. It then returns the minimum of these two numbers as the smallest number.\\n\\n# Complexity:\\n# Time complexity \\nThe time complexity of this solution is O(mn), where m and n are the lengths of nums1 and nums2, respectively. This is because the code iterates through each element of nums1 and checks if it is present in nums2, resulting in an inner loop that runs m*n times in the worst case.\\n\\n# Space complexity\\nThe space complexity of this solution is O(1), because it only uses a fixed amount of additional space to store the variable n.\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        n=10\\n        for i in nums1:\\n            if i in nums2:\\n                n=min(n,i)\\n        if n!=10:\\n            return n\\n        \\n        x=min(nums1)\\n        y=min(nums2)\\n        a=x*10+y\\n        b=y*10+x\\n        return min(a,b)\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        n=10\\n        for i in nums1:\\n            if i in nums2:\\n                n=min(n,i)\\n        if n!=10:\\n            return n\\n        \\n        x=min(nums1)\\n        y=min(nums2)\\n        a=x*10+y\\n        b=y*10+x\\n        return min(a,b)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366508,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int a=nums1[0];\\n        int b=nums2[0];\\n        HashSet<Integer> hs1=new HashSet<>();\\n        HashSet<Integer> hs2=new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            hs1.add(nums1[i]);\\n        }\\n         for(int i=0;i<nums2.length;i++){\\n            hs2.add(nums2[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            if(hs1.contains(nums2[i]))\\n                return nums2[i];\\n        }\\n        if(a==b)\\n            return a;\\n        \\n        if(a<b)\\n        return (a*10)+b;\\n        \\n        return (b*10)+a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int a=nums1[0];\\n        int b=nums2[0];\\n        HashSet<Integer> hs1=new HashSet<>();\\n        HashSet<Integer> hs2=new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            hs1.add(nums1[i]);\\n        }\\n         for(int i=0;i<nums2.length;i++){\\n            hs2.add(nums2[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            if(hs1.contains(nums2[i]))\\n                return nums2[i];\\n        }\\n        if(a==b)\\n            return a;\\n        \\n        if(a<b)\\n        return (a*10)+b;\\n        \\n        return (b*10)+a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366473,
                "title": "c-easy-and-concise-binary-search-and-sorting-o-n-log-n-time-complexity",
                "content": "# Complexity\\n- Time complexity:\\nO(n log(n)) \\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        int n = nums1.size();\\n        int m = nums2.size();\\n        \\n        for(int i=0; i<n; i++) {\\n            int s = 0;\\n            int e = m-1;\\n            while(s <= e) {\\n                int mid = s+(e-s)/2;\\n                if(nums1[i] == nums2[mid]) return nums1[i];\\n                else if(nums1[i] > nums2[mid]) s = mid+1;\\n                else e = mid-1;\\n            }\\n        }\\n        \\n        int min1 = nums1[0];\\n        int min2 = nums2[0];\\n        \\n        if(min1 > min2) return min2*10 + min1;\\n        return min1*10 + min2;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        int n = nums1.size();\\n        int m = nums2.size();\\n        \\n        for(int i=0; i<n; i++) {\\n            int s = 0;\\n            int e = m-1;\\n            while(s <= e) {\\n                int mid = s+(e-s)/2;\\n                if(nums1[i] == nums2[mid]) return nums1[i];\\n                else if(nums1[i] > nums2[mid]) s = mid+1;\\n                else e = mid-1;\\n            }\\n        }\\n        \\n        int min1 = nums1[0];\\n        int min2 = nums2[0];\\n        \\n        if(min1 > min2) return min2*10 + min1;\\n        return min1*10 + min2;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3656099,
                "title": "simple-solution-in-python",
                "content": "\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort()\\n        nums2.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n                break\\n        else:\\n            return min(nums1[0]*10+nums2[0],nums2[0]*10+nums1[0])\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort()\\n        nums2.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n                break\\n        else:\\n            return min(nums1[0]*10+nums2[0],nums2[0]*10+nums1[0])\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3472051,
                "title": "form-smallest-number-from-two-digit-arrays-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int i=0, j=0;\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        while(i<nums1.size() && j<nums2.size())\\n        {\\n            if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            else if(nums1[i]>nums2[j])\\n                j++;\\n            else\\n                i++;\\n        }\\n        if(nums1[0]<nums2[0])\\n            return nums1[0]*10+nums2[0];\\n        return nums2[0]*10+nums1[0];\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/1db5be82-d91f-4d49-9e59-72c2d1404cfa_1682917669.6928067.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int i=0, j=0;\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        while(i<nums1.size() && j<nums2.size())\\n        {\\n            if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            else if(nums1[i]>nums2[j])\\n                j++;\\n            else\\n                i++;\\n        }\\n        if(nums1[0]<nums2[0])\\n            return nums1[0]*10+nums2[0];\\n        return nums2[0]*10+nums1[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404618,
                "title": "c-easy-to-understand-math-short-sweet",
                "content": "````\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& v1, vector<int>& v2) {\\n        vector<int> v(10,0);\\n        for(auto &i: v1)v[i]++;\\n        for(auto &i: v2)v[i]++;\\n        for(int i = 1; i < 10; i++)if(v[i]>1)return i;\\n        sort(v1.begin(),v1.end());\\n        sort(v2.begin(),v2.end());\\n        return min({v1[0]*10+v2[0],v1[0]+v2[0]*10});\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "Sorting"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& v1, vector<int>& v2) {\\n        vector<int> v(10,0);\\n        for(auto &i: v1)v[i]++;\\n        for(auto &i: v2)v[i]++;\\n        for(int i = 1; i < 10; i++)if(v[i]>1)return i;\\n        sort(v1.begin(),v1.end());\\n        sort(v2.begin(),v2.end());\\n        return min({v1[0]*10+v2[0],v1[0]+v2[0]*10});\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382326,
                "title": "simple-approch-with-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int s1 = Integer.MAX_VALUE,s2=Integer.MAX_VALUE,ans=0;\\n\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        HashSet<Integer> set = new HashSet<>();\\n        for(int i:nums2)\\n        {\\n            set.add(i);\\n        }\\n\\n        for(int i:nums1)\\n        {\\n            if(set.contains(i)) return i;\\n        }\\n\\n        ans = nums1[0]*10 + nums2[0];\\n        int ans2 = nums2[0]*10 + nums1[0];\\n\\n        return Math.min(ans,ans2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int s1 = Integer.MAX_VALUE,s2=Integer.MAX_VALUE,ans=0;\\n\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        HashSet<Integer> set = new HashSet<>();\\n        for(int i:nums2)\\n        {\\n            set.add(i);\\n        }\\n\\n        for(int i:nums1)\\n        {\\n            if(set.contains(i)) return i;\\n        }\\n\\n        ans = nums1[0]*10 + nums2[0];\\n        int ans2 = nums2[0]*10 + nums1[0];\\n\\n        return Math.min(ans,ans2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3370231,
                "title": "python-elegant-short-set-intersection",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, first: List[int], second: List[int]) -> int:\\n        a, b = sorted((min(first), min(second)))\\n        c = min(set(first) & set(second), default=maxsize)\\n        return min(c, a * 10 + b)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, first: List[int], second: List[int]) -> int:\\n        a, b = sorted((min(first), min(second)))\\n        c = min(set(first) & set(second), default=maxsize)\\n        return min(c, a * 10 + b)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367140,
                "title": "easy-c-solution-beats-100-using-unordered-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nEasy map solution...\\n1. check for the the number which is present in both array and it must be smallest number for that sort the array in starting and then map the anyone array.\\n2. while checking for the presence in both if it\\'s find true return at that point.\\n3. final case when the array does not have any common number then two cases are possible  i.e nums1 = [1,2,4] nums2= [5,6,7] nums1[0]*10 + nums[0] = 15 or nums2[0]*10 + nums1[0]= 51 since we have to return the minimum so return the minimum of both\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(nlogn)  -> for sortting the array O(n) for liner mapping \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        unordered_map<int,int> mp1;\\n         sort(nums1.begin(),nums1.end());\\n         sort(nums2.begin(),nums2.end());\\n        for(auto it : nums1)\\n        {\\n            mp1[it]++;\\n        }\\n        for(auto it : nums2)\\n        {\\n            if(mp1[it] != 0)\\n            return it;\\n        }\\n     return min(nums1[0]*10 + nums2[0],nums2[0]*10 + nums1[0]);        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        unordered_map<int,int> mp1;\\n         sort(nums1.begin(),nums1.end());\\n         sort(nums2.begin(),nums2.end());\\n        for(auto it : nums1)\\n        {\\n            mp1[it]++;\\n        }\\n        for(auto it : nums2)\\n        {\\n            if(mp1[it] != 0)\\n            return it;\\n        }\\n     return min(nums1[0]*10 + nums2[0],nums2[0]*10 + nums1[0]);        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366785,
                "title": "javascript-direct-way-61ms",
                "content": "if have intersection, find the smallest intersected digit, otherwise, pick smallest from both array\\n```\\nconst minNumber = (a, b) => {\\n    let both = [];\\n    for (const x of a) {\\n        if (b.includes(x)) both.push(x);\\n    }\\n    if (both.length > 0) return Math.min(...both);\\n    let pa = Math.min(...a), pb = Math.min(...b);\\n    return pa < pb ? pa + \"\" + pb : pb + \"\" + pa; \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nconst minNumber = (a, b) => {\\n    let both = [];\\n    for (const x of a) {\\n        if (b.includes(x)) both.push(x);\\n    }\\n    if (both.length > 0) return Math.min(...both);\\n    let pa = Math.min(...a), pb = Math.min(...b);\\n    return pa < pb ? pa + \"\" + pb : pb + \"\" + pa; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366706,
                "title": "java-hashset-explained",
                "content": "## Approach explained using comments:\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        // Create two sets to record the digits from nums1 and nums2\\n        Set<Integer> n1 = new HashSet<>();\\n        Set<Integer> n2 = new HashSet<>();\\n        for (int i : nums1) n1.add(i);\\n        for (int i : nums2) n2.add(i);\\n\\n        // Time to get common minimum digit\\n        int min = 10;\\n        for (int i : n1) {  // iterate on set n1\\n            // if that digit is present in set n2\\n            if (n2.contains(i)) {\\n                // update the common minimum\\n                min = Math.min(min, i);\\n            }\\n        }\\n        // if the common minimum was updated, \\n        // it won\\'t remain as the default initialized value\\n        // so return it\\n        if (min != 10) {\\n            return min;\\n        }\\n        \\n        // Otherwise sort both the arrays\\n        Arrays.sort(nums1); \\n        Arrays.sort(nums2);\\n        // and form the minimum number using the two numbers\\n        // at the 0-th index of both the sorted arrays\\n        int ans = Math.min(nums1[0], nums2[0]) * 10 + Math.max(nums1[0], nums2[0]);\\n        return ans;     // return the number\\n    }\\n}\\n\\n// This can be done without sorting as well, \\n// by iterating over both the arrays and\\n// recording the minimum digit from both arrays\\n```\\n---\\n\\n### Clean solution:\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> n1 = new HashSet<>();\\n        Set<Integer> n2 = new HashSet<>();\\n        for (int i : nums1) n1.add(i);\\n        for (int i : nums2) n2.add(i);\\n\\n        int min = 10;\\n        for (int i : n1) { \\n            if (n2.contains(i)) \\n                min = Math.min(min, i);\\n            \\n        if (min != 10) \\n            return min;\\n        \\n        Arrays.sort(nums1); \\n        Arrays.sort(nums2);\\n        int a = Math.min(nums1[0], nums2[0]);\\n        int b = Math.max(nums1[0], nums2[0]);\\n        return a * 10 + b;     \\n    }\\n}\\n```\\n##### Time complexity: $$O(2*9) + O(9) + O(2*9.log(9)) => O(n)$$\\n##### Space complexity: $$O(2*9) => O(n)$$\\n> $$n = 9$$ at worst case.",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        // Create two sets to record the digits from nums1 and nums2\\n        Set<Integer> n1 = new HashSet<>();\\n        Set<Integer> n2 = new HashSet<>();\\n        for (int i : nums1) n1.add(i);\\n        for (int i : nums2) n2.add(i);\\n\\n        // Time to get common minimum digit\\n        int min = 10;\\n        for (int i : n1) {  // iterate on set n1\\n            // if that digit is present in set n2\\n            if (n2.contains(i)) {\\n                // update the common minimum\\n                min = Math.min(min, i);\\n            }\\n        }\\n        // if the common minimum was updated, \\n        // it won\\'t remain as the default initialized value\\n        // so return it\\n        if (min != 10) {\\n            return min;\\n        }\\n        \\n        // Otherwise sort both the arrays\\n        Arrays.sort(nums1); \\n        Arrays.sort(nums2);\\n        // and form the minimum number using the two numbers\\n        // at the 0-th index of both the sorted arrays\\n        int ans = Math.min(nums1[0], nums2[0]) * 10 + Math.max(nums1[0], nums2[0]);\\n        return ans;     // return the number\\n    }\\n}\\n\\n// This can be done without sorting as well, \\n// by iterating over both the arrays and\\n// recording the minimum digit from both arrays\\n```\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> n1 = new HashSet<>();\\n        Set<Integer> n2 = new HashSet<>();\\n        for (int i : nums1) n1.add(i);\\n        for (int i : nums2) n2.add(i);\\n\\n        int min = 10;\\n        for (int i : n1) { \\n            if (n2.contains(i)) \\n                min = Math.min(min, i);\\n            \\n        if (min != 10) \\n            return min;\\n        \\n        Arrays.sort(nums1); \\n        Arrays.sort(nums2);\\n        int a = Math.min(nums1[0], nums2[0]);\\n        int b = Math.max(nums1[0], nums2[0]);\\n        return a * 10 + b;     \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366679,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        for(int i=0; i<nums1.size(); i++) {\\n            for(int j=0; j<nums2.size(); j++) {\\n                if(nums1[i] == nums2[j]) return nums1[i];\\n            }\\n        }\\n        int first = *min_element(nums1.begin(), nums1.end());\\n        int second = *min_element(nums2.begin(), nums2.end());\\n        int ans = min(first * 10 + second, second * 10 + first);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        for(int i=0; i<nums1.size(); i++) {\\n            for(int j=0; j<nums2.size(); j++) {\\n                if(nums1[i] == nums2[j]) return nums1[i];\\n            }\\n        }\\n        int first = *min_element(nums1.begin(), nums1.end());\\n        int second = *min_element(nums2.begin(), nums2.end());\\n        int ans = min(first * 10 + second, second * 10 + first);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366658,
                "title": "easy-c",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> x(10,0),y(10,0);\\n        int mn1=10,mn2=10;\\n        for(int i=0;i<nums1.size();i++){\\n            x[nums1[i]]=1;\\n            mn1=min(mn1,nums1[i]);\\n        }\\n        for(int i=0;i<nums2.size();i++){\\n            y[nums2[i]]=1;\\n            mn2=min(mn2,nums2[i]);\\n        }\\n        for(int i=0;i<10;i++){\\n            if(x[i]&&y[i]) return i;\\n        }\\n        return min(mn1,mn2)*10+max(mn1,mn2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> x(10,0),y(10,0);\\n        int mn1=10,mn2=10;\\n        for(int i=0;i<nums1.size();i++){\\n            x[nums1[i]]=1;\\n            mn1=min(mn1,nums1[i]);\\n        }\\n        for(int i=0;i<nums2.size();i++){\\n            y[nums2[i]]=1;\\n            mn2=min(mn2,nums2[i]);\\n        }\\n        for(int i=0;i<10;i++){\\n            if(x[i]&&y[i]) return i;\\n        }\\n        return min(mn1,mn2)*10+max(mn1,mn2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366558,
                "title": "java-take-intersection-self-explanatory",
                "content": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n\\t   //Sorted to find smallest element which has elements in both arrays\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        \\n        Set<Integer> set = new HashSet<>(); //To avoid duplicate values\\n\\t\\t\\n        for(int i : nums1) set.add(i);\\n        for(int n : nums2) if(set.contains(n)) return n; //If any common value found from both arrays, return it\\n        \\n       \\n       if(nums1[0] < nums2[0]) return nums1[0] * 10 + nums2[0];\\n       return nums2[0] * 10 + nums1[0];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n\\t   //Sorted to find smallest element which has elements in both arrays\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        \\n        Set<Integer> set = new HashSet<>(); //To avoid duplicate values\\n\\t\\t\\n        for(int i : nums1) set.add(i);\\n        for(int n : nums2) if(set.contains(n)) return n; //If any common value found from both arrays, return it\\n        \\n       \\n       if(nums1[0] < nums2[0]) return nums1[0] * 10 + nums2[0];\\n       return nums2[0] * 10 + nums1[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366511,
                "title": "easy-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>mp;\\n        for(auto x: nums1) mp[x]++;\\n        for(auto x: nums2) mp[x]++;\\n        int mn1=*min_element(nums1.begin(),nums1.end());\\n        int mn2=*min_element(nums2.begin(),nums2.end());\\n        for(auto x: mp){\\n            if(x.second>1) return x.first;\\n        }\\n        string s;\\n        if(mn1<mn2) s=to_string(mn1)+ to_string(mn2);\\n        else s=to_string(mn2)+ to_string(mn1);\\n        return stoi(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>mp;\\n        for(auto x: nums1) mp[x]++;\\n        for(auto x: nums2) mp[x]++;\\n        int mn1=*min_element(nums1.begin(),nums1.end());\\n        int mn2=*min_element(nums2.begin(),nums2.end());\\n        for(auto x: mp){\\n            if(x.second>1) return x.first;\\n        }\\n        string s;\\n        if(mn1<mn2) s=to_string(mn1)+ to_string(mn2);\\n        else s=to_string(mn2)+ to_string(mn1);\\n        return stoi(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3796688,
                "title": "beats-98-in-java",
                "content": "# Intuition\\nSort both the arrays, if there is a similar element return it or return min*10 +max elements\\n# Complexity\\n- Time complexity:\\nO(N^2)\\n\\nPls upvote...!\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n   int ans=0;\\n   Arrays.sort(nums1);Arrays.sort(nums2);\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j]) return nums1[i];\\n        }\\n    }\\n    int min=Math.min(nums1[0],nums2[0]);\\n    int max=Math.max(nums1[0],nums2[0]);\\n    return (min*10 +max);\\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n   int ans=0;\\n   Arrays.sort(nums1);Arrays.sort(nums2);\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j]) return nums1[i];\\n        }\\n    }\\n    int min=Math.min(nums1[0],nums2[0]);\\n    int max=Math.max(nums1[0],nums2[0]);\\n    return (min*10 +max);\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793989,
                "title": "beginner-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int min1=nums1[0];\\n        Arrays.sort(nums2);\\n        int min2=nums2[0];\\n        HashSet<Integer> set= new HashSet<>();\\n        for(int n1: nums1) set.add(n1);\\n        for(int n2: nums2) {\\n            if(set.contains(n2))\\n                 return n2;\\n        }\\n  \\n       return min1<min2? min1*10+min2:min2*10+min1;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int min1=nums1[0];\\n        Arrays.sort(nums2);\\n        int min2=nums2[0];\\n        HashSet<Integer> set= new HashSet<>();\\n        for(int n1: nums1) set.add(n1);\\n        for(int n2: nums2) {\\n            if(set.contains(n2))\\n                 return n2;\\n        }\\n  \\n       return min1<min2? min1*10+min2:min2*10+min1;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3674880,
                "title": "the-best-memory-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Let\\'s sort the array 1\\n2. Using the for loop, we will find out if there is at least one minimum number of array 1 in array 2\\n3. If array 2 contains at least one minimum number from array 1, we will return it\\n4. Otherwise, we will find the minimum number of the second array\\n5. Finally we find the minimum number composed of the first element of the sorted array 1 and the minimum number of the array 2\\n\\n\\n# Code\\n```\\nfunction minNumber(nums1: number[], nums2: number[]): number {\\n    nums1.sort((a, b) => a - b);\\n\\n    for (let i = 0; i < nums1.length; i++) {\\n        if (nums2.includes(nums1[i])) {\\n            return nums1[i];\\n        }\\n    }\\n\\n    const firstChar = nums1[0];\\n    const secondChar = Math.min(...nums2);\\n    return Math.min(+`${firstChar}${secondChar}`, +`${secondChar}${firstChar}`)\\n};\\n```\\n\\n![form-smallest-number-from-two-digit-arrays.png](https://assets.leetcode.com/users/images/ffccc7cd-8a74-4834-8b05-ff8f511638ca_1687547843.8634896.png)",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction minNumber(nums1: number[], nums2: number[]): number {\\n    nums1.sort((a, b) => a - b);\\n\\n    for (let i = 0; i < nums1.length; i++) {\\n        if (nums2.includes(nums1[i])) {\\n            return nums1[i];\\n        }\\n    }\\n\\n    const firstChar = nums1[0];\\n    const secondChar = Math.min(...nums2);\\n    return Math.min(+`${firstChar}${secondChar}`, +`${secondChar}${firstChar}`)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438688,
                "title": "very-easy",
                "content": "\\n# Code\\n```\\n\\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v(10);\\n        for(int i=0;i<nums1.size();i++) v[nums1[i]]++;\\n        for(int i=0;i<nums2.size();i++) v[nums2[i]]++;\\n\\n         for(int i=1;i<v.size();i++){\\n             if(v[i]==2) return i;\\n         }\\n         int ans =0;\\n         int a = *min_element(nums1.begin(), nums1.end());\\n        int b = *min_element(nums2.begin(), nums2.end());\\n        // we have to swap if a is less than b\\n        if(b<a) swap(a,b);\\n        ans = a*10 +b;\\n        return ans;\\n\\n    }\\n\\n\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Enumeration"
                ],
                "code": "```\\n\\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v(10);\\n        for(int i=0;i<nums1.size();i++) v[nums1[i]]++;\\n        for(int i=0;i<nums2.size();i++) v[nums2[i]]++;\\n\\n         for(int i=1;i<v.size();i++){\\n             if(v[i]==2) return i;\\n         }\\n         int ans =0;\\n         int a = *min_element(nums1.begin(), nums1.end());\\n        int b = *min_element(nums2.begin(), nums2.end());\\n        // we have to swap if a is less than b\\n        if(b<a) swap(a,b);\\n        ans = a*10 +b;\\n        return ans;\\n\\n    }\\n\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422379,
                "title": "simple-approach-c",
                "content": "# Complexity\\n- Time complexity:O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2){\\n        int ans=0,first=0,second=0;\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        if(nums1[0]<nums2[0]){\\n            first=nums1[0];\\n            second=nums2[0];\\n        }\\n        else{\\n            first=nums2[0];\\n            second=nums1[0];\\n        }\\n        for(int i=0, j=0; i < nums1.size() && j < nums2.size(); ){\\n    if(nums1[i] == nums2[j]){\\n       first=0;\\n       second=nums1[i];\\n       break;\\n        i++;\\n        j++;\\n    }\\n    else if(nums1[i] < nums2[j]){\\n        i++;\\n    }\\n    else{\\n        j++;\\n    }\\n}\\n       ans=first*10+second;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2){\\n        int ans=0,first=0,second=0;\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        if(nums1[0]<nums2[0]){\\n            first=nums1[0];\\n            second=nums2[0];\\n        }\\n        else{\\n            first=nums2[0];\\n            second=nums1[0];\\n        }\\n        for(int i=0, j=0; i < nums1.size() && j < nums2.size(); ){\\n    if(nums1[i] == nums2[j]){\\n       first=0;\\n       second=nums1[i];\\n       break;\\n        i++;\\n        j++;\\n    }\\n    else if(nums1[i] < nums2[j]){\\n        i++;\\n    }\\n    else{\\n        j++;\\n    }\\n}\\n       ans=first*10+second;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417532,
                "title": "be-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIf there is a digit that is in both the lists, then that is the answer.\\nElse, the concatenation of the two smallest numbers from the list will be the answer. See the code for more clarification.\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort()\\n        nums2.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n        ans = (str(nums1[0]) + str(nums2[0])) if nums1[0] < nums2[0] else str(nums2[0]) + str(nums1[0]) \\n        ans = int(ans)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort()\\n        nums2.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n        ans = (str(nums1[0]) + str(nums2[0])) if nums1[0] < nums2[0] else str(nums2[0]) + str(nums1[0]) \\n        ans = int(ans)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3393332,
                "title": "simple-kotlin-solution-for-beginners",
                "content": "```\\nclass Solution {\\n    fun minNumber(nums1: IntArray, nums2: IntArray): Int {\\n        val set = HashSet<Int>()\\n        var (min, min1, min2) = arrayOf(10, 10, 10)\\n        for (num in nums1) {\\n            min1 = minOf(min1, num)\\n            set.add(num)\\n        }\\n        for (num in nums2) {\\n            min2 = minOf(min2, num)\\n            if (set.contains(num)) min = minOf(min, num)\\n        }\\n        if (min != 10) return min\\n        return minOf(min1, min2) * 10 + maxOf(min1, min2)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun minNumber(nums1: IntArray, nums2: IntArray): Int {\\n        val set = HashSet<Int>()\\n        var (min, min1, min2) = arrayOf(10, 10, 10)\\n        for (num in nums1) {\\n            min1 = minOf(min1, num)\\n            set.add(num)\\n        }\\n        for (num in nums2) {\\n            min2 = minOf(min2, num)\\n            if (set.contains(num)) min = minOf(min, num)\\n        }\\n        if (min != 10) return min\\n        return minOf(min1, min2) * 10 + maxOf(min1, min2)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3387450,
                "title": "my-first-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Integer\\n     */\\n    function minNumber($nums1, $nums2) {\\n        sort($nums1);\\n        sort($nums2);\\n\\n        for ($i=0; $i < count($nums1); $i++){\\n            if(array_search($nums1[$i], $nums2) !== false) return $nums1[$i];\\n        }\\n\\n        $min1 = min($nums1);\\n        $min2 = min($nums2);\\n\\n        return strval(min($min1, $min2)) . strval(max($min1, $min2));\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Integer\\n     */\\n    function minNumber($nums1, $nums2) {\\n        sort($nums1);\\n        sort($nums2);\\n\\n        for ($i=0; $i < count($nums1); $i++){\\n            if(array_search($nums1[$i], $nums2) !== false) return $nums1[$i];\\n        }\\n\\n        $min1 = min($nums1);\\n        $min2 = min($nums2);\\n\\n        return strval(min($min1, $min2)) . strval(max($min1, $min2));\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3371203,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& n1, vector<int>& n2) {\\n        sort(n1.begin(),n1.end());\\n        sort(n2.begin(),n2.end());\\n        set<int>s;\\n        for(int i=0;i<n1.size();i++){\\n            s.insert(n1[i]);\\n        }\\n        for(int i=0;i<n2.size();i++){\\n            if(s.count(n2[i])!=0){\\n                return n2[i];\\n            }\\n        }\\n        if(n1[0]<n2[0])\\n            return n1[0]*10+n2[0];\\n        else\\n            return n2[0]*10+n1[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& n1, vector<int>& n2) {\\n        sort(n1.begin(),n1.end());\\n        sort(n2.begin(),n2.end());\\n        set<int>s;\\n        for(int i=0;i<n1.size();i++){\\n            s.insert(n1[i]);\\n        }\\n        for(int i=0;i<n2.size();i++){\\n            if(s.count(n2[i])!=0){\\n                return n2[i];\\n            }\\n        }\\n        if(n1[0]<n2[0])\\n            return n1[0]*10+n2[0];\\n        else\\n            return n2[0]*10+n1[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3371114,
                "title": "form-smallest-number-from-two-digit-arrays-easy-java-sol",
                "content": "# Complexity\\n- Time complexity: O(mn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int temp = getCommon(nums1, nums2);\\n        if(temp > 0) return temp;\\n        int a = getMinimum(nums1);\\n        if(isPresent(nums2, a)){\\n            return a;\\n        }\\n        int b = getMinimum(nums2);\\n        if(a < b){\\n            return a*10+b;\\n        }else{\\n            return b*10+a;\\n        }\\n    }\\n    public int getMinimum(int[] nums){\\n        int min = Integer.MAX_VALUE;\\n        int ans;\\n        for(int i = 0; i < nums.length; i++){\\n            min = Math.min(min, nums[i]);\\n            ans = min;\\n        }\\n        return min;\\n    }\\n    public boolean isPresent(int[] nums, int k){\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == k) return true;\\n        }\\n        return false;\\n    }\\n    public int getCommon(int[] nums1, int[] nums2){\\n        int min = Integer.MAX_VALUE;\\n        List<Integer> list = new ArrayList<Integer>();\\n        int ans=-1;\\n        for(int i = 0; i < nums1.length; i++){\\n            for(int j = 0; j < nums2.length; j++){\\n                if(nums1[i] == nums2[j]){\\n                    list.add(nums1[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        for(int i=0; i<list.size(); i++){\\n            min = Math.min(min, list.get(i));\\n            ans = min;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int temp = getCommon(nums1, nums2);\\n        if(temp > 0) return temp;\\n        int a = getMinimum(nums1);\\n        if(isPresent(nums2, a)){\\n            return a;\\n        }\\n        int b = getMinimum(nums2);\\n        if(a < b){\\n            return a*10+b;\\n        }else{\\n            return b*10+a;\\n        }\\n    }\\n    public int getMinimum(int[] nums){\\n        int min = Integer.MAX_VALUE;\\n        int ans;\\n        for(int i = 0; i < nums.length; i++){\\n            min = Math.min(min, nums[i]);\\n            ans = min;\\n        }\\n        return min;\\n    }\\n    public boolean isPresent(int[] nums, int k){\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == k) return true;\\n        }\\n        return false;\\n    }\\n    public int getCommon(int[] nums1, int[] nums2){\\n        int min = Integer.MAX_VALUE;\\n        List<Integer> list = new ArrayList<Integer>();\\n        int ans=-1;\\n        for(int i = 0; i < nums1.length; i++){\\n            for(int j = 0; j < nums2.length; j++){\\n                if(nums1[i] == nums2[j]){\\n                    list.add(nums1[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        for(int i=0; i<list.size(); i++){\\n            min = Math.min(min, list.get(i));\\n            ans = min;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3370184,
                "title": "c-5-lines-faster-100",
                "content": "**Code**\\n```c++\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& l, vector<int>& r) {\\n        vector<int> cntl(10, 0), cntr(10, 0);\\n        auto ml = INT_MAX, mr = INT_MAX;\\n        for (auto i: l) cntl[i]++, ml = min(ml, i);\\n        for (auto i: r) cntr[i]++, mr = min(mr, i);\\n        for (int i = 0; i < 10; i++)  if (cntl[i] && cntr[i]) return i;\\n        return min(ml, mr) * 10 + max(ml, mr);\\n    }\\n};\\n```\\n\\n**Complexity**\\nTime: `O(n)`\\nSpace: `O(1)`\\n\\n\\n**Result**\\n\\n![image](https://assets.leetcode.com/users/images/60f92e63-2b59-4ed1-8d62-f7472cfc0cee_1680429860.541825.png)\\n",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& l, vector<int>& r) {\\n        vector<int> cntl(10, 0), cntr(10, 0);\\n        auto ml = INT_MAX, mr = INT_MAX;\\n        for (auto i: l) cntl[i]++, ml = min(ml, i);\\n        for (auto i: r) cntr[i]++, mr = min(mr, i);\\n        for (int i = 0; i < 10; i++)  if (cntl[i] && cntr[i]) return i;\\n        return min(ml, mr) * 10 + max(ml, mr);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3369602,
                "title": "python3-straightforward-solution-with-explanation",
                "content": "First we check if there is an intersection of two arrays. If yes, then the answer will be one digit. Otherwise we need to check permutation of the two minimum digits from each array and choose the smallest.\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        intersection = list(set(nums1) & set(nums2))\\n        \\n        if len(intersection):\\n            return min(intersection)\\n        else:\\n            return min(int(str(min(nums1)) + str(min(nums2))), int(str(min(nums2)) + str(min(nums1))))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        intersection = list(set(nums1) & set(nums2))\\n        \\n        if len(intersection):\\n            return min(intersection)\\n        else:\\n            return min(int(str(min(nums1)) + str(min(nums2))), int(str(min(nums2)) + str(min(nums1))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3369396,
                "title": "easiest-solution-100-accuracy-loops",
                "content": "\\n# Approach\\nThere can be two possible cases\\n1. the number is formed by taking the smallest numbers from both the arrays\\n2. The number is common to both arrays\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n*m)+O(nlogn)+O(mlogm)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int n = nums1.size();\\n        int m = nums2.size();\\n        for(int i = 0 ; i < n ; i++){\\n            for(int j = 0; j < m; j++){\\n                 if(nums1[i]==nums2[j])\\n                 return nums1[i];            }\\n        }\\n        return min((nums1[0]*10)+nums2[0],(nums2[0]*10)+nums1[0]);\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int n = nums1.size();\\n        int m = nums2.size();\\n        for(int i = 0 ; i < n ; i++){\\n            for(int j = 0; j < m; j++){\\n                 if(nums1[i]==nums2[j])\\n                 return nums1[i];            }\\n        }\\n        return min((nums1[0]*10)+nums2[0],(nums2[0]*10)+nums1[0]);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3368065,
                "title": "c-logic-based-conditions-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int mini1=nums1[0],mini2=nums2[0];\\n        \\n        for(auto x:nums1){\\n            mini1=min(mini1,x);\\n        }\\n         for(auto x:nums2){\\n            mini2=min(mini2,x);\\n        }\\n        int commin=99999;\\n        for(auto x:nums1){\\n            for(auto y:nums2){\\n                if(x==y)\\n                   commin=min(x,commin); \\n            }\\n        }\\n        if(mini1==mini2)\\n            return min(mini1,commin);\\n        \\n        if(mini1<mini2)\\n        return min(mini1*10 +mini2,commin); \\n        \\n        return min(mini2*10 +mini1,commin); \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int mini1=nums1[0],mini2=nums2[0];\\n        \\n        for(auto x:nums1){\\n            mini1=min(mini1,x);\\n        }\\n         for(auto x:nums2){\\n            mini2=min(mini2,x);\\n        }\\n        int commin=99999;\\n        for(auto x:nums1){\\n            for(auto y:nums2){\\n                if(x==y)\\n                   commin=min(x,commin); \\n            }\\n        }\\n        if(mini1==mini2)\\n            return min(mini1,commin);\\n        \\n        if(mini1<mini2)\\n        return min(mini1*10 +mini2,commin); \\n        \\n        return min(mini2*10 +mini1,commin); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367618,
                "title": "simple-code",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int ans=0;\\n        map<int,int> m;\\n        for(int i=0;i<nums1.size();i++){\\n            m[nums1[i]]++;\\n        }\\n         for(int i=0;i<nums2.size();i++){\\n            m[nums2[i]]++;\\n        }\\n        for(auto it: m){\\n            if(it.second==2)\\n                return it.first;\\n                \\n        }\\n        int x= *min_element(nums1.begin(),nums1.end());\\n          int y= *min_element(nums2.begin(),nums2.end());\\n        if(x>y)\\n            return y*10+x;\\n        else if(x==y) return x;\\n        else  return x*10 + y;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int ans=0;\\n        map<int,int> m;\\n        for(int i=0;i<nums1.size();i++){\\n            m[nums1[i]]++;\\n        }\\n         for(int i=0;i<nums2.size();i++){\\n            m[nums2[i]]++;\\n        }\\n        for(auto it: m){\\n            if(it.second==2)\\n                return it.first;\\n                \\n        }\\n        int x= *min_element(nums1.begin(),nums1.end());\\n          int y= *min_element(nums2.begin(),nums2.end());\\n        if(x>y)\\n            return y*10+x;\\n        else if(x==y) return x;\\n        else  return x*10 + y;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367185,
                "title": "swift-easy-to-understand-and-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        for i in 1...9{\\n            if nums1.contains(i) && nums2.contains(i){\\n                return i\\n            }\\n        }\\n        \\n        var (nums, ans) = ([Int](), 0)\\n        nums.append(nums1.min()!)\\n        nums.append(nums2.min()!)\\n        nums.sort()\\n        \\n        for x in nums { ans = ans*10 + x }\\n        return ans\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        for i in 1...9{\\n            if nums1.contains(i) && nums2.contains(i){\\n                return i\\n            }\\n        }\\n        \\n        var (nums, ans) = ([Int](), 0)\\n        nums.append(nums1.min()!)\\n        nums.append(nums2.min()!)\\n        nums.sort()\\n        \\n        for x in nums { ans = ans*10 + x }\\n        return ans\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3367074,
                "title": "c-easy-and-shorter-solution-100-accepted-intuitive-approach",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(N^2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        int n,m;\\n        n = nums1.size();\\n        m =nums2.size();\\n        \\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        int i,j;\\n        \\n        for(i=0;i<n;i++)\\n        {\\n            for(j=0;j<m;j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    \\n                }\\n            }\\n        }\\n        \\n        int x=nums1[0];\\n        int y = nums2[0];\\n        \\n        if(x<y)\\n            return 10*x+y;\\n        else\\n            return 10*y+x;\\n        \\n       \\n        \\n        return -1;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        int n,m;\\n        n = nums1.size();\\n        m =nums2.size();\\n        \\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        int i,j;\\n        \\n        for(i=0;i<n;i++)\\n        {\\n            for(j=0;j<m;j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    \\n                }\\n            }\\n        }\\n        \\n        int x=nums1[0];\\n        int y = nums2[0];\\n        \\n        if(x<y)\\n            return 10*x+y;\\n        else\\n            return 10*y+x;\\n        \\n       \\n        \\n        return -1;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366913,
                "title": "100-fast-easy-c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int com= INT_MAX;\\n        for (auto val: nums1){\\n            if (count(nums2.begin(),nums2.end(),val)>0)com= min(com,val);\\n        }\\n        if (com!= INT_MAX)return com;\\n        int a= *min_element(nums1.begin(),nums1.end());\\n        int b= *min_element(nums2.begin(),nums2.end());\\n        int m1= min(a,b);\\n        int m2= max(a,b);\\n        return(m1*10+m2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int com= INT_MAX;\\n        for (auto val: nums1){\\n            if (count(nums2.begin(),nums2.end(),val)>0)com= min(com,val);\\n        }\\n        if (com!= INT_MAX)return com;\\n        int a= *min_element(nums1.begin(),nums1.end());\\n        int b= *min_element(nums2.begin(),nums2.end());\\n        int m1= min(a,b);\\n        int m2= max(a,b);\\n        return(m1*10+m2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366907,
                "title": "sorting-c-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int m=nums1.size(),n=nums2.size();\\n        int i=0,j=0;\\n        while(i<m && j<n){\\n            if(nums1[i]>nums2[j])\\n                j++;\\n            else if(nums1[i]<nums2[j])\\n                i++;\\n            else\\n                return nums1[i];\\n        }\\n        int a=nums1[0],b=nums2[0];\\n        if(a<b)\\n            return a*10+b;\\n        else if(a==b)\\n            return a;\\n        else\\n            return b*10+a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int m=nums1.size(),n=nums2.size();\\n        int i=0,j=0;\\n        while(i<m && j<n){\\n            if(nums1[i]>nums2[j])\\n                j++;\\n            else if(nums1[i]<nums2[j])\\n                i++;\\n            else\\n                return nums1[i];\\n        }\\n        int a=nums1[0],b=nums2[0];\\n        if(a<b)\\n            return a*10+b;\\n        else if(a==b)\\n            return a;\\n        else\\n            return b*10+a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366812,
                "title": "easy-solution-t-c-o-nlogn-s-c-o-1",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf the element is present in both the arrays then return that particular element. We have used the helper function that does the same.\\nNow if there is no element that is common in both the arrays, then simply take the minimum element from both the arrays and return the minimum number that can be formed using the two.\\n\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int helper(vector<int>&nums1,vector<int>& nums2){\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int i = 0, j = 0;\\n        while(i<nums1.size() && j<nums2.size()){\\n            if(nums1[i]==nums2[j]){\\n                return nums1[i];\\n            }\\n            else if(nums1[i]<nums2[j]){\\n                i++;\\n            }\\n            else{\\n                j++;\\n            }\\n        }\\n// return -1 if no common element is present\\n        return -1;\\n    }\\n    \\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int result=0;\\n//helper function to check if there is any common element in the given arrays.\\n        int common = helper(nums1, nums2);\\n        if (common != -1) {\\n            return common;\\n        }\\n        else{\\n            int num1=*min_element(nums1.begin(),nums1.end());\\n            int num2=*min_element(nums2.begin(),nums2.end());\\n            result = (num1 < num2) ? num1 * 10 + num2 : num2 * 10 + num1;\\n        }\\n        return result;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int helper(vector<int>&nums1,vector<int>& nums2){\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        int i = 0, j = 0;\\n        while(i<nums1.size() && j<nums2.size()){\\n            if(nums1[i]==nums2[j]){\\n                return nums1[i];\\n            }\\n            else if(nums1[i]<nums2[j]){\\n                i++;\\n            }\\n            else{\\n                j++;\\n            }\\n        }\\n// return -1 if no common element is present\\n        return -1;\\n    }\\n    \\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int result=0;\\n//helper function to check if there is any common element in the given arrays.\\n        int common = helper(nums1, nums2);\\n        if (common != -1) {\\n            return common;\\n        }\\n        else{\\n            int num1=*min_element(nums1.begin(),nums1.end());\\n            int num2=*min_element(nums2.begin(),nums2.end());\\n            result = (num1 < num2) ? num1 * 10 + num2 : num2 * 10 + num1;\\n        }\\n        return result;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366778,
                "title": "easiest-c-code-beats-100-clean-and-understandable",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int ans=INT_MAX;\\n        int n1=0;\\n        int n2=0;\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j]){\\n                    ans=min(ans,nums1[i]);\\n                }\\n                else{\\n                    n1=nums1[i]*10+nums2[j];\\n                    n2=nums2[j]*10+nums1[i];\\n                    ans=min(ans,min(n1,n2));\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int ans=INT_MAX;\\n        int n1=0;\\n        int n2=0;\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j]){\\n                    ans=min(ans,nums1[i]);\\n                }\\n                else{\\n                    n1=nums1[i]*10+nums2[j];\\n                    n2=nums2[j]*10+nums1[i];\\n                    ans=min(ans,min(n1,n2));\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366738,
                "title": "easy-peasy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j])return nums1[i];\\n            }\\n        }\\n        if(nums1[0]<nums2[0])return nums1[0]*10+nums2[0];\\n        return  nums2[0]*10+nums1[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j])return nums1[i];\\n            }\\n        }\\n        if(nums1[0]<nums2[0])return nums1[0]*10+nums2[0];\\n        return  nums2[0]*10+nums1[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366727,
                "title": "easy-just-read-the-simple-code",
                "content": "\\n```\\n     int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int m = INT_MAX;\\n        int n = INT_MAX;\\n        \\n        map<int,int> map;\\n        for(int i: nums1){\\n            m = min(m,i);\\n            map[i]++;\\n        }\\n        for(int &i: nums2 ){\\n            n = min(n,i);\\n            map[i]--;\\n        }\\n        \\n        for(auto &i:map){\\n            if(i.second == 0){\\n                return i.first;\\n            }\\n        }\\n        \\n        int ans;\\n        if(n>m){\\n            ans = m;\\n            ans *= 10;\\n            ans+= n;\\n            return ans;\\n        }\\n        ans = n;\\n        ans *= 10;\\n        ans+= m;\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n     int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int m = INT_MAX;\\n        int n = INT_MAX;\\n        \\n        map<int,int> map;\\n        for(int i: nums1){\\n            m = min(m,i);\\n            map[i]++;\\n        }\\n        for(int &i: nums2 ){\\n            n = min(n,i);\\n            map[i]--;\\n        }\\n        \\n        for(auto &i:map){\\n            if(i.second == 0){\\n                return i.first;\\n            }\\n        }\\n        \\n        int ans;\\n        if(n>m){\\n            ans = m;\\n            ans *= 10;\\n            ans+= n;\\n            return ans;\\n        }\\n        ans = n;\\n        ans *= 10;\\n        ans+= m;\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366655,
                "title": "easy-and-fast-execution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size)\\n{\\n    int i,j;\\n    int val=99;\\n    \\n     for(i=0;i<nums1Size;i++)\\n     {     for(j=0;j<nums2Size;j++)\\n         {\\n            if(nums1[i]==nums2[j])\\n            {\\n                    \\n                    if(nums1[i]<val)\\n                        val=nums1[i];\\n            }\\n         }\\n        \\n     }\\n    if(val!=99)\\n        return val;\\n    for(i=0;i<nums1Size;i++)\\n    {\\n            if(nums1[0]>nums1[i])\\n            nums1[0]=nums1[i];\\n    }\\n    for(j=0;j<nums2Size;j++)\\n    {\\n        if(nums2[0]>nums2[j])\\n        nums2[0]=nums2[j];\\n    }\\n    if(nums1[0]<nums2[0])\\n    {val=(nums1[0])*10+nums2[0];\\n    return val;}\\n    else\\n    val=(nums2[0]*10)+nums1[0];\\n    return val;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size)\\n{\\n    int i,j;\\n    int val=99;\\n    \\n     for(i=0;i<nums1Size;i++)\\n     {     for(j=0;j<nums2Size;j++)\\n         {\\n            if(nums1[i]==nums2[j])\\n            {\\n                    \\n                    if(nums1[i]<val)\\n                        val=nums1[i];\\n            }\\n         }\\n        \\n     }\\n    if(val!=99)\\n        return val;\\n    for(i=0;i<nums1Size;i++)\\n    {\\n            if(nums1[0]>nums1[i])\\n            nums1[0]=nums1[i];\\n    }\\n    for(j=0;j<nums2Size;j++)\\n    {\\n        if(nums2[0]>nums2[j])\\n        nums2[0]=nums2[j];\\n    }\\n    if(nums1[0]<nums2[0])\\n    {val=(nums1[0])*10+nums2[0];\\n    return val;}\\n    else\\n    val=(nums2[0]*10)+nums1[0];\\n    return val;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366640,
                "title": "swift-solution",
                "content": "```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        let set1 = Set(nums1)\\n        let set2 = Set(nums2)\\n        let intersection = Array(set1.intersection(set2)).sorted()\\n        if (intersection.count > 0) { return intersection[0] }\\n        else { \\n            let num1 = nums1.sorted()[0]\\n            let num2 = nums2.sorted()[0]\\n            if (num1 < num2) { \\n                return num1 * 10 + num2\\n            } else { \\n                return num2 * 10 + num1\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        let set1 = Set(nums1)\\n        let set2 = Set(nums2)\\n        let intersection = Array(set1.intersection(set2)).sorted()\\n        if (intersection.count > 0) { return intersection[0] }\\n        else { \\n            let num1 = nums1.sorted()[0]\\n            let num2 = nums2.sorted()[0]\\n            if (num1 < num2) { \\n                return num1 * 10 + num2\\n            } else { \\n                return num2 * 10 + num1\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366596,
                "title": "ez",
                "content": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int a= *min_element(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        unordered_map<int,int> mp;\\n        for(auto i: nums1) mp[i]++;\\n        for(auto i: nums2) {\\n            if(mp.find(i)!=mp.end()) return i;\\n        }\\n        if(a<nums2[0]) return (a*10 +nums2[0]);\\n        else return (nums2[0]*10+a);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int a= *min_element(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        unordered_map<int,int> mp;\\n        for(auto i: nums1) mp[i]++;\\n        for(auto i: nums2) {\\n            if(mp.find(i)!=mp.end()) return i;\\n        }\\n        if(a<nums2[0]) return (a*10 +nums2[0]);\\n        else return (nums2[0]*10+a);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366566,
                "title": "python3-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        if set(nums1).intersection(set(nums2)):\\n            return sorted(set(nums1).intersection(set(nums2)))[0]\\n\\n        a=sorted(nums1)[0]\\n        b=sorted(nums2)[0]\\n        return min(a*10+b,b*10+a)    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        if set(nums1).intersection(set(nums2)):\\n            return sorted(set(nums1).intersection(set(nums2)))[0]\\n\\n        a=sorted(nums1)[0]\\n        b=sorted(nums2)[0]\\n        return min(a*10+b,b*10+a)    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366527,
                "title": "beats-100-submissions-easy-solution-using-hashmap",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        a=nums1[:]\\n        a.extend(nums2)\\n        dic=Counter(a)\\n        m=max(dic.values())\\n        ans=[]\\n        if m>1:\\n            for i,j in dic.items():\\n                if j==m:\\n                    ans.append(i)\\n            return min(ans)\\n        else:\\n            min1=min(nums1)\\n            min2=min(nums2)\\n            if min1>min2:\\n                return int(str(min2)+str(min1))\\n            else:\\n                return int(str(min1)+str(min2))\\n            \\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        a=nums1[:]\\n        a.extend(nums2)\\n        dic=Counter(a)\\n        m=max(dic.values())\\n        ans=[]\\n        if m>1:\\n            for i,j in dic.items():\\n                if j==m:\\n                    ans.append(i)\\n            return min(ans)\\n        else:\\n            min1=min(nums1)\\n            min2=min(nums2)\\n            if min1>min2:\\n                return int(str(min2)+str(min1))\\n            else:\\n                return int(str(min1)+str(min2))\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366488,
                "title": "min-max-occurence-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        int m1=INT_MAX;\\n        int m2=INT_MAX;\\n        int arr[10]={0};\\n        \\n        for(int i=0;i<nums1.size();i++)\\n           {\\n            m1=min(m1,nums1[i]);\\n            arr[nums1[i]]++;\\n           }\\n         for(int i=0;i<nums2.size();i++)\\n           { \\n             m2=min(m2,nums2[i]);\\n             arr[nums2[i]]++;\\n           }\\n        for(int i=0;i<10;i++)\\n            if(arr[i]==2)\\n                return i;\\n        \\n       \\n        return  m1 > m2 ? m2*10+m1 : m1*10+m2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        int m1=INT_MAX;\\n        int m2=INT_MAX;\\n        int arr[10]={0};\\n        \\n        for(int i=0;i<nums1.size();i++)\\n           {\\n            m1=min(m1,nums1[i]);\\n            arr[nums1[i]]++;\\n           }\\n         for(int i=0;i<nums2.size();i++)\\n           { \\n             m2=min(m2,nums2[i]);\\n             arr[nums2[i]]++;\\n           }\\n        for(int i=0;i<10;i++)\\n            if(arr[i]==2)\\n                return i;\\n        \\n       \\n        return  m1 > m2 ? m2*10+m1 : m1*10+m2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366474,
                "title": "most-easy-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        HashSet<Integer>set=new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            set.add(nums1[i]);\\n        }\\n        for(int j=0;j<nums2.length;j++){\\n            if(set.contains(nums2[j])){\\n                return nums2[j];\\n            }\\n        }\\n        int min1=Integer.MAX_VALUE;\\n        int min2=Integer.MAX_VALUE;\\n        for(int i=0;i<nums1.length;i++){\\n            min1=Math.min(min1,nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            min2=Math.min(min2,nums2[i]);\\n        }\\n        if(min1<min2){\\n            return min1*10+min2;\\n        }\\n        return min2*10+min1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        HashSet<Integer>set=new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            set.add(nums1[i]);\\n        }\\n        for(int j=0;j<nums2.length;j++){\\n            if(set.contains(nums2[j])){\\n                return nums2[j];\\n            }\\n        }\\n        int min1=Integer.MAX_VALUE;\\n        int min2=Integer.MAX_VALUE;\\n        for(int i=0;i<nums1.length;i++){\\n            min1=Math.min(min1,nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            min2=Math.min(min2,nums2[i]);\\n        }\\n        if(min1<min2){\\n            return min1*10+min2;\\n        }\\n        return min2*10+min1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366453,
                "title": "go-sort-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(2nlog(n) + n2)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nfunc minNumber(nums1 []int, nums2 []int) int {\\n\\tsort.Ints(nums1)\\n\\tsort.Ints(nums2)\\n\\n\\tfor i := range nums1 {\\n\\t\\tfor j := range nums2 {\\n\\t\\t\\tif nums1[i] == nums2[j] {\\n\\t\\t\\t\\treturn nums1[i]\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif nums1[0] < nums2[0] {\\n\\t\\treturn nums1[0]*10 + nums2[0]\\n\\t}\\n\\treturn nums2[0]*10 + nums1[0]\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc minNumber(nums1 []int, nums2 []int) int {\\n\\tsort.Ints(nums1)\\n\\tsort.Ints(nums2)\\n\\n\\tfor i := range nums1 {\\n\\t\\tfor j := range nums2 {\\n\\t\\t\\tif nums1[i] == nums2[j] {\\n\\t\\t\\t\\treturn nums1[i]\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif nums1[0] < nums2[0] {\\n\\t\\treturn nums1[0]*10 + nums2[0]\\n\\t}\\n\\treturn nums2[0]*10 + nums1[0]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3366443,
                "title": "easy-solution-using-map-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        map<int,int> mp;\\n        for(int i=0; i<nums1.size(); i++){\\n            mp[nums1[i]]++;\\n        }\\n        int flag =0;\\n        int ans = INT_MAX;\\n        for(int i=0; i<nums2.size(); i++){\\n            if(mp[nums2[i]]>=1){\\n                ans = min(ans,nums2[i]);\\n                flag =1;\\n\\n            }\\n        }\\n        if(flag){\\n            return ans;\\n\\n        }\\n        \\n        \\n        int mn1 = *min_element(nums1.begin(),nums1.end());\\n        // int mx1 = *max_element(nums1.begin(),nums1.end());\\n        int mn2 = *min_element(nums2.begin(),nums2.end());\\n        // int mx2 = *max_element(nums2.begin(),nums2.end());\\n        ans = min(mn1*10+mn2,mn2*10+mn1);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        map<int,int> mp;\\n        for(int i=0; i<nums1.size(); i++){\\n            mp[nums1[i]]++;\\n        }\\n        int flag =0;\\n        int ans = INT_MAX;\\n        for(int i=0; i<nums2.size(); i++){\\n            if(mp[nums2[i]]>=1){\\n                ans = min(ans,nums2[i]);\\n                flag =1;\\n\\n            }\\n        }\\n        if(flag){\\n            return ans;\\n\\n        }\\n        \\n        \\n        int mn1 = *min_element(nums1.begin(),nums1.end());\\n        // int mx1 = *max_element(nums1.begin(),nums1.end());\\n        int mn2 = *min_element(nums2.begin(),nums2.end());\\n        // int mx2 = *max_element(nums2.begin(),nums2.end());\\n        ans = min(mn1*10+mn2,mn2*10+mn1);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366398,
                "title": "python-greedy-with-set",
                "content": "```python\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        for n in range(100):\\n            s = set(map(int, str(n)))\\n            if s1 & s and s2 & s:\\n                return n\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```python\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        for n in range(100):\\n            s = set(map(int, str(n)))\\n            if s1 & s and s2 & s:\\n                return n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366367,
                "title": "form-smallest-number-from-two-digit-arrays",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int> &nums1, vector<int> &nums2) {\\n        vector<int> merged;\\n        merged.reserve(nums1.size() + nums2.size());\\n        merged.insert(merged.end(), nums1.begin(), nums1.end());\\n        merged.insert(merged.end(), nums2.begin(), nums2.end());\\n        sort(merged.begin(), merged.end());\\n\\n        for (int num: merged) {\\n            if (std::find(nums1.begin(), nums1.end(), num) != nums1.end() &&\\n                std::find(nums2.begin(), nums2.end(), num) != nums2.end()) {\\n                return num;\\n            }\\n        }\\n\\n        int mn1 = *min_element(nums1.begin(), nums1.end());\\n        int mn2 = *min_element(nums2.begin(), nums2.end());      \\n        return min(mn1,mn2) * 10 + max(mn1,mn2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int> &nums1, vector<int> &nums2) {\\n        vector<int> merged;\\n        merged.reserve(nums1.size() + nums2.size());\\n        merged.insert(merged.end(), nums1.begin(), nums1.end());\\n        merged.insert(merged.end(), nums2.begin(), nums2.end());\\n        sort(merged.begin(), merged.end());\\n\\n        for (int num: merged) {\\n            if (std::find(nums1.begin(), nums1.end(), num) != nums1.end() &&\\n                std::find(nums2.begin(), nums2.end(), num) != nums2.end()) {\\n                return num;\\n            }\\n        }\\n\\n        int mn1 = *min_element(nums1.begin(), nums1.end());\\n        int mn2 = *min_element(nums2.begin(), nums2.end());      \\n        return min(mn1,mn2) * 10 + max(mn1,mn2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3366356,
                "title": "c-set-use",
                "content": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        set<int> s1(nums1.begin(),nums1.end()),s2(nums2.begin(),nums2.end());\\n        for(int i=0;i<=1e4;i++){\\n            bool f1=false,f2=false;\\n            string x = to_string(i);\\n            for(auto a : x){\\n                if(s1.find(a-\\'0\\')!=s1.end()) f1 = true;\\n                if(s2.find(a-\\'0\\')!=s2.end()) f2 = true;\\n            }\\n            if(f1 && f2) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        set<int> s1(nums1.begin(),nums1.end()),s2(nums2.begin(),nums2.end());\\n        for(int i=0;i<=1e4;i++){\\n            bool f1=false,f2=false;\\n            string x = to_string(i);\\n            for(auto a : x){\\n                if(s1.find(a-\\'0\\')!=s1.end()) f1 = true;\\n                if(s2.find(a-\\'0\\')!=s2.end()) f2 = true;\\n            }\\n            if(f1 && f2) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089167,
                "title": "beats-100-loops",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        // Sort the input vectors\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        int size1 = nums1.size();\\n        int size2 = nums2.size();\\n\\n        if (size1 == 0 && size2 == 0) {\\n            return 0;\\n        } else if (size1 == 0) {\\n            return nums2[0];\\n        } else if (size2 == 0) {\\n            return nums1[0];\\n        }\\n\\n        int i = 0, j = 0;\\n\\n        while (i < size1 && j < size2) {\\n            if (nums1[i] == nums2[j]) {\\n                return nums1[i];\\n            } else if (nums1[i] < nums2[j]) {\\n                i++;\\n            } else {\\n                j++;\\n            }\\n        }\\n        return (nums1[0] > nums2[0]) ? nums2[0]*10 + nums1[0] : nums1[0]*10 + nums2[0] ;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        // Sort the input vectors\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        int size1 = nums1.size();\\n        int size2 = nums2.size();\\n\\n        if (size1 == 0 && size2 == 0) {\\n            return 0;\\n        } else if (size1 == 0) {\\n            return nums2[0];\\n        } else if (size2 == 0) {\\n            return nums1[0];\\n        }\\n\\n        int i = 0, j = 0;\\n\\n        while (i < size1 && j < size2) {\\n            if (nums1[i] == nums2[j]) {\\n                return nums1[i];\\n            } else if (nums1[i] < nums2[j]) {\\n                i++;\\n            } else {\\n                j++;\\n            }\\n        }\\n        return (nums1[0] > nums2[0]) ? nums2[0]*10 + nums1[0] : nums1[0]*10 + nums2[0] ;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079711,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        a = set(nums1) & set(nums2)\\n        return min(a) if a else int(\\'\\'.join(map(str, sorted((sorted(nums1)[0], sorted(nums2)[0])))))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        a = set(nums1) & set(nums2)\\n        return min(a) if a else int(\\'\\'.join(map(str, sorted((sorted(nums1)[0], sorted(nums2)[0])))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078966,
                "title": "easy-c-solution-for-beginners-with-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int i,k;\\n        map<int,int>mp;\\n        for(i=0; i<nums1.size(); i++){\\n          mp[nums1[i]]++;\\n        }\\n        for(i=0; i<nums2.size(); i++){\\n                     mp[nums2[i]]++;\\n\\n        }\\n        int mini=1000;\\n        int flag=0;\\n        for(auto i: mp){\\n            if(i.second==2){\\n                flag=1;\\n                k=i.first;\\n                mini=min(mini,k);\\n            }\\n        }\\n        if(flag==1){\\n            return mini;\\n        }\\n       sort(nums1.begin(),nums1.end());\\n       int val1=nums1[0];\\n        sort(nums2.begin(),nums2.end());\\n            int val2=nums2[0];\\n            int sum1=(val1*10)+val2;\\n            int sum2=(val2*10)+val1;\\n            if(sum1<sum2){\\n                return sum1;\\n            }\\n            return sum2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int i,k;\\n        map<int,int>mp;\\n        for(i=0; i<nums1.size(); i++){\\n          mp[nums1[i]]++;\\n        }\\n        for(i=0; i<nums2.size(); i++){\\n                     mp[nums2[i]]++;\\n\\n        }\\n        int mini=1000;\\n        int flag=0;\\n        for(auto i: mp){\\n            if(i.second==2){\\n                flag=1;\\n                k=i.first;\\n                mini=min(mini,k);\\n            }\\n        }\\n        if(flag==1){\\n            return mini;\\n        }\\n       sort(nums1.begin(),nums1.end());\\n       int val1=nums1[0];\\n        sort(nums2.begin(),nums2.end());\\n            int val2=nums2[0];\\n            int sum1=(val1*10)+val2;\\n            int sum2=(val2*10)+val1;\\n            if(sum1<sum2){\\n                return sum1;\\n            }\\n            return sum2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078666,
                "title": "python-solution-easy-to-understand-for-beginner",
                "content": "\\n\\n# Complexity\\n\\n![image.png](https://assets.leetcode.com/users/images/3a8b577f-b4a5-4cac-b950-25793293ba1e_1695432344.8772168.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        l=[i for i in nums1 if i in nums2 ]\\n        if l!=[]:\\n            return min(l)\\n        else:\\n            l.extend([min(nums1),min(nums2)])\\n            l.sort()\\n            return int(str(l[0])+str(l[1]))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        l=[i for i in nums1 if i in nums2 ]\\n        if l!=[]:\\n            return min(l)\\n        else:\\n            l.extend([min(nums1),min(nums2)])\\n            l.sort()\\n            return int(str(l[0])+str(l[1]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072158,
                "title": "esay-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int small=nums1[0],small1=nums2[0],answer;\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            if(nums1[i]<small)\\n            small=nums1[i];\\n        }\\n        // for(int i=0;i<nums2.size();i++)\\n        // {\\n        //     if(nums2[i]<small)\\n        //     small1=nums2[i];\\n        // }\\nsmall1=*min_element(nums2.begin(), nums2.end());\\n \\n    sort(nums1.begin(), nums1.end());\\n    sort(nums2.begin(), nums2.end());\\n    \\n        for(int i=0;i<nums1.size();i++)\\n        {\\n         for(int j=0;j<nums2.size();j++)\\n        {\\n            if(nums1[i]==nums2[j])\\n            return nums1[i];\\n            //small1=nums2[i];\\n        }\\n        }\\n   if(small1<small) swap(small1, small);\\n         answer=small*10+small1;\\n        \\n  return answer;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int small=nums1[0],small1=nums2[0],answer;\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            if(nums1[i]<small)\\n            small=nums1[i];\\n        }\\n        // for(int i=0;i<nums2.size();i++)\\n        // {\\n        //     if(nums2[i]<small)\\n        //     small1=nums2[i];\\n        // }\\nsmall1=*min_element(nums2.begin(), nums2.end());\\n \\n    sort(nums1.begin(), nums1.end());\\n    sort(nums2.begin(), nums2.end());\\n    \\n        for(int i=0;i<nums1.size();i++)\\n        {\\n         for(int j=0;j<nums2.size();j++)\\n        {\\n            if(nums1[i]==nums2[j])\\n            return nums1[i];\\n            //small1=nums2[i];\\n        }\\n        }\\n   if(small1<small) swap(small1, small);\\n         answer=small*10+small1;\\n        \\n  return answer;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070730,
                "title": "java-o-n-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int res = Integer.MAX_VALUE;\\n        HashSet<Integer> set = new HashSet<>();\\n        int minOne = Integer.MAX_VALUE;\\n        int minTwo = Integer.MAX_VALUE;\\n        for(int num: nums1){\\n            minOne = Math.min(minOne, num);\\n            set.add(num);\\n        }\\n        for(int num: nums2){\\n            minTwo = Math.min(minTwo, num);\\n            if(set.contains(num)){\\n                res = Math.min(res, num);\\n            }\\n        }\\n        if(res != Integer.MAX_VALUE) return res;\\n        return minOne <= minTwo ? minOne * 10 + minTwo : minTwo * 10 + minOne;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int res = Integer.MAX_VALUE;\\n        HashSet<Integer> set = new HashSet<>();\\n        int minOne = Integer.MAX_VALUE;\\n        int minTwo = Integer.MAX_VALUE;\\n        for(int num: nums1){\\n            minOne = Math.min(minOne, num);\\n            set.add(num);\\n        }\\n        for(int num: nums2){\\n            minTwo = Math.min(minTwo, num);\\n            if(set.contains(num)){\\n                res = Math.min(res, num);\\n            }\\n        }\\n        if(res != Integer.MAX_VALUE) return res;\\n        return minOne <= minTwo ? minOne * 10 + minTwo : minTwo * 10 + minOne;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069927,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    let smallestNumberFirstArray = Number.MAX_VALUE;\\n    let smallestNumberSecondArray = Number.MAX_VALUE;\\n    const nums1Length = nums1.length;\\n    const nums2Length = nums2.length;\\n    let firstArrayMinValue = 0;\\n    let secondArrayMinValue = 0;\\n    let smallMatchedValue = Number.MAX_VALUE;\\n\\n    for (let i = 0; i < nums1Length; i++) {\\n        if (nums1[i] < smallestNumberFirstArray) {\\n            firstArrayMinValue = nums1[i];\\n            smallestNumberFirstArray = firstArrayMinValue;\\n        }\\n\\n        for (let j = 0; j < nums2Length; j++) {\\n            if (nums2[j] < smallestNumberSecondArray) {\\n                secondArrayMinValue = nums2[j];\\n                smallestNumberSecondArray = secondArrayMinValue;\\n            }\\n\\n            if (nums1[i] === nums2[j]) {\\n                if (nums1[i] < smallMatchedValue) {\\n                    smallMatchedValue = nums1[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    if (smallMatchedValue < Number.MAX_VALUE) {\\n        return smallMatchedValue;\\n    }\\n\\n    if (firstArrayMinValue < secondArrayMinValue) {\\n        return parseInt(firstArrayMinValue.toString() + secondArrayMinValue.toString());\\n    } else {\\n        return parseInt(secondArrayMinValue.toString() + firstArrayMinValue.toString());\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    let smallestNumberFirstArray = Number.MAX_VALUE;\\n    let smallestNumberSecondArray = Number.MAX_VALUE;\\n    const nums1Length = nums1.length;\\n    const nums2Length = nums2.length;\\n    let firstArrayMinValue = 0;\\n    let secondArrayMinValue = 0;\\n    let smallMatchedValue = Number.MAX_VALUE;\\n\\n    for (let i = 0; i < nums1Length; i++) {\\n        if (nums1[i] < smallestNumberFirstArray) {\\n            firstArrayMinValue = nums1[i];\\n            smallestNumberFirstArray = firstArrayMinValue;\\n        }\\n\\n        for (let j = 0; j < nums2Length; j++) {\\n            if (nums2[j] < smallestNumberSecondArray) {\\n                secondArrayMinValue = nums2[j];\\n                smallestNumberSecondArray = secondArrayMinValue;\\n            }\\n\\n            if (nums1[i] === nums2[j]) {\\n                if (nums1[i] < smallMatchedValue) {\\n                    smallMatchedValue = nums1[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    if (smallMatchedValue < Number.MAX_VALUE) {\\n        return smallMatchedValue;\\n    }\\n\\n    if (firstArrayMinValue < secondArrayMinValue) {\\n        return parseInt(firstArrayMinValue.toString() + secondArrayMinValue.toString());\\n    } else {\\n        return parseInt(secondArrayMinValue.toString() + firstArrayMinValue.toString());\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057567,
                "title": "96-runtime-67-memory-beautiful-solution-using-set-and-intersection",
                "content": "![image.png](https://assets.leetcode.com/users/images/3c192b64-f9b6-4451-9343-04ba8d57a932_1694988871.1216412.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        m1, m2 = min(s1), min(s2); intersect = s1 & s2\\n\\n        if intersect: min_inter = min(intersect)\\n        else:\\n            if m1 < m2: return m1*10 + m2\\n            else: return m2*10 + m1\\n\\n        if m1 < m2: smallest = m1*10 + m2\\n        else: smallest = m2*10 + m1\\n\\n        return min_inter if min_inter < smallest else smallest\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        s1, s2 = set(nums1), set(nums2)\\n        m1, m2 = min(s1), min(s2); intersect = s1 & s2\\n\\n        if intersect: min_inter = min(intersect)\\n        else:\\n            if m1 < m2: return m1*10 + m2\\n            else: return m2*10 + m1\\n\\n        if m1 < m2: smallest = m1*10 + m2\\n        else: smallest = m2*10 + m1\\n\\n        return min_inter if min_inter < smallest else smallest\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057023,
                "title": "c-easy-set-appraoch",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n     set<int>st1(nums1.begin(),nums1.end()),st2(nums2.begin(),nums2.end());\\n       for(auto it:st1)\\n         {\\n           if(st2.find(it)!=st2.end())\\n               return it;\\n               \\n         }\\n         int mi1=*st1.begin();\\n         int mi2=*st2.begin();\\n         string s=to_string(min(mi1,mi2))+to_string(max(mi1,mi2));\\n         return stoi(s);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n     set<int>st1(nums1.begin(),nums1.end()),st2(nums2.begin(),nums2.end());\\n       for(auto it:st1)\\n         {\\n           if(st2.find(it)!=st2.end())\\n               return it;\\n               \\n         }\\n         int mi1=*st1.begin();\\n         int mi2=*st2.begin();\\n         string s=to_string(min(mi1,mi2))+to_string(max(mi1,mi2));\\n         return stoi(s);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056331,
                "title": "c-o-n",
                "content": "# Approach\\nIn single iteration try to find out the common and smallest element in each array.\\n\\n# Complexity\\n- Time complexity: $$O(max(n, m))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> visited(10,0);\\n        int small1 = 1e9, small2 = 1e9;\\n\\n        for(int num: nums1)\\n        {\\n            small1 = min(small1, num);\\n            visited[num] = 1;\\n        }\\n        \\n        for(int num: nums2)\\n        {\\n            small2 = min(small2, num);\\n            if (visited[num] == 1)\\n                visited[num] = 2;\\n        }\\n\\n        for(int i = 1 ; i <10 ; i++)\\n        {\\n            if (visited[i] == 2)\\n                return i;\\n        }\\n         \\n         return (small1 + small2 * 10) > (small2 + small1 * 10) ? (small2 + small1 * 10) : (small1 + small2 * 10);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> visited(10,0);\\n        int small1 = 1e9, small2 = 1e9;\\n\\n        for(int num: nums1)\\n        {\\n            small1 = min(small1, num);\\n            visited[num] = 1;\\n        }\\n        \\n        for(int num: nums2)\\n        {\\n            small2 = min(small2, num);\\n            if (visited[num] == 1)\\n                visited[num] = 2;\\n        }\\n\\n        for(int i = 1 ; i <10 ; i++)\\n        {\\n            if (visited[i] == 2)\\n                return i;\\n        }\\n         \\n         return (small1 + small2 * 10) > (small2 + small1 * 10) ? (small2 + small1 * 10) : (small1 + small2 * 10);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049981,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n  const result=[];\\n        for(let i=0;i<nums1.length;i++){\\n          for(let j=0;j<nums2.length;j++){\\n            if(nums1[i]===nums2[j])\\n            result.push(nums1[i]);\\n            else\\n            result.push(parseInt(nums1[i].toString()+nums2[j].toString()));\\n          }\\n        }\\n        for(let i=0;i<nums1.length;i++){\\n          for(let j=0;j<nums2.length;j++){\\n            if(nums1[i]===nums2[j])\\n            result.push(nums1[i]);\\n            else\\n            result.push(parseInt(nums2[j].toString()+nums1[i].toString()));\\n          }\\n        }\\n        return Math.min(...result);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n  const result=[];\\n        for(let i=0;i<nums1.length;i++){\\n          for(let j=0;j<nums2.length;j++){\\n            if(nums1[i]===nums2[j])\\n            result.push(nums1[i]);\\n            else\\n            result.push(parseInt(nums1[i].toString()+nums2[j].toString()));\\n          }\\n        }\\n        for(let i=0;i<nums1.length;i++){\\n          for(let j=0;j<nums2.length;j++){\\n            if(nums1[i]===nums2[j])\\n            result.push(nums1[i]);\\n            else\\n            result.push(parseInt(nums2[j].toString()+nums1[i].toString()));\\n          }\\n        }\\n        return Math.min(...result);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044716,
                "title": "easy-solution-in-java-with-100-less-run-time-and-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int arr[] = new int[20];\\n        int a = -1, b = -1;\\n        for(int i : nums1)\\n            arr[i]++;\\n        for(int i : nums2)\\n            arr[i+10]++;\\n        for(int i=0; i<10; i++){\\n            if(arr[i] == 1 && arr[i+10] == 1)\\n                return i;\\n            if(a == -1 && arr[i] == 1)\\n                a = i;\\n            if(b == -1 && arr[i+10] == 1)\\n                b = i;\\n        }\\n        return Math.min(a,b)*10+Math.max(a,b);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int arr[] = new int[20];\\n        int a = -1, b = -1;\\n        for(int i : nums1)\\n            arr[i]++;\\n        for(int i : nums2)\\n            arr[i+10]++;\\n        for(int i=0; i<10; i++){\\n            if(arr[i] == 1 && arr[i+10] == 1)\\n                return i;\\n            if(a == -1 && arr[i] == 1)\\n                a = i;\\n            if(b == -1 && arr[i+10] == 1)\\n                b = i;\\n        }\\n        return Math.min(a,b)*10+Math.max(a,b);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022113,
                "title": "easiest-ever-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        unordered_map<int,int> h;\\n        for(auto i:nums2)\\n        h[i]++;\\n\\n        \\n        for(auto i:nums1)\\n        {\\n            if(h[i]>0)\\n            return i;\\n        }\\n\\n        int ans=0;\\n        ans=nums1[0];\\n        ans=ans*10+nums2[0];\\n\\n        int ans2=0;\\n        ans2=nums2[0];\\n        ans2=ans2*10+nums1[0];\\n\\n        return min(ans,ans2) ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n\\n        unordered_map<int,int> h;\\n        for(auto i:nums2)\\n        h[i]++;\\n\\n        \\n        for(auto i:nums1)\\n        {\\n            if(h[i]>0)\\n            return i;\\n        }\\n\\n        int ans=0;\\n        ans=nums1[0];\\n        ans=ans*10+nums2[0];\\n\\n        int ans2=0;\\n        ans2=nums2[0];\\n        ans2=ans2*10+nums1[0];\\n\\n        return min(ans,ans2) ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018951,
                "title": "java-using-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> hs1 =  new HashSet<>();\\n       Set<Integer> hs2 =  new HashSet<>();\\n       for(int i : nums1){hs1.add(i);}\\n       for(int i : nums2){hs2.add(i) ;}\\n       for(int  i =1 ; i<=99 ; i++){\\n           if(i<=9){if(hs1.contains(i) && hs2.contains(i))return  i ; }\\n           else {\\n               int j=i/10 ; \\n               if( hs1.contains(i%10) &&hs2.contains(j) || hs1.contains(j)&&hs2.contains(i%10)){return i ;}\\n           }\\n       }\\n\\n        return 0 ; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Set<Integer> hs1 =  new HashSet<>();\\n       Set<Integer> hs2 =  new HashSet<>();\\n       for(int i : nums1){hs1.add(i);}\\n       for(int i : nums2){hs2.add(i) ;}\\n       for(int  i =1 ; i<=99 ; i++){\\n           if(i<=9){if(hs1.contains(i) && hs2.contains(i))return  i ; }\\n           else {\\n               int j=i/10 ; \\n               if( hs1.contains(i%10) &&hs2.contains(j) || hs1.contains(j)&&hs2.contains(i%10)){return i ;}\\n           }\\n       }\\n\\n        return 0 ; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4015002,
                "title": "python3-solution-using-sets-and-built-in-functions",
                "content": "# Intuition\\nWe need to first check if the answer can be 1-digit. Then we check the minimum value of 2 digit answers.\\n\\n# Approach\\nWe first get the intersection of 2 sets containing values in $$nums$$. If the intersection is not empty, that means we can come up with a 1-digit answer. So we return the minimum value in the intersection. \\n\\nIf the intersection is empty, then we need to create a 2-digit answer. We get the minimum value from each set and use the smaller value as the 10\\'s digit and the other as 1\\'s digit.\\n\\n# Complexity\\n- Time complexity: $$O(n+m)$$\\n    - $$n$$ is the size of $$nums1$$ \\n    - $$m$$ is the size of $$nums2$$\\n    - 1-pass for each list to convert to set => $$O(n+m)$$\\n    - 1-pass of the smaller set to get the intersection => $$O(min(n,m))$$ \\n    - 1-pass to iterate over the intersection => $$O(len(intersect(nums1, nums2)))$$\\n    - 1-pass to find minimum in each list => $$O(n+m)$$\\n    - The dominating term here is => $$O(n+m)$$\\n\\n- Space complexity: $$O(n+m)$$\\n    - We create sets to hold all the data  $$O(n+m)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        single = set(nums1) & set(nums2)\\n        if single: return min(single)\\n        m1, m2 = min(nums1), min(nums2)\\n        return min(m1,m2) * 10 + max(m1, m2)\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        single = set(nums1) & set(nums2)\\n        if single: return min(single)\\n        m1, m2 = min(nums1), min(nums2)\\n        return min(m1,m2) * 10 + max(m1, m2)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014843,
                "title": "not-so-much-short-code-lines-but-here-is-my-solution",
                "content": "It is not short code lines. I think it could be more efficient when last 6 lines would change. Anyway, Thanks for reading :)\\nIf this is helpful, Please thumbs up! :)\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        total_num = nums1 + nums2\\n        same_ans = []\\n        hash_ = {}\\n        for i in total_num:\\n            if i in hash_:\\n                hash_[i] += 1\\n            else:\\n                hash_[i] = 1\\n        for i, k in enumerate(hash_):\\n            if hash_[k] == 2:\\n                same_ans.append(k)\\n        if same_ans:\\n            return min(same_ans)\\n        ans = []\\n        ans.append(min(nums1))\\n        ans.append(min(nums2))\\n        ans.sort()\\n        ans = [str(i) for i in ans]\\n        return int(\\'\\'.join(ans))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        total_num = nums1 + nums2\\n        same_ans = []\\n        hash_ = {}\\n        for i in total_num:\\n            if i in hash_:\\n                hash_[i] += 1\\n            else:\\n                hash_[i] = 1\\n        for i, k in enumerate(hash_):\\n            if hash_[k] == 2:\\n                same_ans.append(k)\\n        if same_ans:\\n            return min(same_ans)\\n        ans = []\\n        ans.append(min(nums1))\\n        ans.append(min(nums2))\\n        ans.sort()\\n        ans = [str(i) for i in ans]\\n        return int(\\'\\'.join(ans))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014816,
                "title": "javascript-sets-min",
                "content": "# Code\\n```\\nvar minNumber = function(nums1, nums2) {\\n    const s1 = new Set(nums1);\\n    const s2 = new Set(nums2);\\n    for (let i = 0; i < 10; i++) {\\n        if (s1.has(i) && s2.has(i)) return i;\\n    }\\n    const m1 = Math.min(...nums1);\\n    const m2 = Math.min(...nums2);\\n    return +`${Math.min(m1, m2)}${Math.max(m1, m2)}`\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minNumber = function(nums1, nums2) {\\n    const s1 = new Set(nums1);\\n    const s2 = new Set(nums2);\\n    for (let i = 0; i < 10; i++) {\\n        if (s1.has(i) && s2.has(i)) return i;\\n    }\\n    const m1 = Math.min(...nums1);\\n    const m2 = Math.min(...nums2);\\n    return +`${Math.min(m1, m2)}${Math.max(m1, m2)}`\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013321,
                "title": "c-hash-concise-understandable",
                "content": "# Intuition\\nAt first sight, we can easily think of using **sort** to solve it, and after thinking for a while, using **hash table** is not a bad way.\\n\\n# Approach\\n1. **using two set(st1/st2) to store nums1 and nums2**;\\n2. **find the element of st2 in st1**, if successfully, then return the element;\\n3. if failingly, just **take the first element from st1 and st2, compare them and caculate the result**. \\n\\n# Complexity\\n- Time complexity:\\n$$O(logN1 + logN2)$$\\uFF1AN1 and N2 represent the length of nums1 and nums2.\\n\\n# Code\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        set<int> st1, st2;\\n        for (auto &num : nums1) {\\n            st1.insert(num);\\n        }\\n\\n        for (auto &num : nums2) {\\n            st2.insert(num);\\n        }\\n\\n        for (auto it : st1) {\\n            if (st2.find(it) != st2.end()) {\\n                return it;\\n            }\\n        }\\n\\n        return *st1.begin() < *st2.begin() ? *st1.begin() * 10 + *st2.begin() : *st2.begin() * 10 + *st1.begin();        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        set<int> st1, st2;\\n        for (auto &num : nums1) {\\n            st1.insert(num);\\n        }\\n\\n        for (auto &num : nums2) {\\n            st2.insert(num);\\n        }\\n\\n        for (auto it : st1) {\\n            if (st2.find(it) != st2.end()) {\\n                return it;\\n            }\\n        }\\n\\n        return *st1.begin() < *st2.begin() ? *st1.begin() * 10 + *st2.begin() : *st2.begin() * 10 + *st1.begin();        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004880,
                "title": "c-hash-map-sort-100-beats",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        std::unordered_map<int, int> cache;\\n        std::size_t i = 0, j = 0;\\n        int oneDigitMin = INT_MAX;\\n\\n        while(i < nums1.size() && j < nums2.size())\\n        {\\n            ++cache[nums1[i++]];\\n            ++cache[nums2[j++]];\\n        }\\n\\n        while(i < nums1.size()) ++cache[nums1[i++]];\\n        while(j < nums2.size()) ++cache[nums2[j++]];\\n\\n        for(const auto &i : cache)\\n        {\\n            if(i.second == 2) oneDigitMin = std::min(oneDigitMin, i.first);\\n        }\\n\\n        if(oneDigitMin != INT_MAX) return oneDigitMin;\\n\\n        std::sort(nums1.begin(), nums1.end());\\n        std::sort(nums2.begin(), nums2.end());\\n\\n        return nums1[0] < nums2[0] ? nums1[0] * 10 + nums2[0] : nums2[0] * 10 + nums1[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        std::unordered_map<int, int> cache;\\n        std::size_t i = 0, j = 0;\\n        int oneDigitMin = INT_MAX;\\n\\n        while(i < nums1.size() && j < nums2.size())\\n        {\\n            ++cache[nums1[i++]];\\n            ++cache[nums2[j++]];\\n        }\\n\\n        while(i < nums1.size()) ++cache[nums1[i++]];\\n        while(j < nums2.size()) ++cache[nums2[j++]];\\n\\n        for(const auto &i : cache)\\n        {\\n            if(i.second == 2) oneDigitMin = std::min(oneDigitMin, i.first);\\n        }\\n\\n        if(oneDigitMin != INT_MAX) return oneDigitMin;\\n\\n        std::sort(nums1.begin(), nums1.end());\\n        std::sort(nums2.begin(), nums2.end());\\n\\n        return nums1[0] < nums2[0] ? nums1[0] * 10 + nums2[0] : nums2[0] * 10 + nums1[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003489,
                "title": "o-n-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> cnt(10,0);\\n        int min_1=nums1[0],min_2=nums2[0],min_common=10;\\n        for(auto num1:nums1){\\n            cnt[num1]++;\\n            min_1=min(min_1,num1);\\n        };\\n        for(auto num2:nums2){\\n            min_2=min(min_2,num2);\\n            if(cnt[num2]>0) min_common=min(min_common,num2);    \\n        }\\n        if(min_common!=10) return min_common;\\n        else return min_1>min_2? min_2*10+min_1: min_1*10+min_2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> cnt(10,0);\\n        int min_1=nums1[0],min_2=nums2[0],min_common=10;\\n        for(auto num1:nums1){\\n            cnt[num1]++;\\n            min_1=min(min_1,num1);\\n        };\\n        for(auto num2:nums2){\\n            min_2=min(min_2,num2);\\n            if(cnt[num2]>0) min_common=min(min_common,num2);    \\n        }\\n        if(min_common!=10) return min_common;\\n        else return min_1>min_2? min_2*10+min_1: min_1*10+min_2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003373,
                "title": "simple-beginner-level-c-solution-runtime-0-ms-beats-100-o-1-time-and-space",
                "content": "\\n# Complexity\\n- Time complexity:  ```O(n^2)``` --> ```O(9^2)``` --> ```O(81)``` --> ```O(1)```\\n- Space complexity: ```O(1)```\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```cpp\\n// Runtime 0 ms Beats 100% Memory 5.6 MB Beats 75%\\ninline int max(int a, int b) {\\n    return (a > b) ? a : b;\\n}\\ninline int min(int a, int b) {\\n    return (a < b) ? a : b;\\n}\\nint minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size) {\\n    int result = 89;  // the largest smallest-number allowed is 89\\n    for (int i = 0; i < nums1Size; i++) {\\n        for (int j = 0; j < nums2Size; j++) {\\n            result = min(result, (nums1[i] == nums2[j] ? \\n                         nums1[i] : min(nums1[i], nums2[j]) * 10 + max(nums1[i], nums2[j])));\\n        }\\n    }\\n    return result;\\n}\\n```\\n",
                "solutionTags": [
                    "C",
                    "Array",
                    "Enumeration"
                ],
                "code": "```O(n^2)```\n```O(9^2)```\n```O(81)```\n```O(1)```\n```O(1)```\n```cpp\\n// Runtime 0 ms Beats 100% Memory 5.6 MB Beats 75%\\ninline int max(int a, int b) {\\n    return (a > b) ? a : b;\\n}\\ninline int min(int a, int b) {\\n    return (a < b) ? a : b;\\n}\\nint minNumber(int* nums1, int nums1Size, int* nums2, int nums2Size) {\\n    int result = 89;  // the largest smallest-number allowed is 89\\n    for (int i = 0; i < nums1Size; i++) {\\n        for (int j = 0; j < nums2Size; j++) {\\n            result = min(result, (nums1[i] == nums2[j] ? \\n                         nums1[i] : min(nums1[i], nums2[j]) * 10 + max(nums1[i], nums2[j])));\\n        }\\n    }\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987409,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\n    public int minNumber(int[] a, int[] b)\\n    {\\n        ArrayList<Integer>s=new ArrayList<Integer>();\\n         ArrayList<Integer>s1=new ArrayList<Integer>();\\n        for(int i=0;i<a.length;i++)\\n        {\\n            for(int j=0;j<b.length;j++)\\n            {\\n                int n=(a[i]*10)+b[j];\\n                s.add(n);\\n                int r=reverse(n);\\n                s.add(r);           \\n            }\\n        }\\n        int arr[]=new int[s.size()];int c=0;\\n        for(int i:s)\\n            arr[c++]=i;\\n        Arrays.sort(arr);\\n        int max=arr[0];\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]%11==0)\\n            {\\n                s1.add(arr[i]%10);\\n                int a1[]=new int[s1.size()];int x=0;\\n                for(int j:s1)\\n                a1[x++]=j;\\n                Arrays.sort(a1);\\n                max=a1[0];\\n            }\\n        }\\n        return max;\\n        \\n    }\\n    public static int reverse(int n)\\n    {\\n        int r=0;\\n        int d=0;\\n        while(n>0)\\n        {\\n            d=n%10;\\n            r=r*10+d;\\n            n=n/10;\\n        }\\n        return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int minNumber(int[] a, int[] b)\\n    {\\n        ArrayList<Integer>s=new ArrayList<Integer>();\\n         ArrayList<Integer>s1=new ArrayList<Integer>();\\n        for(int i=0;i<a.length;i++)\\n        {\\n            for(int j=0;j<b.length;j++)\\n            {\\n                int n=(a[i]*10)+b[j];\\n                s.add(n);\\n                int r=reverse(n);\\n                s.add(r);           \\n            }\\n        }\\n        int arr[]=new int[s.size()];int c=0;\\n        for(int i:s)\\n            arr[c++]=i;\\n        Arrays.sort(arr);\\n        int max=arr[0];\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]%11==0)\\n            {\\n                s1.add(arr[i]%10);\\n                int a1[]=new int[s1.size()];int x=0;\\n                for(int j:s1)\\n                a1[x++]=j;\\n                Arrays.sort(a1);\\n                max=a1[0];\\n            }\\n        }\\n        return max;\\n        \\n    }\\n    public static int reverse(int n)\\n    {\\n        int r=0;\\n        int d=0;\\n        while(n>0)\\n        {\\n            d=n%10;\\n            r=r*10+d;\\n            n=n/10;\\n        }\\n        return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987088,
                "title": "easy-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int smallest1=nums1[0], smallest2=nums2[0], equal=INT_MAX, flag = 1;\\n        unordered_map<int, int> mp;\\n        for(int i=0; i < nums1.size(); i++){\\n            if(smallest1 > nums1[i]) smallest1 = nums1[i];\\n            mp[nums1[i]]=1;\\n        }\\n        for(int i=0; i < nums2.size(); i++){\\n            if(mp.find(nums2[i])!=mp.end()){\\n                if(equal > nums2[i]) equal = nums2[i];\\n                flag = 0;\\n            }\\n            else if(flag and smallest2 > nums2[i]) smallest2 = nums2[i];\\n        }\\n        if(equal!=INT_MAX) return equal;\\n        else if(smallest1 < smallest2) return smallest1*10 + smallest2;\\n        return smallest2*10 + smallest1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int smallest1=nums1[0], smallest2=nums2[0], equal=INT_MAX, flag = 1;\\n        unordered_map<int, int> mp;\\n        for(int i=0; i < nums1.size(); i++){\\n            if(smallest1 > nums1[i]) smallest1 = nums1[i];\\n            mp[nums1[i]]=1;\\n        }\\n        for(int i=0; i < nums2.size(); i++){\\n            if(mp.find(nums2[i])!=mp.end()){\\n                if(equal > nums2[i]) equal = nums2[i];\\n                flag = 0;\\n            }\\n            else if(flag and smallest2 > nums2[i]) smallest2 = nums2[i];\\n        }\\n        if(equal!=INT_MAX) return equal;\\n        else if(smallest1 < smallest2) return smallest1*10 + smallest2;\\n        return smallest2*10 + smallest1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981267,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort(reverse=True)\\n        nums2.sort(reverse=True)\\n\\n        \\n\\n        while nums1[-1] == 0:\\n            nums1.pop()\\n        \\n        while nums2[-1] == 0:\\n            nums2.pop()\\n       \\n        for i in nums1[::-1]:\\n            if i in nums2[::-1]:\\n                return i\\n        \\n        val1 = nums1[-1]\\n        val2 = nums2[-1]\\n\\n        if val1 < val2:\\n            return val1 * 10 + val2\\n        else:\\n            return val2 * 10 + val1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1.sort(reverse=True)\\n        nums2.sort(reverse=True)\\n\\n        \\n\\n        while nums1[-1] == 0:\\n            nums1.pop()\\n        \\n        while nums2[-1] == 0:\\n            nums2.pop()\\n       \\n        for i in nums1[::-1]:\\n            if i in nums2[::-1]:\\n                return i\\n        \\n        val1 = nums1[-1]\\n        val2 = nums2[-1]\\n\\n        if val1 < val2:\\n            return val1 * 10 + val2\\n        else:\\n            return val2 * 10 + val1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977121,
                "title": "1ms-solution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        List<Integer> list=new ArrayList<>();\\n        for(int j=0;j<nums2.length;j++)\\n        {\\n            list.add(nums2[j]);\\n        }\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            if(list.contains(nums1[i]))\\n            {\\n                return nums1[i];\\n            }\\n        }\\n\\n        int x=nums1[0];\\n        int y=nums2[0];\\n        if(x<y)\\n        {\\n            return (x*10)+y;\\n        }\\n        return (y*10)+x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        List<Integer> list=new ArrayList<>();\\n        for(int j=0;j<nums2.length;j++)\\n        {\\n            list.add(nums2[j]);\\n        }\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            if(list.contains(nums1[i]))\\n            {\\n                return nums1[i];\\n            }\\n        }\\n\\n        int x=nums1[0];\\n        int y=nums2[0];\\n        if(x<y)\\n        {\\n            return (x*10)+y;\\n        }\\n        return (y*10)+x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974311,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int s1=nums1[0],s2=nums2[0];\\n        if(contains(nums1,nums2)!=-1){\\n            return contains(nums1,nums2);\\n        }\\n        else if(s1>s2){\\n            return s2*10+s1;\\n        }\\n        return s1*10+s2;\\n    }\\n    public static int contains(int[]nums1,int[]nums2){\\n        int i=0,j=0;\\n        while(i<nums1.length && j<nums2.length){\\n            if(nums1[i]>nums2[j]){\\n                j++;\\n            }\\n            else if(nums1[i]<nums2[j]){\\n                i++;\\n            }\\n            else if(nums1[i]==nums2[j]){\\n                return nums1[i];\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int s1=nums1[0],s2=nums2[0];\\n        if(contains(nums1,nums2)!=-1){\\n            return contains(nums1,nums2);\\n        }\\n        else if(s1>s2){\\n            return s2*10+s1;\\n        }\\n        return s1*10+s2;\\n    }\\n    public static int contains(int[]nums1,int[]nums2){\\n        int i=0,j=0;\\n        while(i<nums1.length && j<nums2.length){\\n            if(nums1[i]>nums2[j]){\\n                j++;\\n            }\\n            else if(nums1[i]<nums2[j]){\\n                i++;\\n            }\\n            else if(nums1[i]==nums2[j]){\\n                return nums1[i];\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968441,
                "title": "an-easy-way-to-solve-in-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums = [0]*9\\n        for i in nums1:\\n            nums[i-1] = 2\\n        for i in nums2:\\n            nums[i-1] -= 1\\n        pos = 0\\n        neg = 0\\n        ans = 0\\n        for i in range(9):\\n            if nums[i] == 1:\\n                return i+1\\n            elif nums[i] == 2 and pos == 0 and neg == 0:\\n                ans = 10*(i+1)\\n                pos += 1\\n            elif nums[i] == -1 and pos == 0 and neg == 0:\\n                ans = 10*(i+1)\\n                neg += 1\\n            elif nums[i] == 2 and pos == 0 and neg == 1:\\n                ans += i+1\\n                pos += 1\\n            elif nums[i] == -1 and pos == 1 and neg == 0:\\n                ans += i+1\\n                neg += 1\\n            else:\\n                pass\\n        return ans\\n            \\n             \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums = [0]*9\\n        for i in nums1:\\n            nums[i-1] = 2\\n        for i in nums2:\\n            nums[i-1] -= 1\\n        pos = 0\\n        neg = 0\\n        ans = 0\\n        for i in range(9):\\n            if nums[i] == 1:\\n                return i+1\\n            elif nums[i] == 2 and pos == 0 and neg == 0:\\n                ans = 10*(i+1)\\n                pos += 1\\n            elif nums[i] == -1 and pos == 0 and neg == 0:\\n                ans = 10*(i+1)\\n                neg += 1\\n            elif nums[i] == 2 and pos == 0 and neg == 1:\\n                ans += i+1\\n                pos += 1\\n            elif nums[i] == -1 and pos == 1 and neg == 0:\\n                ans += i+1\\n                neg += 1\\n            else:\\n                pass\\n        return ans\\n            \\n             \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964014,
                "title": "simple-solution-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        \\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        int[] temp=new int[Math.max(nums1[nums1.length-1],nums2[nums2.length-1])+1];\\n\\n        int n1=nums1[0];\\n\\n        int n2=nums2[0];\\n\\n        int k=Math.min(n1*10+n2,n2*10+n1);\\n\\n        for(int i=0;i<nums1.length;i++){\\n            temp[nums1[i]]++;\\n        }\\n\\n        for(int j=0;j<nums2.length;j++){\\n            if(temp[nums2[j]]>0){\\n                k=Math.min(k,nums2[j]);\\n                return k;\\n            }\\n        }\\n\\n        return k;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        \\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        int[] temp=new int[Math.max(nums1[nums1.length-1],nums2[nums2.length-1])+1];\\n\\n        int n1=nums1[0];\\n\\n        int n2=nums2[0];\\n\\n        int k=Math.min(n1*10+n2,n2*10+n1);\\n\\n        for(int i=0;i<nums1.length;i++){\\n            temp[nums1[i]]++;\\n        }\\n\\n        for(int j=0;j<nums2.length;j++){\\n            if(temp[nums2[j]]>0){\\n                k=Math.min(k,nums2[j]);\\n                return k;\\n            }\\n        }\\n\\n        return k;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958326,
                "title": "c-easy-solution-using-basic-sorting-knowledge",
                "content": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n                    for(int i=0; i<nums1.size(); i++){\\n                            for(int j=0; j<nums2.size(); j++){\\n                                    if(nums1[i]==nums2[j]){\\n                                            return nums1[i];\\n                                    }\\n                            }\\n                    }\\n            if(nums1[0]<nums2[0]){\\n                    return (nums1[0]*10)+nums2[0];\\n            }\\n            \\n             return (nums2[0]*10)+nums1[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n                    for(int i=0; i<nums1.size(); i++){\\n                            for(int j=0; j<nums2.size(); j++){\\n                                    if(nums1[i]==nums2[j]){\\n                                            return nums1[i];\\n                                    }\\n                            }\\n                    }\\n            if(nums1[0]<nums2[0]){\\n                    return (nums1[0]*10)+nums2[0];\\n            }\\n            \\n             return (nums2[0]*10)+nums1[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3955282,
                "title": "97-beats-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n*log(n))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean flag = false;\\n        int num=0;\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int i=0;int j=0;\\n        while(i<nums1.length && j<nums2.length){\\n            if(nums1[i]>nums2[j]){\\n                j++;\\n            }else if(nums1[i]<nums2[j]){\\n                i++;\\n            }else{\\n                return nums1[i];\\n            }\\n        }\\n        if(nums1[0]<nums2[0]){\\n           return nums1[0]*10+nums2[0];\\n        }else{\\n           return nums2[0]*10 + nums1[0];\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean flag = false;\\n        int num=0;\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        int i=0;int j=0;\\n        while(i<nums1.length && j<nums2.length){\\n            if(nums1[i]>nums2[j]){\\n                j++;\\n            }else if(nums1[i]<nums2[j]){\\n                i++;\\n            }else{\\n                return nums1[i];\\n            }\\n        }\\n        if(nums1[0]<nums2[0]){\\n           return nums1[0]*10+nums2[0];\\n        }else{\\n           return nums2[0]*10 + nums1[0];\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950490,
                "title": "one-line-solution-using-intersection-of-sets",
                "content": "# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        \\n        return min(set(nums1).intersection(set(nums2))) if len(set(nums1).intersection(set(nums2)))!=0 else min([min(nums1)*10+min(nums2),min(nums2)*10+min(nums1)])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        \\n        return min(set(nums1).intersection(set(nums2))) if len(set(nums1).intersection(set(nums2)))!=0 else min([min(nums1)*10+min(nums2),min(nums2)*10+min(nums1)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950242,
                "title": "c-easy-to-understand-solution",
                "content": "# Complexity\\n- Time complexity:\\noverall time complexity is O(n1 * log(n1) + n2 * log(n2) + n1 * n2), which simplifies to O(n1 * n2 + (n1 + n2) * log(n1 + n2)).\\n- Space complexity:\\nspace complexity of this code is O(n1+n2).\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    cout<<nums1[i];\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        if(nums1[0]>nums2[0])\\n        {\\n            return (nums2[0]*10)+nums1[0];\\n        }\\n        else\\n        {\\n            return (nums1[0]*10)+nums2[0];\\n        }\\n        return 0;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    cout<<nums1[i];\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        if(nums1[0]>nums2[0])\\n        {\\n            return (nums2[0]*10)+nums1[0];\\n        }\\n        else\\n        {\\n            return (nums1[0]*10)+nums2[0];\\n        }\\n        return 0;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3946331,
                "title": "form-smallest-number-from-two-digit-arrays-with-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.util.*;\\nclass Solution {\\n\\tpublic int minNumber(int[] nums1, int[] nums2) {\\n\\t\\tint n = equalnum(nums1, nums2);\\n\\t\\tif(n==0) {\\n\\t\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\t\\tArrays.sort(nums1);\\n\\t\\t\\tArrays.sort(nums2);\\n\\t\\t\\tlist.add(nums1[0]);\\n\\t\\t\\tlist.add(nums2[0]);\\n\\t\\t\\tCollections.sort(list);\\n\\t\\t\\tString s = \"\";\\n\\t\\t\\tfor(int l : list) {\\n\\t\\t\\t\\ts += l;\\n\\t\\t\\t}\\n\\t\\t\\treturn Integer.parseInt(s);\\n\\t\\t}else {\\n\\t\\t\\treturn n;\\n\\t\\t}\\n\\t}\\n\\tpublic int equalnum(int[] num1, int[] num2) {\\n\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\tif((num1.length==num2.length) || (num1.length<num2.length)) {\\n\\t\\t\\tfor(int i : num1) {\\n\\t\\t\\t\\tfor(int j : num2) {\\n\\t\\t\\t\\t\\tif(i==j) {\\n\\t\\t\\t\\t\\t\\tlist.add(i); break;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}else if(num1.length>num2.length) {\\n\\t\\t\\tfor(int i : num2) {\\n\\t\\t\\t\\tfor(int j : num1) {\\n\\t\\t\\t\\t\\tif(i==j) {\\n\\t\\t\\t\\t\\t\\tlist.add(i); break;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn list.size() == 0 ? 0 : Collections.min(list);\\n\\t}\\n\\tpublic static void main(String[] args) {\\n\\t\\tSolution smallestnum = new Solution();\\n\\t\\tint[] nums11 = {4,1,3}, nums12 = {5,7};\\n\\t\\tint[] nums21 = {3,5,2,6}, nums22 = {3,1,7};\\n\\t\\tSystem.out.println(\"Form Smallest Number From Two Digit Arrays : \" + smallestnum.minNumber(nums11, nums12));\\n\\t\\tSystem.out.println(\"Form Smallest Number From Two Digit Arrays : \" + smallestnum.minNumber(nums21, nums22));\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.*;\\nclass Solution {\\n\\tpublic int minNumber(int[] nums1, int[] nums2) {\\n\\t\\tint n = equalnum(nums1, nums2);\\n\\t\\tif(n==0) {\\n\\t\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\t\\tArrays.sort(nums1);\\n\\t\\t\\tArrays.sort(nums2);\\n\\t\\t\\tlist.add(nums1[0]);\\n\\t\\t\\tlist.add(nums2[0]);\\n\\t\\t\\tCollections.sort(list);\\n\\t\\t\\tString s = \"\";\\n\\t\\t\\tfor(int l : list) {\\n\\t\\t\\t\\ts += l;\\n\\t\\t\\t}\\n\\t\\t\\treturn Integer.parseInt(s);\\n\\t\\t}else {\\n\\t\\t\\treturn n;\\n\\t\\t}\\n\\t}\\n\\tpublic int equalnum(int[] num1, int[] num2) {\\n\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\tif((num1.length==num2.length) || (num1.length<num2.length)) {\\n\\t\\t\\tfor(int i : num1) {\\n\\t\\t\\t\\tfor(int j : num2) {\\n\\t\\t\\t\\t\\tif(i==j) {\\n\\t\\t\\t\\t\\t\\tlist.add(i); break;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}else if(num1.length>num2.length) {\\n\\t\\t\\tfor(int i : num2) {\\n\\t\\t\\t\\tfor(int j : num1) {\\n\\t\\t\\t\\t\\tif(i==j) {\\n\\t\\t\\t\\t\\t\\tlist.add(i); break;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn list.size() == 0 ? 0 : Collections.min(list);\\n\\t}\\n\\tpublic static void main(String[] args) {\\n\\t\\tSolution smallestnum = new Solution();\\n\\t\\tint[] nums11 = {4,1,3}, nums12 = {5,7};\\n\\t\\tint[] nums21 = {3,5,2,6}, nums22 = {3,1,7};\\n\\t\\tSystem.out.println(\"Form Smallest Number From Two Digit Arrays : \" + smallestnum.minNumber(nums11, nums12));\\n\\t\\tSystem.out.println(\"Form Smallest Number From Two Digit Arrays : \" + smallestnum.minNumber(nums21, nums22));\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943319,
                "title": "clean-simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int min1 = 10;\\n        int min2 = 10;\\n        int common = 10;\\n        HashSet<Integer> hs = new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            if(nums1[i] < min1)min1 = nums1[i];\\n            hs.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            if(nums2[i] < min2)min2=nums2[i];\\n            if(hs.contains(nums2[i])){\\n                if(nums2[i] < common){\\n                    common = nums2[i];\\n                }\\n            }\\n        }\\n        if(common<10)return common;\\n        if(min1<min2){\\n            return min1*10+min2;\\n        }else{\\n            return min2*10+min1;\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int min1 = 10;\\n        int min2 = 10;\\n        int common = 10;\\n        HashSet<Integer> hs = new HashSet<>();\\n        for(int i=0;i<nums1.length;i++){\\n            if(nums1[i] < min1)min1 = nums1[i];\\n            hs.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++){\\n            if(nums2[i] < min2)min2=nums2[i];\\n            if(hs.contains(nums2[i])){\\n                if(nums2[i] < common){\\n                    common = nums2[i];\\n                }\\n            }\\n        }\\n        if(common<10)return common;\\n        if(min1<min2){\\n            return min1*10+min2;\\n        }else{\\n            return min2*10+min1;\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939612,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        map<int,int>m1;map<int,int>m2;\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            m1[nums1[i]]++;\\n        }\\n        for(int i=0;i<nums2.size();i++)\\n        {\\n            m2[nums2[i]]++;\\n        }\\n        for(int i=0;i<=9;i++)\\n        {\\n            if(m1[i] and m2[i])\\n            {\\n                return i;\\n            }\\n        }\\n        int mi1=*min_element(nums1.begin(),nums1.end());\\n        int mi2=*min_element(nums2.begin(),nums2.end());\\n        if(mi1<=mi2)\\n        {\\n            return mi1*10+mi2;\\n        }   \\n        else return mi2*10+mi1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        map<int,int>m1;map<int,int>m2;\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            m1[nums1[i]]++;\\n        }\\n        for(int i=0;i<nums2.size();i++)\\n        {\\n            m2[nums2[i]]++;\\n        }\\n        for(int i=0;i<=9;i++)\\n        {\\n            if(m1[i] and m2[i])\\n            {\\n                return i;\\n            }\\n        }\\n        int mi1=*min_element(nums1.begin(),nums1.end());\\n        int mi2=*min_element(nums2.begin(),nums2.end());\\n        if(mi1<=mi2)\\n        {\\n            return mi1*10+mi2;\\n        }   \\n        else return mi2*10+mi1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3935741,
                "title": "good-and-dynamic-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int n=nums1.size();\\n        int m=nums2.size();\\n        int ans=stoi(to_string(nums1[0])+to_string(nums2[0]));\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<m;j++){\\n                if(nums1[i]==nums2[j]){\\n                    ans=min(ans,nums1[i]);\\n                }\\n                else{\\n                    int x;\\n                    if(nums1[i]<nums2[j]){\\n                        x=stoi(to_string(nums1[i])+to_string(nums2[j]));\\n                    }\\n                    else{\\n                        x=stoi(to_string(nums2[j])+to_string(nums1[i]));\\n                    }\\n                    ans=min(ans,x);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int n=nums1.size();\\n        int m=nums2.size();\\n        int ans=stoi(to_string(nums1[0])+to_string(nums2[0]));\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<m;j++){\\n                if(nums1[i]==nums2[j]){\\n                    ans=min(ans,nums1[i]);\\n                }\\n                else{\\n                    int x;\\n                    if(nums1[i]<nums2[j]){\\n                        x=stoi(to_string(nums1[i])+to_string(nums2[j]));\\n                    }\\n                    else{\\n                        x=stoi(to_string(nums2[j])+to_string(nums1[i]));\\n                    }\\n                    ans=min(ans,x);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933582,
                "title": "easy-to-understand-c-brute",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution { \\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j]){\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        int q=(nums1[0]*10)+nums2[0];\\n        int r=(nums2[0]*10)+nums1[0];\\n        \\n        return min(q,r);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution { \\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n\\n        for(int i=0;i<nums1.size();i++){\\n            for(int j=0;j<nums2.size();j++){\\n                if(nums1[i]==nums2[j]){\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        int q=(nums1[0]*10)+nums2[0];\\n        int r=(nums2[0]*10)+nums1[0];\\n        \\n        return min(q,r);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933579,
                "title": "best-time-complexity-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nUsing Hashmap\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution { // \\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int hash[10]={0};\\n        int min1=INT_MAX;\\n        for(int i=0;i<nums1.size();i++){\\n            hash[nums1[i]]++;\\n            min1=min(min1,nums1[i]);\\n        }\\n        int min2=INT_MAX;\\n        for(int j=0;j<nums2.size();j++){\\n            hash[nums2[j]]++;\\n            min2=min(min2,nums2[j]);\\n        }\\n        for(int i=0;i<10;i++){\\n            if(hash[i]==2){\\n                return i;\\n            }\\n        }\\n        int k=min1*10+min2;\\n        int w=min2*10+min1;\\n        return min(k,w);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution { // \\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int hash[10]={0};\\n        int min1=INT_MAX;\\n        for(int i=0;i<nums1.size();i++){\\n            hash[nums1[i]]++;\\n            min1=min(min1,nums1[i]);\\n        }\\n        int min2=INT_MAX;\\n        for(int j=0;j<nums2.size();j++){\\n            hash[nums2[j]]++;\\n            min2=min(min2,nums2[j]);\\n        }\\n        for(int i=0;i<10;i++){\\n            if(hash[i]==2){\\n                return i;\\n            }\\n        }\\n        int k=min1*10+min2;\\n        int w=min2*10+min1;\\n        return min(k,w);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930321,
                "title": "c-using-bool-condition",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n      // if(nums1||nums2==NULL){\\n      //   return;\\n      //   exit;\\n      // }\\n       int min1=*min_element(nums1.begin(),nums1.end());\\n       int min2=*min_element(nums2.begin(),nums2.end());\\n       bool isright= false;\\n       vector<int>store;\\n       int mn;\\n       for(int i=0;i<nums1.size();i++){\\n            for(int k=0;k<nums2.size();k++){\\n                if(nums1[i]==nums2[k]){\\n               store.push_back(nums1[i]);  \\n                  mn= *min_element(store.begin(),store.end());\\n                  isright=true;\\n                }\\n                \\n            }\\n       }      \\n       if(isright){\\n         return mn;\\n         exit;\\n       }\\n\\n        string s1= to_string(min1);\\n        string s2= to_string(min2);\\n        if(min1<min2){\\n        string s3= s1+s2;\\n        int ans= stoi(s3); \\n          return ans;\\n        }else{\\n          string s4= s2+s1;\\n        int ans1= stoi(s4); \\n          return ans1;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n      // if(nums1||nums2==NULL){\\n      //   return;\\n      //   exit;\\n      // }\\n       int min1=*min_element(nums1.begin(),nums1.end());\\n       int min2=*min_element(nums2.begin(),nums2.end());\\n       bool isright= false;\\n       vector<int>store;\\n       int mn;\\n       for(int i=0;i<nums1.size();i++){\\n            for(int k=0;k<nums2.size();k++){\\n                if(nums1[i]==nums2[k]){\\n               store.push_back(nums1[i]);  \\n                  mn= *min_element(store.begin(),store.end());\\n                  isright=true;\\n                }\\n                \\n            }\\n       }      \\n       if(isright){\\n         return mn;\\n         exit;\\n       }\\n\\n        string s1= to_string(min1);\\n        string s2= to_string(min2);\\n        if(min1<min2){\\n        string s3= s1+s2;\\n        int ans= stoi(s3); \\n          return ans;\\n        }else{\\n          string s4= s2+s1;\\n        int ans1= stoi(s4); \\n          return ans1;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3924246,
                "title": "java-one-pass-o-m-n",
                "content": "# Intuition\\nEasy level. must have one pass.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int minBoth = Integer.MAX_VALUE, min1 = nums1[0], min2 = nums2[0];\\n        HashSet<Integer> set = new HashSet();\\n        for(int n : nums1) {\\n            min1 = Math.min(min1, n);\\n            set.add(n);\\n        }\\n\\n        for(int n : nums2) {\\n            min2 = Math.min(min2, n);\\n            if(set.contains(n)) minBoth = Math.min(minBoth, n);\\n        }\\n\\n        if(minBoth != Integer.MAX_VALUE) return minBoth;\\n        return min1 < min2 ? min1 * 10 + min2 : min2 * 10 + min1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int minBoth = Integer.MAX_VALUE, min1 = nums1[0], min2 = nums2[0];\\n        HashSet<Integer> set = new HashSet();\\n        for(int n : nums1) {\\n            min1 = Math.min(min1, n);\\n            set.add(n);\\n        }\\n\\n        for(int n : nums2) {\\n            min2 = Math.min(min2, n);\\n            if(set.contains(n)) minBoth = Math.min(minBoth, n);\\n        }\\n\\n        if(minBoth != Integer.MAX_VALUE) return minBoth;\\n        return min1 < min2 ? min1 * 10 + min2 : min2 * 10 + min1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3893847,
                "title": "java-solution-hashmap-o-n-m-not-common-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust want to do this question whithout using 2 For Loops.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing hashMAp to solve this.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N+M)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nVery Much\\n# Code\\n```\\nclass Solution {\\n\\n    HashMap<Integer, Integer> map1 = new HashMap<>();\\n    HashMap<Integer, Integer> map2 = new HashMap<>();\\n    boolean flag  = false;\\n    ArrayList<Integer> common = new ArrayList<>();\\n\\n    public void mapping(int[] arr, HashMap<Integer,Integer> map){\\n\\n        for(int x : arr){\\n            if(map.containsKey(x)){\\n                map.put(x,map.get(x)+1);\\n            }else{\\n                map.put(x,1);\\n            }\\n\\n            if(flag == true){\\n                if(map1.containsKey(x)){\\n                    common.add(x);\\n                }\\n            }\\n        }\\n\\n        flag = true;\\n    }\\n\\n    public String minist(HashMap<Integer,Integer> map){\\n        Integer minValue =  new Integer(Integer.MAX_VALUE);\\n\\n        for(Map.Entry<Integer,Integer> e : map.entrySet()){\\n            if(e.getKey() < minValue){\\n                minValue = e.getKey();\\n            }\\n        }\\n\\n        String res = minValue.toString();\\n\\n        return res;\\n\\n    }\\n\\n\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        mapping(nums1, map1);\\n        mapping(nums2, map2);\\n        flag = false;\\n        int min = Integer.MAX_VALUE;\\n\\n        for(int x : common){\\n            if(min > x){\\n                min = x;\\n                flag = true;\\n            }\\n        }\\n\\n        if(flag == true){\\n            return min;\\n        }\\n\\n        String str1 = minist(map1);\\n        String str2 = minist(map2);\\n        String ans = \"\";\\n\\n        if(Integer.parseInt(str1) <= Integer.parseInt(str2)){\\n            ans = str1 + str2;\\n        }else{\\n            ans = str2 + str1;\\n        }\\n\\n        \\n\\n\\n        return Integer.parseInt(ans);\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    HashMap<Integer, Integer> map1 = new HashMap<>();\\n    HashMap<Integer, Integer> map2 = new HashMap<>();\\n    boolean flag  = false;\\n    ArrayList<Integer> common = new ArrayList<>();\\n\\n    public void mapping(int[] arr, HashMap<Integer,Integer> map){\\n\\n        for(int x : arr){\\n            if(map.containsKey(x)){\\n                map.put(x,map.get(x)+1);\\n            }else{\\n                map.put(x,1);\\n            }\\n\\n            if(flag == true){\\n                if(map1.containsKey(x)){\\n                    common.add(x);\\n                }\\n            }\\n        }\\n\\n        flag = true;\\n    }\\n\\n    public String minist(HashMap<Integer,Integer> map){\\n        Integer minValue =  new Integer(Integer.MAX_VALUE);\\n\\n        for(Map.Entry<Integer,Integer> e : map.entrySet()){\\n            if(e.getKey() < minValue){\\n                minValue = e.getKey();\\n            }\\n        }\\n\\n        String res = minValue.toString();\\n\\n        return res;\\n\\n    }\\n\\n\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        mapping(nums1, map1);\\n        mapping(nums2, map2);\\n        flag = false;\\n        int min = Integer.MAX_VALUE;\\n\\n        for(int x : common){\\n            if(min > x){\\n                min = x;\\n                flag = true;\\n            }\\n        }\\n\\n        if(flag == true){\\n            return min;\\n        }\\n\\n        String str1 = minist(map1);\\n        String str2 = minist(map2);\\n        String ans = \"\";\\n\\n        if(Integer.parseInt(str1) <= Integer.parseInt(str2)){\\n            ans = str1 + str2;\\n        }else{\\n            ans = str2 + str1;\\n        }\\n\\n        \\n\\n\\n        return Integer.parseInt(ans);\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3890453,
                "title": "from-the-smallest-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        for i in sorted(nums1):\\n            if i in nums2:\\n                return i\\n        i=str(min(nums1))\\n        j=str(min(nums2))\\n        return int(i+j) if j>i else int(j+i) \\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Hash Table",
                    "Enumeration"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        for i in sorted(nums1):\\n            if i in nums2:\\n                return i\\n        i=str(min(nums1))\\n        j=str(min(nums2))\\n        return int(i+j) if j>i else int(j+i) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887606,
                "title": "array-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\nTime Complexity: O(N * M)\\nSpace Complexity: O(N * M)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) \\n    {\\n        int[] duplicatedAndMins = GetDuplicatedNumberAddMinNumbers(nums1, nums2);\\n        if(duplicatedAndMins.Length==2)\\n        {\\n            if(duplicatedAndMins[0] <= duplicatedAndMins[1])\\n            {\\n                return duplicatedAndMins[0] * 10 +  duplicatedAndMins[1];\\n            }\\n            else\\n            {\\n                return duplicatedAndMins[1] * 10 +  duplicatedAndMins[0];\\n            }\\n        }\\n        else\\n        {\\n            int min = duplicatedAndMins[0];\\n            for (int i = 0; i <= duplicatedAndMins.Length - 3; i++)\\n            {\\n                if(min > duplicatedAndMins[i])\\n                {\\n                    min = duplicatedAndMins[i];\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n\\n    private int[] GetDuplicatedNumberAddMinNumbers(int[] nums1, int[] nums2)\\n    {\\n        List<int> result = new List<int>();\\n        int minA = nums1[0];\\n        int minB = nums2[0];\\n\\n        foreach (int a in nums1)\\n        {\\n            if (minA > a)\\n            {\\n                minA = a;\\n            }\\n            foreach (int b in nums2)\\n            {\\n                if(minB > b)\\n                {\\n                    minB = b;\\n                }\\n                if(a==b)\\n                {\\n                    result.Add(a);\\n                }\\n            }\\n        }\\n        result.Add(minA);\\n        result.Add(minB);\\n        return result.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) \\n    {\\n        int[] duplicatedAndMins = GetDuplicatedNumberAddMinNumbers(nums1, nums2);\\n        if(duplicatedAndMins.Length==2)\\n        {\\n            if(duplicatedAndMins[0] <= duplicatedAndMins[1])\\n            {\\n                return duplicatedAndMins[0] * 10 +  duplicatedAndMins[1];\\n            }\\n            else\\n            {\\n                return duplicatedAndMins[1] * 10 +  duplicatedAndMins[0];\\n            }\\n        }\\n        else\\n        {\\n            int min = duplicatedAndMins[0];\\n            for (int i = 0; i <= duplicatedAndMins.Length - 3; i++)\\n            {\\n                if(min > duplicatedAndMins[i])\\n                {\\n                    min = duplicatedAndMins[i];\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n\\n    private int[] GetDuplicatedNumberAddMinNumbers(int[] nums1, int[] nums2)\\n    {\\n        List<int> result = new List<int>();\\n        int minA = nums1[0];\\n        int minB = nums2[0];\\n\\n        foreach (int a in nums1)\\n        {\\n            if (minA > a)\\n            {\\n                minA = a;\\n            }\\n            foreach (int b in nums2)\\n            {\\n                if(minB > b)\\n                {\\n                    minB = b;\\n                }\\n                if(a==b)\\n                {\\n                    result.Add(a);\\n                }\\n            }\\n        }\\n        result.Add(minA);\\n        result.Add(minB);\\n        return result.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887605,
                "title": "array-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\nTime Complexity: O(N * M)\\nSpace Complexity: O(N * M)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) \\n    {\\n        int[] duplicatedAndMins = GetDuplicatedNumberAddMinNumbers(nums1, nums2);\\n        if(duplicatedAndMins.Length==2)\\n        {\\n            if(duplicatedAndMins[0] <= duplicatedAndMins[1])\\n            {\\n                return duplicatedAndMins[0] * 10 +  duplicatedAndMins[1];\\n            }\\n            else\\n            {\\n                return duplicatedAndMins[1] * 10 +  duplicatedAndMins[0];\\n            }\\n        }\\n        else\\n        {\\n            int min = duplicatedAndMins[0];\\n            for (int i = 0; i <= duplicatedAndMins.Length - 3; i++)\\n            {\\n                if(min > duplicatedAndMins[i])\\n                {\\n                    min = duplicatedAndMins[i];\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n\\n    private int[] GetDuplicatedNumberAddMinNumbers(int[] nums1, int[] nums2)\\n    {\\n        List<int> result = new List<int>();\\n        int minA = nums1[0];\\n        int minB = nums2[0];\\n\\n        foreach (int a in nums1)\\n        {\\n            if (minA > a)\\n            {\\n                minA = a;\\n            }\\n            foreach (int b in nums2)\\n            {\\n                if(minB > b)\\n                {\\n                    minB = b;\\n                }\\n                if(a==b)\\n                {\\n                    result.Add(a);\\n                }\\n            }\\n        }\\n        result.Add(minA);\\n        result.Add(minB);\\n        return result.ToArray();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) \\n    {\\n        int[] duplicatedAndMins = GetDuplicatedNumberAddMinNumbers(nums1, nums2);\\n        if(duplicatedAndMins.Length==2)\\n        {\\n            if(duplicatedAndMins[0] <= duplicatedAndMins[1])\\n            {\\n                return duplicatedAndMins[0] * 10 +  duplicatedAndMins[1];\\n            }\\n            else\\n            {\\n                return duplicatedAndMins[1] * 10 +  duplicatedAndMins[0];\\n            }\\n        }\\n        else\\n        {\\n            int min = duplicatedAndMins[0];\\n            for (int i = 0; i <= duplicatedAndMins.Length - 3; i++)\\n            {\\n                if(min > duplicatedAndMins[i])\\n                {\\n                    min = duplicatedAndMins[i];\\n                }\\n            }\\n            return min;\\n        }\\n    }\\n\\n    private int[] GetDuplicatedNumberAddMinNumbers(int[] nums1, int[] nums2)\\n    {\\n        List<int> result = new List<int>();\\n        int minA = nums1[0];\\n        int minB = nums2[0];\\n\\n        foreach (int a in nums1)\\n        {\\n            if (minA > a)\\n            {\\n                minA = a;\\n            }\\n            foreach (int b in nums2)\\n            {\\n                if(minB > b)\\n                {\\n                    minB = b;\\n                }\\n                if(a==b)\\n                {\\n                    result.Add(a);\\n                }\\n            }\\n        }\\n        result.Add(minA);\\n        result.Add(minB);\\n        return result.ToArray();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3886498,
                "title": "java-simple-solution-using-arrays-s-methods",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirstly, sort two arrays\\n\\nThere are two scenarios of the result:\\n- One digit if exist at least one mutual number between two arrays (1)\\n- Two digits if no mutual number between two arrays (2)\\n\\nFor the first case (1), we return the smallest mutual number.\\n\\nFor the second case (2), we select the smallest number for each array, then the greater one will be the unit digit, and the other will be the dozen digit.\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for (int num : nums1) {\\n            if (Arrays.binarySearch(nums2, num) >= 0) return num;\\n        }\\n        if (nums1[0] > nums2[0]) return nums2[0] * 10 + nums1[0];\\n        else return nums1[0] * 10 + nums2[0];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for (int num : nums1) {\\n            if (Arrays.binarySearch(nums2, num) >= 0) return num;\\n        }\\n        if (nums1[0] > nums2[0]) return nums2[0] * 10 + nums1[0];\\n        else return nums1[0] * 10 + nums2[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885491,
                "title": "easy-way-with-time-45ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    let min1 = 0;\\n    for(let a of nums1) {\\n        for (let b of nums2) {\\n            if ((a === b && min1 ===0) || (a === b && min1 > a)) min1 = a;\\n        }\\n    }\\n    if (min1 === 0) {\\n        Math.min(...nums1) >= Math.min(...nums2)? min1 =Math.min(...nums2) * 10 + Math.min(...nums1) : min1 =Math.min(...nums1) * 10 + Math.min(...nums2)\\n    }\\n\\n    return min1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    let min1 = 0;\\n    for(let a of nums1) {\\n        for (let b of nums2) {\\n            if ((a === b && min1 ===0) || (a === b && min1 > a)) min1 = a;\\n        }\\n    }\\n    if (min1 === 0) {\\n        Math.min(...nums1) >= Math.min(...nums2)? min1 =Math.min(...nums2) * 10 + Math.min(...nums1) : min1 =Math.min(...nums1) * 10 + Math.min(...nums2)\\n    }\\n\\n    return min1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3879892,
                "title": "masum-code-c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>mp;\\n        for(auto x:nums1)\\n        {\\n            mp[x]++;\\n        }\\n        for(auto x:nums2)\\n        {\\n            mp[x]++;\\n        }\\n\\n        int mn1=*min_element(nums1.begin(),nums1.end());\\n        int mn2=*min_element(nums2.begin(),nums2.end());\\n        for(auto x:mp)\\n        {\\n            if(x.second>1)\\n            {\\n                return x.first;\\n            }\\n        }\\n        string ans;\\n\\n        if(mn1>mn2)\\n        {\\n            ans=to_string(mn2)+to_string(mn1);\\n        }\\n        else\\n        {\\n            ans=ans=to_string(mn1)+to_string(mn2);\\n        }\\n        return stoi(ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>mp;\\n        for(auto x:nums1)\\n        {\\n            mp[x]++;\\n        }\\n        for(auto x:nums2)\\n        {\\n            mp[x]++;\\n        }\\n\\n        int mn1=*min_element(nums1.begin(),nums1.end());\\n        int mn2=*min_element(nums2.begin(),nums2.end());\\n        for(auto x:mp)\\n        {\\n            if(x.second>1)\\n            {\\n                return x.first;\\n            }\\n        }\\n        string ans;\\n\\n        if(mn1>mn2)\\n        {\\n            ans=to_string(mn2)+to_string(mn1);\\n        }\\n        else\\n        {\\n            ans=ans=to_string(mn1)+to_string(mn2);\\n        }\\n        return stoi(ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867575,
                "title": "c-simplest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>m;\\n        int x=INT_MAX;\\n        for(int i=0;i<nums1.size();i++){\\n            m[nums1[i]]++;\\n        }\\n       for(int i=0;i<nums2.size();i++){\\n            m[nums2[i]]++;\\n           if(m[nums2[i]]>1){\\n               x=min(x,nums2[i]);\\n           }\\n        }\\n        if(x==INT_MAX){\\n            sort(nums2.begin(),nums2.end());\\n            sort(nums1.begin(),nums1.end());\\n                return min(nums1[0]*10+nums2[0],nums2[0]*10+nums1[0]);\\n        }\\n        return x;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int,int>m;\\n        int x=INT_MAX;\\n        for(int i=0;i<nums1.size();i++){\\n            m[nums1[i]]++;\\n        }\\n       for(int i=0;i<nums2.size();i++){\\n            m[nums2[i]]++;\\n           if(m[nums2[i]]>1){\\n               x=min(x,nums2[i]);\\n           }\\n        }\\n        if(x==INT_MAX){\\n            sort(nums2.begin(),nums2.end());\\n            sort(nums1.begin(),nums1.end());\\n                return min(nums1[0]*10+nums2[0],nums2[0]*10+nums1[0]);\\n        }\\n        return x;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867384,
                "title": "most-easy-solution-fast-efficient-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        int ans = 0;\\n\\n        for(int i=0; i<nums1.length; i++){\\n            for(int j=0; j<nums2.length; j++){\\n                if(nums1[i]==nums2[j]){\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n\\n        if(nums1[0]<nums2[0]){\\n            ans += nums1[0];\\n            ans = (ans*10)+nums2[0];\\n        }else{\\n            ans += nums2[0];\\n            ans = (ans*10)+nums1[0];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        int ans = 0;\\n\\n        for(int i=0; i<nums1.length; i++){\\n            for(int j=0; j<nums2.length; j++){\\n                if(nums1[i]==nums2[j]){\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n\\n        if(nums1[0]<nums2[0]){\\n            ans += nums1[0];\\n            ans = (ans*10)+nums2[0];\\n        }else{\\n            ans += nums2[0];\\n            ans = (ans*10)+nums1[0];\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864215,
                "title": "simple-o-n1-n2-solution-beat-100",
                "content": "# Intuition\\n1. Use an array of length 10 to store the frequency of each digit in nums1 and nums2 together. Then if some number has a frequency of 2, it meaning it appears in both nums1 and nums2 (each array contains unique digits).Then we could return this number directly(using the while loop we find this number).\\n2. When we traverse along nums1 and nums2 we also find the minimum value of each array (i.e. min1 and min2), if we could not find any number of frequency 2 we use min1 and min2 to form our final answer. We use the minimum of min1 and min2 to be the 1st digit and the other one to be the 2nd digit of our answer. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n1+n2)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int freq[] = new int[10];\\n        int min1=Integer.MAX_VALUE, min2=Integer.MAX_VALUE;\\n        for (int i=0; i<nums1.length; i++){\\n            min1 = Math.min(nums1[i], min1);\\n            freq[nums1[i]]++;\\n        }\\n        for (int i=0; i<nums2.length; i++){\\n            min2 = Math.min(nums2[i], min2);\\n            freq[nums2[i]]++;\\n        }\\n        int i=1;\\n//this while loop find the first/min number that appears in both\\n//arrays. There are 3 cases\\n//case 1) more than one digit that appears in both arrays:\\n//e.g. both 2 and 7 appears in both arrays, i will be 2. \\n//case 2) only one digit appears in both arrays: \\n//if only 3 appears twice, i will be 3.\\n//and case 3)if none of the digit appears twice, i==10.\\n        while (i<10 && freq[i] < 2){\\n            i++;\\n        }\\n//if i<10, case 1 or 2, we return i, else we return the number\\n//formed by min1 and min2.\\n        return i<10? i : Math.min(min1, min2)*10 + Math.max(min1, min2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int freq[] = new int[10];\\n        int min1=Integer.MAX_VALUE, min2=Integer.MAX_VALUE;\\n        for (int i=0; i<nums1.length; i++){\\n            min1 = Math.min(nums1[i], min1);\\n            freq[nums1[i]]++;\\n        }\\n        for (int i=0; i<nums2.length; i++){\\n            min2 = Math.min(nums2[i], min2);\\n            freq[nums2[i]]++;\\n        }\\n        int i=1;\\n//this while loop find the first/min number that appears in both\\n//arrays. There are 3 cases\\n//case 1) more than one digit that appears in both arrays:\\n//e.g. both 2 and 7 appears in both arrays, i will be 2. \\n//case 2) only one digit appears in both arrays: \\n//if only 3 appears twice, i will be 3.\\n//and case 3)if none of the digit appears twice, i==10.\\n        while (i<10 && freq[i] < 2){\\n            i++;\\n        }\\n//if i<10, case 1 or 2, we return i, else we return the number\\n//formed by min1 and min2.\\n        return i<10? i : Math.min(min1, min2)*10 + Math.max(min1, min2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862261,
                "title": "sets-intersect-or-min-max-logic",
                "content": "## Code\\n![image.png](https://assets.leetcode.com/users/images/dcd81341-db36-4c55-960f-a646d2d20ed9_1691144859.8201437.png)\\n\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = set(nums1)\\n        nums2 = set(nums2)\\n        intersect = nums1 & nums2\\n        \\n        if intersect:\\n            return min(intersect)\\n        \\n        min_1, min_2 = min(nums1), min(nums2)\\n        return min(min_1, min_2) * 10 + max(min_1, min_2)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = set(nums1)\\n        nums2 = set(nums2)\\n        intersect = nums1 & nums2\\n        \\n        if intersect:\\n            return min(intersect)\\n        \\n        min_1, min_2 = min(nums1), min(nums2)\\n        return min(min_1, min_2) * 10 + max(min_1, min_2)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861195,
                "title": "form-smallest-number-from-two-digit-arrays",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        String str = new String();\\n        int min = Integer.MAX_VALUE;\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            arr.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++)\\n        {\\n            if(arr.contains(nums2[i]))\\n            min = Math.min(min,nums2[i]);\\n        }\\n        if(nums1[0]>nums2[0])\\n        {\\n            str = String.valueOf(nums2[0])+String.valueOf(nums1[0]);\\n        }\\n        else if(nums1[0]<nums2[0])\\n        {\\n            str = String.valueOf(nums1[0])+String.valueOf(nums2[0]);\\n        }\\n        if(str.isEmpty()==false)\\n        min = Math.min(min,Integer.valueOf(str));\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        String str = new String();\\n        int min = Integer.MAX_VALUE;\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        for(int i=0;i<nums1.length;i++)\\n        {\\n            arr.add(nums1[i]);\\n        }\\n        for(int i=0;i<nums2.length;i++)\\n        {\\n            if(arr.contains(nums2[i]))\\n            min = Math.min(min,nums2[i]);\\n        }\\n        if(nums1[0]>nums2[0])\\n        {\\n            str = String.valueOf(nums2[0])+String.valueOf(nums1[0]);\\n        }\\n        else if(nums1[0]<nums2[0])\\n        {\\n            str = String.valueOf(nums1[0])+String.valueOf(nums2[0]);\\n        }\\n        if(str.isEmpty()==false)\\n        min = Math.min(min,Integer.valueOf(str));\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3860532,
                "title": "swift-o-n-time-o-1-space-novel-bit-manipulation-answer",
                "content": "This solution sets bits in the variables `seen1` and `seen2` corresponding to the numbers seen in `nums1` and `nums2` respectively. The minimum integer seen can then be found using `trailingZeroBitCount`.\\n\\nIt then uses a logical AND to determine if a number occurs in both arrays, and if so returns a single digit answer.\\n\\nIf there is no single digit answer it forms the minimum integer from the minimum numbers seen in each input array.\\n\\n# Complexity\\n\\n$$ \\\\text{let}\\\\ N = max(nums_1.length, nums_2.length)$$\\n$$ \\\\text{Time:}\\\\ O(n)$$\\n$$ \\\\text{Space:}\\\\ O(1)$$\\n \\n# Code\\n```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        var seen1 = nums1.reduce(0) { $0 | 1 << $1 }\\n        var seen2 = nums2.reduce(0) { $0 | 1 << $1 }\\n        let both = seen1 & seen2\\n        if  both != 0 {\\n            return both.trailingZeroBitCount\\n        }\\n        let min1 = seen1.trailingZeroBitCount\\n        let min2 = seen2.trailingZeroBitCount\\n        return min1 < min2 ? min1 * 10 + min2 : min2 * 10 + min1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        var seen1 = nums1.reduce(0) { $0 | 1 << $1 }\\n        var seen2 = nums2.reduce(0) { $0 | 1 << $1 }\\n        let both = seen1 & seen2\\n        if  both != 0 {\\n            return both.trailingZeroBitCount\\n        }\\n        let min1 = seen1.trailingZeroBitCount\\n        let min2 = seen2.trailingZeroBitCount\\n        return min1 < min2 ? min1 * 10 + min2 : min2 * 10 + min1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856111,
                "title": "java-fastest-solution",
                "content": "# Complexity\\n- Time complexity: *O(n)*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *O(1)*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n       boolean[] arr1 = new boolean[10];\\n       boolean[] arr2 = new boolean[10];\\n       int res = 0; \\n\\n       for(int i : nums1)\\n         arr1[i] = true;\\n        \\n       for(int j : nums2)\\n         arr2[j] = true;\\n       \\n       for(int i = 0; i < 10; i++)\\n         if(arr1[i] && arr2[i]) return i;\\n       \\n       for(int i = 0; i < 10; i++)\\n           if(arr1[i]){\\n             res = res * 10 + i;\\n             break;\\n           }\\n       for(int i = 0; i < 10; i++)\\n           if(arr2[i]){\\n             res = res * 10 + i;\\n             break;\\n           }\\n      return Math.min(res, res % 10 * 10 + res/10);    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n       boolean[] arr1 = new boolean[10];\\n       boolean[] arr2 = new boolean[10];\\n       int res = 0; \\n\\n       for(int i : nums1)\\n         arr1[i] = true;\\n        \\n       for(int j : nums2)\\n         arr2[j] = true;\\n       \\n       for(int i = 0; i < 10; i++)\\n         if(arr1[i] && arr2[i]) return i;\\n       \\n       for(int i = 0; i < 10; i++)\\n           if(arr1[i]){\\n             res = res * 10 + i;\\n             break;\\n           }\\n       for(int i = 0; i < 10; i++)\\n           if(arr2[i]){\\n             res = res * 10 + i;\\n             break;\\n           }\\n      return Math.min(res, res % 10 * 10 + res/10);    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3849335,
                "title": "hashset-and-math-min-max-solution-code-only",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) {\\n        HashSet<int> h1 = new HashSet<int>(nums1);\\n        HashSet<int> h2 = new HashSet<int>(nums2);\\n        int m = 10;\\n        foreach (int k in h1)\\n            if (h2.Contains(k))\\n                m = Math.Min(m,k);\\n        if (m<10) return m;\\n\\n        int n1 = nums1.Min(), n2 = nums2.Min();\\n        return Math.Max(n1,n2) + 10*Math.Min(n1,n2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinNumber(int[] nums1, int[] nums2) {\\n        HashSet<int> h1 = new HashSet<int>(nums1);\\n        HashSet<int> h2 = new HashSet<int>(nums2);\\n        int m = 10;\\n        foreach (int k in h1)\\n            if (h2.Contains(k))\\n                m = Math.Min(m,k);\\n        if (m<10) return m;\\n\\n        int n1 = nums1.Min(), n2 = nums2.Min();\\n        return Math.Max(n1,n2) + 10*Math.Min(n1,n2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838199,
                "title": "dart-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int minNumber(List<int> nums1, List<int> nums2) {\\n      nums1.sort();\\n      nums2.sort();\\n      int small = 100;\\n      int output = 0;\\n      if (nums1[0] > nums2[0]){\\n          output = int.parse(nums2[0].toString() + nums1[0].toString());\\n      } else {\\n        output = int.parse(nums1[0].toString() + nums2[0].toString());\\n      }\\n      \\n      for (final nums in nums1){\\n        if (nums2.any((element) => nums == element)){\\n          small = min(small,nums);\\n        }\\n      }\\n\\n      for (final nums in nums2){\\n        if (nums1.any((element) => nums == element)){\\n          small = min(small,nums);\\n        }\\n      }\\n      return min(small,output);\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int minNumber(List<int> nums1, List<int> nums2) {\\n      nums1.sort();\\n      nums2.sort();\\n      int small = 100;\\n      int output = 0;\\n      if (nums1[0] > nums2[0]){\\n          output = int.parse(nums2[0].toString() + nums1[0].toString());\\n      } else {\\n        output = int.parse(nums1[0].toString() + nums2[0].toString());\\n      }\\n      \\n      for (final nums in nums1){\\n        if (nums2.any((element) => nums == element)){\\n          small = min(small,nums);\\n        }\\n      }\\n\\n      for (final nums in nums2){\\n        if (nums1.any((element) => nums == element)){\\n          small = min(small,nums);\\n        }\\n      }\\n      return min(small,output);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3834113,
                "title": "beats-98-29-runtime-using-min-set-and-for-loop-easy-to-understand",
                "content": "# Intuition\\nthe answer lies in just focusing on finding the min element from both the arrays and make sure if there is a repeated elements, u need to choose minimum from them\\n\\n# Approach\\nused min() fn to get \\'mn1\\' and \\'mn2\\' values\\ncreated \\'res[]\\' empty array to store the final answer if elemtns repeated in both arrays\\nconcatinated both the arrays in single unit using \\'extend()\\' fuction\\nthen used conditional statements to form the minimum possibe number (determining which one is minimum mn1 or mn2)\\nthen for case 2 (common elements) created res[] empty array and stored the value and then the minimum value from it\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        mn1 = min(nums1)\\n        mn2 = min(nums2)\\n        res =[]\\n        nums1.extend(nums2)\\n        if len(nums1) == len(set(nums1)):\\n            if mn1 <= mn2:\\n                return mn1*10 + mn2\\n            return mn2*10 + mn1   \\n        for i in nums1:\\n            if nums1.count(i) == 2:\\n                res.append(i)\\n        return min(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        mn1 = min(nums1)\\n        mn2 = min(nums2)\\n        res =[]\\n        nums1.extend(nums2)\\n        if len(nums1) == len(set(nums1)):\\n            if mn1 <= mn2:\\n                return mn1*10 + mn2\\n            return mn2*10 + mn1   \\n        for i in nums1:\\n            if nums1.count(i) == 2:\\n                res.append(i)\\n        return min(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3830266,
                "title": "easy-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int a=nums1[0];\\n        Arrays.sort(nums2);\\n        int b=nums2[0];\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            }\\n        }\\n        return (a>b)?b*10+a:a*10+b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int a=nums1[0];\\n        Arrays.sort(nums2);\\n        int b=nums2[0];\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            }\\n        }\\n        return (a>b)?b*10+a:a*10+b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3828944,
                "title": "begginer-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int a=nums1[0];\\n        Arrays.sort(nums2);\\n        int b=nums2[0];\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            }\\n        }\\n        return (a>b)?b*10+a:a*10+b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        int a=nums1[0];\\n        Arrays.sort(nums2);\\n        int b=nums2[0];\\n        for(int i=0;i<nums1.length;i++){\\n            for(int j=0;j<nums2.length;j++){\\n                if(nums1[i]==nums2[j])\\n                return nums1[i];\\n            }\\n        }\\n        return (a>b)?b*10+a:a*10+b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3828135,
                "title": "typescript-100",
                "content": "Your runtime beats 100 % of typescript submissions\\nYour memory usage beats 20.83 % of typescript submissions (44.8 MB)\\n\\n# Code\\n```\\nfunction minNumber(nums1: number[], nums2: number[]): number {\\n    const same: Array<number> = [];\\n    for (let i: number = 0; i < nums1.length; i++) {\\n        for (let j: number = 0; j < nums2.length; j++) {\\n            if (nums1[i] === nums2[j]) {\\n                same.push(nums1[i]);\\n            }\\n        }\\n    }\\n    same.sort((a, b) => a - b);\\n    if (same.length > 0) {\\n        return same[0];\\n    }\\n    nums1.sort((a, b) => a - b);\\n    nums2.sort((a, b) => a - b);\\n    return Math.min(nums1[0], nums2[0]) * 10 + Math.max(nums1[0], nums2[0]);\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction minNumber(nums1: number[], nums2: number[]): number {\\n    const same: Array<number> = [];\\n    for (let i: number = 0; i < nums1.length; i++) {\\n        for (let j: number = 0; j < nums2.length; j++) {\\n            if (nums1[i] === nums2[j]) {\\n                same.push(nums1[i]);\\n            }\\n        }\\n    }\\n    same.sort((a, b) => a - b);\\n    if (same.length > 0) {\\n        return same[0];\\n    }\\n    nums1.sort((a, b) => a - b);\\n    nums2.sort((a, b) => a - b);\\n    return Math.min(nums1[0], nums2[0]) * 10 + Math.max(nums1[0], nums2[0]);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3827826,
                "title": "simple-java-solution-1ms",
                "content": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for(int i=0; i<nums1.length; i++) {\\n            for (int j = 0; j < nums2.length; j++) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        int min = Math.min(nums1[0], nums2[0]);\\n        int max = Math.max(nums1[0], nums2[0]);\\n        return min * 10 + max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n        for(int i=0; i<nums1.length; i++) {\\n            for (int j = 0; j < nums2.length; j++) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        int min = Math.min(nums1[0], nums2[0]);\\n        int max = Math.max(nums1[0], nums2[0]);\\n        return min * 10 + max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3812421,
                "title": "dart",
                "content": "# Code\\n```\\nimport \\'dart:math\\';\\n\\nclass Solution {\\n  int minNumber(List<int> nums1, List<int> nums2) {\\n    var count = List.filled(10, 0);\\n    var min1 = 1000000000, min2 = min1;\\n    for (int v in nums1) {\\n      count[v]++;\\n      min1 = min(min1, v);\\n    }\\n    for (int v in nums2) {\\n      count[v]++;\\n      min2 = min(min2, v);\\n    }\\n    for (int i = 1; i <= 9; i++)\\n      if (count[i] == 2) return i;\\n    return min(\\n      min1 * 10 + min2, min2 * 10 + min1\\n    );\\n  }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nimport \\'dart:math\\';\\n\\nclass Solution {\\n  int minNumber(List<int> nums1, List<int> nums2) {\\n    var count = List.filled(10, 0);\\n    var min1 = 1000000000, min2 = min1;\\n    for (int v in nums1) {\\n      count[v]++;\\n      min1 = min(min1, v);\\n    }\\n    for (int v in nums2) {\\n      count[v]++;\\n      min2 = min(min2, v);\\n    }\\n    for (int i = 1; i <= 9; i++)\\n      if (count[i] == 2) return i;\\n    return min(\\n      min1 * 10 + min2, min2 * 10 + min1\\n    );\\n  }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3805118,
                "title": "swift-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        \\n        for num in nums1.sorted() {\\n            if nums2.contains(num) { return num }\\n        }\\n\\n        guard let min1 = nums1.min(), let min2 = nums2.min() else { return 0 }\\n\\n        return min1 > min2 ? Int(String(min2) + String(min1))! : Int(String(min1) + String(min2))!\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    func minNumber(_ nums1: [Int], _ nums2: [Int]) -> Int {\\n        \\n        for num in nums1.sorted() {\\n            if nums2.contains(num) { return num }\\n        }\\n\\n        guard let min1 = nums1.min(), let min2 = nums2.min() else { return 0 }\\n\\n        return min1 > min2 ? Int(String(min2) + String(min1))! : Int(String(min1) + String(min2))!\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3796895,
                "title": "beat-94ms-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = list(set(nums1))\\n        nums1.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n\\n        first = min(nums1)\\n        second = min(nums2)\\n        if first < second:\\n\\n            return int(str(first)+str(second))\\n\\n        return int(str(second)+str(first))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = list(set(nums1))\\n        nums1.sort()\\n        for i in nums1:\\n            if i in nums2:\\n                return i\\n\\n        first = min(nums1)\\n        second = min(nums2)\\n        if first < second:\\n\\n            return int(str(first)+str(second))\\n\\n        return int(str(second)+str(first))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791969,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n   \\n   Arrays.sort(nums1);\\n   Arrays.sort(nums2);\\n    for(int i:nums1)\\n    {\\n        for(int j:nums2)\\n        {\\n            if(i==j)\\n            {\\n                return i;\\n            }\\n        }\\n    }\\n   int result=nums1[0]*10+nums2[0];\\n   int result1=nums2[0]*10+nums1[0];\\n\\n   return (result<result1)?result:result1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n   \\n   Arrays.sort(nums1);\\n   Arrays.sort(nums2);\\n    for(int i:nums1)\\n    {\\n        for(int j:nums2)\\n        {\\n            if(i==j)\\n            {\\n                return i;\\n            }\\n        }\\n    }\\n   int result=nums1[0]*10+nums2[0];\\n   int result1=nums2[0]*10+nums1[0];\\n\\n   return (result<result1)?result:result1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791710,
                "title": "long-but-simplest-code",
                "content": "```\\nclass Solution {\\npublic:\\n\\n    int nu(string s){\\n        int sum = 0;\\n        for(int i=0; i<s.size(); i++){\\n            sum=sum*10+s[i];\\n        }\\n        return sum;\\n    }\\n\\n    int minNumber(vector<int>&n1 , vector<int>&n2){\\n        unordered_map<int,int>mp;\\n        for(auto i:n1){\\n            mp[i]++;\\n        }\\n        for(auto i:n2){\\n            mp[i]++;\\n        }\\n        vector<int>h;\\n        for(auto i:mp){\\n            if(i.second==2){\\n                h.push_back(i.first);\\n            }\\n        }\\n        sort(h.begin(),h.end());\\n        if(h.size()!=0){\\n            return h[0];\\n        }\\n        sort(n1.begin(),n1.end());\\n        sort(n2.begin(),n2.end());\\n        string s1 , s2;\\n        s1+=n1[0];\\n        s1+=n2[0];\\n        s2+=n2[0];\\n        s2+=n1[0];\\n        int x = nu(s1);\\n        int y = nu(s2);\\n        return min(x,y);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int nu(string s){\\n        int sum = 0;\\n        for(int i=0; i<s.size(); i++){\\n            sum=sum*10+s[i];\\n        }\\n        return sum;\\n    }\\n\\n    int minNumber(vector<int>&n1 , vector<int>&n2){\\n        unordered_map<int,int>mp;\\n        for(auto i:n1){\\n            mp[i]++;\\n        }\\n        for(auto i:n2){\\n            mp[i]++;\\n        }\\n        vector<int>h;\\n        for(auto i:mp){\\n            if(i.second==2){\\n                h.push_back(i.first);\\n            }\\n        }\\n        sort(h.begin(),h.end());\\n        if(h.size()!=0){\\n            return h[0];\\n        }\\n        sort(n1.begin(),n1.end());\\n        sort(n2.begin(),n2.end());\\n        string s1 , s2;\\n        s1+=n1[0];\\n        s1+=n2[0];\\n        s2+=n2[0];\\n        s2+=n1[0];\\n        int x = nu(s1);\\n        int y = nu(s2);\\n        return min(x,y);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3779688,
                "title": "beginner-friendly-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) \\n    {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n\\n        int x=nums1[0];\\n        int y=nums2[0];\\n\\n        if(x<y)\\n        {\\n            return x*10+y;\\n        }\\n        else\\n        {\\n           return y*10+x;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) \\n    {\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n\\n        int x=nums1[0];\\n        int y=nums2[0];\\n\\n        if(x<y)\\n        {\\n            return x*10+y;\\n        }\\n        else\\n        {\\n           return y*10+x;\\n        }\\n        return 0; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3774850,
                "title": "java-easy-to-understand-100-fastest",
                "content": "# Approach\\nsince our sample space is 1-9 digit, we\\'ll mark presence of digit as `True` in each boolean array for each num array\\nNow, if both boolean array has `True` in it, then it\\'s common digit and we\\'ll return that digit\\nOtherwise we\\'ll return min digit from one array * 10 + min digit from another array.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean[] first = new boolean[9];\\n        boolean[] second = new boolean[9];\\n        int smallFirst = 10, smallSecond = 10;\\n        for(short i = 0; i <nums1.length; i++){\\n            first[nums1[i]-1] = true;\\n            if(nums1[i]<smallFirst) smallFirst = nums1[i];\\n        }\\n        for(short i = 0; i <nums2.length; i++){\\n            second[nums2[i]-1] = true;\\n            if(nums2[i]<smallSecond) smallSecond = nums2[i];\\n        }\\n        for(short i = 0; i < 9; i++){\\n            if(first[i] == true && second[i] == true) {\\n                return i+1;\\n            }\\n        }\\n        int ans = 0;\\n\\n        if(smallFirst < smallSecond) {\\n            ans = (smallFirst*10) + smallSecond;\\n        } else {\\n            ans = (smallSecond*10) + smallFirst;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean[] first = new boolean[9];\\n        boolean[] second = new boolean[9];\\n        int smallFirst = 10, smallSecond = 10;\\n        for(short i = 0; i <nums1.length; i++){\\n            first[nums1[i]-1] = true;\\n            if(nums1[i]<smallFirst) smallFirst = nums1[i];\\n        }\\n        for(short i = 0; i <nums2.length; i++){\\n            second[nums2[i]-1] = true;\\n            if(nums2[i]<smallSecond) smallSecond = nums2[i];\\n        }\\n        for(short i = 0; i < 9; i++){\\n            if(first[i] == true && second[i] == true) {\\n                return i+1;\\n            }\\n        }\\n        int ans = 0;\\n\\n        if(smallFirst < smallSecond) {\\n            ans = (smallFirst*10) + smallSecond;\\n        } else {\\n            ans = (smallSecond*10) + smallFirst;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3768811,
                "title": "kotlin-one-pass-solution-with-booleanarray-and-without-sorting",
                "content": "# Code\\n```\\nclass Solution {\\n    fun minNumber(nums1: IntArray, nums2: IntArray): Int {\\n        val digitMap = BooleanArray(9)\\n        var minCommonDigit = 10\\n        var minDigit1 = 9\\n        var minDigit2 = 9\\n        var i = 0\\n\\n        while (i < Math.max(nums1.size, nums2.size)) {\\n            if (i < nums1.size) {\\n                minDigit1 = Math.min(minDigit1, nums1[i])\\n                if (digitMap[nums1[i]-1])\\n                    minCommonDigit = Math.min(minCommonDigit, nums1[i])\\n                else\\n                    digitMap[nums1[i]-1] = true\\n            }\\n\\n            if (i < nums2.size) {\\n                minDigit2 = Math.min(minDigit2, nums2[i])\\n                if (digitMap[nums2[i]-1])\\n                    minCommonDigit = Math.min(minCommonDigit, nums2[i])\\n                else\\n                    digitMap[nums2[i]-1] = true\\n            }\\n\\n            i++\\n        }\\n\\n        if (minCommonDigit < 10)\\n            return minCommonDigit\\n\\n        if (minDigit1 < minDigit2)\\n            return \"$minDigit1$minDigit2\".toInt()\\n\\n        return \"$minDigit2$minDigit1\".toInt()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun minNumber(nums1: IntArray, nums2: IntArray): Int {\\n        val digitMap = BooleanArray(9)\\n        var minCommonDigit = 10\\n        var minDigit1 = 9\\n        var minDigit2 = 9\\n        var i = 0\\n\\n        while (i < Math.max(nums1.size, nums2.size)) {\\n            if (i < nums1.size) {\\n                minDigit1 = Math.min(minDigit1, nums1[i])\\n                if (digitMap[nums1[i]-1])\\n                    minCommonDigit = Math.min(minCommonDigit, nums1[i])\\n                else\\n                    digitMap[nums1[i]-1] = true\\n            }\\n\\n            if (i < nums2.size) {\\n                minDigit2 = Math.min(minDigit2, nums2[i])\\n                if (digitMap[nums2[i]-1])\\n                    minCommonDigit = Math.min(minCommonDigit, nums2[i])\\n                else\\n                    digitMap[nums2[i]-1] = true\\n            }\\n\\n            i++\\n        }\\n\\n        if (minCommonDigit < 10)\\n            return minCommonDigit\\n\\n        if (minDigit1 < minDigit2)\\n            return \"$minDigit1$minDigit2\".toInt()\\n\\n        return \"$minDigit2$minDigit1\".toInt()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752513,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    nums1.sort((a,b) => a - b);\\n    nums2.sort((a,b) => a - b);\\n    for(let num of nums1) {\\n        if (nums2.includes(num) ) {\\n            return num;\\n        }\\n    }\\n    if ( nums1[0] > nums2[0]) return Number(String(nums2[0]) + String(nums1[0]));\\n    else return Number(String(nums1[0]) + String(nums2[0]));\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar minNumber = function(nums1, nums2) {\\n    nums1.sort((a,b) => a - b);\\n    nums2.sort((a,b) => a - b);\\n    for(let num of nums1) {\\n        if (nums2.includes(num) ) {\\n            return num;\\n        }\\n    }\\n    if ( nums1[0] > nums2[0]) return Number(String(nums2[0]) + String(nums1[0]));\\n    else return Number(String(nums1[0]) + String(nums2[0]));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3748037,
                "title": "java-intuitive-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n\\n        Set<Integer> s = new HashSet();\\n        for (int i = 0; i < nums1.length; i++) {\\n            s.add(nums1[i]);\\n        }\\n\\n        int min = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums2.length; i++) {\\n            if (s.contains(nums2[i])) {\\n                min = Math.min(min, nums2[i]);\\n            }\\n        }\\n\\n        if (min < Integer.MAX_VALUE) return min;\\n\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        if (nums1[0] < nums2[0]) return nums1[0] * 10 + nums2[0];\\n\\n        return nums2[0] * 10 + nums1[0];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n\\n        Set<Integer> s = new HashSet();\\n        for (int i = 0; i < nums1.length; i++) {\\n            s.add(nums1[i]);\\n        }\\n\\n        int min = Integer.MAX_VALUE;\\n        for (int i = 0; i < nums2.length; i++) {\\n            if (s.contains(nums2[i])) {\\n                min = Math.min(min, nums2[i]);\\n            }\\n        }\\n\\n        if (min < Integer.MAX_VALUE) return min;\\n\\n        Arrays.sort(nums1);\\n        Arrays.sort(nums2);\\n\\n        if (nums1[0] < nums2[0]) return nums1[0] * 10 + nums2[0];\\n\\n        return nums2[0] * 10 + nums1[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3746195,
                "title": "python-simple-bruteforce-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        min_1 = float(\\'inf\\')\\n        min_2 = float(\\'inf\\')\\n        min_3 = float(\\'inf\\')\\n        for i in range(len(nums1)):\\n            min_1 = min(min_1,nums1[i])\\n        for j in range(len(nums2)):\\n            min_2 = min(min_2,nums2[j])\\n        sub_str = \"\"\\n        if min_1 < min_2:\\n            sub_str += str(min_1) + str(min_2)\\n        else:\\n            sub_str += str(min_2) + str(min_1)\\n        for i in range(len(nums1)):\\n            if nums1[i] in nums2:\\n                min_3 = min(min_3,nums1[i]) \\n        return min(min_3,int(sub_str))\\n                \\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        min_1 = float(\\'inf\\')\\n        min_2 = float(\\'inf\\')\\n        min_3 = float(\\'inf\\')\\n        for i in range(len(nums1)):\\n            min_1 = min(min_1,nums1[i])\\n        for j in range(len(nums2)):\\n            min_2 = min(min_2,nums2[j])\\n        sub_str = \"\"\\n        if min_1 < min_2:\\n            sub_str += str(min_1) + str(min_2)\\n        else:\\n            sub_str += str(min_2) + str(min_1)\\n        for i in range(len(nums1)):\\n            if nums1[i] in nums2:\\n                min_3 = min(min_3,nums1[i]) \\n        return min(min_3,int(sub_str))\\n                \\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3741740,
                "title": "very-very-easy-solution-simple-to-understand-100-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] a, int[] b) {\\n        Arrays.sort(a);\\n        Arrays.sort(b);\\n        String p = \"\";\\n        if(a[0]<b[0])\\n            p = a[0]+\"\"+b[0]+\"\";\\n        else\\n            p=b[0]+\"\"+a[0];\\n        boolean flag=false;\\n        int res = Integer.parseInt(p);\\n        for(int i=0;i<a.length;i++){\\n            for(int j=0;j<b.length;j++){\\n                if(a[i]==b[j]){\\n                    res = a[i];\\n                    flag = true;\\n                    break;\\n            }\\n            }\\n            if(flag)\\n                break;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] a, int[] b) {\\n        Arrays.sort(a);\\n        Arrays.sort(b);\\n        String p = \"\";\\n        if(a[0]<b[0])\\n            p = a[0]+\"\"+b[0]+\"\";\\n        else\\n            p=b[0]+\"\"+a[0];\\n        boolean flag=false;\\n        int res = Integer.parseInt(p);\\n        for(int i=0;i<a.length;i++){\\n            for(int j=0;j<b.length;j++){\\n                if(a[i]==b[j]){\\n                    res = a[i];\\n                    flag = true;\\n                    break;\\n            }\\n            }\\n            if(flag)\\n                break;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3741739,
                "title": "very-very-easy-solution-simple-to-understand-100-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] a, int[] b) {\\n        Arrays.sort(a);\\n        Arrays.sort(b);\\n        String p = \"\";\\n        if(a[0]<b[0])\\n            p = a[0]+\"\"+b[0]+\"\";\\n        else\\n            p=b[0]+\"\"+a[0];\\n        boolean flag=false;\\n        int res = Integer.parseInt(p);\\n        for(int i=0;i<a.length;i++){\\n            for(int j=0;j<b.length;j++){\\n                if(a[i]==b[j]){\\n                    res = a[i];\\n                    flag = true;\\n                    break;\\n            }\\n            }\\n            if(flag)\\n                break;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] a, int[] b) {\\n        Arrays.sort(a);\\n        Arrays.sort(b);\\n        String p = \"\";\\n        if(a[0]<b[0])\\n            p = a[0]+\"\"+b[0]+\"\";\\n        else\\n            p=b[0]+\"\"+a[0];\\n        boolean flag=false;\\n        int res = Integer.parseInt(p);\\n        for(int i=0;i<a.length;i++){\\n            for(int j=0;j<b.length;j++){\\n                if(a[i]==b[j]){\\n                    res = a[i];\\n                    flag = true;\\n                    break;\\n            }\\n            }\\n            if(flag)\\n                break;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734991,
                "title": "python-simple-sol-using-min",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def minNumber(self, nums1, nums2):\\n        \"\"\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        \"\"\"\\n        fn=min(int(str(min(nums1))+str(min(nums2))),int(str(min(nums2))+str(min(nums1))))\\n        for i in nums1:\\n            if i in nums2:\\n                fn=min(fn,i)\\n        return fn\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minNumber(self, nums1, nums2):\\n        \"\"\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        \"\"\"\\n        fn=min(int(str(min(nums1))+str(min(nums2))),int(str(min(nums2))+str(min(nums1))))\\n        for i in nums1:\\n            if i in nums2:\\n                fn=min(fn,i)\\n        return fn\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3734281,
                "title": "c-0ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n      int b1 = 0, m1 = 9, b2 = 0, m2 = 9;\\n      tie(b1, m1) = helper(nums1);\\n      tie(b2, m2) = helper(nums2);\\n      if (b1&b2) {\\n        int i = 0;\\n        while ((b1&b2&(1<<i)) == 0)\\n          i++;\\n        return i;\\n      }\\n      return min(m1,m2)*10 + max(m1,m2);\\n    }\\n  private:\\n    pair<int, int> helper(vector<int>& nums) {\\n      int b = 0, m = INT_MAX;\\n      for (auto n : nums) {\\n        b |= 1<<n;\\n        m = min(m, n);\\n      }\\n      return {b, m};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n  public:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n      int b1 = 0, m1 = 9, b2 = 0, m2 = 9;\\n      tie(b1, m1) = helper(nums1);\\n      tie(b2, m2) = helper(nums2);\\n      if (b1&b2) {\\n        int i = 0;\\n        while ((b1&b2&(1<<i)) == 0)\\n          i++;\\n        return i;\\n      }\\n      return min(m1,m2)*10 + max(m1,m2);\\n    }\\n  private:\\n    pair<int, int> helper(vector<int>& nums) {\\n      int b = 0, m = INT_MAX;\\n      for (auto n : nums) {\\n        b |= 1<<n;\\n        m = min(m, n);\\n      }\\n      return {b, m};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732585,
                "title": "count-using-array-c",
                "content": "# C++\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int mn = 10, mn1 = 10, mn2 = 10, n1 = 0, n2 = 0, cnt[10] = {};\\n\\n        for(int i = 0; i < nums1.size(); i++) {\\n            mn1 = min(mn1, nums1[i]);\\n            cnt[nums1[i]] = 1;\\n        }\\n\\n        for(int i = 0; i < nums2.size(); i++) {\\n            mn2 = min(mn2, nums2[i]);\\n            if(cnt[nums2[i]]) \\n                mn = min(mn, nums2[i]);\\n        }\\n\\n        return mn < 10 ? mn : min(mn1, mn2) * 10 + max(mn1, mn2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        int mn = 10, mn1 = 10, mn2 = 10, n1 = 0, n2 = 0, cnt[10] = {};\\n\\n        for(int i = 0; i < nums1.size(); i++) {\\n            mn1 = min(mn1, nums1[i]);\\n            cnt[nums1[i]] = 1;\\n        }\\n\\n        for(int i = 0; i < nums2.size(); i++) {\\n            mn2 = min(mn2, nums2[i]);\\n            if(cnt[nums2[i]]) \\n                mn = min(mn, nums2[i]);\\n        }\\n\\n        return mn < 10 ? mn : min(mn1, mn2) * 10 + max(mn1, mn2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732062,
                "title": "java-easy-solution-o-1-beat-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean arr1[]=new boolean[10];\\n        boolean arr2[]=new boolean[10];\\n        for(int num : nums1) arr1[num]=true;\\n        for(int num : nums2) arr2[num]=true;\\n        \\n        for(int i=1; i<10; i++)\\n            if(arr1[i] && arr2[i])\\n                return i;\\n\\n        int a=1, b=1;\\n        while(!arr1[a]) a++;\\n        while(!arr2[b]) b++;\\n\\n        return Math.min(a,b) * 10 + Math.max(a,b); \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        boolean arr1[]=new boolean[10];\\n        boolean arr2[]=new boolean[10];\\n        for(int num : nums1) arr1[num]=true;\\n        for(int num : nums2) arr2[num]=true;\\n        \\n        for(int i=1; i<10; i++)\\n            if(arr1[i] && arr2[i])\\n                return i;\\n\\n        int a=1, b=1;\\n        while(!arr1[a]) a++;\\n        while(!arr2[b]) b++;\\n\\n        return Math.min(a,b) * 10 + Math.max(a,b); \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3728337,
                "title": "c-set-intersection-solution",
                "content": "# Code\\n```c++\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v;\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        set_intersection(nums1.begin(), nums1.end(), nums2.begin(), nums2.end(), back_inserter(v));\\n        sort(v.begin(), v.end());\\n        if (v.size() > 0) {\\n            return v[0];\\n        }\\n        int v12 = nums1[0] * 10 + nums2[0];\\n        int v21 = nums1[0] + nums2[0] * 10;\\n        return min(v12, v21);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        vector<int> v;\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        set_intersection(nums1.begin(), nums1.end(), nums2.begin(), nums2.end(), back_inserter(v));\\n        sort(v.begin(), v.end());\\n        if (v.size() > 0) {\\n            return v[0];\\n        }\\n        int v12 = nums1[0] * 10 + nums2[0];\\n        int v21 = nums1[0] + nums2[0] * 10;\\n        return min(v12, v21);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3723063,
                "title": "short-easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        inters = set(nums1).intersection(nums2)\\n        \\n        fstnum = min(nums1)\\n        secnum = min(nums2)\\n        return min(inters) if inters \\\\\\n            else int(f\\'{min(fstnum, secnum)}{max(fstnum, secnum)}\\')\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        inters = set(nums1).intersection(nums2)\\n        \\n        fstnum = min(nums1)\\n        secnum = min(nums2)\\n        return min(inters) if inters \\\\\\n            else int(f\\'{min(fstnum, secnum)}{max(fstnum, secnum)}\\')\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716927,
                "title": "sexiest-and-easiest-solution-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n     unordered_map<int,int>m;\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++){\\n        \\n             m[nums1[i]]++;\\n        }\\n        vector<int>v;\\n        for(int i=0;i<nums2.size();i++){\\n            if(m.find(nums2[i])!=m.end()){\\n                v.push_back(nums2[i]);\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()==0){\\n            return 10*min(nums1[0],nums2[0]) +max(nums1[0],nums2[0]);\\n        }\\n        else return v[0];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n     unordered_map<int,int>m;\\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++){\\n        \\n             m[nums1[i]]++;\\n        }\\n        vector<int>v;\\n        for(int i=0;i<nums2.size();i++){\\n            if(m.find(nums2[i])!=m.end()){\\n                v.push_back(nums2[i]);\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()==0){\\n            return 10*min(nums1[0],nums2[0]) +max(nums1[0],nums2[0]);\\n        }\\n        else return v[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3692481,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int[] arr = new int[10];\\n        int min1 = Integer.MAX_VALUE;\\n        int min2 = Integer.MAX_VALUE;\\n        int duplicate = Integer.MAX_VALUE;\\n        int max = Math.max(nums1.length, nums2.length);\\n        for (int i = 0; i < max; i++) {\\n            if (i < nums1.length) {\\n                min1 = Math.min(min1, nums1[i]);\\n                arr[nums1[i]]++;\\n            }\\n            if (i < nums2.length) {\\n                min2 = Math.min(min2, nums2[i]);\\n                arr[nums2[i]]++;\\n            }\\n            if (i == max - 1) {\\n                int j = 1;\\n                while (j < arr.length) {\\n                    if (arr[j] == 2) {\\n                        return j;\\n                    } else {\\n                        j++;\\n                    }\\n                }\\n            }\\n        }\\n        int output = 0;\\n        int firstD = Math.min(min1, min2);\\n        int secondD = Math.max(min2, min1);\\n        String s = String.valueOf(firstD) + secondD;\\n        output = Integer.parseInt(s);\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int[] arr = new int[10];\\n        int min1 = Integer.MAX_VALUE;\\n        int min2 = Integer.MAX_VALUE;\\n        int duplicate = Integer.MAX_VALUE;\\n        int max = Math.max(nums1.length, nums2.length);\\n        for (int i = 0; i < max; i++) {\\n            if (i < nums1.length) {\\n                min1 = Math.min(min1, nums1[i]);\\n                arr[nums1[i]]++;\\n            }\\n            if (i < nums2.length) {\\n                min2 = Math.min(min2, nums2[i]);\\n                arr[nums2[i]]++;\\n            }\\n            if (i == max - 1) {\\n                int j = 1;\\n                while (j < arr.length) {\\n                    if (arr[j] == 2) {\\n                        return j;\\n                    } else {\\n                        j++;\\n                    }\\n                }\\n            }\\n        }\\n        int output = 0;\\n        int firstD = Math.min(min1, min2);\\n        int secondD = Math.max(min2, min1);\\n        String s = String.valueOf(firstD) + secondD;\\n        output = Integer.parseInt(s);\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3690991,
                "title": "python3-easy-to-understand",
                "content": "# Intuition\\nUsing an optimized brute force where we first sort both the lists, then take the first two elements from each lists and concatenate.\\nCheck if this is greater than the smallest number common between the two.\\n\\n# Complexity\\n- Time complexity:\\nnlogn + mlogm\\n\\n- Space complexity:\\nn+m for each set\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = sorted(nums1)\\n        nums2 = sorted(nums2)\\n        c = set(nums1).intersection(nums2)\\n        min_set = 99999\\n        if len(c) > 0:\\n            min_set = min(c)\\n        a = min(int(str(nums1[0])+str(nums2[0])),int(str(nums2[0])+str(nums1[0])))\\n        if min_set > a:\\n            return a\\n        return min_set\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        nums1 = sorted(nums1)\\n        nums2 = sorted(nums2)\\n        c = set(nums1).intersection(nums2)\\n        min_set = 99999\\n        if len(c) > 0:\\n            min_set = min(c)\\n        a = min(int(str(nums1[0])+str(nums2[0])),int(str(nums2[0])+str(nums1[0])))\\n        if min_set > a:\\n            return a\\n        return min_set\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3687791,
                "title": "easy-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int min1=Integer.MAX_VALUE,min2=Integer.MAX_VALUE;\\n        String k=\"\";\\n    for(int i=0;i<nums1.length;i++){\\n        if(nums1[i]<min1)min1=nums1[i];\\n        for(int j=0;j<nums2.length;j++){\\n           if(nums2[j]<min2)min2=nums2[j];\\n           if(nums1[i]==nums2[j])k+=nums1[i];\\n        }\\n    }\\n    if(k.equals(\"\")){\\n        String o=\"\";\\n        if(min1>min2)o+=min2+\"\"+min1;\\n        else o+=min1+\"\"+min2;\\n        return Integer.parseInt(o);\\n    }\\n    String r[]=k.split(\"\");\\n    Arrays.sort(r);\\n    return Integer.parseInt(r[0]);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minNumber(int[] nums1, int[] nums2) {\\n        int min1=Integer.MAX_VALUE,min2=Integer.MAX_VALUE;\\n        String k=\"\";\\n    for(int i=0;i<nums1.length;i++){\\n        if(nums1[i]<min1)min1=nums1[i];\\n        for(int j=0;j<nums2.length;j++){\\n           if(nums2[j]<min2)min2=nums2[j];\\n           if(nums1[i]==nums2[j])k+=nums1[i];\\n        }\\n    }\\n    if(k.equals(\"\")){\\n        String o=\"\";\\n        if(min1>min2)o+=min2+\"\"+min1;\\n        else o+=min1+\"\"+min2;\\n        return Integer.parseInt(o);\\n    }\\n    String r[]=k.split(\"\");\\n    Arrays.sort(r);\\n    return Integer.parseInt(r[0]);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3684724,
                "title": "easy-and-simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        x=set(nums1).intersection(set(nums2))\\n\\n        if len(x)>0:\\n            return sorted(list(x))[0]\\n        else:\\n            digit1=min(set(nums1))\\n            digit2=min(set(nums2))\\n\\n            if digit1 > digit2:\\n                return digit2*10 +digit1\\n            else:\\n                return digit1*10 +digit2\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minNumber(self, nums1: List[int], nums2: List[int]) -> int:\\n        x=set(nums1).intersection(set(nums2))\\n\\n        if len(x)>0:\\n            return sorted(list(x))[0]\\n        else:\\n            digit1=min(set(nums1))\\n            digit2=min(set(nums2))\\n\\n            if digit1 > digit2:\\n                return digit2*10 +digit1\\n            else:\\n                return digit1*10 +digit2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3664810,
                "title": "easy-and-clean-solution",
                "content": "\\n\\n# Code\\n```\\nconst minNumber = (nums1, nums2) => {\\n    nums1.sort((a,b) => a - b);\\n    nums2.sort((a,b) => a - b);\\n\\n    for (let i = 0; i < nums1.length; i++) {\\n        if ( nums2.includes(nums1[i]) ) {\\n            return nums1[i];\\n        }\\n    }\\n\\n    if ( nums1[0] > nums2[0] ) {\\n        return Number(String(nums2[0]) + String(nums1[0]));\\n    } else {\\n        return Number(String(nums1[0]) + String(nums2[0]));\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst minNumber = (nums1, nums2) => {\\n    nums1.sort((a,b) => a - b);\\n    nums2.sort((a,b) => a - b);\\n\\n    for (let i = 0; i < nums1.length; i++) {\\n        if ( nums2.includes(nums1[i]) ) {\\n            return nums1[i];\\n        }\\n    }\\n\\n    if ( nums1[0] > nums2[0] ) {\\n        return Number(String(nums2[0]) + String(nums1[0]));\\n    } else {\\n        return Number(String(nums1[0]) + String(nums2[0]));\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1850323,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            },
            {
                "id": 1959168,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            },
            {
                "id": 1901140,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            },
            {
                "id": 1871611,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            },
            {
                "id": 1850684,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            },
            {
                "id": 1850310,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Funny constraints"
                    },
                    {
                        "username": "wolverine_1",
                        "content": "Most easy code using stoi() to convert string to int and all become just cake walk. \\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        \\n        sort(nums1.begin(),nums1.end());\\n        sort(nums2.begin(),nums2.end());\\n        for(int i=0;i<nums1.size();i++)\\n        {\\n            for(int j=0;j<nums2.size();j++)\\n            {\\n                if(nums1[i]==nums2[j])\\n                {\\n                    return nums1[i];\\n                    exit;\\n                }\\n            }\\n        }\\n                string ans1=to_string(nums1[0]);\\n                string ans2=to_string(nums2[0]);\\n                string ans=ans1+ans2;\\n                string ans3=ans2+ans1;\\n                int f1=stoi(ans);\\n                int f2=stoi(ans3);\\n                int final=min(f1,f2);\\n\\n        return final;\\n        \\n\\n    }\\n};"
                    },
                    {
                        "username": "NishiTiwari5195",
                        "content": "What\\'s wrong with my code? \\n\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        map<int, int> myMap;\\n\\n        // for(int i =0; i<nums1.size(); i++)\\n        if(!nums1.empty()){\\n        sort(nums1.begin(), nums1.end());\\n        int smallest1 = nums1[0];\\n        myMap.insert({smallest1, 0});\\n        }\\n\\n    if(!nums2.empty()){\\n        sort(nums2.begin(), nums2.end());\\n        int smallest2 = nums2[0];\\n        myMap.insert({smallest2, 0});\\n\\n\\n    }\\n        return myMap;\\n\\n    }\\n};"
                    },
                    {
                        "username": "bparanj",
                        "content": "Your code has several issues:\\n\\n1. You are returning a map `myMap` when the function is expected to return an `int`. This will cause a type mismatch error.\\n\\n2. In the problem statement, you\\'re asked to find the smallest number that contains at least one digit from each array. However, in your code, you\\'re simply sorting each array and storing the smallest element in a map, which doesn\\'t serve the purpose of the problem.\\n\\n3. The use of `map` in your code is not necessary. Your problem can be solved by using a simple comparison of elements in both arrays.\\n\\nYou need to restructure your code to find common elements in both arrays and return the smallest common element. If no common elements exist, you should return a two-digit number formed by the smallest numbers from both arrays.\\n\\nHere\\'s a corrected version of your code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minNumber(vector<int>& nums1, vector<int>& nums2) {\\n        sort(nums1.begin(), nums1.end());\\n        sort(nums2.begin(), nums2.end());\\n        \\n        for (int i = 0; i < nums1.size(); ++i) {\\n            for (int j = 0; j < nums2.size(); ++j) {\\n                if (nums1[i] == nums2[j]) {\\n                    return nums1[i];\\n                }\\n            }\\n        }\\n        \\n        return min(nums1[0], nums2[0]) * 10 + max(nums1[0], nums2[0]);\\n    }\\n};\\n```\\n\\nIn this version, we first sort both arrays. Then we compare each element in both arrays to find the smallest common element. If there is no common element, we return a two-digit number composed of the smallest elements from both arrays.\\n"
                    },
                    {
                        "username": "abhi9001",
                        "content": "why unordered_map give wrong answer but map give right answer .\\nbut unordered_map time complaxcity is much greater than than te map\\n"
                    },
                    {
                        "username": "M1dn1ght",
                        "content": "Nice relaxing one  !"
                    },
                    {
                        "username": "guptamanu409",
                        "content": "[Beats 100% (Easiest Approach)](https://leetcode.com/problems/form-smallest-number-from-two-digit-arrays/solutions/3366549/beats-100-easiest-approach/?orderBy=newest_to_oldest)"
                    }
                ]
            }
        ]
    }
]