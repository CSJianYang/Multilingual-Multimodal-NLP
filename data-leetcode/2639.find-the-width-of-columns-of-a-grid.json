[
    {
        "title": "Find the Width of Columns of a Grid",
        "question_content": "You are given a 0-indexed m x n integer matrix grid. The width of a column is the maximum length of its integers.\n\n\tFor example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.\n\nReturn an integer array ans of size n where ans[i] is the width of the ith column.\nThe length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.\n&nbsp;\nExample 1:\n\nInput: grid = [[1],[22],[333]]\nOutput: [3]\nExplanation: In the 0th column, 333 is of length 3.\n\nExample 2:\n\nInput: grid = [[-15,1,3],[15,7,12],[5,6,-2]]\nOutput: [3,1,2]\nExplanation: \nIn the 0th column, only -15 is of length 3.\nIn the 1st column, all integers are of length 1. \nIn the 2nd column, both 12 and -2 are of length 2.\n\n&nbsp;\nConstraints:\n\n\tm == grid.length\n\tn == grid[i].length\n\t1 <= m, n <= 100 \n\t-109 <= grid[r][c] <= 109",
        "solutions": [
            {
                "id": 3419979,
                "title": "python-1-liner-solution",
                "content": "# **Explanation**\\ntranspose the grid `zip(*A)` first,\\nthen get the string length of each element,\\nreturn the max length of each row.\\n<br>\\n\\n\\n**Python**\\n```py\\n    def findColumnWidth(self, A: List[List[int]]) -> List[int]:\\n        return [max(len(str(a)) for a in r) for r in zip(*A)]\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```py\\n    def findColumnWidth(self, A: List[List[int]]) -> List[int]:\\n        return [max(len(str(a)) for a in r) for r in zip(*A)]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3420183,
                "title": "c-simplest-solution-ever-exists-superfast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe are going to traverse the matrix column wise and then storing the maximum length of number in that column index of `ans` vector.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo find the maximum length of any number we can just convert it to a string and find it length.\\nIn this way, we can easily find the maximum width of each column.\\n\\n# Complexity\\n- **Time complexity:** O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nWe need to traverse the matrix and perform a constant operation for every number.\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n    \\n        for(int j=0; j<n; j++){\\n            int l=0;\\n            for(int i=0; i<m; i++){\\n                l = max(l, int(to_string(grid[i][j]).size()));\\n            }\\n            ans[j] = l;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n    \\n        for(int j=0; j<n; j++){\\n            int l=0;\\n            for(int i=0; i<m; i++){\\n                l = max(l, int(to_string(grid[i][j]).size()));\\n            }\\n            ans[j] = l;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420289,
                "title": "iteration-with-string-conversion-very-simple-easy-to-understand",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans(grid[0].size(), 1);\\n        for(auto i = 0; i < grid[0].size(); ++i){\\n            for(auto j = 0; j < grid.size(); ++j){\\n                int t = to_string(grid[j][i]).size(); \\n                ans[i] = max(ans[i], t);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\nHere is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans(grid[0].size(), 1);\\n        for(auto i = 0; i < grid[0].size(); ++i){\\n            for(auto j = 0; j < grid.size(); ++j){\\n                int t = to_string(grid[j][i]).size(); \\n                ans[i] = max(ans[i], t);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420023,
                "title": "simple-java-solution",
                "content": "# Complexity\\n- Time complexity: $$O(m*n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length,n=grid[0].length;\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                max=Math.max(max,String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length,n=grid[0].length;\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                max=Math.max(max,String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426059,
                "title": "easy-c-code-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nConvert each integer into a string. Strings are easier to handle.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTraverse from every column row wise, convert cell data into the string, use string.size() to compare the length of integers and keep track of largest length.\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(number of columns)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> res;\\n        string s;\\n        for(int i=0;i<grid[0].size();i++)\\n        {\\n            int digit=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                    s=to_string(grid[j][i]);\\n                    if(digit<s.size())\\n                        digit=s.size();\\n            }\\n            res.push_back(digit);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> res;\\n        string s;\\n        for(int i=0;i<grid[0].size();i++)\\n        {\\n            int digit=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                    s=to_string(grid[j][i]);\\n                    if(digit<s.size())\\n                        digit=s.size();\\n            }\\n            res.push_back(digit);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421661,
                "title": "leetcode-the-hard-way-transpose-and-count-digits",
                "content": "The idea is to first transpose `grid` using `zip`. Then we calculate the number of digits and take the max. Alternatively we can convert to string and check the length.\\n\\n```py\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        def cal(x):\\n            res = 0\\n            if x == 0:\\n                res += 1\\n            if x < 0:\\n                res += 1\\n                x = -x\\n            while x > 0:\\n                x //= 10\\n                res += 1\\n            return res\\n        res = []\\n        for x in zip(*grid):\\n            mx = 1\\n            for y in x:\\n                mx = max(mx, cal(y))\\n            res.append(mx)\\n        return res\\n```\\n\\nOf course it can be further simplifed to \\n\\n```py\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        def cal(x):\\n            res = 0\\n            if x == 0:\\n                res += 1\\n            if x < 0:\\n                res += 1\\n                x = -x\\n            while x > 0:\\n                x //= 10\\n                res += 1\\n            return res\\n        \\n        return [max(cal(y) for y in x) for x in zip(*grid)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```py\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        def cal(x):\\n            res = 0\\n            if x == 0:\\n                res += 1\\n            if x < 0:\\n                res += 1\\n                x = -x\\n            while x > 0:\\n                x //= 10\\n                res += 1\\n            return res\\n        res = []\\n        for x in zip(*grid):\\n            mx = 1\\n            for y in x:\\n                mx = max(mx, cal(y))\\n            res.append(mx)\\n        return res\\n```\n```py\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        def cal(x):\\n            res = 0\\n            if x == 0:\\n                res += 1\\n            if x < 0:\\n                res += 1\\n                x = -x\\n            while x > 0:\\n                x //= 10\\n                res += 1\\n            return res\\n        \\n        return [max(cal(y) for y in x) for x in zip(*grid)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421145,
                "title": "c-easy-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& g) {\\n        vector<int>a;\\n        int n=g.size();\\n        int m=g[0].size();\\n        for(int i=0;i<m;i++){\\n            int mx=0;\\n            for(int j=0;j<n;j++){\\n                long long h=g[j][i];\\n                int a=0;\\n                if(h<0)a++;\\n                h=abs(h);\\n                if(h==0)a=1;\\n                while(h){\\n                    a++;\\n                    h/=10;\\n                }\\n                mx=max(mx,a);\\n            }\\n            a.push_back(mx);\\n        }\\n        return a;\\n    }\\n};\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/adcc5c41-3614-49cb-b16a-ef9c15c202b7_1681589876.6375532.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& g) {\\n        vector<int>a;\\n        int n=g.size();\\n        int m=g[0].size();\\n        for(int i=0;i<m;i++){\\n            int mx=0;\\n            for(int j=0;j<n;j++){\\n                long long h=g[j][i];\\n                int a=0;\\n                if(h<0)a++;\\n                h=abs(h);\\n                if(h==0)a=1;\\n                while(h){\\n                    a++;\\n                    h/=10;\\n                }\\n                mx=max(mx,a);\\n            }\\n            a.push_back(mx);\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420288,
                "title": "c-solution-beats-100",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(m * n) * log10(grid[i][j])$$\\nm = grid[0].size(), n = grid.size()\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(m)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int length(int n) {\\n        int count = n > 0 ? 0 : 1;\\n        while(n) {\\n            n /= 10;\\n            count++;\\n        }\\n        return count;\\n    }\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size(), m = grid[0].size();\\n        vector<int> ans(m);\\n        for(int j = 0; j < m; j++) {\\n            for(int i = 0; i < n; i++) {\\n                int len = length(grid[i][j]);\\n                ans[j] = max(ans[j], len);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    int length(int n) {\\n        int count = n > 0 ? 0 : 1;\\n        while(n) {\\n            n /= 10;\\n            count++;\\n        }\\n        return count;\\n    }\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size(), m = grid[0].size();\\n        vector<int> ans(m);\\n        for(int j = 0; j < m; j++) {\\n            for(int i = 0; i < n; i++) {\\n                int len = length(grid[i][j]);\\n                ans[j] = max(ans[j], len);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420198,
                "title": "explained-simple-and-clear-python-code",
                "content": "# Intuition\\nWe need to calculate the maximum width of each column in the given matrix. We can do this by iterating over each element in the matrix and keeping track of the maximum width of each column.\\n\\n\\n# Approach\\n1. Initialize a list widths of size n with all elements as 0.\\n2. Iterate over each column j in the matrix, and for each column, iterate over all rows i.\\n3. For each element grid[i][j], calculate its width width by finding the length of its absolute value (using abs()) and adding 1 if it is negative.\\n4. Update the maximum width of the column j by taking the maximum of width and the current maximum width widths[j].\\n5. Return the list widths containing the maximum width of each column.\\n# Complexity\\n- Time complexity:\\nWe are iterating over all elements in the matrix once, so the time complexity is O(mn)\\n- Space complexity:\\nWe are using a list of size n to store the maximum width of each column, so the space complexity is O(n).\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m, n = len(grid), len(grid[0])\\n        widths = [0] * n  \\n        for j in range(n):\\n            for i in range(m):\\n                width = len(str(abs(grid[i][j])))\\n                if grid[i][j] < 0:\\n                    width += 1 \\n                widths[j] = max(widths[j], width)\\n        return widths\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m, n = len(grid), len(grid[0])\\n        widths = [0] * n  \\n        for j in range(n):\\n            for i in range(m):\\n                width = len(str(abs(grid[i][j])))\\n                if grid[i][j] < 0:\\n                    width += 1 \\n                widths[j] = max(widths[j], width)\\n        return widths\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420047,
                "title": "java-python-3-java-8-liner-and-python-1-liner-w-brief-analysis",
                "content": "\\n\\n```java\\n    public int[] findColumnWidth(int[][] grid) {\\n        int C = grid[0].length;\\n        int[] ans = new int[C];\\n        for (int c = 0, R = grid.length; c < C; ++c) {\\n            for (int r = 0; r < R; ++r) {\\n                ans[c] = Math.max(ans[c], Integer.toString(grid[r][c]).length());\\n            }\\n        }\\n        return ans;\\n    }\\n```\\n```python\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(len, map(str, col))) for col in zip(*grid)]\\n```\\n\\n**Analysis:**\\n\\nTime: `O(R * C)`, space: `O(C)`, where `R = grid.length, C = grid[0].length`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public int[] findColumnWidth(int[][] grid) {\\n        int C = grid[0].length;\\n        int[] ans = new int[C];\\n        for (int c = 0, R = grid.length; c < C; ++c) {\\n            for (int r = 0; r < R; ++r) {\\n                ans[c] = Math.max(ans[c], Integer.toString(grid[r][c]).length());\\n            }\\n        }\\n        return ans;\\n    }\\n```\n```python\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(len, map(str, col))) for col in zip(*grid)]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3420018,
                "title": "c-using-log10",
                "content": "# Intuition\\nThe number of digits in an integer x can be found by calculating the logarithm of x to the base 10 and adding 1. This is because the logarithm of a number to base 10 gives the power to which 10 must be raised to obtain that number. \\nFor example, log10(1000) = 3, because 10 raised to the power of 3 gives 1000.\\n\\nIn the code, the log10 function is used to calculate the logarithm of the integer in each grid element to base 10. The resulting value is then added to 1 to get the number of digits in the integer.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size(),n=grid[0].size();\\n        vector<int>ans(n);\\n        for(int j=0;j<n;++j){\\n            int len=1;\\n            for(int i=0;i<m;++i){\\n                if(grid[i][j]<0) len=max(len,int(log10(-grid[i][j]) + 1)+1);\\n                else if(grid[i][j]>9) len=max(len,int(log10(grid[i][j]) + 1));\\n            }\\n            ans[j]=len;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size(),n=grid[0].size();\\n        vector<int>ans(n);\\n        for(int j=0;j<n;++j){\\n            int len=1;\\n            for(int i=0;i<m;++i){\\n                if(grid[i][j]<0) len=max(len,int(log10(-grid[i][j]) + 1)+1);\\n                else if(grid[i][j]>9) len=max(len,int(log10(grid[i][j]) + 1));\\n            }\\n            ans[j]=len;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422821,
                "title": "java-easy-explained-beats-100-2ms-using-log10",
                "content": "# Intuition\\nLength of an Integer can be found out using log<sub>10</sub>(n) + 1\\nWe need understand that \\nif (x > y) \\nthen \\nlength of x >= length of y\\n\\n<b>for example</b>\\n=> 1923 > 100 \\n=> length of 1923 >= length of 100 \\n=> 4 >= 3\\n\\nor 1001 > 1000 i.e 4 >= 4\\nso with the value of a integer we can tell whose length largest\\n\\nbut what happens when the no. is < 0 here we have to count \"-\" and cannot compare with positive integers, so to overcome this we can convert the negative integer into positive one which has same length by multiplying it with -10.\\n<b>for example</b> -: \\n=> -3564*(-10) \\n=> 35640 , still have the same length.\\n\\nNow just find the largest no. in a column and take its logarithm.  \\n\\n# Approach\\nBasic use of log<sub>10</sub>(n)\\n\\n# Complexity\\n- Time complexity:  O(m*n)\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n class Solution {\\n     public int[] findColumnWidth(int[][] grid) {\\n        int len = grid.length;\\n        int len1 = grid[0].length;\\n        int ans[] = new int[len1];\\n        for(int i = 0; i < len1; i++)\\n        {\\n            long ma = 0;\\n            for(int j = 0; j < len;j++)\\n            {\\n                long c = grid[j][i];\\n                if(c < 0)\\n                    c *= -10;\\n                if(c > ma)\\n                    ma = c;\\n            }\\n            if(ma > 0)\\n                ans[i] = (int)(Math.log10(ma));\\n            ans[i]++;\\n        }\\n        return ans;\\n    }\\n }\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Greedy"
                ],
                "code": "```\\n class Solution {\\n     public int[] findColumnWidth(int[][] grid) {\\n        int len = grid.length;\\n        int len1 = grid[0].length;\\n        int ans[] = new int[len1];\\n        for(int i = 0; i < len1; i++)\\n        {\\n            long ma = 0;\\n            for(int j = 0; j < len;j++)\\n            {\\n                long c = grid[j][i];\\n                if(c < 0)\\n                    c *= -10;\\n                if(c > ma)\\n                    ma = c;\\n            }\\n            if(ma > 0)\\n                ans[i] = (int)(Math.log10(ma));\\n            ans[i]++;\\n        }\\n        return ans;\\n    }\\n }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420119,
                "title": "number-to-string",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        res = []\\n        for i in range(len(grid[0])):\\n            max_ = 0\\n            for j in range(len(grid)):\\n                max_ = max(max_, len(str(grid[j][i])))\\n            res.append(max_)\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        res = []\\n        for i in range(len(grid[0])):\\n            max_ = 0\\n            for j in range(len(grid)):\\n                max_ = max(max_, len(str(grid[j][i])))\\n            res.append(max_)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420005,
                "title": "short-clean-java-solution",
                "content": "\\n```java []\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int [] arr = new int[grid[0].length];\\n        for(int i=0; i<grid[0].length; i++){\\n            for(int j=0; j<grid.length; j++){\\n                arr[i] = Math.max(arr[i],String.valueOf(grid[j][i]).length());\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int [] arr = new int[grid[0].length];\\n        for(int i=0; i<grid[0].length; i++){\\n            for(int j=0; j<grid.length; j++){\\n                arr[i] = Math.max(arr[i],String.valueOf(grid[j][i]).length());\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518753,
                "title": "c-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(),n=grid[0].size(),i,j;\\n        vector<int> ans(n);\\n        int y=0;\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                y = 0;\\n                if(grid[i][j]<0 || grid[i][j]==0){y++;grid[i][j]*=-1;}\\n                while(grid[i][j]>0){\\n                    y++;\\n                    grid[i][j] /= 10;\\n                }\\n                ans[j] = max(ans[j],y);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(),n=grid[0].size(),i,j;\\n        vector<int> ans(n);\\n        int y=0;\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                y = 0;\\n                if(grid[i][j]<0 || grid[i][j]==0){y++;grid[i][j]*=-1;}\\n                while(grid[i][j]>0){\\n                    y++;\\n                    grid[i][j] /= 10;\\n                }\\n                ans[j] = max(ans[j],y);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420404,
                "title": "one-liner",
                "content": "**Python 3**\\n```python\\nclass Solution:\\n    def findColumnWidth(self, g: List[List[int]]) -> List[int]:\\n        return [max(len(str(n)) for n in row) for row in list(map(list, zip(*g)))]\\n```\\n\\n**C++**\\n```cpp\\nvector<int> findColumnWidth(vector<vector<int>>& g) {\\n    vector<int> res(g[0].size());\\n    for (const auto& r : g)\\n        for (int i = 0; i < r.size(); ++i)\\n            res[i] = max(res[i], (int)to_string(r[i]).size());\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def findColumnWidth(self, g: List[List[int]]) -> List[int]:\\n        return [max(len(str(n)) for n in row) for row in list(map(list, zip(*g)))]\\n```\n```cpp\\nvector<int> findColumnWidth(vector<vector<int>>& g) {\\n    vector<int> res(g[0].size());\\n    for (const auto& r : g)\\n        for (int i = 0; i < r.size(); ++i)\\n            res[i] = max(res[i], (int)to_string(r[i]).size());\\n    return res;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3439432,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        l=[0]*len(grid[0])\\n        for i in grid:\\n            for j in range(len(i)):\\n                x=len(str(i[j]))\\n                l[j]=max(x,l[j])\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        l=[0]*len(grid[0])\\n        for i in grid:\\n            for j in range(len(i)):\\n                x=len(str(i[j]))\\n                l[j]=max(x,l[j])\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420106,
                "title": "c-number-to-string-short-sweet-code-easy-to-understand",
                "content": "````\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int i,j,m=grid.size(),n=grid[0].size(),k;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                k = to_string(grid[i][j]).length();\\n                ans[j] = max(ans[j],k);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int i,j,m=grid.size(),n=grid[0].size(),k;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                k = to_string(grid[i][j]).length();\\n                ans[j] = max(ans[j],k);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420090,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        vector<int> ansf;\\n        for(int i=0;i<n;i++)\\n        {\\n            int ans=INT_MIN;\\n            for(int j=0;j<m;j++)\\n            {\\n                string temp=to_string(grid[j][i]);\\n                int sz=temp.size();\\n                ans=max(ans,sz);\\n            }\\n            ansf.push_back(ans);\\n        }\\n        \\n        return ansf;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        vector<int> ansf;\\n        for(int i=0;i<n;i++)\\n        {\\n            int ans=INT_MIN;\\n            for(int j=0;j<m;j++)\\n            {\\n                string temp=to_string(grid[j][i]);\\n                int sz=temp.size();\\n                ans=max(ans,sz);\\n            }\\n            ansf.push_back(ans);\\n        }\\n        \\n        return ansf;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420077,
                "title": "simple-easiest-solution-python3-faster-than-100",
                "content": "## Python3\\nT:C = O(m*n)\\nS.C = O(n)\\n\\n```class Solution:\\n    def findColumnWidth(self, matrix: List[List[int]]) -> List[int]:\\n        result = [0] * len(matrix[0])\\n        for i in range(len(matrix)):\\n            for j in range(len(matrix[0])):\\n                result[j] = max(result[j],len(str(matrix[i][j])))\\n        return result\\n        \\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "## Python3\\nT:C = O(m*n)\\nS.C = O(n)\\n\\n```class Solution:\\n    def findColumnWidth(self, matrix: List[List[int]]) -> List[int]:\\n        result = [0] * len(matrix[0])\\n        for i in range(len(matrix)):\\n            for j in range(len(matrix[0])):\\n                result[j] = max(result[j],len(str(matrix[i][j])))\\n        return result\\n        \\n",
                "codeTag": "Java"
            },
            {
                "id": 3920270,
                "title": "optimal-approach-easy-to-understand",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n X m)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(m)\\nFor storing the answer\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        \\n        vector<int> ans;\\n        int len = 0;\\n        int maxLen = 0;\\n        string temp;\\n        \\n        for(int col=0;col<m;col++) {\\n            temp = \"\";\\n            len = 0;\\n            maxLen = 0;\\n            \\n            for(int row=0;row<n;row++) {\\n                temp = to_string(grid[row][col]);\\n                len = temp.length();\\n                maxLen = max(maxLen,len);\\n            }\\n            ans.push_back(maxLen);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        \\n        vector<int> ans;\\n        int len = 0;\\n        int maxLen = 0;\\n        string temp;\\n        \\n        for(int col=0;col<m;col++) {\\n            temp = \"\";\\n            len = 0;\\n            maxLen = 0;\\n            \\n            for(int row=0;row<n;row++) {\\n                temp = to_string(grid[row][col]);\\n                len = temp.length();\\n                maxLen = max(maxLen,len);\\n            }\\n            ans.push_back(maxLen);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425953,
                "title": "if-else-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& mat) {\\n        int m = mat.size();\\n        int n = mat[0].size();\\n        vector<int>ans;\\n\\t//processing the query of the every \\n\\tfor(int j=0;j<n;j++)\\n\\t{\\n\\t\\tint result = 0;\\n\\t\\tfor(int i=0;i<m;i++)\\n\\t\\t{\\n\\t\\t\\tint val = mat[i][j];\\n\\t\\t\\tint len = 0;\\n\\t\\t\\tbool neg = false;\\n\\t\\t\\t\\n\\t\\t\\tif(val < 0){\\n\\t\\t\\t    neg = true;\\n\\t\\t\\t\\tval = abs(val);\\n\\t\\t\\t} \\n\\t\\t\\t\\n\\t\\t\\tlen = getlen(val);\\n\\t\\t\\tif(neg == true) len++;\\n            if(val == 0) len++;\\n\\t\\t\\tresult = max(result,len);\\n\\t\\t}\\n\\t\\tans.push_back(result);\\n\\t}\\n\\treturn ans;\\n}\\nint getlen(int val)\\n{\\n\\tint len = 0;\\n\\twhile(val > 0)\\n\\t{\\n\\t\\tlen++;\\n\\t\\tval = val/10;\\n\\t}\\n\\treturn len;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& mat) {\\n        int m = mat.size();\\n        int n = mat[0].size();\\n        vector<int>ans;\\n\\t//processing the query of the every \\n\\tfor(int j=0;j<n;j++)\\n\\t{\\n\\t\\tint result = 0;\\n\\t\\tfor(int i=0;i<m;i++)\\n\\t\\t{\\n\\t\\t\\tint val = mat[i][j];\\n\\t\\t\\tint len = 0;\\n\\t\\t\\tbool neg = false;\\n\\t\\t\\t\\n\\t\\t\\tif(val < 0){\\n\\t\\t\\t    neg = true;\\n\\t\\t\\t\\tval = abs(val);\\n\\t\\t\\t} \\n\\t\\t\\t\\n\\t\\t\\tlen = getlen(val);\\n\\t\\t\\tif(neg == true) len++;\\n            if(val == 0) len++;\\n\\t\\t\\tresult = max(result,len);\\n\\t\\t}\\n\\t\\tans.push_back(result);\\n\\t}\\n\\treturn ans;\\n}\\nint getlen(int val)\\n{\\n\\tint len = 0;\\n\\twhile(val > 0)\\n\\t{\\n\\t\\tlen++;\\n\\t\\tval = val/10;\\n\\t}\\n\\treturn len;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425865,
                "title": "javascript-solution-easy-to-understand-short-simple",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    const m = grid.length\\n    const n = grid[0].length\\n    const ans = []\\n    for (let j = 0; j < n; j++) {\\n      let len = 1\\n      for (let i = 0; i < m; i++) {\\n        len = Math.max(len, grid[i][j].toString().length)\\n      }\\n      ans.push(len)\\n    }\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    const m = grid.length\\n    const n = grid[0].length\\n    const ans = []\\n    for (let j = 0; j < n; j++) {\\n      let len = 1\\n      for (let i = 0; i < m; i++) {\\n        len = Math.max(len, grid[i][j].toString().length)\\n      }\\n      ans.push(len)\\n    }\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3424781,
                "title": "c-brute-force",
                "content": "# Complexity\\n- Time complexity: $$O(n*m)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int len(int n){\\n        int ans=0;\\n        while (n>0){\\n            ans++;\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int n= grid.size(); int m= grid[0].size();\\n        for (int i=0; i<m; i++){\\n            int mini= INT_MAX; int maxi= INT_MIN;\\n            for(int j=0; j<n; j++){\\n                mini= min(grid[j][i],mini);\\n                maxi= max(grid[j][i],maxi);\\n            }\\n            int n1=0; int n2=0;\\n            if (mini<0 && maxi<0){\\n                ans.push_back(len(abs(mini))+1);\\n            }\\n            else if (maxi>0 && mini>0){\\n                ans.push_back(len(abs(maxi)));\\n            }\\n            else{\\n                ans.push_back(max(len(abs(mini))+1,len(maxi)));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int len(int n){\\n        int ans=0;\\n        while (n>0){\\n            ans++;\\n            n/=10;\\n        }\\n        return ans;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int n= grid.size(); int m= grid[0].size();\\n        for (int i=0; i<m; i++){\\n            int mini= INT_MAX; int maxi= INT_MIN;\\n            for(int j=0; j<n; j++){\\n                mini= min(grid[j][i],mini);\\n                maxi= max(grid[j][i],maxi);\\n            }\\n            int n1=0; int n2=0;\\n            if (mini<0 && maxi<0){\\n                ans.push_back(len(abs(mini))+1);\\n            }\\n            else if (maxi>0 && mini>0){\\n                ans.push_back(len(abs(maxi)));\\n            }\\n            else{\\n                ans.push_back(max(len(abs(mini))+1,len(maxi)));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424551,
                "title": "java-no-explanation-required",
                "content": "# Solution:\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid[0].length; j++) {\\n                String s = grid[i][j] + \"\";\\n                ans[j] = Math.max(ans[j], s.length());\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n### Time complexity: $$O(nm)$$\\n### Space complexity: $$O(m)$$",
                "solutionTags": [
                    "Java",
                    "String",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid[0].length; j++) {\\n                String s = grid[i][j] + \"\";\\n                ans[j] = Math.max(ans[j], s.length());\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422770,
                "title": "c-easy-solution-using-to-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid[0].size();\\n        int m=grid.size();\\n        vector<int> ans;\\n        \\n        for(int row=0;row<n;row++){\\n            int maxi=1;\\n            for( int col=0;col<m;col++){\\n                    \\n                    string s=to_string(grid[col][row]);\\n                    int size=s.size();\\n\\n                    maxi=max(maxi,size);\\n    \\n            }\\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid[0].size();\\n        int m=grid.size();\\n        vector<int> ans;\\n        \\n        for(int row=0;row<n;row++){\\n            int maxi=1;\\n            for( int col=0;col<m;col++){\\n                    \\n                    string s=to_string(grid[col][row]);\\n                    int size=s.size();\\n\\n                    maxi=max(maxi,size);\\n    \\n            }\\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422288,
                "title": "java-simple-solution-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length;\\n        int n=grid[0].length;\\n        int ans[]=new int[n];\\n        \\n        for(int j=0;j<n;j++){\\n            int max=1;\\n            for(int i=0;i<m;i++){\\n                int len=find(Math.abs(grid[i][j]));\\n                if(grid[i][j]<0){\\n                    len=len+1;\\n                }\\n                max=Math.max(max,len);\\n            }\\n            ans[j]=max;\\n        }\\n        return ans;\\n    }\\n    \\n    public int find(int number){\\n        int count=0;\\n        while(number!=0){\\n            number=number/10;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length;\\n        int n=grid[0].length;\\n        int ans[]=new int[n];\\n        \\n        for(int j=0;j<n;j++){\\n            int max=1;\\n            for(int i=0;i<m;i++){\\n                int len=find(Math.abs(grid[i][j]));\\n                if(grid[i][j]<0){\\n                    len=len+1;\\n                }\\n                max=Math.max(max,len);\\n            }\\n            ans[j]=max;\\n        }\\n        return ans;\\n    }\\n    \\n    public int find(int number){\\n        int count=0;\\n        while(number!=0){\\n            number=number/10;\\n            count++;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422196,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        let mut ans = vec![0; grid[0].len()];\\n        for row in grid {\\n            for (i, col) in row.iter().enumerate() {\\n                ans[i] = ans[i].max(col.to_string().len() as i32);\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        let mut ans = vec![0; grid[0].len()];\\n        for row in grid {\\n            for (i, col) in row.iter().enumerate() {\\n                ans[i] = ans[i].max(col.to_string().len() as i32);\\n            }\\n        }\\n        ans\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3422024,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n*m)$$\\n\\n- Space complexity:$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int>v;\\n        for(int i=0; i<grid[0].size(); i++){\\n            int ans=0;\\n            for(int j=0; j<grid.size(); j++){\\n                int cnt1=0;\\n                if(grid[j][i]<=0){cnt1++;}\\n                int l=abs(grid[j][i]);\\n                while(l){\\n                    l/=10;\\n                    cnt1++;\\n                }\\n                ans=max(ans, cnt1);\\n            }\\n            v.push_back(ans);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int>v;\\n        for(int i=0; i<grid[0].size(); i++){\\n            int ans=0;\\n            for(int j=0; j<grid.size(); j++){\\n                int cnt1=0;\\n                if(grid[j][i]<=0){cnt1++;}\\n                int l=abs(grid[j][i]);\\n                while(l){\\n                    l/=10;\\n                    cnt1++;\\n                }\\n                ans=max(ans, cnt1);\\n            }\\n            v.push_back(ans);\\n        }\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421660,
                "title": "optimized-java-solution-easy-structured-with-comments-and-approach",
                "content": "# Approach\\nWe iterate through 2D array and keep track of max lengthed element on that particular index by changing values in array that we need to return. Figuring out length can be done easily by using methods of Java Library. We did it by converting number to string and then getting its length.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(M x N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        // To store max length at index j\\n        int[] ans=new int[grid[0].length];\\n\\n        for(int i=0;i<grid.length;i++){\\n            for(int j=0;j<grid[i].length;j++){\\n                // Converting number to string\\n                int x=Integer.toString(grid[i][j]).length();\\n\\n                // checking if current length is greater than max length\\n                if(x>ans[j])\\n                    ans[j]=x;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        // To store max length at index j\\n        int[] ans=new int[grid[0].length];\\n\\n        for(int i=0;i<grid.length;i++){\\n            for(int j=0;j<grid[i].length;j++){\\n                // Converting number to string\\n                int x=Integer.toString(grid[i][j]).length();\\n\\n                // checking if current length is greater than max length\\n                if(x>ans[j])\\n                    ans[j]=x;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420819,
                "title": "python-rotate-matrix-and-calc",
                "content": "```python\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        a = list(zip(*grid[::-1]))\\n        r = []\\n\\n        for col in a:\\n            m = 0\\n            for n in col:\\n                m = max(m, len(str(n)))\\n            r.append(m)\\n            \\n        return r\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        a = list(zip(*grid[::-1]))\\n        r = []\\n\\n        for col in a:\\n            m = 0\\n            for n in col:\\n                m = max(m, len(str(n)))\\n            r.append(m)\\n            \\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420746,
                "title": "c-easytounderstand-stringconversion-optimalsolution-clean-clear",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        \\n        vector<int> ans;\\n        for(int i=0;i<grid[0].size();i++){\\n            int maxi = 0;\\n            for(int j=0;j<grid.size();j++){\\n                string str = to_string(grid[j][i]);\\n                int n = str.size();\\n                maxi = max(n,maxi);\\n            }\\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Matrix"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        \\n        vector<int> ans;\\n        for(int i=0;i<grid[0].size();i++){\\n            int maxi = 0;\\n            for(int j=0;j<grid.size();j++){\\n                string str = to_string(grid[j][i]);\\n                int n = str.size();\\n                maxi = max(n,maxi);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3420650,
                "title": "easy-solution-you-must-feel-it",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int ans [] = new int[grid[0].length];\\n\\n        for( int i = 0 ; i < grid[0].length ; i++ ){\\n            int max = 0;\\n            for( int j = 0 ; j < grid.length ; j++ ){\\n                max = Math.max( max , String.valueOf( grid[j][i] ).length() );\\n            }\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int ans [] = new int[grid[0].length];\\n\\n        for( int i = 0 ; i < grid[0].length ; i++ ){\\n            int max = 0;\\n            for( int j = 0 ; j < grid.length ; j++ ){\\n                max = Math.max( max , String.valueOf( grid[j][i] ).length() );\\n            }\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420532,
                "title": "best-solution-you-will-ever-see-convert-to-string-explained",
                "content": "# Complexity\\n- Time complexity: $$O(n^2)$$ \\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        vector<int> ans;\\n        for(int j=0; j<m; j++) //first write iterator for column\\n        {\\n            int maxLen = INT_MIN;\\n            for(int i=0; i<n; i++) //then write iterator fo row\\n            {\\n                int k = to_string(grid[i][j]).size(); //this will give number of chracters in current number\\n                maxLen = max(maxLen,k);\\n             }\\n            ans.push_back(maxLen); //push maximum length of the element found in this column in the answer vector                 \\n        }\\n          return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        vector<int> ans;\\n        for(int j=0; j<m; j++) //first write iterator for column\\n        {\\n            int maxLen = INT_MIN;\\n            for(int i=0; i<n; i++) //then write iterator fo row\\n            {\\n                int k = to_string(grid[i][j]).size(); //this will give number of chracters in current number\\n                maxLen = max(maxLen,k);\\n             }\\n            ans.push_back(maxLen); //push maximum length of the element found in this column in the answer vector                 \\n        }\\n          return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420353,
                "title": "c-well-explained-o-n-time",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimply take every element from a column and calculate the length of this element and store the max value\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n***O(N * M)***\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n***O(1)***\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int n)    {\\n        if(n==0)    return 1;\\n        int cnt = 0;\\n        if(n<0) cnt++;\\n        n = abs(n);\\n        while(n)    {\\n            cnt++;\\n            n /= 10;\\n        }\\n        return cnt;\\n    }\\n    \\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int n = grid.size(), m = grid[0].size();\\n        for(int i=0; i<m; i++)  {   // for every column\\n            int maxi = 0;\\n            // here column is fixed and traverse every row\\n            // for i = 0 : (0, 0) , (1, 0), (2, 0) .... (n - 1, 0)\\n            // for i = 1 : (0, 1) , (1, 1), (2, 1) .... (n - 1, 1)\\n            // for i = 2 : (0, 2) , (1, 2), (2, 2) .... (n - 1, 2)\\n\\n\\n            // for i = m-1 : (0, m-1) , (1, m-1), (2, m-1) .... (n - 1, m-1)\\n            for(int j=0; j<n; j++)  {   // for every row\\n                maxi = max(maxi, solve(grid[j][i]));\\n            }\\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(int n)    {\\n        if(n==0)    return 1;\\n        int cnt = 0;\\n        if(n<0) cnt++;\\n        n = abs(n);\\n        while(n)    {\\n            cnt++;\\n            n /= 10;\\n        }\\n        return cnt;\\n    }\\n    \\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int n = grid.size(), m = grid[0].size();\\n        for(int i=0; i<m; i++)  {   // for every column\\n            int maxi = 0;\\n            // here column is fixed and traverse every row\\n            // for i = 0 : (0, 0) , (1, 0), (2, 0) .... (n - 1, 0)\\n            // for i = 1 : (0, 1) , (1, 1), (2, 1) .... (n - 1, 1)\\n            // for i = 2 : (0, 2) , (1, 2), (2, 2) .... (n - 1, 2)\\n\\n\\n            // for i = m-1 : (0, m-1) , (1, m-1), (2, m-1) .... (n - 1, m-1)\\n            for(int j=0; j<n; j++)  {   // for every row\\n                maxi = max(maxi, solve(grid[j][i]));\\n            }\\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420276,
                "title": "c-tostring",
                "content": "# Complexity\\n- Time complexity: $$O(m*n)$$\\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        int m = grid.Length;\\n        int n = grid[0].Length;\\n        int[] result = new int[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            int lenght = 0;\\n            for (int j = 0; j < m; j++)\\n            {\\n                lenght = Math.Max(lenght, grid[j][i].ToString().Length);\\n            }\\n            result[i] = lenght;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        int m = grid.Length;\\n        int n = grid[0].Length;\\n        int[] result = new int[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            int lenght = 0;\\n            for (int j = 0; j < m; j++)\\n            {\\n                lenght = Math.Max(lenght, grid[j][i].ToString().Length);\\n            }\\n            result[i] = lenght;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420239,
                "title": "easy-c",
                "content": "# Intuition\\nHere we traverse the grid columnwise \\nand just maintain maximum of all cell\\'s length\\nlength for positive would be ( e.g. 50 then convert to string and find length )\\nlength for negative was length + 1 ( e.g. -50 then convert to string and find length ( now this length will have +1 of the negative sign itself ))\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        \\n        vector<int> ans(m,0);\\n        \\n        for(int j = 0; j < m; j++)\\n        {\\n            for(int i = 0; i < n; i++)\\n            {\\n                if(to_string(grid[i][j]).length() > ans[j])\\n                {\\n                    ans[j] = to_string(grid[i][j]).length();\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = grid[0].size();\\n        \\n        vector<int> ans(m,0);\\n        \\n        for(int j = 0; j < m; j++)\\n        {\\n            for(int i = 0; i < n; i++)\\n            {\\n                if(to_string(grid[i][j]).length() > ans[j])\\n                {\\n                    ans[j] = to_string(grid[i][j]).length();\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420197,
                "title": "short-simple-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int i,j,m=grid.size(),n=grid[0].size(),k;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                k = to_string(grid[i][j]).length();\\n                ans[j] = max(ans[j],k);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int i,j,m=grid.size(),n=grid[0].size(),k;\\n        vector<int> ans(n,0);\\n        for(i = 0; i < m; i++){\\n            for(j = 0; j < n; j++){\\n                k = to_string(grid[i][j]).length();\\n                ans[j] = max(ans[j],k);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420158,
                "title": "java-solution-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        int index = 0;\\n        \\n        for(int i = 0; i < grid[0].length; i++) {\\n            int maxLength = 0;\\n            for(int j = 0; j < grid.length; j++) {\\n                int len = lengthOfNumber(grid[j][i]);\\n                maxLength = Math.max(maxLength, len);\\n            }\\n            ans[index++] = maxLength;\\n        }\\n        return ans;\\n    }\\n    \\n    private int lengthOfNumber(int n) {\\n        int length = 0;\\n        if(n <= 0) {\\n            length++;\\n            n = -n;\\n        }\\n        \\n        while(n > 0) {\\n            n = n / 10;\\n            length++;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        int index = 0;\\n        \\n        for(int i = 0; i < grid[0].length; i++) {\\n            int maxLength = 0;\\n            for(int j = 0; j < grid.length; j++) {\\n                int len = lengthOfNumber(grid[j][i]);\\n                maxLength = Math.max(maxLength, len);\\n            }\\n            ans[index++] = maxLength;\\n        }\\n        return ans;\\n    }\\n    \\n    private int lengthOfNumber(int n) {\\n        int length = 0;\\n        if(n <= 0) {\\n            length++;\\n            n = -n;\\n        }\\n        \\n        while(n > 0) {\\n            n = n / 10;\\n            length++;\\n        }\\n        return length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420133,
                "title": "python3-oneliner-explained",
                "content": "# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(len(str(x)) for x in row) for row in list(zip(*grid))]\\n```\\n# Explanation in Python\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        R,C=len(grid),len(grid[0])\\n        answ=[0]*C\\n        for r in range(R):\\n            for c in range(C):\\n                answ[c]=max(answ[c],len(str(grid[r][c])))\\n        return answ\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(len(str(x)) for x in row) for row in list(zip(*grid))]\\n```\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        R,C=len(grid),len(grid[0])\\n        answ=[0]*C\\n        for r in range(R):\\n            for c in range(C):\\n                answ[c]=max(answ[c],len(str(grid[r][c])))\\n        return answ\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420122,
                "title": "python-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to find the maximum width of each column in a grid of integers. One possible solution would be to iterate over each column of the grid and determine the maximum width of that column.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can solve the problem by creating an empty list called columns of length n, where n is the number of columns in the grid. We can then iterate over each column of the grid and for each integer in that column, we can calculate the width of that integer and add it to the corresponding column in the columns list.\\n\\nOnce we have collected the widths of all the integers in each column, we can then iterate over the columns list and find the maximum width for each column. We can then return the list of maximum widths as our answer.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity: O(m*n), where m is the number of rows and n is the number of columns in the grid. This is because we need to iterate over each element in the grid once.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace complexity: O(n), where n is the number of columns in the grid. We use a list of length n to store the widths of each column.\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m, n = len(grid), len(grid[0])\\n        columns = [[] for i in range(n)]\\n        ans = []\\n        \\n        cn = 0\\n        for col in grid:\\n            for j in range(len(col)):\\n                columns[j].append(len(str(col[j])))\\n    \\n        for column in columns:\\n            ans.append(max(column))\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m, n = len(grid), len(grid[0])\\n        columns = [[] for i in range(n)]\\n        ans = []\\n        \\n        cn = 0\\n        for col in grid:\\n            for j in range(len(col)):\\n                columns[j].append(len(str(col[j])))\\n    \\n        for column in columns:\\n            ans.append(max(column))\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420076,
                "title": "java-clean-self-explanatory",
                "content": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        int m = grid.length, n = grid[0].length, max = -1;\\n        \\n        for(int i=0;i<n;i++){\\n           max = -1;\\n           for(int j=0;j<m;j++){\\n              max = Math.max(max, len(grid[j][i]));\\n            }\\n            ans[i] = max;\\n          }\\n        return ans;\\n    }\\n    \\n    int len(int n){\\n       return String.valueOf(n).length(); //Returns length of the integer(both +ive & -ive)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n        int m = grid.length, n = grid[0].length, max = -1;\\n        \\n        for(int i=0;i<n;i++){\\n           max = -1;\\n           for(int j=0;j<m;j++){\\n              max = Math.max(max, len(grid[j][i]));\\n            }\\n            ans[i] = max;\\n          }\\n        return ans;\\n    }\\n    \\n    int len(int n){\\n       return String.valueOf(n).length(); //Returns length of the integer(both +ive & -ive)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420057,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int getWidth(const vector<vector<int>>&v, int col){\\n        int ans=0;\\n        for(int row=0; row<v.size(); ++row){\\n            ans=max(ans, (int)to_string(v[row][col]).size());\\n        }\\n        return ans;\\n    }\\n\\n    vector<int> findColumnWidth(const vector<vector<int>>&v) {\\n        int m=v.size(), n=v[0].size();\\n        vector<int>ans(n);\\n        for(int col=0; col<n; ++col){\\n            ans[col]=getWidth(v, col);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getWidth(const vector<vector<int>>&v, int col){\\n        int ans=0;\\n        for(int row=0; row<v.size(); ++row){\\n            ans=max(ans, (int)to_string(v[row][col]).size());\\n        }\\n        return ans;\\n    }\\n\\n    vector<int> findColumnWidth(const vector<vector<int>>&v) {\\n        int m=v.size(), n=v[0].size();\\n        vector<int>ans(n);\\n        for(int col=0; col<n; ++col){\\n            ans[col]=getWidth(v, col);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420056,
                "title": "c-simple-solution-with-linq",
                "content": "# Code\\n```\\npublic class Solution\\n{\\n    public int[] FindColumnWidth(int[][] grid)\\n    {\\n        var result = new int[grid[0].Length];\\n\\n        for (var i = 0; i < grid[0].Length; i++)\\n            result[i] = grid.Select(e => e[i].ToString().Length).Max();\\n\\n        return result;\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int[] FindColumnWidth(int[][] grid)\\n    {\\n        var result = new int[grid[0].Length];\\n\\n        for (var i = 0; i < grid[0].Length; i++)\\n            result[i] = grid.Select(e => e[i].ToString().Length).Max();\\n\\n        return result;\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420042,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(mn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    const ans = [];\\n    for (let i = 0; i < grid[0].length; i++) {\\n        let mx = 0;\\n        for (let j = 0; j < grid.length; j++) {\\n            mx = Math.max(mx, grid[j][i].toString().length);\\n        }\\n        ans.push(mx);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    const ans = [];\\n    for (let i = 0; i < grid[0].length; i++) {\\n        let mx = 0;\\n        for (let j = 0; j < grid.length; j++) {\\n            mx = Math.max(mx, grid[j][i].toString().length);\\n        }\\n        ans.push(mx);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3420030,
                "title": "python3-solution",
                "content": "\\n\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        n=len(grid)\\n        m=len(grid[0])\\n        max_widths=[0]*m\\n        \\n        for j in range(m):\\n            max_width=0\\n            for i in range(n):\\n                num=abs(grid[i][j])\\n                width=len(str(num))\\n                if grid[i][j]<0:\\n                    width+=1\\n                    \\n                max_width=max(max_width,width)    \\n                \\n            max_widths[j]=max_width\\n            \\n        return max_widths  \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        n=len(grid)\\n        m=len(grid[0])\\n        max_widths=[0]*m\\n        \\n        for j in range(m):\\n            max_width=0\\n            for i in range(n):\\n                num=abs(grid[i][j])\\n                width=len(str(num))\\n                if grid[i][j]<0:\\n                    width+=1\\n                    \\n                max_width=max(max_width,width)    \\n                \\n            max_widths[j]=max_width\\n            \\n        return max_widths  \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420017,
                "title": "cpp-easy-solution",
                "content": "\\n\\n#### If you helped, Please upvote.\\n#### Complexity\\n* Time Complexity `O(m * n)`\\n* Space Complexity `O(n)`\\n\\n\\n### Solution\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n        for(int c = 0; c < n; c++) {\\n            int mx = 0;\\n            for(int r = 0; r < m; r++)\\n                mx = max((int)to_string(grid[r][c]).size(), mx);\\n            ans[c] = mx;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n> Have a good day!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n        for(int c = 0; c < n; c++) {\\n            int mx = 0;\\n            for(int r = 0; r < m; r++)\\n                mx = max((int)to_string(grid[r][c]).size(), mx);\\n            ans[c] = mx;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3419977,
                "title": "c-simple-convert-to-string-and-check-size",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans(grid[0].size());\\n        for(int i=0;i<grid[0].size();i++){\\n            int a=0;\\n            for(int j=0;j<grid.size();j++){\\n                string s = to_string(grid[j][i]);\\n                if(a<s.size()) a=s.size();\\n            }\\n            ans[i] = a;\\n        }\\n        return ans;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans(grid[0].size());\\n        for(int i=0;i<grid[0].size();i++){\\n            int a=0;\\n            for(int j=0;j<grid.size();j++){\\n                string s = to_string(grid[j][i]);\\n                if(a<s.size()) a=s.size();\\n            }\\n            ans[i] = a;\\n        }\\n        return ans;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3419975,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[] = new int[grid[0].length];\\n        for(int i = 0; i<grid[0].length; i++){\\n            for(int j = 0; j<grid.length; j++){\\n                String s = grid[j][i]+\"\";\\n                arr[i] = Math.max(arr[i], s.length());\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[] = new int[grid[0].length];\\n        for(int i = 0; i<grid[0].length; i++){\\n            for(int j = 0; j<grid.length; j++){\\n                String s = grid[j][i]+\"\";\\n                arr[i] = Math.max(arr[i], s.length());\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4101134,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(lambda n: len(str(n)), row)) for row in zip(*grid)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(lambda n: len(str(n)), row)) for row in zip(*grid)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077318,
                "title": "c-clean-without-string-conversion",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                // add 1 to width if 0 or negative\\n                int tmp = grid[i][j], size = tmp <= 0 ? 1 : 0;\\n                // count digits\\n                while (tmp) { ++size; tmp /= 10; }\\n                ans[j] = max(ans[j], size); \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> ans(n);\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                // add 1 to width if 0 or negative\\n                int tmp = grid[i][j], size = tmp <= 0 ? 1 : 0;\\n                // count digits\\n                while (tmp) { ++size; tmp /= 10; }\\n                ans[j] = max(ans[j], size); \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070046,
                "title": "java-python3-c-solution-simple",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n\\n        int[] result = new int[n];\\n        for (int c = 0; c < n; c++) {\\n            int maxWidth = -1;\\n            for (int r = 0; r < m; r++) {\\n                int width = this.getWidth(grid[r][c]);\\n                maxWidth = Math.max(maxWidth, width);\\n            }\\n            result[c] = maxWidth;\\n        }\\n\\n        return result;\\n    }\\n\\n    private int getWidth(int num) {\\n        int width = (num <= 0) ? 1 : 0;\\n\\n        while (num != 0) {\\n            width++;\\n            num = num / 10;\\n        }\\n\\n        return width;\\n    }\\n}\\n```\\n```Python3 []\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m = len(grid)\\n        n = len(grid[0])\\n\\n        result = [0] * n\\n        for c in range(n):\\n            maxWidth = -1\\n            for r in range(m):\\n                width = self.getWidth(grid[r][c])\\n                maxWidth = max(maxWidth, width)\\n            result[c] = maxWidth\\n        \\n        return result\\n        \\n    def getWidth(self, num: int):\\n        width = 1 if num <= 0 else 0\\n        num = abs(num)\\n\\n        while num != 0:\\n            width += 1\\n            num = num // 10\\n        \\n        return width\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        vector<int> result(n);\\n        for (int c = 0; c < n; c++) {\\n            int maxWidth = -1;\\n            for (int r = 0; r < m; r++) {\\n                int width = this->getWidth(grid[r][c]);\\n                maxWidth = max(maxWidth, width);\\n            }\\n            result[c] = maxWidth;\\n        }\\n\\n        return result;\\n    }\\nprivate:\\n    int getWidth(int num) {\\n        int width = (num <= 0) ? 1 : 0;\\n\\n        while (num != 0) {\\n            width++;\\n            num = num / 10;\\n        }\\n\\n        return width;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```Java []\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n\\n        int[] result = new int[n];\\n        for (int c = 0; c < n; c++) {\\n            int maxWidth = -1;\\n            for (int r = 0; r < m; r++) {\\n                int width = this.getWidth(grid[r][c]);\\n                maxWidth = Math.max(maxWidth, width);\\n            }\\n            result[c] = maxWidth;\\n        }\\n\\n        return result;\\n    }\\n\\n    private int getWidth(int num) {\\n        int width = (num <= 0) ? 1 : 0;\\n\\n        while (num != 0) {\\n            width++;\\n            num = num / 10;\\n        }\\n\\n        return width;\\n    }\\n}\\n```\n```Python3 []\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        m = len(grid)\\n        n = len(grid[0])\\n\\n        result = [0] * n\\n        for c in range(n):\\n            maxWidth = -1\\n            for r in range(m):\\n                width = self.getWidth(grid[r][c])\\n                maxWidth = max(maxWidth, width)\\n            result[c] = maxWidth\\n        \\n        return result\\n        \\n    def getWidth(self, num: int):\\n        width = 1 if num <= 0 else 0\\n        num = abs(num)\\n\\n        while num != 0:\\n            width += 1\\n            num = num // 10\\n        \\n        return width\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        vector<int> result(n);\\n        for (int c = 0; c < n; c++) {\\n            int maxWidth = -1;\\n            for (int r = 0; r < m; r++) {\\n                int width = this->getWidth(grid[r][c]);\\n                maxWidth = max(maxWidth, width);\\n            }\\n            result[c] = maxWidth;\\n        }\\n\\n        return result;\\n    }\\nprivate:\\n    int getWidth(int num) {\\n        int width = (num <= 0) ? 1 : 0;\\n\\n        while (num != 0) {\\n            width++;\\n            num = num / 10;\\n        }\\n\\n        return width;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4064025,
                "title": "something-like-that",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        res = [0] * len(grid[0])\\n        for i in grid:\\n            for j in range(len(i)):\\n                if res[j] < len(str(i[j])):\\n                    res[j] = len(str(i[j]))\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        res = [0] * len(grid[0])\\n        for i in grid:\\n            for j in range(len(i)):\\n                if res[j] < len(str(i[j])):\\n                    res[j] = len(str(i[j]))\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062485,
                "title": "simple-for-beginners-beatz-95",
                "content": "# Complexity\\n- Time complexity: O(n * m)\\n- Space complexity:O( n )\\n- n => no . coloums\\n- m => no . rows\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res = [0] * len(grid[0])\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                res[j] = max(res[j] , len(str(grid[i][j])))\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res = [0] * len(grid[0])\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                res[j] = max(res[j] , len(str(grid[i][j])))\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037223,
                "title": "python-one-liner",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use `zip(*grid)` to iterate over the columns, and `map(str, col)` to transform each number from a given column into a string. We then calculate the lenght of each string and find the `max`.\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(len, map(str, col))) for col in zip(*grid)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max(map(len, map(str, col))) for col in zip(*grid)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031449,
                "title": "self-explanatory-and-simple-cpp-solution-that-beats-98-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid[0].size(),m = grid.size();\\n        vector<int> ans(n);\\n        for(int j = 0;j<n;j++)\\n        {\\n            int l=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                int n = (int)(to_string(grid[i][j])).size();\\n                l = max(l,n);\\n            }\\n            ans[j] = l;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n = grid[0].size(),m = grid.size();\\n        vector<int> ans(n);\\n        for(int j = 0;j<n;j++)\\n        {\\n            int l=0;\\n            for(int i=0;i<m;i++)\\n            {\\n                int n = (int)(to_string(grid[i][j])).size();\\n                l = max(l,n);\\n            }\\n            ans[j] = l;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031360,
                "title": "c-beginner-friendly-solution-with-efficient-complexities",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n*m)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        vector<int> ans(n , 1);\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<m;j++){\\n                int t = to_string(grid[j][i]).size();\\n                ans[i] = max(ans[i],t);\\n            }\\n        }\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        vector<int> ans(n , 1);\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<m;j++){\\n                int t = to_string(grid[j][i]).size();\\n                ans[i] = max(ans[i],t);\\n            }\\n        }\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985590,
                "title": "javascript-o-m-n",
                "content": "# Code\\n```\\nvar findColumnWidth = function(grid) {\\n    const m = grid.length;\\n    const n = grid[0].length;\\n    const res = [];\\n    for (let i = 0; i < n; i++) {\\n        let max = 0;\\n        for (let j = 0; j < m; j++) {\\n            max = Math.max(max, grid[j][i].toString().length);\\n        }\\n        res.push(max);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findColumnWidth = function(grid) {\\n    const m = grid.length;\\n    const n = grid[0].length;\\n    const res = [];\\n    for (let i = 0; i < n; i++) {\\n        let max = 0;\\n        for (let j = 0; j < m; j++) {\\n            max = Math.max(max, grid[j][i].toString().length);\\n        }\\n        res.push(max);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980203,
                "title": "easy-to-understand-solution-python",
                "content": "# Complexity\\n- Time complexity: O(m * n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        answer = [0 for _ in range(len(grid[0]))]\\n\\n        for col in grid:\\n            for i in range(len(col)):\\n                answer[i] = max(answer[i], len(str(col[i])))\\n\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        answer = [0 for _ in range(len(grid[0]))]\\n\\n        for col in grid:\\n            for i in range(len(col)):\\n                answer[i] = max(answer[i], len(str(col[i])))\\n\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972299,
                "title": "beats-96-gl-figuring-this-out",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        \\n        ans = []\\n        small = 0\\n        t_s = 0\\n        \\n        for i in grid:\\n            l_g = len(i)\\n            if l_g > small:\\n                small = l_g\\n        \\n        for y in range(small):\\n            counter = 0\\n            for index,item in enumerate(grid):\\n                t_s = len(str(item[y]))\\n                if t_s > counter:\\n                    counter = t_s\\n            ans.append(counter)\\n        return ans\\n                \\n                \\n            \\n            \\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        \\n        ans = []\\n        small = 0\\n        t_s = 0\\n        \\n        for i in grid:\\n            l_g = len(i)\\n            if l_g > small:\\n                small = l_g\\n        \\n        for y in range(small):\\n            counter = 0\\n            for index,item in enumerate(grid):\\n                t_s = len(str(item[y]))\\n                if t_s > counter:\\n                    counter = t_s\\n            ans.append(counter)\\n        return ans\\n                \\n                \\n            \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954334,
                "title": "easy-to-understand-python3-solution-tc-o-n-sc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        clen = len(grid[0])\\n        rlen = len(grid)\\n        \\n        res = []\\n\\n        for c in range(clen):\\n            maxval = 0\\n            for r in range(rlen):\\n                if len(str(grid[r][c])) > maxval:\\n                    maxval = len(str(grid[r][c]))\\n            res.append(maxval)\\n        \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        clen = len(grid[0])\\n        rlen = len(grid)\\n        \\n        res = []\\n\\n        for c in range(clen):\\n            maxval = 0\\n            for r in range(rlen):\\n                if len(str(grid[r][c])) > maxval:\\n                    maxval = len(str(grid[r][c]))\\n            res.append(maxval)\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939518,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int leng(int x)\\n    {\\n        if(x==0)\\n        return 1;\\n        int a=x;\\n        int c=0;\\n        while(a)\\n        {\\n            c++;\\n            a=a/10;\\n        }\\n        if(x<0) return c+1; else return c;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid[0].size();\\n        int n=grid.size();\\n        vector<int>ans(m);\\n        for(int j=0;j<m;j++)\\n        {\\n            int ma=INT_MIN;\\n            for(int i=0;i<n;i++)\\n            {\\n                ma=max(ma,leng(grid[i][j]));\\n            }\\n            ans[j]=ma;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int leng(int x)\\n    {\\n        if(x==0)\\n        return 1;\\n        int a=x;\\n        int c=0;\\n        while(a)\\n        {\\n            c++;\\n            a=a/10;\\n        }\\n        if(x<0) return c+1; else return c;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid[0].size();\\n        int n=grid.size();\\n        vector<int>ans(m);\\n        for(int j=0;j<m;j++)\\n        {\\n            int ma=INT_MIN;\\n            for(int i=0;i<n;i++)\\n            {\\n                ma=max(ma,leng(grid[i][j]));\\n            }\\n            ans[j]=ma;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938049,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] g) {\\n        int m=g.length;\\n        int n= g[0].length;\\n        int[] ans = new int[n];\\n       \\n        for(int i=0;i<n;i++){\\n            int max=Integer.MIN_VALUE;\\n            for(int j=0;j<m;j++){\\n                max=Math.max(max,String.valueOf(g[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] g) {\\n        int m=g.length;\\n        int n= g[0].length;\\n        int[] ans = new int[n];\\n       \\n        for(int i=0;i<n;i++){\\n            int max=Integer.MIN_VALUE;\\n            for(int j=0;j<m;j++){\\n                max=Math.max(max,String.valueOf(g[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929307,
                "title": "find-the-width-of-columns-of-a-grid-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for(int i=0;i<grid[0].size();i++){\\n            int max=0;\\n            for(int j=0;j<grid.size();j++){\\n                int a=to_string(grid[j][i]).size();\\n                if(max<a){\\n                    max=a;\\n                }\\n            }\\n            ans.push_back(max);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for(int i=0;i<grid[0].size();i++){\\n            int max=0;\\n            for(int j=0;j<grid.size();j++){\\n                int a=to_string(grid[j][i]).size();\\n                if(max<a){\\n                    max=a;\\n                }\\n            }\\n            ans.push_back(max);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928098,
                "title": "easiest-solution-for-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int rows=grid.length;\\n        int cols=grid[0].length;\\n        int result[]=new int[cols];\\n        for(int i=0;i<cols;i++)\\n        {\\n            int max=-1;\\n            for(int j=0;j<rows;j++)\\n            {\\n                String no=Integer.toString(grid[j][i]);\\n                max=Math.max(max,no.length());\\n            }\\n            result[i]=max;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int rows=grid.length;\\n        int cols=grid[0].length;\\n        int result[]=new int[cols];\\n        for(int i=0;i<cols;i++)\\n        {\\n            int max=-1;\\n            for(int j=0;j<rows;j++)\\n            {\\n                String no=Integer.toString(grid[j][i]);\\n                max=Math.max(max,no.length());\\n            }\\n            result[i]=max;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915605,
                "title": "c-simple-solution",
                "content": "# Intuition\\nGo over the matrix, keep track of max width for each columns.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(m*n)\\n\\n- Space complexity:\\nO(1) (O(n) - if we would count memory usage for result vector)\\n\\n# Code\\n```\\nclass Solution {\\n    int getLen(int v) {\\n        if (v == 0) {\\n            return 1;\\n        }\\n        \\n        int t = abs(v);\\n\\n        int l = 0;\\n        while (t > 0) {\\n            t = t / 10;\\n            l ++;\\n        }\\n\\n        return v < 0 ? l + 1 : l;\\n    }\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        const int M = grid.size();\\n        const int N = grid[0].size();\\n\\n        vector<int> result(N, INT_MIN);\\n        for (int r = 0;r < M;r ++) {\\n            for (int c = 0; c < N;c ++) {\\n                result[c] = max(result[c], getLen(grid[r][c]));\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    int getLen(int v) {\\n        if (v == 0) {\\n            return 1;\\n        }\\n        \\n        int t = abs(v);\\n\\n        int l = 0;\\n        while (t > 0) {\\n            t = t / 10;\\n            l ++;\\n        }\\n\\n        return v < 0 ? l + 1 : l;\\n    }\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        const int M = grid.size();\\n        const int N = grid[0].size();\\n\\n        vector<int> result(N, INT_MIN);\\n        for (int r = 0;r < M;r ++) {\\n            for (int c = 0; c < N;c ++) {\\n                result[c] = max(result[c], getLen(grid[r][c]));\\n            }\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887394,
                "title": "easy-beginner-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        vector<int>ans;\\n        for(int i=0;i<m;i++){\\n            int current=0;\\n            for(int j=0;j<n;j++){\\n                string s=to_string(grid[j][i]);\\n                int length=s.size();;\\n                current=max(current,length);\\n            }\\n            ans.push_back(current);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        vector<int>ans;\\n        for(int i=0;i<m;i++){\\n            int current=0;\\n            for(int j=0;j<n;j++){\\n                string s=to_string(grid[j][i]);\\n                int length=s.size();;\\n                current=max(current,length);\\n            }\\n            ans.push_back(current);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887313,
                "title": "c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n\\n        vector<int> result;\\n\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        for(int c=0; c < n; ++c) {\\n\\n            int maxMod = 0;\\n            for(int r=0; r < m; ++r) {\\n                \\n                int mod = 1;\\n                int value = grid[r][c];\\n                \\n                if(value < 0) {\\n                    ++mod;\\n                    value = value * -1;\\n                }\\n\\n                while(value >= 10) {\\n                    value /= 10;\\n                    ++mod;\\n                }\\n                \\n                maxMod = max(maxMod, mod);\\n            }\\n\\n            result.push_back(maxMod);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n\\n        vector<int> result;\\n\\n        int m = grid.size();\\n        int n = grid[0].size();\\n\\n        for(int c=0; c < n; ++c) {\\n\\n            int maxMod = 0;\\n            for(int r=0; r < m; ++r) {\\n                \\n                int mod = 1;\\n                int value = grid[r][c];\\n                \\n                if(value < 0) {\\n                    ++mod;\\n                    value = value * -1;\\n                }\\n\\n                while(value >= 10) {\\n                    value /= 10;\\n                    ++mod;\\n                }\\n                \\n                maxMod = max(maxMod, mod);\\n            }\\n\\n            result.push_back(maxMod);\\n        }\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881343,
                "title": "easy-to-understand-for-begineers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGood and easy for begineers\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\neasy approach\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nbeats 89%\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nbeats 80%\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        z=[]\\n        for j in range(len(grid[0])):\\n            a=0\\n            for i in range(len(grid)):\\n                a=max(len(str(grid[i][j])),a)\\n            z.append(a)\\n        return z\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        z=[]\\n        for j in range(len(grid[0])):\\n            a=0\\n            for i in range(len(grid)):\\n                a=max(len(str(grid[i][j])),a)\\n            z.append(a)\\n        return z\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879934,
                "title": "find-the-width-of-columns-of-a-grid",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n        int[] arr = new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max = 0;\\n            for(int j=0;j<m;j++)\\n            {\\n                String s = String.valueOf(grid[j][i]);\\n                max = Math.max(max,s.length());\\n            }\\n            arr[i] = max;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n        int[] arr = new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max = 0;\\n            for(int j=0;j<m;j++)\\n            {\\n                String s = String.valueOf(grid[j][i]);\\n                max = Math.max(max,s.length());\\n            }\\n            arr[i] = max;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3875446,
                "title": "rust-with-iterators",
                "content": "\\n# Code\\n```\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        \\n        (0..grid[0].len())\\n            .map(|col_index| {\\n                grid\\n                .iter()\\n                .map(|row| {\\n                    row[col_index]\\n                        .to_string()\\n                        .chars()\\n                        .count() as i32\\n                })\\n                .max()\\n                .unwrap()\\n            })\\n            .collect::<Vec<i32>>()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Array",
                    "Matrix",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        \\n        (0..grid[0].len())\\n            .map(|col_index| {\\n                grid\\n                .iter()\\n                .map(|row| {\\n                    row[col_index]\\n                        .to_string()\\n                        .chars()\\n                        .count() as i32\\n                })\\n                .max()\\n                .unwrap()\\n            })\\n            .collect::<Vec<i32>>()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3867379,
                "title": "for-loop-vs-complicated-one-line-of-code",
                "content": "## For loop\\n![image.png](https://assets.leetcode.com/users/images/40672a8f-5e7b-4f8c-b0e7-54861c30751d_1691241512.3061278.png)\\n\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        result = []\\n        for i in range(len(grid[0])):\\n            result.append(max(len(str(grid[j][i])) for j in range(len(grid))))\\n        return result\\n```\\n\\n## One line\\n![image.png](https://assets.leetcode.com/users/images/87dc9203-6a2f-47c5-a94c-b71b84d8519c_1691241329.0060642.png)\\n\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max([len(str(grid[i][j])) for i in range(len(grid))]) for j in range(len(grid[0]))]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        result = []\\n        for i in range(len(grid[0])):\\n            result.append(max(len(str(grid[j][i])) for j in range(len(grid))))\\n        return result\\n```\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max([len(str(grid[i][j])) for i in range(len(grid))]) for j in range(len(grid[0]))]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3863639,
                "title": "java-3ms-beats-96-80",
                "content": "\\n# Complexity\\n- Time complexity: O(mn)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n\\n        int[] maxWidth = new int[grid[0].length];\\n\\n        for (int m = 0; m < grid.length; ++m) {\\n            for (int n = 0; n < grid[0].length; ++n) {\\n                int numDigits = getNumDigits(grid[m][n]);\\n                if (numDigits > maxWidth[n]) {\\n                    maxWidth[n] = numDigits;\\n                }\\n            }\\n        }\\n\\n        return maxWidth;\\n    }\\n\\n    int getNumDigits(int n) {\\n        if (n == 0) {\\n            return 1;\\n        }\\n        int numDigits = 0;\\n        if (n < 0) {\\n            ++numDigits;\\n            n *= -1;\\n        }\\n        while (n > 0) {\\n            n /= 10;\\n            ++numDigits;\\n        }\\n        return numDigits;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n\\n        int[] maxWidth = new int[grid[0].length];\\n\\n        for (int m = 0; m < grid.length; ++m) {\\n            for (int n = 0; n < grid[0].length; ++n) {\\n                int numDigits = getNumDigits(grid[m][n]);\\n                if (numDigits > maxWidth[n]) {\\n                    maxWidth[n] = numDigits;\\n                }\\n            }\\n        }\\n\\n        return maxWidth;\\n    }\\n\\n    int getNumDigits(int n) {\\n        if (n == 0) {\\n            return 1;\\n        }\\n        int numDigits = 0;\\n        if (n < 0) {\\n            ++numDigits;\\n            n *= -1;\\n        }\\n        while (n > 0) {\\n            n /= 10;\\n            ++numDigits;\\n        }\\n        return numDigits;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3863230,
                "title": "swift-one-liner",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func findColumnWidth(_ grid: [[Int]]) -> [Int] {\\n        (0..<grid[0].count).map {\\n            column in grid.reduce(0) { maxWidth,row in max(maxWidth,String(row[column]).count) }}\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func findColumnWidth(_ grid: [[Int]]) -> [Int] {\\n        (0..<grid[0].count).map {\\n            column in grid.reduce(0) { maxWidth,row in max(maxWidth,String(row[column]).count) }}\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851265,
                "title": "java-simple-and-clear-solution",
                "content": "\\n# Complexity\\n1. Time complexity: *O(n)*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *O(n)*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid[0].length, m = grid.length;\\n        int ans[] = new int[n];\\n\\n        for(int i = 0; i < n; i++){\\n            int max = 0;\\n            for(int j = 0; j < m; j++)\\n                max = Math.max(String.valueOf(grid[j][i]).length(), max);\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```\\n\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid[0].length, m = grid.length;\\n        int ans[] = new int[n];\\n\\n        for(int i = 0; i < n; i++){\\n            int max = 0;\\n            for(int j = 0; j < m; j++){\\n                int k = grid[j][i];\\n                int count = 0;\\n\\n                if(k <= 0){\\n                    count = 1;\\n                    k *= -1;\\n                }\\n\\n                while( k > 0){\\n                    count++;\\n                    k /= 10;\\n                }\\n\\n                max = Math.max(count, max);\\n            }\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid[0].length, m = grid.length;\\n        int ans[] = new int[n];\\n\\n        for(int i = 0; i < n; i++){\\n            int max = 0;\\n            for(int j = 0; j < m; j++)\\n                max = Math.max(String.valueOf(grid[j][i]).length(), max);\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid[0].length, m = grid.length;\\n        int ans[] = new int[n];\\n\\n        for(int i = 0; i < n; i++){\\n            int max = 0;\\n            for(int j = 0; j < m; j++){\\n                int k = grid[j][i];\\n                int count = 0;\\n\\n                if(k <= 0){\\n                    count = 1;\\n                    k *= -1;\\n                }\\n\\n                while( k > 0){\\n                    count++;\\n                    k /= 10;\\n                }\\n\\n                max = Math.max(count, max);\\n            }\\n            ans[i] = max;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3848634,
                "title": "for-those-who-don-t-know-advanced-syntax",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        rL = len(grid[0])\\n        l = len(grid)\\n        result = []\\n        for i in range(rL):\\n            colMax = -1\\n            for j in range(l):\\n                length = len(str(grid[j][i]))\\n                if length > colMax :\\n                    colMax = length\\n            result.append(colMax)\\n        return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        rL = len(grid[0])\\n        l = len(grid)\\n        result = []\\n        for i in range(rL):\\n            colMax = -1\\n            for j in range(l):\\n                length = len(str(grid[j][i]))\\n                if length > colMax :\\n                    colMax = length\\n            result.append(colMax)\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3834127,
                "title": "runtime-100-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        a=[]\\n        for i in range(0,len(grid[0])) :\\n            a.append([])\\n        # print(a)\\n        for j in range(0,len(grid[0])) :\\n            for i in range(0,len(grid)) :\\n                a[j].append(len(str(grid[i][j])))\\n        # print(a)\\n        b=[]\\n        for i in a :\\n            b.append(max(i))\\n        return b\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        a=[]\\n        for i in range(0,len(grid[0])) :\\n            a.append([])\\n        # print(a)\\n        for j in range(0,len(grid[0])) :\\n            for i in range(0,len(grid)) :\\n                a[j].append(len(str(grid[i][j])))\\n        # print(a)\\n        b=[]\\n        for i in a :\\n            b.append(max(i))\\n        return b\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3831428,
                "title": "c-easy-approach-beginner-friendly",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        vector<int>ans(m,0);\\n        for(int i=0;i<m;i++){\\n            int maxi=-1e6;\\n            for(int j=0;j<n;j++){\\n                int digits =0;\\n                if(grid[j][i]!=0)\\n                digits = (int)log10(abs(grid[j][i])) + 1;\\n                else digits=1;\\n                if (grid[j][i] < 0) {\\n                 digits++; // Add 1 for the negative sign\\n                }  \\n                maxi=max(maxi,digits);\\n\\n            }\\n         ans[i]=maxi;\\n\\n        }\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        vector<int>ans(m,0);\\n        for(int i=0;i<m;i++){\\n            int maxi=-1e6;\\n            for(int j=0;j<n;j++){\\n                int digits =0;\\n                if(grid[j][i]!=0)\\n                digits = (int)log10(abs(grid[j][i])) + 1;\\n                else digits=1;\\n                if (grid[j][i] < 0) {\\n                 digits++; // Add 1 for the negative sign\\n                }  \\n                maxi=max(maxi,digits);\\n\\n            }\\n         ans[i]=maxi;\\n\\n        }\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3827568,
                "title": "standard-java-solution",
                "content": "### Theory\\nFor each column go through and find the maximum length of each number in that column.\\n\\n### Solution\\n```\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].length];\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int max = 0;\\n            for (int j = 0; j < grid.length; j++) {\\n                int len = getLen(grid[j][i]);\\n                max = Math.max(max, len);\\n            }\\n            res[i] = max;\\n        }\\n        return res;\\n    }\\n    \\n    private int getLen(int val) {\\n        if (val == 0) return 1;\\n        int len = val < 0 ? 1 : 0;\\n        while (val != 0) {\\n            len++;\\n            val /= 10;\\n        }\\n        \\n        return len;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].length];\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int max = 0;\\n            for (int j = 0; j < grid.length; j++) {\\n                int len = getLen(grid[j][i]);\\n                max = Math.max(max, len);\\n            }\\n            res[i] = max;\\n        }\\n        return res;\\n    }\\n    \\n    private int getLen(int val) {\\n        if (val == 0) return 1;\\n        int len = val < 0 ? 1 : 0;\\n        while (val != 0) {\\n            len++;\\n            val /= 10;\\n        }\\n        \\n        return len;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3818284,
                "title": "c-solution-using-to-string",
                "content": "\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n       \\n        for(int i=0;i<grid[0].size();i++){\\n             int len=INT_MIN;\\n            for(int j=0;j<grid.size();j++){\\n                string s=to_string(grid[j][i]);\\n                int r=s.size();\\n                len=max(len,r);\\n            }\\n            ans.push_back(len);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n       \\n        for(int i=0;i<grid[0].size();i++){\\n             int len=INT_MIN;\\n            for(int j=0;j<grid.size();j++){\\n                string s=to_string(grid[j][i]);\\n                int r=s.size();\\n                len=max(len,r);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3817979,
                "title": "5ms-easy-java-solution-easypeasy-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int i,j;\\n        int n=grid.length;\\n        int m=grid[0].length;\\n        int arr[]=new int[m];\\n        int c=0;\\n        int max=Integer.MIN_VALUE;\\n        for(i=0;i<=m-1;i++){\\n            max=Integer.MIN_VALUE;\\n            for(j=0;j<=n-1;j++){\\n                c=0;\\n                if(grid[j][i]<0){\\n                    c++;\\n                }\\n                int u=Math.abs(grid[j][i]);\\n                 while(u!=0){\\n                    int rem=u%10;\\n                    c++;\\n                    u=u/10;\\n                  } \\n                if(c>max){\\n                    max=c;\\n                }\\n            }\\n            // System.out.print(max);\\n            if(max==0){\\n                arr[i]=1;\\n            }\\n            else{\\n                arr[i]=max;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int i,j;\\n        int n=grid.length;\\n        int m=grid[0].length;\\n        int arr[]=new int[m];\\n        int c=0;\\n        int max=Integer.MIN_VALUE;\\n        for(i=0;i<=m-1;i++){\\n            max=Integer.MIN_VALUE;\\n            for(j=0;j<=n-1;j++){\\n                c=0;\\n                if(grid[j][i]<0){\\n                    c++;\\n                }\\n                int u=Math.abs(grid[j][i]);\\n                 while(u!=0){\\n                    int rem=u%10;\\n                    c++;\\n                    u=u/10;\\n                  } \\n                if(c>max){\\n                    max=c;\\n                }\\n            }\\n            // System.out.print(max);\\n            if(max==0){\\n                arr[i]=1;\\n            }\\n            else{\\n                arr[i]=max;\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793504,
                "title": "python-3-easy-solution",
                "content": "# Please  UpVote\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/f07668af-137c-4495-9003-e710a29105a4_1689872171.4824429.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans = []\\n        for i in range(len(grid[0])):\\n            ans.append(max([len(str(grid[j][i])) for j in range(len(grid))]))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans = []\\n        for i in range(len(grid[0])):\\n            ans.append(max([len(str(grid[j][i])) for j in range(len(grid))]))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791388,
                "title": "simple-c-solution",
                "content": "# Complexity\\n- Time complexity:\\n  O(m*n)\\n\\n- Space complexity:\\n  O(m)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int check(int mx,int mn){\\n        int m1=abs(mx),m2=abs(mn);\\n        int c1=0,c2=0;\\n        if(m1==0)c1=1;\\n        if(m2==0)c2=1;\\n        while(m1>0){\\n            c1++;\\n            m1=m1/10;\\n        }\\n        while(m2>0){\\n            c2++;\\n            m2=m2/10;\\n        }\\n        if(mx<0 && mn<0){\\n            return max(c1+1,c2+1);\\n        }\\n        else if(mx<0 && mn>0){\\n            return max(c1+1,c2);\\n        }\\n        else if(mx>0 && mn<0){\\n            return max(c1,c2+1);\\n        }\\n        return max(c1,c2);\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size(),m=grid[0].size();\\n        vector<int>res;\\n        for(int j=0;j<m;j++){\\n            int mx=INT_MIN,mn=INT_MAX;\\n            for(int i=0;i<n;i++){\\n              mx=max(mx,grid[i][j]);\\n              mn=min(mn,grid[i][j]);\\n            }\\n            int ans=check(mx,mn);\\n            res.push_back(ans);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int check(int mx,int mn){\\n        int m1=abs(mx),m2=abs(mn);\\n        int c1=0,c2=0;\\n        if(m1==0)c1=1;\\n        if(m2==0)c2=1;\\n        while(m1>0){\\n            c1++;\\n            m1=m1/10;\\n        }\\n        while(m2>0){\\n            c2++;\\n            m2=m2/10;\\n        }\\n        if(mx<0 && mn<0){\\n            return max(c1+1,c2+1);\\n        }\\n        else if(mx<0 && mn>0){\\n            return max(c1+1,c2);\\n        }\\n        else if(mx>0 && mn<0){\\n            return max(c1,c2+1);\\n        }\\n        return max(c1,c2);\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int n=grid.size(),m=grid[0].size();\\n        vector<int>res;\\n        for(int j=0;j<m;j++){\\n            int mx=INT_MIN,mn=INT_MAX;\\n            for(int i=0;i<n;i++){\\n              mx=max(mx,grid[i][j]);\\n              mn=min(mn,grid[i][j]);\\n            }\\n            int ans=check(mx,mn);\\n            res.push_back(ans);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3787687,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] output = new int[grid[0].length];\\n        int index = 0;\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int max = Integer.MIN_VALUE;\\n            for (int j = 0; j < grid.length; j++) {\\n                max = Math.max(max, new StringBuilder().append(grid[j][i]).length());\\n                if (j == grid.length - 1) {\\n                    output[index++] = max;\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] output = new int[grid[0].length];\\n        int index = 0;\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int max = Integer.MIN_VALUE;\\n            for (int j = 0; j < grid.length; j++) {\\n                max = Math.max(max, new StringBuilder().append(grid[j][i]).length());\\n                if (j == grid.length - 1) {\\n                    output[index++] = max;\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3786064,
                "title": "one-line-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [len(str(max(i, key = lambda x: len(str(x))))) for i in zip(*grid)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [len(str(max(i, key = lambda x: len(str(x))))) for i in zip(*grid)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3779546,
                "title": "width-of-columns-nitishman",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe will need two arrays and we will need to think backward for the first array i.e we first check the last columns then slowly we decrement back to the first element\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) figure out the length of the last array (any array will do they will have same length). i.e [[1,2,3],[3,4,5]] length of [3,4,5] is 2,\\n0 to 2 and store it in index var\\n\\n2) Create vars counter, result[] \\n3) create loop untill the index is not 0\\n    \\n    a) create var to store the max no and initialize it to lowest   possible integer value\\n    b) loop through the 2d array i.e. outer main array \\n            i) set counter var to 0\\n            ii) if value less than equal 0 then increment counter\\n            iii) use while loop to get no of digits\\n            iv) compare and store max value in max\\n    c)store the max in result\\n4) return result\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int counter = 0,max = Integer.MIN_VALUE;\\n        \\n        int index = grid[grid.length-1].length-1;\\n        //index give n-1 if we have n element so we want the array to be size n\\n        //so we add 1 \\n        int[] result = new int[index+1];\\n        \\n        while( index >= 0){\\n            max = Integer.MIN_VALUE;\\n            for(int i = 0;i<grid.length;i++){\\n                counter = 0;\\n                //if number is less than or equal to zero add 1 \\n                if(grid[i][index] <= 0){\\n                    counter++;\\n                }\\n\\n                int pos = Math.abs(grid[i][index]);\\n                \\n                //get count\\n                while(pos != 0){\\n                    counter++;\\n                    pos = pos/10;\\n                }\\n\\n                //store the max value\\n                max = Math.max(max,counter);\\n            }\\n            result[index] = max;\\n            index--;\\n        }\\n           \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int counter = 0,max = Integer.MIN_VALUE;\\n        \\n        int index = grid[grid.length-1].length-1;\\n        //index give n-1 if we have n element so we want the array to be size n\\n        //so we add 1 \\n        int[] result = new int[index+1];\\n        \\n        while( index >= 0){\\n            max = Integer.MIN_VALUE;\\n            for(int i = 0;i<grid.length;i++){\\n                counter = 0;\\n                //if number is less than or equal to zero add 1 \\n                if(grid[i][index] <= 0){\\n                    counter++;\\n                }\\n\\n                int pos = Math.abs(grid[i][index]);\\n                \\n                //get count\\n                while(pos != 0){\\n                    counter++;\\n                    pos = pos/10;\\n                }\\n\\n                //store the max value\\n                max = Math.max(max,counter);\\n            }\\n            result[index] = max;\\n            index--;\\n        }\\n           \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3777343,
                "title": "easy-to-understand-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans=[]\\n        for col in range(len(grid[0])):\\n            v=len(str(grid[0][col]))\\n            for row in range(len(grid)):\\n                tmp=len(str(grid[row][col]))\\n                if v<tmp:\\n                    v=tmp\\n            #print(f\"This is v={v}\")\\n            ans.append(v)\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans=[]\\n        for col in range(len(grid[0])):\\n            v=len(str(grid[0][col]))\\n            for row in range(len(grid)):\\n                tmp=len(str(grid[row][col]))\\n                if v<tmp:\\n                    v=tmp\\n            #print(f\"This is v={v}\")\\n            ans.append(v)\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3772721,
                "title": "max-length-of-strings",
                "content": "![image.png](https://assets.leetcode.com/users/images/9011c52c-dab9-4fcd-a114-0d64ec546e60_1689497673.0553825.png)\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans = [0] * len(grid[0])\\n        for row in grid:\\n            for i, (a, r) in enumerate(zip(ans, row)):\\n                ans[i] = max(a, len(str(r)))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans = [0] * len(grid[0])\\n        for row in grid:\\n            for i, (a, r) in enumerate(zip(ans, row)):\\n                ans[i] = max(a, len(str(r)))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3761177,
                "title": "java-easy-solution-beats-98-2-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: (n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n       int m = grid.length;\\n       int n = grid[0].length;\\n       long temp, maxArr[] = new long [n];\\n       for(int i = 0; i < m ; i ++)\\n            for(int j = 0; j < n; j++)\\n                if(grid[i][j] >= 0)\\n                {\\n                    if(grid[i][j] > maxArr[j])\\n                        maxArr[j] = grid[i][j];\\n                }else\\n                {\\n                    temp = grid[i][j] * -10L;\\n                    if(temp > maxArr[j])\\n                        maxArr[j] = temp;\\n                }\\n        \\n        int ans[] = new int [n];\\n        for(int j = 0; j < n; j++)\\n            ans[j] = String.valueOf(maxArr[j]).length();\\n        return ans;                    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n       int m = grid.length;\\n       int n = grid[0].length;\\n       long temp, maxArr[] = new long [n];\\n       for(int i = 0; i < m ; i ++)\\n            for(int j = 0; j < n; j++)\\n                if(grid[i][j] >= 0)\\n                {\\n                    if(grid[i][j] > maxArr[j])\\n                        maxArr[j] = grid[i][j];\\n                }else\\n                {\\n                    temp = grid[i][j] * -10L;\\n                    if(temp > maxArr[j])\\n                        maxArr[j] = temp;\\n                }\\n        \\n        int ans[] = new int [n];\\n        for(int j = 0; j < n; j++)\\n            ans[j] = String.valueOf(maxArr[j]).length();\\n        return ans;                    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3757164,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)2$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)2$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    let result = [];\\n    let len =0;\\n    let count = 0;\\n    for(let i=0; i < grid[0].length; i++){\\n        for(let j=0; j < grid.length; j++){\\n            len = String(grid[j][i]).length;\\n            if(len>count){\\n                count=len;\\n            }\\n        }\\n        result.push(count);\\n        count=0;\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    let result = [];\\n    let len =0;\\n    let count = 0;\\n    for(let i=0; i < grid[0].length; i++){\\n        for(let j=0; j < grid.length; j++){\\n            len = String(grid[j][i]).length;\\n            if(len>count){\\n                count=len;\\n            }\\n        }\\n        result.push(count);\\n        count=0;\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3741481,
                "title": "kotlin-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun findColumnWidth(grid: Array<IntArray>): IntArray {\\n        val result = IntArray(grid[0].size)\\n        var col = 0\\n\\n        while (col < grid[0].size) {\\n            var width = 0\\n            var row = 0\\n\\n            while (row < grid.size) {\\n                width = Math.max(width, getWidth(grid[row][col]))\\n                row++\\n            }\\n\\n            result[col] = width\\n            row = 0\\n            col++\\n        }\\n\\n        return result\\n    }\\n\\n    private fun getWidth(num: Int): Int {\\n        var n = Math.abs(num)\\n        var width = if (num > 0) 0 else 1\\n\\n        while (n > 0) {\\n            width++\\n            n /= 10\\n        }\\n\\n        return width\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun findColumnWidth(grid: Array<IntArray>): IntArray {\\n        val result = IntArray(grid[0].size)\\n        var col = 0\\n\\n        while (col < grid[0].size) {\\n            var width = 0\\n            var row = 0\\n\\n            while (row < grid.size) {\\n                width = Math.max(width, getWidth(grid[row][col]))\\n                row++\\n            }\\n\\n            result[col] = width\\n            row = 0\\n            col++\\n        }\\n\\n        return result\\n    }\\n\\n    private fun getWidth(num: Int): Int {\\n        var n = Math.abs(num)\\n        var width = if (num > 0) 0 else 1\\n\\n        while (n > 0) {\\n            width++\\n            n /= 10\\n        }\\n\\n        return width\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3736282,
                "title": "easy-go-solution",
                "content": "```\\nfunc findColumnWidth(grid [][]int) []int {\\n        m := len(grid)\\n        n := len(grid[0])\\n\\n        res := make([]int, 0, n)\\n        for i := 0; i < n; i++ {\\n                var max int\\n\\n                for j := 0; j < m; j++ {\\n                        num := grid[j][i]\\n                        length := numLen(num)\\n\\n                        if length > max {\\n                                max = length\\n                        }\\n                }\\n\\n                res = append(res, max)\\n        }\\n\\n        return res\\n}\\n\\nfunc numLen(num int) int {\\n        var isNegative bool\\n\\n        if num <= 0 {\\n                isNegative = true\\n                num *= -1\\n        }\\n\\n        var counter int\\n        for num > 0 {\\n                num /= 10\\n                counter++\\n        }\\n\\n        if isNegative {\\n                counter++\\n        }\\n\\n        return counter\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc findColumnWidth(grid [][]int) []int {\\n        m := len(grid)\\n        n := len(grid[0])\\n\\n        res := make([]int, 0, n)\\n        for i := 0; i < n; i++ {\\n                var max int\\n\\n                for j := 0; j < m; j++ {\\n                        num := grid[j][i]\\n                        length := numLen(num)\\n\\n                        if length > max {\\n                                max = length\\n                        }\\n                }\\n\\n                res = append(res, max)\\n        }\\n\\n        return res\\n}\\n\\nfunc numLen(num int) int {\\n        var isNegative bool\\n\\n        if num <= 0 {\\n                isNegative = true\\n                num *= -1\\n        }\\n\\n        var counter int\\n        for num > 0 {\\n                num /= 10\\n                counter++\\n        }\\n\\n        if isNegative {\\n                counter++\\n        }\\n\\n        return counter\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3728206,
                "title": "easy-explanation-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nread the comments for more clarificaton\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->convert the integer format to string format and calculate the size using .size().\\n\\n# Complexity\\n- Time complexity:o(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        //return vector required\\n        vector<int> answer(n,0);\\n        int k=0;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            int ans=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                //converting the integer to string using t0_string \\n                string temp=to_string(grid[j][i]);\\n                    // calculate the size \\n                int sz=temp.size();\\n                ans=max(ans,sz);\\n            }\\n            answer[k++]=ans;\\n        }\\n        \\n        return answer;\\n    }\\n};\\n// upvote please if u like the solution\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        //return vector required\\n        vector<int> answer(n,0);\\n        int k=0;\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            int ans=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                //converting the integer to string using t0_string \\n                string temp=to_string(grid[j][i]);\\n                    // calculate the size \\n                int sz=temp.size();\\n                ans=max(ans,sz);\\n            }\\n            answer[k++]=ans;\\n        }\\n        \\n        return answer;\\n    }\\n};\\n// upvote please if u like the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716355,
                "title": "three-easy-java-code",
                "content": "# Code\\n```\\n//1st Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int []arr=new int[grid[0].length];\\n        for(int j=0;j<grid[0].length;j++){\\n            for(int i=0;i<grid.length;i++){\\n                String numString = String.valueOf(Math.abs(grid[i][j]));//Convert int to str\\n                int width = numString.length(); // Get the length of the string\\n                if(grid[i][j]<0){\\n                    width++;\\n                }\\n                if(width>arr[j]){\\n                    arr[j]=width;\\n                }\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n\\n//2nd Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] arr = new int[grid[0].length]; // Number of columns in the grid\\n        for (int j = 0; j < grid[0].length; j++) {\\n            for (int i = 0; i < grid.length; i++) {\\n                int num = grid[i][j];\\n                int width = (num < 0) ? String.valueOf(Math.abs(num)).length() + 1 : String.valueOf(num).length();\\n                if (width > arr[j]) {\\n                    arr[j] = width; // Update the maximum width for column j\\n                }\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n\\n//3rd Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length,n=grid[0].length;\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                max=Math.max(max,String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//1st Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int []arr=new int[grid[0].length];\\n        for(int j=0;j<grid[0].length;j++){\\n            for(int i=0;i<grid.length;i++){\\n                String numString = String.valueOf(Math.abs(grid[i][j]));//Convert int to str\\n                int width = numString.length(); // Get the length of the string\\n                if(grid[i][j]<0){\\n                    width++;\\n                }\\n                if(width>arr[j]){\\n                    arr[j]=width;\\n                }\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n\\n//2nd Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] arr = new int[grid[0].length]; // Number of columns in the grid\\n        for (int j = 0; j < grid[0].length; j++) {\\n            for (int i = 0; i < grid.length; i++) {\\n                int num = grid[i][j];\\n                int width = (num < 0) ? String.valueOf(Math.abs(num)).length() + 1 : String.valueOf(num).length();\\n                if (width > arr[j]) {\\n                    arr[j] = width; // Update the maximum width for column j\\n                }\\n            }\\n        }\\n        return arr;\\n    }\\n}\\n\\n//3rd Method:\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m=grid.length,n=grid[0].length;\\n        int ans[]=new int[n];\\n        for(int i=0;i<n;i++)\\n        {\\n            int max=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                max=Math.max(max,String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716247,
                "title": "shortest-easiest-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& v) {\\n        vector<int>p,q;\\n        int j=0;\\n        label:\\n        for(int i=0;i<v.size();i++){\\n            string k=to_string(v[i][j]);\\n            p.push_back(k.length());\\n        }\\n        q.push_back(*max_element(p.begin(),p.end()));\\n        p.clear();\\n        j++;\\n        if(j!=v[0].size())goto label;\\n        return q;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& v) {\\n        vector<int>p,q;\\n        int j=0;\\n        label:\\n        for(int i=0;i<v.size();i++){\\n            string k=to_string(v[i][j]);\\n            p.push_back(k.length());\\n        }\\n        q.push_back(*max_element(p.begin(),p.end()));\\n        p.clear();\\n        j++;\\n        if(j!=v[0].size())goto label;\\n        return q;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3708426,
                "title": "python3-one-liner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n\\n        max_len = 0\\n\\n        return [max(max(max_len, len(str(j))) for j in i) for i in [[grid[j][i] for j in range(len(grid))] for i in range(len(grid[0]))]]\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n\\n        max_len = 0\\n\\n        return [max(max(max_len, len(str(j))) for j in i) for i in [[grid[j][i] for j in range(len(grid))] for i in range(len(grid[0]))]]\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3700566,
                "title": "simple-solutions-nnn",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int ans[]=new int[grid[0].length];\\n        for(int i=0;i<grid[0].length;i++){\\n            int cnt,max=0;\\n            for(int j=0;j<grid.length;j++){\\n                cnt=0;\\n                if(grid[j][i]<0)cnt++;\\n                grid[j][i]=Math.abs(grid[j][i]);\\n                if(grid[j][i]==0)cnt++;\\n                while(grid[j][i]>0){\\n                    cnt++;\\n                    grid[j][i]/=10;\\n                }\\n                max=Math.max(max,cnt);\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int ans[]=new int[grid[0].length];\\n        for(int i=0;i<grid[0].length;i++){\\n            int cnt,max=0;\\n            for(int j=0;j<grid.length;j++){\\n                cnt=0;\\n                if(grid[j][i]<0)cnt++;\\n                grid[j][i]=Math.abs(grid[j][i]);\\n                if(grid[j][i]==0)cnt++;\\n                while(grid[j][i]>0){\\n                    cnt++;\\n                    grid[j][i]/=10;\\n                }\\n                max=Math.max(max,cnt);\\n            }\\n            ans[i]=max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3698505,
                "title": "6-line-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> res(n, 0);\\n        for(int i = 0; i < n; i++)\\n            for(int j = 0; j < m; j++) \\n                res[i] = max(res[i], int(size(to_string(grid[j][i]))));\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int m = grid.size(), n = grid[0].size();\\n        vector<int> res(n, 0);\\n        for(int i = 0; i < n; i++)\\n            for(int j = 0; j < m; j++) \\n                res[i] = max(res[i], int(size(to_string(grid[j][i]))));\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693760,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n*m*k)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    private int size(int n){\\n        if(n == 0){\\n            return 1;\\n        }\\n        int s = 0;\\n        while(n > 0){\\n            s++;\\n            n /= 10;\\n        }\\n\\n        return s;\\n    }\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n\\n        int ans[] = new int[n];\\n\\n        for(int i = 0 ; i < n ; i++){\\n            int max = 0;\\n            for(int j = 0 ; j < m ; j++){\\n                int s = size(Math.abs(grid[j][i]));\\n                if(grid[j][i] < 0){\\n                    s++;\\n                }\\n                max = Math.max(max , s);\\n            }\\n            ans[i] = max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    private int size(int n){\\n        if(n == 0){\\n            return 1;\\n        }\\n        int s = 0;\\n        while(n > 0){\\n            s++;\\n            n /= 10;\\n        }\\n\\n        return s;\\n    }\\n    public int[] findColumnWidth(int[][] grid) {\\n        int m = grid.length;\\n        int n = grid[0].length;\\n\\n        int ans[] = new int[n];\\n\\n        for(int i = 0 ; i < n ; i++){\\n            int max = 0;\\n            for(int j = 0 ; j < m ; j++){\\n                int s = size(Math.abs(grid[j][i]));\\n                if(grid[j][i] < 0){\\n                    s++;\\n                }\\n                max = Math.max(max , s);\\n            }\\n            ans[i] = max;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3690239,
                "title": "c-easy-solution-without-using-stl",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n\\n        for (int i = 0; i < grid[0].size(); i++) {\\n            int count = 0;\\n            int max = 0;\\n            for (int j = 0; j < grid.size(); j++) {  \\n                if (grid[j][i] < 0) {\\n                    count++;\\n                }\\n               long long int t = grid[j][i];\\n               if(t==0) count++;\\n               else\\n                while (t) {\\n                    count++;\\n                    t = t / 10;\\n                }\\n                if (count > max) {\\n                    max = count;\\n                }\\n                count=0;\\n            }\\n            ans.push_back(max);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n\\n        for (int i = 0; i < grid[0].size(); i++) {\\n            int count = 0;\\n            int max = 0;\\n            for (int j = 0; j < grid.size(); j++) {  \\n                if (grid[j][i] < 0) {\\n                    count++;\\n                }\\n               long long int t = grid[j][i];\\n               if(t==0) count++;\\n               else\\n                while (t) {\\n                    count++;\\n                    t = t / 10;\\n                }\\n                if (count > max) {\\n                    max = count;\\n                }\\n                count=0;\\n            }\\n            ans.push_back(max);\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3690188,
                "title": "c-easy-solution-without-using-stl",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for(int i=0; i<grid[0].size(); i++){\\n            int count=0,maxi=0;\\n            int j=0;\\n            for(; j<grid.size(); j++){\\n                if(grid[j][i]<0)\\n                    count++;\\n                    int t=grid[j][i];\\n                    if(t==0) count++;\\n                    else\\n                while(t){\\n                        count++;\\n                        t/=10;\\n                   \\n                }\\n                if(count>maxi){\\n                maxi=count;\\n                }\\n                count=0;\\n            }\\n            \\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for(int i=0; i<grid[0].size(); i++){\\n            int count=0,maxi=0;\\n            int j=0;\\n            for(; j<grid.size(); j++){\\n                if(grid[j][i]<0)\\n                    count++;\\n                    int t=grid[j][i];\\n                    if(t==0) count++;\\n                    else\\n                while(t){\\n                        count++;\\n                        t/=10;\\n                   \\n                }\\n                if(count>maxi){\\n                maxi=count;\\n                }\\n                count=0;\\n            }\\n            \\n            ans.push_back(maxi);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3683091,
                "title": "c-using-for-loops-to-find-the-maximum-length-for-each-column",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst of all, the wording of the question is confusing.  The question is to check the length of each integer as if it is converted to a string.  Repeat the process for all the columns and return the results as an array of int[].\\nI\\'ve opted to use a helper function to calculate the length of a given integer.  The performance of working with integers is better than converting it to string and find the length of it.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Instantiate a new int array **result** with the length of **grid[0].Length**.\\n2. Create a for loop with a nested for loop.  The outer for loop is for the column and the inner loop is for the row.  This allows checking one column at a time\\n3. Instantiate int max = 0.  And use Math.Max inside the nested for loop to find the length of each integer, compare each value against the current max and replace as needed, then assign the max value to the corresponding element in **result**.\\n4. The helper function **findLen** take an integer.  If it is negative, the length is incremented by one and use the positive value to calculate the length. \\n5. Return **result** as the output\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) {\\n\\n        var result = new int[grid[0].Length];\\n\\n        for (int j = 0; j < grid[0].Length; j++)\\n        {\\n            int max = 0;\\n            for(int i = 0; i < grid.Length; i++)\\n            {\\n                max = Math.Max(max, findLen(grid[i][j]));\\n            }\\n            result[j] = max;\\n        }\\n        return result;\\n\\n        int findLen(int num)\\n        {\\n            if (num == 0) return 1;\\n\\n            int count = 0;\\n            if (num < 0) { count++; num *= -1; }\\n            while (num > 0)\\n            {\\n                count++;\\n                num /= 10;\\n            }\\n            return count;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) {\\n\\n        var result = new int[grid[0].Length];\\n\\n        for (int j = 0; j < grid[0].Length; j++)\\n        {\\n            int max = 0;\\n            for(int i = 0; i < grid.Length; i++)\\n            {\\n                max = Math.Max(max, findLen(grid[i][j]));\\n            }\\n            result[j] = max;\\n        }\\n        return result;\\n\\n        int findLen(int num)\\n        {\\n            if (num == 0) return 1;\\n\\n            int count = 0;\\n            if (num < 0) { count++; num *= -1; }\\n            while (num > 0)\\n            {\\n                count++;\\n                num /= 10;\\n            }\\n            return count;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675930,
                "title": "java-solution-count-the-digits-without-converting-to-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- We need to traverse the column and row.\\n- To count the digit of each integer, we can use simple math approach.\\n- remainder = n%10 and n = n/10 \\n- increase the count++ till (n > 0)\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\n- O(m)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int rLength = grid.length;\\n        int cLength = grid[0].length;\\n        int[] ans = new int[cLength];\\n        for (int i=0; i<cLength; i++) { // column traversing\\n            int colCount = 0;\\n            for (int j=0; j<rLength; j++) { // row traversing\\n                int n = grid[j][i], tempCount = 0;\\n                if (n<0) {\\n                    n = -(n);\\n                    tempCount++;\\n                }\\n                if (n==0) {\\n                    tempCount = 1;\\n                }\\n                // count the digits\\n                while (n>0) {\\n                    int remainder = n%10;\\n                    n = n/10;\\n                    tempCount++;\\n                }\\n                colCount = (tempCount > colCount) ? tempCount : colCount;\\n            }\\n            ans[i] = colCount;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int rLength = grid.length;\\n        int cLength = grid[0].length;\\n        int[] ans = new int[cLength];\\n        for (int i=0; i<cLength; i++) { // column traversing\\n            int colCount = 0;\\n            for (int j=0; j<rLength; j++) { // row traversing\\n                int n = grid[j][i], tempCount = 0;\\n                if (n<0) {\\n                    n = -(n);\\n                    tempCount++;\\n                }\\n                if (n==0) {\\n                    tempCount = 1;\\n                }\\n                // count the digits\\n                while (n>0) {\\n                    int remainder = n%10;\\n                    n = n/10;\\n                    tempCount++;\\n                }\\n                colCount = (tempCount > colCount) ? tempCount : colCount;\\n            }\\n            ans[i] = colCount;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3656949,
                "title": "fast-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& a) {\\n        vector<int> ans(a[0].size());\\n        int n=a.size();\\n        for(int i=0;i<a.size();i++)\\n        {\\n            int temp=0,mx=INT_MIN;\\n            for(int j=0;j<a[i].size();j++)\\n            {\\n                int val=a[i][j];\\n                if(val<0)\\n                {\\n                    val=val*(-1);\\n                    temp++;\\n                }\\n                if(val==0){\\n                    ans[j]=max(ans[j],1);\\n                    continue;\\n                }\\n                temp+=log10(val)+1;\\n                // cout<<a[i][j]<<\" \"<<temp<<endl;\\n                ans[j]=max(ans[j],temp);\\n                temp=0;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& a) {\\n        vector<int> ans(a[0].size());\\n        int n=a.size();\\n        for(int i=0;i<a.size();i++)\\n        {\\n            int temp=0,mx=INT_MIN;\\n            for(int j=0;j<a[i].size();j++)\\n            {\\n                int val=a[i][j];\\n                if(val<0)\\n                {\\n                    val=val*(-1);\\n                    temp++;\\n                }\\n                if(val==0){\\n                    ans[j]=max(ans[j],1);\\n                    continue;\\n                }\\n                temp+=log10(val)+1;\\n                // cout<<a[i][j]<<\" \"<<temp<<endl;\\n                ans[j]=max(ans[j],temp);\\n                temp=0;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3653299,
                "title": "easy-brute-force-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nPLEASE UPVOTE !!!\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> a;\\n        for(int i=0;i<grid[0].size();i++)\\n        {\\n            int len=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                string str=\"\";\\n                str=str+to_string(grid[j][i]);\\n                if(len<str.size())\\n                    len=str.size();\\n            }\\n            a.push_back(len);\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> a;\\n        for(int i=0;i<grid[0].size();i++)\\n        {\\n            int len=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                string str=\"\";\\n                str=str+to_string(grid[j][i]);\\n                if(len<str.size())\\n                    len=str.size();\\n            }\\n            a.push_back(len);\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647213,
                "title": "simple-solution-and-easy-to-understand-clear-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid):\\n        l=len(grid)   # finding length of the matrix\\n        org=[]\\n        # columns wise traversing\\n        for i in range(len(grid[0])):\\n            col=[]\\n            for j in range(l):\\n                col+=[str(grid[j][i])]     # adding columns wise elements to the \\'col\\' list\\n            org+=[sorted(col,key=len,reverse=True)]  # sort the elements based on \\'key\\' length after converting into strings , reverse=True for descending order\\n        res=[]\\n        for i in org:   # traversing org list\\n            res+=[len(i[0])]   # adding every first index length to the res list\\n        return res\\nobj=Solution()\\nobj.findColumnWidth([[1],[22],[333]])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid):\\n        l=len(grid)   # finding length of the matrix\\n        org=[]\\n        # columns wise traversing\\n        for i in range(len(grid[0])):\\n            col=[]\\n            for j in range(l):\\n                col+=[str(grid[j][i])]     # adding columns wise elements to the \\'col\\' list\\n            org+=[sorted(col,key=len,reverse=True)]  # sort the elements based on \\'key\\' length after converting into strings , reverse=True for descending order\\n        res=[]\\n        for i in org:   # traversing org list\\n            res+=[len(i[0])]   # adding every first index length to the res list\\n        return res\\nobj=Solution()\\nobj.findColumnWidth([[1],[22],[333]])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3638853,
                "title": "easy-js-solution-runtime-beats-89-73",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    let result = [], col = []\\n\\n    for(let i = 0; i < grid[0].length; i++) {\\n        for(let j = 0; j < grid.length; j++) {\\n            col.push(grid[j][i] < 0 ? (grid[j][i] * -1).toString().length + 1 : grid[j][i].toString().length)\\n        }\\n\\n        result.push(Math.max(...col))\\n        col = []\\n    }\\n\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function(grid) {\\n    let result = [], col = []\\n\\n    for(let i = 0; i < grid[0].length; i++) {\\n        for(let j = 0; j < grid.length; j++) {\\n            col.push(grid[j][i] < 0 ? (grid[j][i] * -1).toString().length + 1 : grid[j][i].toString().length)\\n        }\\n\\n        result.push(Math.max(...col))\\n        col = []\\n    }\\n\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3635104,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        const auto m = grid.size(), n = grid[0].size();\\n        vector<int> result;\\n        for (auto j = 0; j < n; ++j) {\\n            auto width = 0;\\n            for (auto i = 0; i < m; ++i)\\n                width = max(width, int(to_string(grid[i][j]).size()));\\n            result.push_back(width);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        const auto m = grid.size(), n = grid[0].size();\\n        vector<int> result;\\n        for (auto j = 0; j < n; ++j) {\\n            auto width = 0;\\n            for (auto i = 0; i < m; ++i)\\n                width = max(width, int(to_string(grid[i][j]).size()));\\n            result.push_back(width);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3627341,
                "title": "python-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans=[0]*len(grid[0])\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                ans[j] = max(len(str(grid[i][j])),ans[j])\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        ans=[0]*len(grid[0])\\n        for i in range(len(grid)):\\n            for j in range(len(grid[0])):\\n                ans[j] = max(len(str(grid[i][j])),ans[j])\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595482,
                "title": "python-solution",
                "content": "\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res=[] # create empty list to store max lengths in\\n\\n        for x in zip(*grid):  # zip the nested list so we can iterate through the tuples\\n            toplength=0       # create a variable to keep track of top length in each tuple\\n            for i in x:\\n                length = len(str(i))  # variable for all lengths in tuples\\n                if length>toplength: \\n                    toplength=length  \\n            res.append(toplength)   # put the max lengths in the result list \\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res=[] # create empty list to store max lengths in\\n\\n        for x in zip(*grid):  # zip the nested list so we can iterate through the tuples\\n            toplength=0       # create a variable to keep track of top length in each tuple\\n            for i in x:\\n                length = len(str(i))  # variable for all lengths in tuples\\n                if length>toplength: \\n                    toplength=length  \\n            res.append(toplength)   # put the max lengths in the result list \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566511,
                "title": "c-simple-solution",
                "content": "# Complexity\\n- Time complexity: O(N*M)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(M)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint get_length(int x)\\n{\\n    int ans = 0;\\n    if(x>0)\\n    {\\n        while(x!=0) \\n        {\\n            ans++;\\n            x = x/10;\\n        }\\n        return ans;\\n    }\\n    else if(x<0)\\n    {\\n        x = x * -1;\\n         while(x!=0) \\n        {\\n            ans++;\\n            x = x/10;\\n        }\\n        return ans + 1;\\n    }\\n    else return 1;\\n}\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) \\n    {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n        vector<int> ans = {};\\n        int maximum=0;\\n        \\n        for(int i = 0; i<n; i++)\\n        {\\n            for(int j = 0; j<m; j++)\\n            {\\n                int x = get_length(grid[j][i]);\\n                maximum = max(x,maximum);\\n            }\\n            ans.push_back(maximum);\\n            maximum = 0;\\n        }\\n     return ans;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint get_length(int x)\\n{\\n    int ans = 0;\\n    if(x>0)\\n    {\\n        while(x!=0) \\n        {\\n            ans++;\\n            x = x/10;\\n        }\\n        return ans;\\n    }\\n    else if(x<0)\\n    {\\n        x = x * -1;\\n         while(x!=0) \\n        {\\n            ans++;\\n            x = x/10;\\n        }\\n        return ans + 1;\\n    }\\n    else return 1;\\n}\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) \\n    {\\n        int m = grid.size();\\n        int n = grid[0].size();\\n        vector<int> ans = {};\\n        int maximum=0;\\n        \\n        for(int i = 0; i<n; i++)\\n        {\\n            for(int j = 0; j<m; j++)\\n            {\\n                int x = get_length(grid[j][i]);\\n                maximum = max(x,maximum);\\n            }\\n            ans.push_back(maximum);\\n            maximum = 0;\\n        }\\n     return ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3558170,
                "title": "python3-short-and-easy-to-understand-solution-o-m-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n*m)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res=[]\\n        \\n        for c in range(len(grid[0])):\\n            maxEle=0\\n            ch=0\\n            for r in range(len(grid)):\\n                ch=0\\n                if grid[r][c]<0:\\n                    ch=len(str(abs(grid[r][c])))+1\\n                else:\\n                    ch=(len(str(grid[r][c]))) \\n                maxEle=max(maxEle,ch)\\n            res.append(maxEle)\\n                    \\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        res=[]\\n        \\n        for c in range(len(grid[0])):\\n            maxEle=0\\n            ch=0\\n            for r in range(len(grid)):\\n                ch=0\\n                if grid[r][c]<0:\\n                    ch=len(str(abs(grid[r][c])))+1\\n                else:\\n                    ch=(len(str(grid[r][c]))) \\n                maxEle=max(maxEle,ch)\\n            res.append(maxEle)\\n                    \\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534616,
                "title": "worst-solution-ever-must-see",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] a) {\\n        int[] ans= new int[a[0].length];\\n        for(int i=0;i<a[0].length;i++){\\n            for(int j=0;j<a.length;j++){\\n                int c=a[j][i] > 0 ? 0 : 1;\\n                a[j][i]=a[j][i] > 0 ? a[j][i] : a[j][i]*(-1);\\n                System.out.printf(\"%d\\\\n\",c);\\n                if(a[j][i]!=0){\\n                    c=c+(int)Math.log10(a[j][i]);\\n                    c++;\\n                }\\n                if(c>ans[i]){\\n                    ans[i]=c;\\n                }\\n                System.out.printf(\"%d\",c);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] a) {\\n        int[] ans= new int[a[0].length];\\n        for(int i=0;i<a[0].length;i++){\\n            for(int j=0;j<a.length;j++){\\n                int c=a[j][i] > 0 ? 0 : 1;\\n                a[j][i]=a[j][i] > 0 ? a[j][i] : a[j][i]*(-1);\\n                System.out.printf(\"%d\\\\n\",c);\\n                if(a[j][i]!=0){\\n                    c=c+(int)Math.log10(a[j][i]);\\n                    c++;\\n                }\\n                if(c>ans[i]){\\n                    ans[i]=c;\\n                }\\n                System.out.printf(\"%d\",c);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3533087,
                "title": "java-o-n-m-beginner-friendly-no-maths",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public int[] findColumnWidth(int[][] grid) \\n    {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n        int ans[] = new int[m];\\n\\n        for(int i = 0; i < m; i++)\\n        {\\n            int maxLen = String.valueOf(grid[0][i]).length();\\n            for(int j = 0; j < n; j++)\\n            {\\n                maxLen = Math.max(maxLen, String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i] = maxLen;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] findColumnWidth(int[][] grid) \\n    {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n        int ans[] = new int[m];\\n\\n        for(int i = 0; i < m; i++)\\n        {\\n            int maxLen = String.valueOf(grid[0][i]).length();\\n            for(int j = 0; j < n; j++)\\n            {\\n                maxLen = Math.max(maxLen, String.valueOf(grid[j][i]).length());\\n            }\\n            ans[i] = maxLen;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3532370,
                "title": "c",
                "content": "# Code\\n```\\npublic class Solution\\n{\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        var widths = new int[grid[0].Length];\\n\\n        for (var m = 0; m < grid.Length; m++)\\n        {\\n            for (var n = 0; n < grid[0].Length; n++)\\n            {\\n                var num = grid[m][n];\\n                var width = 0;\\n\\n                if (num < 1)\\n                    width++;\\n\\n                while (num != 0)\\n                {\\n                    width++;\\n                    num /= 10;\\n                }\\n                \\n                widths[n] = Math.Max(widths[n], width);\\n            }\\n        }\\n\\n        return widths;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        var widths = new int[grid[0].Length];\\n\\n        for (var m = 0; m < grid.Length; m++)\\n        {\\n            for (var n = 0; n < grid[0].Length; n++)\\n            {\\n                var num = grid[m][n];\\n                var width = 0;\\n\\n                if (num < 1)\\n                    width++;\\n\\n                while (num != 0)\\n                {\\n                    width++;\\n                    num /= 10;\\n                }\\n                \\n                widths[n] = Math.Max(widths[n], width);\\n            }\\n        }\\n\\n        return widths;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3531136,
                "title": "java-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int findLen(int i){\\n        int count = 0;\\n        if(i == 0)\\n            return 1;\\n        if(i < 0)\\n            count++;\\n        while(i != 0){\\n            count++;\\n            i /=10;\\n        }\\n        return count;\\n    }\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n\\n        int[] arr = new int[m];\\n        for(int i = 0;i < m;i++){\\n            int max = findLen(grid[0][i]);\\n            for(int j = 1;j < n;j++){\\n                max = Math.max(max,findLen(grid[j][i]));\\n            }\\n            arr[i] = max;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findLen(int i){\\n        int count = 0;\\n        if(i == 0)\\n            return 1;\\n        if(i < 0)\\n            count++;\\n        while(i != 0){\\n            count++;\\n            i /=10;\\n        }\\n        return count;\\n    }\\n    public int[] findColumnWidth(int[][] grid) {\\n        int n = grid.length;\\n        int m = grid[0].length;\\n\\n        int[] arr = new int[m];\\n        for(int i = 0;i < m;i++){\\n            int max = findLen(grid[0][i]);\\n            for(int j = 1;j < n;j++){\\n                max = Math.max(max,findLen(grid[j][i]));\\n            }\\n            arr[i] = max;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3526579,
                "title": "c-mins-and-maxs-columns-144ms-97",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        var (rows, cols) = (grid.Length, grid[0].Length);\\n\\n        var mins = new int[cols];\\n        var maxs = new int[cols];\\n\\n        for(var i = 0; i < cols; i++)\\n        {\\n            mins[i] = int.MaxValue;\\n            maxs[i] = int.MinValue;\\n        }\\n\\n        for(var c=0; c < cols; c++)\\n        {\\n            for(var r=0; r < rows; r++)\\n            {\\n                mins[c] = Math.Min(grid[r][c], mins[c]);\\n                maxs[c] = Math.Max(grid[r][c], maxs[c]);\\n            }\\n        }\\n\\n        for(var i = 0; i < cols; i++)\\n        {\\n            if(mins[i] >= 0)\\n            {\\n                mins[i] = maxs[i].ToString().Length;\\n            }\\n            else if(maxs[i] < 0)\\n            {\\n                mins[i] = mins[i].ToString().Length;\\n            }\\n            else\\n            {\\n                var lenMin = mins[i].ToString();\\n                var lenMax = maxs[i].ToString();\\n\\n                mins[i] = Math.Max(lenMin.Length, lenMax.Length);\\n            }\\n        }\\n\\n        return mins;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) \\n    {\\n        var (rows, cols) = (grid.Length, grid[0].Length);\\n\\n        var mins = new int[cols];\\n        var maxs = new int[cols];\\n\\n        for(var i = 0; i < cols; i++)\\n        {\\n            mins[i] = int.MaxValue;\\n            maxs[i] = int.MinValue;\\n        }\\n\\n        for(var c=0; c < cols; c++)\\n        {\\n            for(var r=0; r < rows; r++)\\n            {\\n                mins[c] = Math.Min(grid[r][c], mins[c]);\\n                maxs[c] = Math.Max(grid[r][c], maxs[c]);\\n            }\\n        }\\n\\n        for(var i = 0; i < cols; i++)\\n        {\\n            if(mins[i] >= 0)\\n            {\\n                mins[i] = maxs[i].ToString().Length;\\n            }\\n            else if(maxs[i] < 0)\\n            {\\n                mins[i] = mins[i].ToString().Length;\\n            }\\n            else\\n            {\\n                var lenMin = mins[i].ToString();\\n                var lenMax = maxs[i].ToString();\\n\\n                mins[i] = Math.Max(lenMin.Length, lenMax.Length);\\n            }\\n        }\\n\\n        return mins;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3523512,
                "title": "c-solution-beats-90-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int find(int ele){\\n        if(ele==0) return 1;\\n        int len=0;\\n        if(ele<0){\\n            while(ele!=0){\\n                ele=ele/10;\\n                len++;\\n            }\\n            len++;\\n        }\\n        else{\\n            while(ele!=0){\\n                ele=ele/10;\\n                len++;\\n            }\\n        }\\n        return len;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int count=0,maxi=0;\\n        if(grid.size()==1 && grid[0].size()==1){\\n            int ele=grid[0][0];\\n            count=find(ele);\\n            ans.push_back(count);\\n            return ans;\\n        }\\n        for(int i=0;i<grid[0].size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                int ele=grid[j][i];\\n                count=find(ele);\\n                if(maxi<count){\\n                    maxi=count;\\n                }\\n            }\\n            ans.push_back(maxi);\\n            maxi=0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int find(int ele){\\n        if(ele==0) return 1;\\n        int len=0;\\n        if(ele<0){\\n            while(ele!=0){\\n                ele=ele/10;\\n                len++;\\n            }\\n            len++;\\n        }\\n        else{\\n            while(ele!=0){\\n                ele=ele/10;\\n                len++;\\n            }\\n        }\\n        return len;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        int count=0,maxi=0;\\n        if(grid.size()==1 && grid[0].size()==1){\\n            int ele=grid[0][0];\\n            count=find(ele);\\n            ans.push_back(count);\\n            return ans;\\n        }\\n        for(int i=0;i<grid[0].size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                int ele=grid[j][i];\\n                count=find(ele);\\n                if(maxi<count){\\n                    maxi=count;\\n                }\\n            }\\n            ans.push_back(maxi);\\n            maxi=0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518609,
                "title": "java-clean-fast-log10",
                "content": "# Complexity\\n- Time complexity: O(m*n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] widths = new int[grid[0].length];\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid[i].length; j++) {\\n                int num = grid[i][j];\\n                int len = (num < 0 ? 1: 0) + (int) (Math.log10(Math.abs(num)) + 1);\\n                if (num == 0) len = 1;\\n                widths[j] = Math.max(widths[j], len);\\n            }\\n        }\\n        return widths;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] widths = new int[grid[0].length];\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid[i].length; j++) {\\n                int num = grid[i][j];\\n                int len = (num < 0 ? 1: 0) + (int) (Math.log10(Math.abs(num)) + 1);\\n                if (num == 0) len = 1;\\n                widths[j] = Math.max(widths[j], len);\\n            }\\n        }\\n        return widths;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3517630,
                "title": "js-interesting-solution-beats-7-0",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar findColumnWidth = function (grid) {\\n    let ans = []\\n    let temp = []\\n\\n\\n    let x = 0;\\n    for (let j = 0; j < grid[0].length; j++) {\\n        for (let i = 0; i < grid.length; i++) {\\n            temp.push(grid[i][x].toString().length)\\n        }\\n        let max = Math.max(...temp);\\n        ans.push(max);\\n        temp = []\\n        x++;\\n    }\\n\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findColumnWidth = function (grid) {\\n    let ans = []\\n    let temp = []\\n\\n\\n    let x = 0;\\n    for (let j = 0; j < grid[0].length; j++) {\\n        for (let i = 0; i < grid.length; i++) {\\n            temp.push(grid[i][x].toString().length)\\n        }\\n        let max = Math.max(...temp);\\n        ans.push(max);\\n        temp = []\\n        x++;\\n    }\\n\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3508245,
                "title": "runtime-6-ms-beats-78-99-memory-44-1-mb-beats-40-44",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n\\n        int row = grid.length;\\n        int col = grid[0].length;\\n        int[] len = new int[col];\\n        int temp = 0;\\n\\n        for (int j = 0; j < col; j++) {\\n            int max = Integer.MIN_VALUE;\\n            for (int i = 0; i < row; i++) {\\n                if(String.valueOf(grid[i][j]).length() > max){\\n                    max = String.valueOf(grid[i][j]).length();\\n                }\\n            }\\n            len[temp] = max;\\n            temp++;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n\\n        int row = grid.length;\\n        int col = grid[0].length;\\n        int[] len = new int[col];\\n        int temp = 0;\\n\\n        for (int j = 0; j < col; j++) {\\n            int max = Integer.MIN_VALUE;\\n            for (int i = 0; i < row; i++) {\\n                if(String.valueOf(grid[i][j]).length() > max){\\n                    max = String.valueOf(grid[i][j]).length();\\n                }\\n            }\\n            len[temp] = max;\\n            temp++;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3502708,
                "title": "java-easy-string-conversion",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[]= new int[grid[0].length];\\n        int maxLength=0;\\n        for(int i=0;i<grid[0].length;i++){\\n            for(int j=0;j<grid.length;j++){\\n                String temp=String.valueOf(grid[j][i]);\\n                maxLength=Math.max(maxLength,temp.length());\\n            }\\n            arr[i]=maxLength;\\n            maxLength=0;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[]= new int[grid[0].length];\\n        int maxLength=0;\\n        for(int i=0;i<grid[0].length;i++){\\n            for(int j=0;j<grid.length;j++){\\n                String temp=String.valueOf(grid[j][i]);\\n                maxLength=Math.max(maxLength,temp.length());\\n            }\\n            arr[i]=maxLength;\\n            maxLength=0;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3499575,
                "title": "find-the-width-javascript-check-all-grid-elements-65-ms",
                "content": "```\\nvar findColumnWidth = function(grid) {\\n    arr = new Array(grid[0].length).fill(0)\\n \\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[0].length; j++) {  \\n            len = grid[i][j].toString().length\\n            arr[j] = Math.max(arr[j], len)\\n        }\\n    }\\n\\n    return arr\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findColumnWidth = function(grid) {\\n    arr = new Array(grid[0].length).fill(0)\\n \\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[0].length; j++) {  \\n            len = grid[i][j].toString().length\\n            arr[j] = Math.max(arr[j], len)\\n        }\\n    }\\n\\n    return arr\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497125,
                "title": "using-vector-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int col=grid[0].size();\\n        vector<int> ans(col,0);\\n            \\n            for(auto r:grid){\\n                for(int j=0;j<col;j++){ \\n                        int len = r[j]<0 ? 1 : 0;\\n                        if(abs(r[j])==0) { \\n                             ans[j]=max(ans[j],1);\\n                            continue;\\n                        }\\n                        len+=floor(log10(abs(r[j]))+1);\\n                        ans[j]=max(ans[j],len);\\n                }\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int col=grid[0].size();\\n        vector<int> ans(col,0);\\n            \\n            for(auto r:grid){\\n                for(int j=0;j<col;j++){ \\n                        int len = r[j]<0 ? 1 : 0;\\n                        if(abs(r[j])==0) { \\n                             ans[j]=max(ans[j],1);\\n                            continue;\\n                        }\\n                        len+=floor(log10(abs(r[j]))+1);\\n                        ans[j]=max(ans[j],len);\\n                }\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3492233,
                "title": "python-1-line-of-code-matrix-traversal",
                "content": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max([len(str(grid[j][i])) for j in range(len(grid))]) for i in range(len(grid[0]))]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        return [max([len(str(grid[j][i])) for j in range(len(grid))]) for i in range(len(grid[0]))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3489297,
                "title": "simple-brute-force-solution",
                "content": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) \\n    {\\n     int res[]=new int[grid[0].length];\\n     int c=0;\\n     while(c<res.length)\\n     {\\n         int max=1;\\n         for(int i=0;i<grid.length;i++)\\n         {\\n             max=Math.max(max,(grid[i][c]+\"\").length());\\n         }\\n         res[c]=max;\\n         c++;\\n     }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) \\n    {\\n     int res[]=new int[grid[0].length];\\n     int c=0;\\n     while(c<res.length)\\n     {\\n         int max=1;\\n         for(int i=0;i<grid.length;i++)\\n         {\\n             max=Math.max(max,(grid[i][c]+\"\").length());\\n         }\\n         res[c]=max;\\n         c++;\\n     }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487915,
                "title": "c-straightforward-solution-with-lambda",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].Length];\\n\\n        for(int i=0; i<grid[0].Length; i++)\\n        {\\n            res[i] = grid.Select(g => g[i]).Max(g => g.ToString().Length);\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] FindColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].Length];\\n\\n        for(int i=0; i<grid[0].Length; i++)\\n        {\\n            res[i] = grid.Select(g => g[i]).Max(g => g.ToString().Length);\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3487367,
                "title": "easy-cpp-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> a;\\n        int max,\\n        n=grid[0].size(),\\n        m=grid.size();\\n        for(int i=0;i<n;i++){\\n              max=0;\\n            for(int j=0;j<m;j++){\\n                if(grid[j][i]>=0){\\n                    if(max<noDigits(grid[j][i]))\\n                    max=noDigits(grid[j][i]);\\n                }\\n                else{\\n                    if(max<1+noDigits(-grid[j][i]))\\n                    max=1+noDigits(-grid[j][i]);\\n                }\\n            }\\n            a.push_back(max);\\n           \\n        }\\n         return a;\\n    }\\n    int noDigits(int n){\\n         if (n == 0)\\n        return 1;\\n    int count = 0;\\n    while (n != 0) {\\n        n = n / 10;\\n        ++count;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> a;\\n        int max,\\n        n=grid[0].size(),\\n        m=grid.size();\\n        for(int i=0;i<n;i++){\\n              max=0;\\n            for(int j=0;j<m;j++){\\n                if(grid[j][i]>=0){\\n                    if(max<noDigits(grid[j][i]))\\n                    max=noDigits(grid[j][i]);\\n                }\\n                else{\\n                    if(max<1+noDigits(-grid[j][i]))\\n                    max=1+noDigits(-grid[j][i]);\\n                }\\n            }\\n            a.push_back(max);\\n           \\n        }\\n         return a;\\n    }\\n    int noDigits(int n){\\n         if (n == 0)\\n        return 1;\\n    int count = 0;\\n    while (n != 0) {\\n        n = n / 10;\\n        ++count;\\n    }\\n    return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486286,
                "title": "java-0ms-beats-100-and-clean-code",
                "content": "# Approach\\n1. Declare an int[] of size n (n columns).\\n2. For each column j 0..n, determine and set the width:\\n    - determine the min and max of that column.\\n    - return the maxLength of (min, max).\\n3. Return the answer. \\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] maxColLength = new int[grid[0].length];\\n        for (int j = 0; j < maxColLength.length; j++) {\\n            maxColLength[j] = getMaxColLength(grid, j);\\n        }\\n        return maxColLength;\\n    }\\n\\n    private int getMaxColLength(int[][] grid, int col) {\\n        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\\n        for (int i = 0; i < grid.length; i++) {\\n            min = Math.min(min, grid[i][col]);\\n            max = Math.max(max, grid[i][col]);\\n        }\\n        return Math.max(getIntLength(min), getIntLength(max));\\n    }\\n\\n    private int getIntLength(int num) {\\n        int len = num <= 0 ? 1 : 0;\\n        while (num != 0) {\\n            num = num / 10;\\n            len++;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] maxColLength = new int[grid[0].length];\\n        for (int j = 0; j < maxColLength.length; j++) {\\n            maxColLength[j] = getMaxColLength(grid, j);\\n        }\\n        return maxColLength;\\n    }\\n\\n    private int getMaxColLength(int[][] grid, int col) {\\n        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\\n        for (int i = 0; i < grid.length; i++) {\\n            min = Math.min(min, grid[i][col]);\\n            max = Math.max(max, grid[i][col]);\\n        }\\n        return Math.max(getIntLength(min), getIntLength(max));\\n    }\\n\\n    private int getIntLength(int num) {\\n        int len = num <= 0 ? 1 : 0;\\n        while (num != 0) {\\n            num = num / 10;\\n            len++;\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484585,
                "title": "brute-force-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int rows = grid.size();\\n        int columns = grid[0].size();\\n\\n        vector<int> answer;\\n        for(int j = 0; j < columns; j++ ){\\n            int max_size = 0;\\n            // checking for every element columnwise\\n            for(int i = 0; i < rows; i++){\\n                //converting to string and then checking\\n                string val = to_string(grid[i][j]);\\n                int size = val.size();\\n                //comparing with every element for maxsize\\n                if(size > max_size){\\n                    max_size = size;\\n                }\\n            }\\n        answer.push_back(max_size);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        int rows = grid.size();\\n        int columns = grid[0].size();\\n\\n        vector<int> answer;\\n        for(int j = 0; j < columns; j++ ){\\n            int max_size = 0;\\n            // checking for every element columnwise\\n            for(int i = 0; i < rows; i++){\\n                //converting to string and then checking\\n                string val = to_string(grid[i][j]);\\n                int size = val.size();\\n                //comparing with every element for maxsize\\n                if(size > max_size){\\n                    max_size = size;\\n                }\\n            }\\n        answer.push_back(max_size);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3482483,
                "title": "simple-java-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[]=new int[grid[0].length];\\n        int k=0;\\n        for(int i=0;i<grid[0].length;i++){\\n            int max=Integer.MIN_VALUE;\\n            for(int j=0;j<grid.length;j++){\\n                String s=Integer.toString(grid[j][i]);\\n                char a[]=s.toCharArray();\\n                max=Math.max(max,a.length);\\n            }\\n            arr[k]=max;\\n            k++;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int arr[]=new int[grid[0].length];\\n        int k=0;\\n        for(int i=0;i<grid[0].length;i++){\\n            int max=Integer.MIN_VALUE;\\n            for(int j=0;j<grid.length;j++){\\n                String s=Integer.toString(grid[j][i]);\\n                char a[]=s.toCharArray();\\n                max=Math.max(max,a.length);\\n            }\\n            arr[k]=max;\\n            k++;\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480765,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n    \\t\\n    \\tint[] ret=new int[grid[0].length];\\n\\n     \\tfor(int j=0;j<grid[0].length;j++) {\\n     \\t\\tint cmax=-1;\\n    \\t\\tfor(int i=0;i<grid.length;i++) {\\n    \\t\\t\\tif(cmax<String.valueOf(grid[i][j]).length()) {\\n    \\t\\t\\t\\tcmax=String.valueOf(grid[i][j]).length();\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\tret[j]=cmax;\\n    \\t}\\n    \\treturn ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n    \\t\\n    \\tint[] ret=new int[grid[0].length];\\n\\n     \\tfor(int j=0;j<grid[0].length;j++) {\\n     \\t\\tint cmax=-1;\\n    \\t\\tfor(int i=0;i<grid.length;i++) {\\n    \\t\\t\\tif(cmax<String.valueOf(grid[i][j]).length()) {\\n    \\t\\t\\t\\tcmax=String.valueOf(grid[i][j]).length();\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\tret[j]=cmax;\\n    \\t}\\n    \\treturn ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470474,
                "title": "easy-java-solution-readable-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int count = 0;\\n            for (int j = 0; j < grid.length; j++) {\\n                count = Math.max(count, Integer.toString(grid[j][i]).length());\\n            }\\n            ans[i] = count;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] ans = new int[grid[0].length];\\n\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int count = 0;\\n            for (int j = 0; j < grid.length; j++) {\\n                count = Math.max(count, Integer.toString(grid[j][i]).length());\\n            }\\n            ans[i] = count;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3465924,
                "title": "couldn-t-be-simpler",
                "content": "# Code\\n```\\nint num_len(long int a)\\n{\\n  if(a == 0){ return 1; }\\n  int s = 0;\\n  if(a < 0){ s++; }\\n  a = abs(a);\\n  while(a > 0){ a /= 10; s++; }\\n  return s;\\n}\\n\\nint* findColumnWidth(int** grid, int gridSize, int* gridColSize, int* returnSize)\\n{\\n  *returnSize = *gridColSize;\\n  int * ans = malloc(*returnSize * sizeof(int));\\n  for(int i = 0; i < *returnSize; i++)\\n  {\\n    int max = 0;\\n    for(int j = 0 ; j < gridSize; j++)\\n    {\\n       max = max < num_len(grid[j][i]) ? num_len(grid[j][i]) : max;\\n    }\\n    ans[i] = max;\\n  }\\n  return ans;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Matrix",
                    "Iterator"
                ],
                "code": "```\\nint num_len(long int a)\\n{\\n  if(a == 0){ return 1; }\\n  int s = 0;\\n  if(a < 0){ s++; }\\n  a = abs(a);\\n  while(a > 0){ a /= 10; s++; }\\n  return s;\\n}\\n\\nint* findColumnWidth(int** grid, int gridSize, int* gridColSize, int* returnSize)\\n{\\n  *returnSize = *gridColSize;\\n  int * ans = malloc(*returnSize * sizeof(int));\\n  for(int i = 0; i < *returnSize; i++)\\n  {\\n    int max = 0;\\n    for(int j = 0 ; j < gridSize; j++)\\n    {\\n       max = max < num_len(grid[j][i]) ? num_len(grid[j][i]) : max;\\n    }\\n    ans[i] = max;\\n  }\\n  return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3464574,
                "title": "java-2-methods-simple",
                "content": "\\n**Version 1:** With string conversion\\n>**T/S:** O(mn lg w)/O(n), where m x n are dimensions of the grid and w is the number of characters in grid[i][j] on average\\n```\\npublic int[] findColumnWidth(int[][] grid) {\\n\\tvar ans = new int[grid[0].length];\\n\\n\\tfor (var i = 0; i < ans.length; i++)\\n\\t\\tfor (var row : grid)\\n\\t\\t\\tans[i] = Math.max(ans[i], String.valueOf(row[i]).length());\\n\\n\\treturn ans;\\n}\\n```\\n**Version 2:** Without string conversion\\n>**T/S:** O(mn)/O(n)\\n```\\npublic int[] findColumnWidth(int[][] grid) {\\n\\tvar ans = new int[grid[0].length];\\n\\n\\tfor (var i = 0; i < ans.length; i++)\\n\\t\\tfor (var row : grid) {\\n\\t\\t\\tvar width = row[i] < 0 ? 2 : 1;\\n\\t\\t\\t\\n\\t\\t\\tif (row[i] != 0)\\n\\t\\t\\t\\twidth += Math.log10(Math.abs(row[i]));\\n\\t\\t\\t\\t\\n\\t\\t\\tans[i] = Math.max(ans[i], width);\\n\\t\\t}\\n\\n\\treturn ans;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int[] findColumnWidth(int[][] grid) {\\n\\tvar ans = new int[grid[0].length];\\n\\n\\tfor (var i = 0; i < ans.length; i++)\\n\\t\\tfor (var row : grid)\\n\\t\\t\\tans[i] = Math.max(ans[i], String.valueOf(row[i]).length());\\n\\n\\treturn ans;\\n}\\n```\n```\\npublic int[] findColumnWidth(int[][] grid) {\\n\\tvar ans = new int[grid[0].length];\\n\\n\\tfor (var i = 0; i < ans.length; i++)\\n\\t\\tfor (var row : grid) {\\n\\t\\t\\tvar width = row[i] < 0 ? 2 : 1;\\n\\t\\t\\t\\n\\t\\t\\tif (row[i] != 0)\\n\\t\\t\\t\\twidth += Math.log10(Math.abs(row[i]));\\n\\t\\t\\t\\t\\n\\t\\t\\tans[i] = Math.max(ans[i], width);\\n\\t\\t}\\n\\n\\treturn ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3464301,
                "title": "easy-to-understand-java-code",
                "content": "# Intuition\\n<!-- Just convert each integer to string and then find its length and compare them -->\\n\\n# Approach\\n<!-- Just convert each integer to string and then find its length and compare them -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- o(m*n) -->\\n\\n- Space complexity:\\n<!--o(1) -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        \\n        int m=grid.length;\\n        int n=grid[0].length;\\n        int a[]=new int[n];\\n        for(int j=0;j<n;j++){\\n            String str=Integer.toString(grid[0][j]);\\n            int len=str.length();\\n            for(int i=1;i<m;i++){\\n            String str1=Integer.toString(grid[i][j]);\\n            int len1=str1.length();\\n            if(len1>len) len=len1;\\n            }\\n            a[j]=len;\\n        }\\n        return a;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        \\n        int m=grid.length;\\n        int n=grid[0].length;\\n        int a[]=new int[n];\\n        for(int j=0;j<n;j++){\\n            String str=Integer.toString(grid[0][j]);\\n            int len=str.length();\\n            for(int i=1;i<m;i++){\\n            String str1=Integer.toString(grid[i][j]);\\n            int len1=str1.length();\\n            if(len1>len) len=len1;\\n            }\\n            a[j]=len;\\n        }\\n        return a;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461914,
                "title": "ruby-one-liner-faster-than-100",
                "content": "```\\n# @param {Integer[][]} grid\\n# @return {Integer[]}\\ndef find_column_width(grid)\\n  grid.transpose.map { |col| col.minmax.map { _1.to_s.size }.max }  \\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[][]} grid\\n# @return {Integer[]}\\ndef find_column_width(grid)\\n  grid.transpose.map { |col| col.minmax.map { _1.to_s.size }.max }  \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3461540,
                "title": "java-solution-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] mat) {\\n        int r=mat.length;\\n        int c=mat[0].length;\\n        int[] ans = new int[c];\\n        int k=0;\\n        for(int i=0;i<c;i++){\\n            int len=0;\\n            for(int j=0;j<r;j++){\\n                String s=\"\"+(mat[j][i]);\\n                len=Math.max(len,s.length());\\n            }\\n            ans[k]=len;\\n            k++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] mat) {\\n        int r=mat.length;\\n        int c=mat[0].length;\\n        int[] ans = new int[c];\\n        int k=0;\\n        for(int i=0;i<c;i++){\\n            int len=0;\\n            for(int j=0;j<r;j++){\\n                String s=\"\"+(mat[j][i]);\\n                len=Math.max(len,s.length());\\n            }\\n            ans[k]=len;\\n            k++;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3460897,
                "title": "simplest-3-lines-long-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(cols * rows)\\n\\n- Space complexity:\\nO(cols * rows)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        rows = len(grid)\\n        cols = len(grid[0])\\n        return [max([len(str(grid[row][col])) for row in range(rows)]) for col in range(cols)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        rows = len(grid)\\n        cols = len(grid[0])\\n        return [max([len(str(grid[row][col])) for row in range(rows)]) for col in range(cols)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3460758,
                "title": "fastest-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].length];\\n        for(int j=0; j<grid[0].length; j++){\\n            int sum = 0;\\n            for(int i=0; i<grid.length; i++){\\n                int count = 0, t = grid[i][j]<0 ? -grid[i][j] : grid[i][j];\\n                if(grid[i][j]<=0)\\n                   count = 1;\\n                while(t>0){\\n                    count++;\\n                    t /= 10;\\n                }\\n                sum = Math.max(sum, count);\\n            }\\n            res[j] = sum;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] res = new int[grid[0].length];\\n        for(int j=0; j<grid[0].length; j++){\\n            int sum = 0;\\n            for(int i=0; i<grid.length; i++){\\n                int count = 0, t = grid[i][j]<0 ? -grid[i][j] : grid[i][j];\\n                if(grid[i][j]<=0)\\n                   count = 1;\\n                while(t>0){\\n                    count++;\\n                    t /= 10;\\n                }\\n                sum = Math.max(sum, count);\\n            }\\n            res[j] = sum;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3449075,
                "title": "rust-convert-to-string-then-get-length",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimulation the logic\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nConvert i32 to string, then get length\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(rows * cols)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nuse std::cmp::max;\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        let rows = grid.len();\\n        let cols = grid[0].len();\\n        let mut res = vec![0; cols];\\n        for c in 0..cols {\\n            let mut wid = 0_i32;\\n            for r in 0..rows {\\n                let i_str = grid[r][c].to_string();\\n                wid = max(wid, i_str.len() as i32);\\n            }\\n            res[c] = wid;\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::cmp::max;\\nimpl Solution {\\n    pub fn find_column_width(grid: Vec<Vec<i32>>) -> Vec<i32> {\\n        let rows = grid.len();\\n        let cols = grid[0].len();\\n        let mut res = vec![0; cols];\\n        for c in 0..cols {\\n            let mut wid = 0_i32;\\n            for r in 0..rows {\\n                let i_str = grid[r][c].to_string();\\n                wid = max(wid, i_str.len() as i32);\\n            }\\n            res[c] = wid;\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3447878,
                "title": "python3-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        cols = len(grid[0])\\n        res = [0] * cols\\n        for r in range(len(grid)):\\n            for c in range(cols):\\n                L = len(str(grid[r][c]))\\n                res[c] = max(res[c], L)\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        cols = len(grid[0])\\n        res = [0] * cols\\n        for r in range(len(grid)):\\n            for c in range(cols):\\n                L = len(str(grid[r][c]))\\n                res[c] = max(res[c], L)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446870,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> max(grid[0].size(),0);\\n        for(int i=0;i<grid[0].size();++i){\\n            for(int j=0;j<grid.size();++j){\\n                max[i] = std::max(int(to_string(grid[j][i]).length()),max[i]);  \\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> max(grid[0].size(),0);\\n        for(int i=0;i<grid[0].size();++i){\\n            for(int j=0;j<grid.size();++j){\\n                max[i] = std::max(int(to_string(grid[j][i]).length()),max[i]);  \\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446498,
                "title": "java-simple-solution-bruteforce-counting",
                "content": "# Complexity\\n- Time complexity: $$O(m * n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int index = 0;\\n        int[] ans = new int[grid[0].length];\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int maxCount = 1;\\n            for (int[] ints : grid) {\\n                int currentCount = getCount(ints[i]);\\n                if (currentCount > maxCount) {\\n                    maxCount = currentCount;\\n                }\\n            }\\n            ans[index++] = maxCount;\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    private static int getCount(int n) {\\n        int counter = 0;\\n        if (n < 0) {\\n            counter++;\\n            n *= -1;\\n        }\\n        \\n        while (n > 0) {\\n            n = n / 10;\\n            counter++;\\n        }\\n        \\n        return counter;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Matrix",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public int[] findColumnWidth(int[][] grid) {\\n        int index = 0;\\n        int[] ans = new int[grid[0].length];\\n        for (int i = 0; i < grid[0].length; i++) {\\n            int maxCount = 1;\\n            for (int[] ints : grid) {\\n                int currentCount = getCount(ints[i]);\\n                if (currentCount > maxCount) {\\n                    maxCount = currentCount;\\n                }\\n            }\\n            ans[index++] = maxCount;\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    private static int getCount(int n) {\\n        int counter = 0;\\n        if (n < 0) {\\n            counter++;\\n            n *= -1;\\n        }\\n        \\n        while (n > 0) {\\n            n = n / 10;\\n            counter++;\\n        }\\n        \\n        return counter;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444362,
                "title": "two-loops-with-log10-abs",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for (int c = 0; c < size(grid[0]); ++c) {\\n            int w = 0;\\n            for (int r = 0; r < size(grid); ++r) {\\n                const int x = grid[r][c], len = (x != 0 ? (int)log10(abs(x))+1 : 1) + (x < 0);\\n                w = max(w, len);\\n            }\\n            ans.push_back(w);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) {\\n        vector<int> ans;\\n        for (int c = 0; c < size(grid[0]); ++c) {\\n            int w = 0;\\n            for (int r = 0; r < size(grid); ++r) {\\n                const int x = grid[r][c], len = (x != 0 ? (int)log10(abs(x))+1 : 1) + (x < 0);\\n                w = max(w, len);\\n            }\\n            ans.push_back(w);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444206,
                "title": "java-javascript-c-solution",
                "content": "**Java**\\n```\\npublic class Solution {\\n\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] maxWidthForEachColumn = new int[grid[0].length];\\n\\n        for (int column = 0; column < grid[0].length; ++column) {\\n\\n            int maxColumnWidth = 0;\\n            for (int row = 0; row < grid.length; ++row) {\\n                int additionForFirstDigit = 1;\\n                int additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n                int currentColumnWidth = grid[row][column] != 0\\n                        ? ((int) Math.log10(Math.abs(grid[row][column])) + additionForFirstDigit + additionForNegativeValue)\\n                        : 1;\\n\\n                maxColumnWidth = Math.max(maxColumnWidth, currentColumnWidth);\\n            }\\n            maxWidthForEachColumn[column] = maxColumnWidth;\\n        }\\n\\n        return maxWidthForEachColumn;\\n    }\\n}\\n```\\n**JavaScript**\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function (grid) {\\n    const maxWidthForEachColumn = new Array(grid[0].length);\\n\\n    for (let column = 0; column < grid[0].length; ++column) {\\n\\n        let maxColumnWidth = 0;\\n        for (let row = 0; row < grid.length; ++row) {\\n            const additionForFirstDigit = 1;\\n            const additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n            const currentColumnWidth = grid[row][column] !== 0\\n                    ? (Math.floor(Math.log10(Math.abs(grid[row][column]))) + additionForFirstDigit + additionForNegativeValue)\\n                    : 1;\\n\\n            maxColumnWidth = Math.max(maxColumnWidth, currentColumnWidth);\\n        }\\n        maxWidthForEachColumn[column] = maxColumnWidth;\\n    }\\n\\n    return maxWidthForEachColumn;\\n};\\n```\\n**C++**\\n```\\n#include <cmath>\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\n    \\npublic:\\n    vector<int> findColumnWidth(const vector<vector<int>>& grid) const {\\n        vector<int> maxWidthForEachColumn;\\n\\n        for (int column = 0; column < grid[0].size(); ++column) {\\n\\n            int maxColumnWidth = 0;\\n            for (int row = 0; row < grid.size(); ++row) {\\n                int additionForFirstDigit = 1;\\n                int additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n                int currentColumnWidth = grid[row][column] != 0\\n                         //in this context, log10(...) is implicitly converted to int\\n                        ? (log10(abs(grid[row][column])) + additionForFirstDigit + additionForNegativeValue)\\n                        : 1;\\n\\n                maxColumnWidth = max(maxColumnWidth, currentColumnWidth);\\n            }\\n            maxWidthForEachColumn.push_back(maxColumnWidth);\\n        }\\n\\n        return maxWidthForEachColumn;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\npublic class Solution {\\n\\n    public int[] findColumnWidth(int[][] grid) {\\n        int[] maxWidthForEachColumn = new int[grid[0].length];\\n\\n        for (int column = 0; column < grid[0].length; ++column) {\\n\\n            int maxColumnWidth = 0;\\n            for (int row = 0; row < grid.length; ++row) {\\n                int additionForFirstDigit = 1;\\n                int additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n                int currentColumnWidth = grid[row][column] != 0\\n                        ? ((int) Math.log10(Math.abs(grid[row][column])) + additionForFirstDigit + additionForNegativeValue)\\n                        : 1;\\n\\n                maxColumnWidth = Math.max(maxColumnWidth, currentColumnWidth);\\n            }\\n            maxWidthForEachColumn[column] = maxColumnWidth;\\n        }\\n\\n        return maxWidthForEachColumn;\\n    }\\n}\\n```\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number[]}\\n */\\nvar findColumnWidth = function (grid) {\\n    const maxWidthForEachColumn = new Array(grid[0].length);\\n\\n    for (let column = 0; column < grid[0].length; ++column) {\\n\\n        let maxColumnWidth = 0;\\n        for (let row = 0; row < grid.length; ++row) {\\n            const additionForFirstDigit = 1;\\n            const additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n            const currentColumnWidth = grid[row][column] !== 0\\n                    ? (Math.floor(Math.log10(Math.abs(grid[row][column]))) + additionForFirstDigit + additionForNegativeValue)\\n                    : 1;\\n\\n            maxColumnWidth = Math.max(maxColumnWidth, currentColumnWidth);\\n        }\\n        maxWidthForEachColumn[column] = maxColumnWidth;\\n    }\\n\\n    return maxWidthForEachColumn;\\n};\\n```\n```\\n#include <cmath>\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nclass Solution {\\n    \\npublic:\\n    vector<int> findColumnWidth(const vector<vector<int>>& grid) const {\\n        vector<int> maxWidthForEachColumn;\\n\\n        for (int column = 0; column < grid[0].size(); ++column) {\\n\\n            int maxColumnWidth = 0;\\n            for (int row = 0; row < grid.size(); ++row) {\\n                int additionForFirstDigit = 1;\\n                int additionForNegativeValue = grid[row][column] < 0 ? 1 : 0;\\n\\n                int currentColumnWidth = grid[row][column] != 0\\n                         //in this context, log10(...) is implicitly converted to int\\n                        ? (log10(abs(grid[row][column])) + additionForFirstDigit + additionForNegativeValue)\\n                        : 1;\\n\\n                maxColumnWidth = max(maxColumnWidth, currentColumnWidth);\\n            }\\n            maxWidthForEachColumn.push_back(maxColumnWidth);\\n        }\\n\\n        return maxWidthForEachColumn;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3443640,
                "title": "python-3-solutions",
                "content": "# **1. GET THE LENGTH OF A NUMBER WITHOUT CONVERTING IT TO STRING**\\n\\n```\\nclass Solution:\\n    # Helper method to get the length of a number\\n    def lengthOfNumber (self, n):\\n        if n == 0: return 1\\n        \\n        # Length of the number\\n        length = 0 \\n        \\n        # If n is negative, increment length by 1\\n        if n < 0: \\n            length += 1\\n            n = abs(n)\\n        \\n        while n > 0:\\n            length += 1\\n            n = n // 10\\n            \\n        return length\\n\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = self.lengthOfNumber(grid[row][col])\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```\\n\\n# **2. GET THE LENGTH OF A NUMBER BY CONVERTING IT TO STRING**\\n\\n```\\ndef findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = len(str(grid[row][col]))\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```\\n\\n# **3. GET THE LENGTH OF A NUMBER USING MATH.LOG10**\\n\\n```\\nclass Solution:\\n    \\n    # Helper method to get the length of a number\\n    def lengthOfNumber (self, n):\\n        # If it is a zero\\n        if n == 0: return 1\\n        \\n        # If it is a positive number\\n        elif n > 0: return int(math.log10(n))+1\\n        \\n        # If it is a negative number (add an extra 1)\\n        return int(math.log10(-n))+2\\n\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = self.lengthOfNumber(grid[row][col])\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    # Helper method to get the length of a number\\n    def lengthOfNumber (self, n):\\n        if n == 0: return 1\\n        \\n        # Length of the number\\n        length = 0 \\n        \\n        # If n is negative, increment length by 1\\n        if n < 0: \\n            length += 1\\n            n = abs(n)\\n        \\n        while n > 0:\\n            length += 1\\n            n = n // 10\\n            \\n        return length\\n\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = self.lengthOfNumber(grid[row][col])\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```\n```\\ndef findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = len(str(grid[row][col]))\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```\n```\\nclass Solution:\\n    \\n    # Helper method to get the length of a number\\n    def lengthOfNumber (self, n):\\n        # If it is a zero\\n        if n == 0: return 1\\n        \\n        # If it is a positive number\\n        elif n > 0: return int(math.log10(n))+1\\n        \\n        # If it is a negative number (add an extra 1)\\n        return int(math.log10(-n))+2\\n\\n    def findColumnWidth(self, grid: List[List[int]]) -> List[int]:\\n        # Rows\\n        rows = len(grid)\\n        \\n        # Columns\\n        cols = len(grid[0])\\n        \\n        # Output list to return\\n        output = []\\n        \\n        # Go through each column\\n        for col in range(cols):\\n            maxLength = 1\\n            \\n            for row in range(rows):\\n                # Current number\\'s length\\n                currentLength = self.lengthOfNumber(grid[row][col])\\n                \\n                # Update the max length if required\\n                maxLength = max(maxLength, currentLength)\\n            \\n            # Finally, push the maximum length of this column in the output list\\n            output.append(maxLength)\\n        \\n        return output\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443474,
                "title": "easy-c-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int countDigits(int n)\\n    {\\n        if(n==0) return 1;\\n        int cnt=0;\\n        bool neg=n<0;\\n        while(n)\\n        {\\n            n/=10;\\n            cnt++;\\n        }\\n        if(neg) cnt++;\\n        return cnt;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) \\n    {\\n        int rows=grid.size(), cols=grid[0].size();\\n        vector<int> ans(cols,0);\\n        for(int c=0; c<cols; c++)\\n        {\\n            int mx=0;\\n            for(int r=0; r<rows; r++)\\n            {\\n                mx=max(mx,countDigits(grid[r][c]));\\n            }\\n            ans[c]=mx;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int countDigits(int n)\\n    {\\n        if(n==0) return 1;\\n        int cnt=0;\\n        bool neg=n<0;\\n        while(n)\\n        {\\n            n/=10;\\n            cnt++;\\n        }\\n        if(neg) cnt++;\\n        return cnt;\\n    }\\n    vector<int> findColumnWidth(vector<vector<int>>& grid) \\n    {\\n        int rows=grid.size(), cols=grid[0].size();\\n        vector<int> ans(cols,0);\\n        for(int c=0; c<cols; c++)\\n        {\\n            int mx=0;\\n            for(int r=0; r<rows; r++)\\n            {\\n                mx=max(mx,countDigits(grid[r][c]));\\n            }\\n            ans[c]=mx;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442842,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        #m=0\\n        ls=[0]*len(grid[0])\\n        for item in grid:\\n            for i,j in enumerate(item):\\n                ls[i]=max(len(str(j)),ls[i])\\n        return ls\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findColumnWidth(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: List[int]\\n        \"\"\"\\n        #m=0\\n        ls=[0]*len(grid[0])\\n        for item in grid:\\n            for i,j in enumerate(item):\\n                ls[i]=max(len(str(j)),ls[i])\\n        return ls\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442065,
                "title": "c-19-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int numLenght(int num) {\\n        int lenght = num <= 0 ? 1 : 0;\\n        while(num) { ++lenght; num/=10; }\\n        return lenght;\\n    }\\n\\n    vector<int> findColumnWidth(const vector<vector<int>>& grid) {\\n        vector<int> result(grid[0].size());\\n        for(const auto& row : grid)\\n            for(size_t i = 0; i < row.size(); ++i)\\n                result[i] = max(result[i], numLenght(row[i]));\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int numLenght(int num) {\\n        int lenght = num <= 0 ? 1 : 0;\\n        while(num) { ++lenght; num/=10; }\\n        return lenght;\\n    }\\n\\n    vector<int> findColumnWidth(const vector<vector<int>>& grid) {\\n        vector<int> result(grid[0].size());\\n        for(const auto& row : grid)\\n            for(size_t i = 0; i < row.size(); ++i)\\n                result[i] = max(result[i], numLenght(row[i]));\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1864221,
                "content": [
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "People solving all the questions in Just 7 minute and me only after solving 2/4 , continuous watching  my rank that how much more decreases...\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "pahwagautam786",
                        "content": "same here \\uD83E\\uDD23"
                    },
                    {
                        "username": "the_timmer",
                        "content": "For Python users, it\\'s helpful that the Leetcode implementation of Python allows us to import numpy."
                    },
                    {
                        "username": "Msey",
                        "content": "There are two types of people: the ones who uses val.ToString() and who uses log10"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "Iterate the columns -> convert them to string -> find the max length of element in that particular column.\n\nPython 1 line code - https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/solutions/3420889/python-clean-1-liner/"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@ma5termiind](/ma5termiind) Let me know if u find a faster approach !"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@cybersimar](/cybersimar) You will have to traverse the whole matrix once which makes the time complexity O(mn) , but since the constraint is low this time complexity shouldn't be a problem"
                    },
                    {
                        "username": "cybersimar",
                        "content": "But, the problem to this approach in c++ is that it is running in O(n^2) because of which it is taking too much time. "
                    },
                    {
                        "username": "c4tdog",
                        "content": "if n > 0 it\\'s length is Math.log10(n) + 1 ;)"
                    }
                ]
            },
            {
                "id": 2076318,
                "content": [
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "People solving all the questions in Just 7 minute and me only after solving 2/4 , continuous watching  my rank that how much more decreases...\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "pahwagautam786",
                        "content": "same here \\uD83E\\uDD23"
                    },
                    {
                        "username": "the_timmer",
                        "content": "For Python users, it\\'s helpful that the Leetcode implementation of Python allows us to import numpy."
                    },
                    {
                        "username": "Msey",
                        "content": "There are two types of people: the ones who uses val.ToString() and who uses log10"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "Iterate the columns -> convert them to string -> find the max length of element in that particular column.\n\nPython 1 line code - https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/solutions/3420889/python-clean-1-liner/"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@ma5termiind](/ma5termiind) Let me know if u find a faster approach !"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@cybersimar](/cybersimar) You will have to traverse the whole matrix once which makes the time complexity O(mn) , but since the constraint is low this time complexity shouldn't be a problem"
                    },
                    {
                        "username": "cybersimar",
                        "content": "But, the problem to this approach in c++ is that it is running in O(n^2) because of which it is taking too much time. "
                    },
                    {
                        "username": "c4tdog",
                        "content": "if n > 0 it\\'s length is Math.log10(n) + 1 ;)"
                    }
                ]
            },
            {
                "id": 1864452,
                "content": [
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "People solving all the questions in Just 7 minute and me only after solving 2/4 , continuous watching  my rank that how much more decreases...\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "pahwagautam786",
                        "content": "same here \\uD83E\\uDD23"
                    },
                    {
                        "username": "the_timmer",
                        "content": "For Python users, it\\'s helpful that the Leetcode implementation of Python allows us to import numpy."
                    },
                    {
                        "username": "Msey",
                        "content": "There are two types of people: the ones who uses val.ToString() and who uses log10"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "Iterate the columns -> convert them to string -> find the max length of element in that particular column.\n\nPython 1 line code - https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/solutions/3420889/python-clean-1-liner/"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@ma5termiind](/ma5termiind) Let me know if u find a faster approach !"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@cybersimar](/cybersimar) You will have to traverse the whole matrix once which makes the time complexity O(mn) , but since the constraint is low this time complexity shouldn't be a problem"
                    },
                    {
                        "username": "cybersimar",
                        "content": "But, the problem to this approach in c++ is that it is running in O(n^2) because of which it is taking too much time. "
                    },
                    {
                        "username": "c4tdog",
                        "content": "if n > 0 it\\'s length is Math.log10(n) + 1 ;)"
                    }
                ]
            },
            {
                "id": 1864426,
                "content": [
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "People solving all the questions in Just 7 minute and me only after solving 2/4 , continuous watching  my rank that how much more decreases...\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "pahwagautam786",
                        "content": "same here \\uD83E\\uDD23"
                    },
                    {
                        "username": "the_timmer",
                        "content": "For Python users, it\\'s helpful that the Leetcode implementation of Python allows us to import numpy."
                    },
                    {
                        "username": "Msey",
                        "content": "There are two types of people: the ones who uses val.ToString() and who uses log10"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "Iterate the columns -> convert them to string -> find the max length of element in that particular column.\n\nPython 1 line code - https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/solutions/3420889/python-clean-1-liner/"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@ma5termiind](/ma5termiind) Let me know if u find a faster approach !"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@cybersimar](/cybersimar) You will have to traverse the whole matrix once which makes the time complexity O(mn) , but since the constraint is low this time complexity shouldn't be a problem"
                    },
                    {
                        "username": "cybersimar",
                        "content": "But, the problem to this approach in c++ is that it is running in O(n^2) because of which it is taking too much time. "
                    },
                    {
                        "username": "c4tdog",
                        "content": "if n > 0 it\\'s length is Math.log10(n) + 1 ;)"
                    }
                ]
            },
            {
                "id": 1864282,
                "content": [
                    {
                        "username": "Lee_fan_Ak_The_Boss",
                        "content": "People solving all the questions in Just 7 minute and me only after solving 2/4 , continuous watching  my rank that how much more decreases...\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "pahwagautam786",
                        "content": "same here \\uD83E\\uDD23"
                    },
                    {
                        "username": "the_timmer",
                        "content": "For Python users, it\\'s helpful that the Leetcode implementation of Python allows us to import numpy."
                    },
                    {
                        "username": "Msey",
                        "content": "There are two types of people: the ones who uses val.ToString() and who uses log10"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "Iterate the columns -> convert them to string -> find the max length of element in that particular column.\n\nPython 1 line code - https://leetcode.com/problems/find-the-width-of-columns-of-a-grid/solutions/3420889/python-clean-1-liner/"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@ma5termiind](/ma5termiind) Let me know if u find a faster approach !"
                    },
                    {
                        "username": "ma5termiind",
                        "content": "[@cybersimar](/cybersimar) You will have to traverse the whole matrix once which makes the time complexity O(mn) , but since the constraint is low this time complexity shouldn't be a problem"
                    },
                    {
                        "username": "cybersimar",
                        "content": "But, the problem to this approach in c++ is that it is running in O(n^2) because of which it is taking too much time. "
                    },
                    {
                        "username": "c4tdog",
                        "content": "if n > 0 it\\'s length is Math.log10(n) + 1 ;)"
                    }
                ]
            }
        ]
    }
]