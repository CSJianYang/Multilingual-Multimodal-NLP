[
    {
        "title": "Vowels of All Substrings",
        "question_content": "Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.\nA substring is a contiguous (non-empty) sequence of characters within a string.\nNote: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.\n&nbsp;\nExample 1:\n\nInput: word = \"aba\"\nOutput: 6\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. \n\nExample 2:\n\nInput: word = \"abc\"\nOutput: 3\nExplanation: \nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.\n\nExample 3:\n\nInput: word = \"ltcd\"\nOutput: 0\nExplanation: There are no vowels in any substring of \"ltcd\".\n\n&nbsp;\nConstraints:\n\n\t1 <= word.length <= 105\n\tword consists of lowercase English letters.",
        "solutions": [
            {
                "id": 1563780,
                "title": "java-c-python-easy-and-concise-o-n",
                "content": "# **Explanation**\\nFor each vowels `s[i]`,\\nit could be in the substring starting at `s[x]` and ending at `s[y]`,\\nwhere `0 <= x <= i` and `i <= y < n`,\\nthat is `(i + 1)` choices for `x`  and `(n - i)` choices for `y`.\\n\\nSo there are `(i + 1) * (n - i)` substrings containing `s[i]`.\\n<br>\\n\\n\\n# **Complexity**\\nTime `O(n)`\\nSpace `O(1)`\\nCand use a const `\"aeiou\"` to save the space cost.\\n<br>\\n\\n**Java**\\n```java\\n    public long countVowels(String s) {\\n        long res = 0, n = s.length();\\n        for (int i = 0; i < n; ++i)\\n            if (\"aeiou\".indexOf(s.charAt(i)) >= 0)\\n                res += (i + 1) * (n - i);\\n        return res;\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    long long countVowels(string s) {\\n        long res = 0, n = s.size();\\n        for (int i = 0; i < n; ++i)\\n            if (string(\"aeiou\").find(s[i]) != string::npos)\\n                res += (i + 1) * (n - i);\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def countVowels(self, s):\\n        return sum((i + 1) * (len(s) - i) for i, c in enumerate(s) if c in \\'aeiou\\')\\n```\\n",
                "solutionTags": [],
                "code": "```java\\n    public long countVowels(String s) {\\n        long res = 0, n = s.length();\\n        for (int i = 0; i < n; ++i)\\n            if (\"aeiou\".indexOf(s.charAt(i)) >= 0)\\n                res += (i + 1) * (n - i);\\n        return res;\\n    }\\n```\n```cpp\\n    long long countVowels(string s) {\\n        long res = 0, n = s.size();\\n        for (int i = 0; i < n; ++i)\\n            if (string(\"aeiou\").find(s[i]) != string::npos)\\n                res += (i + 1) * (n - i);\\n        return res;\\n    }\\n```\n```py\\n    def countVowels(self, s):\\n        return sum((i + 1) * (len(s) - i) for i, c in enumerate(s) if c in \\'aeiou\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1564075,
                "title": "detailed-explanation-of-why-len-pos-pos-1-works",
                "content": "<br>\\nLet us understand this problem with an example\\n<br>let word = \"abei\"\\n\\n**All possible substrings:**\\n```\\na        b       e      i\\nab       be      ei\\nabe      bei\\nabei\\n```\\n\\nSo for counting occurences of vowels in each substring, we can count the occurence of each vowel in each substring\\nIn this example, count of vowels in substrings are\\n```\\na - 4 times\\ne - 6 times\\ni - 4 times\\n```\\nAnd you can observe that occurence of each vowel depends on it\\'s position like below:\\n* a is at position 0 so it can be present only in the substrings starting at 0\\n* e is in the middle so it can be present in the substrings starting at it\\'s position, substrings ending at it\\'s position, and substrings containing it in middle\\n* i is at last so it can be present only in the substrings ending at that position\\n<br>\\n\\n**Did you see any pattern ?** Yes !\\n<br>A character at position pos can be present in substrings starting at i and substrings ending at j, <br>where **0 <= i <= pos** (pos + 1 choices) and **pos <= j <= len** (len - pos choices) <br>so there are total **(len - pos) * (pos + 1)** substrings that contain the character word[pos]\\n\\n(You can see from above example that e is at position 2 and it\\'s present in substrings \"abei\", \"bei\", \"ei\", \"abe\", \"be\", \"e\"<br> (0 <= start <= pos and pos <= end <= len) and same will be true for each vowel.\\n<br>\\n**From this observation we can generalise the occurence of each vowel in the string as**\\n```\\nhere len(abei) = 4\\na,  pos = 0, count = (4 - 0) * (0 + 1) = 4\\ne,  pos = 2, count = (4 - 2) * (2 + 1) = 6\\ni,  pos = 3, count = (4 - 3) * (3 + 1) = 4\\n```\\n**So the generalised formula will be**\\n```\\ncount = (len - pos) * (pos + 1)\\n```\\nand we can keep summing the count of each vowel (don\\'t forget to convert to long)\\n<br>\\n\\n\\n**C++ code:**\\n\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch) {\\n        return ch == \\'a\\' or ch == \\'e\\' or ch == \\'i\\' or ch == \\'o\\' or ch == \\'u\\';\\n    }\\n    \\n    long long countVowels(string word) {\\n        long long count = 0;\\n        int len = word.size();\\n        \\n        for(int pos = 0; pos < len; pos++) {\\n            if(isVowel(word[pos])) {\\n                count += (long)(len - pos) * (long)(pos + 1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```\\n\\n<br>\\n\\n**Python Code:**\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count = 0\\n        sz = len(word)\\n        \\n        for pos in range(sz):\\n            if word[pos] in \\'aeiou\\':\\n                count += (sz - pos) * (pos + 1)\\n        \\n        return count\\n```\\n\\n<br>\\n\\n**Java Code:**\\n\\n```\\nclass Solution {\\n    \\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    public long countVowels(String word) {\\n        long count = 0;\\n        int len = word.length();\\n        \\n        for(int pos = 0; pos < len; pos++) {\\n            if(isVowel(word.charAt(pos))) {\\n                count += (long)(len - pos) * (long)(pos + 1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```\\n\\n<br>\\nDo upvote if you liked the explanation :)\\n\\n<br>",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "C"
                ],
                "code": "```\\na        b       e      i\\nab       be      ei\\nabe      bei\\nabei\\n```\n```\\na - 4 times\\ne - 6 times\\ni - 4 times\\n```\n```\\nhere len(abei) = 4\\na,  pos = 0, count = (4 - 0) * (0 + 1) = 4\\ne,  pos = 2, count = (4 - 2) * (2 + 1) = 6\\ni,  pos = 3, count = (4 - 3) * (3 + 1) = 4\\n```\n```\\ncount = (len - pos) * (pos + 1)\\n```\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch) {\\n        return ch == \\'a\\' or ch == \\'e\\' or ch == \\'i\\' or ch == \\'o\\' or ch == \\'u\\';\\n    }\\n    \\n    long long countVowels(string word) {\\n        long long count = 0;\\n        int len = word.size();\\n        \\n        for(int pos = 0; pos < len; pos++) {\\n            if(isVowel(word[pos])) {\\n                count += (long)(len - pos) * (long)(pos + 1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count = 0\\n        sz = len(word)\\n        \\n        for pos in range(sz):\\n            if word[pos] in \\'aeiou\\':\\n                count += (sz - pos) * (pos + 1)\\n        \\n        return count\\n```\n```\\nclass Solution {\\n    \\n    boolean isVowel(char ch) {\\n        return ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\';\\n    }\\n    \\n    public long countVowels(String word) {\\n        long count = 0;\\n        int len = word.length();\\n        \\n        for(int pos = 0; pos < len; pos++) {\\n            if(isVowel(word.charAt(pos))) {\\n                count += (long)(len - pos) * (long)(pos + 1);\\n            }\\n        }\\n        \\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563701,
                "title": "i-1-sz-i",
                "content": "A vowel at position `i` appears in `(i + 1) * (sz - i)` substrings. \\n\\nSo, we just sum and return the appearances for all vowels.\\n\\n**Python 3**\\n```python\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        return sum((i + 1) * (len(word) - i) for i, ch in enumerate(word) if ch in \\'aeiou\\')\\n```\\n\\n**C++**\\n```cpp\\nbool v[26] = {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};\\nlong long countVowels(string w) {\\n    long long res = 0, sz = w.size();\\n    for (int i = 0; i < w.size(); ++i)\\n        res += v[w[i] - \\'a\\'] * (i + 1) * (sz - i);\\n    return res;\\n}\\n```\\n**Java**\\n```java\\npublic long countVowels(String word) {\\n    long res = 0, sz = word.length();\\n    for (int i = 0; i < sz; ++i)\\n        if (\"aeiou\".indexOf(word.charAt(i)) != -1)\\n            res += (i + 1) * (sz - i);\\n    return res;        \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C"
                ],
                "code": "```python\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        return sum((i + 1) * (len(word) - i) for i, ch in enumerate(word) if ch in \\'aeiou\\')\\n```\n```cpp\\nbool v[26] = {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};\\nlong long countVowels(string w) {\\n    long long res = 0, sz = w.size();\\n    for (int i = 0; i < w.size(); ++i)\\n        res += v[w[i] - \\'a\\'] * (i + 1) * (sz - i);\\n    return res;\\n}\\n```\n```java\\npublic long countVowels(String word) {\\n    long res = 0, sz = word.length();\\n    for (int i = 0; i < sz; ++i)\\n        if (\"aeiou\".indexOf(word.charAt(i)) != -1)\\n            res += (i + 1) * (sz - i);\\n    return res;        \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563845,
                "title": "simple-java-o-n",
                "content": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563751,
                "title": "c-o-n-brute-to-optimal-best-explanation",
                "content": "The **Brute force** approach to this problem is very simple. Just go through all the substring of the string and find the number of vowels in all those substrings and add them.\\n\\nBut, it would take O(n^2) to find all the subtrings which will result in **TLE.**\\n\\nThe **better solution** would be to check -  the number of times every character would occur in any substring.And, if we observe carefully, this is what we want - i.e, the sum of vowels in every substring. So, why not find the occurance of evry character in each substring. This will eventually give us the same result. **Right?**\\n\\nFor example -> the 0th index character would occur in substring starting from 0 and ending at i. Where, i =(0 to n).\\n\\n\\n Ex- s= \"aba\"\\n Let us say, first a as a1 and second a as a2 to avoid confusion.\\n\\n a1 -> occurs in substring \"a\", \"ab\", \"aba\" . Count 3\\n b -> occurs in substring \"ab\",\"b\", \"ba\",\"aba\".  Count 4\\n a2->  occurs in substring \"aba\", \"ba\", \"a\".  Count 3\\n \\n **Now, the question is How to get that count?**\\n And ths answer for that is - \\n For each character,  we will store no. of substrings starting with that character + the number of substrings formed by the previous characters containing this character \\u2013 the number of substrings formed by the previous characters only.\\nAnd this will be **dp[i-1] + (n-i) -i**\\n\\n Now, when we got this value, that is number of times each character will occur in any subtring. Then , we will just check if the character is a vowel or not. If vowel, then add the count of number of times that character will occur in any substring.We will be using an array/vector to store the count.\\n\\n\\n\\n**Time Complexity :- O(n)**\\n\\nBelow is a C++ solution for the same.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch){\\n        if(ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n=word.size();\\n        long long int ans=0;\\n        vector<long long int> dp;\\n \\n        for (int i = 0; i < n; i++) {\\n            if (i == 0)\\n                dp.push_back(n);\\n            else\\n                dp.push_back((n - i) + dp[i - 1] - i);\\n        }\\n        for (int i = 0; i < n; i++)\\n            if(isVowel(word[i]))\\n                ans += dp[i];\\n        return ans;\\n    }\\n    \\n};\\n\\n```\\nHope it helps!\\nPlease upvote if you like.\\n\\nThank you!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch){\\n        if(ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n=word.size();\\n        long long int ans=0;\\n        vector<long long int> dp;\\n \\n        for (int i = 0; i < n; i++) {\\n            if (i == 0)\\n                dp.push_back(n);\\n            else\\n                dp.push_back((n - i) + dp[i - 1] - i);\\n        }\\n        for (int i = 0; i < n; i++)\\n            if(isVowel(word[i]))\\n                ans += dp[i];\\n        return ans;\\n    }\\n    \\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563756,
                "title": "c-o-n-time",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n## Solution 1.\\n\\nIf `s[i]` is vowel, there are `(i + 1) * (N - i)` substrings that contain `s[i]` where `i + 1` and `N - i` are the number of possible left and right end points of the substrings, respectively.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-266/problems/vowels-of-all-substrings/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    };\\npublic:\\n    long long countVowels(string s) {\\n        long long N = s.size(), ans = 0;\\n        for (long long i = 0; i < N; ++i) {\\n            if (!isVowel(s[i])) continue;\\n            ans += (i + 1) * (N - i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-266/problems/vowels-of-all-substrings/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    };\\npublic:\\n    long long countVowels(string s) {\\n        long long N = s.size(), ans = 0;\\n        for (long long i = 0; i < N; ++i) {\\n            if (!isVowel(s[i])) continue;\\n            ans += (i + 1) * (N - i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1733711,
                "title": "c-logic-explained-dp",
                "content": "***Intution:***\\n\\nThe main idea is how the current substring will behave when a new character will be added.\\nSuppose we have **S = {a,b,c}**  and **u** is added so total vowels in S becomes 2, if a consonant is added No change is reflected.\\n\\n***Building the solution:***\\n\\n![image](https://assets.leetcode.com/users/images/35b2b593-534b-4503-963b-b3b7560e576a_1643618336.8590808.png)\\n\\n***Code***\\n\\n```\\n long long countVowels(string s) {\\n        int n = s.size();\\n        long long sum=0, dp[n];\\n\\n        if(s[0]==\\'a\\'||s[0]==\\'e\\'||s[0]==\\'i\\'||s[0]==\\'o\\'||s[0]==\\'u\\') \\n\\t\\t\\tdp[0] =  1;\\n        \\n        else\\n\\t\\t\\tdp[0] = 0;\\n        \\n        sum += dp[0];\\n        \\n        for(int i=1;i<n;i++){\\n  \\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\') \\n                dp[i] = dp[i-1]+i+1;\\n            \\n            else \\n                dp[i] = dp[i-1];\\n            \\n            sum += dp[i];\\n        }\\n        \\n        return sum; \\n    }\\n```\\n**Questions are welcome**\\n\\nPS:  Please forgive me for the handwriting.",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\n long long countVowels(string s) {\\n        int n = s.size();\\n        long long sum=0, dp[n];\\n\\n        if(s[0]==\\'a\\'||s[0]==\\'e\\'||s[0]==\\'i\\'||s[0]==\\'o\\'||s[0]==\\'u\\') \\n\\t\\t\\tdp[0] =  1;\\n        \\n        else\\n\\t\\t\\tdp[0] = 0;\\n        \\n        sum += dp[0];\\n        \\n        for(int i=1;i<n;i++){\\n  \\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\') \\n                dp[i] = dp[i-1]+i+1;\\n            \\n            else \\n                dp[i] = dp[i-1];\\n            \\n            sum += dp[i];\\n        }\\n        \\n        return sum; \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1589619,
                "title": "intuition-explained-calculate-contribution-c-clean-code",
                "content": "**Intuition :** \\n\\n* Idea is to find the contribution of each vowel in substrings which it is part of.\\n* Thus, either it can part of substrings on its left, or on its right.\\n\\t* i.e substring ending at current character , or starting at current character.\\n\\n\\t* We can calculate number of substrings between [i..j] = `(j - i + 1)`\\n\\n* Thus, contibution = (no. of substrings on its left) * (no. of substrings on its right)\\n\\t* Formula : **`contribution = (i+1) * (n-i)`** , here `i` is index of current vowel character\\n* Finally, sum of contibution of each vowel will give us the answer. \\n* Lets do a dry run on a TC : \\n\\t\\t\\n\\t\\tEx: word = \"a b a\"\\n\\n\\t\\t0. word[0] = a, which is a vowel \\n\\t\\t\\t=> So, substrings in which word[0] is part of = {\\'a\\', \\'a\\'b, \\'a\\'ba}\\n\\t\\t\\t=> contibution(word[0]) = (0+1) * (3 - 0) = 3 \\n\\n\\t\\t1. word[1] = b, which is not a vowel\\n\\t\\t\\n\\t\\t2. word[2] = a, which is a vowel\\n\\t\\t\\t=> So, substrings in which word[2] is part of : {ab\\'a\\', b\\'a\\', \\'a\\'}\\n\\t\\t\\t=> contibution(word[2]) = (2 + 1) * (3 - 2) = 3\\n\\n\\t\\tTherefore, answer = contibution(word[0]) + contibution(word[1]) + contibution(word[2]) = 3 + 0 + 3 = 6\\n\\n# Code: \\n\\n```\\nclass Solution {\\npublic:\\n    \\n    bool isVowel(char c) {\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n    \\n    long long countVowels(string word) {\\n        \\n        int n = word.size();\\n        long long count = 0;\\n        \\n        for(int i=0; i<n; i++) {\\n            if(isVowel(word[i]))\\n                count += (long long)(i+1) * (long long)(n-i);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```\\n\\n**Complexity :** \\n\\n* Time : `O(N)` , N : size of word\\n* Space : `O(1)`\\n\\n***If you find this helpful, do give it a like :)***",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    bool isVowel(char c) {\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n    \\n    long long countVowels(string word) {\\n        \\n        int n = word.size();\\n        long long count = 0;\\n        \\n        for(int i=0; i<n; i++) {\\n            if(isVowel(word[i]))\\n                count += (long long)(i+1) * (long long)(n-i);\\n        }\\n        \\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3067151,
                "title": "c-easily-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this problem by finding all substrings of the given string and count total no of vowels. But it will take O(2^n) complexity so it will not work.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInstead of finding all substrings and counting vowels we can traverse each character and if it is vowel then we can find the no of substrings in which this character will be present. And this is easy. As an example, let the string is \\'fbacd\\' and we have to find the no of substrings in which \\'a\\' will be present. \\n    See carefully the substrings are\\n ss = {\\'a\\', \\'ac\\', \\'acd\\', \\n\\'ba\\', \\'bac\\', \\'bacd\\',\\n\\'fba\\', \\'fbac\\', \\'fbacd\\' }\\nAt first we will find how many character present at right side from the current character including that character. here it is 3 {a, c, d}\\nand how many are in the left side including that character is 3 {f, b, a}\\nSo the total substrings are 3 * 3 = 9 which are present in ss.\\nSimilarly in \"rabbit\", \\'a\\' present in 2 * 5=10 substrings.\\nSo for a given string we will traverse each character and if it is vowel then we will calculate the total no of substrings by above process and add it with result.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTo traverse each character it will take O(n) time and to find the no of substrings it will take O(1) time. So total time complexity is O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nHere We are not using any extra space. So Space complesity is O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        long long res = 0;\\n        for(int i=0; i<n; i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\')\\n            {\\n                res += (long long)(n-i)*(long long)(i+1);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        long long res = 0;\\n        for(int i=0; i<n; i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\')\\n            {\\n                res += (long long)(n-i)*(long long)(i+1);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1564031,
                "title": "fastest-python-solution-108ms",
                "content": "# Fastest Python Solution | 108ms\\n**Runtime: 108 ms, faster than 100.00% of Python3 online submissions for Vowels of All Substrings.\\nMemory Usage: 14.8 MB, less than 100.00% of Python3 online submissions for Vowels of All Substrings.**\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        c, l = 0, len(word)\\n        d = {\\'a\\':1, \\'e\\':1,\\'i\\':1,\\'o\\':1,\\'u\\':1}\\n        \\n        for i in range(l):\\n                if word[i] in d:\\n                    c += (l-i)*(i+1)\\n        return c\\n```\\n![image](https://assets.leetcode.com/users/images/697a073a-9322-4b45-a737-10da70505d33_1636264423.3988705.png)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        c, l = 0, len(word)\\n        d = {\\'a\\':1, \\'e\\':1,\\'i\\':1,\\'o\\':1,\\'u\\':1}\\n        \\n        for i in range(l):\\n                if word[i] in d:\\n                    c += (l-i)*(i+1)\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563789,
                "title": "easy-to-understand-python-dp",
                "content": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        dp = []\\n        for i, el in enumerate(word):\\n            if el in \\'aeiou\\':\\n                running_sum = i + 1 + (dp[-1] if dp else 0)\\n                dp.append(running_sum)\\n            else:\\n                dp.append(dp[-1] if dp else 0)\\n        return sum(dp)\\n```",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        dp = []\\n        for i, el in enumerate(word):\\n            if el in \\'aeiou\\':\\n                running_sum = i + 1 + (dp[-1] if dp else 0)\\n                dp.append(running_sum)\\n            else:\\n                dp.append(dp[-1] if dp else 0)\\n        return sum(dp)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563775,
                "title": "javascript-dynamic-programming",
                "content": "```javascript\\nvar countVowels = function(word) {\\n    const vowels = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\n    let total = 0;\\n    let count = 0;\\n    for (let i = 0; i < word.length; i++) {\\n        if (vowels.has(word[i])) {\\n            count += i + 1;\\n        }\\n        total += count;\\n    }\\n    return total;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```javascript\\nvar countVowels = function(word) {\\n    const vowels = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\n    let total = 0;\\n    let count = 0;\\n    for (let i = 0; i < word.length; i++) {\\n        if (vowels.has(word[i])) {\\n            count += i + 1;\\n        }\\n        total += count;\\n    }\\n    return total;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3647503,
                "title": "simple-math-c-beats-95",
                "content": "# if it Helps You, Please Upvote Me..!\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nApproach very is simple,Just Count the number of the substring in which a particular Vowel Appear. \\n\\n**Formula: if Vowel Appera at ith position(0 based)**\\n\\n**number of substrings = i+(n-i-1)+(i(n-i-1))+1**\\n\\n\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long n = word.size(),ans = 0;\\n        vector<int> pos;\\n        \\n        for(int i = 0;i<word.size();i++)\\n        {\\n          if(word[i] ==\\'a\\' ||word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'e\\'|| word[i]==\\'u\\')\\n          {\\n            long long left = i,right = n-i-1;\\n            ans+=(left+right+left*right+1);\\n          }  \\n        }\\n        return ans;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/7bada4ae-9925-4f8a-8369-70ce1b36c5f3_1686985354.8943596.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long n = word.size(),ans = 0;\\n        vector<int> pos;\\n        \\n        for(int i = 0;i<word.size();i++)\\n        {\\n          if(word[i] ==\\'a\\' ||word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'e\\'|| word[i]==\\'u\\')\\n          {\\n            long long left = i,right = n-i-1;\\n            ans+=(left+right+left*right+1);\\n          }  \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1566929,
                "title": "maths-observational-12ms-simple-formula-observation-unique-solution-explaination",
                "content": "I simply Observe the Pattern by taking different size strings using pen and paper and Observe that the number of occurance of every character in a string follows a Simple pattern using Arithmetic Progression with (n-2) as its first element with d=-2 upto middle element then start decreasing using same progression (or you can say start from end with same initial element and d upto middle element) \\n\\n![image](https://assets.leetcode.com/users/images/0c3a40c9-bdc2-457a-925e-556f8e92adb0_1645782349.990878.png)\\n\\n\\n```\\nlong long countVowels(string word) {\\n\\t\\tios::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        int n=word.length();\\n        long long ans=0;\\n        for(int i=0;i<n;i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\'){\\n                long long j=(i)<(n-i-1)?i:(n-i-1);\\n                long long k=(j*(2*(n-2)+(j-1)*(-2))/2); //sum of AP\\n                ans+=(n+k);  \\n            }\\n        }\\n        return ans;\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\nlong long countVowels(string word) {\\n\\t\\tios::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        int n=word.length();\\n        long long ans=0;\\n        for(int i=0;i<n;i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\'){\\n                long long j=(i)<(n-i-1)?i:(n-i-1);\\n                long long k=(j*(2*(n-2)+(j-1)*(-2))/2); //sum of AP\\n                ans+=(n+k);  \\n            }\\n        }\\n        return ans;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1563905,
                "title": "explanation-c-solution",
                "content": "Lets suppose we have a string `abaace`. Lets see sum of number of vowels in each substring.\\n\\n```\\na(1)           b(0)           a(1)           a(1)          c(0)        e(1)\\nab(1)          ba(1)          aa(2)          ac(1)         ce(1)\\naba(2)         baa(2)         aac(2)         ace(2)      \\nabaa(3)        baac(2)        aace(3)\\nabaac(3)       baace(3)\\nabaace(4)\\n```\\n\\nNow, we can see whenever a new character appears suppose `b` it is contributing to 2 string `ab` and `b` (similarly e is contributing to 5 strings ). So total sum when` b` appears becomes 0+1=1 (similarly for e it becomes 4+3+3+2+1+1 = 14. It is basically your diagonal sum from left to right for each row element of 1st col). Thus we can find for each character their contribution array . It will look like \\n```\\na b a a c e\\n1 1 4 8 8 14\\n```\\nand now we can see this pattern and maintain a dp array if its non-vowel character its contribution is equal to dp[ i-1] else it `dp[i-1] +i+1`\\n\\n```\\nlong long countVowels(string word) {\\n        int n = word.length();\\n        if(n==0)\\n            return 0;\\n        vector<long long> dp(n,0);\\n        long long sum = 0;\\n        for(int i = 0;i<n;i++)\\n        {\\n         if(word[i]==\\'a\\' || word[i]==\\'e\\' ||word[i]==\\'i\\' ||word[i]==\\'o\\' || word[i]==\\'u\\' )\\n             dp[i] = i==0 ? 1 : dp[i-1]+i+1;\\n            else\\n                dp[i] = i==0? 0 : dp[i-1] ;\\n        }\\n        \\n        for(int i = 0;i<n;i++)\\n            sum += dp[i];\\n        \\n        return sum ;\\n        \\n    }\\n```\\nand then we can take the sum of whole array .",
                "solutionTags": [],
                "code": "```\\na(1)           b(0)           a(1)           a(1)          c(0)        e(1)\\nab(1)          ba(1)          aa(2)          ac(1)         ce(1)\\naba(2)         baa(2)         aac(2)         ace(2)      \\nabaa(3)        baac(2)        aace(3)\\nabaac(3)       baace(3)\\nabaace(4)\\n```\n```\\na b a a c e\\n1 1 4 8 8 14\\n```\n```\\nlong long countVowels(string word) {\\n        int n = word.length();\\n        if(n==0)\\n            return 0;\\n        vector<long long> dp(n,0);\\n        long long sum = 0;\\n        for(int i = 0;i<n;i++)\\n        {\\n         if(word[i]==\\'a\\' || word[i]==\\'e\\' ||word[i]==\\'i\\' ||word[i]==\\'o\\' || word[i]==\\'u\\' )\\n             dp[i] = i==0 ? 1 : dp[i-1]+i+1;\\n            else\\n                dp[i] = i==0? 0 : dp[i-1] ;\\n        }\\n        \\n        for(int i = 0;i<n;i++)\\n            sum += dp[i];\\n        \\n        return sum ;\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1939746,
                "title": "easy-c-solution-using-only-2-variables-linear-time-constant-space",
                "content": "* Use two variables a and b.\\n* For each index `i` , variable `a` represents the no of vowels in all the substrings ending at `(i-2)th` index and variable `b` represents the no. of vowels in all the substrings ending at `(i-1)th` index.\\n* Using `a` and `b` compute the no of vowels in all the substrings ending at `(i-1)th`**(new a)** index and  `ith` index **(new b)**. \\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long int a = 0,b = 0;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++){\\n            \\n            auto x = word[i];\\n            \\n            a = a + b;\\n            \\n            b = b + ((x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') ? (i+1) : 0);\\n            \\n        }\\n        \\n        return a + b;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long int a = 0,b = 0;\\n        int n = word.length();\\n        for(int i = 0; i < n; i++){\\n            \\n            auto x = word[i];\\n            \\n            a = a + b;\\n            \\n            b = b + ((x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') ? (i+1) : 0);\\n            \\n        }\\n        \\n        return a + b;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1726695,
                "title": "c-diagram-explanation-o-n",
                "content": "Consider example : \\n\"decab\"\\n![image](https://assets.leetcode.com/users/images/38cb0cc4-f9a8-499e-8537-7311b4c3ae98_1643385527.5234022.png)       \\n\\nHere vowels are e and a, so we rehrase the answer are total substrings in which each vowel occur.\\n\\nSo for \"e\",\\n![image](https://assets.leetcode.com/users/images/cceed213-dd2b-4693-aca9-4cf9815d990a_1643385628.7467048.png)\\n\\nleft end of substring having e has 2 options \\nRight end of substring having e has 4 options.\\nSo total substring having e can be 2*4 = 8 \\n\\nSimilarly for \"a\"\\n![image](https://assets.leetcode.com/users/images/322345df-4a50-4987-986b-614458f12f19_1643385717.9626572.png)\\n\\nThis also has total of 8\\n\\nSo final answer is 8+8 = 16\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int cnt=0;\\n        long long int n = word.size();\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n                cnt+=((i+1)*(n-i));\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int cnt=0;\\n        long long int n = word.size();\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n                cnt+=((i+1)*(n-i));\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563762,
                "title": "best-code-so-far-one-pass-solution",
                "content": "`class Solution {\\n\\n    public long countVowels(String word) {\\n\\n        int len=word.length();\\n        long count=0;\\n        for(int i=0;i<len;i++){\\n            if(check(word.charAt(i))){\\n                \\n                count+=((long)(len-i))*((long)(i+1));\\n            }\\n        }\\n        return count;\\n    }\\n     boolean check(char ch){\\n        return ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\';\\n    }\\n}`\\nHit Like if this solution helps you",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public long countVowels(String word) {\\n\\n        int len=word.length();\\n        long count=0;\\n        for(int i=0;i<len;i++){\\n            if(check(word.charAt(i))){\\n                \\n                count+=((long)(len-i))*((long)(i+1));\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1563721,
                "title": "c-super-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long answer=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\')\\n                answer+=(word.size()-i)*(i+1);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long answer=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\')\\n                answer+=(word.size()-i)*(i+1);\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3832828,
                "title": "beats-100-runtime-and-memory-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long count=0;\\n        int len=word.length();\\n        for(int i=len-1;i>=0;i--){\\n            if(vowelschck(word.charAt(i))){\\n                count+=(long)(i+1)*(len-i);\\n            }\\n        }\\n        \\n        \\n        return count;\\n\\n    }\\n\\n    boolean vowelschck(char c){\\n        \\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||\\n        c==\\'o\\' || c==\\'u\\'){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long count=0;\\n        int len=word.length();\\n        for(int i=len-1;i>=0;i--){\\n            if(vowelschck(word.charAt(i))){\\n                count+=(long)(i+1)*(len-i);\\n            }\\n        }\\n        \\n        \\n        return count;\\n\\n    }\\n\\n    boolean vowelschck(char c){\\n        \\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' ||\\n        c==\\'o\\' || c==\\'u\\'){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3125961,
                "title": "simple-approach-o-n-calculating-no-of-vowels-in-all-substrings-using-prefix-sum-in-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nfirst we store no of vowels in string  till index i in v[i].\\nthen calculating current ans =prev ans + no of vowels in new substrings generated by adding w[i] char using i*v[i]-pre_sum\\nif this char is also vowel then add into ans and reduce pre_sum by 1 \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string w) {\\n      long long ans=0;\\n      int n=w.size();\\n      vector<int>v(n);\\n      unordered_set<int>s;\\n      s.insert(\\'a\\');\\n s.insert(\\'e\\');\\n  s.insert(\\'i\\');\\n   s.insert(\\'o\\');\\n    s.insert(\\'u\\');\\n    if(s.find(w[0])!=s.end())v[0]=1;\\n    else v[0]=0;\\nfor(int i=1;i<n;i++)\\n{  v[i]=v[i-1];\\nif(s.find(w[i])!=s.end())v[i]++;\\n}\\n\\n    long long  prf_sum=0;\\n\\nfor(int i=0;i<n;i++){\\n    ans+=i*(1LL)*v[i]-prf_sum;\\n    prf_sum+=v[i];\\n    if(s.find(w[i])!=s.end()){\\n    prf_sum--;\\n    ans++;\\n    }\\n}\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string w) {\\n      long long ans=0;\\n      int n=w.size();\\n      vector<int>v(n);\\n      unordered_set<int>s;\\n      s.insert(\\'a\\');\\n s.insert(\\'e\\');\\n  s.insert(\\'i\\');\\n   s.insert(\\'o\\');\\n    s.insert(\\'u\\');\\n    if(s.find(w[0])!=s.end())v[0]=1;\\n    else v[0]=0;\\nfor(int i=1;i<n;i++)\\n{  v[i]=v[i-1];\\nif(s.find(w[i])!=s.end())v[i]++;\\n}\\n\\n    long long  prf_sum=0;\\n\\nfor(int i=0;i<n;i++){\\n    ans+=i*(1LL)*v[i]-prf_sum;\\n    prf_sum+=v[i];\\n    if(s.find(w[i])!=s.end()){\\n    prf_sum--;\\n    ans++;\\n    }\\n}\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2135471,
                "title": "o-n-dp-detailed-explanation",
                "content": "There are great solutions using combinatorics. I also want to share a Dynamic Programming solution.\\n\\n# DP solution\\nIf we go over a string/array from left to right, we know that at each `i` index we have `i+1 **new**` contiguous substrings.\\nExample: \"a\" has 1 substring, and at \"ab\" we have 2 *new substrings* (\"ab\", \"b\") so \"ab\" has total of 3 substrings.\\n\\nThis can hint to us that we can reuse the previously solved step to calculate the new step we take, but how?\\n\\nAt each index `i` we know that it contains at least the same amount of vowels as the previous index `i-1` since it contains all the substrings of the previous string, including the `i\\'th` character.\\nBut if the `i\\'th` character is a vowel itself, then it also adds a vowel to each of the newly added substrings - `i+1` substrings as we\\'ve seen previously, since all the substrings contain that character.\\n\\nExample the string `\"abaef\"`\\n![image](https://assets.leetcode.com/users/images/a8bb0d35-0e00-45b6-a35a-944751f9a1ee_1654875720.1821039.png)\\n\\nAt the end, we **sum** all the vowels of the substrings and we will get the total result.\\nThe base case of the DP, i.e. dp[0] is 1 if the first character is vowel and 0 otherwise.\\n\\n# Code\\n```\\nclass Solution:\\n    # DP -> O(n) time and space\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        dp = [-1] * n\\n        if self.is_vowel(word[0]):\\n            dp[0] = 1\\n        else:\\n            dp[0] = 0\\n            \\n        for i in range(1, n):\\n            dp[i] = dp[i-1]\\n            if self.is_vowel(word[i]):\\n                dp[i] += i+1\\n        \\n        return sum(dp)\\n        \\n    def is_vowel(self, char: str) -> bool:\\n        return char in \"aeiou\"\\n```\\n",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    # DP -> O(n) time and space\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        dp = [-1] * n\\n        if self.is_vowel(word[0]):\\n            dp[0] = 1\\n        else:\\n            dp[0] = 0\\n            \\n        for i in range(1, n):\\n            dp[i] = dp[i-1]\\n            if self.is_vowel(word[i]):\\n                dp[i] += i+1\\n        \\n        return sum(dp)\\n        \\n    def is_vowel(self, char: str) -> bool:\\n        return char in \"aeiou\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2003742,
                "title": "faster-than-97-c",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    long long countVowels(string word)\\n    {\\n        long long int cnt = 0, cur = 0;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            if (word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n                cur += (i+1);\\n            cnt += cur;\\n        }\\n        return cnt;\\n    }\\n};\\n// add the position(=index+1) art which vowel occurs\\n// aeio\\n// a 1\\n// ae 1+2\\n// aei 1+2+3\\n// aeio 1+2+3+4\\n//  ADD ALL\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    long long countVowels(string word)\\n    {\\n        long long int cnt = 0, cur = 0;\\n        for (int i = 0; i < word.size(); i++)\\n        {\\n            if (word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n                cur += (i+1);\\n            cnt += cur;\\n        }\\n        return cnt;\\n    }\\n};\\n// add the position(=index+1) art which vowel occurs\\n// aeio\\n// a 1\\n// ae 1+2\\n// aei 1+2+3\\n// aeio 1+2+3+4\\n//  ADD ALL\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1569710,
                "title": "c-counting-the-contribution-of-each-index-o-n-time",
                "content": "Number of substrings that contain the i\\'th index is (i+1)\\\\*(n-i)\\nWe count the contribution of each vowel, for this we count the number of subarrays it can be a part of.\\nThe subarrays which start at index [0, i] (inclusive) and the subarrays which end at index [i, n-1] (inclusive) will all contain the i\\'th index.\\nHence total such sub arrays will be (i+1)*(n-i)\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size();\\n        long long ans = 0;\\n        for(int i=0; i<n; i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\'){\\n                ans += (n-i)*(i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size();\\n        long long ans = 0;\\n        for(int i=0; i<n; i++){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\'){\\n                ans += (n-i)*(i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563998,
                "title": "fastest-javascript-solution-92ms",
                "content": "**Explanation**\\nThe approach is to go through each character of the string and check whether\\xA0the character\\xA0is a vowel or not.\\nIf it\\'s vowel then the number of new vowels added is equal to the number of new substrings added plus number vowels added in previous iterations;Else\\xA0 number of new vowels added is number of vowels added in previous iterations;\\xA0\\n\\nFor example for string \"aba\"\\n1) \"a\"\\xA0 \\xA0 **New vowels** 1    **Result** 1  **Last Vowels** 0\\n2) \"ab\"  \"b\"   \\xA0 **New vowels** 0    **Result** 2   **Last Vowels** 1\\n3) \"aba\" \"ba\" \"a\"  \\xA0 **New vowels** 3    **Result** 6   **Last Vowels** 1\\n\\n```\\n var countVowels = function (word) {\\n    let lastVowels = 0;\\n    let result = 0;\\n    for (let i = 0; i < word.length; i++) {\\n\\t    let newVowels = 0;\\n        if (isVowel(word[i])) {\\n            newVowels= (i + 1);\\n        }\\n        result += lastVowels + newVowels;\\n\\t\\tlastVowels = newVowels + lastVowels;\\n    }\\n    return result;\\n};\\nlet isVowel = function (char) {\\n    return \"aeiou\".indexOf(char) !== -1 ? true : false;\\n};",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "**Explanation**\\nThe approach is to go through each character of the string and check whether\\xA0the character\\xA0is a vowel or not.\\nIf it\\'s vowel then the number of new vowels added is equal to the number of new substrings added plus number vowels added in previous iterations;Else\\xA0 number of new vowels added is number of vowels added in previous iterations;\\xA0\\n\\nFor example for string \"aba\"\\n1) \"a\"\\xA0 \\xA0 **New vowels** 1    **Result** 1  **Last Vowels** 0\\n2) \"ab\"  \"b\"   \\xA0 **New vowels** 0    **Result** 2   **Last Vowels** 1\\n3) \"aba\" \"ba\" \"a\"  \\xA0 **New vowels** 3    **Result** 6   **Last Vowels** 1\\n\\n```\\n var countVowels = function (word) {\\n    let lastVowels = 0;\\n    let result = 0;\\n    for (let i = 0; i < word.length; i++) {\\n\\t    let newVowels = 0;\\n        if (isVowel(word[i])) {\\n            newVowels= (i + 1);\\n        }\\n        result += lastVowels + newVowels;\\n\\t\\tlastVowels = newVowels + lastVowels;\\n    }\\n    return result;\\n};\\nlet isVowel = function (char) {\\n    return \"aeiou\".indexOf(char) !== -1 ? true : false;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1563841,
                "title": "java-solution",
                "content": "Note: I wasted lot of time on this via brute force but couldn\\'t come up with right solution (mine was timing out). \\nBelow is from one of submission (not mine), sharing with others here.\\n\\n```\\n   public long countVowels(String word) {\\n        \\n        long ans = 0; //focus on long (return type)\\n        long size = word.length();\\n        \\n        for(long i=0; i<size; i++) {\\n            char ch = word.charAt((int) i);\\n            \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n                \\n                ans += (i+1)*(size-i); //magical line\\n            }\\n        }\\n        \\n        return ans;\\n\\t\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "Note: I wasted lot of time on this via brute force but couldn\\'t come up with right solution (mine was timing out). \\nBelow is from one of submission (not mine), sharing with others here.\\n\\n```\\n   public long countVowels(String word) {\\n        \\n        long ans = 0; //focus on long (return type)\\n        long size = word.length();\\n        \\n        for(long i=0; i<size; i++) {\\n            char ch = word.charAt((int) i);\\n            \\n            if(ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\') {\\n                \\n                ans += (i+1)*(size-i); //magical line\\n            }\\n        }\\n        \\n        return ans;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1563792,
                "title": "java-easy-o-n",
                "content": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long ans = 0;\\n    \\n        HashSet<Character> vowel = new HashSet<>();\\n        vowel.add(\\'a\\'); vowel.add(\\'e\\'); vowel.add(\\'i\\'); vowel.add(\\'o\\'); vowel.add(\\'u\\');\\n        \\n        for(int i = 0; i < word.length(); i++){\\n            if(vowel.contains(word.charAt(i))){\\n                ans += ((long)(word.length() - i) * (i + 1));\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public long countVowels(String word) {\\n        long ans = 0;\\n    \\n        HashSet<Character> vowel = new HashSet<>();\\n        vowel.add(\\'a\\'); vowel.add(\\'e\\'); vowel.add(\\'i\\'); vowel.add(\\'o\\'); vowel.add(\\'u\\');\\n        \\n        for(int i = 0; i < word.length(); i++){\\n            if(vowel.contains(word.charAt(i))){\\n                ans += ((long)(word.length() - i) * (i + 1));\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3159725,
                "title": "80-faster-c-vowel-count-simple-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int ans = 0,k=0;\\n        for(int i = 0; i < word.length(); i++){\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\'){\\n                k += (i+1);\\n                ans = ans+k;\\n            }else{\\n                ans = ans+k;\\n            }\\n            // cout<<ans<<\" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int ans = 0,k=0;\\n        for(int i = 0; i < word.length(); i++){\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\'){\\n                k += (i+1);\\n                ans = ans+k;\\n            }else{\\n                ans = ans+k;\\n            }\\n            // cout<<ans<<\" \";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2242639,
                "title": "o-n-c-simple-maths-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0 , n = word.size();\\n        for(long long i = 0 ; i < n ; i++)\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\'  || word[i] == \\'o\\' || word[i] == \\'i\\' || word[i] == \\'u\\')\\n                ans += ((i+1)*(n-i));//Number of substrings if the ith index is a vowel\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0 , n = word.size();\\n        for(long long i = 0 ; i < n ; i++)\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\'  || word[i] == \\'o\\' || word[i] == \\'i\\' || word[i] == \\'u\\')\\n                ans += ((i+1)*(n-i));//Number of substrings if the ith index is a vowel\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1976290,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```\\n\\n***Consider upvote if usefull!***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1848501,
                "title": "c-easy-and-concise-o-n",
                "content": "when ever i see a vowel i find its contribution in ans . the contribution of a vowel at index i can be calculated as\\n```(i+1)*(n-i)```\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        int n=word.size();\\n        \\n        long long  ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'u\\'||word[i]==\\'o\\'||word[i]==\\'i\\'||word[i]==\\'e\\')\\n            {\\n                long long a=(i+1),b=(n-i);\\n                ans+=a*b;\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```(i+1)*(n-i)```\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        int n=word.size();\\n        \\n        long long  ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'u\\'||word[i]==\\'o\\'||word[i]==\\'i\\'||word[i]==\\'e\\')\\n            {\\n                long long a=(i+1),b=(n-i);\\n                ans+=a*b;\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1572517,
                "title": "dynamic-programming-easy-solution",
                "content": "class Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long ans=0;\\n        \\n        set<char> s;\\n        \\n        s.insert(\\'a\\');\\n        s.insert(\\'e\\');\\n        s.insert(\\'i\\');\\n        s.insert(\\'o\\');\\n        s.insert(\\'u\\');\\n    \\n        \\n        int n=word.size();\\n        \\n        vector<long long > dp(n+1);\\n        int i;\\n        dp[n]=0;\\n        \\n        for(i=n-1;i>=0;i--){\\n            \\n            if(s.find(word[i])!=s.end()){\\n                dp[i]=(n-i)+dp[i+1];\\n            }\\n            \\n            else dp[i]=dp[i+1];\\n            \\n            ans+=dp[i];\\n            \\n            \\n        }\\n        \\n        \\n        \\n        \\n        \\n        return ans;\\n        \\n        \\n    }\\n};",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long ans=0;\\n        \\n        set<char> s;\\n        \\n        s.insert(\\'a\\');\\n        s.insert(\\'e\\');\\n        s.insert(\\'i\\');\\n        s.insert(\\'o\\');\\n        s.insert(\\'u\\');\\n    \\n        \\n        int n=word.size();\\n        \\n        vector<long long > dp(n+1);\\n        int i;\\n        dp[n]=0;\\n        \\n        for(i=n-1;i>=0;i--){\\n            \\n            if(s.find(word[i])!=s.end()){\\n                dp[i]=(n-i)+dp[i+1];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1566441,
                "title": "c-fully-explained-with-proof",
                "content": "Explanation\\nFor each vowels s[i],\\nit could be in the substring starting at s[x] and ending at s[y],\\nwhere 0 <= x <= i and i <= y < n,\\nthat is (i + 1) choices for x and (n - i) choices for y.\\n\\nSo there are (i + 1) * (n - i) substrings containing s[i].\\nTime O(n)\\nSpace O(1)\\n\\n\\n\\n\\tclass Solution {\\n\\n\\tpublic:\\n\\n\\t\\tbool isVowel(char c){\\n\\t\\t\\treturn c==\\'a\\' or c==\\'e\\' or c==\\'i\\' or c==\\'o\\' or c==\\'u\\';\\n\\t\\t}\\n\\n\\t\\tlong long countVowels(string s) {\\n\\t\\t\\tlong long n = s.size();\\n\\t\\t\\tlong long sum=0;\\n\\t\\t\\tfor (long long i = 0; i < n; i++) {\\n\\t\\t\\t   if(isVowel(s[i])){\\n\\t\\t\\t\\t   sum+=(i+1)*(n-i);\\n\\t\\t\\t   }\\n\\t\\t\\t}\\n\\t\\t\\treturn sum;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\n\\tpublic:\\n\\n\\t\\tbool isVowel(char c){\\n\\t\\t\\treturn c==\\'a\\' or c==\\'e\\' or c==\\'i\\' or c==\\'o\\' or c==\\'u\\';\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1564346,
                "title": "c-o-n-time-easy-solution",
                "content": "This problem can be viewed as sum of total number of substrings having index i where word[i] is vowel. Basically we have to find the count of substrings that include index i (for word[i] is vowel) .\\n\\nE.g:- For String \"abc\" -> total substrings with index 0 is 3 i.e - a, ab, abc so Ans is 3\\nFor String \"aba\" -> total substrings with index 0 is 3 and total substrings with index 2 is 3 so Ans is 6\\n\\nSolution Appproach:-\\n\\nFor each index i total substring will be -> (i+1) * (n-i)\\nLets say for eg -> \"abcdefgh\". Here for index 4 (i.e for e) e, ef, efg, efgh, de, def ... these will be the substring so indexes before e combined with indexes after e will result in all the substring.\\n\\nThere will be two type of substrings that will include e. One with the letter that will start with letters coming before e and one  with those start from e itself.\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int len = word.size();\\n        \\n        long long ans = 0;\\n        \\n        for(int i=0; i<len; i++)\\n        {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n            {\\n                ans += (long long) (i+1) * (long long) (len-i);\\n            }\\n        }\\n        \\n        return ans;\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int len = word.size();\\n        \\n        long long ans = 0;\\n        \\n        for(int i=0; i<len; i++)\\n        {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n            {\\n                ans += (long long) (i+1) * (long long) (len-i);\\n            }\\n        }\\n        \\n        return ans;\\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1564272,
                "title": "c-solution",
                "content": "```\\ntypedef long long int ll;\\nclass Solution\\n{\\n    bool vowel(char &a)\\n    {\\n        return a == \\'a\\' or a == \\'e\\' or a == \\'i\\' or a == \\'o\\' or a == \\'u\\';\\n    }\\n        \\npublic:\\n    long long countVowels(string word)\\n    {\\n        ll res = 0;\\n        for (ll i = 0; i < word.size(); i++)\\n        {\\n            if (vowel(word[i]))\\n                res += (i + 1) * (word.size() - i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ntypedef long long int ll;\\nclass Solution\\n{\\n    bool vowel(char &a)\\n    {\\n        return a == \\'a\\' or a == \\'e\\' or a == \\'i\\' or a == \\'o\\' or a == \\'u\\';\\n    }\\n        \\npublic:\\n    long long countVowels(string word)\\n    {\\n        ll res = 0;\\n        for (ll i = 0; i < word.size(); i++)\\n        {\\n            if (vowel(word[i]))\\n                res += (i + 1) * (word.size() - i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563738,
                "title": "one-liner-python",
                "content": "```\\n    def countVowels(self, word: str) -> int:\\n        return sum((i+1)*(len(word)-i) for i,c in enumerate(word) if c in \\'aeiou\\')\\n```",
                "solutionTags": [],
                "code": "```\\n    def countVowels(self, word: str) -> int:\\n        return sum((i+1)*(len(word)-i) for i,c in enumerate(word) if c in \\'aeiou\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3430514,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func countVowels(_ word: String) -> Int {\\n\\n        let chs = Array(word)\\n        var res = 0\\n\\n        for i in chs.indices\\n            where \"aeiou\".contains(chs[i]) {\\n                res += (chs.count - i) * (i + 1)\\n            }\\n\\n        return res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func countVowels(_ word: String) -> Int {\\n\\n        let chs = Array(word)\\n        var res = 0\\n\\n        for i in chs.indices\\n            where \"aeiou\".contains(chs[i]) {\\n                res += (chs.count - i) * (i + 1)\\n            }\\n\\n        return res\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3208396,
                "title": "rb-s-very-simple-two-pointers-approach-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        cnt = 0\\n        vowel = \\'aeiou\\'\\n        ln = len(word)\\n        for i in range(len(word)-1,-1,-1):\\n            if word[i] in vowel:\\n                # for left and right and merged calulation \\n                left = i - 0\\n                right = ln - 1 - i\\n                left_to_right = left*right\\n                cnt += left + right + left_to_right + 1 # +1 for itself count as substring\\n            else:\\n                continue  # for consonant char\\n        return cnt\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        cnt = 0\\n        vowel = \\'aeiou\\'\\n        ln = len(word)\\n        for i in range(len(word)-1,-1,-1):\\n            if word[i] in vowel:\\n                # for left and right and merged calulation \\n                left = i - 0\\n                right = ln - 1 - i\\n                left_to_right = left*right\\n                cnt += left + right + left_to_right + 1 # +1 for itself count as substring\\n            else:\\n                continue  # for consonant char\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3182652,
                "title": "python-dp-no-extra-memory",
                "content": "# Intuition\\nWe can approach this problem with DP. Let\\'s count total number of vowels in the substrings of ``word`` prefix ``word[0..i]`` and call it ``DP(i)``. \\nThus given we have ``DP(i-1)`` we can calculate ``DP(i)`` in the following way:\\n1. If ``word[i]`` is a consonant, then total number of vowels in all substrings of the prefix ``word[0:i]`` will be the same as the number of vowels of all substrings of the prefix ``word[0:i-1]``, thus ``DP(i) = DP(i-1)``, assuming ``DP(-1) = 0`` - number of vowels in substrings of an empty string.\\n2. If ``word[i]`` is a vowel, we add exactly ``len(word[0:i])`` vowels since we will have substrings ``word[0:i-1] + word[i]``, ``word[1:i-1] + word[i]``,... ``word[i-1:i-1] + word[i]``.\\nFor the total value we need to sum up values for the substrings - all ``DP(i)``\\n\\n# Approach\\nWe don\\'t need extra memory apart from two variables to calculate the result. We actually need only to store the result and previous ``DP`` value. All we need is to iterate over the string, check if consequtive character is a vowel and add current prefix length to the previous ``DP`` value, and accumulate it into the ``result``.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        result = 0\\n        current = 0\\n        for i, c in enumerate(word):\\n            if c in \"aeiou\":\\n                current += (i+1)\\n            result += current\\n        return result\\n```\\n\\n\\nShall you have any questions - please feel free to ask, and upvote if you like it!",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        result = 0\\n        current = 0\\n        for i, c in enumerate(word):\\n            if c in \"aeiou\":\\n                current += (i+1)\\n            result += current\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571839,
                "title": "java-derived-formula-easy-concise",
                "content": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long n = word.length() ;\\n        long result = 0 ;\\n        \\n        for (int i = 0; i < n; i++) {\\n            char ch = word.charAt(i) ;\\n            if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                result += (i+1)*(n-i) ;\\n        }\\n        \\n        return result ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long n = word.length() ;\\n        long result = 0 ;\\n        \\n        for (int i = 0; i < n; i++) {\\n            char ch = word.charAt(i) ;\\n            if (ch == \\'a\\' || ch == \\'e\\' || ch == \\'i\\' || ch == \\'o\\' || ch == \\'u\\')\\n                result += (i+1)*(n-i) ;\\n        }\\n        \\n        return result ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2523017,
                "title": "100-space-bitmask-easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int num=1065233;\\n    // this is how num created\\n    // int num=0;\\n    // for(int i=0;i<=26;i++){\\n    //     char ch=\\'a\\'+i;\\n    //     if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\'){\\n    //         num+=(1<<i);\\n    //     }\\n    // }\\n    // cout<<num<<\"\\\\n\";\\n    long long countVowels(string &W) {\\n        long long ans=0;\\n        int n=W.size();\\n        \\n        for(int i=0;i<n;i++){\\n            int dig=W[i]-\\'a\\';\\n            if(num&(1<<dig)){\\n                ans+=1LL*(i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int num=1065233;\\n    // this is how num created\\n    // int num=0;\\n    // for(int i=0;i<=26;i++){\\n    //     char ch=\\'a\\'+i;\\n    //     if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\'){\\n    //         num+=(1<<i);\\n    //     }\\n    // }\\n    // cout<<num<<\"\\\\n\";\\n    long long countVowels(string &W) {\\n        long long ans=0;\\n        int n=W.size();\\n        \\n        for(int i=0;i<n;i++){\\n            int dig=W[i]-\\'a\\';\\n            if(num&(1<<dig)){\\n                ans+=1LL*(i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2467924,
                "title": "python3-explained-top-down-dp-o-n",
                "content": "We have to iterate over the list and just have to count the number of times a vovel is used in a substring, so if we are at index i and it is a vovel then it will be used in i+1 (from 0 to i) and x-i (form i to x) where x is the length of the string.\\nAnd if we multiply these two to get the sum for that vovel i.e (i+1)*(x-i) \\nAnd at the end we will add the vovel sum to get the ans.\\n\\nfor example:\\naba\\nall the possible substring for 0th index is a, ab aba\\nso the count for a (0+1)*(3-0)=3\\n\\nwe will skip b, as it is not counted in any substring\\n\\nnow for i=2\\nthe last a will be used in aba, ba and a\\nso the count will be 3.\\n\\nand the total count for a is 6.\\n\\nand there are no other vovel in the string.\\nso their count will be 0.\\n\\nso ans=6+0+0+0+0=6\\n\\nNote: we are only counting the number of times a vovel is used in total number of substring.\\n\\ndef countVowels(self, words: str) -> int:\\n\\n        vov={\\'a\\':0,\\'e\\':0,\\'i\\':0,\\'o\\':0,\\'u\\':0}\\n        x=len(words)\\n        for i in range(x):\\n            if words[i] in vov:\\n                vov[words[i]]+=(i+1)*(x-i) \\n        summ=0  \\n        for i,j in vov.items():\\n            summ+=j  \\n        return summ",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "We have to iterate over the list and just have to count the number of times a vovel is used in a substring, so if we are at index i and it is a vovel then it will be used in i+1 (from 0 to i) and x-i (form i to x) where x is the length of the string.\\nAnd if we multiply these two to get the sum for that vovel i.e (i+1)*(x-i) \\nAnd at the end we will add the vovel sum to get the ans.\\n\\nfor example:\\naba\\nall the possible substring for 0th index is a, ab aba\\nso the count for a (0+1)*(3-0)=3\\n\\nwe will skip b, as it is not counted in any substring\\n\\nnow for i=2\\nthe last a will be used in aba, ba and a\\nso the count will be 3.\\n\\nand the total count for a is 6.\\n\\nand there are no other vovel in the string.\\nso their count will be 0.\\n\\nso ans=6+0+0+0+0=6\\n\\nNote: we are only counting the number of times a vovel is used in total number of substring.\\n\\ndef countVowels(self, words: str) -> int:\\n\\n        vov={\\'a\\':0,\\'e\\':0,\\'i\\':0,\\'o\\':0,\\'u\\':0}\\n        x=len(words)\\n        for i in range(x):\\n            if words[i] in vov:\\n                vov[words[i]]+=(i+1)*(x-i) \\n        summ=0  \\n        for i,j in vov.items():\\n            summ+=j  \\n        return summ",
                "codeTag": "Python3"
            },
            {
                "id": 2359477,
                "title": "o-n-c-10-lines",
                "content": "```\\n    long long countVowels(string A ) {\\n        int N = A.size();\\n        int a = 1 ;\\n        int b = N ;\\n        long long res = 0 ;\\n        \\n        unordered_set< char >st = { \\'a\\' , \\'e\\' , \\'i\\' , \\'o\\' , \\'u\\' };\\n        \\n        for( auto x : A )\\n        {\\n            if( st.find(x) != st.end() )\\n                res += 1LL*a*b ;\\n            \\n            a++;\\n            b--;\\n        }\\n        return res; \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    long long countVowels(string A ) {\\n        int N = A.size();\\n        int a = 1 ;\\n        int b = N ;\\n        long long res = 0 ;\\n        \\n        unordered_set< char >st = { \\'a\\' , \\'e\\' , \\'i\\' , \\'o\\' , \\'u\\' };\\n        \\n        for( auto x : A )\\n        {\\n            if( st.find(x) != st.end() )\\n                res += 1LL*a*b ;\\n            \\n            a++;\\n            b--;\\n        }\\n        return res; \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2342490,
                "title": "c-simple-observation-o-n-pictorially-explained",
                "content": "Hello, please upvote the answer if you found it helpful.\\n\\nThe main idea is to store the number of vowels we count at each index and then use the same count to further count the number of vowels for next index. Any character will only contribute to the \"prev\" variable IF it is a vowel otherwise the number of vowels will remain the same.\\nPlease watch the example to get a clear picture of the code.\\n![image](https://assets.leetcode.com/users/images/012d8f84-d228-4b9b-8f18-9a827d0eb831_1658948572.1517887.png)\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long prev=0,sum=0;\\n        int n = word.size();\\n        for(int j=0;j<n;j++){\\n            if(word[j] == \\'a\\'||  word[j] == \\'e\\' || word[j] == \\'i\\' || word[j] == \\'o\\' || word[j] == \\'u\\' ) \\n                prev += j+1;\\n            sum+=prev;\\n        }\\n        return sum;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long prev=0,sum=0;\\n        int n = word.size();\\n        for(int j=0;j<n;j++){\\n            if(word[j] == \\'a\\'||  word[j] == \\'e\\' || word[j] == \\'i\\' || word[j] == \\'o\\' || word[j] == \\'u\\' ) \\n                prev += j+1;\\n            sum+=prev;\\n        }\\n        return sum;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2340357,
                "title": "c-easy-code-with-explanation-90-fast",
                "content": "Please Upvote :)\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(vowel(word[i]))\\n            {\\n                long long t=word.length()-i;\\n// there are i char till here soo each of them can create t substrings using this char\\n                res+=i*t; \\n                res+=t; // contribution to subtstrings starting from here\\n            }\\n        }\\n        return res;\\n    }\\n    bool vowel(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(vowel(word[i]))\\n            {\\n                long long t=word.length()-i;\\n// there are i char till here soo each of them can create t substrings using this char\\n                res+=i*t; \\n                res+=t; // contribution to subtstrings starting from here\\n            }\\n        }\\n        return res;\\n    }\\n    bool vowel(char c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2271157,
                "title": "c-o-n-solution",
                "content": "```\\n int n= w.length();\\n      bool v[26] = {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};\\n       long long ans=0;\\n        for(int i=0;i<n;i++){\\n            //char ch=word[i];\\n            long long res1=(i+1);\\n            long long res2=(n-i);\\n          ans+=v[w[i]-\\'a\\']*res1*res2;\\n        }\\n        return ans;",
                "solutionTags": [],
                "code": "```\\n int n= w.length();\\n      bool v[26] = {1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};\\n       long long ans=0;\\n        for(int i=0;i<n;i++){\\n            //char ch=word[i];\\n            long long res1=(i+1);\\n            long long res2=(n-i);\\n          ans+=v[w[i]-\\'a\\']*res1*res2;\\n        }\\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 2245212,
                "title": "easy-understanding-c-solution-o-n-time-complexity",
                "content": "**Thought Process:**\\nLet\\'s take a word \"barcode\"\\nWe need to find total number of occurance of vowels i.e. [a,o,e]\\n1. Let\\'s Try to make substrings that gonna include \\'a\\'.\\n\\t* \\tsubstrings starting from \\'b\\' are: \"ba\", \"bar\", \"barc\", \"barco\", \"barcod\", \"barcode\" \\n\\t\\t* \\tit means we need to make substrings where the last letter is [a, ...]\\n\\t* \\tsubstrings starting from \\'a\\' are: \"a\",  \"ar\", \"arc\", \"arco\", \"arcod\", \"arcode\"\\n\\t\\t* \\tit also says we need to make substrings where the last letter is [a, ...]\\n\\t* \\tSo, to include \\'a\\', we need substring that starts with letter which is on or before \\'a\\' and ends with letter which is on or after \\'a\\'.\\n\\t* \\tCount of \\'a\\' = 2*6 = 12.\\n2. Let\\'s Try to make substrings that gonna include \\'o\\'.\\n\\t* \\tsubstrings starting from \\'b\\' are: \"barco\", \"barcod\", \"barcode\" \\n\\t\\t* \\tit means we need to make substrings where the last letter is [o, ...]\\n\\t* \\tsubstrings starting from \\'a\\' are: \"arco\", \"arcod\", \"arcode\"\\n\\t\\t* \\tit also says we need to make substrings where the last letter is [o, ...]\\n\\t* \\tsubstrings starting from \\'r\\' are: \"rco\", \"rcod\", \"rcode\" \\n\\t\\t* \\tit also says we need to make substrings where the last letter is [o, ...]\\n\\t* \\tsubstrings starting from \\'c\\' are: \"co\", \"cod\", \"code\"\\n\\t\\t* \\tit also says we need to make substrings where the last letter is [o, ...]\\n\\t* \\tsubstrings starting from \\'o\\' are: \"o\", \"od\", \"ode\"\\n\\t\\t* \\tit also says we need to make substrings where the last letter is [o, ...]\\n\\t* \\tSo, to include \\'o\\', we need substring that starts with letter which is on or before \\'o\\' and ends with letter which is on or after \\'o\\'.\\n\\t* \\tCount of \\'a\\' = 3*5 = 15.\\n* So, from the above observation, we can say that to include any vowel, we need **(pos[vowel]+1)**, **(len-pos[vowel])** number of different substrings i.e. that much number of occurrence of the vowel.\\n*  Here, **len** is **length of word** and **pos** is **position of vowel**.\\n\\n**Code:**\\n```\\nlong long countVowels(string word){\\n    int len=word.length();\\n    long long count=0;\\n    for(int pos=0; pos<len; pos++){\\n        char c = word[pos];\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\'){\\n            count += 1ll*(n-pos)*(pos+1);\\n        }\\n    }\\n    return count;\\n}\\n```\\n**Time Complexity: O(n)\\nSpace Complexity: O(1)\\nUpvote if you find it helpful, Comment For any explanation...**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nlong long countVowels(string word){\\n    int len=word.length();\\n    long long count=0;\\n    for(int pos=0; pos<len; pos++){\\n        char c = word[pos];\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\'){\\n            count += 1ll*(n-pos)*(pos+1);\\n        }\\n    }\\n    return count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2137730,
                "title": "c-simple-approch-without-dp-simple-observation",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long  ans=0;\\n        map<char,int>m;\\n        m[\\'a\\']++;\\n        m[\\'e\\']++;\\n        m[\\'i\\']++;\\n        m[\\'o\\']++;\\n        m[\\'u\\']++;\\n        int n=word.length();\\n\\t\\t//we need to check the contribution of every vowels in final ans\\n\\t\\t//__________a[i]____________\\n\\t\\t//suppose a[i] is vowel the we find number of substring such that a[i] is part of ths substring\\n\\t\\t//op1= we find number of substring ending at i so this are i+1;\\n\\t\\t//op2=we find number of substring that start at i so this is n-i-1\\n\\t\\t//op3  we find number of substring such that a[i] is between in string \\n\\t\\t//for this ----------a[i]______________ number of character to left of i and number of\\n\\t\\tcharacter to right of i is total is left*right total answer for this i is sum of abover three options\\n        for(int i=0;i<word.length();i++){\\n            if(m.count(word[i])){\\n                long long a=i+1;\\n                long long b=n-i-1;\\n                long long c=i*b;\\n                ans+=a;\\n                ans+=b;\\n                ans+=c;\\n                \\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long  ans=0;\\n        map<char,int>m;\\n        m[\\'a\\']++;\\n        m[\\'e\\']++;\\n        m[\\'i\\']++;\\n        m[\\'o\\']++;\\n        m[\\'u\\']++;\\n        int n=word.length();\\n\\t\\t//we need to check the contribution of every vowels in final ans\\n\\t\\t//__________a[i]____________\\n\\t\\t//suppose a[i] is vowel the we find number of substring such that a[i] is part of ths substring\\n\\t\\t//op1= we find number of substring ending at i so this are i+1;\\n\\t\\t//op2=we find number of substring that start at i so this is n-i-1\\n\\t\\t//op3  we find number of substring such that a[i] is between in string \\n\\t\\t//for this ----------a[i]______________ number of character to left of i and number of\\n\\t\\tcharacter to right of i is total is left*right total answer for this i is sum of abover three options\\n        for(int i=0;i<word.length();i++){\\n            if(m.count(word[i])){\\n                long long a=i+1;\\n                long long b=n-i-1;\\n                long long c=i*b;\\n                ans+=a;\\n                ans+=b;\\n                ans+=c;\\n                \\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058170,
                "title": "clean-code-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        vector<char> f = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        set<char> s;\\n        s.insert(f.begin(),f.end());\\n        long long n = word.length();\\n        long long sum =0;\\n        for(long long i=0; i<n; i++)\\n        {\\n            if(s.find(word[i])!=s.end())\\n            {\\n                sum += (i+1)*(n-i);\\n            }\\n        }\\n        return long(sum);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        vector<char> f = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        set<char> s;\\n        s.insert(f.begin(),f.end());\\n        long long n = word.length();\\n        long long sum =0;\\n        for(long long i=0; i<n; i++)\\n        {\\n            if(s.find(word[i])!=s.end())\\n            {\\n                sum += (i+1)*(n-i);\\n            }\\n        }\\n        return long(sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2034880,
                "title": "easy-java-solution-o-n-with-expalanation",
                "content": "Number of susbstrings in which the vowel at **word.charAt(i)** will occur will be its own substrings i.e. **len-i** and in the substrings of **previous** elements .Number of elements  before it will be **i** and **(len-i)** will be the susbtrings in which it will occur.\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long ans=0;\\n        String vowels=\"aeiou\";\\n        int len=word.length();\\n        for (int i=0;i<word.length();i++)\\n        {\\n            char ch=word.charAt(i);\\n            if (ch==\\'a\\'|| ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n            {\\n                ans+=len-i+(long)(i)*(len-i);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long ans=0;\\n        String vowels=\"aeiou\";\\n        int len=word.length();\\n        for (int i=0;i<word.length();i++)\\n        {\\n            char ch=word.charAt(i);\\n            if (ch==\\'a\\'|| ch==\\'e\\'||ch==\\'i\\'||ch==\\'o\\'||ch==\\'u\\')\\n            {\\n                ans+=len-i+(long)(i)*(len-i);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2001779,
                "title": "python-combinatrics-math",
                "content": "Consider string \"xxax\"\\n1. vowel can be part of substrings a, xa, xxa in left hand side of vowel\\n2. vowel can be part of substrings  a, ax  in right hand side of vowel\\n3. Then simply we need to multiple l*r (a, xa, xxa) * (a, ax) => (aa, aax, xaa, xaax, xxaa, xxaax) **duplicates \"aa\" => \"a\"  **\\n```\\nclass Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n        vm = {\\'a\\': 1, \\'e\\': 1, \\'i\\': 1, \\'o\\': 1, \\'u\\': 1}\\n        c = 0\\n        for k, w in enumerate(word):\\n            if w in vm:\\n                r = len(word) - k # Calculate no of substrings formed in right side with vowel as pivot\\n                l = (k+1) # In left hand side\\n                c+=r*l # This for finding total no of strings crossing pivots\\n        return c\\n```",
                "solutionTags": [
                    "Python",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n        vm = {\\'a\\': 1, \\'e\\': 1, \\'i\\': 1, \\'o\\': 1, \\'u\\': 1}\\n        c = 0\\n        for k, w in enumerate(word):\\n            if w in vm:\\n                r = len(word) - k # Calculate no of substrings formed in right side with vowel as pivot\\n                l = (k+1) # In left hand side\\n                c+=r*l # This for finding total no of strings crossing pivots\\n        return c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1959990,
                "title": "python-simple-maths",
                "content": "\\n    def countVowels(self, word):\\n        total = 0\\n        \\n        for i in range(len(word)):\\n            if word[i] in \"aeiou\":\\n                total += (i+1)*(len(word)-i)\\n                \\n        return total",
                "solutionTags": [],
                "code": "\\n    def countVowels(self, word):\\n        total = 0\\n        \\n        for i in range(len(word)):\\n            if word[i] in \"aeiou\":\\n                total += (i+1)*(len(word)-i)\\n                \\n        return total",
                "codeTag": "Python3"
            },
            {
                "id": 1913082,
                "title": "c-solution-o-n-simple-concise",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        auto isVow = [](char const &c) -> bool {\\n            return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n        };\\n        long long sum = 0, n = word.size();\\n        for (long long i = 0; i < n; i++) {\\n            if (isVow(word[i])) { //Just count the number of sub-strings, the vowel - word[i] would be associated with;\\n                sum = (sum + n + i * (n - i - 1)); // adding \\'n\\' as word[i] would exist in the sub-string [0...i] & [i + 1...n],\\n\\t\\t\\t\\t//and multiplying i * (n - i - 1) because, word[i] would also exist in the sub-strings [0...i] * [i + 1...n](i.e [0...i+1],[1...i+1]...[0...n] etc.);\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        auto isVow = [](char const &c) -> bool {\\n            return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n        };\\n        long long sum = 0, n = word.size();\\n        for (long long i = 0; i < n; i++) {\\n            if (isVow(word[i])) { //Just count the number of sub-strings, the vowel - word[i] would be associated with;\\n                sum = (sum + n + i * (n - i - 1)); // adding \\'n\\' as word[i] would exist in the sub-string [0...i] & [i + 1...n],\\n\\t\\t\\t\\t//and multiplying i * (n - i - 1) because, word[i] would also exist in the sub-strings [0...i] * [i + 1...n](i.e [0...i+1],[1...i+1]...[0...n] etc.);\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1870859,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        for(int i=0; i<word.size(); i++){\\n            long long c = 0;\\n            if(word[i] == \\'a\\' or word[i] == \\'e\\' or word[i] == \\'i\\' or word[i] == \\'o\\' or word[i] == \\'u\\'){\\n               \\n                if(i == 0 or i == word.size()-1){\\n                     c = word.size();\\n                }\\n                else{\\n                     c = word.size();\\n                    long long a = i*(word.size()-i-1);\\n                    c += a;\\n                }\\n            }\\n            ans += c;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        for(int i=0; i<word.size(); i++){\\n            long long c = 0;\\n            if(word[i] == \\'a\\' or word[i] == \\'e\\' or word[i] == \\'i\\' or word[i] == \\'o\\' or word[i] == \\'u\\'){\\n               \\n                if(i == 0 or i == word.size()-1){\\n                     c = word.size();\\n                }\\n                else{\\n                     c = word.size();\\n                    long long a = i*(word.size()-i-1);\\n                    c += a;\\n                }\\n            }\\n            ans += c;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1834547,
                "title": "c-easy-o-n",
                "content": "```\\nbool isvowel(char c){\\n        return (c==\\'a\\' or c ==\\'e\\' or c==\\'i\\' or c==\\'o\\' or c==\\'u\\');\\n    }\\n    long long countVowels(string word) {\\n        long long int ans=0;\\n        for(int i=0;i<word.size();i++){\\n            if(isvowel(word[i]))\\n                ans += (i+1)*(word.size()-i);\\n            else continue;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool isvowel(char c){\\n        return (c==\\'a\\' or c ==\\'e\\' or c==\\'i\\' or c==\\'o\\' or c==\\'u\\');\\n    }\\n    long long countVowels(string word) {\\n        long long int ans=0;\\n        for(int i=0;i<word.size();i++){\\n            if(isvowel(word[i]))\\n                ans += (i+1)*(word.size()-i);\\n            else continue;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1794416,
                "title": "python-simple-math-and-combinatorics",
                "content": "![image](https://assets.leetcode.com/users/images/8328cd28-2eae-4003-b1dc-b7a0313bc9bd_1645633209.8877914.png)\\n\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vows = set(\"aeiou\")\\n        l = len(word)\\n        s = 0\\n        for i in range(l):\\n            if word[i] in vows:\\n                s += (i + 1) * (l - i)\\n        return s\\n```\\n**Please upvote if you find it interesting and helpful!!!\\nThank you.**",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Combinatorics",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vows = set(\"aeiou\")\\n        l = len(word)\\n        s = 0\\n        for i in range(l):\\n            if word[i] in vows:\\n                s += (i + 1) * (l - i)\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1696025,
                "title": "c-o-n-o-1",
                "content": "generating all substrings will take O(N^2) .\\nBut length constraints are too high. So we need to find a better approach..\\nwhat if we can find count of substrings the charecter is in.\\ntake for example \\ns= abca\\ncharecter b can be present in \\nb\\nbc \\nbca\\nbut also rememeber it can also be present in substring with charecters before it.\\nso   ab\\n\\t\\tabc\\n\\t\\tabca\\nif we look at this pattern, we can see that we can multiply the number of charecters before it with the susbtring generated from \\nb i.e (\"b\",\"bc\",\"bca\") so it will be 2 * 3 =6;\\n\\nsimilarly for charecter c \\nwe can start with c , can start with bc and also abc . For all three of these substrings(before and including c)  we can calculate # of string after c;\\nafter c-\\nc\\nca\\n\\nbefore c -\\nbc\\nbca\\nabc\\nabca\\n\\n\\nthus \\nposition of c * string after c = total number of strings the charecter c is in.\\n\\nNow we just check if the charecter is vowel or not and just only add that result to end result.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'o\\'||word[i]==\\'u\\'||word[i]==\\'i\\')\\n                ans+=(word.size()-i)*(i+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Greedy",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'o\\'||word[i]==\\'u\\'||word[i]==\\'i\\')\\n                ans+=(word.size()-i)*(i+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1682659,
                "title": "2063-vowels-of-all-substrings-c-contribution-problem",
                "content": "Every element s[i] appears in two types of subarrays:\\n1. In subarrays beginning with s[i]. There are \\n    `(n - i)` such subsets.\\n2. In `(n - i) * i` subarrays where this element is not\\n    first element.\\n\\nThus, total appearance of each vowel at index `i`=  `(n - i) * (i + 1)`\\n\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        unordered_set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        long long ans = 0, n = s.size();\\n        for(int i = 0; i < n; i++){\\n            if(vowels.count(s[i])) ans += (n - i) * (i + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        unordered_set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n        long long ans = 0, n = s.size();\\n        for(int i = 0; i < n; i++){\\n            if(vowels.count(s[i])) ans += (n - i) * (i + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1658678,
                "title": "c-easy-solution-with-complete-explaination",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long cur=0; // for counting all the vowels in substring \\n        int n=s.length();\\n        long long prev=0; // store number of vowels in substring before current index initial value is 0\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\')\\n            {\\n\\t\\t\\t   // if a we have 2 element in a array [1,2] then if we add 3rd element let it be 3 then total number of new substring formed which //include this new eelement is the size of array after adding new element i,e 3 = [1,2,3] , [2,3] , [3]\\n\\t\\t\\t   // we add prev sum, [a,b,e] current total vowel sum in all substring is prev=6 now if we add one more vowel [a,b,e,f] now cur=4+prev=6\\n                cur+=i+1+prev;\\n                prev=i+prev+1;\\n            }\\n            else\\n                cur+=prev;\\n        }\\n        return cur;\\n    }\\n};\\n\\n``````\\n\\n\\n```",
                "solutionTags": [
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long cur=0; // for counting all the vowels in substring \\n        int n=s.length();\\n        long long prev=0; // store number of vowels in substring before current index initial value is 0\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'o\\' || s[i]==\\'u\\')\\n            {\\n\\t\\t\\t   // if a we have 2 element in a array [1,2] then if we add 3rd element let it be 3 then total number of new substring formed which //include this new eelement is the size of array after adding new element i,e 3 = [1,2,3] , [2,3] , [3]\\n\\t\\t\\t   // we add prev sum, [a,b,e] current total vowel sum in all substring is prev=6 now if we add one more vowel [a,b,e,f] now cur=4+prev=6\\n                cur+=i+1+prev;\\n                prev=i+prev+1;\\n            }\\n            else\\n                cur+=prev;\\n        }\\n        return cur;\\n    }\\n};\\n\\n```\n```\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1657868,
                "title": "java-simple-solution-with-approach",
                "content": "Consider an string - axexixoxu\\n![image](https://assets.leetcode.com/users/images/2e04aacb-7e0c-4d80-b3d6-bcb7416abe78_1640933350.0802453.png)\\n\\n\\n\\n```\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n        \\n        char[] arr = word.toCharArray();\\n        int n = arr.length;\\n        \\n        long result = 0L;\\n        for(int i=0; i<n; i++){\\n            if(isVowel(arr[i])){\\n                result = result + (n-i)*(i+1L);\\n            }\\n        }\\n        \\n    \\n        return result;\\n    }\\n    \\n    public boolean isVowel(char c){\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n        \\n        char[] arr = word.toCharArray();\\n        int n = arr.length;\\n        \\n        long result = 0L;\\n        for(int i=0; i<n; i++){\\n            if(isVowel(arr[i])){\\n                result = result + (n-i)*(i+1L);\\n            }\\n        }\\n        \\n    \\n        return result;\\n    }\\n    \\n    public boolean isVowel(char c){\\n        return (c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\');\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1648901,
                "title": "c-easy-solution-using-maths",
                "content": "class Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long res=0;\\n        for(int i=0;i<s.length();i++)\\n\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'o\\'||s[i]==\\'u\\'||s[i]==\\'i\\')\\n            {\\n                res=res+(s.length()-i)*(i+1);\\n            }\\n                \\n        }\\n        return res;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long res=0;\\n        for(int i=0;i<s.length();i++)\\n\\n        {\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'o\\'||s[i]==\\'u\\'||s[i]==\\'i\\')\\n            {\\n                res=res+(s.length()-i)*(i+1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1638784,
                "title": "python-o-n-by-dp-math-w-comment",
                "content": "**Hint**:\\n\\nDefine dp[i] = **count of vowels** of **substring ending at index i**, i is from 0 to len(word)-1\\n\\n**State Transfer function**\\n\\n```\\nIf word[i] is vowel:\\n\\t\\t# current index i contributes extra (i+1) substring with current vowel character, which is ending at index i\\n\\t\\tdp[i] = dp[i-1] + (i+1)\\n```\\n\\n```\\nIf word[i] is not vowel:\\n\\t\\t# current index i has no contribution\\n\\t\\tdp[i] = dp[i-1] + 0 = dp[i-1]\\n```\\n\\n---\\n\\nFinal answer = **count of vowels of all substrings**\\n= dp[0] + dp[1] + ... + dp[ len(word)-1 ]\\n= **summation of all dp table values**\\n= sum( dp(i) for i in range( len(word) ) ) \\n\\n---\\n\\n**Implementation** by top-down DP in Python\\n\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n    \\n        vowels = set(\"aeiou\")\\n        \\n        @cache\\n        def dp( i ):\\n            \\n            ## Base case:\\n            if i == 0:\\n                \\n                return 1 if word[i] in vowels else 0\\n            \\n            \\n            ## General cases:\\n            prev = dp(i-1)\\n            \\n            if word[i] in vowels:\\n                # current index i contributes (i+1) substring with current vowel character, which is ending at index i\\n                return prev + (i+1)\\n            else:\\n                # current index i has not contribution\\n                return prev\\n        \\n        # -----------------------------------------\\n        return sum( [dp(i) for i in range(len(word))] )\\n```\\n\\n---\\n\\n**Implementation** by bottom-up DP in Python\\n\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n        vowels = set(\"aeiou\")\\n        \\n\\n        \\n        # {-1: 0} is for vowel count = 0 on empty string\\n        dp = {-1: 0}\\n        \\n        for i, char in enumerate(word):\\n            \\n            prev_vowel_count = dp[i-1]\\n            \\n            if char in vowels:\\n                \\n                # current index i contributes (i+1) substring with current vowel character, which is ending at index i\\n                cur_vowel_count = prev_vowel_count + (i + 1)\\n                \\n            else:\\n                # current index i has not contribution\\n                cur_vowel_count = prev_vowel_count\\n\\n\\n            dp[i] = cur_vowel_count\\n            \\n\\n        return sum( dp.values() )\\n```\\n\\n---\\n\\n**Implementation** by math in Python\\n\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n        n = len(word)\\n        vowel = set(\"aeiou\")\\n        \\n        count = 0\\n        \\n        for i, char in enumerate(word):\\n            \\n            if char in vowel:\\n                \\n                # curent vowel char can be covered by s[start:end]\\n                \\n                # start is from index 0 to i inclusively, total i+1 choices\\n                # end is from index i to n-1 inclusively, total n-i choices\\n                \\n                start_combination, end_combination = (i+1), (n-i)\\n                count += start_combination * end_combination\\n        \\n        return count\\n```",
                "solutionTags": [
                    "Python",
                    "Math",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nIf word[i] is vowel:\\n\\t\\t# current index i contributes extra (i+1) substring with current vowel character, which is ending at index i\\n\\t\\tdp[i] = dp[i-1] + (i+1)\\n```\n```\\nIf word[i] is not vowel:\\n\\t\\t# current index i has no contribution\\n\\t\\tdp[i] = dp[i-1] + 0 = dp[i-1]\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n    \\n        vowels = set(\"aeiou\")\\n        \\n        @cache\\n        def dp( i ):\\n            \\n            ## Base case:\\n            if i == 0:\\n                \\n                return 1 if word[i] in vowels else 0\\n            \\n            \\n            ## General cases:\\n            prev = dp(i-1)\\n            \\n            if word[i] in vowels:\\n                # current index i contributes (i+1) substring with current vowel character, which is ending at index i\\n                return prev + (i+1)\\n            else:\\n                # current index i has not contribution\\n                return prev\\n        \\n        # -----------------------------------------\\n        return sum( [dp(i) for i in range(len(word))] )\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n        vowels = set(\"aeiou\")\\n        \\n\\n        \\n        # {-1: 0} is for vowel count = 0 on empty string\\n        dp = {-1: 0}\\n        \\n        for i, char in enumerate(word):\\n            \\n            prev_vowel_count = dp[i-1]\\n            \\n            if char in vowels:\\n                \\n                # current index i contributes (i+1) substring with current vowel character, which is ending at index i\\n                cur_vowel_count = prev_vowel_count + (i + 1)\\n                \\n            else:\\n                # current index i has not contribution\\n                cur_vowel_count = prev_vowel_count\\n\\n\\n            dp[i] = cur_vowel_count\\n            \\n\\n        return sum( dp.values() )\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n        n = len(word)\\n        vowel = set(\"aeiou\")\\n        \\n        count = 0\\n        \\n        for i, char in enumerate(word):\\n            \\n            if char in vowel:\\n                \\n                # curent vowel char can be covered by s[start:end]\\n                \\n                # start is from index 0 to i inclusively, total i+1 choices\\n                # end is from index i to n-1 inclusively, total n-i choices\\n                \\n                start_combination, end_combination = (i+1), (n-i)\\n                count += start_combination * end_combination\\n        \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1589660,
                "title": "faster-c-o-n-using-map-only",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long int ans = 0; //This will be the final answer\\n        \\n        unordered_map<char , int > mp; // Unordered map of char to int\\n        \\n        mp[\\'a\\']=1; mp[\\'e\\']=1; mp[\\'i\\']=1; mp[\\'o\\']=1; mp[\\'u\\']=1;\\n        \\n        int n = word.size(); // Size of the word\\n        \\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(mp.count(word[i])){  // Checking if current character is vowel or not\\n                \\n            long long int val = (long long)(i+1)*(n-i);  // Contribution of given character\\n             ans += val;  // Incrementing the final answer\\n            }                                  \\n        }\\n        \\n        return ans;  // Returning the final answer\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long int ans = 0; //This will be the final answer\\n        \\n        unordered_map<char , int > mp; // Unordered map of char to int\\n        \\n        mp[\\'a\\']=1; mp[\\'e\\']=1; mp[\\'i\\']=1; mp[\\'o\\']=1; mp[\\'u\\']=1;\\n        \\n        int n = word.size(); // Size of the word\\n        \\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(mp.count(word[i])){  // Checking if current character is vowel or not\\n                \\n            long long int val = (long long)(i+1)*(n-i);  // Contribution of given character\\n             ans += val;  // Incrementing the final answer\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1580573,
                "title": "c-easy-solution",
                "content": "\\t\\tlong long count = 0;\\n        long long ans = 0;\\n        \\n        for(int i = 0 ; i < word.size() ; i++)\\n        {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n                count += (i+1);\\n        \\n            ans += count;\\n        }\\n        \\n        return ans;",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "\\t\\tlong long count = 0;\\n        long long ans = 0;\\n        \\n        for(int i = 0 ; i < word.size() ; i++)\\n        {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\')\\n                count += (i+1);\\n        \\n            ans += count;\\n        }\\n        \\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 1576550,
                "title": "java-o-n-solution-with-1-d-dp",
                "content": "```\\nclass Solution {\\n    private boolean isVowelChar(char c) {\\n        return c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\';\\n    }\\n    public long countVowels(String word) {\\n        if (word == null || word.length() == 0) {\\n            return 0L;\\n        }\\n        // create 1 dp array\\n        long[] countVowelsToIndex = new long[word.length()]; \\n        // this indicates total number of vowels of all substrings that end at index i\\n        // set initial value\\n        countVowelsToIndex[0] = isVowelChar(word.charAt(0)) ? 1 : 0;\\n        // now fill in the dp\\n        long res = 0L;\\n        res += countVowelsToIndex[0];\\n        for (int i=1; i < word.length(); i++) {\\n            // check if current character is vowel\\n            long cnt=0L;\\n            if (isVowelChar(word.charAt(i))) {\\n                // case 1: the current char is a vowel\\n                // first add result from last index\\n                cnt += countVowelsToIndex[i-1]; \\n                // then add total number of chars count from [0,i], that is i+1\\n                cnt += (i+1);\\n            } else {\\n                // case 2 : not a vowel\\n                // just add result from last index\\n                cnt += countVowelsToIndex[i-1];\\n            }\\n            countVowelsToIndex[i] = cnt;\\n            res += countVowelsToIndex[i];\\n        } // time=O(N), space=O(N)\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private boolean isVowelChar(char c) {\\n        return c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\';\\n    }\\n    public long countVowels(String word) {\\n        if (word == null || word.length() == 0) {\\n            return 0L;\\n        }\\n        // create 1 dp array\\n        long[] countVowelsToIndex = new long[word.length()]; \\n        // this indicates total number of vowels of all substrings that end at index i\\n        // set initial value\\n        countVowelsToIndex[0] = isVowelChar(word.charAt(0)) ? 1 : 0;\\n        // now fill in the dp\\n        long res = 0L;\\n        res += countVowelsToIndex[0];\\n        for (int i=1; i < word.length(); i++) {\\n            // check if current character is vowel\\n            long cnt=0L;\\n            if (isVowelChar(word.charAt(i))) {\\n                // case 1: the current char is a vowel\\n                // first add result from last index\\n                cnt += countVowelsToIndex[i-1]; \\n                // then add total number of chars count from [0,i], that is i+1\\n                cnt += (i+1);\\n            } else {\\n                // case 2 : not a vowel\\n                // just add result from last index\\n                cnt += countVowelsToIndex[i-1];\\n            }\\n            countVowelsToIndex[i] = cnt;\\n            res += countVowelsToIndex[i];\\n        } // time=O(N), space=O(N)\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1568303,
                "title": "c-observation-based-solution-tc-o-n-and-sc-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n     \\n        long long ans =0;\\n        int n =word.size();\\n        for(int i=0;i<n;i+=1)\\n        {   \\n            // if ith index has vowel\\n            // then that vowel is in (i+1)*(n-i) substrings\\n            if(word[i]==\\'a\\' or word[i]==\\'e\\' or word[i]==\\'i\\' or word[i]==\\'o\\' or word[i]==\\'u\\')\\n                ans+=(long long)(i+1)*(long long)(n-i);\\n           \\n        }\\n        \\n        return ans;\\n    }\\n};\\n\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    long long countVowels(string word) {\\n     \\n        long long ans =0;\\n        int n =word.size();\\n        for(int i=0;i<n;i+=1)\\n        {   \\n            // if ith index has vowel\\n            // then that vowel is in (i+1)*(n-i) substrings\\n            if(word[i]==\\'a\\' or word[i]==\\'e\\' or word[i]==\\'i\\' or word[i]==\\'o\\' or word[i]==\\'u\\')\\n                ans+=(long long)(i+1)*(long long)(n-i);\\n           \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1566669,
                "title": "golang-very-simple-o-n-solution",
                "content": "```go\\nfunc countVowels(word string) int64 {\\n    vowel := int64(0)\\n    magic := int64(0)\\n    for i, v := range word {\\n        switch v {\\n        case \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\':\\n            magic += int64(i) + 1\\n        }\\n        vowel += magic\\n    }\\n    return vowel\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc countVowels(word string) int64 {\\n    vowel := int64(0)\\n    magic := int64(0)\\n    for i, v := range word {\\n        switch v {\\n        case \\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\':\\n            magic += int64(i) + 1\\n        }\\n        vowel += magic\\n    }\\n    return vowel\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1566532,
                "title": "c-clear-solution-with-explanation",
                "content": "**My way to come up with the formula:**\\n```\\nWord: abcdef\\n\\nPossible substrings:\\na ab abc abcd abcde abcdef\\nb bc bcd bcde bcdef\\nc cd cde cdef\\nd de def\\ne ef\\nf\\n\\nWordLength = 6\\nword[0] a: 6 (6 substrings in a first row)\\nword[1] b: 5 + 5 (5 substrings in a first row and 5 substrings in a second row)\\nword[2] c: 4 + 4 + 4 \\nword[3] d: 3 + 3 + 3 + 3\\nword[4] e: 2 + 2 + 2 + 2 + 2\\nword[5] f: 1 + 1 + 1 + 1 + 1 + 1\\n...\\nword[i] : (WordLength - i) * (i+1) // count of elements in a row * count of groups\\n```\\n\\n**Solution:**\\n```\\n\\tprivate readonly char[] Vowels = new char[] {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n    \\n\\tpublic long CountVowels2(string word) {\\n        long result = 0;\\n        long wordLength = word.Length;\\n        for (int i=0; i<wordLength; i++) {\\n            if (Vowels.Contains(word[i])) \\n                result += (wordLength - i) * (i+1);\\n        }\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nWord: abcdef\\n\\nPossible substrings:\\na ab abc abcd abcde abcdef\\nb bc bcd bcde bcdef\\nc cd cde cdef\\nd de def\\ne ef\\nf\\n\\nWordLength = 6\\nword[0] a: 6 (6 substrings in a first row)\\nword[1] b: 5 + 5 (5 substrings in a first row and 5 substrings in a second row)\\nword[2] c: 4 + 4 + 4 \\nword[3] d: 3 + 3 + 3 + 3\\nword[4] e: 2 + 2 + 2 + 2 + 2\\nword[5] f: 1 + 1 + 1 + 1 + 1 + 1\\n...\\nword[i] : (WordLength - i) * (i+1) // count of elements in a row * count of groups\\n```\n```\\n\\tprivate readonly char[] Vowels = new char[] {\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n    \\n\\tpublic long CountVowels2(string word) {\\n        long result = 0;\\n        long wordLength = word.Length;\\n        for (int i=0; i<wordLength; i++) {\\n            if (Vowels.Contains(word[i])) \\n                result += (wordLength - i) * (i+1);\\n        }\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1565988,
                "title": "o-n-time-o-1-solution-c",
                "content": "**Faster than 100%, O(n) time, O(1) space**\\n\\nEvery vowel character will occur in **(i+1) * (size-i)** substrings, where **i** is the index of the vowel character in string.\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch) {\\n        return ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\';\\n    }\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        for(int i=0 ; i<word.size() ; ++i)\\n            if(isVowel(word[i]))\\n                ans += (i+1)*(word.size()-i);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char ch) {\\n        return ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\';\\n    }\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        for(int i=0 ; i<word.size() ; ++i)\\n            if(isVowel(word[i]))\\n                ans += (i+1)*(word.size()-i);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1565939,
                "title": "2063-vowels-of-all-substrings-c-with-explanation",
                "content": "Logic-\\nWeight that char (at index i), Ci is contributing is given by, \\n= Number of substrings containing that index char  (if Ci is vowel)\\n =0 (otherwise if char Ci is not a vowel)\\n \\nThe total sum of the number of vowels (\\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\') in every substring of word will be equal to the sum of weight contributed by each character.\\nSo,\\n**Number of substrings containing that index i char  (if Ci is vowel)=  (no of prefix substrings+  no of suffix substrings -1)+ (no of prefix substrings * no of suffix substrings )**\\nHere, \\n(no of prefix substrings+  no of suffix substrings +1 )=n\\n\\nSo, we can say ,\\n**Number of substrings containing that index i char  (if Ci is vowel)=n+ (no of prefix substrings * no of suffix substrings )**\\n\\n\\nEg |\"bcaxy\"|=5\\ncalculating weight contributed to sum by char a=>\\n* prefix- |bc|=2, prefix strings ending with a= {ca,bca}=2\\n* suffix=|xy|=2, suffix strings starting with a= {ax,axy}=2\\n* {a}=1\\n* sum of above 3 terms=2+2+1=5=n\\n* substrings having char a in middle(having both a part of prefix substring and suffix substring=\\n2*2=4\\n{cax,caxy,bcax,bcaxy}\\nans=n+2*2=5+2*2=9\\n\\n```\\n long long countVowels(string word) {\\n        int n=word.size();\\n        long long sum=0;\\n        for(int j=0;j<n;j++){\\n            if(word[j]==\\'a\\'||word[j]==\\'e\\'||word[j]==\\'i\\'||word[j]==\\'o\\'||word[j]==\\'u\\'){\\n                if(j==0||j==n-1){\\n                    sum+=n;\\n                }\\n                else\\n                sum+= n+((long long)j)*(n-j-1);\\n            }\\n        }\\n        return sum;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n long long countVowels(string word) {\\n        int n=word.size();\\n        long long sum=0;\\n        for(int j=0;j<n;j++){\\n            if(word[j]==\\'a\\'||word[j]==\\'e\\'||word[j]==\\'i\\'||word[j]==\\'o\\'||word[j]==\\'u\\'){\\n                if(j==0||j==n-1){\\n                    sum+=n;\\n                }\\n                else\\n                sum+= n+((long long)j)*(n-j-1);\\n            }\\n        }\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1565365,
                "title": "c-2063-vowels-of-all-substrings",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long ans = 0; \\n        string vowel = \"aeiou\"; \\n        for (long i = 0; i < word.size(); ++i) \\n            if (vowel.find(word[i]) != string::npos)\\n                ans += (i+1)*(word.size()-i); \\n        return ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long ans = 0; \\n        string vowel = \"aeiou\"; \\n        for (long i = 0; i < word.size(); ++i) \\n            if (vowel.find(word[i]) != string::npos)\\n                ans += (i+1)*(word.size()-i); \\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1565218,
                "title": "javascript-easy-solution-o-n",
                "content": "```\\n// Save vowels in a set\\nconst VOWELS = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\n\\n/**\\n * @param {string} word\\n * @return {number}\\n */\\nconst countVowels = function(word) {\\n  let count = 0;\\n\\n  const length = word.length;\\n  // Return diretly if the word is empty\\n   if (!length) {\\n     return count;\\n   }\\n\\n   \\n   for (let i = 0; i < length; i += 1) {\\n\\t // Continue if current letter is not a vowel\\n     if (!VOWELS.has(word[i])) {\\n       continue;\\n     }\\n\\n     const left = i;\\n     const right = length - 1 - i;\\n\\t // Otherwise calculate how many substrings it appears in and add the number to the count\\n     count += length + left * right;\\n   }\\n\\n   return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Save vowels in a set\\nconst VOWELS = new Set([\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\']);\\n\\n/**\\n * @param {string} word\\n * @return {number}\\n */\\nconst countVowels = function(word) {\\n  let count = 0;\\n\\n  const length = word.length;\\n  // Return diretly if the word is empty\\n   if (!length) {\\n     return count;\\n   }\\n\\n   \\n   for (let i = 0; i < length; i += 1) {\\n\\t // Continue if current letter is not a vowel\\n     if (!VOWELS.has(word[i])) {\\n       continue;\\n     }\\n\\n     const left = i;\\n     const right = length - 1 - i;\\n\\t // Otherwise calculate how many substrings it appears in and add the number to the count\\n     count += length + left * right;\\n   }\\n\\n   return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1565204,
                "title": "simple-and-short-c-approach",
                "content": "bool check(char x){\\n        \\n        \\n        if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\' || x==\\'u\\') return true;\\n        else return false;\\n    }\\n    long long countVowels(string word) {\\n        \\n        long long ans=0;\\n        \\n        \\n        for(int i=0;i<word.size();i++)\\n        {\\n            \\n            if(check(word[i])){\\n                ans+=((i+1)*(word.size() -i));\\n            }\\n        }\\n        return ans;\\n    }```\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1564870,
                "title": "c-very-short-solution-one-optimized-solution-but-still-tle",
                "content": "\\t//Use of Little Math\\n\\tclass Solution {\\n\\tpublic:\\n    long long countVowels(string word) {\\n        double count=0;\\n        double n=word.size();\\n        for(double i=0;i<n;++i){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n                count+=((i+1)*(n-i));\\n        }\\n        return count;\\n\\t\\t}\\n\\t};\\n\\t\\n\\t//Optimized Solution But still got TLE\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n    long long countVowels(string word) {\\n         unordered_map<char,int> m1;\\n        m1[\\'a\\']=1;\\n        m1[\\'e\\']=1;\\n        m1[\\'i\\']=1;\\n        m1[\\'o\\']=1;\\n        m1[\\'u\\']=1; \\n                //count//lastIndex\\n        vector<pair<int,int>> v;\\n        double ans=0;\\n        for(int i=0;i<word.size();++i){\\n            int len=v.size();\\n            vector<pair<int,int>> temp;\\n            for(int j=0;j<len;++j){\\n                //if(v[j].second==i-1){\\n                    if(m1.find(word[i])!=m1.end()){\\n                        int count=v[j].first+1;\\n                        int lastIndex=i;\\n                        ans+=count;\\n                        temp.push_back({count,lastIndex});\\n                    } else{\\n                        int count=v[j].first;\\n                        int lastIndex=i;\\n                        ans+=count;\\n                        temp.push_back({count,lastIndex});\\n                    }\\n            }\\n            if(m1.find(word[i])!=m1.end()){\\n                temp.push_back({1,i});\\n                ans++;\\n            }\\n            else temp.push_back({0,i});\\n            v=temp;\\n        }\\n        return ans;\\n    }\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n    long long countVowels(string word) {\\n        double count=0;\\n        double n=word.size();\\n        for(double i=0;i<n;++i){\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n                count+=((i+1)*(n-i));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1564858,
                "title": "python-3-two-prefix-sums",
                "content": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        \\n        # mark vowel\\n        # \\'aba\\' vowels = [1, 0, 1]\\n        vowels = list(map(lambda x: int(x in \\'aeiou\\'), word))\\n        \\n        # add vowel count in each substring\\n        # acc = [0, 1, 1, 2]\\n        acc = list(accumulate(vowels, initial=0))\\n        \\n        # add up vowel count\\n        # acc2 = [0, 1, 2, 4]\\n        acc2 = list(accumulate(acc))\\n\\n        \\n        ans = 0\\n        for i in range(n+1):\\n            # add up accumulative vowel count in substring start from index i\\n            ans += acc2[-1] - acc2[i]\\n            # subtract previous vowel counts from current substrings\\n            if i > 0:\\n                ans -= (acc[i-1]) * (len(acc2) - i)\\n        \\n        return ans",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        \\n        # mark vowel\\n        # \\'aba\\' vowels = [1, 0, 1]\\n        vowels = list(map(lambda x: int(x in \\'aeiou\\'), word))\\n        \\n        # add vowel count in each substring\\n        # acc = [0, 1, 1, 2]\\n        acc = list(accumulate(vowels, initial=0))\\n        \\n        # add up vowel count\\n        # acc2 = [0, 1, 2, 4]\\n        acc2 = list(accumulate(acc))\\n\\n        \\n        ans = 0\\n        for i in range(n+1):\\n            # add up accumulative vowel count in substring start from index i\\n            ans += acc2[-1] - acc2[i]\\n            # subtract previous vowel counts from current substrings\\n            if i > 0:\\n                ans -= (acc[i-1]) * (len(acc2) - i)\\n        \\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 1564108,
                "title": "java-easy-solution-o-n-with-explanation",
                "content": "To find number of substrings which have a vowel at index i:\\n\\n\\t\\t\\tsubstrings ending with index i:                   i\\n\\t\\t\\tsubstrings starting with index i:                 n - i\\n\\t\\t\\tsubstrings contains index i in the middle:  i * (n - i - 1) \\n\\t\\t\\t\\n\\t\\t\\tSo total will be addition of all : i + (n-i) + (i*(n-i-1)) \\n\\t\\t\\t\\nSolution:\\n```\\npublic long countVowels(String word) {\\n        long n = (long)word.length();\\n        long ans = 0;\\n        for (int i=0; i<n; i++) {\\n            char c = word.charAt(i);\\n            if (\"aeiou\".indexOf(c) >= 0) {\\n                ans += i;\\n                ans += (n - i);\\n                ans += i * (n - i - 1);\\n            }\\n        }\\n        return ans;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic long countVowels(String word) {\\n        long n = (long)word.length();\\n        long ans = 0;\\n        for (int i=0; i<n; i++) {\\n            char c = word.charAt(i);\\n            if (\"aeiou\".indexOf(c) >= 0) {\\n                ans += i;\\n                ans += (n - i);\\n                ans += i * (n - i - 1);\\n            }\\n        }\\n        return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1563896,
                "title": "can-anyone-explain-my-approach-easy-o-n-simplest-solution-python",
                "content": "\\n\\t\\n        c=0\\n        ans=0\\n        for i in range(len(word)):\\n            if word[i] in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']:\\n                c+=1      # for all substrings from this point, vowels accumulated\\n                c+=i      # for all substrings till this point, the count of vowel is accumulated\\n            ans+=c\\n        return ans\\n\\t\\t\\n\\t\\t#Comment down a good explanation for this code please.\\n       \\n\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n\\t\\n        c=0\\n        ans=0\\n        for i in range(len(word)):\\n            if word[i] in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']:\\n                c+=1      # for all substrings from this point, vowels accumulated\\n                c+=i      # for all substrings till this point, the count of vowel is accumulated\\n            ans+=c\\n        return ans\\n\\t\\t\\n\\t\\t#Comment down a good explanation for this code please.\\n       \\n\\t\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1563798,
                "title": "c-o-n-explained",
                "content": "Idea: The idea is to use a prefix sum array-based technique where we store the occurrences of each character in all the substrings concatenated. \\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long n = s.length();\\n        vector<long long> v;\\n\\n        for (long long i = 0; i < n; i++) {\\n            // No. of occurrences of 0th character\\n            // in all the substrings\\n            if (i == 0)\\n                v.push_back(n);\\n            else\\n                // No. of occurrences of the ith character\\n            // in all the substrings\\n\\t\\t\\t//For each of the following characters, we store the no. of substrings starting with that character + the number of //substrings formed by the previous characters containing this character \\u2013 the number of substrings formed by the previous //characters only.\\n                v.push_back((n - i) + v[i - 1] - i);\\n        }\\n\\n        long long sum = 0;\\n        for (int i = 0; i < n; i++)\\n            if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'\\n                || s[i] == \\'o\\' || s[i] == \\'u\\')\\n                sum += v[i];\\n    // Return the total sum\\n        // of occurrences of vowels\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        long long n = s.length();\\n        vector<long long> v;\\n\\n        for (long long i = 0; i < n; i++) {\\n            // No. of occurrences of 0th character\\n            // in all the substrings\\n            if (i == 0)\\n                v.push_back(n);\\n            else\\n                // No. of occurrences of the ith character\\n            // in all the substrings\\n\\t\\t\\t//For each of the following characters, we store the no. of substrings starting with that character + the number of //substrings formed by the previous characters containing this character \\u2013 the number of substrings formed by the previous //characters only.\\n                v.push_back((n - i) + v[i - 1] - i);\\n        }\\n\\n        long long sum = 0;\\n        for (int i = 0; i < n; i++)\\n            if (s[i] == \\'a\\' || s[i] == \\'e\\' || s[i] == \\'i\\'\\n                || s[i] == \\'o\\' || s[i] == \\'u\\')\\n                sum += v[i];\\n    // Return the total sum\\n        // of occurrences of vowels\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563795,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        vector<int> pos;\\n        for(int i=0;i<word.size();i++){\\n             char x=word[i];\\n            if (x == \\'a\\' || x == \\'e\\' || x == \\'i\\' ||  x == \\'o\\' || x == \\'u\\') pos.push_back(i);\\n        }\\n        \\n        long long ans=0;\\n        long long sum1=0,sum2=0;\\n        \\n        for(int j=0;j<pos.size();j++){\\n            \\n            sum1=sum1+pos[j];\\n            if(j!=0) sum1=sum1-pos[j-1];\\n            else sum1++;\\n            \\n            sum2=sum2+sum1;\\n            long long temp;\\n            if(j==pos.size()-1) temp=word.size()-pos[j];\\n            else temp=pos[j+1]-pos[j];\\n            \\n            //cout<<sum1<<\" \"<<sum2<<\" \"<<pos[j]<<\" \"<<temp<<\"\\\\n\";\\n            ans=ans+sum2*temp;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        vector<int> pos;\\n        for(int i=0;i<word.size();i++){\\n             char x=word[i];\\n            if (x == \\'a\\' || x == \\'e\\' || x == \\'i\\' ||  x == \\'o\\' || x == \\'u\\') pos.push_back(i);\\n        }\\n        \\n        long long ans=0;\\n        long long sum1=0,sum2=0;\\n        \\n        for(int j=0;j<pos.size();j++){\\n            \\n            sum1=sum1+pos[j];\\n            if(j!=0) sum1=sum1-pos[j-1];\\n            else sum1++;\\n            \\n            sum2=sum2+sum1;\\n            long long temp;\\n            if(j==pos.size()-1) temp=word.size()-pos[j];\\n            else temp=pos[j+1]-pos[j];\\n            \\n            //cout<<sum1<<\" \"<<sum2<<\" \"<<pos[j]<<\" \"<<temp<<\"\\\\n\";\\n            ans=ans+sum2*temp;\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1563794,
                "title": "python-dynamic-programming",
                "content": "start from the last position. that will be our base case. then count and store number of vowels.\\n\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        # count and store number of vowels\\n        dp = [0] * (len(word)+1)\\n        for i in range(len(word)-1, -1, -1):\\n            if word[i] in \"aeiou\":\\n                dp[i] = dp[i+1] + len(word)-i\\n            else:\\n                dp[i] = dp[i+1]\\n        return sum(dp)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        # count and store number of vowels\\n        dp = [0] * (len(word)+1)\\n        for i in range(len(word)-1, -1, -1):\\n            if word[i] in \"aeiou\":\\n                dp[i] = dp[i+1] + len(word)-i\\n            else:\\n                dp[i] = dp[i+1]\\n        return sum(dp)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563741,
                "title": "clear-java-dp-solution",
                "content": "dp[i] will be the sum of count vowels of substring ending with index i (1-indexed), consider from \"abc\" to \"abcd\"\\nSubstring end with \"c\": c, bc, abc\\nSubstring end with \"d\": d, cd, bcd, abcd => (c, bc, abc) + d * 4\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long[] dp = new long[word.length()+1];\\n        Set<Character> set = new HashSet<>(Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'));\\n        long res = 0;\\n        for (int i = 1; i < dp.length; i++) {\\n            dp[i] = dp[i-1] + i * (set.contains(word.charAt(i-1)) ? 1 : 0);\\n            res += dp[i];\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long[] dp = new long[word.length()+1];\\n        Set<Character> set = new HashSet<>(Arrays.asList(\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'));\\n        long res = 0;\\n        for (int i = 1; i < dp.length; i++) {\\n            dp[i] = dp[i-1] + i * (set.contains(word.charAt(i-1)) ? 1 : 0);\\n            res += dp[i];\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563729,
                "title": "o-n-solution-c",
                "content": "The Algo:\\na. Compute the sum of all vowels present in a string if we start from ```i```th position.\\nb. For ```i + 1```, we can compute this sum with the help of ```i```  Answer by sustracting the contribution of last character. (In case, last char was a consonant, contribution will be 0)\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) \\n    {\\n        int noVowel = 0;\\n        long long sum = 0;\\n        for(auto a : word)\\n        {\\n            if(a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\')\\n                noVowel++;\\n            sum += noVowel;\\n        }\\n        \\n        int l = word.length();\\n        long long ans = sum;\\n        for(int i = 1; i < word.length(); i++)\\n        {\\n            if(word[i - 1] == \\'a\\' || word[i - 1] == \\'e\\' || word[i - 1] == \\'i\\' || word[i - 1] == \\'o\\' || word[i - 1] == \\'u\\')\\n                sum -= (l - i + 1);\\n            ans += sum;\\n        }\\n        return ans;\\n            \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```i```\n```i + 1```\n```i```\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) \\n    {\\n        int noVowel = 0;\\n        long long sum = 0;\\n        for(auto a : word)\\n        {\\n            if(a == \\'a\\' || a == \\'e\\' || a == \\'i\\' || a == \\'o\\' || a == \\'u\\')\\n                noVowel++;\\n            sum += noVowel;\\n        }\\n        \\n        int l = word.length();\\n        long long ans = sum;\\n        for(int i = 1; i < word.length(); i++)\\n        {\\n            if(word[i - 1] == \\'a\\' || word[i - 1] == \\'e\\' || word[i - 1] == \\'i\\' || word[i - 1] == \\'o\\' || word[i - 1] == \\'u\\')\\n                sum -= (l - i + 1);\\n            ans += sum;\\n        }\\n        return ans;\\n            \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057498,
                "title": "easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0;\\n        long temp = 0;\\n        for (int i = 0; i < word.length(); i++){\\n            if (word.charAt(i) == \\'a\\' || word.charAt(i) == \\'e\\' || word.charAt(i) == \\'i\\' || word.charAt(i) == \\'o\\' || word.charAt(i) == \\'u\\'){\\n                temp += i + 1;\\n            }\\n            res += temp;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0;\\n        long temp = 0;\\n        for (int i = 0; i < word.length(); i++){\\n            if (word.charAt(i) == \\'a\\' || word.charAt(i) == \\'e\\' || word.charAt(i) == \\'i\\' || word.charAt(i) == \\'o\\' || word.charAt(i) == \\'u\\'){\\n                temp += i + 1;\\n            }\\n            res += temp;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048842,
                "title": "easy-c-solution-o-n-tc-o-1-sc",
                "content": "# **Concept**\\nInstead of computing every substring and finding vowels there, we can calculate how many substrings ( where a particular vowel is appearing) are there. \\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char &c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    long long countVowels(string word) {\\n        long long ans = 0, n = word.length();\\n        for(long long i=0;i<n;i++) {\\n            if(isVowel(word[i])) {\\n                ans += ((i + 1) * (n - i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Please upvote if you have got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char &c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n    long long countVowels(string word) {\\n        long long ans = 0, n = word.length();\\n        for(long long i=0;i<n;i++) {\\n            if(isVowel(word[i])) {\\n                ans += ((i + 1) * (n - i));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036766,
                "title": "clean-and-intuitive-java-code-logic-explained-bruteforce-optimal-very-easy-to-understand",
                "content": "# Code\\n\\n```\\n//Bruteforce Approach\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n      int n=word.length();\\n      long sum=0L;\\n\\n      for(int i=0;i<n;i++)\\n        for(int j=i;j<n;j++)\\n          sum+=sumVowels(word,i,j);\\n\\n      return sum;\\n    }\\n\\n    public long sumVowels(String str,int start,int end)\\n    {\\n      long cnt=0;\\n      while(start<=end)\\n      {\\n\\n        if(start==end)\\n        {\\n          if(isVowel(str.charAt(start)))\\n            cnt++;\\n        }\\n        else\\n        {\\n         if(isVowel(str.charAt(start)))\\n          cnt++;\\n\\n         if(isVowel(str.charAt(end)))\\n          cnt++;\\n        }\\n\\n        start++;\\n        end--;\\n\\n      }\\n\\n     return cnt;\\n    }\\n\\n    public boolean isVowel(char ch)\\n    {\\n      if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        return true;\\n      return false;\\n    }\\n}\\n\\n```\\n\\n```\\n\\n/*\\nLOGIC: \\n\\nstr=\"abcd\"\\n\\nAll substrings :\\n\\n\"a\" , \"ab\", \"abc\", \"abcd\"\\n\\n\"b\",  \"bc\", \"bcd\"\\n\\n\"c\", \"cd\"\\n\\n\"d\"\\n\\n\\n\\'a\\' Appears 4 times : (n-0) + (n-0)*0\\n\\n\\'b\\' Appears 6 times : (n-1) + (n-1)*1\\n\\n\\'c\\' Appears 6 times : (n-2) + (n-2)*2\\n\\n\\'d\\' Appears 4 times : (n-3) + (n-3)*3\\n\\nGeneralised formula:\\n\\ncount of arr[i]= (n-i)+(n-i)*i\\ncount of arr[i]= (n-i)*(1+(1*i))\\ncount of arr[i]= (n-i)*(i+1)\\n                      \\n*/\\n\\n//Optimal Approach\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n      int n=word.length();\\n      long sum=0L;\\n\\n      for(int i=0;i<n;i++)\\n        if(isVowel(word.charAt(i)))\\n          sum+=(long)(i + 1) * (n - i);\\n\\n      return sum;\\n    }\\n\\n    public boolean isVowel(char ch)\\n    {\\n      if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        return true;\\n      return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Two Pointers",
                    "String",
                    "Iterator"
                ],
                "code": "```\\n//Bruteforce Approach\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n      int n=word.length();\\n      long sum=0L;\\n\\n      for(int i=0;i<n;i++)\\n        for(int j=i;j<n;j++)\\n          sum+=sumVowels(word,i,j);\\n\\n      return sum;\\n    }\\n\\n    public long sumVowels(String str,int start,int end)\\n    {\\n      long cnt=0;\\n      while(start<=end)\\n      {\\n\\n        if(start==end)\\n        {\\n          if(isVowel(str.charAt(start)))\\n            cnt++;\\n        }\\n        else\\n        {\\n         if(isVowel(str.charAt(start)))\\n          cnt++;\\n\\n         if(isVowel(str.charAt(end)))\\n          cnt++;\\n        }\\n\\n        start++;\\n        end--;\\n\\n      }\\n\\n     return cnt;\\n    }\\n\\n    public boolean isVowel(char ch)\\n    {\\n      if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        return true;\\n      return false;\\n    }\\n}\\n\\n```\n```\\n\\n/*\\nLOGIC: \\n\\nstr=\"abcd\"\\n\\nAll substrings :\\n\\n\"a\" , \"ab\", \"abc\", \"abcd\"\\n\\n\"b\",  \"bc\", \"bcd\"\\n\\n\"c\", \"cd\"\\n\\n\"d\"\\n\\n\\n\\'a\\' Appears 4 times : (n-0) + (n-0)*0\\n\\n\\'b\\' Appears 6 times : (n-1) + (n-1)*1\\n\\n\\'c\\' Appears 6 times : (n-2) + (n-2)*2\\n\\n\\'d\\' Appears 4 times : (n-3) + (n-3)*3\\n\\nGeneralised formula:\\n\\ncount of arr[i]= (n-i)+(n-i)*i\\ncount of arr[i]= (n-i)*(1+(1*i))\\ncount of arr[i]= (n-i)*(i+1)\\n                      \\n*/\\n\\n//Optimal Approach\\n\\nclass Solution {\\n    public long countVowels(String word) {\\n      int n=word.length();\\n      long sum=0L;\\n\\n      for(int i=0;i<n;i++)\\n        if(isVowel(word.charAt(i)))\\n          sum+=(long)(i + 1) * (n - i);\\n\\n      return sum;\\n    }\\n\\n    public boolean isVowel(char ch)\\n    {\\n      if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n        return true;\\n      return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035540,
                "title": "easy-to-understand-solution-in-java-using-combinatorics",
                "content": "\\n# Approach\\nsimilar math approach to  sum of subarray minimum.\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n//     public long countVowels(String word) {\\n//     long res = 0, sz = word.length();\\n//     for (int i = 0; i < sz; ++i)\\n//         if (\"aeiou\".indexOf(word.charAt(i)) != -1)\\n//             res += (i + 1) * (sz - i);\\n//     return res;        \\n// }\\n    public long countVowels(String word) {\\n        long n = word.length();\\n        long count=0;\\n        HashSet<Character> set = new HashSet();\\n        set.add(\\'a\\'); set.add(\\'e\\'); set.add(\\'i\\'); set.add(\\'o\\'); set.add(\\'u\\');\\n        for(int i=0;i<n;i++)\\n        {\\n            if(set.contains(word.charAt(i)))\\n            // if(\"aeiou\".indexOf(word.charAt(i))>=0)\\n                count += (i+1)*(n-i);\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n//     public long countVowels(String word) {\\n//     long res = 0, sz = word.length();\\n//     for (int i = 0; i < sz; ++i)\\n//         if (\"aeiou\".indexOf(word.charAt(i)) != -1)\\n//             res += (i + 1) * (sz - i);\\n//     return res;        \\n// }\\n    public long countVowels(String word) {\\n        long n = word.length();\\n        long count=0;\\n        HashSet<Character> set = new HashSet();\\n        set.add(\\'a\\'); set.add(\\'e\\'); set.add(\\'i\\'); set.add(\\'o\\'); set.add(\\'u\\');\\n        for(int i=0;i<n;i++)\\n        {\\n            if(set.contains(word.charAt(i)))\\n            // if(\"aeiou\".indexOf(word.charAt(i))>=0)\\n                count += (i+1)*(n-i);\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018095,
                "title": "c-math-greedy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long sz=word.size(),sum=0;\\n        for(int i=0;i<sz;i++)\\n          {\\n        \\n          \\n               char ch=word[i];\\n               if(ch==\\'a\\' ||ch==\\'e\\'||ch==\\'i\\' ||ch==\\'o\\'||ch==\\'u\\')\\n                           {\\n                             long long left=i+1;\\n                             long long right=sz-i;\\n                              \\n                             sum=sum+(long long)left*right;\\n                           }\\n              \\n             \\n          }\\n          return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n        long long sz=word.size(),sum=0;\\n        for(int i=0;i<sz;i++)\\n          {\\n        \\n          \\n               char ch=word[i];\\n               if(ch==\\'a\\' ||ch==\\'e\\'||ch==\\'i\\' ||ch==\\'o\\'||ch==\\'u\\')\\n                           {\\n                             long long left=i+1;\\n                             long long right=sz-i;\\n                              \\n                             sum=sum+(long long)left*right;\\n                           }\\n              \\n             \\n          }\\n          return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013171,
                "title": "very-simple-o-n-and-constant-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        int n=word.size();\\n        long long sum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'o\\' || word[i]==\\'i\\' || word[i]==\\'u\\')\\n            {\\n              sum=sum+i+1;\\n              ans=ans+sum;\\n            }\\n            else\\n            { \\n              ans=ans+sum;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        int n=word.size();\\n        long long sum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'o\\' || word[i]==\\'i\\' || word[i]==\\'u\\')\\n            {\\n              sum=sum+i+1;\\n              ans=ans+sum;\\n            }\\n            else\\n            { \\n              ans=ans+sum;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997121,
                "title": "vowels-of-all-substrings-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long res = 0, prev = 0;\\n        for(int i=0; i<word.length(); i++) {\\n            char c = word.charAt(i);\\n            if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n                prev += i + 1;\\n            res += prev;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994339,
                "title": "simple-maths",
                "content": "\\n# Approach\\njust check, in  how many substrings that vowel is appears.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n![IMG_20230903_030517.jpg](https://assets.leetcode.com/users/images/e721f39c-dfdb-4ee6-9d03-ba5d641c5a30_1693690572.556952.jpeg)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        //(i+1)*(n-i)\\n        long long ans = 0, n = s.length();\\n        for(long long i = 0; i < s.length(); i++){\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                ans = ans + (i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string s) {\\n        //(i+1)*(n-i)\\n        long long ans = 0, n = s.length();\\n        for(long long i = 0; i < s.length(); i++){\\n            if(s[i]==\\'a\\'||s[i]==\\'e\\'||s[i]==\\'i\\'||s[i]==\\'o\\'||s[i]==\\'u\\'){\\n                ans = ans + (i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3935007,
                "title": "beat-100-most-efficient-python-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n    \\n        Sum, length = 0, len(word)\\n        dic = {\\'a\\':1, \\'e\\':1,\\'i\\':1,\\'o\\':1,\\'u\\':1}\\n        \\n        for i in range(length):\\n                if word[i] in dic:\\n                    Sum += (length-i)*(i+1)\\n        return Sum\\n\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n    \\n        Sum, length = 0, len(word)\\n        dic = {\\'a\\':1, \\'e\\':1,\\'i\\':1,\\'o\\':1,\\'u\\':1}\\n        \\n        for i in range(length):\\n                if word[i] in dic:\\n                    Sum += (length-i)*(i+1)\\n        return Sum\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3910177,
                "title": "easy-4-liner-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        \\n        int n=word.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n            {\\n                ans+=(i+1)*1LL*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans=0;\\n        \\n        int n=word.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n            {\\n                ans+=(i+1)*1LL*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3893380,
                "title": "o-n-solution-contribution-of-each-vowel-easy-to-understand",
                "content": "\\n\\n# Approach\\nFind the contribution of each vowel to the answer by finding all subarrays that contains that particular vowel.\\n\\nNumber of subarrays containing a vowel at index i:\\n> #elements before i (including i) * #elements after i(including i)\\n\\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n            return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        long long answer = 0;\\n        for(int i = 0; i < word.size(); i++){\\n            if(isVowel(word[i])){\\n                long long count = (i + 1) * (word.size()-i);\\n                answer += count;\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char c){\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\')\\n            return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        long long answer = 0;\\n        for(int i = 0; i < word.size(); i++){\\n            if(isVowel(word[i])){\\n                long long count = (i + 1) * (word.size()-i);\\n                answer += count;\\n            }\\n        }\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864615,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res=0;\\n        long long n=word.size();\\n        unordered_map<int,int>m;\\n        m[\\'a\\']=1;\\n        m[\\'e\\']=1;\\n        m[\\'i\\']=1;\\n        m[\\'o\\']=1;\\n        m[\\'u\\']=1;\\n        for(long long i=0;i<n;i++){\\n            if(m[word[i]]==1) res+=(i+1)*(n-i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res=0;\\n        long long n=word.size();\\n        unordered_map<int,int>m;\\n        m[\\'a\\']=1;\\n        m[\\'e\\']=1;\\n        m[\\'i\\']=1;\\n        m[\\'o\\']=1;\\n        m[\\'u\\']=1;\\n        for(long long i=0;i<n;i++){\\n            if(m[word[i]]==1) res+=(i+1)*(n-i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841885,
                "title": "2063-vowels-of-all-substrings-using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: n O(log n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long len = word.length();\\n        long out=0;\\n        for(int i=0;i<len;i++){\\n            char x = word.charAt(i);\\n\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\'|| x==\\'u\\'){\\n                out+=(i+1)*(len-i);\\n            }\\n        }\\n        return out;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String",
                    "Dynamic Programming",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long len = word.length();\\n        long out=0;\\n        for(int i=0;i<len;i++){\\n            char x = word.charAt(i);\\n\\n            if(x==\\'a\\' || x==\\'e\\' || x==\\'i\\' || x==\\'o\\'|| x==\\'u\\'){\\n                out+=(i+1)*(len-i);\\n            }\\n        }\\n        return out;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3771211,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        return sum([(len(word)-i)*(i+1) for i in range(len(word)) if word[i] in \\'aeiou\\'])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        return sum([(len(word)-i)*(i+1) for i in range(len(word)) if word[i] in \\'aeiou\\'])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3709050,
                "title": "simple-c-solution-5-lines-code-with-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size(), res = 0;\\n        for( int i = 0; i<n; i++ ) {\\n            if( word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\') {\\n                res += (i+1)*(n-i);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size(), res = 0;\\n        for( int i = 0; i<n; i++ ) {\\n            if( word[i]==\\'a\\' || word[i]==\\'e\\' || word[i]==\\'i\\' || word[i]==\\'o\\' || word[i]==\\'u\\') {\\n                res += (i+1)*(n-i);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3665956,
                "title": "detail-explanation-just-by-sum-n-i-o-n-solution-c-best-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    #define int2 long long\\n    /* \\n     when ever there is a vowel coming this thing would happen.\\n     if previous substrings were like below then\\n           -----\\n           ----\\n           ---\\n           --\\n           -\\n           our  vowel at index i will add (n-i) vowels in the upcoming streams and the substrings will\\n           become like this.\\n           ------\\n           -----\\n           ----\\n           ---\\n           --\\n           -\\n           (so if preivous substring sum is (sum ) then sum = (sum + n-i))\\n           if character at ith index is not vowel then answer remain same.\\n           \\n           ans += sum.\\n    */\\n    long long countVowels(string word) {\\n        int2 ans = 0;\\n        int2 sum = 0;\\n        int n = word.size();\\n        for(int i = n-1;i>=0;i--){\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\'){\\n                sum += (n-i);\\n            }\\n            ans += sum;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    #define int2 long long\\n    /* \\n     when ever there is a vowel coming this thing would happen.\\n     if previous substrings were like below then\\n           -----\\n           ----\\n           ---\\n           --\\n           -\\n           our  vowel at index i will add (n-i) vowels in the upcoming streams and the substrings will\\n           become like this.\\n           ------\\n           -----\\n           ----\\n           ---\\n           --\\n           -\\n           (so if preivous substring sum is (sum ) then sum = (sum + n-i))\\n           if character at ith index is not vowel then answer remain same.\\n           \\n           ans += sum.\\n    */\\n    long long countVowels(string word) {\\n        int2 ans = 0;\\n        int2 sum = 0;\\n        int n = word.size();\\n        for(int i = n-1;i>=0;i--){\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\'){\\n                sum += (n-i);\\n            }\\n            ans += sum;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3645396,
                "title": "c-math-easy-solution-with-explanation",
                "content": "# Approach\\n- One vowel contributes **1 * (number of substrings the vowel appears in)** in the total sum.\\n- Hence we need to count the number of substrings the vowel appears in and add that to final answer.\\n- Example string- **bcdefcdag**\\n- Here the number of strings \\'e\\' is contained in are de, cde, bcde, e, ef, efc, efcd, efcda, efcdag and then the merged strings of right and left half like- def, cdef,bcdef etc., hence this can be counted as -\\n- **sum1 = i+1** where i is index of \\'e\\', this will give the left half of strings and **sum2 = n-i-1** for right half and then for merged, **sum3 = (sum1-1) * sum2**.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel(char &c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')\\n        return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        long long sum = 0;\\n        int n = word.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(isVowel(word[i]))\\n            {\\n                long long sum1 = i+1;\\n                long long sum2 = n-1-i;\\n                long long sum3 = (sum1-1)*sum2;\\n                sum+=sum1+sum2+sum3;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel(char &c)\\n    {\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\')\\n        return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        long long sum = 0;\\n        int n = word.size();\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            if(isVowel(word[i]))\\n            {\\n                long long sum1 = i+1;\\n                long long sum2 = n-1-i;\\n                long long sum3 = (sum1-1)*sum2;\\n                sum+=sum1+sum2+sum3;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3628595,
                "title": "swift-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach: \\nDont check all the Substrings, check all the vowels, and calculate the associated substrings! ( Delightful idea :) )\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    \\n    // Dont check all the Substrings, check all the vowels, and calculate the associated substrings! ( Delight full idea :) )\\n    func countVowels(_ word: String) -> Int {\\n        var count = word.count\\n        var sum = 0\\n        var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n\\n        for (index, char) in word.enumerated() where vowels.contains(char) {\\n            sum += (index + 1) * (count - index)\\n        }\\n\\n        return sum\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    \\n    // Dont check all the Substrings, check all the vowels, and calculate the associated substrings! ( Delight full idea :) )\\n    func countVowels(_ word: String) -> Int {\\n        var count = word.count\\n        var sum = 0\\n        var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\\n\\n        for (index, char) in word.enumerated() where vowels.contains(char) {\\n            sum += (index + 1) * (count - index)\\n        }\\n\\n        return sum\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3611669,
                "title": "c-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nlong long countVowels(string w) {\\n        long long count = 0,len = w.size(),i;\\nfor(i= 0;i<len;i++) {\\nif(w[i]==\\'a\\' or w[i]== \\'e\\' or w[i]== \\'i\\' or w[i]== \\'o\\' or w[i] == \\'u\\') {\\n           count+=(len-i)*(i+1);\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nlong long countVowels(string w) {\\n        long long count = 0,len = w.size(),i;\\nfor(i= 0;i<len;i++) {\\nif(w[i]==\\'a\\' or w[i]== \\'e\\' or w[i]== \\'i\\' or w[i]== \\'o\\' or w[i] == \\'u\\') {\\n           count+=(len-i)*(i+1);\\n            }\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3607682,
                "title": "o-n-sol-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        long long res=0;\\n        for(long i=0; i<n; i++){\\n            char ch = word[i];\\n            if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n             res += (i+1)*(n-i);\\n        }\\n        return res; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        long long res=0;\\n        for(long i=0; i<n; i++){\\n            char ch = word[i];\\n            if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\')\\n             res += (i+1)*(n-i);\\n        }\\n        return res; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3600162,
                "title": "simple-maths-way-of-counting-in-subsets-problem-in-desired-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCommon method to find frequency of single element rather than finding subset to reduce time complexity by finding pattern.  \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRead the comments in code .\\nLook carefully the drawn pattern and its easy to get the answer through explanation.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nSingle traversal + a function returning answer in $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nOnly variables \\n\\n# Code\\n```\\nclass Solution {\\n    bool isVowel(char ch){\\n        return (ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\');\\n    }\\npublic:\\n    long long countVowels(string word) {\\n        long long cnt=0;\\n        int n = word.size();\\n\\n        for(long long i=0;i<n;i++){\\n            if(isVowel(word[i])) cnt+=(i+1)*(n-i);\\n                //   ( * * * * [ a ) * * * ]\\n                    //Select first point from any one dot in ( ) ==> i+1\\n                    //Select second point from [ ]  ==>  n-i\\n\\n                // Possible ways : (i+1)*(n-i);  //Counting \\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    bool isVowel(char ch){\\n        return (ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\' || ch==\\'o\\' || ch==\\'u\\');\\n    }\\npublic:\\n    long long countVowels(string word) {\\n        long long cnt=0;\\n        int n = word.size();\\n\\n        for(long long i=0;i<n;i++){\\n            if(isVowel(word[i])) cnt+=(i+1)*(n-i);\\n                //   ( * * * * [ a ) * * * ]\\n                    //Select first point from any one dot in ( ) ==> i+1\\n                    //Select second point from [ ]  ==>  n-i\\n\\n                // Possible ways : (i+1)*(n-i);  //Counting \\n        }\\n        \\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3592969,
                "title": "intuitive-easy-to-understand-solution-time-o-n-space-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nOur first intuition must be a O(n^2) solution which makes the every possible subset, then count the total number of vowel in it and then add to the counter.\\n\\nBut think some reverse look-up here. Instead of thinking as founding the every subset then counting vowel in it.\\nThink like for every character how much it contribute to the answer.\\n\\nfor example, input = \"aba\",\\n- (first a) a comes in substrings \"a\", \"ab\", \"aba\" -> contributes 1 each = 3\\n- b comes in substrings \"ab\", \"aba\", \"b\", \"ba\" -> contribute 0 each = 0\\n- (second a) a comes in substrings \"aba\", \"ba\", \"a\" -> contribute 1 each = 3\\n\\nAdding all give the answer 3 + 0 + 3 = 6.\\n\\nImportant points :\\n- Consonents won\\'t add. If consonent appear skip it.\\n- If vowel appear, we need to find to find in how many substring it can appear, this can be done in O(1).\\n- Two same characters are totally independent of other same characters, so we don\\'t have to care about \\'does other same character would contribute with current character ?\\'\\n- Answer can be big here, use \"long long int\" or any respective bigger data type to not get any overflow.\\n\\n![Sol.png](https://assets.leetcode.com/users/images/f044f1cc-4bbd-4c72-8a2a-b7a7af57ccb4_1685795143.2351522.png)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize counter cnt = 0.\\n2. Iterate i from 0 to n-1\\n    2.1. if word[i] is vowel, then add (i+1) * (n-i) to the cnt.\\n3. Return cnt\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$, as we only iterate for each character\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$, as we only use cnt and i variables, also we are using one function stack space as we are calling one isVowel() function. \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    bool isVowel(char c) {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') return true;\\n        return false;\\n    }\\npublic:\\n    long long countVowels(string word) {\\n        long long cnt = 0;\\n        for(int i=0 ; i<word.size() ; ++i)\\n            if(isVowel(word[i])) \\n                cnt += (i + 1)*(word.size() - i);\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String",
                    "Combinatorics",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    bool isVowel(char c) {\\n        if(c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\') return true;\\n        return false;\\n    }\\npublic:\\n    long long countVowels(string word) {\\n        long long cnt = 0;\\n        for(int i=0 ; i<word.size() ; ++i)\\n            if(isVowel(word[i])) \\n                cnt += (i + 1)*(word.size() - i);\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3559634,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\nboolean checker(char c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n\\n\\n    public long countVowels(String word) {\\n            long res = 0 , curr = 0;\\n        for (int i=0;i<word.length();i++){\\n            if (checker(word.charAt(i))){\\n                curr += (i+1);\\n            }\\n            res += curr;\\n        }\\n        return res;\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\nboolean checker(char c){\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n\\n\\n    public long countVowels(String word) {\\n            long res = 0 , curr = 0;\\n        for (int i=0;i<word.length();i++){\\n            if (checker(word.charAt(i))){\\n                curr += (i+1);\\n            }\\n            res += curr;\\n        }\\n        return res;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534182,
                "title": "counting",
                "content": "# Intuition\\nConsider an example: \"fgh**i**jklm\" with length of 8\\nThe substrings containing vowel will be:\\n1: i\\n2: h**i**, **i**j\\n3: gh**i**, h**i**j, **i**jk\\n4: fgh**i**, gh**i**j, h**i**jk, **i**jkl\\n5: fgh**i**j, gh**i**jk, h**i**jkl, **i**jklm\\n6: fgh**i**jk, gh**i**jkl, h**i**jklm\\n7: fgh**i**jkl, gh**i**jklm\\n8: fgh**i**jklm\\n\\nTotal 20 substrings satisfying our constraints. Easy to observe, if we take position of the letter **i**, and count to left-end and right-end, which are 3 and 4 in the example, the result is (3 + 1)*(4+1) = 20\\n\\nBy induction, it is easy to prove that the total number of substrings should be (L + 1)*(R + 1) where L/R is the length from the vowel positions to the left/right end\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nNow the rest is just coding: \\n1/ Find every positions $i$ of vowels in the strings.\\n2/ At each position, just sum up the amount $(L_{i} + 1) * (R_{i} + 1)$.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool is_vowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n\\n    long long countVowels(string word) {\\n        long long N = (long long)word.length();\\n        long long sum = 0LL;\\n        for (int i=0; i<N; i++) {\\n            if (is_vowel(word[i])) {\\n                sum += (long long)(i+1)*(N - i);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool is_vowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\';\\n    }\\n\\n    long long countVowels(string word) {\\n        long long N = (long long)word.length();\\n        long long sum = 0LL;\\n        for (int i=0; i<N; i++) {\\n            if (is_vowel(word[i])) {\\n                sum += (long long)(i+1)*(N - i);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3531377,
                "title": "in-how-many-substring-a-vowel-contributes",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res = 0, sum = 0;\\n        \\n        map<char, int> is_vowel;\\n        for (char ch : \"aeiou\") {\\n            is_vowel[ch]++;\\n        }\\n        \\n        int vowels = 0;\\n        for (char ch : word) {\\n            vowels += is_vowel[ch];\\n            sum += vowels;\\n        }\\n        \\n        for (int i = 0; i < word.size(); i++) {\\n            res += sum;\\n            if (is_vowel[word[i]]) {\\n                sum -= (word.size() - i); // substrings to which word[i] was contributing\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long res = 0, sum = 0;\\n        \\n        map<char, int> is_vowel;\\n        for (char ch : \"aeiou\") {\\n            is_vowel[ch]++;\\n        }\\n        \\n        int vowels = 0;\\n        for (char ch : word) {\\n            vowels += is_vowel[ch];\\n            sum += vowels;\\n        }\\n        \\n        for (int i = 0; i < word.size(); i++) {\\n            res += sum;\\n            if (is_vowel[word[i]]) {\\n                sum -= (word.size() - i); // substrings to which word[i] was contributing\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508456,
                "title": "kotlin-sliding-window",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    fun countVowels(word: String): Long {\\n        val vowels = arrayOf(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\').toSet()\\n        var result = 0L\\n        var accs = 0L\\n\\n        for (i in 0 until word.length) {\\n            if (vowels.contains(word[i])) {\\n                accs = accs + i + 1\\n            }\\n            result += accs\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun countVowels(word: String): Long {\\n        val vowels = arrayOf(\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\').toSet()\\n        var result = 0L\\n        var accs = 0L\\n\\n        for (i in 0 until word.length) {\\n            if (vowels.contains(word[i])) {\\n                accs = accs + i + 1\\n            }\\n            result += accs\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3490658,
                "title": "runtime-10-ms-beats-97-21-java-different-approach-explained",
                "content": "**# Intuition** and **# Approach**\\n    Eg : \\'aaaba\\'\\n    i=0 : Vc=1; SumOfNaturalNos(Vc)=1; Result/CumulativeSum = 1  ;\\n    i=1 : Vc=2; SumOfNaturalNos(Vc)=3; Result/CumulativeSum = 1+3=4;\\n    i=2 : Vc=3; SumOfNaturalNos(Vc)=6; Result/CumulativeSum = 4+6=10; \\n    i=3 : Bc=1; SumOfNaturalNos(Vc)=6; Result/CumulativeSum = 10+6=16;\\n    i=4 : Vc=4; SumOfNaturalNos(Vc)=10+BC=11; Result/CumulativeSum = 11+16=27;\\n\\n**# Complexity**\\n- Time complexity:\\n        O(N)\\n**# Code**\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n\\n        long vowelCount = 0;\\n        long sum = 0;\\n        long TotalSum = 0;\\n        long breakCount = 0;\\n        char ch[]=word.toCharArray();\\n        for(int i=0;i<ch.length;i++)\\n        {\\n            if(ch[i]==\\'a\\' || ch[i]==\\'e\\' || ch[i]==\\'i\\' || ch[i]==\\'o\\' || ch[i]==\\'u\\')\\n            {\\n                vowelCount++;\\n                sum = sum + vowelCount; // SumOfNaturalNos\\n                sum = sum + breakCount;\\n            }\\n            else\\n            {\\n                breakCount++;\\n            }\\n\\n            TotalSum = TotalSum + sum; //CumulativeSum\\n        }\\n\\n        return TotalSum;\\n      \\n    }\\n\\n    //NOT USED ; Logic for as usual dp calculation by word length\\n    public long dp1(String word)\\n    {\\n        int n = word.length();\\n        int dp[][] = new int[n][n];\\n        long sum = 0;\\n        for(int i=0;i<n;i++)\\n        {\\n           \\n            if(word.charAt(i)==\\'a\\' || word.charAt(i)==\\'e\\' || word.charAt(i)==\\'i\\'\\n                || word.charAt(i)==\\'o\\' || word.charAt(i)==\\'u\\')\\n            {\\n                 dp[i][i] = 1;\\n                 sum = sum +1;\\n            }\\n        }\\n        for(int l=2;l<=n;l++)\\n        {\\n            int i = 0;\\n            int j = l-1;\\n            while(j<n)\\n            {\\n                if(word.charAt(i)==\\'a\\' || word.charAt(i)==\\'e\\' || word.charAt(i)==\\'i\\'\\n                || word.charAt(i)==\\'o\\' || word.charAt(i)==\\'u\\')\\n                {\\n                    dp[i][j] = dp[i][j-1]+dp[i+1][j] - dp[i+1][j-1];\\n                    \\n                }\\n                else\\n                {\\n                    dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]);\\n                }\\n                sum = sum + dp[i][j];\\n                \\n                \\n                i++;\\n                j++;\\n            }\\n             \\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n\\n        long vowelCount = 0;\\n        long sum = 0;\\n        long TotalSum = 0;\\n        long breakCount = 0;\\n        char ch[]=word.toCharArray();\\n        for(int i=0;i<ch.length;i++)\\n        {\\n            if(ch[i]==\\'a\\' || ch[i]==\\'e\\' || ch[i]==\\'i\\' || ch[i]==\\'o\\' || ch[i]==\\'u\\')\\n            {\\n                vowelCount++;\\n                sum = sum + vowelCount; // SumOfNaturalNos\\n                sum = sum + breakCount;\\n            }\\n            else\\n            {\\n                breakCount++;\\n            }\\n\\n            TotalSum = TotalSum + sum; //CumulativeSum\\n        }\\n\\n        return TotalSum;\\n      \\n    }\\n\\n    //NOT USED ; Logic for as usual dp calculation by word length\\n    public long dp1(String word)\\n    {\\n        int n = word.length();\\n        int dp[][] = new int[n][n];\\n        long sum = 0;\\n        for(int i=0;i<n;i++)\\n        {\\n           \\n            if(word.charAt(i)==\\'a\\' || word.charAt(i)==\\'e\\' || word.charAt(i)==\\'i\\'\\n                || word.charAt(i)==\\'o\\' || word.charAt(i)==\\'u\\')\\n            {\\n                 dp[i][i] = 1;\\n                 sum = sum +1;\\n            }\\n        }\\n        for(int l=2;l<=n;l++)\\n        {\\n            int i = 0;\\n            int j = l-1;\\n            while(j<n)\\n            {\\n                if(word.charAt(i)==\\'a\\' || word.charAt(i)==\\'e\\' || word.charAt(i)==\\'i\\'\\n                || word.charAt(i)==\\'o\\' || word.charAt(i)==\\'u\\')\\n                {\\n                    dp[i][j] = dp[i][j-1]+dp[i+1][j] - dp[i+1][j-1];\\n                    \\n                }\\n                else\\n                {\\n                    dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]);\\n                }\\n                sum = sum + dp[i][j];\\n                \\n                \\n                i++;\\n                j++;\\n            }\\n             \\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486703,
                "title": "python-how-does-it-work-for-dummies",
                "content": "Let\\'s analyze what\\'s going on with a few examples:\\n\\nExample #1:\\n```\\na\\u2081 a\\u2082 a\\u2083\\n```\\n\\nLet\\'s count substrings ending @ end:\\n```\\na\\u2081 a\\u2082 a\\u2083\\n|\\nend -> \\'a\\u2081\\', total: 0 + 1 = 1\\n\\na\\u2081 a\\u2082 a\\u2083\\n   |\\n   end -> \\'a\\u2081\\' + 2 new: \\'a\\u2081 a\\u2082\\', \\'a\\u2082\\' total: 1 + 3 = 4\\n\\na\\u2081 a\\u2082 a\\u2083\\n      |\\n      end -> \\'a\\u2081\\' + \\'a\\u2081 a\\u2082\\', \\'a\\u2082\\' + 3 new: `a\\u2081 a\\u2082 a\\u2083`, `a\\u2082 a\\u2083`, `a\\u2083`  total: 4 + 6 = 10\\n\\t  \\n```\\nFrom the example we can see the following:\\n```\\n(0 + x * 1) = 1\\n(0 + x * 1) + y * 1 = 1 + 2 = 3\\n((0 + x * 1) + y * 1) + z * 1 = 1 + 2 + 3 = 6\\nTotal = 1 + 3 + 6 = 10\\n```\\nwhere `x`, `y`, and `z` are sizes of subarrays ending @ `x`, `y`, and `z`\\n\\nMultiplication by `1` - means that we appending a vowel, `0` - consonant\\n\\nExample #2:\\n```\\na\\u2081 b\\u2082 a\\u2083\\n```\\n\\nLet\\'s count substrings ending @ end:\\n```\\na\\u2081 b\\u2082 a\\u2083\\n|\\nend -> \\'a\\u2081\\', total: 0 + 1 = 1\\n\\na\\u2081 b\\u2082 a\\u2083\\n   |\\n   end -> \\'a\\u2081\\' + 2 new: \\'a\\u2081 b\\u2082\\', \\'b\\u2082\\' total: 1 + 1 = 2, appending the consonant doesn\\'t change the count\\n\\na\\u2081 b\\u2082 a\\u2083\\n      |\\n      end -> \\'a\\u2081\\' + \\'a\\u2081 b\\u2082\\', \\'b\\u2082\\' + 3 new: `a\\u2081 b\\u2082 a\\u2083`, `a\\u2082 b\\u2083`, `a\\u2083`  total: 2 + 4 = 6\\n```\\nFrom the example we can see the following:\\n```\\n(0 + x * 1) = 1\\n(0 + x * 1) + y * 0 = 1 + 0 = 1\\n((0 + x * 1) + y * 0) + z * 1 = 1 + 0 + 3 = 4\\nTotal = 1 + 1 + 4 = 6\\n```\\nwhere `x`, `y`, and `z` are sizes of subarrays ending @ `x`, `y`, and `z`\\n\\nThe same idea in code:\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count = 0\\n        prev = 0\\n        for end in range(len(word)):\\n            prev += (word[end] in \\'aouei\\') * (end - 0 + 1)\\n            count += prev\\n        return count\\n```\\nOR\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        prev = 0\\n        return sum((prev := (word[end] in \\'aouei\\') * (end + 1) + prev) for end in range(len(word)))\\n```\\n\\nP.S. If you go with an approach where instead of appending you count substrings that start with a vowel, you\\'ll end up with the other approach with `count += (end + 1) * (N - i) if vowel`",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\na\\u2081 a\\u2082 a\\u2083\\n```\n```\\na\\u2081 a\\u2082 a\\u2083\\n|\\nend -> \\'a\\u2081\\', total: 0 + 1 = 1\\n\\na\\u2081 a\\u2082 a\\u2083\\n   |\\n   end -> \\'a\\u2081\\' + 2 new: \\'a\\u2081 a\\u2082\\', \\'a\\u2082\\' total: 1 + 3 = 4\\n\\na\\u2081 a\\u2082 a\\u2083\\n      |\\n      end -> \\'a\\u2081\\' + \\'a\\u2081 a\\u2082\\', \\'a\\u2082\\' + 3 new: `a\\u2081 a\\u2082 a\\u2083`, `a\\u2082 a\\u2083`, `a\\u2083`  total: 4 + 6 = 10\\n\\t  \\n```\n```\\n(0 + x * 1) = 1\\n(0 + x * 1) + y * 1 = 1 + 2 = 3\\n((0 + x * 1) + y * 1) + z * 1 = 1 + 2 + 3 = 6\\nTotal = 1 + 3 + 6 = 10\\n```\n```\\na\\u2081 b\\u2082 a\\u2083\\n```\n```\\na\\u2081 b\\u2082 a\\u2083\\n|\\nend -> \\'a\\u2081\\', total: 0 + 1 = 1\\n\\na\\u2081 b\\u2082 a\\u2083\\n   |\\n   end -> \\'a\\u2081\\' + 2 new: \\'a\\u2081 b\\u2082\\', \\'b\\u2082\\' total: 1 + 1 = 2, appending the consonant doesn\\'t change the count\\n\\na\\u2081 b\\u2082 a\\u2083\\n      |\\n      end -> \\'a\\u2081\\' + \\'a\\u2081 b\\u2082\\', \\'b\\u2082\\' + 3 new: `a\\u2081 b\\u2082 a\\u2083`, `a\\u2082 b\\u2083`, `a\\u2083`  total: 2 + 4 = 6\\n```\n```\\n(0 + x * 1) = 1\\n(0 + x * 1) + y * 0 = 1 + 0 = 1\\n((0 + x * 1) + y * 0) + z * 1 = 1 + 0 + 3 = 4\\nTotal = 1 + 1 + 4 = 6\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count = 0\\n        prev = 0\\n        for end in range(len(word)):\\n            prev += (word[end] in \\'aouei\\') * (end - 0 + 1)\\n            count += prev\\n        return count\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        prev = 0\\n        return sum((prev := (word[end] in \\'aouei\\') * (end + 1) + prev) for end in range(len(word)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484691,
                "title": "python3-clean-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n            vowels=\"aeiou\"\\n\\n            ans=prev=0\\n\\n            for i,ch in enumerate(word):\\n                if ch in vowels:\\n                    curr=prev+i+1\\n                else:\\n                    curr=prev\\n\\n                ans+=curr\\n                prev=curr\\n            \\n            return ans\\n\\n        \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        \\n            vowels=\"aeiou\"\\n\\n            ans=prev=0\\n\\n            for i,ch in enumerate(word):\\n                if ch in vowels:\\n                    curr=prev+i+1\\n                else:\\n                    curr=prev\\n\\n                ans+=curr\\n                prev=curr\\n            \\n            return ans\\n\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3472986,
                "title": "vowels-of-all-substrings",
                "content": "--------------- Easy C++ Solution -------------\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool check(char ch)\\n    {\\n        if(ch==\\'a\\'|| ch==\\'e\\'|| ch==\\'i\\'|| ch==\\'o\\'|| ch==\\'u\\')\\n        return true;\\n        else\\n        return false;\\n    }\\n    long long countVowels(string s) {\\n\\n        long long res=0,n=s.size();\\n        for(long long i=0;i<n;i++)\\n        {\\n            if(check(s[i]))\\n            {\\n                res+=(i+1)*(n-i);\\n            }\\n        }\\n        return res; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool check(char ch)\\n    {\\n        if(ch==\\'a\\'|| ch==\\'e\\'|| ch==\\'i\\'|| ch==\\'o\\'|| ch==\\'u\\')\\n        return true;\\n        else\\n        return false;\\n    }\\n    long long countVowels(string s) {\\n\\n        long long res=0,n=s.size();\\n        for(long long i=0;i<n;i++)\\n        {\\n            if(check(s[i]))\\n            {\\n                res+=(i+1)*(n-i);\\n            }\\n        }\\n        return res; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3444607,
                "title": "sliding-window-time-o-n-space-o-1",
                "content": "class Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        res = 0\\n        n = len(word)\\n        \\n        for i,c in enumerate(word):\\n            if c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']:\\n                res += (i+1)*(n-i)\\n        \\n        return res",
                "solutionTags": [],
                "code": "class Solution(object):\\n    def countVowels(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        res = 0\\n        n = len(word)\\n        \\n        for i,c in enumerate(word):\\n            if c in [\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']:\\n                res += (i+1)*(n-i)\\n        \\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 3430151,
                "title": "python-easy-to-read-individual-contribution-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = 0\\n        for i in range(len(word)):\\n            if word[i] in \\'aeiou\\':\\n                individual_contribution = (i+1)*(len(word)-i)\\n                vowels += individual_contribution\\n        return vowels\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = 0\\n        for i in range(len(word)):\\n            if word[i] in \\'aeiou\\':\\n                individual_contribution = (i+1)*(len(word)-i)\\n                vowels += individual_contribution\\n        return vowels\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3416570,
                "title": "c-recursive-memoization-tabulation-bottom-up",
                "content": "Jitna bola hai utne ka recursive likh do , baki kar loge...\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long ans(string word,int i,set<char>&st,bool vowel,vector<long long>&dp){\\n        if(i>=word.size()){\\n            return 0;\\n        }\\n        if(dp[i]!=-1)return dp[i];\\n        if(st.find(word[i])!=st.end()){\\n            return dp[i]=(word.size()-i)*(i+1)+ans(word,i+1,st,true,dp);\\n        }       \\n        else{\\n            return dp[i]=ans(word,i+1,st,vowel,dp);\\n        }\\n\\n    }\\n    long long countVowels(string word) {\\n        set<char> st;\\n        st.insert(\\'a\\');\\n        st.insert(\\'e\\');\\n        st.insert(\\'i\\');\\n        st.insert(\\'o\\');\\n        st.insert(\\'u\\');\\n        bool vowel=false;\\n        vector<long long> dp(word.size()+1,0);\\n        for(int i=word.size()-1;i>=0;i--){\\n            if(st.find(word[i])!=st.end()){\\n                dp[i]=(word.size()-i)*(i+1)+dp[i+1];\\n            }       \\n            else{\\n                dp[i]=dp[i+1];\\n            }\\n        }\\n        return dp[0];  \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long ans(string word,int i,set<char>&st,bool vowel,vector<long long>&dp){\\n        if(i>=word.size()){\\n            return 0;\\n        }\\n        if(dp[i]!=-1)return dp[i];\\n        if(st.find(word[i])!=st.end()){\\n            return dp[i]=(word.size()-i)*(i+1)+ans(word,i+1,st,true,dp);\\n        }       \\n        else{\\n            return dp[i]=ans(word,i+1,st,vowel,dp);\\n        }\\n\\n    }\\n    long long countVowels(string word) {\\n        set<char> st;\\n        st.insert(\\'a\\');\\n        st.insert(\\'e\\');\\n        st.insert(\\'i\\');\\n        st.insert(\\'o\\');\\n        st.insert(\\'u\\');\\n        bool vowel=false;\\n        vector<long long> dp(word.size()+1,0);\\n        for(int i=word.size()-1;i>=0;i--){\\n            if(st.find(word[i])!=st.end()){\\n                dp[i]=(word.size()-i)*(i+1)+dp[i+1];\\n            }       \\n            else{\\n                dp[i]=dp[i+1];\\n            }\\n        }\\n        return dp[0];  \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3364313,
                "title": "veryy-lucid-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isvowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\'  || ch==\\'o\\'  || ch==\\'u\\')return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n=word.size();\\n        long long ans=0;\\n        for(int i=0;i<n;i++){\\n            if(isvowel(word[i]))ans+=(long long)(i+1)*(n-i);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isvowel(char ch){\\n        if(ch==\\'a\\' || ch==\\'e\\' || ch==\\'i\\'  || ch==\\'o\\'  || ch==\\'u\\')return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n=word.size();\\n        long long ans=0;\\n        for(int i=0;i<n;i++){\\n            if(isvowel(word[i]))ans+=(long long)(i+1)*(n-i);\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3363293,
                "title": "best-explanation-on-why-n-i-i-1-works",
                "content": "Lets take an example,\\n **string str=\"abefhi\"\\n \\n lets take \\'e\\' into consideration which is at index 2\\n \\n now as we know that if the length of the string is \\'n\\' then \\n there are total n*(n+1)/2 substring possible.\\n \\n we are only focussing on the substrings in which \\'e\\' is present .\\n1.         abe      abef    abefh      abefhi\\n2.           be      bef        befh     befhi\\n3.           e       ef          efh       efhi\\n  \\n  these are the 12 substrings in which \\'e\\' is  present.\\n  \\n  now if we see from the above example then \\'e\\' is present only in those   substrings which are started by either \\'a\\' or \\'b\\' or \\'e\\' .\\n  \\n  we can clearly see there is no role of \\'e\\' in the substrings which are started by \\'f\\' ,\\'h\\' or \\'i\\'.\\n  \\n  Now our task is to find all the substrings which are started by a \\n  and in which e is also present.\\n  \\n  the substrings which are started by \\'a\\' are-\\n*     a     ab    abe    abef    abefh    abefhi \\n\\nthere are total 6 substrings  (endindex-startindex+1).\\n\\nbut we have to subtract 2 starting substrings ,since they did not contain \\'e\\'\\n\\nso now the formula is very simple..\\n\\nlet the suppose the index of \\'e\\' is pos   and the index of \\'a\\' is i\\n\\nthen total substrings which start with \\'a\\' and contain \\'e\\' are\\n\\n(endindex-i+1)-(pos-i)=(5-0+1)-(2-0)     =  4\\n\\n(pos-i) are the number of substrings in which \\'e\\' is not present .\\n\\nnow we have to do this for \\'b\\' and \\'e\\' also \\n\\nfor \\'b\\' it is---  (5-1+1)-(2-1)  =  4\\n\\nfor \\'c\\' it is----(5-2+1)-(2-2)  =4\\n\\nthe ans is (4+4+4)  =  4*3  =====>\\n\\nnow if we do it for other vovels also and try to analyse the pattern then ----  the formula is \\n\\n\\n(length-pos)*(pos+1)\\n\\nfor \\'e\\' pos=2   so\\n\\n(6-2)(2+1) =4*3==>12.\\n\\nbelow is the c++ implementaion for the same .\\n\\n```\\n    long long countVowels(string word) {\\n       int n=word.size();\\n        long long ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n            {\\n                ans=ans+(long)(n-i)*(i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  \\n  \\n  \\n  \\n \\n",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\n    long long countVowels(string word) {\\n       int n=word.size();\\n        long long ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n            {\\n                ans=ans+(long)(n-i)*(i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3358771,
                "title": "python-o-n-time-complexity-o-n-space-complexity-solution",
                "content": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = [\\'a\\', \\'e\\' , \\'i\\', \\'o\\', \\'u\\']\\n        ans = 0\\n        #solving using a gready method\\n        for index, i in enumerate(word):\\n            if i in vowels:\\n                #reccuring pattern i noticed to solve it in (O(n)) complexity\\n                ans += (index + 1) + (index + 1) *  (len(word) - index - 1)\\n                \\n        return ans\\n\\t\\t```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        vowels = [\\'a\\', \\'e\\' , \\'i\\', \\'o\\', \\'u\\']\\n        ans = 0\\n        #solving using a gready method\\n        for index, i in enumerate(word):\\n            if i in vowels:\\n                #reccuring pattern i noticed to solve it in (O(n)) complexity\\n                ans += (index + 1) + (index + 1) *  (len(word) - index - 1)\\n                \\n        return ans\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 3316500,
                "title": "concise-o-n-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        long long n = word.size();\\n        for(long long i = 0;i<n;i++){\\n            if(s.find(word[i])!=s.end()) ans = ans + (i+1)*(n-i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long ans = 0;\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        long long n = word.size();\\n        for(long long i = 0;i<n;i++){\\n            if(s.find(word[i])!=s.end()) ans = ans + (i+1)*(n-i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3284793,
                "title": "easy-implementation-brute-to-optimal-intuitive-approach-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**CASE-1 :- BRUTE FORCE**\\n\\nJust take whole list of all possible substring and count the sum of number of vowels in each substring. But this approach will give TLE as we have 10^5 word limit ans it would take arounf O(n^2) time complexity .\\n\\n**CASE- 2 :- OPTIMIZED APPROACH**\\n\\nIn this, if we look closer the whole scenario is about to check- the number of times eveery character would occur in the substring. In simple terms, we just have to count the number of times every vowel occurs in each substring. \\n\\nDiving deeper for better understadning,\\n\\ntake string s=\"aba\":\\ns[0]=a= occurs in \"a\" \"ab\" \"aba\" . Total count we get 3\\ns[1]= b= occurs in \"b\" \"ba\" \"ab\" \"aba\" . Total count is 4.\\ns[2]= a= occurs in \"a\" \"aba\" \"ba\" . Total count is 3.\\n\\nSo, the approach to follow is: \\n\\n**1. at first count every substring possibly starting with that index**\\n\\n**2. the number of substring in continuation with the previous index.**\\n**3. subtract the substrings possibly ending at just the previous index.**\\n\\nRest things evident in code and commented the logic in it for better understanding.\\n\\n\\n\\n  **TILL THEN KEEP GRINDING!!**\\n**Good things in queue!!**\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int n=word.size();\\n        long long int cnt=0;\\n        // cout<<n;\\n        vector<long long int > help;\\n\\n        for(int i=0; i<n; i++){\\n            if(i==0){\\n                help.push_back(n);\\n            }\\n            else{\\n\\n                long long int k= (n-i) ; // number of substrings starting with that character\\n                long long int l= help[i-1] ; // number of substrings in continuation with previous index \\n                help.push_back(k+l-i);\\n            }\\n        }\\n\\n        for(int i=0; i<n; i++){\\n            //char itr= word[i];\\n            if(word[i]==\\'a\\'|| word[i]==\\'e\\'|| word[i]==\\'i\\' || word[i]==\\'o\\' ||word[i]==\\'u\\'){\\n                cnt+=help[i];\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long int n=word.size();\\n        long long int cnt=0;\\n        // cout<<n;\\n        vector<long long int > help;\\n\\n        for(int i=0; i<n; i++){\\n            if(i==0){\\n                help.push_back(n);\\n            }\\n            else{\\n\\n                long long int k= (n-i) ; // number of substrings starting with that character\\n                long long int l= help[i-1] ; // number of substrings in continuation with previous index \\n                help.push_back(k+l-i);\\n            }\\n        }\\n\\n        for(int i=0; i<n; i++){\\n            //char itr= word[i];\\n            if(word[i]==\\'a\\'|| word[i]==\\'e\\'|| word[i]==\\'i\\' || word[i]==\\'o\\' ||word[i]==\\'u\\'){\\n                cnt+=help[i];\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3267961,
                "title": "c-o-n-short",
                "content": "```\\nclass Solution {\\npublic:\\n    string vowels = \"aeiou\";\\n    long long countVowels(string word) {\\n        long long l = 1, r = word.size(), ans = 0;\\n        for (auto& c : word){\\n            if (vowels.find(c) != -1) ans += l * r;\\n            ++l, --r;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string vowels = \"aeiou\";\\n    long long countVowels(string word) {\\n        long long l = 1, r = word.size(), ans = 0;\\n        for (auto& c : word){\\n            if (vowels.find(c) != -1) ans += l * r;\\n            ++l, --r;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3255619,
                "title": "dp-approach-t-c-o-n-s-c-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere , I am considering all the substrings that is ending at index i.\\n\\nobservation -> number of substrings that is ending at index at i is i + 1\\n\\nif ith character is vowel then i am increasing the dp[i] by (i + 1) and also i am considering the previous substrings containing vowels\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size();\\n        long long ans = 0;\\n        long long dp[n+1];\\n        memset(dp , 0  , sizeof(dp));\\n        string s = word;\\n\\n        if(s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\'){\\n            dp[0] = 1;\\n        }\\n\\n        for(int i=1 ; i<n ; i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'u\\' || s[i]==\\'o\\'){\\n                dp[i] = dp[i-1] + (i+1);\\n            }\\n            else{\\n                dp[i] = dp[i-1];\\n            }\\n        }\\n\\n        for(int i=0 ; i<n ; i++){\\n            ans += dp[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long n = word.size();\\n        long long ans = 0;\\n        long long dp[n+1];\\n        memset(dp , 0  , sizeof(dp));\\n        string s = word;\\n\\n        if(s[0]==\\'a\\' || s[0]==\\'e\\' || s[0]==\\'i\\' || s[0]==\\'o\\' || s[0]==\\'u\\'){\\n            dp[0] = 1;\\n        }\\n\\n        for(int i=1 ; i<n ; i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'e\\' || s[i]==\\'i\\' || s[i]==\\'u\\' || s[i]==\\'o\\'){\\n                dp[i] = dp[i-1] + (i+1);\\n            }\\n            else{\\n                dp[i] = dp[i-1];\\n            }\\n        }\\n\\n        for(int i=0 ; i<n ; i++){\\n            ans += dp[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3252248,
                "title": "javascript-short-solution",
                "content": "```\\nconst countVowels = (w) => {\\n  if (!/[a,e,i,o,u]/.test(w)) return 0;\\n  let [res, acc] = [0, 0];\\n\\n  for (let i = 0; i < w.length; i++) {\\n    if (/[a,e,i,o,u]/.test(w[i])) acc += i + 1;\\n    res += acc;\\n  }\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst countVowels = (w) => {\\n  if (!/[a,e,i,o,u]/.test(w)) return 0;\\n  let [res, acc] = [0, 0];\\n\\n  for (let i = 0; i < w.length; i++) {\\n    if (/[a,e,i,o,u]/.test(w[i])) acc += i + 1;\\n    res += acc;\\n  }\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3249885,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn count_vowels(word: String) -> i64 {\\n        let word = word.as_bytes();\\n        let mut res = 0;\\n        let n = word.len();\\n        for (i, &word_i) in word.iter().enumerate() {\\n            if word_i == b\\'a\\' || word_i == b\\'e\\' || word_i == b\\'i\\' || word_i == b\\'o\\' || word_i == b\\'u\\' {\\n                res += (i + 1) * (n - i);\\n            }\\n        }\\n        res as _\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn count_vowels(word: String) -> i64 {\\n        let word = word.as_bytes();\\n        let mut res = 0;\\n        let n = word.len();\\n        for (i, &word_i) in word.iter().enumerate() {\\n            if word_i == b\\'a\\' || word_i == b\\'e\\' || word_i == b\\'i\\' || word_i == b\\'o\\' || word_i == b\\'u\\' {\\n                res += (i + 1) * (n - i);\\n            }\\n        }\\n        res as _\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3217865,
                "title": "dynamic-programming-with-commented-code",
                "content": "# Intuition\\nCount the number of vowel in all substring ending with index i and store it in dp[i]\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n      int n=word.size();\\n      unordered_set<char>s;\\n      s.insert(\\'a\\');\\n      s.insert(\\'e\\');\\n      s.insert(\\'i\\');\\n      s.insert(\\'o\\');\\n      s.insert(\\'u\\');\\n\\n      long long ans=0;\\n      vector<long long >dp(n,0);\\n\\n//dp[i] will tell the number of vowels in all substring ending with index i;\\n\\n      if(s.find(word[0])!=s.end())\\n      {\\n         \\n           dp[0]=1;\\n           ans=dp[0];\\n      }\\n\\n      for(int i=1;i<n;i++)\\n      {\\n         \\n         if(s.find(word[i])!=s.end())\\n         {\\n\\n             //There will be (i+1) substring which are ending at ith index and char at ith index is vowel so this char will contibute (i+1) to the answer and we will add dp[i-1] to dp[i] (because we know that for finding all the substring ending at ith index ,we just add ith index at the end of all substring ending with index i-1)\\n             dp[i]=(i+1)+dp[i-1];\\n         }\\n         else{\\n             dp[i]=dp[i-1];\\n         }\\n         ans +=dp[i];\\n      }\\n\\n      return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n      int n=word.size();\\n      unordered_set<char>s;\\n      s.insert(\\'a\\');\\n      s.insert(\\'e\\');\\n      s.insert(\\'i\\');\\n      s.insert(\\'o\\');\\n      s.insert(\\'u\\');\\n\\n      long long ans=0;\\n      vector<long long >dp(n,0);\\n\\n//dp[i] will tell the number of vowels in all substring ending with index i;\\n\\n      if(s.find(word[0])!=s.end())\\n      {\\n         \\n           dp[0]=1;\\n           ans=dp[0];\\n      }\\n\\n      for(int i=1;i<n;i++)\\n      {\\n         \\n         if(s.find(word[i])!=s.end())\\n         {\\n\\n             //There will be (i+1) substring which are ending at ith index and char at ith index is vowel so this char will contibute (i+1) to the answer and we will add dp[i-1] to dp[i] (because we know that for finding all the substring ending at ith index ,we just add ith index at the end of all substring ending with index i-1)\\n             dp[i]=(i+1)+dp[i-1];\\n         }\\n         else{\\n             dp[i]=dp[i-1];\\n         }\\n         ans +=dp[i];\\n      }\\n\\n      return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3217149,
                "title": "very-simple-solution-one-pass-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nVery Simple solution just for every char that is vowel count substrings that we can make and so that is it\\'s score .\\n```\\nexample : fdfsf...a..sdsdff\\nfor this  we can calculate in how many ways we can choose from left and right \\nso then left * right will be added to answer .\\n```\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word){\\n        long long int ans = 0;\\n        for(int i=0;i<word.length();i++){\\n            // if we have vowel then we see how many substring can we make from it.\\n            if(word[i] == \\'a\\' ||word[i] == \\'e\\' || word[i] == \\'i\\'|| word[i] == \\'o\\' ||word[i] == \\'u\\' )\\n                ans += 1ll*(i+1)*(word.length()-i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nexample : fdfsf...a..sdsdff\\nfor this  we can calculate in how many ways we can choose from left and right \\nso then left * right will be added to answer .\\n```\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word){\\n        long long int ans = 0;\\n        for(int i=0;i<word.length();i++){\\n            // if we have vowel then we see how many substring can we make from it.\\n            if(word[i] == \\'a\\' ||word[i] == \\'e\\' || word[i] == \\'i\\'|| word[i] == \\'o\\' ||word[i] == \\'u\\' )\\n                ans += 1ll*(i+1)*(word.length()-i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3207390,
                "title": "easy-solution-in-o-n-run-time-and-91-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n\\n        long long ans = 0;\\n\\n        for(int i=0; i<word.size(); i++) {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\') {\\n                ans += (i + 1) * (word.size() - i);\\n            }\\n        }\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n\\n        long long ans = 0;\\n\\n        for(int i=0; i<word.size(); i++) {\\n            if(word[i] == \\'a\\' || word[i] == \\'e\\' || word[i] == \\'i\\' || word[i] == \\'o\\' || word[i] == \\'u\\') {\\n                ans += (i + 1) * (word.size() - i);\\n            }\\n        }\\n\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3193383,
                "title": "javascript-solution-top-down-bottom-up-two-variables-including-the-recurrence-relation",
                "content": "# Intuition\\nFind the recurrence relation. Use that to build top-down and then bottom-up solutions\\n\\n# Approach\\nAll substrings can be computed by two nested loops starting at index 0. This means the length of the array is a big factor when calculating the vowels in the substrings. Use that to find the recurrence relation.\\n\\n# Complexity\\n- Time and Space complexity:\\nTop-Down and Bottom-Up: O(n)...memo structure of n length\\n\\nTwo Variables:\\nTime: O(n), Space: O(1)...because no data structure is used\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @return {number}\\n */\\n// Dynamic Programming\\n// Base Case: 0 if out of bounds, memo[0] = 0 || 1\\n// State Variable: i for idx of string ... end of string\\n//  - stands for amount of subs between 0...i\\n// Recurrence Relation: \\n//  dp(i) = if dp[i] ==== vowel\\n//             dp(i) = 1 + i + dp(i-1)\\n//          else\\n//             dp(i) = dp(i-1)\\n\\n// Top Down\\n// Time and Space: O(n)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0\\n    const memo = [...new Array(word.length+1)].fill(-Infinity)\\n    const dp = (idx) => {\\n        if (idx < 0) return 0;\\n        if (memo[idx] !== -Infinity) return memo[idx]\\n        if (vowels.has(word[idx])) {\\n            memo[idx] = 1 + idx + dp(idx - 1)\\n        } else {\\n            memo[idx] = dp(idx - 1)\\n        }\\n        count += memo[idx]\\n        return memo[idx]\\n    }\\n    dp(word.length-1)\\n    return count;\\n};\\n\\n// Bottm Up\\n// Time and Space: O(n)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0;\\n    const dp = [...new Array(word.length+1)].fill(-Infinity)\\n    dp[0] = 0\\n    if (vowels.has(word[0])) {dp[0] = 1; count++}\\n    for (let idx = 1; idx < word.length; idx++) {\\n        if (vowels.has(word[idx])) {\\n            dp[idx] = 1 + idx + dp[idx - 1]\\n        } else {\\n            dp[idx] = dp[idx - 1]\\n        }\\n        count += dp[idx]\\n    }\\n    return count;\\n};\\n\\n// Use Two Variables\\n// Time: O(n)\\n// Space: O(1)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0, total = 0;\\n    if (vowels.has(word[0])) {count++; total++}\\n    for (let idx = 1; idx < word.length; idx++) {\\n        if (vowels.has(word[idx])) {\\n            count = 1 + idx + count\\n        }\\n        total += count\\n    }\\n    return total;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @return {number}\\n */\\n// Dynamic Programming\\n// Base Case: 0 if out of bounds, memo[0] = 0 || 1\\n// State Variable: i for idx of string ... end of string\\n//  - stands for amount of subs between 0...i\\n// Recurrence Relation: \\n//  dp(i) = if dp[i] ==== vowel\\n//             dp(i) = 1 + i + dp(i-1)\\n//          else\\n//             dp(i) = dp(i-1)\\n\\n// Top Down\\n// Time and Space: O(n)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0\\n    const memo = [...new Array(word.length+1)].fill(-Infinity)\\n    const dp = (idx) => {\\n        if (idx < 0) return 0;\\n        if (memo[idx] !== -Infinity) return memo[idx]\\n        if (vowels.has(word[idx])) {\\n            memo[idx] = 1 + idx + dp(idx - 1)\\n        } else {\\n            memo[idx] = dp(idx - 1)\\n        }\\n        count += memo[idx]\\n        return memo[idx]\\n    }\\n    dp(word.length-1)\\n    return count;\\n};\\n\\n// Bottm Up\\n// Time and Space: O(n)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0;\\n    const dp = [...new Array(word.length+1)].fill(-Infinity)\\n    dp[0] = 0\\n    if (vowels.has(word[0])) {dp[0] = 1; count++}\\n    for (let idx = 1; idx < word.length; idx++) {\\n        if (vowels.has(word[idx])) {\\n            dp[idx] = 1 + idx + dp[idx - 1]\\n        } else {\\n            dp[idx] = dp[idx - 1]\\n        }\\n        count += dp[idx]\\n    }\\n    return count;\\n};\\n\\n// Use Two Variables\\n// Time: O(n)\\n// Space: O(1)\\nvar countVowels = function(word) {\\n    if (!word) return 0;\\n    let vowels = new Set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\']), count = 0, total = 0;\\n    if (vowels.has(word[0])) {count++; total++}\\n    for (let idx = 1; idx < word.length; idx++) {\\n        if (vowels.has(word[idx])) {\\n            count = 1 + idx + count\\n        }\\n        total += count\\n    }\\n    return total;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3188364,
                "title": "sum-of-all-subarrays",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic: \\n   long long int f(vector<int>&arr)\\n   {\\n    long int result = 0;\\n    int n=arr.size();\\n    // computing sum of subarray using formula\\n    for (int i = 0; i < n; i++)\\n        result += (1LL*arr[i] * (i + 1) * (n - i));\\n \\n    // return all subarray sum\\n    return result;\\n   }\\n    long long countVowels(string word) {\\n        vector<int>temp;\\n        long long ans=0,i,j,n=word.size(),cnt=0;\\n        for(auto it:word){\\n//replacing by1 if its a vowel\\n            if(it==\\'a\\'||it==\\'e\\'||it==\\'i\\'||it==\\'o\\'||it==\\'u\\'){\\n                temp.push_back(1);\\n            }\\n//replcing by zero\\n            else temp.push_back(cnt);\\n        }\\n        return f(temp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic: \\n   long long int f(vector<int>&arr)\\n   {\\n    long int result = 0;\\n    int n=arr.size();\\n    // computing sum of subarray using formula\\n    for (int i = 0; i < n; i++)\\n        result += (1LL*arr[i] * (i + 1) * (n - i));\\n \\n    // return all subarray sum\\n    return result;\\n   }\\n    long long countVowels(string word) {\\n        vector<int>temp;\\n        long long ans=0,i,j,n=word.size(),cnt=0;\\n        for(auto it:word){\\n//replacing by1 if its a vowel\\n            if(it==\\'a\\'||it==\\'e\\'||it==\\'i\\'||it==\\'o\\'||it==\\'u\\'){\\n                temp.push_back(1);\\n            }\\n//replcing by zero\\n            else temp.push_back(cnt);\\n        }\\n        return f(temp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3180949,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count=0\\n        vowel =\"aeiou\"\\n        n=len(word)\\n        for i in range(n):\\n            if word[i] in vowel:\\n                count+=(n-i)*(i+1)         \\n        return count\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        count=0\\n        vowel =\"aeiou\"\\n        n=len(word)\\n        for i in range(n):\\n            if word[i] in vowel:\\n                count+=(n-i)*(i+1)         \\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3160532,
                "title": "concise-dp-with-explanation",
                "content": "# Approach\\n* `dp[i]` is equal to the count of vowels for all substrings ending at the index `i`. \\n* If the current character is not a vowel, then `dp[i]` is equal to `dp[i-1]`. If the current character is a vowel, then along with `dp[i-1]`, the current character contributes a value of `1` to all the substrings ending at `i`. Since there are `i` substrings ending at the index `i`, add `i` to `dp[i]` giving us `dp[i] = dp[i-1] + i`.\\n* Return the sum of `dp[i]` for all `i` to find the answer for all substrings.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        vector<long long> dp(n+1, 0);\\n        set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n\\n        for(int i=1; i<=n; i++) {\\n            dp[i] = dp[i-1] + (vowels.count(word[i-1]) ? i : 0);\\n        }\\n\\n        return accumulate(dp.begin(), dp.end(), 0ll);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        vector<long long> dp(n+1, 0);\\n        set<char> vowels{\\'a\\', \\'e\\', \\'i\\', \\'o\\', \\'u\\'};\\n\\n        for(int i=1; i<=n; i++) {\\n            dp[i] = dp[i-1] + (vowels.count(word[i-1]) ? i : 0);\\n        }\\n\\n        return accumulate(dp.begin(), dp.end(), 0ll);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3159526,
                "title": "intuitive-handwritten-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n![Screenshot_20230208_144035.png](https://assets.leetcode.com/users/images/23f3052e-8aab-4007-a342-399810331918_1675847560.8932974.png)\\n![Screenshot_20230208_144043.png](https://assets.leetcode.com/users/images/e5370a12-2ee2-4d47-807b-07fecb72cfe4_1675847571.1424117.png)\\n![Screenshot_20230208_144056.png](https://assets.leetcode.com/users/images/cdaa96df-a4c0-4e34-a54b-91995a87ca19_1675847584.267874.png)\\n\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) \\n    {\\n        int len=word.length();\\n        long long int count=0;\\n        for(int i=0;i<len;i++)\\n        {\\n            if(word[i]==\\'a\\' ||word[i]==\\'e\\' ||word[i]==\\'i\\' ||word[i]==\\'o\\' ||word[i]==\\'u\\')\\n            {\\n                count+=(long long)(i+1)*(len-i);\\n            } \\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) \\n    {\\n        int len=word.length();\\n        long long int count=0;\\n        for(int i=0;i<len;i++)\\n        {\\n            if(word[i]==\\'a\\' ||word[i]==\\'e\\' ||word[i]==\\'i\\' ||word[i]==\\'o\\' ||word[i]==\\'u\\')\\n            {\\n                count+=(long long)(i+1)*(len-i);\\n            } \\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147770,
                "title": "python-solution-beats-94-in-time-and-82-in-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport itertools\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        tot , l = 0 , len(word)\\n        for i in range(len(word)):\\n            if word[i] in {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}:\\n                tot += (l-i)*(i) + (l-i)\\n                \\n                \\n                \\n        return tot\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport itertools\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        tot , l = 0 , len(word)\\n        for i in range(len(word)):\\n            if word[i] in {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}:\\n                tot += (l-i)*(i) + (l-i)\\n                \\n                \\n                \\n        return tot\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3126557,
                "title": "easy-c-dp",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isVowel (char &c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\') return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        vector<long long> dp(n+1,0);\\n        if(isVowel(word[0])) {\\n            dp[0]=1;\\n        }\\n        for(int i=1;i<n;i++){\\n           if(isVowel(word[i])){\\n                dp[i] = dp[i-1] + (i+1);\\n            }else{\\n                dp[i] = dp[i-1];\\n            }\\n        }\\n        long long sum = 0;\\n        for(auto x : dp) sum += x;\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isVowel (char &c){\\n        if(c==\\'a\\' || c==\\'e\\' || c==\\'i\\' || c==\\'o\\' || c==\\'u\\') return true;\\n        return false;\\n    }\\n    long long countVowels(string word) {\\n        int n = word.size();\\n        vector<long long> dp(n+1,0);\\n        if(isVowel(word[0])) {\\n            dp[0]=1;\\n        }\\n        for(int i=1;i<n;i++){\\n           if(isVowel(word[i])){\\n                dp[i] = dp[i-1] + (i+1);\\n            }else{\\n                dp[i] = dp[i-1];\\n            }\\n        }\\n        long long sum = 0;\\n        for(auto x : dp) sum += x;\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3107692,
                "title": "c-easy-to-understand-with-comments",
                "content": "```\\n// Using butterfly method, where \\n// where substring ending at a point m are m, there are\\n// n suffixes which later extending string with m.\\n// so total string = m + (m*n) = (m*(n+1));\\n// so m prefixes are extended n times and original m prefixes is \\n// result\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ;\\n    }\\n    long long countVowels(string word) {\\n        long long result = 0;\\n        int sz = word.size();\\n        for (int i = 0; i < sz; i++) {\\n            if (isVowel(word[i])) {\\n                long long m = i+1; long long n = sz-m; \\n                long long t = m*(n+1);\\n                result += t;\\n            }\\n        }\\n        return result;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n// Using butterfly method, where \\n// where substring ending at a point m are m, there are\\n// n suffixes which later extending string with m.\\n// so total string = m + (m*n) = (m*(n+1));\\n// so m prefixes are extended n times and original m prefixes is \\n// result\\n\\nclass Solution {\\npublic:\\n    bool isVowel(char c) {\\n        return c == \\'a\\' || c == \\'e\\' || c == \\'i\\' || c == \\'o\\' || c == \\'u\\' ;\\n    }\\n    long long countVowels(string word) {\\n        long long result = 0;\\n        int sz = word.size();\\n        for (int i = 0; i < sz; i++) {\\n            if (isVowel(word[i])) {\\n                long long m = i+1; long long n = sz-m; \\n                long long t = m*(n+1);\\n                result += t;\\n            }\\n        }\\n        return result;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3092158,
                "title": "python-easy-and-simple-o-n",
                "content": "# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        res = 0\\n        for i, c in enumerate(word):\\n            if c in \\'aeiou\\':\\n                res += (i+1)*(n-i)\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        n = len(word)\\n        res = 0\\n        for i, c in enumerate(word):\\n            if c in \\'aeiou\\':\\n                res += (i+1)*(n-i)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3080067,
                "title": "2-approach-c",
                "content": "\\n# Space: O(n)\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        vector<long long> dp(word.length() + 1);\\n        for(int i=1;i<=word.length();i++){\\n        dp[i]=dp[i-1];\\n        if(string(\"aeiou\").find(word[i-1])!=string::npos)\\n        dp[i]+=i;\\n    }\\n    return accumulate(begin(dp),end(dp),0LL);\\n    }\\n};\\n\\n```\\n# Space: O(1)\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long count=0;\\n        for(int i=0;i<word.size();i++)\\n        if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n        count+=(i+1)*(word.size()-i);\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        vector<long long> dp(word.length() + 1);\\n        for(int i=1;i<=word.length();i++){\\n        dp[i]=dp[i-1];\\n        if(string(\"aeiou\").find(word[i-1])!=string::npos)\\n        dp[i]+=i;\\n    }\\n    return accumulate(begin(dp),end(dp),0LL);\\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        long long count=0;\\n        for(int i=0;i<word.size();i++)\\n        if(word[i]==\\'a\\'||word[i]==\\'e\\'||word[i]==\\'i\\'||word[i]==\\'o\\'||word[i]==\\'u\\')\\n        count+=(i+1)*(word.size()-i);\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3072395,
                "title": "simple-c-solution-using-loops",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n\\n long long  n = word.length();\\n\\n           long long  ans = 0;\\n        for( long long  i =0 ;i<n; i++){\\n\\n              if(word[i]== \\'a\\' || word[i] == \\'e\\' || word[i] ==\\'i\\' || word[i] ==\\'o\\' || word[i] == \\'u\\')\\n                 \\n                 ans+= (i+1)*(n-i);\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n\\n long long  n = word.length();\\n\\n           long long  ans = 0;\\n        for( long long  i =0 ;i<n; i++){\\n\\n              if(word[i]== \\'a\\' || word[i] == \\'e\\' || word[i] ==\\'i\\' || word[i] ==\\'o\\' || word[i] == \\'u\\')\\n                 \\n                 ans+= (i+1)*(n-i);\\n\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3006534,
                "title": "o-n-solution-explained",
                "content": "```\\nWe need to Solve in O(n)\\n\\nFirst lets try to count all possible substr in O(n)\\nConsider, (\"abcde\")\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | b | c | d | e |\\n        \\u25B2-- \\u25B2 | \\u25B2 | \\u25B2 | \\u25B2 |\\n       -|---|-- | | | | | |\\n       -|---|---|-- | | | |\\n       -|---|---|---|-- | |\\n       -|---|---|---|---|--\\n        |   |   |   |   | \\n[a] <----   |   |   |   | ----> // at index 0 we can make 1 substr \\n[b,ab] <-----   |   |   | ----> // at index 1 we can make 2 substr\\n[c,bc,abc]<------   |   | ----> // at index 2 we can make 3 substr\\n[d,cd,bcd,abcd]<-----   | ----> // at index 3 we can make 4 substr\\n[e,de,cde,bcde,abcde]<--- ----> // at index 4 we can make 5 substr\\n                  //NOTE: i.e at index (i) we can make (i+1)substr\\n                  //      And LAST CHAR remain SAME\\n            //TOTAL = sum([0th index , 1st index..... n-1th index])\\n\\n\\n--------------------------------------------------------------------\\nLets now consider vowels only\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | c | b | a | k | e\\n        \\u25B2-----|---| \\u25B2 |   | \\u25B2\\n       -|---------| | |   | |\\n       -|---------- | |   | |\\n       -|-----------|--   | | \\n       -|-----------|------ |\\n1   <----           |       | // [a] we can make 1 substr containing vowels\\n                    |       |  \\n4   <----------------       | // [a,ba,cba,acba] we can make 4 substr containing vowels\\n                            | \\n6   <-----------------------  // [e,ke,ake,bake,cbake,acbake] we can make 5 substr containing vowels\\n\\n\\nat (i)th index we can make (i+1) substr and all substr will contain (i)th char\\n(if the (i)th char is \\'e\\' all substr will contain \\'e\\' at the end)\\n\\nnow if (i) is vowel we can make (i+1) substr\\n    that will contain atleast 1 vowel i.e itself\\n\\n-----------------------------------------------------------------\\nNow Lets Combine,\\nNo.of substr with Vowels count\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | c | b | a | k | e\\n        \\u25B2---\\u25B2-|-\\u25B2-| \\u25B2 | \\u25B2 | \\u25B2\\n       -|---|---|-| | | | | |\\n       -|---|---|-- | | | | |\\n       -|---|---|---|-- | | | \\n       -|---|---|---|---|-- |\\n1   <----   |   |   |   |   |// [a] ---------------------------> 1 substr 1 vowelsubstr 1 vowel count \\n1   <--------   |   |   |   |// [c,ac]-------------------------> 2 substr 1 vowelsubstr 1 vowel count\\n1   <------------   |   |   |// [b,cb,acb]---------------------> 3 substr 1 vowelsubstr 1 vowel count\\n5   <----------------   |   |// [a,ba,cba,acba]----------------> 4 substr 4 vowelsubstr 5 vowel count\\n5   <--------------------   |// [k,ak,bak,cbak,acbak]----------> 5 substr 4 vowelsubstr 5 vowel count\\n11  <------------------------// [e,ke,ake,bake,cbake,acbake]---> 6 substr 6 vowelsubstr 11 vowel count \\n\\nFor every CONSONANT ,the total count of vowel will be same as previous\\n\\nFor every VOWEL char we have to consider itself and previous count\\n\\nnow as we move forward, for currentIndex \\n    if we add currentCount + previousVowelCount we will get TOTAL vowelCount\\nprevious = 0 // initially\\n// i= 0  \\'a\\'\\n                            [a]  vowelCount = (i+1) + previous = 1 \\n// i= 1  \\'c\\'\\n                         [c,ac]  vowelCount = previous         = 1\\n// i= 2  \\'b\\' \\n                     [b,cb,acb]  vowelCount = previous         = 1\\n// i= 3  \\'a\\'\\n                [a,ba,cba,acba]  vowelCount = (i+1) + previous = 5\\n// i= 4  \\'k\\'\\n          [k,ak,bak,cbak,acbak]  vowelCount = previous         = 5\\n// i= 5  \\'e\\'\\n   [e,ke,ake,bake,cbake,acbake]  vowelCount = (i+1) + previous = 11\\n\\n```\\n\\n# Code\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        prev = 0\\n        c = 0\\n        for i in range(len(word)):\\n            if word[i] in \"aeioue\":\\n                temp = (i+1)+prev\\n                c += temp\\n                prev = temp\\n            else:\\n                c += prev\\n        return c \\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nWe need to Solve in O(n)\\n\\nFirst lets try to count all possible substr in O(n)\\nConsider, (\"abcde\")\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | b | c | d | e |\\n        \\u25B2-- \\u25B2 | \\u25B2 | \\u25B2 | \\u25B2 |\\n       -|---|-- | | | | | |\\n       -|---|---|-- | | | |\\n       -|---|---|---|-- | |\\n       -|---|---|---|---|--\\n        |   |   |   |   | \\n[a] <----   |   |   |   | ----> // at index 0 we can make 1 substr \\n[b,ab] <-----   |   |   | ----> // at index 1 we can make 2 substr\\n[c,bc,abc]<------   |   | ----> // at index 2 we can make 3 substr\\n[d,cd,bcd,abcd]<-----   | ----> // at index 3 we can make 4 substr\\n[e,de,cde,bcde,abcde]<--- ----> // at index 4 we can make 5 substr\\n                  //NOTE: i.e at index (i) we can make (i+1)substr\\n                  //      And LAST CHAR remain SAME\\n            //TOTAL = sum([0th index , 1st index..... n-1th index])\\n\\n\\n--------------------------------------------------------------------\\nLets now consider vowels only\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | c | b | a | k | e\\n        \\u25B2-----|---| \\u25B2 |   | \\u25B2\\n       -|---------| | |   | |\\n       -|---------- | |   | |\\n       -|-----------|--   | | \\n       -|-----------|------ |\\n1   <----           |       | // [a] we can make 1 substr containing vowels\\n                    |       |  \\n4   <----------------       | // [a,ba,cba,acba] we can make 4 substr containing vowels\\n                            | \\n6   <-----------------------  // [e,ke,ake,bake,cbake,acbake] we can make 5 substr containing vowels\\n\\n\\nat (i)th index we can make (i+1) substr and all substr will contain (i)th char\\n(if the (i)th char is \\'e\\' all substr will contain \\'e\\' at the end)\\n\\nnow if (i) is vowel we can make (i+1) substr\\n    that will contain atleast 1 vowel i.e itself\\n\\n-----------------------------------------------------------------\\nNow Lets Combine,\\nNo.of substr with Vowels count\\n       --------------------\\n       ----------------   |\\n       ------------   |   |\\n       --------   |   |   |\\n       ----   |   |   |   |\\n        a | c | b | a | k | e\\n        \\u25B2---\\u25B2-|-\\u25B2-| \\u25B2 | \\u25B2 | \\u25B2\\n       -|---|---|-| | | | | |\\n       -|---|---|-- | | | | |\\n       -|---|---|---|-- | | | \\n       -|---|---|---|---|-- |\\n1   <----   |   |   |   |   |// [a] ---------------------------> 1 substr 1 vowelsubstr 1 vowel count \\n1   <--------   |   |   |   |// [c,ac]-------------------------> 2 substr 1 vowelsubstr 1 vowel count\\n1   <------------   |   |   |// [b,cb,acb]---------------------> 3 substr 1 vowelsubstr 1 vowel count\\n5   <----------------   |   |// [a,ba,cba,acba]----------------> 4 substr 4 vowelsubstr 5 vowel count\\n5   <--------------------   |// [k,ak,bak,cbak,acbak]----------> 5 substr 4 vowelsubstr 5 vowel count\\n11  <------------------------// [e,ke,ake,bake,cbake,acbake]---> 6 substr 6 vowelsubstr 11 vowel count \\n\\nFor every CONSONANT ,the total count of vowel will be same as previous\\n\\nFor every VOWEL char we have to consider itself and previous count\\n\\nnow as we move forward, for currentIndex \\n    if we add currentCount + previousVowelCount we will get TOTAL vowelCount\\nprevious = 0 // initially\\n// i= 0  \\'a\\'\\n                            [a]  vowelCount = (i+1) + previous = 1 \\n// i= 1  \\'c\\'\\n                         [c,ac]  vowelCount = previous         = 1\\n// i= 2  \\'b\\' \\n                     [b,cb,acb]  vowelCount = previous         = 1\\n// i= 3  \\'a\\'\\n                [a,ba,cba,acba]  vowelCount = (i+1) + previous = 5\\n// i= 4  \\'k\\'\\n          [k,ak,bak,cbak,acbak]  vowelCount = previous         = 5\\n// i= 5  \\'e\\'\\n   [e,ke,ake,bake,cbake,acbake]  vowelCount = (i+1) + previous = 11\\n\\n```\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        prev = 0\\n        c = 0\\n        for i in range(len(word)):\\n            if word[i] in \"aeioue\":\\n                temp = (i+1)+prev\\n                c += temp\\n                prev = temp\\n            else:\\n                c += prev\\n        return c \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2928887,
                "title": "java-dynamic-programming-easy-approach-no-recursion",
                "content": "# Intuition\\nIn this approach , we make use of the himt provided : Every vowel just contributes 1 to the number vowels in each possible substring.\\n\\n# Approach\\nFor each vowel , we divide the string into left and right halves , i.e string to the left of desired vowel and that to the right of it. We then count the number of substrings to the left of that vowel that *contain the vowel* and we do the same for the right. We store them in two separate variables left and right\\n\\nWe also multiply the two variables together to get a count of the substrings that include the variables to the left *and* right of the desired vowel.\\n\\nNote that many substrings are counted multiple times but this is what we really want since every vowel contributes just one to the substring.\\n\\nThe additional +1 is to account for the substring that just contains the vowel.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long answer =0;\\n       long strlen = word.length();\\n        \\n        for(int i=0;i<word.length();i++)\\n        {\\nif((word.charAt(i)==\\'a\\')||(word.charAt(i)==\\'e\\')||(word.charAt(i)==\\'i\\')||(word.charAt(i)==\\'o\\')||(word.charAt(i)==\\'u\\'))\\n{\\nanswer = answer + countEach(i,strlen);\\n}\\n        \\n   \\n        }\\n        return answer;\\n    }\\n\\n    public long countEach(int index,long strlen)\\n    {\\n        long left = index;\\n        long right = strlen - index-1;\\n        long combine = left*right;\\n        return(left+right+combine+1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long answer =0;\\n       long strlen = word.length();\\n        \\n        for(int i=0;i<word.length();i++)\\n        {\\nif((word.charAt(i)==\\'a\\')||(word.charAt(i)==\\'e\\')||(word.charAt(i)==\\'i\\')||(word.charAt(i)==\\'o\\')||(word.charAt(i)==\\'u\\'))\\n{\\nanswer = answer + countEach(i,strlen);\\n}\\n        \\n   \\n        }\\n        return answer;\\n    }\\n\\n    public long countEach(int index,long strlen)\\n    {\\n        long left = index;\\n        long right = strlen - index-1;\\n        long combine = left*right;\\n        return(left+right+combine+1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2867590,
                "title": "remember-the-contribution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n\\n        long long n = word.size();\\n        long long sum = 0;\\n\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n\\n        for(long long i = 0; i<n; i++){\\n                if(s.find(word[i]) != s.end()){\\n                    sum += (n-i) * (i+1);\\n            }\\n        }\\n        return sum;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        \\n\\n        long long n = word.size();\\n        long long sum = 0;\\n\\n        unordered_set<char> s = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n\\n        for(long long i = 0; i<n; i++){\\n                if(s.find(word[i]) != s.end()){\\n                    sum += (n-i) * (i+1);\\n            }\\n        }\\n        return sum;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2860398,
                "title": "python-3-line-solution-video-walkthrough",
                "content": "[Click Here For Video Walkthrough](        https://youtu.be/mm6ZZkVUGwk\\n)\\n```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        ans, vowels = 0, set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'])\\n        for i,c in enumerate(word): ans += (i + 1) * (len(word) - i) * int(c in vowels)\\n        return ans\\n```\\n        \\n        \\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countVowels(self, word: str) -> int:\\n        ans, vowels = 0, set([\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'])\\n        for i,c in enumerate(word): ans += (i + 1) * (len(word) - i) * int(c in vowels)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2835188,
                "title": "easy-c-solution-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    // just see the contribution of each vowel in every substring\\n    long long countVowels(string s) {\\n        long long int ans=0;\\n        int n=s.length();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'o\\' or s[i]==\\'i\\' or s[i]==\\'u\\')\\n            {\\n                long long int a=(long long)(i+1)*(long long)(n-i);\\n                ans=ans+a;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    // just see the contribution of each vowel in every substring\\n    long long countVowels(string s) {\\n        long long int ans=0;\\n        int n=s.length();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\' or s[i]==\\'e\\' or s[i]==\\'o\\' or s[i]==\\'i\\' or s[i]==\\'u\\')\\n            {\\n                long long int a=(long long)(i+1)*(long long)(n-i);\\n                ans=ans+a;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2828309,
                "title": "easy-and-clean-solution-tc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long count = 0, n = word.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(\"aeiou\".indexOf(word.charAt(i)) != -1)\\n            count+=(i+1)*(n-i);\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long countVowels(String word) {\\n        long count = 0, n = word.length();\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(\"aeiou\".indexOf(word.charAt(i)) != -1)\\n            count+=(i+1)*(n-i);\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2802016,
                "title": "java-o-n-dynamic-programming-set",
                "content": "```\\nclass Solution {\\n\\tpublic long countVowels(String word) {\\n\\t\\tint n = word.length();\\n\\t\\tboolean[] st = new boolean[123];\\n\\t\\tst[\\'a\\'] = true;\\n\\t\\tst[\\'e\\'] = true;\\n\\t\\tst[\\'i\\'] = true;\\n\\t\\tst[\\'o\\'] = true;\\n\\t\\tst[\\'u\\'] = true;\\n\\n\\t\\tlong ans = 0;\\n\\t\\tlong s1 = 0;\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tif (st[word.charAt(i)]) {\\n\\t\\t\\t\\ts1 += (i + 1);\\n\\t\\t\\t}\\n\\n            ans += s1;\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n\\tpublic long countVowels(String word) {\\n\\t\\tint n = word.length();\\n\\t\\tboolean[] st = new boolean[123];\\n\\t\\tst[\\'a\\'] = true;\\n\\t\\tst[\\'e\\'] = true;\\n\\t\\tst[\\'i\\'] = true;\\n\\t\\tst[\\'o\\'] = true;\\n\\t\\tst[\\'u\\'] = true;\\n\\n\\t\\tlong ans = 0;\\n\\t\\tlong s1 = 0;\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tif (st[word.charAt(i)]) {\\n\\t\\t\\t\\ts1 += (i + 1);\\n\\t\\t\\t}\\n\\n            ans += s1;\\n\\t\\t}\\n\\t\\treturn ans;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2790777,
                "title": "c-solution",
                "content": "All intuition is based on very similar problems:\\n[2262. Total Appeal of A String](https://leetcode.com/problems/total-appeal-of-a-string/) and\\n[828. Count Unique Characters of All Substrings of a Given String](https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/)\\nbut this one is the most simplest.\\n```\\npublic class Solution {\\n    public long CountVowels(string word) {\\n        long res = 0;\\n        for(int i = 0; i < word.Length; i++){\\n            if(\"aeiou\".IndexOf(word[i]) >= 0){\\n                res += 1L*(i+1)*(word.Length-i);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Combinatorics"
                ],
                "code": "```\\npublic class Solution {\\n    public long CountVowels(string word) {\\n        long res = 0;\\n        for(int i = 0; i < word.Length; i++){\\n            if(\"aeiou\".IndexOf(word[i]) >= 0){\\n                res += 1L*(i+1)*(word.Length-i);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787320,
                "title": "c-maths-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe just need to find our how many times a char is involved if we take all the substrings.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor any index i, if we want to include i in a substring then we can\\nstart from any index 0 --> i and end at index i --> n-1.\\nSo total times that char will be used will be (i+1)*(n-i)\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntypedef long long ll;\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        ll ans = 0, n = word.size();\\n        unordered_set<char> c = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(ll i=0; i<n; i++){\\n            if(c.find(word[i]) != c.end()){\\n                ans += (i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\ntypedef long long ll;\\nclass Solution {\\npublic:\\n    long long countVowels(string word) {\\n        ll ans = 0, n = word.size();\\n        unordered_set<char> c = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'};\\n        for(ll i=0; i<n; i++){\\n            if(c.find(word[i]) != c.end()){\\n                ans += (i+1)*(n-i);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785252,
                "title": "python3-counting",
                "content": "class Solution:\\n\\n    def countVowels(self, word: str) -> int:\\n        vowels = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}\\n        n = len(word)\\n        res = 0\\n        \\n        for i,char in enumerate(word):\\n            if char in vowels:\\n                res+=(i+1)*(n-i)\\n            \\n        return res",
                "solutionTags": [],
                "code": "class Solution:\\n\\n    def countVowels(self, word: str) -> int:\\n        vowels = {\\'a\\',\\'e\\',\\'i\\',\\'o\\',\\'u\\'}",
                "codeTag": "Java"
            },
            {
                "id": 2784790,
                "title": "java-easy-to-understand",
                "content": "**Approach to this problem**\\nWe need to find, how many substring can contains the current character.\\nlet\\'s say we have a string s = **\"xxaxxx\"**\\nThen, total substring can be formed will be\\n**xxa, xa, a, ax, axx, axxx, xax, xaxx, xaxxx, xxax, xxaxx, xxaxxx**\\nall left substring that contains current character = **xxa, xa**\\nall right substring that contains current character = **ax, axx, axxx**\\nall substring from left to right that contains current character =  **xax, xaxx, xaxxx, xxax, xxaxx, xxaxxx**\\nwe have to add the current character also, **a**\\nso total substring that will contain the current character = **12**\\n**General formula =** **(index + 1) * (length - index)**      **i.e. index start from 0**\\n(2 + 1) * (6 - 2) = 12\\nwe have to apply this for every vowel in the string.\\n\\n```\\npublic long countVowels(String word) {\\n\\tchar[] arr = word.toCharArray();\\n\\tint n = arr.length;\\n\\tlong res = 0;\\n\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\tif(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n\\t\\t   res += (i + 1L) * (n - i);\\n\\t}\\n\\treturn res;\\n}",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "**Approach to this problem**\\nWe need to find, how many substring can contains the current character.\\nlet\\'s say we have a string s = **\"xxaxxx\"**\\nThen, total substring can be formed will be\\n**xxa, xa, a, ax, axx, axxx, xax, xaxx, xaxxx, xxax, xxaxx, xxaxxx**\\nall left substring that contains current character = **xxa, xa**\\nall right substring that contains current character = **ax, axx, axxx**\\nall substring from left to right that contains current character =  **xax, xaxx, xaxxx, xxax, xxaxx, xxaxxx**\\nwe have to add the current character also, **a**\\nso total substring that will contain the current character = **12**\\n**General formula =** **(index + 1) * (length - index)**      **i.e. index start from 0**\\n(2 + 1) * (6 - 2) = 12\\nwe have to apply this for every vowel in the string.\\n\\n```\\npublic long countVowels(String word) {\\n\\tchar[] arr = word.toCharArray();\\n\\tint n = arr.length;\\n\\tlong res = 0;\\n\\tfor (int i = 0; i < arr.length; i++) {\\n\\t\\tif(arr[i] == \\'a\\' || arr[i] == \\'e\\' || arr[i] == \\'i\\' || arr[i] == \\'o\\' || arr[i] == \\'u\\')\\n\\t\\t   res += (i + 1L) * (n - i);\\n\\t}\\n\\treturn res;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 2784617,
                "title": "cpp-easy-to-understand-combinatorics",
                "content": "# Intuition\\nInseted of counting number of vowels in each substring....just\\ncount in how many substring a particular vowel will occur.\\n\\n# Complexity\\n- Time complexity:\\n  Linear time complexcity o(n)\\n\\n- Space complexity:\\n  constant time complexity o(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long countVowels(string str) \\n{\\n    long long int count = 0;\\n    \\n    for(int i=0;i<str.length();i++)\\n    {\\n        //if the curr char is vowel the we will make the ans\\n        \\n\\t\\t//temp_count = left + self + right\\n\\t\\t//temp_count = i    +  1  + (1+i) * (str.length()-1 - i)\\n\\t\\tlong long temp_count=0;\\n\\t\\tif(fun(str[i])==true)\\n\\t\\t{\\n\\t\\t\\ttemp_count=temp_count+1;   //self char will be considered as string of one length\\n\\t\\t\\ttemp_count=temp_count+i;   //the curr char will occur in the substring formes by taking all the left char into account\\n\\t\\t\\ttemp_count=temp_count + ((str.length()-1)-i) * (i+1);\\n\\t\\t\\t\\n\\t\\t\\tcount = count + temp_count;\\n\\t\\t}\\n\\t\\t//else if the curr char is not the vowel then we weill just skip it   \\t\\n    }\\n    return count;\\n}\\nbool fun(char ch)\\n{\\n\\tif(ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\')\\n\\treturn true;\\n\\t\\n\\treturn false;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String",
                    "Dynamic Programming",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long countVowels(string str) \\n{\\n    long long int count = 0;\\n    \\n    for(int i=0;i<str.length();i++)\\n    {\\n        //if the curr char is vowel the we will make the ans\\n        \\n\\t\\t//temp_count = left + self + right\\n\\t\\t//temp_count = i    +  1  + (1+i) * (str.length()-1 - i)\\n\\t\\tlong long temp_count=0;\\n\\t\\tif(fun(str[i])==true)\\n\\t\\t{\\n\\t\\t\\ttemp_count=temp_count+1;   //self char will be considered as string of one length\\n\\t\\t\\ttemp_count=temp_count+i;   //the curr char will occur in the substring formes by taking all the left char into account\\n\\t\\t\\ttemp_count=temp_count + ((str.length()-1)-i) * (i+1);\\n\\t\\t\\t\\n\\t\\t\\tcount = count + temp_count;\\n\\t\\t}\\n\\t\\t//else if the curr char is not the vowel then we weill just skip it   \\t\\n    }\\n    return count;\\n}\\nbool fun(char ch)\\n{\\n\\tif(ch==\\'a\\' or ch==\\'e\\' or ch==\\'i\\' or ch==\\'o\\' or ch==\\'u\\')\\n\\treturn true;\\n\\t\\n\\treturn false;\\n}\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568679,
                "content": [
                    {
                        "username": "LeetCodeFunker",
                        "content": "What is the point for asking these kind of question??"
                    },
                    {
                        "username": "nekrand",
                        "content": "The same as the point for asking almost any other problem in Algorithm section. To check how a person can think and solve a problem."
                    },
                    {
                        "username": "Moonlighttt24",
                        "content": "hii"
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "always remember to change everything in an operation to long, i wasted so much time debugging the same"
                    }
                ]
            },
            {
                "id": 1854975,
                "content": [
                    {
                        "username": "LeetCodeFunker",
                        "content": "What is the point for asking these kind of question??"
                    },
                    {
                        "username": "nekrand",
                        "content": "The same as the point for asking almost any other problem in Algorithm section. To check how a person can think and solve a problem."
                    },
                    {
                        "username": "Moonlighttt24",
                        "content": "hii"
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "always remember to change everything in an operation to long, i wasted so much time debugging the same"
                    }
                ]
            },
            {
                "id": 2050212,
                "content": [
                    {
                        "username": "LeetCodeFunker",
                        "content": "What is the point for asking these kind of question??"
                    },
                    {
                        "username": "nekrand",
                        "content": "The same as the point for asking almost any other problem in Algorithm section. To check how a person can think and solve a problem."
                    },
                    {
                        "username": "Moonlighttt24",
                        "content": "hii"
                    },
                    {
                        "username": "bedmuthaapoorv",
                        "content": "always remember to change everything in an operation to long, i wasted so much time debugging the same"
                    }
                ]
            }
        ]
    }
]