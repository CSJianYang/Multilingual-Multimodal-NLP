[
    {
        "title": "Minimum Average Difference",
        "question_content": "You are given a 0-indexed integer array nums of length n.\nThe average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. Both averages should be rounded down to the nearest integer.\nReturn the index with the minimum average difference. If there are multiple such indices, return the smallest one.\nNote:\n\n\tThe absolute difference of two numbers is the absolute value of their difference.\n\tThe average of n elements is the sum of the n elements divided (integer division) by n.\n\tThe average of 0 elements is considered to be 0.\n\n&nbsp;\nExample 1:\n\nInput: nums = [2,5,3,9,5,3]\nOutput: 3\nExplanation:\n- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.\n- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.\n- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.\n- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.\n- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.\n- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.\nThe average difference of index 3 is the minimum average difference so return 3.\n\nExample 2:\n\nInput: nums = [0]\nOutput: 0\nExplanation:\nThe only index is 0 so return 0.\nThe average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 105\n\t0 <= nums[i] <= 105",
        "solutions": [
            {
                "id": 1994575,
                "title": "prefix-sum-o-1-space",
                "content": "# C++:\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n(size(nums)), minAverageDifference(INT_MAX), index;\\n        \\n        long long sumFromFront(0), sumFromEnd(0);\\n        for (auto& num : nums) sumFromEnd += num;\\n        \\n        for (int i=0; i<n; i++) {\\n            sumFromFront += nums[i];\\n            sumFromEnd -= nums[i];\\n            int a = sumFromFront / (i+1); // average of the first i + 1 elements.\\n            int b = (i == n-1) ? 0 : sumFromEnd / (n-i-1); // average of the last n - i - 1 elements.\\n            \\n            if (abs(a-b) < minAverageDifference) {\\n                minAverageDifference = abs(a-b);\\n                index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```\\n\\n# Python:\\n```\\n\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n\\n        sumEnd, sumFront, res, diff, n = 0, 0, 0, 1e9, len(nums)\\n        for num in nums:\\n            sumEnd += num\\n\\n        for i in range(n):\\n            sumFront += nums[i]\\n            sumEnd -= nums[i]\\n\\n            avg1 = sumEnd//(n-1-i) if i != n-1 else 0\\n            avg2 = sumFront//(i+1)\\n\\n            if abs(avg1-avg2) < diff:\\n                diff = abs(avg1-avg2)\\n                res = i\\n        \\n        return res\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n(size(nums)), minAverageDifference(INT_MAX), index;\\n        \\n        long long sumFromFront(0), sumFromEnd(0);\\n        for (auto& num : nums) sumFromEnd += num;\\n        \\n        for (int i=0; i<n; i++) {\\n            sumFromFront += nums[i];\\n            sumFromEnd -= nums[i];\\n            int a = sumFromFront / (i+1); // average of the first i + 1 elements.\\n            int b = (i == n-1) ? 0 : sumFromEnd / (n-i-1); // average of the last n - i - 1 elements.\\n            \\n            if (abs(a-b) < minAverageDifference) {\\n                minAverageDifference = abs(a-b);\\n                index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```\n```\\n\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n\\n        sumEnd, sumFront, res, diff, n = 0, 0, 0, 1e9, len(nums)\\n        for num in nums:\\n            sumEnd += num\\n\\n        for i in range(n):\\n            sumFront += nums[i]\\n            sumEnd -= nums[i]\\n\\n            avg1 = sumEnd//(n-1-i) if i != n-1 else 0\\n            avg2 = sumFront//(i+1)\\n\\n            if abs(avg1-avg2) < diff:\\n                diff = abs(avg1-avg2)\\n                res = i\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874836,
                "title": "c-easy-detailed-explaination-o-n",
                "content": "**PLEASE UPVOTE IF YOU FIND MY APPROACH HELPFUL, MEANS A LOT \\uD83D\\uDE0A**\\n\\n**Intuition:** We just have to take average difference and return the index giving minimum average difference.\\n\\n**Approach:**\\n* Take out `totalsum` which will be sum of all n elements and `currentsum` which will be the sum till `ith` index.\\n* Calculate the `avg1` till ith index and `avg2` till n-1-ith index.\\n* Now take absolute diff btw `avg1` and `avg2` and keep tracking the index giving minimum diff.\\n* return the index giving minimum diff.\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long totalsum = 0, currentsum = 0;\\n        int n = nums.size();\\n        \\n        // calc totalsum\\n        for(auto i : nums)\\n            totalsum += i;\\n        \\n        int mini = INT_MAX;\\n        int indexans = 0;\\n        \\n        // calc the avg1 till ith index and avg2 till n-1-ith index\\n        // now take absolute diff btw avg1 and avg2 and keep tracking the index giving minimum diff\\n        // return the index giving minimum diff\\n        for(int i=0; i<n; i++)\\n        {\\n            currentsum += nums[i];\\n            int avg1 = currentsum/(i+1);\\n            if(i==n-1)\\n            {\\n                if(avg1<mini)\\n                    return n-1;\\n                else\\n                    break;\\n            }\\n            int avg2 = (totalsum - currentsum)/(n-i-1);\\n            \\n            if(abs(avg1-avg2)<mini)\\n            {\\n                mini = abs(avg1-avg2);\\n                indexans = i;\\n            }\\n        }\\n        \\n        return indexans;\\n    }\\n};\\n```\\n**Time Complexity** => `O(N)`\\n**Space Complexity** => `O(1)`\\n\\n![image](https://assets.leetcode.com/users/images/f676b124-08ca-4c1c-adc9-0cc3bf101cee_1670122663.4309115.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long totalsum = 0, currentsum = 0;\\n        int n = nums.size();\\n        \\n        // calc totalsum\\n        for(auto i : nums)\\n            totalsum += i;\\n        \\n        int mini = INT_MAX;\\n        int indexans = 0;\\n        \\n        // calc the avg1 till ith index and avg2 till n-1-ith index\\n        // now take absolute diff btw avg1 and avg2 and keep tracking the index giving minimum diff\\n        // return the index giving minimum diff\\n        for(int i=0; i<n; i++)\\n        {\\n            currentsum += nums[i];\\n            int avg1 = currentsum/(i+1);\\n            if(i==n-1)\\n            {\\n                if(avg1<mini)\\n                    return n-1;\\n                else\\n                    break;\\n            }\\n            int avg2 = (totalsum - currentsum)/(n-i-1);\\n            \\n            if(abs(avg1-avg2)<mini)\\n            {\\n                mini = abs(avg1-avg2);\\n                indexans = i;\\n            }\\n        }\\n        \\n        return indexans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994628,
                "title": "a-few-lines-java-solution",
                "content": "Calculate the sum first and then minus the left sum in te for loop.\\n```\\npublic int minimumAverageDifference(int[] nums) {\\n\\tint len = nums.length, res = 0;\\n\\tlong min = Integer.MAX_VALUE, sum = 0, leftSum = 0, rightSum = 0;\\n\\tfor (int num : nums)\\n\\t\\tsum += num;\\n\\tfor (int i = 0; i < len; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum = sum - leftSum;\\n\\t\\tlong diff = Math.abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len -i - 1)));\\n\\t\\tif (diff < min) {\\n\\t\\t\\tmin = diff;\\n\\t\\t\\tres = i;\\n\\t\\t}\\n\\t}\\n\\treturn res;\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\npublic int minimumAverageDifference(int[] nums) {\\n\\tint len = nums.length, res = 0;\\n\\tlong min = Integer.MAX_VALUE, sum = 0, leftSum = 0, rightSum = 0;\\n\\tfor (int num : nums)\\n\\t\\tsum += num;\\n\\tfor (int i = 0; i < len; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum = sum - leftSum;\\n\\t\\tlong diff = Math.abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len -i - 1)));\\n\\t\\tif (diff < min) {\\n\\t\\t\\tmin = diff;\\n\\t\\t\\tres = i;\\n\\t\\t}\\n\\t}\\n\\treturn res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2874755,
                "title": "python3-prefix-sum",
                "content": "**Algorithm**\\n(1) To get the average of something, we first need to get the sum.\\n(2) At each index ```i```, if we know the sum of the first i + 1 elements, and the sum of the last n - i - 1 elements, we can calculate their averages.\\n - We can compute the sum of the first i + 1 elements by adding the value at ```i``` to the sum of the first ```i``` elements (prefix sum).\\n - We can get the sum of the last n - i - 1 elements by using the total sum of the entire array - the sum of the first i + 1 elements\\n\\n(3) At each ```i```, we just need to store ```i``` if the current ```absolute difference``` is less than any ```absolute difference``` we have seen before.\\n**TC: O(n)**\\n\\n```python\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        # leftSum represents the sum of the first i + 1 elements at index i\\n        n, totalSum, leftSum = len(nums), sum(nums), 0\\n        \\n        # res[0] is the minimum absolute difference, and res[1] is the index.\\n        res = [inf,inf]\\n        \\n        for i,v in enumerate(nums):\\n            leftSum += v\\n            \\n            leftAvg = leftSum//(i+1)\\n            # when we are at the last index, the right hand side sum is 0. (To aviod divide by zero error)\\n            rightAvg = (totalSum-leftSum)//(n-i-1) if n-i-1!=0 else 0\\n            absDif = abs(leftAvg-rightAvg)\\n            \\n            # min will take care of \"If there are multiple such indices, return the smallest one.\"\\n            res = min(res,[absDif,i])\\n        \\n        # return the index\\n        return res[1]\\n```\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```i```\n```i```\n```i```\n```i```\n```i```\n```absolute difference```\n```absolute difference```\n```python\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        # leftSum represents the sum of the first i + 1 elements at index i\\n        n, totalSum, leftSum = len(nums), sum(nums), 0\\n        \\n        # res[0] is the minimum absolute difference, and res[1] is the index.\\n        res = [inf,inf]\\n        \\n        for i,v in enumerate(nums):\\n            leftSum += v\\n            \\n            leftAvg = leftSum//(i+1)\\n            # when we are at the last index, the right hand side sum is 0. (To aviod divide by zero error)\\n            rightAvg = (totalSum-leftSum)//(n-i-1) if n-i-1!=0 else 0\\n            absDif = abs(leftAvg-rightAvg)\\n            \\n            # min will take care of \"If there are multiple such indices, return the smallest one.\"\\n            res = min(res,[absDif,i])\\n        \\n        # return the index\\n        return res[1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874842,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\n---\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans = 0, n = nums.size(), mi = INT_MAX;\\n        // since we need the sum for first i + 1 and last n - i - 1 elements\\n        // we can pre-calculate it first\\n        // it is called prefix sum and suffix sum\\n        vector<long long> pref(n);\\n        // prev[0] is the first element\\n        pref[0] = nums[0];\\n        // starting from i = 1, pref[i] is the sum + the current element\\n        for (int i = 1; i < n; i++) pref[i] = pref[i - 1] + nums[i];\\n        // then we can iterate each number\\n        for (int i = 0; i < n; i++) {\\n            // now we know the prefix sum\\n            // the suffix sum is simply pref[n - 1] - pref[i]\\n            long long k = abs((pref[i] / (i + 1)) - ((pref[n - 1] - pref[i]) / max(n - i - 1, 1)));\\n            // check the min and update ans\\n            if (k < mi) {\\n                mi = k;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans = 0, n = nums.size(), mi = INT_MAX;\\n        // since we need the sum for first i + 1 and last n - i - 1 elements\\n        // we can pre-calculate it first\\n        // it is called prefix sum and suffix sum\\n        vector<long long> pref(n);\\n        // prev[0] is the first element\\n        pref[0] = nums[0];\\n        // starting from i = 1, pref[i] is the sum + the current element\\n        for (int i = 1; i < n; i++) pref[i] = pref[i - 1] + nums[i];\\n        // then we can iterate each number\\n        for (int i = 0; i < n; i++) {\\n            // now we know the prefix sum\\n            // the suffix sum is simply pref[n - 1] - pref[i]\\n            long long k = abs((pref[i] / (i + 1)) - ((pref[n - 1] - pref[i]) / max(n - i - 1, 1)));\\n            // check the min and update ans\\n            if (k < mi) {\\n                mi = k;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875930,
                "title": "simple-o-n-time-o-1-space-beginner-friendly",
                "content": "# Intuition\\nwe have to take count of left and right sum at each index.\\n\\n# Approach\\nwe will be taking left sum and right sum.\\nwe will find the average at each index.\\nIf the current difference is less than last minimum difference than update last minimum difference and ans index.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n=nums.length;\\n        //if length==1 difference=0\\n        if(n==1)return 0;\\n        // initialsing left and right sum\\n        long right=0,left=0;\\n        //ans will contain index\\n        int ans=0;\\n        //mina will contain minimum difference found till now\\n        long mina=100001;\\n        for(Integer i:nums){right+=i;}//right=total sum\\n\\n        //iterating on array and obtaining corresponding difference\\n        for(int i=0; i<n; i++){\\n\\n            //left sum increases on each iteration\\n            left+=nums[i];\\n            //right sum decreases on each iteration\\n            right-=nums[i];\\n            //avl -> average of left side\\n            long avl=left/(i+1);\\n            //avr-> average of right side\\n            long avr=0;\\n            //for last index right=0 , avr=0\\n            if(i!=n-1){avr=right/(n-1-i);}\\n\\n            //if current difference is less than mina \\n            if(Math.abs(avl-avr)<mina)\\n            {\\n                //update mina \\n            mina=Math.abs(avl-avr);\\n            //update ans index\\n            ans=i;}\\n        }\\n        // return ans index\\n        return ans;\\n    }\\n}\\n//Thank you\\n//Upvote if found helpful.\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n=nums.length;\\n        //if length==1 difference=0\\n        if(n==1)return 0;\\n        // initialsing left and right sum\\n        long right=0,left=0;\\n        //ans will contain index\\n        int ans=0;\\n        //mina will contain minimum difference found till now\\n        long mina=100001;\\n        for(Integer i:nums){right+=i;}//right=total sum\\n\\n        //iterating on array and obtaining corresponding difference\\n        for(int i=0; i<n; i++){\\n\\n            //left sum increases on each iteration\\n            left+=nums[i];\\n            //right sum decreases on each iteration\\n            right-=nums[i];\\n            //avl -> average of left side\\n            long avl=left/(i+1);\\n            //avr-> average of right side\\n            long avr=0;\\n            //for last index right=0 , avr=0\\n            if(i!=n-1){avr=right/(n-1-i);}\\n\\n            //if current difference is less than mina \\n            if(Math.abs(avl-avr)<mina)\\n            {\\n                //update mina \\n            mina=Math.abs(avl-avr);\\n            //update ans index\\n            ans=i;}\\n        }\\n        // return ans index\\n        return ans;\\n    }\\n}\\n//Thank you\\n//Upvote if found helpful.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875356,
                "title": "python-3-8-lines-w-explanation-and-example-t-m-95-80",
                "content": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: list[int]) -> int:\\n\\n                                                        # Example: nums = [2, 5, 4, 3, 1, 9, 5, 3]\\n        n = len(nums)                                   # \\n        pref = list(accumulate(nums))                   #           pref = [2, 7,11,14,15,24,29,32]\\n                                                        #              i:   0  1  2  3  4  5  6  7\\n                                                        # \\n        ans = (pref[-1]//n, n-1)                        #           ans = (32//8,8-1) = (4,7)\\n  \\n        for i in range(n-1):                            #      i        1st ave       2nd ave    abs diff    ans\\n            diff = abs(pref[i]//(i+1) -                 #   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013      \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n                      (pref[-1] - pref[i])//(n-i-1))    #                                                   (4, 7)\\n\\n                                                        #      0        2//1 = 2      29//7 = 4      2      (2, 0)\\n            ans  = min(ans, (diff,i))                   #      1        7//2 = 3      25//6 = 4      1      (1, 1)\\n                                                        #      2       11//3 = 3      21//5 = 4      1      (1, 1)\\n        return ans[1]                                   #      3       14//4 = 3      18//4 = 4      1      (1, 1)\\n                                                        #      4       15//5 = 3      17//3 = 5      2      (1, 1)\\n                                                        #      5       24//6 = 4       8//2 = 4      0      (0, 5)\\n                                                        #      6       29//7 = 4       3//1 = 3      1      (0, 5)\\n                                                        #                                                       |\\n                                                        #                                             return ans[1]\\n```\\n[https://leetcode.com/submissions/detail/854132107/](http://)\\n\\nI could be wrong, but I think that time is *O*(*N*) and space is *O*(*N*).",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: list[int]) -> int:\\n\\n                                                        # Example: nums = [2, 5, 4, 3, 1, 9, 5, 3]\\n        n = len(nums)                                   # \\n        pref = list(accumulate(nums))                   #           pref = [2, 7,11,14,15,24,29,32]\\n                                                        #              i:   0  1  2  3  4  5  6  7\\n                                                        # \\n        ans = (pref[-1]//n, n-1)                        #           ans = (32//8,8-1) = (4,7)\\n  \\n        for i in range(n-1):                            #      i        1st ave       2nd ave    abs diff    ans\\n            diff = abs(pref[i]//(i+1) -                 #   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013      \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013   \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013    \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\n                      (pref[-1] - pref[i])//(n-i-1))    #                                                   (4, 7)\\n\\n                                                        #      0        2//1 = 2      29//7 = 4      2      (2, 0)\\n            ans  = min(ans, (diff,i))                   #      1        7//2 = 3      25//6 = 4      1      (1, 1)\\n                                                        #      2       11//3 = 3      21//5 = 4      1      (1, 1)\\n        return ans[1]                                   #      3       14//4 = 3      18//4 = 4      1      (1, 1)\\n                                                        #      4       15//5 = 3      17//3 = 5      2      (1, 1)\\n                                                        #      5       24//6 = 4       8//2 = 4      0      (0, 5)\\n                                                        #      6       29//7 = 4       3//1 = 3      1      (0, 5)\\n                                                        #                                                       |\\n                                                        #                                             return ans[1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874648,
                "title": "python-c-running-prefix-suffix-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs computing running prefix and suffix of the input array. Time complexity is linear: **O(N)**. Space complexity is constant: **O(1)**.\\n****\\n\\n**Python #1.** First, linear-space solution with precomputed prefix & suffix.\\n```\\nimport numpy as np\\n\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        first, last = [], [0]\\n        f = l = 0\\n        \\n        for i,n in enumerate(nums,start=1):\\n            first.append((f:=f+n) // i)\\n\\n        for i,n in enumerate(reversed(nums[1:]),start=1):\\n            last.append((l:=l+n) // i)\\n            \\n        last.reverse()\\n        \\n        diff = [abs(f-l) for f,l in zip(first,last)]\\n        \\n        return np.argmin(diff)\\n```\\n\\n**Python #2.** Constant-space solution with running prefix & suffix.\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        i, m = 0, inf                        # running prefix starts from 0\\n        pfx, sfx = 0, sum(nums)              # running suffix starts from sum of array\\n        \\n        for j,n in enumerate(nums,start=1):\\n            pfx, sfx = pfx+n, sfx-n          # update prefix (+) and suffix (-)\\n            k = len(nums)-j or 1             # prevent suffix length to be 0\\n            d = abs(pfx//j - sfx//k)\\n            if d < m:\\n                m, i = d, j-1\\n\\n        return i\\n```\\n\\n**C++.** Constant-space solution with running prefix & suffix.\\n```\\nclass Solution \\n{\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long i = 0, j = 0, m = LONG_MAX, k, d;\\n        long pfx = 0, sfx = accumulate(nums.begin(), nums.end(), 0L);\\n        \\n        for (int n : nums)\\n        {\\n            pfx += n, sfx -= n, j += 1;\\n            k = nums.size() - j;\\n            d = abs(pfx/j - sfx/(k?k:1));\\n            if (d < m) m = d, i = j - 1;\\n        }\\n        \\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nimport numpy as np\\n\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        first, last = [], [0]\\n        f = l = 0\\n        \\n        for i,n in enumerate(nums,start=1):\\n            first.append((f:=f+n) // i)\\n\\n        for i,n in enumerate(reversed(nums[1:]),start=1):\\n            last.append((l:=l+n) // i)\\n            \\n        last.reverse()\\n        \\n        diff = [abs(f-l) for f,l in zip(first,last)]\\n        \\n        return np.argmin(diff)\\n```\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        i, m = 0, inf                        # running prefix starts from 0\\n        pfx, sfx = 0, sum(nums)              # running suffix starts from sum of array\\n        \\n        for j,n in enumerate(nums,start=1):\\n            pfx, sfx = pfx+n, sfx-n          # update prefix (+) and suffix (-)\\n            k = len(nums)-j or 1             # prevent suffix length to be 0\\n            d = abs(pfx//j - sfx//k)\\n            if d < m:\\n                m, i = d, j-1\\n\\n        return i\\n```\n```\\nclass Solution \\n{\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long i = 0, j = 0, m = LONG_MAX, k, d;\\n        long pfx = 0, sfx = accumulate(nums.begin(), nums.end(), 0L);\\n        \\n        for (int n : nums)\\n        {\\n            pfx += n, sfx -= n, j += 1;\\n            k = nums.size() - j;\\n            d = abs(pfx/j - sfx/(k?k:1));\\n            if (d < m) m = d, i = j - 1;\\n        }\\n        \\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994900,
                "title": "c-easy-solution",
                "content": "**Step by Step Approach---\\n1-Calculate prefix sum for every index and store it in array.\\n2-for every index calculate average difference and store its minimum value index.\\n***\\n**Code**\\n\\'\\'\\'\\n\\nclass Solution {\\npublic:\\n\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        if(n==1)    return 0;\\n        long long pre[n]; //to store prefix sum\\n        pre[0]=nums[0];\\n\\t\\t\\n\\t\\t//calculating prefix sum\\n        for(int i=1;i<n;i++)    pre[i]=pre[i-1]+nums[i];\\n\\t\\t\\n        long long res=INT_MAX;\\n        int ind=0;\\n\\t\\t\\n\\t\\t// calculating minimum average for i=0 to i=n-2\\n        for(int i=1;i<n;i++) {\\n            int k=(abs(pre[i-1]/i-(pre[n-1]-pre[i-1])/(n-i)));\\n            if(res>k){\\n                res=k;\\n                ind=i-1;\\n            }\\n        }\\n\\t\\t\\n\\t\\t//special case for i=n-1\\n        if(res>abs(pre[n-1]/n)){\\n            res=abs(pre[n-1]/n);\\n            ind=n-1;\\n        }\\n        return ind;\\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C",
                    "Math",
                    "Prefix Sum"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        if(n==1)    return 0;\\n        long long pre[n]; //to store prefix sum\\n        pre[0]=nums[0];\\n\\t\\t\\n\\t\\t//calculating prefix sum\\n        for(int i=1;i<n;i++)    pre[i]=pre[i-1]+nums[i];\\n\\t\\t\\n        long long res=INT_MAX;\\n        int ind=0;\\n\\t\\t\\n\\t\\t// calculating minimum average for i=0 to i=n-2\\n        for(int i=1;i<n;i++) {\\n            int k=(abs(pre[i-1]/i-(pre[n-1]-pre[i-1])/(n-i)));\\n            if(res>k){\\n                res=k;\\n                ind=i-1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1994839,
                "title": "c-easy-to-understand-o-n-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        \\n        long long right_sum = 0;\\n        for(auto it:nums) right_sum += it;\\n        \\n        int mini = INT_MAX;\\n        int idx = 0;\\n        \\n        long long left_sum = 0;\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            left_sum += nums[i];\\n            right_sum -= nums[i];\\n            \\n            long long first = (left_sum/(i+1));\\n    \\n            long long last = i<n-1 ? (right_sum/(n-i-1)) : 0;\\n            \\n            int diff = abs(first - last);\\n            \\n            if(diff < mini)\\n            {\\n                mini = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        \\n        long long right_sum = 0;\\n        for(auto it:nums) right_sum += it;\\n        \\n        int mini = INT_MAX;\\n        int idx = 0;\\n        \\n        long long left_sum = 0;\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            left_sum += nums[i];\\n            right_sum -= nums[i];\\n            \\n            long long first = (left_sum/(i+1));\\n    \\n            long long last = i<n-1 ? (right_sum/(n-i-1)) : 0;\\n            \\n            int diff = abs(first - last);\\n            \\n            if(diff < mini)\\n            {\\n                mini = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875662,
                "title": "c-prefix-sum-commented-solution-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        long long total = 0;\\n        long long curr = 0;\\n        for(auto it : nums) total += it;\\n        \\n        long long res;\\n        long long temp = INT_MAX;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            curr += nums[i];                          // curr left sum\\n            long long avg1 = curr/(i+1);                    // left part avg\\n            \\n            // if we are on last idx then just check for left part\\n            if(i==n-1)\\n            {\\n                if(avg1 < temp) \\n                    return n-1;\\n                else \\n                    break;\\n            }\\n            \\n            long long avg2 = (total-curr)/(n-i-1);          // right part avg\\n            \\n            // if we got a new min val then update index\\n            if(abs(avg1-avg2) < temp)\\n            {\\n                temp = abs(avg1-avg2);\\n                res = i;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        long long total = 0;\\n        long long curr = 0;\\n        for(auto it : nums) total += it;\\n        \\n        long long res;\\n        long long temp = INT_MAX;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            curr += nums[i];                          // curr left sum\\n            long long avg1 = curr/(i+1);                    // left part avg\\n            \\n            // if we are on last idx then just check for left part\\n            if(i==n-1)\\n            {\\n                if(avg1 < temp) \\n                    return n-1;\\n                else \\n                    break;\\n            }\\n            \\n            long long avg2 = (total-curr)/(n-i-1);          // right part avg\\n            \\n            // if we got a new min val then update index\\n            if(abs(avg1-avg2) < temp)\\n            {\\n                temp = abs(avg1-avg2);\\n                res = i;\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875391,
                "title": "c-easy-to-understand-no-extra-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        long long totalSum = 0;\\n        for (int num : nums) totalSum += num;\\n        //=======================================================================\\n        int mnAvgDiff = INT_MAX, mnAvgDiffIdx = -1;\\n        long long preSum = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            preSum += nums[i];\\n            long long postSum = totalSum - preSum;\\n            //==================================================\\n            int preCount = i + 1;\\n            int postCount = n - preCount;\\n            int preAvg = preSum / preCount;\\n            int postAvg = (postCount == 0)? 0 : (postSum / postCount);\\n            //====================================================\\n            int avgDiff = abs(preAvg - postAvg);\\n            if (avgDiff < mnAvgDiff)\\n            {\\n                mnAvgDiff = avgDiff;\\n                mnAvgDiffIdx = i;\\n            }\\n        }\\n        //=======================================================================\\n        return mnAvgDiffIdx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        long long totalSum = 0;\\n        for (int num : nums) totalSum += num;\\n        //=======================================================================\\n        int mnAvgDiff = INT_MAX, mnAvgDiffIdx = -1;\\n        long long preSum = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            preSum += nums[i];\\n            long long postSum = totalSum - preSum;\\n            //==================================================\\n            int preCount = i + 1;\\n            int postCount = n - preCount;\\n            int preAvg = preSum / preCount;\\n            int postAvg = (postCount == 0)? 0 : (postSum / postCount);\\n            //====================================================\\n            int avgDiff = abs(preAvg - postAvg);\\n            if (avgDiff < mnAvgDiff)\\n            {\\n                mnAvgDiff = avgDiff;\\n                mnAvgDiffIdx = i;\\n            }\\n        }\\n        //=======================================================================\\n        return mnAvgDiffIdx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874824,
                "title": "java-runtime-17ms-faster-than-96-63-prefix-sum-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long min = Integer.MAX_VALUE, sum = 0;\\n        for (int i : nums) sum += i;\\n        int leftIndex = 0, resultIndex = -1;\\n        long prefixSum = 0;\\n\\n        while (leftIndex < nums.length) {\\n            prefixSum += nums[leftIndex];\\n            long leftAverage = prefixSum / (leftIndex + 1);\\n            long sumRight = sum - prefixSum;\\n            if (sumRight != 0) sumRight /= nums.length - leftIndex - 1;\\n            long res = Math.abs(leftAverage - sumRight);\\n            if (res < min) {\\n                min = res;\\n                resultIndex = leftIndex;\\n            }\\n            leftIndex++;\\n        }\\n        return resultIndex;\\n    }\\n}\\n```\\n\\n![image](https://assets.leetcode.com/users/images/5d0ba1a4-fea0-4734-bc00-cdf00e45d5b4_1670122282.0697427.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long min = Integer.MAX_VALUE, sum = 0;\\n        for (int i : nums) sum += i;\\n        int leftIndex = 0, resultIndex = -1;\\n        long prefixSum = 0;\\n\\n        while (leftIndex < nums.length) {\\n            prefixSum += nums[leftIndex];\\n            long leftAverage = prefixSum / (leftIndex + 1);\\n            long sumRight = sum - prefixSum;\\n            if (sumRight != 0) sumRight /= nums.length - leftIndex - 1;\\n            long res = Math.abs(leftAverage - sumRight);\\n            if (res < min) {\\n                min = res;\\n                resultIndex = leftIndex;\\n            }\\n            leftIndex++;\\n        }\\n        return resultIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994717,
                "title": "python-very-easy-detailed-code-use-one-queue-to-track-moving-elements-with-image",
                "content": "Idea is to use a queue to have left_sum and right_sum.\\nAnd use a queue to track elements moving from right_sum to left_sum. Also update the length which is the divisor.\\n\\n**Note**: This can also be done without a queue and make space complexity to O(1). But using a queue makes it alot easier to write and understand. Time complexity remains the same.\\n\\nOnce an element is removed from left of the queue (which contains right part of array). \\n1. Add it to left_sum\\n2. Remove it from right_sum\\n3. Add 1 to left_length\\n4. Remove 1 from right_length\\n\\n![image](https://assets.leetcode.com/users/images/567bc13c-a84e-4c00-a455-0037ed13124b_1651341859.6866913.png)\\n\\n\\n\\n```\\ndef minimumAverageDifference(self, nums: List[int]) -> int:\\n    n = len(nums)\\n    if n == 1:\\n        return 0\\n\\n    queue = deque(nums[1: ])\\n\\n    left_sum = sum(nums[0: 1])\\n    right_sum = sum(queue)\\n\\n    left_length = 1\\n    right_length = n - 1\\n\\n    i = 0\\n\\n    min_avg = sys.maxsize\\n    min_avg_idx = None\\n\\n    while i < n:\\n        left_avg = left_sum // left_length\\n        if right_length:\\n            right_avg = right_sum // right_length\\n        else:\\n            right_avg = 0\\n\\n        diff = abs(left_avg - right_avg)\\n        if diff < min_avg:\\n            min_avg = diff\\n            min_avg_idx = i\\n\\n        # if queue is empty, we can stop. as it is the end.\\n        if not queue:\\n            break\\n\\t\\t# remove ele from left of the queue\\n        element = queue.popleft()\\n\\n\\t\\t# update for next iteration\\n        left_sum = left_sum + element\\n        right_sum = right_sum - element\\n\\n        left_length += 1\\n        right_length -= 1\\n\\n        i += 1\\n\\n    return min_avg_idx\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef minimumAverageDifference(self, nums: List[int]) -> int:\\n    n = len(nums)\\n    if n == 1:\\n        return 0\\n\\n    queue = deque(nums[1: ])\\n\\n    left_sum = sum(nums[0: 1])\\n    right_sum = sum(queue)\\n\\n    left_length = 1\\n    right_length = n - 1\\n\\n    i = 0\\n\\n    min_avg = sys.maxsize\\n    min_avg_idx = None\\n\\n    while i < n:\\n        left_avg = left_sum // left_length\\n        if right_length:\\n            right_avg = right_sum // right_length\\n        else:\\n            right_avg = 0\\n\\n        diff = abs(left_avg - right_avg)\\n        if diff < min_avg:\\n            min_avg = diff\\n            min_avg_idx = i\\n\\n        # if queue is empty, we can stop. as it is the end.\\n        if not queue:\\n            break\\n\\t\\t# remove ele from left of the queue\\n        element = queue.popleft()\\n\\n\\t\\t# update for next iteration\\n        left_sum = left_sum + element\\n        right_sum = right_sum - element\\n\\n        left_length += 1\\n        right_length -= 1\\n\\n        i += 1\\n\\n    return min_avg_idx\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2877672,
                "title": "python-beats-99-8-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        sumleft, sumright, lengthright, lengthleft, min, ind, = 0, sum(nums), len(nums), 0, 9999999, 0\\n        for i in range(len(nums)):\\n            sumleft += nums[i]\\n            sumright -= nums[i]\\n            lengthleft+=1\\n            lengthright-=1\\n            if lengthright!=0:\\n                val = (abs(sumleft//lengthleft - sumright//lengthright))\\n            else:\\n                val = (abs(sumleft//lengthleft))\\n            if val<min:\\n                min=val\\n                ind = i\\n        return ind\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        sumleft, sumright, lengthright, lengthleft, min, ind, = 0, sum(nums), len(nums), 0, 9999999, 0\\n        for i in range(len(nums)):\\n            sumleft += nums[i]\\n            sumright -= nums[i]\\n            lengthleft+=1\\n            lengthright-=1\\n            if lengthright!=0:\\n                val = (abs(sumleft//lengthleft - sumright//lengthright))\\n            else:\\n                val = (abs(sumleft//lengthleft))\\n            if val<min:\\n                min=val\\n                ind = i\\n        return ind\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875992,
                "title": "java-easy-java-solution-using-arrays-running-prefix-suffix-explained",
                "content": "## This question can be easily solved if you know the basic operations of Arrays in java.\\n Although it\\'s not the best optimised code but it can be easily understood by the beginners.\\n\\nFirst we are calculating the total sum of the elements of array nums and storing it in the variable sum.\\n\\nand then we are calculating leftsum,rightsum and Average Difference for every Index and we are storing the index of minimum average index in the variable index.\\nand finally we are returning the index.\\n**Runtime: 17 ms, faster than 95.63%**\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l = nums.length;  \\n        int index = 0;\\n        long min = Integer.MAX_VALUE, sum = 0, leftsum = 0, rightsum = 0;\\n        for (int j = 0; j < l; j++) {\\n            sum = sum + nums[j];\\n        }\\n        for (int i = 0; i < l; i++) {\\n            leftsum += nums[i];\\n            rightsum = sum - leftsum;\\n            long diff = Math.abs(leftsum / (i + 1) - (l - i == 1 ? 0 : rightsum / (l - i - 1)));  // if number of rightsum values = 0\\n            if (diff < min) {\\n                min = diff;\\n                index = i;\\n            }\\n        }\\n        return index;\\n\\n    }\\n}\\n```\\n# **\\n# Please upvote if this helps**\\n## Thanks",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l = nums.length;  \\n        int index = 0;\\n        long min = Integer.MAX_VALUE, sum = 0, leftsum = 0, rightsum = 0;\\n        for (int j = 0; j < l; j++) {\\n            sum = sum + nums[j];\\n        }\\n        for (int i = 0; i < l; i++) {\\n            leftsum += nums[i];\\n            rightsum = sum - leftsum;\\n            long diff = Math.abs(leftsum / (i + 1) - (l - i == 1 ? 0 : rightsum / (l - i - 1)));  // if number of rightsum values = 0\\n            if (diff < min) {\\n                min = diff;\\n                index = i;\\n            }\\n        }\\n        return index;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874642,
                "title": "javascript-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor each calculation by index, we can separate `nums` into two sub-arrays: left-side and right-side. Making the sum of entire left and right sides is not needed, just substract from right and add to left.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse two variables to save the sum of each side. At first, left side sum is 0 and right side sum is sum(nums). On each iteration i, add nums[i] to the left and substract nums[i] to the right, then calculate absolute average and update answer.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar minimumAverageDifference = function(nums) {\\n    let nL=nums.length;\\n    let leftSum = 0;\\n    let rightSum = nums.reduce((p,n)=>{return p+n},0);\\n\\n    let minimum = Infinity;\\n    let ans = Infinity;\\n    for (let i=0; i<nL; i++){\\n        leftSum += nums[i];\\n        rightSum -= nums[i];\\n        let res = Math.abs(Math.floor(((leftSum)/(i+1))) - Math.floor(((rightSum)/Math.max(1,(nL-1-i)))));\\n        if(res < minimum){\\n            minimum = res;\\n            ans = i;\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar minimumAverageDifference = function(nums) {\\n    let nL=nums.length;\\n    let leftSum = 0;\\n    let rightSum = nums.reduce((p,n)=>{return p+n},0);\\n\\n    let minimum = Infinity;\\n    let ans = Infinity;\\n    for (let i=0; i<nL; i++){\\n        leftSum += nums[i];\\n        rightSum -= nums[i];\\n        let res = Math.abs(Math.floor(((leftSum)/(i+1))) - Math.floor(((rightSum)/Math.max(1,(nL-1-i)))));\\n        if(res < minimum){\\n            minimum = res;\\n            ans = i;\\n        }\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2098497,
                "title": "python-easy-beginer-friendly",
                "content": "l -> sum of left array\\nr -> sum of right array\\n\\nAs we keep iterating we keep adding to **l** and delete from **r**\\n![image](https://assets.leetcode.com/users/images/77ee6f46-f8ed-40a1-80d0-8cc4dff1d386_1654090771.8141484.jpeg)\\n\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, a: List[int]) -> int:\\n        l=0\\n        r=sum(a)\\n        z=100001\\n        y=0\\n        n=len(a)\\n        \\n        for i in range(n-1):\\n            l+=a[i]\\n            r-=a[i]\\n        \\n            d=abs((l//(i+1))-(r//(n-i-1)))\\n            if d<z:\\n                z=d\\n                y=i\\n        \\n        if sum(a)//n<z:\\n            y=n-1\\n        \\n        return y\\n```\\n![image](https://assets.leetcode.com/users/images/ef6ef7cc-c4b8-48f3-ab7a-eb7fe4296e67_1654090737.6638153.jpeg)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, a: List[int]) -> int:\\n        l=0\\n        r=sum(a)\\n        z=100001\\n        y=0\\n        n=len(a)\\n        \\n        for i in range(n-1):\\n            l+=a[i]\\n            r-=a[i]\\n        \\n            d=abs((l//(i+1))-(r//(n-i-1)))\\n            if d<z:\\n                z=d\\n                y=i\\n        \\n        if sum(a)//n<z:\\n            y=n-1\\n        \\n        return y\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994693,
                "title": "c-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long long int n = nums.size();\\n        \\n        long long int left_sum = 0;\\n        long long int right_sum = 0;\\n        \\n        priority_queue<pair<long long int,long long int>,vector<pair<long long int,long long int> >,greater<pair<long int,long int> > > pq;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            right_sum += nums[i];\\n        }\\n        \\n        long long int i = 0;\\n        while(i<n)\\n        {\\n            right_sum -= nums[i];\\n            left_sum  += nums[i]; \\n            \\n            long long int tmp=0;\\n            \\n            if(i < n-1){\\n                tmp = abs((left_sum/(i+1)) - (right_sum/(n-i-1)));\\n                                                                              \\n            }\\n            else\\n                tmp = (left_sum/(i+1));\\n            \\n            pq.push({tmp,i});\\n            i++;\\n            \\n        }\\n        \\n        return pq.top().second;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long long int n = nums.size();\\n        \\n        long long int left_sum = 0;\\n        long long int right_sum = 0;\\n        \\n        priority_queue<pair<long long int,long long int>,vector<pair<long long int,long long int> >,greater<pair<long int,long int> > > pq;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            right_sum += nums[i];\\n        }\\n        \\n        long long int i = 0;\\n        while(i<n)\\n        {\\n            right_sum -= nums[i];\\n            left_sum  += nums[i]; \\n            \\n            long long int tmp=0;\\n            \\n            if(i < n-1){\\n                tmp = abs((left_sum/(i+1)) - (right_sum/(n-i-1)));\\n                                                                              \\n            }\\n            else\\n                tmp = (left_sum/(i+1));\\n            \\n            pq.push({tmp,i});\\n            i++;\\n            \\n        }\\n        \\n        return pq.top().second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994601,
                "title": "easy-to-understand-python-solution",
                "content": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        if len(nums) == 1:\\n            return 0\\n        min_avg_diff = math.inf\\n        index = -1\\n        one, two = 0, sum(nums)\\n        for i in range(0, len(nums)):\\n            one = one + nums[i]\\n            two = two - nums[i]\\n            one_avg = one//(i+1)\\n            if i == len(nums)-1:\\n                two_avg = 0\\n            else:\\n                two_avg = two//(len(nums)-i-1)\\n            avg_diff = abs(one_avg-two_avg)\\n            if avg_diff < min_avg_diff:\\n                min_avg_diff = avg_diff\\n                index = i\\n        return index\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        if len(nums) == 1:\\n            return 0\\n        min_avg_diff = math.inf\\n        index = -1\\n        one, two = 0, sum(nums)\\n        for i in range(0, len(nums)):\\n            one = one + nums[i]\\n            two = two - nums[i]\\n            one_avg = one//(i+1)\\n            if i == len(nums)-1:\\n                two_avg = 0\\n            else:\\n                two_avg = two//(len(nums)-i-1)\\n            avg_diff = abs(one_avg-two_avg)\\n            if avg_diff < min_avg_diff:\\n                min_avg_diff = avg_diff\\n                index = i\\n        return index\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994569,
                "title": "easy-c-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\t\\tlong long  n = nums.size(),sum = 0,total = accumulate(begin(nums),end(nums),0l);\\n\\t\\t\\tlong long maxi = LLONG_MAX,res = 0;\\n\\t\\t\\tfor(long long i = 0;i<n-1;i++){\\n\\t\\t\\t\\tsum+=nums[i];\\n\\t\\t\\t\\tlong long curr = abs(sum/(i+1) - (total-sum)/(n-i-1));\\n\\t\\t\\t\\tif(curr<maxi) maxi = curr,res = i;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn maxi>total/n ? n-1:res;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\t\\tlong long  n = nums.size(),sum = 0,total = accumulate(begin(nums),end(nums),0l);\\n\\t\\t\\tlong long maxi = LLONG_MAX,res = 0;\\n\\t\\t\\tfor(long long i = 0;i<n-1;i++){\\n\\t\\t\\t\\tsum+=nums[i];\\n\\t\\t\\t\\tlong long curr = abs(sum/(i+1) - (total-sum)/(n-i-1));\\n\\t\\t\\t\\tif(curr<maxi) maxi = curr,res = i;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2876780,
                "title": "it-works-but-looks-clumsy",
                "content": "Three ideas that I tried to implement here:\\n1. Avoid casting\\n2. Avoid inside-loop guard clauses, i.e. checks for edge cases like division by zero\\n3. Return early if the array is all zeroes\\n\\nTo 1: The only casting is done when summing up the array. Seems unavoidable.\\nTo 2: Check the last index when returning (not inside the for loop).\\n```csharp\\npublic class Solution\\n{\\n    public int MinimumAverageDifference(int[] nums)\\n    {\\n        long sum = nums.Sum(n => (long)n);\\n        if (sum == 0) return 0;\\n\\n        int minIndex = 0;\\n        int len = nums.Length;\\n        long front = 0;\\n        long minDiff = long.MaxValue;\\n\\n        for (int i = 1; i < len; i++)\\n        {\\n            front += nums[i - 1];\\n            long diff = Math.Abs((sum - front) / (len - i) - front / i);\\n            if (diff < minDiff) (minDiff, minIndex) = (diff, i - 1);\\n        }\\n\\n        return sum / len < minDiff ? len - 1 : minIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```csharp\\npublic class Solution\\n{\\n    public int MinimumAverageDifference(int[] nums)\\n    {\\n        long sum = nums.Sum(n => (long)n);\\n        if (sum == 0) return 0;\\n\\n        int minIndex = 0;\\n        int len = nums.Length;\\n        long front = 0;\\n        long minDiff = long.MaxValue;\\n\\n        for (int i = 1; i < len; i++)\\n        {\\n            front += nums[i - 1];\\n            long diff = Math.Abs((sum - front) / (len - i) - front / i);\\n            if (diff < minDiff) (minDiff, minIndex) = (diff, i - 1);\\n        }\\n\\n        return sum / len < minDiff ? len - 1 : minIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876648,
                "title": "c-easy-detailed-explaination-o-n-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long sum = 0,csum = 0;\\n        int  n = nums.size();\\n        \\n        for(auto x : nums) sum = sum + x;\\n        \\n        int min = INT_MAX, ans = 0;\\n        \\n        for(int i = 0; i<n; i++){\\n            csum = csum + nums[i];\\n            \\n            int avg1 = csum/(i+1);\\n            \\n            if(i == n-1){\\n                if(avg1<min){\\n                    return n-1;\\n                }\\n                else\\n                    break;\\n            }\\n            int avg2 = (sum - csum)/(n-i-1);\\n            if(abs(avg1 - avg2)<min){\\n                min = abs(avg1-avg2);\\n                ans = i;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long sum = 0,csum = 0;\\n        int  n = nums.size();\\n        \\n        for(auto x : nums) sum = sum + x;\\n        \\n        int min = INT_MAX, ans = 0;\\n        \\n        for(int i = 0; i<n; i++){\\n            csum = csum + nums[i];\\n            \\n            int avg1 = csum/(i+1);\\n            \\n            if(i == n-1){\\n                if(avg1<min){\\n                    return n-1;\\n                }\\n                else\\n                    break;\\n            }\\n            int avg2 = (sum - csum)/(n-i-1);\\n            if(abs(avg1 - avg2)<min){\\n                min = abs(avg1-avg2);\\n                ans = i;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875630,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        sum_num = sum(nums)\\n        left_Sum = 0\\n        s = [math.inf,math.inf]\\n        for i , j in enumerate(nums):\\n            left_Sum  += j\\n            left_avg = left_Sum//(i+1)\\n            right_avg = (sum_num - left_Sum) // (n-i-1) if (n-i-1) != 0 else 0\\n            avg = abs(left_avg - right_avg)\\n            s = min(s,[avg,i])\\n        return(s[1])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        sum_num = sum(nums)\\n        left_Sum = 0\\n        s = [math.inf,math.inf]\\n        for i , j in enumerate(nums):\\n            left_Sum  += j\\n            left_avg = left_Sum//(i+1)\\n            right_avg = (sum_num - left_Sum) // (n-i-1) if (n-i-1) != 0 else 0\\n            avg = abs(left_avg - right_avg)\\n            s = min(s,[avg,i])\\n        return(s[1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875481,
                "title": "c-prefix-suffix-sum-easy-efficient",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        \\n        long long right_sum = 0;\\n        for(auto it:nums) right_sum += it;\\n        \\n        int mini = INT_MAX;\\n        int idx = 0;\\n        \\n        long long left_sum = 0;\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            left_sum += nums[i];\\n            right_sum -= nums[i];\\n            \\n            long long first = (left_sum/(i+1));\\n    \\n            long long last = i<n-1 ? (right_sum/(n-i-1)) : 0;\\n            \\n            int diff = abs(first - last);\\n            \\n            if(diff < mini)\\n            {\\n                mini = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        int n=nums.size();\\n        \\n        long long right_sum = 0;\\n        for(auto it:nums) right_sum += it;\\n        \\n        int mini = INT_MAX;\\n        int idx = 0;\\n        \\n        long long left_sum = 0;\\n        \\n        for(int i=0; i<n; i++)\\n        {\\n            left_sum += nums[i];\\n            right_sum -= nums[i];\\n            \\n            long long first = (left_sum/(i+1));\\n    \\n            long long last = i<n-1 ? (right_sum/(n-i-1)) : 0;\\n            \\n            int diff = abs(first - last);\\n            \\n            if(diff < mini)\\n            {\\n                mini = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874734,
                "title": "easy-optimized-and-understandable-solution-prefix-sum-tc-o-n",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n\\n        int maxi=INT_MAX ,res=0,n=nums.size();\\n\\n        long total=0,sum=0;\\n\\n        for(auto x : nums){\\n\\n            total+=x;\\n        }\\n        for(int i = 0;i<n-1;i++){\\n\\n\\t\\t\\tsum+=nums[i];\\n\\n\\t\\t\\tlong curr = abs(sum/(i+1) - (total-sum)/(n-i-1));\\n\\n\\t\\t\\tif(curr<maxi) {\\n                maxi = curr;\\n                res = i;\\n            }\\n\\t\\t}\\n\\n\\t\\treturn maxi>total/n ? n-1:res;\\n        \\n    }\\n//Please Upvote :)\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n\\n        int maxi=INT_MAX ,res=0,n=nums.size();\\n\\n        long total=0,sum=0;\\n\\n        for(auto x : nums){\\n\\n            total+=x;\\n        }\\n        for(int i = 0;i<n-1;i++){\\n\\n\\t\\t\\tsum+=nums[i];\\n\\n\\t\\t\\tlong curr = abs(sum/(i+1) - (total-sum)/(n-i-1));\\n\\n\\t\\t\\tif(curr<maxi) {\\n                maxi = curr;\\n                res = i;\\n            }\\n\\t\\t}\\n\\n\\t\\treturn maxi>total/n ? n-1:res;\\n        \\n    }\\n//Please Upvote :)\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874641,
                "title": "use-prefix-sum-cpp-solution",
                "content": "```\\n  int minimumAverageDifference(vector<int>& nums)\\n    {\\n        long long int n=nums.size();\\n        long long int pre[n];\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            pre[i]=pre[i-1]+nums[i];  //Here we are making prefix sum array whic reduce the complexity of finding sum for each index ...\\n        }\\n        int average=INT32_MAX;  //for comparison\\n       \\n        int a,b,index;\\n        for(int i=0;i<n;i++)\\n        {\\n             a=pre[i]/(i+1);\\n            if(i!=(n-1))  //important condition because at every n-1 index our n-i-1 condition gives 0 value which will return runtime error exception . from explanation we are able to understood that at each n-1 index b==0\\n               b=(pre[n-1]-pre[i])/(n-i-1);\\n            else\\n                b=0;\\n            long long int maxi=abs(a-b);\\n           \\n            if(maxi<average)\\n            {\\n                if(maxi==0)\\n                {\\n                    return i;//this is lowest difference possible hence we are returning the index of that index\\n                }\\n                else\\n                {\\n                average=maxi;\\n                index=i;\\n                }\\n                \\n            }\\n        }\\n        return index;\\n        \\n    }``\\n```",
                "solutionTags": [],
                "code": "```\\n  int minimumAverageDifference(vector<int>& nums)\\n    {\\n        long long int n=nums.size();\\n        long long int pre[n];\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            pre[i]=pre[i-1]+nums[i];  //Here we are making prefix sum array whic reduce the complexity of finding sum for each index ...\\n        }\\n        int average=INT32_MAX;  //for comparison\\n       \\n        int a,b,index;\\n        for(int i=0;i<n;i++)\\n        {\\n             a=pre[i]/(i+1);\\n            if(i!=(n-1))  //important condition because at every n-1 index our n-i-1 condition gives 0 value which will return runtime error exception . from explanation we are able to understood that at each n-1 index b==0\\n               b=(pre[n-1]-pre[i])/(n-i-1);\\n            else\\n                b=0;\\n            long long int maxi=abs(a-b);\\n           \\n            if(maxi<average)\\n            {\\n                if(maxi==0)\\n                {\\n                    return i;//this is lowest difference possible hence we are returning the index of that index\\n                }\\n                else\\n                {\\n                average=maxi;\\n                index=i;\\n                }\\n                \\n            }\\n        }\\n        return index;\\n        \\n    }``\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2019583,
                "title": "c-two-solutions-prefix-sum-simple-easy-solution",
                "content": "class Solution {\\npublic:\\n//Time Complexicity: O(N)\\n//Sapce Complexicity: O(N)\\n\\n\\n\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector <long long int> v(n,0);\\n        v[0]=nums[0];\\n        for(int i=1; i<n; i++){\\n            v[i]=v[i-1]+nums[i];\\n        }\\n        int ans=0;\\n        int max=INT_MAX;\\n        for(int i=0; i<n-1; i++){\\n            long long int x=v[i]/(i+1);\\n            long long int y=v[n-1]-v[i];\\n            y=y/(n-i-1);\\n            if(max>abs(y-x)){\\n                ans=i;\\n                max=abs(x-y);\\n            }\\n        }\\n        if(max>v[n-1]/n){\\n            ans=n-1;\\n        }\\n        return ans;\\n    }\\n};\\n//Time Complexicity: O(N)\\n//Space Complexicity: O(1)\\n\\nclass Solution {\\npublic:\\n    \\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        long long int right=accumulate(nums.begin(),nums.end(),0ll);\\n        long long int left=0;\\n        long long int ans=0;\\n        long long int max=INT_MAX;\\n        for(int i=0; i<n-1; i++){\\n            left+=nums[i];\\n            long long int x=left/(i+1);\\n            long long int y=right-left;\\n            y=y/(n-i-1);\\n            long long int j=abs(x-y);\\n            if(max>abs(y-x)){\\n                 max=j;\\n                ans=i;\\n            }\\n        }\\n        if(max>(left+nums[n-1])/n){\\n            ans=n-1;\\n        }\\n        return ans;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "class Solution {\\npublic:\\n//Time Complexicity: O(N)\\n//Sapce Complexicity: O(N)\\n\\n\\n\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector <long long int> v(n,0);\\n        v[0]=nums[0];\\n        for(int i=1; i<n; i++){\\n            v[i]=v[i-1]+nums[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1999416,
                "title": "prefix-sum",
                "content": "We handle the average of zero elements in the very end. \\n\\n**C++**\\n```cpp\\nint minimumAverageDifference(vector<int>& nums) {\\n    vector<long long> ps{0};\\n    for (int n : nums)\\n        ps.push_back(n + ps.back());\\n    long long n = nums.size(), min_i = 0, sum = ps.back(), min_diff = INT_MAX;\\n    for (int i = 1; i < n; ++i)\\n        if (int diff = abs(ps[i] / i - (sum - ps[i]) / (n - i)); min_diff > diff) {\\n            min_diff = diff;\\n            min_i = i - 1;\\n        }\\n    return min_diff <= sum / n ? min_i : n - 1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint minimumAverageDifference(vector<int>& nums) {\\n    vector<long long> ps{0};\\n    for (int n : nums)\\n        ps.push_back(n + ps.back());\\n    long long n = nums.size(), min_i = 0, sum = ps.back(), min_diff = INT_MAX;\\n    for (int i = 1; i < n; ++i)\\n        if (int diff = abs(ps[i] / i - (sum - ps[i]) / (n - i)); min_diff > diff) {\\n            min_diff = diff;\\n            min_i = i - 1;\\n        }\\n    return min_diff <= sum / n ? min_i : n - 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1994597,
                "title": "python-easy-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef minimumAverageDifference(self, nums: List[int]) -> int:\\n\\t\\t\\tminiAverage = float(\"inf\")\\n\\t\\t\\tleft = 0\\n\\t\\t\\ts = sum(nums)\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor i, num in enumerate(nums):\\n\\t\\t\\t\\tleft += num\\n\\t\\t\\t\\tright = s - left\\n\\t\\t\\t\\tif i != len(nums) - 1:\\n\\t\\t\\t\\t\\tif abs(left // (i + 1) - right // (len(nums) - i - 1)) < miniAverage:\\n\\t\\t\\t\\t\\t\\tminiAverage = abs(left // (i + 1) - right // (len(nums) - i - 1))\\n\\t\\t\\t\\t\\t\\tres = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tif left // (i + 1) < miniAverage:\\n\\t\\t\\t\\t\\t\\tres = i\\n\\t\\t\\treturn res",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef minimumAverageDifference(self, nums: List[int]) -> int:\\n\\t\\t\\tminiAverage = float(\"inf\")\\n\\t\\t\\tleft = 0\\n\\t\\t\\ts = sum(nums)\\n\\t\\t\\tres = 0\\n\\t\\t\\tfor i, num in enumerate(nums):\\n\\t\\t\\t\\tleft += num\\n\\t\\t\\t\\tright = s - left\\n\\t\\t\\t\\tif i != len(nums) - 1:\\n\\t\\t\\t\\t\\tif abs(left // (i + 1) - right // (len(nums) - i - 1)) < miniAverage:\\n\\t\\t\\t\\t\\t\\tminiAverage = abs(left // (i + 1) - right // (len(nums) - i - 1))\\n\\t\\t\\t\\t\\t\\tres = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tif left // (i + 1) < miniAverage:\\n\\t\\t\\t\\t\\t\\tres = i\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 1994572,
                "title": "java-prefix-sum",
                "content": "The only catch here is to test the case taking all in the first average separetely else division by 0 exception will be encountered\\n```\\nclass Solution\\n{\\n    public int minimumAverageDifference(int[] nums)\\n    {\\n        int N = nums.length, id = 0;\\n        long min = Integer.MAX_VALUE;\\n        long[] pre = new long[N];\\n        pre[0] = nums[0];\\n        for(int i = 1; i < N; i++)\\n            pre[i] = pre[i-1]+nums[i];\\n        for(int i = 0; i < N-1; i++)\\n        {\\n            long diff = (long)(Math.abs(Math.round(pre[i]/(i+1) - Math.round((pre[N-1]-pre[i])/(N-i-1)))));\\n            if(diff < min)\\n            {\\n                id = i;\\n                min = diff;\\n            }\\n        }\\n        if(min > pre[N-1]/N) // Taking all on the first/left\\n            return N-1;\\n        return id;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public int minimumAverageDifference(int[] nums)\\n    {\\n        int N = nums.length, id = 0;\\n        long min = Integer.MAX_VALUE;\\n        long[] pre = new long[N];\\n        pre[0] = nums[0];\\n        for(int i = 1; i < N; i++)\\n            pre[i] = pre[i-1]+nums[i];\\n        for(int i = 0; i < N-1; i++)\\n        {\\n            long diff = (long)(Math.abs(Math.round(pre[i]/(i+1) - Math.round((pre[N-1]-pre[i])/(N-i-1)))));\\n            if(diff < min)\\n            {\\n                id = i;\\n                min = diff;\\n            }\\n        }\\n        if(min > pre[N-1]/N) // Taking all on the first/left\\n            return N-1;\\n        return id;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3273476,
                "title": "easy-python-solution-using-prefix-sum-run-time-75",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def minimumAverageDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        t_sm=sum(nums) #total sum\\n        mx_idx=len(nums) #last index\\n        st_sm=0 \\n        mn_val=t_sm//len(nums)\\n        mn_idx=len(nums)-1\\n        for i in range(len(nums)-1):\\n            t_sm-=nums[i]\\n            st_sm+=nums[i]\\n            mx_idx-=1\\n            val=abs((st_sm//(i+1)) - (t_sm//mx_idx))\\n            old_mn=mn_val\\n            mn_val=min(mn_val,val)\\n            if mn_val==val:\\n                if old_mn==mn_val:\\n                    mn_idx=min(i,mn_idx)\\n                else:\\n                    mn_idx=i\\n        return mn_idx\\n```",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumAverageDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        t_sm=sum(nums) #total sum\\n        mx_idx=len(nums) #last index\\n        st_sm=0 \\n        mn_val=t_sm//len(nums)\\n        mn_idx=len(nums)-1\\n        for i in range(len(nums)-1):\\n            t_sm-=nums[i]\\n            st_sm+=nums[i]\\n            mx_idx-=1\\n            val=abs((st_sm//(i+1)) - (t_sm//mx_idx))\\n            old_mn=mn_val\\n            mn_val=min(mn_val,val)\\n            if mn_val==val:\\n                if old_mn==mn_val:\\n                    mn_idx=min(i,mn_idx)\\n                else:\\n                    mn_idx=i\\n        return mn_idx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877813,
                "title": "java-most-possible-solution",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] n) {\\n        long sum=0;\\n        int i;\\n        for(i=0;i<n.length;i++)\\n            sum+=n[i];\\n        long x=0;;\\n        int min=Integer.MAX_VALUE;\\n        int result=0;\\n        for(i=0;i<n.length;i++){\\n            x=x+n[i];\\n            sum=sum-n[i];\\n            int a=(int)(x/(i+1));\\n            int b=(i==n.length-1)?0:(int)(sum/(n.length-i-1));\\n            if(Math.abs(a-b) < min){\\n                min=Math.abs(a-b);\\n                result=i;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] n) {\\n        long sum=0;\\n        int i;\\n        for(i=0;i<n.length;i++)\\n            sum+=n[i];\\n        long x=0;;\\n        int min=Integer.MAX_VALUE;\\n        int result=0;\\n        for(i=0;i<n.length;i++){\\n            x=x+n[i];\\n            sum=sum-n[i];\\n            int a=(int)(x/(i+1));\\n            int b=(i==n.length-1)?0:(int)(sum/(n.length-i-1));\\n            if(Math.abs(a-b) < min){\\n                min=Math.abs(a-b);\\n                result=i;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877214,
                "title": "java-beats-100-prefix-sum-explained",
                "content": "![image.png](https://assets.leetcode.com/users/images/744f5b68-e3d2-498c-b30a-49344e09bd48_1670161849.0439353.png)\\n\\n# Intuition\\nTo calculate the average between range `[x:y]` in O(1) we can use a prefix sum.\\n\\nThe sum of an interval `[x:y]` (inclusive) will be `prefix[y] - prefix[x-1]` and we would divide by the range of the interval which is `y-x+1` assuming y > x.\\n\\nTo avoid edge cases while subtracting `prefix[x-1]` we will initialize the array with a buffer of 1, so we can type the code more easily.\\n\\nNote: the divisor is of type `double` so if we divide by `0d` we don\\'t throw a zero division exception.\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        double[] prefix = new double[n + 1]; // prefix[1] is sum up to i=1 exclusive [0, i)\\n\\n        // A    =   [2, 3, 5] //\\n        // PS   =   [0, 2, 5, 10]\\n        for (int i = 0; i < n; i++) {\\n            prefix[i + 1] = prefix[i] + nums[i];\\n        }\\n\\n        int bestIndex = 0;\\n        int best = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < n; i++) {\\n            int prefixAverage = (int) Math.floor(prefix[i + 1] / (i + 1));\\n            int suffixAverage = (int) Math.floor((prefix[n] - prefix[i + 1]) / (n - i - 1));\\n            int averageDifference = Math.abs(\\n                    // taking sum up to index i inclusive (i+1 elements)\\n                    prefixAverage -\\n                    // taking sum from i+1:n (n-i elements)\\n                    suffixAverage\\n            );\\n            if (averageDifference < best) {\\n                best = averageDifference;\\n                bestIndex = i;\\n            }\\n        }\\n\\n        return bestIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        double[] prefix = new double[n + 1]; // prefix[1] is sum up to i=1 exclusive [0, i)\\n\\n        // A    =   [2, 3, 5] //\\n        // PS   =   [0, 2, 5, 10]\\n        for (int i = 0; i < n; i++) {\\n            prefix[i + 1] = prefix[i] + nums[i];\\n        }\\n\\n        int bestIndex = 0;\\n        int best = Integer.MAX_VALUE;\\n\\n        for (int i = 0; i < n; i++) {\\n            int prefixAverage = (int) Math.floor(prefix[i + 1] / (i + 1));\\n            int suffixAverage = (int) Math.floor((prefix[n] - prefix[i + 1]) / (n - i - 1));\\n            int averageDifference = Math.abs(\\n                    // taking sum up to index i inclusive (i+1 elements)\\n                    prefixAverage -\\n                    // taking sum from i+1:n (n-i elements)\\n                    suffixAverage\\n            );\\n            if (averageDifference < best) {\\n                best = averageDifference;\\n                bestIndex = i;\\n            }\\n        }\\n\\n        return bestIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876250,
                "title": "java-easy-solution-using-prefix-sum-o-n",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long prefix[] =  new long[nums.length];\\n        long sum = 0;\\n        \\n\\t\\tfor(int i = 0 ; i < nums.length ; i++) {\\n\\t\\t\\tprefix[i] = (i == 0)? nums[i] :  prefix[i -1] + nums[i];\\n            sum += nums[i];\\n\\t\\t}\\n        long avgDiff = 0, minAvgDiff = Long.MAX_VALUE;\\n        int idx = -1;\\n\\t\\tfor(int i = 0 ; i < nums.length ; i++){\\n            long post = (i == nums.length - 1)? 0 :((sum - prefix[i]) / (nums.length - i - 1));\\n            avgDiff = Math.abs((prefix[i] / (i + 1)) - post);\\n            if(avgDiff < minAvgDiff){\\n                minAvgDiff = avgDiff;\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```\\n\\n**Upvote Please**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long prefix[] =  new long[nums.length];\\n        long sum = 0;\\n        \\n\\t\\tfor(int i = 0 ; i < nums.length ; i++) {\\n\\t\\t\\tprefix[i] = (i == 0)? nums[i] :  prefix[i -1] + nums[i];\\n            sum += nums[i];\\n\\t\\t}\\n        long avgDiff = 0, minAvgDiff = Long.MAX_VALUE;\\n        int idx = -1;\\n\\t\\tfor(int i = 0 ; i < nums.length ; i++){\\n            long post = (i == nums.length - 1)? 0 :((sum - prefix[i]) / (nums.length - i - 1));\\n            avgDiff = Math.abs((prefix[i] / (i + 1)) - post);\\n            if(avgDiff < minAvgDiff){\\n                minAvgDiff = avgDiff;\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875178,
                "title": "python-easy-solution-lists-prefix-sum",
                "content": "# CODE 1 (BETTER)\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first = [nums[0]]\\n        second = nums[1:]\\n\\n        if len(nums) == 1:\\n            return 0\\n\\n        v1 = sum(first)\\n        v2 = sum(second)\\n        l1 = 1\\n        l2 = len(nums) - 1\\n\\n        currDiff = abs((v1 // l1) - (v2 // l2))\\n        currIndex = 0\\n\\n        for i in range(1, len(nums)-1):\\n            if l1 == 0:\\n                v1 = 0\\n                l1 = 0\\n            else:\\n                v1 = (v1 + nums[i])\\n                l1 += 1\\n\\n\\n            if l2 == 0:\\n                v2 = 0\\n                l2 = 0\\n            else:\\n                v2 = (v2 - nums[i])\\n                l2 -= 1\\n\\n\\n            if currDiff > abs((v1 // l1) - (v2 // l2)):\\n                currDiff = abs((v1 // l1) - (v2 // l2))\\n                currIndex = i\\n\\n        v1 = sum(nums[:]) // len(nums[:])\\n\\n        if currDiff > abs(v1 - 0):\\n                currDiff = abs(v1 - 0)\\n                currIndex = len(nums)-1\\n\\n        return currIndex\\n```\\n# CODE 2 (LAZY)\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first = [nums[0]]\\n        second = nums[1:]\\n        if len(nums) == 1:\\n            return 0\\n        v1 = sum(first)\\n        v2 = sum(second)\\n        currDiff = abs((v1 // len(first)) - (v2 // len(second)))\\n        currIndex = 0\\n        for i in range(1, len(nums)-1):\\n            first.append(nums[i])\\n            second.pop(0)\\n            # print(first, second)\\n            if len(first) == 0:\\n                v1 = 0\\n                l1 = 0\\n            else:\\n                v1 = (v1 + nums[i])\\n                l1 = len(first)\\n            if len(second) == 0:\\n                v2 = 0\\n                l2 = 0\\n            else:\\n                v2 = (v2 - nums[i])\\n                l2 = len(second)\\n            # print(v1, v2)\\n            if currDiff > abs((v1 // l1) - (v2 // l2)):\\n\\n                currDiff = abs((v1 // l1) - (v2 // l2))\\n                currIndex = i\\n        v1 = sum(nums[:]) // len(nums[:])\\n        if currDiff > abs(v1 - 0):\\n                currDiff = abs(v1 - 0)\\n                currIndex = len(nums)-1\\n        return currIndex\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first = [nums[0]]\\n        second = nums[1:]\\n\\n        if len(nums) == 1:\\n            return 0\\n\\n        v1 = sum(first)\\n        v2 = sum(second)\\n        l1 = 1\\n        l2 = len(nums) - 1\\n\\n        currDiff = abs((v1 // l1) - (v2 // l2))\\n        currIndex = 0\\n\\n        for i in range(1, len(nums)-1):\\n            if l1 == 0:\\n                v1 = 0\\n                l1 = 0\\n            else:\\n                v1 = (v1 + nums[i])\\n                l1 += 1\\n\\n\\n            if l2 == 0:\\n                v2 = 0\\n                l2 = 0\\n            else:\\n                v2 = (v2 - nums[i])\\n                l2 -= 1\\n\\n\\n            if currDiff > abs((v1 // l1) - (v2 // l2)):\\n                currDiff = abs((v1 // l1) - (v2 // l2))\\n                currIndex = i\\n\\n        v1 = sum(nums[:]) // len(nums[:])\\n\\n        if currDiff > abs(v1 - 0):\\n                currDiff = abs(v1 - 0)\\n                currIndex = len(nums)-1\\n\\n        return currIndex\\n```\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first = [nums[0]]\\n        second = nums[1:]\\n        if len(nums) == 1:\\n            return 0\\n        v1 = sum(first)\\n        v2 = sum(second)\\n        currDiff = abs((v1 // len(first)) - (v2 // len(second)))\\n        currIndex = 0\\n        for i in range(1, len(nums)-1):\\n            first.append(nums[i])\\n            second.pop(0)\\n            # print(first, second)\\n            if len(first) == 0:\\n                v1 = 0\\n                l1 = 0\\n            else:\\n                v1 = (v1 + nums[i])\\n                l1 = len(first)\\n            if len(second) == 0:\\n                v2 = 0\\n                l2 = 0\\n            else:\\n                v2 = (v2 - nums[i])\\n                l2 = len(second)\\n            # print(v1, v2)\\n            if currDiff > abs((v1 // l1) - (v2 // l2)):\\n\\n                currDiff = abs((v1 // l1) - (v2 // l2))\\n                currIndex = i\\n        v1 = sum(nums[:]) // len(nums[:])\\n        if currDiff > abs(v1 - 0):\\n                currDiff = abs(v1 - 0)\\n                currIndex = len(nums)-1\\n        return currIndex\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874711,
                "title": "minimum-average-difference",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n        long sum=0;\\n        for(int x:nums) sum+=x;\\n        int res=0;\\n        long min=Long.MAX_VALUE;\\n        long curr=0;\\n        for(int i=0;i<nums.length-1;i++){\\n            curr+=nums[i];\\n            sum-=nums[i];\\n            \\n            long diff=Math.abs(curr/(i+1)-sum/(nums.length-i-1));\\n            \\n            if(diff<min){\\n                min=diff;\\n                res=i;\\n            }\\n        }\\n        curr+=nums[nums.length-1];\\n        if(curr/nums.length<min){\\n            res=nums.length-1;\\n        }\\n        return res;\\n        \\n    }\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n        long sum=0;\\n        for(int x:nums) sum+=x;\\n        int res=0;\\n        long min=Long.MAX_VALUE;\\n        long curr=0;\\n        for(int i=0;i<nums.length-1;i++){\\n            curr+=nums[i];\\n            sum-=nums[i];\\n            \\n            long diff=Math.abs(curr/(i+1)-sum/(nums.length-i-1));\\n            \\n            if(diff<min){\\n                min=diff;\\n                res=i;\\n            }\\n        }\\n        curr+=nums[nums.length-1];\\n        if(curr/nums.length<min){\\n            res=nums.length-1;\\n        }\\n        return res;\\n        \\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874587,
                "title": "daily-leetcoding-challenge-december-day-4",
                "content": "This problem is the Daily LeetCoding Challenge for December, Day 4.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/minimum-average-difference/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 0 approach in the official solution</summary>\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/minimum-average-difference/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2067765,
                "title": "easy-cpp-solution-using-prefix-and-suffix-sum",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int size=nums.size();\\n        vector<long long int> pref(size),suff(size);\\n        pref[0]=nums[0];\\n        suff[size-1]=0;\\n        long long int sum=nums[0];\\n        for(int i=1;i<size;i++){\\n            sum +=nums[i];\\n            pref[i]=sum/(i+1);\\n        }\\n        sum=0;\\n        for(int i=size-2,k=1;i>=0;i--,k++){\\n            sum +=nums[i+1];\\n            suff[i]=sum/k;\\n        }\\n        int m=INT_MAX,ind=0,temp;\\n        for(int i=0;i<size;i++){\\n            temp=abs(pref[i]-suff[i]);\\n            if(m>temp){\\n                m=temp;\\n                ind=i;\\n            }\\n        }\\n        return ind;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int size=nums.size();\\n        vector<long long int> pref(size),suff(size);\\n        pref[0]=nums[0];\\n        suff[size-1]=0;\\n        long long int sum=nums[0];\\n        for(int i=1;i<size;i++){\\n            sum +=nums[i];\\n            pref[i]=sum/(i+1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1994829,
                "title": "easy-c-prefix-array-o-n-time",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int> &vec) {\\n        long long n = vec.size();\\n        vector<long long> pref(n, 0);\\n        pref[0] = vec[0];\\n        for(long long i=1; i<n; i++) {\\n            pref[i] = pref[i-1] + vec[i];\\n        }\\n        \\n        int ans = -1;\\n        long long minDiff = INT_MAX;\\n        for(int i=0; i<n; i++) {\\n            long long left = pref[i]/(i+1);\\n            long long right = 0;\\n            if(n-i-1 != 0) right = (pref[n-1] - pref[i])/(n-i-1);\\n            long long diff = abs(left-right);\\n            if(diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int> &vec) {\\n        long long n = vec.size();\\n        vector<long long> pref(n, 0);\\n        pref[0] = vec[0];\\n        for(long long i=1; i<n; i++) {\\n            pref[i] = pref[i-1] + vec[i];\\n        }\\n        \\n        int ans = -1;\\n        long long minDiff = INT_MAX;\\n        for(int i=0; i<n; i++) {\\n            long long left = pref[i]/(i+1);\\n            long long right = 0;\\n            if(n-i-1 != 0) right = (pref[n-1] - pref[i])/(n-i-1);\\n            long long diff = abs(left-right);\\n            if(diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994699,
                "title": "c-use-suffix-sum-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int left = 0;\\n        long long int right = 0;\\n        for(auto i: nums)\\n            right += i;\\n        \\n        int n = nums.size();\\n        int mn = INT_MAX;\\n        int idx = 0;\\n        for(int i=0; i<nums.size(); i++){\\n            left += nums[i];\\n            right -= nums[i];\\n            // cout<< left << \"\\\\t\" << right << \"\\\\t\" <<left/(i+1) << \"\\\\t\" << right/(n-1-i) << endl;\\n            \\n            int diff = 0;\\n            if(i==n-1)\\n                diff = left/(i+1);\\n            else\\n                diff = abs(left/(i+1) - right/(n-1-i));\\n             \\n            if(diff < mn){\\n                mn = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int left = 0;\\n        long long int right = 0;\\n        for(auto i: nums)\\n            right += i;\\n        \\n        int n = nums.size();\\n        int mn = INT_MAX;\\n        int idx = 0;\\n        for(int i=0; i<nums.size(); i++){\\n            left += nums[i];\\n            right -= nums[i];\\n            // cout<< left << \"\\\\t\" << right << \"\\\\t\" <<left/(i+1) << \"\\\\t\" << right/(n-1-i) << endl;\\n            \\n            int diff = 0;\\n            if(i==n-1)\\n                diff = left/(i+1);\\n            else\\n                diff = abs(left/(i+1) - right/(n-1-i));\\n             \\n            if(diff < mn){\\n                mn = diff;\\n                idx = i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1994675,
                "title": "java-easy-to-understand-main-thing-is-to-handle-the-last-index",
                "content": "You can skip the `arr` part that is redundant that is used only for i/o purpose else you can ommit it.\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        if(nums.length == 1){\\n            return 0;\\n        }\\n        int idx = -1;\\n        long min = Integer.MAX_VALUE;\\n        long suml = nums[0];\\n        long sumr = 0;\\n        for(int i = 1; i < nums.length; i++){\\n            sumr += nums[i];\\n        }\\n        int i = 1;\\n        int calc = 0;\\n        int left = 1;\\n        int right = nums.length - left;\\n        long[] arr = new long[nums.length];\\n        while(i < nums.length){\\n            long diff = Math.abs((suml/left) - (sumr/right));\\n            arr[calc] = diff;\\n            if(diff < min){\\n                min = diff;\\n                idx = calc;\\n            }\\n            suml += nums[i];\\n            sumr -= nums[i];\\n            left++;\\n            right--;\\n            calc++;\\n            i++;\\n        }\\n        arr[calc] = suml/nums.length;\\n        if(arr[calc] < min){\\n            min = arr[calc];\\n            idx = nums.length - 1;\\n        }\\n        // for(i = 0; i < nums.length; i++){\\n        //     System.out.println(arr[i]);\\n        // }\\n        return (int)idx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        if(nums.length == 1){\\n            return 0;\\n        }\\n        int idx = -1;\\n        long min = Integer.MAX_VALUE;\\n        long suml = nums[0];\\n        long sumr = 0;\\n        for(int i = 1; i < nums.length; i++){\\n            sumr += nums[i];\\n        }\\n        int i = 1;\\n        int calc = 0;\\n        int left = 1;\\n        int right = nums.length - left;\\n        long[] arr = new long[nums.length];\\n        while(i < nums.length){\\n            long diff = Math.abs((suml/left) - (sumr/right));\\n            arr[calc] = diff;\\n            if(diff < min){\\n                min = diff;\\n                idx = calc;\\n            }\\n            suml += nums[i];\\n            sumr -= nums[i];\\n            left++;\\n            right--;\\n            calc++;\\n            i++;\\n        }\\n        arr[calc] = suml/nums.length;\\n        if(arr[calc] < min){\\n            min = arr[calc];\\n            idx = nums.length - 1;\\n        }\\n        // for(i = 0; i < nums.length; i++){\\n        //     System.out.println(arr[i]);\\n        // }\\n        return (int)idx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994632,
                "title": "scala",
                "content": "```scala\\ndef minimumAverageDifference(nums: Array[Int]): Int = {\\n  val list = nums.map(_.toLong).toList\\n  goMinAv(list, 0, 0, list.sum, nums.length, Int.MaxValue, 0)\\n}\\n\\ndef goMinAv(nums: List[Long], leftSum: Long, ind: Int, rightSum: Long, rightCount: Int, minimum: Long, minimumInd: Int): Int =\\n  nums match {\\n    case Nil => minimumInd\\n    case h :: tail =>\\n      val lSum = leftSum + h\\n      val rSum = rightSum - h\\n      val lCount = ind + 1\\n      val rCount = rightCount - 1\\n\\n      val rAvg = if(rCount == 0) 0 else rSum / rCount\\n      val avDiff = math.abs(lSum / lCount - rAvg)\\n      val (min, minInd) = if(avDiff < minimum) (avDiff, ind) else (minimum, minimumInd)\\n\\n      goMinAv(tail, lSum, lCount, rSum, rCount, min, minInd)\\n  }\\n  ```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```scala\\ndef minimumAverageDifference(nums: Array[Int]): Int = {\\n  val list = nums.map(_.toLong).toList\\n  goMinAv(list, 0, 0, list.sum, nums.length, Int.MaxValue, 0)\\n}\\n\\ndef goMinAv(nums: List[Long], leftSum: Long, ind: Int, rightSum: Long, rightCount: Int, minimum: Long, minimumInd: Int): Int =\\n  nums match {\\n    case Nil => minimumInd\\n    case h :: tail =>\\n      val lSum = leftSum + h\\n      val rSum = rightSum - h\\n      val lCount = ind + 1\\n      val rCount = rightCount - 1\\n\\n      val rAvg = if(rCount == 0) 0 else rSum / rCount\\n      val avDiff = math.abs(lSum / lCount - rAvg)\\n      val (min, minInd) = if(avDiff < minimum) (avDiff, ind) else (minimum, minimumInd)\\n\\n      goMinAv(tail, lSum, lCount, rSum, rCount, min, minInd)\\n  }\\n  ```",
                "codeTag": "Python3"
            },
            {
                "id": 1994596,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        int val = INT_MAX;\\n        int idx = 0;\\n        \\n        ll sum = 0,cur = 0;\\n        for(int i:nums)sum += i;\\n \\n        for(int i=0;i<n;i++){\\n            cur += nums[i];\\n            sum -= nums[i];\\n            \\n            ll c_val = 0;\\n            if(i == n-1){\\n                c_val = cur/(i+1);\\n            }\\n            else c_val = abs((cur)/(i+1) - ((sum)/(n-i-1)));\\n            if(c_val < val){\\n                val = c_val;\\n                idx = i;\\n            }\\n        } \\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        int val = INT_MAX;\\n        int idx = 0;\\n        \\n        ll sum = 0,cur = 0;\\n        for(int i:nums)sum += i;\\n \\n        for(int i=0;i<n;i++){\\n            cur += nums[i];\\n            sum -= nums[i];\\n            \\n            ll c_val = 0;\\n            if(i == n-1){\\n                c_val = cur/(i+1);\\n            }\\n            else c_val = abs((cur)/(i+1) - ((sum)/(n-i-1)));\\n            if(c_val < val){\\n                val = c_val;\\n                idx = i;\\n            }\\n        } \\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994548,
                "title": "prefix-sum-method",
                "content": "```\\nclass Solution:\\n    def getDiff(self, prefix, i, n):\\n        l = (prefix[i + 1] - prefix[0])\\n        r = prefix[-1] - l\\n        l = l // (i + 1)\\n        r = r // (n - i - 1) if i < n - 1 else 0\\n        return abs(l - r)\\n    \\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        prefix = [0]\\n        for i in range(n):\\n            prefix.append(prefix[-1] + nums[i])\\n        return min(range(n), key = lambda i: self.getDiff(prefix, i, n))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getDiff(self, prefix, i, n):\\n        l = (prefix[i + 1] - prefix[0])\\n        r = prefix[-1] - l\\n        l = l // (i + 1)\\n        r = r // (n - i - 1) if i < n - 1 else 0\\n        return abs(l - r)\\n    \\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        prefix = [0]\\n        for i in range(n):\\n            prefix.append(prefix[-1] + nums[i])\\n        return min(range(n), key = lambda i: self.getDiff(prefix, i, n))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147622,
                "title": "easy-to-understand-fast-approach-with-eliminating-tle-using-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn ***order*** to ***answer*** this ***issue***, we ***must add*** up two different array ***segments***, find ***their*** average, then ***reduce*** the ****absolute**** ***difference*** ***between*** them.\\n\\n***Therefore***, we will ***first compute*** the ***total*** of the left portion ***using*** left sum, then we will ***get its*** average, and ***finally***, we can do the same for the right portion ***using*** right sum, after which we will ***determine*** which is the ***least absolute*** difference to store in mini.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere we are simply using technique same as ***sliding window*** technique\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        size = len(nums)\\n        mini = sys.maxsize\\n        ind = 0\\n        left_sum = 0\\n        right_sum = sum(nums)\\n        for i in range(size):\\n            left_sum += nums[i]\\n            right_sum -= nums[i]\\n\\n            st = left_sum // (i + 1)\\n            if i == size - 1:\\n                end = 0\\n            else:\\n                end = right_sum // (size - (i + 1))\\n\\n            if mini > abs(st - end):\\n                mini = abs(st - end)\\n                ind = i\\n        return ind\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        size = len(nums)\\n        mini = sys.maxsize\\n        ind = 0\\n        left_sum = 0\\n        right_sum = sum(nums)\\n        for i in range(size):\\n            left_sum += nums[i]\\n            right_sum -= nums[i]\\n\\n            st = left_sum // (i + 1)\\n            if i == size - 1:\\n                end = 0\\n            else:\\n                end = right_sum // (size - (i + 1))\\n\\n            if mini > abs(st - end):\\n                mini = abs(st - end)\\n                ind = i\\n        return ind\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2976013,
                "title": "concise-prefix-sum-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long mn = INT_MAX, ans = 0, ls = 0, rs = 0, n = nums.size();\\n        for(int i : nums) rs += i;\\n\\n        for(int i=0; i<n-1; i++) {\\n            ls += nums[i];\\n            rs -= nums[i];\\n            int a = ls / (i + 1);\\n            int b = rs / (n - i - 1);\\n\\n            if(abs(a - b) < mn) mn = abs(a - b), ans = i;\\n        }\\n        return (ls + nums.back()) / n < mn ? n - 1 : ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long mn = INT_MAX, ans = 0, ls = 0, rs = 0, n = nums.size();\\n        for(int i : nums) rs += i;\\n\\n        for(int i=0; i<n-1; i++) {\\n            ls += nums[i];\\n            rs -= nums[i];\\n            int a = ls / (i + 1);\\n            int b = rs / (n - i - 1);\\n\\n            if(abs(a - b) < mn) mn = abs(a - b), ans = i;\\n        }\\n        return (ls + nums.back()) / n < mn ? n - 1 : ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2879294,
                "title": "python-calculate-sum-list-once-o-n-test-case-0-1-0-1-0-1-explained",
                "content": "**CAUTION:**\\nIf you didn\\'t pass test case `[0,1,0,1,0,1]`, you might want to read the following sentence from the description again. :-P\\n```\\nBoth averages should be rounded down to the nearest integer.\\n```\\nhttps://leetcode.com/submissions/detail/854862152/\\n```\\nRuntime: 1684 ms, faster than 72.91% of Python3 online submissions for Minimum Average Difference.\\nMemory Usage: 24.8 MB, less than 95.93% of Python3 online submissions for Minimum Average Difference.\\n```\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        l = len(nums)\\n        if l==1: return 0\\n        \\n        s1, s2 = nums[0], sum(nums[1:])\\n        i_smallest, abs_smallest = 0, abs(s1//1 - s2//(l-1))\\n        for i in range(1,l):\\n            n = nums[i]\\n            l1, l2 = i+1, l-i-1\\n            s1 += n; s2 -= n\\n            if i!=l-1:\\n                abs_curr = abs(s1//l1 - s2//l2)\\n            else:\\n                abs_curr = s1//l1\\n            if abs_curr<abs_smallest:\\n                abs_smallest = abs_curr\\n                i_smallest = i\\n                \\n        return i_smallest  \\n```\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nBoth averages should be rounded down to the nearest integer.\\n```\n```\\nRuntime: 1684 ms, faster than 72.91% of Python3 online submissions for Minimum Average Difference.\\nMemory Usage: 24.8 MB, less than 95.93% of Python3 online submissions for Minimum Average Difference.\\n```\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        l = len(nums)\\n        if l==1: return 0\\n        \\n        s1, s2 = nums[0], sum(nums[1:])\\n        i_smallest, abs_smallest = 0, abs(s1//1 - s2//(l-1))\\n        for i in range(1,l):\\n            n = nums[i]\\n            l1, l2 = i+1, l-i-1\\n            s1 += n; s2 -= n\\n            if i!=l-1:\\n                abs_curr = abs(s1//l1 - s2//l2)\\n            else:\\n                abs_curr = s1//l1\\n            if abs_curr<abs_smallest:\\n                abs_smallest = abs_curr\\n                i_smallest = i\\n                \\n        return i_smallest  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878774,
                "title": "c-easy-to-understand-solution-beats-100",
                "content": "# Intuition\\nDo the sum of all elements and observe.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long sum=0,s=0;\\n         for(int j=0;j<nums.size();j++)\\n          {\\n              s+=nums[j];\\n          }\\n          long min=INT_MAX;\\n          int index=-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            long avg=0;\\n             sum+=nums[i];\\n             s-=nums[i];\\n            if(nums.size()-i-1>0)\\n            {\\n             avg=sum/(i+1)-s/(nums.size()-i-1);\\n             avg=abs(avg);\\n            }\\n            else{\\n                avg=abs(sum/(i+1));\\n            }\\n             if(avg<min)\\n             {\\n                 min=avg;\\n                 index=i;\\n             }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long sum=0,s=0;\\n         for(int j=0;j<nums.size();j++)\\n          {\\n              s+=nums[j];\\n          }\\n          long min=INT_MAX;\\n          int index=-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            long avg=0;\\n             sum+=nums[i];\\n             s-=nums[i];\\n            if(nums.size()-i-1>0)\\n            {\\n             avg=sum/(i+1)-s/(nums.size()-i-1);\\n             avg=abs(avg);\\n            }\\n            else{\\n                avg=abs(sum/(i+1));\\n            }\\n             if(avg<min)\\n             {\\n                 min=avg;\\n                 index=i;\\n             }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878316,
                "title": "prefix-sum-simple-c-solution",
                "content": "//T.C -> O(n) as we have traversed through a single loop\\n\\t\\t//S.C -> O(n) as we have usead extra space for prefixSum vector\\n\\t\\t\\n\\t\\t//Approach -> we will store prefix sum for each index in a vector and after that for every index we will keep on subtracting prefixSum at that index from total Sum and keep taking diffrrence of their averages.     When this difference becomes less than minimum difference than we will update our index to that current index..\\n\\t\\t\\n\\t\\t\\n\\t\\tif(nums.size()==1){\\n            return 0;\\n        }\\n        \\n        vector<long long int>prefixSum(nums.size());\\n        prefixSum[0]=nums[0];\\n        long long int total=nums[0];\\n        \\n        for(int i=1;i<nums.size();i++){\\n            prefixSum[i]=nums[i]+prefixSum[i-1];\\n            total+=nums[i];\\n        }\\n        \\n        int min_diff=INT_MAX;\\n        int index=0;\\n        \\n    \\n        for(int i=0;i<nums.size()-1;i++){\\n            int val1=prefixSum[i]/(i+1);\\n            int val2=(total-prefixSum[i])/(nums.size()-i-1);\\n            \\n            if(abs(val1-val2)<min_diff){\\n                min_diff=abs(val1-val2);\\n                index=i;\\n            }\\n            \\n        }\\n        \\n        int last=total/nums.size();\\n        if(last<min_diff){\\n            return nums.size()-1;\\n        }\\n        \\n        return index;",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "//T.C -> O(n) as we have traversed through a single loop\\n\\t\\t//S.C -> O(n) as we have usead extra space for prefixSum vector\\n\\t\\t\\n\\t\\t//Approach -> we will store prefix sum for each index in a vector and after that for every index we will keep on subtracting prefixSum at that index from total Sum and keep taking diffrrence of their averages.     When this difference becomes less than minimum difference than we will update our index to that current index..\\n\\t\\t\\n\\t\\t\\n\\t\\tif(nums.size()==1){\\n            return 0;\\n        }\\n        \\n        vector<long long int>prefixSum(nums.size());\\n        prefixSum[0]=nums[0];\\n        long long int total=nums[0];\\n        \\n        for(int i=1;i<nums.size();i++){\\n            prefixSum[i]=nums[i]+prefixSum[i-1];\\n            total+=nums[i];\\n        }\\n        \\n        int min_diff=INT_MAX;\\n        int index=0;\\n        \\n    \\n        for(int i=0;i<nums.size()-1;i++){\\n            int val1=prefixSum[i]/(i+1);\\n            int val2=(total-prefixSum[i])/(nums.size()-i-1);\\n            \\n            if(abs(val1-val2)<min_diff){\\n                min_diff=abs(val1-val2);\\n                index=i;\\n            }\\n            \\n        }\\n        \\n        int last=total/nums.size();\\n        if(last<min_diff){\\n            return nums.size()-1;\\n        }\\n        \\n        return index;",
                "codeTag": "Unknown"
            },
            {
                "id": 2878187,
                "title": "c-o-n-time-and-o-1-space-with-prefix-sum",
                "content": "\\n`Approach : `\\n\\n* Find sum as `sum` of all n elements and keep a prefSum for storing sum till i index.\\n* Use `prefSum ` for finding sum of` i+1` elements which is prefSum it self and `sum-prefSum` for finding sum of remaining `n-i` elements.\\n* Check for edge case when `i = n-1` and find minimum average difference.\\n* Now iterate again to find minimum index with the minimum average difference.\\n\\n**Time :  O(n)\\nSpace :  O(1)**\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& v){\\n        long long sum = 0, prefSum = 0;\\n        int n = v.size();\\n        long long mn = 1e9;\\n        for(auto &ele:v) sum += ele;\\n        for(int i=0;i<n;i++){\\n            prefSum += v[i];\\n            if(i!=n-1)\\n            mn = min(mn,abs(prefSum/(i+1) - (sum-prefSum)/(n-i-1)));\\n            else mn = min(mn,prefSum/(i+1));\\n        }\\n        prefSum = 0;\\n        for(int i=0;i<n;i++){\\n            prefSum += v[i];\\n            long long val = 0;\\n            if(i!=n-1)\\n            val = abs(prefSum/(i+1) - (sum - prefSum)/(n-i-1));\\n            else val = prefSum/(i+1);\\n            if(val==mn) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& v){\\n        long long sum = 0, prefSum = 0;\\n        int n = v.size();\\n        long long mn = 1e9;\\n        for(auto &ele:v) sum += ele;\\n        for(int i=0;i<n;i++){\\n            prefSum += v[i];\\n            if(i!=n-1)\\n            mn = min(mn,abs(prefSum/(i+1) - (sum-prefSum)/(n-i-1)));\\n            else mn = min(mn,prefSum/(i+1));\\n        }\\n        prefSum = 0;\\n        for(int i=0;i<n;i++){\\n            prefSum += v[i];\\n            long long val = 0;\\n            if(i!=n-1)\\n            val = abs(prefSum/(i+1) - (sum - prefSum)/(n-i-1));\\n            else val = prefSum/(i+1);\\n            if(val==mn) return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877750,
                "title": "java-3-solutions-brute-optimal",
                "content": "### **Please Upvote** :D\\n##### 1. Brute force approach:\\nCalculating the right and left average using nested loops for every index of nums.\\n``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int minAvgDiff = Integer.MAX_VALUE, ans = -1;\\n\\n        for (int i = 0; i < n; i++) {\\n            int leftAvg = 0;\\n\\n            for (int left = 0; left <= i; left++) {\\n                leftAvg += nums[left];\\n            }\\n\\n            leftAvg /= (i + 1);\\n\\n            int rightAvg = 0;\\n\\n            for (int right = i + 1; right < n; right++) {\\n                rightAvg += nums[right];\\n            }\\n\\n            if (i != n - 1) rightAvg /= (n - i - 1);\\n\\n            int currDiff = Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: O(n ^ 2), SC: O(1)\\n```\\n##### 2. Using prefix-sum and suffix-sum arrays:\\nWe precompute the prefix sums and suffix sums of each index of nums and sore them in separate arrays in order to save us from running nested loops.\\n``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long[] prefix = new long[n + 1];\\n        long[] suffix = new long[n + 1];\\n\\n        for (int i = 0; i < n; i++) {\\n            prefix[i + 1] = prefix[i] + nums[i];\\n        }\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            suffix[i] = suffix[i + 1] + nums[i];\\n        }\\n\\n        int minAvgDiff = Integer.MAX_VALUE;\\n        int ans = -1;\\n\\n        for (int i = 0; i < n; i++) {\\n            long leftAvg = prefix[i + 1] / (i + 1);\\n            long rightAvg = (i != n - 1)? suffix[i + 1] / (n - i - 1) : 0;\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: 3 * O(n) => O(n)\\n// SC: 2 * O(n) => O(n)\\n```\\n##### 3. Without using extra space:\\nWe precompute the total sum of every element of nums then run a loop to calculate left sum and left average. The right sum of that index will be given by subtracting the current sum at that index from the total sum and we can calculate the right average accordingly.\\n``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1, minAvgDiff = Integer.MAX_VALUE;\\n\\n        long totalSum = 0;\\n        for (int i : nums) totalSum += i;\\n\\n        long currSum = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            currSum += nums[i];\\n\\n            long leftAvg = currSum / (i + 1);\\n            long rightAvg = (i != n - 1)? (totalSum - currSum) / (n - i - 1) : 0;\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: 2 * O(n) => O(n)\\n// SC: O(1)\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int minAvgDiff = Integer.MAX_VALUE, ans = -1;\\n\\n        for (int i = 0; i < n; i++) {\\n            int leftAvg = 0;\\n\\n            for (int left = 0; left <= i; left++) {\\n                leftAvg += nums[left];\\n            }\\n\\n            leftAvg /= (i + 1);\\n\\n            int rightAvg = 0;\\n\\n            for (int right = i + 1; right < n; right++) {\\n                rightAvg += nums[right];\\n            }\\n\\n            if (i != n - 1) rightAvg /= (n - i - 1);\\n\\n            int currDiff = Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: O(n ^ 2), SC: O(1)\\n```\n``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long[] prefix = new long[n + 1];\\n        long[] suffix = new long[n + 1];\\n\\n        for (int i = 0; i < n; i++) {\\n            prefix[i + 1] = prefix[i] + nums[i];\\n        }\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            suffix[i] = suffix[i + 1] + nums[i];\\n        }\\n\\n        int minAvgDiff = Integer.MAX_VALUE;\\n        int ans = -1;\\n\\n        for (int i = 0; i < n; i++) {\\n            long leftAvg = prefix[i + 1] / (i + 1);\\n            long rightAvg = (i != n - 1)? suffix[i + 1] / (n - i - 1) : 0;\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: 3 * O(n) => O(n)\\n// SC: 2 * O(n) => O(n)\\n```\n``` java []\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1, minAvgDiff = Integer.MAX_VALUE;\\n\\n        long totalSum = 0;\\n        for (int i : nums) totalSum += i;\\n\\n        long currSum = 0;\\n\\n        for (int i = 0; i < n; i++) {\\n            currSum += nums[i];\\n\\n            long leftAvg = currSum / (i + 1);\\n            long rightAvg = (i != n - 1)? (totalSum - currSum) / (n - i - 1) : 0;\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n\\n            if (currDiff < minAvgDiff) {\\n                minAvgDiff = currDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n\\n// TC: 2 * O(n) => O(n)\\n// SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877650,
                "title": "java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int  ans = -1;\\n        int minDiff = Integer.MAX_VALUE;\\n\\n        long preSum = 0, totalSum = 0;\\n        for(int num: nums){\\n            totalSum += num;\\n        }\\n\\n        for(int i = 0; i < n; i++){\\n            preSum += nums[i];\\n            long leftAvg = preSum / (i + 1);\\n            long rightAvg = (totalSum - preSum);\\n            if(i != n - 1){\\n                rightAvg /= (n - i - 1);\\n            }\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n            if(currDiff < minDiff){\\n                ans = i;\\n                minDiff = currDiff;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int  ans = -1;\\n        int minDiff = Integer.MAX_VALUE;\\n\\n        long preSum = 0, totalSum = 0;\\n        for(int num: nums){\\n            totalSum += num;\\n        }\\n\\n        for(int i = 0; i < n; i++){\\n            preSum += nums[i];\\n            long leftAvg = preSum / (i + 1);\\n            long rightAvg = (totalSum - preSum);\\n            if(i != n - 1){\\n                rightAvg /= (n - i - 1);\\n            }\\n\\n            int currDiff = (int) Math.abs(leftAvg - rightAvg);\\n            if(currDiff < minDiff){\\n                ans = i;\\n                minDiff = currDiff;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877609,
                "title": "c-o-n-easy-to-understand-with-in-depth-explanation",
                "content": "#### Table of Contents\\n\\n- [TL;DR](#tldr)\\n  - [Code](#code)\\n  - [Complexity](#complexity)\\n- [In Depth Analysis](#in-depth-analysis)\\n  - [Intuition](#intuition)\\n  - [Approach](#approach)\\n  - [Example](#example)\\n\\n# TL;DR\\n\\n* Precompute the total sum of all the elements in the arrary\\n* Iterate through `nums` and calculate the current average difference\\n* If the current average difference is less than the lowest minimum so far, we update the answer and the lowest minimum\\n\\n## Code\\n\\n```c++\\ntypedef long long ll;\\n\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        const int n = nums.size();\\n\\n        ll total_sum = 0;\\n        for (int i = 0; i < n; i++)\\n            total_sum += nums[i];\\n\\n        int minAvgDiff = INT_MAX, ans = 0, currAvgDiff;\\n        ll first_elements, last_elements, currSum = 0;\\n        for (int i = 0; i < n; i++) {\\n            currSum += nums[i];\\n            first_elements = currSum / (i + 1);\\n            last_elements = n - i - 1 != 0 ? (total_sum - currSum) / (n - i - 1) : 0;\\n            currAvgDiff = abs(first_elements - last_elements);\\n            if (currAvgDiff < minAvgDiff) {\\n                minAvgDiff = currAvgDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```\\n\\n## Complexity\\n\\n**Time Complexity:** $$O(N)$$\\n**Space Complexity:** $$O(1)$$\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**\\n\\n---\\n\\n# In Depth Analysis\\n\\n## Intuition\\n\\nBy using the brute force approach, you must consistently calculate the sum of elements index $$0 \\\\rightarrow i$$ and index $$i+1 \\\\rightarrow n - 1$$. However, by precomputing the prefix sums of every element in O(n), we can calculate the average difference in O(1) time. \\n\\n**BUT**, we can make the space complexity even better by only computing the sum of all the elements opposed to the prefix sum\\n\\n## Approach \\n\\nFirst, we want to calculate the sum of all the elements in the array. Since the total could be greater than what could be stored in an integer, we are using a `long long` instead (type defined as `ll`)\\n\\nThen, we determine the average of the first `i` elements and last `n - i` elements for every `i` as we iterate. The only weird case is when `n - i - 1 == 0`, which means that the average of the last element is `0`\\n\\nThen, we just calculate what the current average difference is at index `i` and update the index `ans` and the current `minAvgDiff` if necessary. At the end, we just return the index\\n\\n## Example\\n\\nLets use the first example, where `nums = [2,5,3,9,5,3]`\\n\\n* Calculate total sum\\n\\nI won\\'t actually go over this, but the total sum is 27\\n\\n* Iterate through Array\\n\\n|   i  | currSum |         first        |                       last                      | diff | minAvgDiff | ans |\\n|:----:|:-------:|:--------------------:|:-----------------------------------------------:|------|:----------:|:---:|\\n| Init |    0    |          N/A         |                       N/A                       | N/A  |   INT_MAX  |  0  |\\n|   0  |    2    |  $$\\\\frac{2}{1} = 2$$ |       $$\\\\frac{(27 - 2)}{(6 - 0 - 1)} = 5$$      | 3    |      3     |  0  |\\n|   1  |    7    |  $$\\\\frac{7}{2} = 3$$ |       $$\\\\frac{(27 - 7)}{(6 - 1 - 1)} = 5$$      | 2    |      2     |  1  |\\n|   2  |    10   | $$\\\\frac{10}{3} = 3$$ |      $$\\\\frac{(27 - 10)}{(6 - 2 - 1)} = 5$$      | 2    |      2     |  1  |\\n|   3  |    19   | $$\\\\frac{19}{4} = 4$$ |      $$\\\\frac{(27 - 19)}{(6 - 3 - 1)} = 4$$      | 0    |      0     |  3  |\\n|   4  |    24   | $$\\\\frac{24}{5} = 4$$ |      $$\\\\frac{(27 - 24)}{(6 - 4 - 1)} = 3$$      | 1    |      0     |  3  |\\n|   5  |    27   | $$\\\\frac{27}{6} = 4$$ | $$\\\\frac{(27 - 27)}{(6 - 5 - 1)} \\\\rightarrow 0$$ | 4    |      0     |  3  |\\n\\nAt the end, we just return `ans = 3` which is the correct answer\\n\\n**PLEASE UPVOTE IF YOU FIND MY POST HELPFUL!! \\uD83E\\uDD7A\\uD83D\\uDE01**",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Prefix Sum"
                ],
                "code": "```c++\\ntypedef long long ll;\\n\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        const int n = nums.size();\\n\\n        ll total_sum = 0;\\n        for (int i = 0; i < n; i++)\\n            total_sum += nums[i];\\n\\n        int minAvgDiff = INT_MAX, ans = 0, currAvgDiff;\\n        ll first_elements, last_elements, currSum = 0;\\n        for (int i = 0; i < n; i++) {\\n            currSum += nums[i];\\n            first_elements = currSum / (i + 1);\\n            last_elements = n - i - 1 != 0 ? (total_sum - currSum) / (n - i - 1) : 0;\\n            currAvgDiff = abs(first_elements - last_elements);\\n            if (currAvgDiff < minAvgDiff) {\\n                minAvgDiff = currAvgDiff;\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877593,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long> pref(n+1), suff(n+1);\\n        for(int i=0; i<n; i++) pref[i+1] = pref[i] + nums[i];\\n        for(int i=n-1; i>=0; i--) suff[i] = suff[i+1] + nums[i];\\n        int ans;\\n        long long mn = INT_MAX;\\n        for(int i=1; i<=n; i++) {\\n            long long lt = pref[i], rt = suff[i];\\n            lt /= i;\\n            if(n - i) rt /= (n - i);\\n            if(abs(lt - rt) < mn) {\\n                mn = abs(lt - rt);\\n                ans = i-1;\\n            }\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long> pref(n+1), suff(n+1);\\n        for(int i=0; i<n; i++) pref[i+1] = pref[i] + nums[i];\\n        for(int i=n-1; i>=0; i--) suff[i] = suff[i+1] + nums[i];\\n        int ans;\\n        long long mn = INT_MAX;\\n        for(int i=1; i<=n; i++) {\\n            long long lt = pref[i], rt = suff[i];\\n            lt /= i;\\n            if(n - i) rt /= (n - i);\\n            if(abs(lt - rt) < mn) {\\n                mn = abs(lt - rt);\\n                ans = i-1;\\n            }\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877239,
                "title": "python-o-n-simple-solution",
                "content": "# Intuition\\nAccording to constraint `1 <= nums.length <= 10 ** 5` we cannot re-calculate avg values for sub-arrays every time.\\n\\n# Approach\\n\\n1. Right handside area\\n   1. Calculate a sum for all elements in `nums` for the further tracking\\n   2. Remember `nums` len\\n2. Left handside area\\n   1. Set placeholders because we begin with the first index `0` we have nothing on the left area so it is `0` as well as the count of elements is `0`\\n3. On each step of iteration we need to transfer numbers from the right area to the left area. We can do it by substituion the current number from the right area sum and adding it to the left area. Also we update the numbers of integers accordingly.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n\\n        sum_right = sum(nums)\\n        len_right = len(nums)\\n        sum_left = 0\\n        len_left = 0\\n\\n        min_avg = inf\\n        index = 0\\n\\n        for i in range(len(nums)):\\n            \\n            sum_left += nums[i]\\n            len_left += 1\\n\\n            sum_right -= nums[i]\\n            len_right -= 1\\n\\n            #in case of only zeroes left on right\\n            if sum_right == 0:\\n                v = sum_left // len_left\\n            else:\\n                v = abs(\\n                    sum_left // len_left - sum_right // len_right\\n                )\\n\\n            if v < min_avg:\\n                min_avg = v\\n                index = i\\n\\n        return index\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n\\n        sum_right = sum(nums)\\n        len_right = len(nums)\\n        sum_left = 0\\n        len_left = 0\\n\\n        min_avg = inf\\n        index = 0\\n\\n        for i in range(len(nums)):\\n            \\n            sum_left += nums[i]\\n            len_left += 1\\n\\n            sum_right -= nums[i]\\n            len_right -= 1\\n\\n            #in case of only zeroes left on right\\n            if sum_right == 0:\\n                v = sum_left // len_left\\n            else:\\n                v = abs(\\n                    sum_left // len_left - sum_right // len_right\\n                )\\n\\n            if v < min_avg:\\n                min_avg = v\\n                index = i\\n\\n        return index\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876865,
                "title": "python-91-23-faster-prefix-sum-o-n-solution",
                "content": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        pre,post=[nums[0]]*n,[nums[n-1]]*n\\n        for i in range(1,n):\\n            pre[i]=(nums[i]+pre[i-1])\\n        for i in range(n-2,-1,-1):\\n            post[i]=(nums[i]+post[i+1])\\n        m,f=1000000,n-1\\n        for i in range(n):\\n            x=pre[i]//(i+1)\\n            if i==n-1:\\n                y=0\\n            else:\\n                y=post[i+1]//(n-i-1)\\n            if m>abs(x-y):\\n                m=abs(x-y)\\n                f=i\\n        return f\\n```\\n\\n**An upvote will be encouraging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        pre,post=[nums[0]]*n,[nums[n-1]]*n\\n        for i in range(1,n):\\n            pre[i]=(nums[i]+pre[i-1])\\n        for i in range(n-2,-1,-1):\\n            post[i]=(nums[i]+post[i+1])\\n        m,f=1000000,n-1\\n        for i in range(n):\\n            x=pre[i]//(i+1)\\n            if i==n-1:\\n                y=0\\n            else:\\n                y=post[i+1]//(n-i-1)\\n            if m>abs(x-y):\\n                m=abs(x-y)\\n                f=i\\n        return f\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876411,
                "title": "simple-java-solution-with-time-complexity-o-n-space-o-1",
                "content": "***Hello Guys.....***\\n\\tThis particular problem can be solved using O(N) complexity. To be more accurate, we need run time of O(2N) where N is the length of the array. Firstly, we need to calculate the ***total sum*** of the array. We need a long variable since the sum could be large.\\n\\t\\tSecondly we iterrate over the array once again and add each number to the **leftSum**. We find the **rightSum** using the **leftSum** and **totalSum**. Here is the java solution for the problem using the above approach.\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum=0,leftSum=0;\\n        int leftCount=1,rightCount=nums.length - 1;\\n        for (int i=0;i<nums.length;i++)\\n            sum+=nums[i];\\n        long lhs,rhs,min=999999999999999l;\\n        int index=0;\\n        for (int i=0;i<nums.length;i++)\\n        {\\n            leftSum+=nums[i];\\n            lhs=leftSum/leftCount;\\n            rhs=(rightCount>0)?(sum-leftSum)/rightCount:0;\\n            long avgDiff=((lhs-rhs)>0?lhs-rhs:rhs-lhs);\\n            if (i==0){min=avgDiff;}\\n            if (avgDiff<min)\\n            {\\n                min=avgDiff;\\n                index=i;\\n            }\\n            leftCount++;\\n            rightCount--;\\n         }\\n         return index;       \\n    }\\n}\\n```\\n\\n\\tWe can use the same approach, for solving similar problems such as [2270. Number of Ways to Split Array](http://leetcode.com/problems/number-of-ways-to-split-array/)\\n\\t\\n***Happy Coding \\nHave a nice day  :)***\\n\\n",
                "solutionTags": [
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum=0,leftSum=0;\\n        int leftCount=1,rightCount=nums.length - 1;\\n        for (int i=0;i<nums.length;i++)\\n            sum+=nums[i];\\n        long lhs,rhs,min=999999999999999l;\\n        int index=0;\\n        for (int i=0;i<nums.length;i++)\\n        {\\n            leftSum+=nums[i];\\n            lhs=leftSum/leftCount;\\n            rhs=(rightCount>0)?(sum-leftSum)/rightCount:0;\\n            long avgDiff=((lhs-rhs)>0?lhs-rhs:rhs-lhs);\\n            if (i==0){min=avgDiff;}\\n            if (avgDiff<min)\\n            {\\n                min=avgDiff;\\n                index=i;\\n            }\\n            leftCount++;\\n            rightCount--;\\n         }\\n         return index;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876305,
                "title": "easiest-solution-using-prefix-sum-python",
                "content": "# Approach\\nhttps://youtu.be/ykR8MsLAsWk\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        prefix_sum = [0] * (len(nums) + 1)\\n        nums_len = len(nums)\\n\\n        for index, element in enumerate(nums):\\n            prefix_sum[index+1] = prefix_sum[index] + element\\n\\n        minimum_avg = float(inf)\\n        min_index = 0\\n\\n        for index, element in enumerate(prefix_sum[1:]):\\n            right_sum = prefix_sum[-1] - element\\n            avg_diff = abs((element//(index+1)) - (right_sum // max(nums_len-index-1, 1)))\\n\\n            if avg_diff < minimum_avg:\\n                minimum_avg = avg_diff\\n                min_index = index\\n\\n        return min_index\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        prefix_sum = [0] * (len(nums) + 1)\\n        nums_len = len(nums)\\n\\n        for index, element in enumerate(nums):\\n            prefix_sum[index+1] = prefix_sum[index] + element\\n\\n        minimum_avg = float(inf)\\n        min_index = 0\\n\\n        for index, element in enumerate(prefix_sum[1:]):\\n            right_sum = prefix_sum[-1] - element\\n            avg_diff = abs((element//(index+1)) - (right_sum // max(nums_len-index-1, 1)))\\n\\n            if avg_diff < minimum_avg:\\n                minimum_avg = avg_diff\\n                min_index = index\\n\\n        return min_index\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876197,
                "title": "java-simple-solution-o-n-time-complexity-and-o-1-space-complexity",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n       int n=nums.length;\\n       long tsum=0;\\n       for(int i=0;i<n;i++)\\n            tsum+=nums[i];\\n        int ans=-1;  //index of minimum average difference\\n        int mindif=Integer.MAX_VALUE; //value of minimum average difference\\n        long lsum=0;\\n        long rsum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            //count the no of elements of left and right respectively\\n            int lcount=i+1;\\n            int rcount=n-lcount;\\n            // left sum and right sum\\n            lsum+=nums[i];\\n            rsum=tsum-lsum;\\n            // Average of left and right\\n            long lavg=(lsum/lcount);\\n            long ravg=(rcount==0)?0:rsum/rcount;\\n            //Absolute difference\\n            int absdiff=(int)Math.abs(lavg-ravg);\\n\\n            if(mindif>absdiff)\\n            {\\n                mindif=absdiff;\\n                ans=i;\\n            }\\n\\n\\n\\n            \\n            \\n        }\\n\\n        return ans;\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n       int n=nums.length;\\n       long tsum=0;\\n       for(int i=0;i<n;i++)\\n            tsum+=nums[i];\\n        int ans=-1;  //index of minimum average difference\\n        int mindif=Integer.MAX_VALUE; //value of minimum average difference\\n        long lsum=0;\\n        long rsum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            //count the no of elements of left and right respectively\\n            int lcount=i+1;\\n            int rcount=n-lcount;\\n            // left sum and right sum\\n            lsum+=nums[i];\\n            rsum=tsum-lsum;\\n            // Average of left and right\\n            long lavg=(lsum/lcount);\\n            long ravg=(rcount==0)?0:rsum/rcount;\\n            //Absolute difference\\n            int absdiff=(int)Math.abs(lavg-ravg);\\n\\n            if(mindif>absdiff)\\n            {\\n                mindif=absdiff;\\n                ans=i;\\n            }\\n\\n\\n\\n            \\n            \\n        }\\n\\n        return ans;\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875914,
                "title": "easy-cpp-solution-using-prefix-array-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- We have to find the element whose average difference is lowest and if there are multiple such elements then we have to return index of first such occuring element.\\n- So, we can use Prefix Array for calculating average difference of all elements and then return the index of least average difference element.\\n- We need to create the Prefix Array of long long int to avoid integer overflows.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. First we create a Prefix Array and then at every index we store the sum of elements till that index.\\n2. Next at every index we store average difference (absolute difference of average of right elements and left elements) for the element at that index.\\n3. As the last element has no right side element, it will store the average of all elements.\\n4. Lastly we find the minimum element from the array of average difference .\\n5. After iterating in array we find the minimum element and return its index.\\n Hope You Understand!\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ For Prefix Array\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n\\n        // Using Prefix Array\\n\\n        vector<long long int>arr(nums.size(),0);\\n        arr[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            arr[i] += arr[i-1] + nums[i]; // Created a prefix array\\n        }\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            arr[i] = arr[i]/(i+1) - ((arr[nums.size()-1] - arr[i])/(nums.size()-i-1)); // To store the difference of average at that index\\n\\n            arr[i] = abs(arr[i]);\\n        }\\n\\n        arr[nums.size()-1] /= nums.size(); //Last index will have no elements on right side so it will store average of all.\\n\\n        long long int &temp = *min_element(arr.begin(),arr.end());// to find the smallest element in array with least average difference.\\n\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(arr[i]==temp)return i;//returning index of smallest element.\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n\\n        // Using Prefix Array\\n\\n        vector<long long int>arr(nums.size(),0);\\n        arr[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            arr[i] += arr[i-1] + nums[i]; // Created a prefix array\\n        }\\n        for(int i=0;i<nums.size()-1;i++)\\n        {\\n            arr[i] = arr[i]/(i+1) - ((arr[nums.size()-1] - arr[i])/(nums.size()-i-1)); // To store the difference of average at that index\\n\\n            arr[i] = abs(arr[i]);\\n        }\\n\\n        arr[nums.size()-1] /= nums.size(); //Last index will have no elements on right side so it will store average of all.\\n\\n        long long int &temp = *min_element(arr.begin(),arr.end());// to find the smallest element in array with least average difference.\\n\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(arr[i]==temp)return i;//returning index of smallest element.\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875831,
                "title": "easy",
                "content": "long long int n=nums.size();\\n        long long int presum[n];\\n        presum[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            presum[i]=presum[i-1]+nums[i];\\n        }\\n        \\n   long long sufsum[n];\\n        sufsum[n-1]=nums[n-1];\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            sufsum[i]=sufsum[i+1]+nums[i];\\n        }\\n        \\n      long long  mini=INT_MAX;\\n       long long int ans=0;\\n       for(int i=0;i<n;i++)\\n       {\\n           long long int x,y;\\n           if(i==n-1)\\n           {\\n               \\n           \\n          x=presum[i]/(i+1);\\n           \\n                y=0;\\n\\n           }\\n           else\\n           {\\n               \\n               x=presum[i]/(i+1);\\n           \\n                 y=sufsum[i+1]/(n-i-1);\\n               \\n           }\\n           \\n          \\n           \\n           if(abs(x-y)<mini)\\n           {\\n               mini=abs(x-y);\\n               ans=i;\\n           }\\n       }\\n        \\n       \\n        return ans;",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "long long int n=nums.size();\\n        long long int presum[n];\\n        presum[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            presum[i]=presum[i-1]+nums[i];\\n        }\\n        \\n   long long sufsum[n];\\n        sufsum[n-1]=nums[n-1];\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            sufsum[i]=sufsum[i+1]+nums[i];\\n        }\\n        \\n      long long  mini=INT_MAX;\\n       long long int ans=0;\\n       for(int i=0;i<n;i++)\\n       {\\n           long long int x,y;\\n           if(i==n-1)\\n           {\\n               \\n           \\n          x=presum[i]/(i+1);\\n           \\n                y=0;\\n\\n           }\\n           else\\n           {\\n               \\n               x=presum[i]/(i+1);\\n           \\n                 y=sufsum[i+1]/(n-i-1);\\n               \\n           }\\n           \\n          \\n           \\n           if(abs(x-y)<mini)\\n           {\\n               mini=abs(x-y);\\n               ans=i;\\n           }\\n       }\\n        \\n       \\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 2875573,
                "title": "java-runtime-12ms-faster-than-100-00-o-n-time-o-1-space",
                "content": "```java\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n\\t\\t\\n\\t\\tlong sum = 0;\\n        for(int num : nums) sum += num;\\n\\t\\t\\n        long minDiff = Integer.MAX_VALUE;\\n\\t\\tlong leftSum = 0; long rightSum = sum;\\n        int ans = 0;\\n        \\n        for (int i = 0; i < n; i++) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n            long lAvg = leftSum/(i+1);\\n            long rAvg = (n-1-i) != 0 ? rightSum/(n-1-i) : rightSum;\\n            long diff = Math.abs(lAvg - rAvg);\\n            if (diff == 0) return i;\\n            if (diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n\\t\\t\\n\\t\\tlong sum = 0;\\n        for(int num : nums) sum += num;\\n\\t\\t\\n        long minDiff = Integer.MAX_VALUE;\\n\\t\\tlong leftSum = 0; long rightSum = sum;\\n        int ans = 0;\\n        \\n        for (int i = 0; i < n; i++) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n            long lAvg = leftSum/(i+1);\\n            long rAvg = (n-1-i) != 0 ? rightSum/(n-1-i) : rightSum;\\n            long diff = Math.abs(lAvg - rAvg);\\n            if (diff == 0) return i;\\n            if (diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875469,
                "title": "c-simple-prefix-sum-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    int minimumAverageDifference(vector<int>& nums) \\n    {    \\n        int ans_idx=0;\\n        int n=nums.size();\\n        if(n==1) return 0;\\n        \\n        long long ans = INT_MAX, sum = 0;\\n        \\n        for(int i=0;i<n;i++)\\n            sum += nums[i];\\n        // prefix sum\\n        vector<long long>pre(n);\\n        \\n        pre[0] = nums[0];\\n        for(int i=1;i<n;i++)\\n            pre[i] = nums[i] + pre[i-1];\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {    \\n            long long firstSum = pre[i];\\n            long long lastSum = (sum - pre[i]);\\n            long long diff=0;\\n            \\n            if((n-i-1)!= 0)\\n                diff = abs(firstSum/(i+1) - lastSum/(n-i-1));\\n            else\\n                diff = firstSum/(i+1) - 0;\\n            \\n            if(diff < ans)\\n            {\\n                ans = diff;\\n                ans_idx = i;\\n            }\\n        }\\n        return ans_idx;\\n    }\\n};\\n```\\n***Thanks for Upvoting !***\\n\\uD83D\\uDE42",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    int minimumAverageDifference(vector<int>& nums) \\n    {    \\n        int ans_idx=0;\\n        int n=nums.size();\\n        if(n==1) return 0;\\n        \\n        long long ans = INT_MAX, sum = 0;\\n        \\n        for(int i=0;i<n;i++)\\n            sum += nums[i];\\n        // prefix sum\\n        vector<long long>pre(n);\\n        \\n        pre[0] = nums[0];\\n        for(int i=1;i<n;i++)\\n            pre[i] = nums[i] + pre[i-1];\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {    \\n            long long firstSum = pre[i];\\n            long long lastSum = (sum - pre[i]);\\n            long long diff=0;\\n            \\n            if((n-i-1)!= 0)\\n                diff = abs(firstSum/(i+1) - lastSum/(n-i-1));\\n            else\\n                diff = firstSum/(i+1) - 0;\\n            \\n            if(diff < ans)\\n            {\\n                ans = diff;\\n                ans_idx = i;\\n            }\\n        }\\n        return ans_idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875246,
                "title": "easy-c",
                "content": "\\n# Approach\\nBy checking average upto index\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long minAv = INT_MAX;\\n        int idx = 0;\\n        long long sSum = 0, eSum = accumulate(nums.begin(),nums.end(),(long long)0);\\n        long long p=0,q=nums.size();\\n        for(int i=0;i<nums.size();i++){\\n            sSum += nums[i];\\n            eSum -= nums[i];\\n            p++, q--;\\n            long long av1 = sSum / p;\\n            long long av2;\\n            if(q==0)\\n                av2 = 0;\\n            else\\n                av2 = eSum / q;;\\n            if(abs(av1-av2) < minAv){\\n                minAv = abs(av1-av2);\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long minAv = INT_MAX;\\n        int idx = 0;\\n        long long sSum = 0, eSum = accumulate(nums.begin(),nums.end(),(long long)0);\\n        long long p=0,q=nums.size();\\n        for(int i=0;i<nums.size();i++){\\n            sSum += nums[i];\\n            eSum -= nums[i];\\n            p++, q--;\\n            long long av1 = sSum / p;\\n            long long av2;\\n            if(q==0)\\n                av2 = 0;\\n            else\\n                av2 = eSum / q;;\\n            if(abs(av1-av2) < minAv){\\n                minAv = abs(av1-av2);\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874840,
                "title": "c-linear-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nPointer technique\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimumAverageDifference(int[] nums) {\\n        long leftSum = 0;\\n        long rightSum = nums.Sum(n => (long)n);\\n\\n        int leftDivisor = 0;\\n        int rightDivisor = nums.Length;\\n        long bestAvg =Int32.MaxValue;\\n        int bestAvgIdx =0;\\n        \\n\\n        for(int i=0; i< nums.Length; i++)\\n        {\\n             leftSum += nums[i];\\n             rightSum -= nums[i];\\n\\n             leftDivisor +=1;\\n             rightDivisor = rightDivisor-1 == 0 ? 1: rightDivisor-1;\\n\\n            int bestScore = (int)Math.Abs(leftSum / leftDivisor - rightSum / rightDivisor);\\n\\n            if (bestScore < bestAvg)\\n            {\\n                bestAvgIdx = i;\\n                bestAvg = bestScore;\\n            }\\n        }\\n        return bestAvgIdx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumAverageDifference(int[] nums) {\\n        long leftSum = 0;\\n        long rightSum = nums.Sum(n => (long)n);\\n\\n        int leftDivisor = 0;\\n        int rightDivisor = nums.Length;\\n        long bestAvg =Int32.MaxValue;\\n        int bestAvgIdx =0;\\n        \\n\\n        for(int i=0; i< nums.Length; i++)\\n        {\\n             leftSum += nums[i];\\n             rightSum -= nums[i];\\n\\n             leftDivisor +=1;\\n             rightDivisor = rightDivisor-1 == 0 ? 1: rightDivisor-1;\\n\\n            int bestScore = (int)Math.Abs(leftSum / leftDivisor - rightSum / rightDivisor);\\n\\n            if (bestScore < bestAvg)\\n            {\\n                bestAvgIdx = i;\\n                bestAvg = bestScore;\\n            }\\n        }\\n        return bestAvgIdx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874690,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def minimumAverageDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        end = 0\\n        front = 0\\n        mindif = 100000000000\\n        location = 0\\n\\n        for x in nums:\\n            end += x\\n\\n        for x in range(len(nums)):\\n            front += nums[x]\\n            end -= nums[x]\\n            if x == len(nums) - 1:\\n                currdif = front/len(nums)\\n            else:\\n                currdif = abs((front/(x+1)) - (end/(len(nums)-(x+1))))\\n            if currdif < mindif:\\n                mindif = currdif\\n                location = x \\n \\n        return location\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def minimumAverageDifference(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        end = 0\\n        front = 0\\n        mindif = 100000000000\\n        location = 0\\n\\n        for x in nums:\\n            end += x\\n\\n        for x in range(len(nums)):\\n            front += nums[x]\\n            end -= nums[x]\\n            if x == len(nums) - 1:\\n                currdif = front/len(nums)\\n            else:\\n                currdif = abs((front/(x+1)) - (end/(len(nums)-(x+1))))\\n            if currdif < mindif:\\n                mindif = currdif\\n                location = x \\n \\n        return location\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2650878,
                "title": "java-easy-solution-datatype-manipulation",
                "content": "# 4 Test cases not passing just for Integer underflow --> \\n\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        List<Integer> list = new ArrayList<>();\\n        int res[] = new int[n];\\n        int pref = 0;\\n        int suf = 0;\\n        for(int i = 0;i<n;i++){\\n            suf += nums[i];\\n        }\\n        for(int i = 0;i<n-1;i++){\\n            pref += nums[i];\\n            suf -= nums[i];\\n            int lem = pref/(i+1);\\n            int sem = suf/(n-i-1);\\n            res[i] = Math.abs(lem - sem);\\n        }\\n        int freshSum = 0;\\n        for(int p : nums){\\n            freshSum += p;\\n        }\\n        res[n-1] = Math.abs(freshSum/n);\\n        int min = Integer.MAX_VALUE;\\n        int result = -1;\\n        for(int p : res){\\n            if(p < min){\\n                min = p;\\n            }\\n        }\\n        for(int i = 0;i<n;i++){\\n            if(res[i] == min){\\n                list.add(i);\\n            }\\n        }\\n        Collections.sort(list);\\n        return list.get(0);\\n    }\\n}\\n```\\n\\n# Revised code with long datatype-->\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        List<Integer> list = new ArrayList<>();\\n        long res[] = new long[n];\\n        long pref = 0;\\n        long suf = 0;\\n        for(int i = 0;i<n;i++){\\n            suf += nums[i];\\n        }\\n        for(int i = 0;i<n-1;i++){\\n            pref += nums[i];\\n            suf -= nums[i];\\n            long lem = pref/(i+1);\\n            long sem = suf/(n-i-1);\\n            res[i] = Math.abs(lem - sem);\\n        }\\n        long freshSum = 0;\\n        for(long p : nums){\\n            freshSum += p;\\n        }\\n        res[n-1] = Math.abs(freshSum/n);\\n        long min = Long.MAX_VALUE;\\n        int result = -1;\\n        for(long p : res){\\n            if(p < min){\\n                min = p;\\n            }\\n        }\\n        for(int i = 0;i<n;i++){\\n            if(res[i] == min){\\n               result = i;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        List<Integer> list = new ArrayList<>();\\n        int res[] = new int[n];\\n        int pref = 0;\\n        int suf = 0;\\n        for(int i = 0;i<n;i++){\\n            suf += nums[i];\\n        }\\n        for(int i = 0;i<n-1;i++){\\n            pref += nums[i];\\n            suf -= nums[i];\\n            int lem = pref/(i+1);\\n            int sem = suf/(n-i-1);\\n            res[i] = Math.abs(lem - sem);\\n        }\\n        int freshSum = 0;\\n        for(int p : nums){\\n            freshSum += p;\\n        }\\n        res[n-1] = Math.abs(freshSum/n);\\n        int min = Integer.MAX_VALUE;\\n        int result = -1;\\n        for(int p : res){\\n            if(p < min){\\n                min = p;\\n            }\\n        }\\n        for(int i = 0;i<n;i++){\\n            if(res[i] == min){\\n                list.add(i);\\n            }\\n        }\\n        Collections.sort(list);\\n        return list.get(0);\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        List<Integer> list = new ArrayList<>();\\n        long res[] = new long[n];\\n        long pref = 0;\\n        long suf = 0;\\n        for(int i = 0;i<n;i++){\\n            suf += nums[i];\\n        }\\n        for(int i = 0;i<n-1;i++){\\n            pref += nums[i];\\n            suf -= nums[i];\\n            long lem = pref/(i+1);\\n            long sem = suf/(n-i-1);\\n            res[i] = Math.abs(lem - sem);\\n        }\\n        long freshSum = 0;\\n        for(long p : nums){\\n            freshSum += p;\\n        }\\n        res[n-1] = Math.abs(freshSum/n);\\n        long min = Long.MAX_VALUE;\\n        int result = -1;\\n        for(long p : res){\\n            if(p < min){\\n                min = p;\\n            }\\n        }\\n        for(int i = 0;i<n;i++){\\n            if(res[i] == min){\\n               result = i;\\n                break;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2596932,
                "title": "with-explanation-comments-time-214-ms-42-49-space-78-3-mb-94-22",
                "content": "**Like it? ->Upvote please!** \\u30C4\\n\\nTC: O(n)   //iterate the array\\nSC: O(1)\\n\\n\\n\\'\\'\\'\\nclass Solution {\\npublic:\\n    \\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        //initialize two sum variables-> one from the left or start & one from the right or end\\n        long long sumLeft=0, sumRight=0, minAvg=INT_MAX, index=0;\\n        \\n        //loop to get the sumRight value\\n        for(int num:nums)\\n            sumRight+=num;\\n    //btw, you can use {sumRight=accumulate(nums.begin(), nums.end(), 0LL)} instead\\n        \\n    //loop over the whole array elements\\n        for(int i=0;i<nums.size();i++){\\n            \\n            //add the current value to the left sum-> (i+1) elements\\n            sumLeft+=nums[i];\\n            //subtract the current value from the right sum-> (n-i-1) elements\\n            sumRight-=nums[i];\\n            \\n            //average for the left sum-> sum value / the number of left elements\\n            int avgLeft=sumLeft/(i+1);\\n            //average for the right sum-> sum value / the number of right elements & if you\\'re in the last position-> avg will be 0\\n            int avgRight= (i==nums.size()-1) ? 0 : sumRight/(nums.size()-i-1);\\n            \\n            \\n            //check if the absolute difference between the two averages is smaller than the lowest possible avg\\n            if(abs(avgLeft-avgRight) < minAvg){\\n                //replace the avg value with the lower one\\n                minAvg=abs(avgLeft-avgRight);\\n                //also, save the current index of the lower one\\n                index=i;\\n            }\\n            \\n        }\\n        \\n    //return the lowest index value\\n        return index;\\n    }\\n};\\n\\'\\'\\'\\n\\n**Like it? ->Upvote please!** \\u30C4\\n**If still not understood, feel free to comment. I will help you out**\\n**Happy Coding :)**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "class Solution {\\npublic:\\n    \\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        //initialize two sum variables-> one from the left or start & one from the right or end\\n        long long sumLeft=0, sumRight=0, minAvg=INT_MAX, index=0;\\n        \\n        //loop to get the sumRight value\\n        for(int num:nums)\\n            sumRight+=num;\\n    //btw, you can use {sumRight=accumulate(nums.begin(), nums.end(), 0LL)}",
                "codeTag": "Java"
            },
            {
                "id": 2032613,
                "title": "using-prefix-suffix-sum",
                "content": "\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long long> left(nums.size());\\n        vector<long long> right(nums.size());\\n        right[nums.size()-1]=0;\\n        left[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            left[i]=left[i-1]+nums[i];\\n         \\n        }\\n         for(int i=nums.size()-2;i>=0;i--)\\n        {\\n           right[i]=right[i+1]+nums[i+1];\\n         \\n        }\\n      \\n       int  d=1e7;\\n        int ans;\\n        int n=nums.size()-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            //cout<<n-i;\\n            if(i==nums.size()-1)\\n            {\\n             if(left[i]/(i+1)<d)\\n             {\\n                ans=i;\\n             }\\n            }\\n            else{\\n            int a=abs(left[i]/(i+1)-right[i]/(n-i));\\n            if(a<d)\\n            {\\n               \\n                d=a;\\n                ans=i;\\n            }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n\\n\\n\\n     \\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long long> left(nums.size());\\n        vector<long long> right(nums.size());\\n        right[nums.size()-1]=0;\\n        left[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n        {\\n            left[i]=left[i-1]+nums[i];\\n         \\n        }\\n         for(int i=nums.size()-2;i>=0;i--)\\n        {\\n           right[i]=right[i+1]+nums[i+1];\\n         \\n        }\\n      \\n       int  d=1e7;\\n        int ans;\\n        int n=nums.size()-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            //cout<<n-i;\\n            if(i==nums.size()-1)\\n            {\\n             if(left[i]/(i+1)<d)\\n             {\\n                ans=i;\\n             }\\n            }\\n            else{\\n            int a=abs(left[i]/(i+1)-right[i]/(n-i));\\n            if(a<d)\\n            {\\n               \\n                d=a;\\n                ans=i;\\n            }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2003705,
                "title": "golang-prefix-sum-solution",
                "content": "```go\\nfunc minimumAverageDifference(nums []int) int {\\n\\tsummation := make([]int, len(nums))\\n\\tsummation[0] = nums[0]\\n\\tfor i := 1; i < len(summation); i++ {\\n\\t\\tsummation[i] = summation[i-1] + nums[i]\\n\\t}\\n\\tindex := len(nums) - 1\\n\\tminDiff := abs(summation[len(nums)-1] / len(nums))\\n\\tfor i := 0; i < len(summation)-1; i++ {\\n\\t\\tcurDiff := abs(summation[i]/(i+1) - (summation[len(nums)-1]-summation[i])/(len(nums)-i-1))\\n\\t\\t// index might be len(nums) - 1, so we must check index with i while curDiff equal to minDiff\\n\\t\\tif curDiff < minDiff || (curDiff == minDiff && i < index) {\\n\\t\\t\\tminDiff, index = curDiff, i\\n\\t\\t}\\n\\t}\\n\\treturn index\\n}\\n\\nfunc abs(v int) int {\\n\\tif v > 0 {\\n\\t\\treturn v\\n\\t}\\n\\treturn v * -1\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc minimumAverageDifference(nums []int) int {\\n\\tsummation := make([]int, len(nums))\\n\\tsummation[0] = nums[0]\\n\\tfor i := 1; i < len(summation); i++ {\\n\\t\\tsummation[i] = summation[i-1] + nums[i]\\n\\t}\\n\\tindex := len(nums) - 1\\n\\tminDiff := abs(summation[len(nums)-1] / len(nums))\\n\\tfor i := 0; i < len(summation)-1; i++ {\\n\\t\\tcurDiff := abs(summation[i]/(i+1) - (summation[len(nums)-1]-summation[i])/(len(nums)-i-1))\\n\\t\\t// index might be len(nums) - 1, so we must check index with i while curDiff equal to minDiff\\n\\t\\tif curDiff < minDiff || (curDiff == minDiff && i < index) {\\n\\t\\t\\tminDiff, index = curDiff, i\\n\\t\\t}\\n\\t}\\n\\treturn index\\n}\\n\\nfunc abs(v int) int {\\n\\tif v > 0 {\\n\\t\\treturn v\\n\\t}\\n\\treturn v * -1\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1995073,
                "title": "prefix-sum-solution",
                "content": "Find the prefix sum from the start of the array to the end of the array. The loop through the array, keeping track of the minimum average difference at each index\\n```\\ndef minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        pre_sum=[]\\n        pre=0\\n        for i in range(len(nums)):\\n            pre+=nums[i]\\n            pre_sum.append(pre)\\n        max_sum=pre_sum[-1]\\n      \\n        min_dif=float(\\'+inf\\')\\n        idx=0\\n        n=len(nums)\\n        for i in range(len(nums)):\\n            if i!=n-1:\\n                present=(pre_sum[i]//(i+1)) -((max_sum-pre_sum[i])//(n-i-1))\\n            else:\\n                present=pre_sum[i]//(i+1)\\n            \\n            present=abs(present)\\n            if present<min_dif:\\n                idx=i\\n                min_dif=present\\n            \\n        return idx\\n```",
                "solutionTags": [
                    "Python",
                    "Prefix Sum"
                ],
                "code": "```\\ndef minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        pre_sum=[]\\n        pre=0\\n        for i in range(len(nums)):\\n            pre+=nums[i]\\n            pre_sum.append(pre)\\n        max_sum=pre_sum[-1]\\n      \\n        min_dif=float(\\'+inf\\')\\n        idx=0\\n        n=len(nums)\\n        for i in range(len(nums)):\\n            if i!=n-1:\\n                present=(pre_sum[i]//(i+1)) -((max_sum-pre_sum[i])//(n-i-1))\\n            else:\\n                present=pre_sum[i]//(i+1)\\n            \\n            present=abs(present)\\n            if present<min_dif:\\n                idx=i\\n                min_dif=present\\n            \\n        return idx\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1994730,
                "title": "simple-solution-c-o-1-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans=INT_MAX;\\n        long long total=0;  \\n        int n=nums.size();  //size of vector\\n        \\n        for(int i=0;i<n;i++){\\n            total+=nums[i];    //total sum of all elements\\n        }\\n        \\n        long long curr=0;\\n        int ind=-1;\\n        for(int i=0;i<n-1;i++){\\n            curr+=nums[i];     //sum of elements upto current index i\\n            long long last=total-curr;      //sum of remaining elements\\n            long long p=abs((curr/(i+1))-(last/(n-i-1)));        //average \\n            if(p<ans){     // taking min average difference and updating index\\n                ans=p;\\n                ind=i;\\n            }\\n        }\\n        long long p=(total/n);\\n        if(p<ans){       // taking min average difference and updating index for last index (n-1)\\n            ans=p;\\n            ind=n-1;\\n        }\\n        \\n        return ind;      //return index of min average difference\\n    }\\n};\\n\\n\\n\\n```",
                "solutionTags": [
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans=INT_MAX;\\n        long long total=0;  \\n        int n=nums.size();  //size of vector\\n        \\n        for(int i=0;i<n;i++){\\n            total+=nums[i];    //total sum of all elements\\n        }\\n        \\n        long long curr=0;\\n        int ind=-1;\\n        for(int i=0;i<n-1;i++){\\n            curr+=nums[i];     //sum of elements upto current index i\\n            long long last=total-curr;      //sum of remaining elements\\n            long long p=abs((curr/(i+1))-(last/(n-i-1)));        //average \\n            if(p<ans){     // taking min average difference and updating index\\n                ans=p;\\n                ind=i;\\n            }\\n        }\\n        long long p=(total/n);\\n        if(p<ans){       // taking min average difference and updating index for last index (n-1)\\n            ans=p;\\n            ind=n-1;\\n        }\\n        \\n        return ind;      //return index of min average difference\\n    }\\n};\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994592,
                "title": "c-super-easy-solution-using-prefix-sum-method",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long sum = 0;\\n        for (int i:nums){\\n            sum+=i;\\n        }\\n        long long temp = 0;\\n        int mad = INT_MAX;\\n        int ans = 0;\\n        int n = nums.size();\\n        for (int i=0;i<n;i++){\\n            temp+=nums[i];\\n            int a1 = temp/(i+1);\\n            int a2 = (n-i-1)!=0 ? (sum-temp)/(n-i-1) : 0;\\n            int curr = abs(a1-a2);\\n            if (curr<mad){\\n                ans = i;\\n                mad = curr;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**Please upvote if you like it. Thanks :)**",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long sum = 0;\\n        for (int i:nums){\\n            sum+=i;\\n        }\\n        long long temp = 0;\\n        int mad = INT_MAX;\\n        int ans = 0;\\n        int n = nums.size();\\n        for (int i=0;i<n;i++){\\n            temp+=nums[i];\\n            int a1 = temp/(i+1);\\n            int a2 = (n-i-1)!=0 ? (sum-temp)/(n-i-1) : 0;\\n            int curr = abs(a1-a2);\\n            if (curr<mad){\\n                ans = i;\\n                mad = curr;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1994581,
                "title": "c-easy-to-understand-simple-solution",
                "content": "```\\n#define ll long long int\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        ll n=nums.size();\\n        vector<ll> prefix(n);\\n        prefix[0]=nums[0];\\n        for(ll i=1;i<n;i++)\\n        {\\n            prefix[i]=nums[i]+prefix[i-1];\\n        }\\n        ll mini=INT_MAX; \\n        ll left,right;\\n        ll ans=0;\\n        for(ll i=0;i<n;i++)\\n        {\\n            left=prefix[i];\\n            ll l,r;\\n            l=i+1;\\n            r=n-i-1;\\n            ll v1,v2;\\n            if(i==n-1)\\n            {\\n                 right=0;\\n                 v1=left/l;\\n                 v2=0;\\n            }\\n                else \\n                {\\n            right=prefix[n-1]-prefix[i];\\n                     v1=left/l;\\n                     v2=right/r;\\n                }\\n                \\n                              ll x=abs(v1-v2);\\n                              if(x<mini)\\n                              {\\n                                  mini=x;\\n                                  ans=i;\\n                          \\n        }            \\n        }\\n    return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n#define ll long long int\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        ll n=nums.size();\\n        vector<ll> prefix(n);\\n        prefix[0]=nums[0];\\n        for(ll i=1;i<n;i++)\\n        {\\n            prefix[i]=nums[i]+prefix[i-1];\\n        }\\n        ll mini=INT_MAX; \\n        ll left,right;\\n        ll ans=0;\\n        for(ll i=0;i<n;i++)\\n        {\\n            left=prefix[i];\\n            ll l,r;\\n            l=i+1;\\n            r=n-i-1;\\n            ll v1,v2;\\n            if(i==n-1)\\n            {\\n                 right=0;\\n                 v1=left/l;\\n                 v2=0;\\n            }\\n                else \\n                {\\n            right=prefix[n-1]-prefix[i];\\n                     v1=left/l;\\n                     v2=right/r;\\n                }\\n                \\n                              ll x=abs(v1-v2);\\n                              if(x<mini)\\n                              {\\n                                  mini=x;\\n                                  ans=i;\\n                          \\n        }            \\n        }\\n    return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3713310,
                "title": "easy-c-solution-very-simple-approach-beats-95-in-both",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size(), ans = 0, min_avg_diff = INT_MAX;\\n        long long int sumRight = 0, sumLeft = 0, avgLeft = 0, avgRight = 0; \\n        for(int i=0; i<n; i++)\\n            sumRight += nums[i];\\n        for(int i=0; i<n; i++)\\n        {\\n            sumLeft += nums[i];\\n            sumRight -= nums[i];\\n            avgLeft = sumLeft/(i+1);\\n            avgRight = i==(n-1) ? 0 : sumRight/(n-i-1);\\n            int val = abs(avgLeft - avgRight);\\n            if(val < min_avg_diff){\\n                min_avg_diff = val;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size(), ans = 0, min_avg_diff = INT_MAX;\\n        long long int sumRight = 0, sumLeft = 0, avgLeft = 0, avgRight = 0; \\n        for(int i=0; i<n; i++)\\n            sumRight += nums[i];\\n        for(int i=0; i<n; i++)\\n        {\\n            sumLeft += nums[i];\\n            sumRight -= nums[i];\\n            avgLeft = sumLeft/(i+1);\\n            avgRight = i==(n-1) ? 0 : sumRight/(n-i-1);\\n            int val = abs(avgLeft - avgRight);\\n            if(val < min_avg_diff){\\n                min_avg_diff = val;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3316114,
                "title": "easy-java-prefix-sum-solution",
                "content": "# Intuition\\nPrefix sum approach.\\n\\n# Approach\\n1) Uses Prefix Sum Array approach\\n2)  prefixSum[i] = prefixSum[i - 1] + arr[i];\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n int len=nums.length;\\nlong sum=0;\\nint index=0;;\\nlong min=Integer.MAX_VALUE;\\nlong leftSum=0,rightSum=0;\\n\\n\\nfor(int i=0;i<len;i++){\\n    sum+=nums[i];\\n}\\n\\nfor(int i=0;i<len;i++){\\n    leftSum+= nums[i];\\n    \\n\\nlong avgLeftSum=leftSum/(i+1);\\n\\nrightSum=sum-leftSum;\\nlong avgRightSum=0;\\n\\n   if(rightSum!=0){\\n             avgRightSum=rightSum/(len-i-1);\\n            }\\n\\n\\nlong diff=Math.abs(avgLeftSum-avgRightSum);\\n\\nif(diff<min){\\n    min=diff;\\n    index=i;\\n}\\n}\\n\\nreturn index;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n int len=nums.length;\\nlong sum=0;\\nint index=0;;\\nlong min=Integer.MAX_VALUE;\\nlong leftSum=0,rightSum=0;\\n\\n\\nfor(int i=0;i<len;i++){\\n    sum+=nums[i];\\n}\\n\\nfor(int i=0;i<len;i++){\\n    leftSum+= nums[i];\\n    \\n\\nlong avgLeftSum=leftSum/(i+1);\\n\\nrightSum=sum-leftSum;\\nlong avgRightSum=0;\\n\\n   if(rightSum!=0){\\n             avgRightSum=rightSum/(len-i-1);\\n            }\\n\\n\\nlong diff=Math.abs(avgLeftSum-avgRightSum);\\n\\nif(diff<min){\\n    min=diff;\\n    index=i;\\n}\\n}\\n\\nreturn index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3267630,
                "title": "easy-java-solution-91-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length, pos = 0;\\n        long min = Integer.MAX_VALUE;\\n        long right = 0, left = 0, sum = 0;\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n        long val = 0;\\n        for(int i = 0; i < n; i++){\\n            left += nums[i];\\n            right = sum - left;\\n            if(i == n - 1)\\n                val = Math.abs(left / n);\\n            else if(i < n - 1)\\n                val = Math.abs((left / (i + 1)) - (right / (n - i - 1)));\\n            if(val < min){\\n                min = val;\\n                pos = i;\\n            }\\n        }\\n        return pos;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length, pos = 0;\\n        long min = Integer.MAX_VALUE;\\n        long right = 0, left = 0, sum = 0;\\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n        long val = 0;\\n        for(int i = 0; i < n; i++){\\n            left += nums[i];\\n            right = sum - left;\\n            if(i == n - 1)\\n                val = Math.abs(left / n);\\n            else if(i < n - 1)\\n                val = Math.abs((left / (i + 1)) - (right / (n - i - 1)));\\n            if(val < min){\\n                min = val;\\n                pos = i;\\n            }\\n        }\\n        return pos;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3139442,
                "title": "c-prefix-suffix-sum-easy-efficient",
                "content": "```\\n#CODE\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int TotalSum=0,n=nums.size(),mini=INT_MAX,currSum=0,sumLeft=0,diff=0;\\n        int idx=0;\\n        for(int i=0;i<n;i++){\\n            TotalSum+=nums[i];\\n        }\\n        if(n==1){\\n            return 0;\\n        }\\n        for(int i=0;i<n;i++){\\n            currSum+=nums[i];\\n            sumLeft=TotalSum-currSum;\\n            if(sumLeft==0){\\n                 diff=floor(currSum/(i+1));\\n            }else{\\n                 diff=abs((currSum/(i+1))-(sumLeft/(n-i-1)));\\n            }\\n            if(mini>diff){\\n                mini=diff;\\n                idx=i;\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```\\n\\n![c668b758-003d-4e6f-a374-c128c2ef83e6_1655058432.5612516.jpeg](https://assets.leetcode.com/users/images/372db7f4-6604-4176-adea-a17e0620349b_1675493896.8659327.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#CODE\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int TotalSum=0,n=nums.size(),mini=INT_MAX,currSum=0,sumLeft=0,diff=0;\\n        int idx=0;\\n        for(int i=0;i<n;i++){\\n            TotalSum+=nums[i];\\n        }\\n        if(n==1){\\n            return 0;\\n        }\\n        for(int i=0;i<n;i++){\\n            currSum+=nums[i];\\n            sumLeft=TotalSum-currSum;\\n            if(sumLeft==0){\\n                 diff=floor(currSum/(i+1));\\n            }else{\\n                 diff=abs((currSum/(i+1))-(sumLeft/(n-i-1)));\\n            }\\n            if(mini>diff){\\n                mini=diff;\\n                idx=i;\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3041191,
                "title": "c-easy-and-simple-90-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        if(nums.size() == 1) return 0;\\n        long long int sum1 = 0, sum2 = 0;\\n\\n        for(int i=0; i<nums.size(); i++) sum2 += nums[i];\\n\\n        int ans = -1;\\n        int cnt = INT_MAX;\\n\\n        int n = nums.size();\\n        for(int i=0; i<n-1; i++){\\n            sum1 += nums[i];\\n            sum2 -= nums[i];\\n\\n            long long int a = sum1/(i+1);\\n            long long int b = sum2/(n-i-1);\\n\\n            if(cnt > abs(a-b)){\\n                cnt = abs(a-b);\\n                ans = i;\\n            }\\n        }\\n\\n        sum1 += nums[n-1];\\n        if(sum1/n < cnt){\\n            ans = n-1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        if(nums.size() == 1) return 0;\\n        long long int sum1 = 0, sum2 = 0;\\n\\n        for(int i=0; i<nums.size(); i++) sum2 += nums[i];\\n\\n        int ans = -1;\\n        int cnt = INT_MAX;\\n\\n        int n = nums.size();\\n        for(int i=0; i<n-1; i++){\\n            sum1 += nums[i];\\n            sum2 -= nums[i];\\n\\n            long long int a = sum1/(i+1);\\n            long long int b = sum2/(n-i-1);\\n\\n            if(cnt > abs(a-b)){\\n                cnt = abs(a-b);\\n                ans = i;\\n            }\\n        }\\n\\n        sum1 += nums[n-1];\\n        if(sum1/n < cnt){\\n            ans = n-1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2897537,
                "title": "java-easy",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long totalSum = 0;\\n        for(int num: nums) {\\n            totalSum += num;\\n        }\\n\\n        long currSum = 0, minAvgDiff = Integer.MAX_VALUE;\\n        int minAvgIdx = 0;\\n        for(int idx = 0; idx<nums.length; idx++) {\\n            currSum += nums[idx];\\n            long leftAvg = currSum/(idx+1);\\n            long rightSum = totalSum - currSum;\\n            boolean isLastElement = idx == nums.length-1;\\n            long rightAvg = isLastElement ? 0 : rightSum/(nums.length-idx-1);    \\n            long diffAvg = Math.abs(leftAvg-rightAvg);\\n            \\n            if(diffAvg<minAvgDiff) {\\n                minAvgDiff = diffAvg;\\n                minAvgIdx = idx;\\n            }\\n        }\\n        \\n        return minAvgIdx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long totalSum = 0;\\n        for(int num: nums) {\\n            totalSum += num;\\n        }\\n\\n        long currSum = 0, minAvgDiff = Integer.MAX_VALUE;\\n        int minAvgIdx = 0;\\n        for(int idx = 0; idx<nums.length; idx++) {\\n            currSum += nums[idx];\\n            long leftAvg = currSum/(idx+1);\\n            long rightSum = totalSum - currSum;\\n            boolean isLastElement = idx == nums.length-1;\\n            long rightAvg = isLastElement ? 0 : rightSum/(nums.length-idx-1);    \\n            long diffAvg = Math.abs(leftAvg-rightAvg);\\n            \\n            if(diffAvg<minAvgDiff) {\\n                minAvgDiff = diffAvg;\\n                minAvgIdx = idx;\\n            }\\n        }\\n        \\n        return minAvgIdx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878096,
                "title": "c-using-prefix-sum-detailed-explanation-one-pass-o-nlongn",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long> prefixSum(nums.size(), 0);\\n        \\n        long sum = 0;\\n        \\n        // store the accumulated sum at the index \\n        for (int i = 0; i < nums.size(); i ++) {\\n            sum += nums[i];\\n            prefixSum[i] = sum;\\n        }\\n        \\n          vector<pair<long,int>> vec; // set up a vec to store pairs with the first one as the res and the second one as the index\\n        \\n        for (int i = 0; i < nums.size(); i++) {\\n            long firstPartSum = prefixSum[i];\\n            long secondPartSum = prefixSum[nums.size()-1] - firstPartSum; \\n            // the second part sum is just the last item from the vec subtract the firstPart sum\\n            long firstPartSumAverage = firstPartSum/ (i+1);\\n            long secondPartSumAverage = 0;\\n            if (secondPartSum != 0) {\\n                secondPartSumAverage = secondPartSum/(nums.size() - (i+1));\\n            }\\n            long res = abs(firstPartSumAverage - secondPartSumAverage);\\n            vec.push_back({res, i});\\n            // once we have the result store the result as a pair of {res, index} to vec\\n        }\\n        \\n        sort(vec.begin(), vec.end()); // sort the vec from smallest to biggest\\n        \\n        return vec[0].second; // just return the first item\\'s index from the vec\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long> prefixSum(nums.size(), 0);\\n        \\n        long sum = 0;\\n        \\n        // store the accumulated sum at the index \\n        for (int i = 0; i < nums.size(); i ++) {\\n            sum += nums[i];\\n            prefixSum[i] = sum;\\n        }\\n        \\n          vector<pair<long,int>> vec; // set up a vec to store pairs with the first one as the res and the second one as the index\\n        \\n        for (int i = 0; i < nums.size(); i++) {\\n            long firstPartSum = prefixSum[i];\\n            long secondPartSum = prefixSum[nums.size()-1] - firstPartSum; \\n            // the second part sum is just the last item from the vec subtract the firstPart sum\\n            long firstPartSumAverage = firstPartSum/ (i+1);\\n            long secondPartSumAverage = 0;\\n            if (secondPartSum != 0) {\\n                secondPartSumAverage = secondPartSum/(nums.size() - (i+1));\\n            }\\n            long res = abs(firstPartSumAverage - secondPartSumAverage);\\n            vec.push_back({res, i});\\n            // once we have the result store the result as a pair of {res, index} to vec\\n        }\\n        \\n        sort(vec.begin(), vec.end()); // sort the vec from smallest to biggest\\n        \\n        return vec[0].second; // just return the first item\\'s index from the vec\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878070,
                "title": "o-1-space-o-n-time-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe calculate the sum of all elements beforehand, which is of O(N) complexity\\nWe store the prefix sum in a variable as we traverse through the array, this is the sum of the left part of the partition. \\nTo calculate the right sum, there are two conditions\\n1. if the no. of elements is zero, then we simply subtract 0 from the left average\\n2. if the no. of elements is greater than zero, then we find the right sum by subtracting current left sum from the total sum\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Note\\nHere, we use \\'long\\' datatype instead of int for all the variables storing elements as \\'int\\' range is not enough for all the testcases, for indices we use \\'int\\'. \\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        if (n == 1) return 0;\\n\\n        long tot = 0;\\n        for(int i : nums) \\n            tot += i;\\n\\n        long left = 0;\\n        long minDiff = Integer.MAX_VALUE;\\n        int ans = -1;\\n        for (int i = 0; i < n; ++i) {\\n            left += nums[i];\\n            long right = tot - left;  \\n            long diff = Math.abs((left / (i + 1)) - \\n                ((n - i == 1) ? 0: right / (n - i - 1)));\\n                    \\n            if (diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        if (n == 1) return 0;\\n\\n        long tot = 0;\\n        for(int i : nums) \\n            tot += i;\\n\\n        long left = 0;\\n        long minDiff = Integer.MAX_VALUE;\\n        int ans = -1;\\n        for (int i = 0; i < n; ++i) {\\n            left += nums[i];\\n            long right = tot - left;  \\n            long diff = Math.abs((left / (i + 1)) - \\n                ((n - i == 1) ? 0: right / (n - i - 1)));\\n                    \\n            if (diff < minDiff) {\\n                minDiff = diff;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2878006,
                "title": "using-java",
                "content": "class Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n\\tint len = nums.length, res = 0;\\n\\tlong min = Integer.MAX_VALUE, sum = 0, leftSum = 0, rightSum = 0;\\n\\tfor (int num : nums)\\n\\t\\tsum += num;\\n\\tfor (int i = 0; i < len; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum = sum - leftSum;\\n\\t\\tlong diff = Math.abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len -i - 1)));\\n\\t\\tif (diff < min) {\\n\\t\\t\\tmin = diff;\\n\\t\\t\\tres = i;\\n\\t\\t}\\n\\t}\\n\\treturn res;\\n}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n\\tint len = nums.length, res = 0;\\n\\tlong min = Integer.MAX_VALUE, sum = 0, leftSum = 0, rightSum = 0;\\n\\tfor (int num : nums)\\n\\t\\tsum += num;\\n\\tfor (int i = 0; i < len; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum = sum - leftSum;\\n\\t\\tlong diff = Math.abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len -i - 1)));\\n\\t\\tif (diff < min) {\\n\\t\\t\\tmin = diff;\\n\\t\\t\\tres = i;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2877974,
                "title": "c-my-solution-easy-to-understand",
                "content": "Calculating the prefix sum will make the problem easy.\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        vector<long long> prefix;\\n        prefix.push_back(nums[0]);\\n        \\n        \\n        for(int i=1;i<nums.size();i++){\\n            prefix.push_back(nums[i]+prefix[i-1]);\\n        }\\n        \\n        int min = INT_MAX;\\n        int min_index = 0;\\n        for(int i=0;i<nums.size();i++){\\n            int diff;\\n            if(nums.size() - i - 1==0)\\n                diff = (prefix[i]/(i+1));\\n            else\\n            diff = (prefix[i]/(i+1)) - (prefix[nums.size()-1]-prefix[i])/(nums.size() - i - 1);\\n            \\n            diff = abs(diff);\\n            if(diff<min){\\n                min = diff;\\n                min_index = i;\\n            }\\n        }\\n        \\n        return min_index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        vector<long long> prefix;\\n        prefix.push_back(nums[0]);\\n        \\n        \\n        for(int i=1;i<nums.size();i++){\\n            prefix.push_back(nums[i]+prefix[i-1]);\\n        }\\n        \\n        int min = INT_MAX;\\n        int min_index = 0;\\n        for(int i=0;i<nums.size();i++){\\n            int diff;\\n            if(nums.size() - i - 1==0)\\n                diff = (prefix[i]/(i+1));\\n            else\\n            diff = (prefix[i]/(i+1)) - (prefix[nums.size()-1]-prefix[i])/(nums.size() - i - 1);\\n            \\n            diff = abs(diff);\\n            if(diff<min){\\n                min = diff;\\n                min_index = i;\\n            }\\n        }\\n        \\n        return min_index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877890,
                "title": "solution-in-java-with-time-complexity-o-n-and-space-o-1",
                "content": "# Intuition\\n<!-- -->\\n\\n# Approach\\n<!-- Runing sum  -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- O(N) -->\\n\\n- Space complexity:\\n<!-- O(1) -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n\\n        long min=Long.MAX_VALUE;\\n\\n        long sum = 0L;\\n\\n        for(int y : nums) sum+=y;\\n\\n        int x=0;\\n        long currSum=0;\\n        int ans=0;\\n        int y=0;\\n        if(sum==0) return 0;\\n\\n\\n        for(; y<nums.length-1 ; y++){\\n            x++;\\n            currSum+=nums[y];\\n            sum-=nums[y];\\n            long avg=Math.abs(((long)currSum/x) - ((long)sum/(nums.length-x)));\\n            if(min > avg ){\\n                min=avg;\\n                ans=y;\\n            }\\n        }\\n        currSum+=sum;\\n        sum=0;\\n\\n        if(min>currSum/nums.length) ans=y;\\n\\n\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n\\n        long min=Long.MAX_VALUE;\\n\\n        long sum = 0L;\\n\\n        for(int y : nums) sum+=y;\\n\\n        int x=0;\\n        long currSum=0;\\n        int ans=0;\\n        int y=0;\\n        if(sum==0) return 0;\\n\\n\\n        for(; y<nums.length-1 ; y++){\\n            x++;\\n            currSum+=nums[y];\\n            sum-=nums[y];\\n            long avg=Math.abs(((long)currSum/x) - ((long)sum/(nums.length-x)));\\n            if(min > avg ){\\n                min=avg;\\n                ans=y;\\n            }\\n        }\\n        currSum+=sum;\\n        sum=0;\\n\\n        if(min>currSum/nums.length) ans=y;\\n\\n\\n\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877620,
                "title": "c-easy-solution-o-n",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\no(n)\\n\\n- Space complexity:\\no(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans;\\n        int c_min = INT_MAX;\\n        long long int avg = 0;\\n        if(nums.size() == 1) return 0;\\n        long long int total = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            total += nums[i];\\n        }\\n        for(int i = 0; i<nums.size(); i++){\\n            avg += nums[i];\\n           long long int c_avg = 0;\\n            c_avg = total - avg;\\n            if(nums.size()-1-i != 0)\\n            c_avg = c_avg/(nums.size()-1-i);\\n            else c_avg = 0;\\n            int aavg = avg/(i+1);\\n            if(abs(c_avg - aavg) < c_min){\\n                c_min = abs(c_avg-aavg);\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int ans;\\n        int c_min = INT_MAX;\\n        long long int avg = 0;\\n        if(nums.size() == 1) return 0;\\n        long long int total = 0;\\n        for(int i = 0; i<nums.size(); i++){\\n            total += nums[i];\\n        }\\n        for(int i = 0; i<nums.size(); i++){\\n            avg += nums[i];\\n           long long int c_avg = 0;\\n            c_avg = total - avg;\\n            if(nums.size()-1-i != 0)\\n            c_avg = c_avg/(nums.size()-1-i);\\n            else c_avg = 0;\\n            int aavg = avg/(i+1);\\n            if(abs(c_avg - aavg) < c_min){\\n                c_min = abs(c_avg-aavg);\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877491,
                "title": "simple-prefix-sum-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long> pref(n+1,0);\\n        for(int i=1;i<=n;i++){\\n            pref[i] = pref[i-1] + nums[i-1];\\n        }\\n        int ans = INT_MAX;\\n        int index = 0;\\n        for(int i = 1;i<=n;i++){\\n            long long temp =(long long) abs(((pref[i]-pref[0])/(i)) - ((pref[n]-pref[i])/(n-i==0?1:n-i)));\\n            cout<<temp<<endl;\\n            if(temp<ans){\\n                ans = temp;\\n                index=i-1;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long> pref(n+1,0);\\n        for(int i=1;i<=n;i++){\\n            pref[i] = pref[i-1] + nums[i-1];\\n        }\\n        int ans = INT_MAX;\\n        int index = 0;\\n        for(int i = 1;i<=n;i++){\\n            long long temp =(long long) abs(((pref[i]-pref[0])/(i)) - ((pref[n]-pref[i])/(n-i==0?1:n-i)));\\n            cout<<temp<<endl;\\n            if(temp<ans){\\n                ans = temp;\\n                index=i-1;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2877488,
                "title": "minimum-average-difference-96-81-of-c-with-comments",
                "content": "**Intuition:** We just have to take average difference and return the index giving minimum average difference.\\n\\n**Approach:**\\n1) Take out` total `which will be sum of all n elements and `sum` which will be the sum till ith index.\\n2) Calculate the the average till ith index and average till (n-1-i) th index.\\n3) Now take absolute diff btw the average till ith index and average till (n-1-i) th index  and keep tracking the index giving minimum diff.\\n4) Return the index giving minimum diff.\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       \\n\\t   //total will store the sum of all the elements of nums\\n        long long total=0; \\n\\t\\t//sum will store the sum upto ith index\\n        long long sum=0;   \\n\\t   // mini stores the minimum average difference\\n        long long mini=INT_MAX; \\n\\t\\t//ans will store the index of minimum average difference\\n        int ans=0; \\n        \\n        //finding the sum of all the elements of nums\\n        for(int i=0;i<nums.size();i++){\\n            total+=nums[i];\\n        }\\n        \\n        for(int i=0;i<nums.size();i++){   \\n            sum+=nums[i];\\n            long long t=total-sum;\\n            long long temp=nums.size()-i-1; //number of elements in the\\n\\t\\t\\t// last n - i - 1 elements\\n            int avg=0;\\n            if(temp==0){\\n                avg=sum/(i+1); // average of the first i + 1 elements of nums\\n            }\\n            else{\\n            //avg will store the absolute difference between the average of\\n\\t\\t\\t//the first i + 1 elements of nums and the average of the\\n\\t\\t\\t//last n - i - 1 elements\\n               avg=(abs(sum/(i+1) - (t/temp)));\\n            }\\n            \\n            //if mini is greater than the avg then insert avg in mini and \\n\\t\\t\\t//store the index in ans\\n            if(mini>avg){\\n                mini=avg;\\n                ans=i;\\n            }\\n        }\\n        \\n        //returns the index of minimum average difference\\n        return ans;\\n    }\\n};\\n\\n```\\n\\n**Time Complexity = O(n)\\nSpace Complexity = O(1)**\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       \\n\\t   //total will store the sum of all the elements of nums\\n        long long total=0; \\n\\t\\t//sum will store the sum upto ith index\\n        long long sum=0;   \\n\\t   // mini stores the minimum average difference\\n        long long mini=INT_MAX; \\n\\t\\t//ans will store the index of minimum average difference\\n        int ans=0; \\n        \\n        //finding the sum of all the elements of nums\\n        for(int i=0;i<nums.size();i++){\\n            total+=nums[i];\\n        }\\n        \\n        for(int i=0;i<nums.size();i++){   \\n            sum+=nums[i];\\n            long long t=total-sum;\\n            long long temp=nums.size()-i-1; //number of elements in the\\n\\t\\t\\t// last n - i - 1 elements\\n            int avg=0;\\n            if(temp==0){\\n                avg=sum/(i+1); // average of the first i + 1 elements of nums\\n            }\\n            else{\\n            //avg will store the absolute difference between the average of\\n\\t\\t\\t//the first i + 1 elements of nums and the average of the\\n\\t\\t\\t//last n - i - 1 elements\\n               avg=(abs(sum/(i+1) - (t/temp)));\\n            }\\n            \\n            //if mini is greater than the avg then insert avg in mini and \\n\\t\\t\\t//store the index in ans\\n            if(mini>avg){\\n                mini=avg;\\n                ans=i;\\n            }\\n        }\\n        \\n        //returns the index of minimum average difference\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877399,
                "title": "almost-1-hr-utilised-java-solution",
                "content": "# class Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        long avg=0,rsum=0,lsum=0,min=Integer.MAX_VALUE;\\n        int indx=0;\\n        int c=1;\\n       for(int i=0;i<nums.length-1;i++)\\n       {\\n           lsum+=nums[i];\\n           rsum=(sum-lsum)/((nums.length)-(i+1));\\n           avg=Math.abs((lsum/c)-rsum);\\n           if(avg<min)\\n           {\\n               min=avg;\\n               indx=i;\\n           }\\n           c++;\\n       }\\n        avg=Math.abs(sum/nums.length);\\n        if(avg<min)\\n        {\\n            indx=nums.length-1;\\n        }\\n        return indx;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "class Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            sum+=nums[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2877293,
                "title": "java-solution-easy-prefix-sum",
                "content": "!!!!!!!! PLEASE UPVOTE IF YOU LIKE THE SOLUTION !!!!!!!!\\n\\nRuntime: 24 ms, faster than 70.09% of Java online submissions for Minimum Average Difference.\\nMemory Usage: 74.9 MB, less than 61.35% of Java online submissions for Minimum Average Difference.\\nNext challenges:\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long sumn=0;\\n        long suml=0;\\n        int ans = -1;\\n        long avg=Integer.MAX_VALUE;\\n\\t\\t\\n        for(int i=0; i<n; i++){\\n            sumn = sumn+nums[i];\\n        }\\n        \\n        for(int i=0; i<n; i++){\\n            suml=suml+nums[i];\\n            long sumr=sumn-suml;\\n            long avl=suml/(i+1);\\n            long avr=0;\\n            if(i!=n-1){\\n            avr=sumr/(n-i-1);\\n            }\\n            long curr_avg=Math.abs(avl-avr);\\n            \\n            if(curr_avg<avg){\\n                avg=curr_avg;\\n                ans=i;\\n            }     \\n        }\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long sumn=0;\\n        long suml=0;\\n        int ans = -1;\\n        long avg=Integer.MAX_VALUE;\\n\\t\\t\\n        for(int i=0; i<n; i++){\\n            sumn = sumn+nums[i];\\n        }\\n        \\n        for(int i=0; i<n; i++){\\n            suml=suml+nums[i];\\n            long sumr=sumn-suml;\\n            long avl=suml/(i+1);\\n            long avr=0;\\n            if(i!=n-1){\\n            avr=sumr/(n-i-1);\\n            }\\n            long curr_avg=Math.abs(avl-avr);\\n            \\n            if(curr_avg<avg){\\n                avg=curr_avg;\\n                ans=i;\\n            }     \\n        }\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877266,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1;\\n        int minDiff = Integer.MAX_VALUE;\\n        long pSum =0;\\n        long totalSum =0;\\n        \\n        for(int num:nums)\\n            totalSum += num;  // total sum of  nums\\n            \\n            for(int i=0;i<n;i++){\\n                pSum += nums[i];     // left sum \\n                \\n                long leftAvg = pSum/(i+1);\\n                long rightAvg = (totalSum - pSum);       // right sum  = totalsum-leftsum\\n                \\n                if(i != n-1){\\n                    rightAvg /= (n-i-1);\\n                }\\n            \\n                int diff = (int)Math.abs(leftAvg - rightAvg);\\n                if(diff<minDiff){\\n                    ans = i;\\n                    minDiff = diff;\\n                }\\n            }\\n        \\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1;\\n        int minDiff = Integer.MAX_VALUE;\\n        long pSum =0;\\n        long totalSum =0;\\n        \\n        for(int num:nums)\\n            totalSum += num;  // total sum of  nums\\n            \\n            for(int i=0;i<n;i++){\\n                pSum += nums[i];     // left sum \\n                \\n                long leftAvg = pSum/(i+1);\\n                long rightAvg = (totalSum - pSum);       // right sum  = totalsum-leftsum\\n                \\n                if(i != n-1){\\n                    rightAvg /= (n-i-1);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2877089,
                "title": "simple-c-solution-easy-to-understand",
                "content": "\\n\\n**Solution:**\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        // find the sum of all elements in an array\\n\\n        long long int totalSum = 0;\\n\\n        for(int i = 0; i<nums.size(); i++)\\n        {\\n            totalSum +=nums[i];\\n        }\\n\\n        // Declare the required variables\\n        long long int firstSum = 0;\\n        long long int secondSum = 0;\\n        long long int averageFirst = 0;\\n        long long int averageSecond = 0;\\n\\n        int ans  = 0;\\n        long long int mini = INT_MAX;\\n\\n        // Now Iterate through the loop\\n\\n        int n = nums.size();\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            firstSum +=nums[i];\\n\\n            secondSum = totalSum - firstSum;\\n\\n            averageFirst = firstSum/(i+1);\\n            \\n\\n            //Check for the second average\\n            \\n            if(secondSum!=0)\\n                averageSecond = secondSum/(n-i-1);\\n            else\\n                averageSecond = 0;\\n\\n            // Calculate the absolute difference\\n\\n            int temp = abs(averageFirst-averageSecond); \\n\\n            // Check for the minimum difference\\n\\n            if(mini > temp)\\n            {\\n                mini = temp;\\n                ans = i;\\n            }       \\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n-----\\n**Analysis:**\\n\\n**Time Complexity:** ```O(n)```\\n**Space Complexity:** ```O(1)```\\n\\n----\\n\\nIf this solution helps you then pleae ```UPVOTE```\\n\\ntill then **Keep learning, Keep growing !!!**\\n\\n\\n**Thank You!!**\\n\\n---\\n\\n",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        // find the sum of all elements in an array\\n\\n        long long int totalSum = 0;\\n\\n        for(int i = 0; i<nums.size(); i++)\\n        {\\n            totalSum +=nums[i];\\n        }\\n\\n        // Declare the required variables\\n        long long int firstSum = 0;\\n        long long int secondSum = 0;\\n        long long int averageFirst = 0;\\n        long long int averageSecond = 0;\\n\\n        int ans  = 0;\\n        long long int mini = INT_MAX;\\n\\n        // Now Iterate through the loop\\n\\n        int n = nums.size();\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            firstSum +=nums[i];\\n\\n            secondSum = totalSum - firstSum;\\n\\n            averageFirst = firstSum/(i+1);\\n            \\n\\n            //Check for the second average\\n            \\n            if(secondSum!=0)\\n                averageSecond = secondSum/(n-i-1);\\n            else\\n                averageSecond = 0;\\n\\n            // Calculate the absolute difference\\n\\n            int temp = abs(averageFirst-averageSecond); \\n\\n            // Check for the minimum difference\\n\\n            if(mini > temp)\\n            {\\n                mini = temp;\\n                ans = i;\\n            }       \\n        }\\n        return ans;\\n    }\\n};\\n```\n```O(n)```\n```O(1)```\n```UPVOTE```",
                "codeTag": "Java"
            },
            {
                "id": 2877052,
                "title": "java-tc-o-n-sc-o-1-clean-code",
                "content": "Please upvote if helpful :D | Happy coding :)\\n\\n```\\n//TC : O(n)\\n//SC : O(1)\\npublic int minimumAverageDifference(int[] nums) {\\n        \\n        if(nums.length == 1){\\n            return 0;\\n        }\\n        \\n        int minAvg = Integer.MAX_VALUE;\\n        int indexAvg = 0;\\n        \\n        long firstSum = 0; //Take sum data type Long to avoid sum overflow\\n        int firstAvg = 0;\\n        \\n        long lastSum = 0;\\n        int lastAvg = 0;\\n        \\n        int n = nums.length;\\n        \\n        int ans = 0;\\n        \\n        for(int i = 0; i < n; i++){\\n            lastSum += nums[i];\\n            \\n        }\\n        \\n        for(int i = 0; i < n; i++){\\n            \\n            firstSum += nums[i];\\n            lastSum -= nums[i];\\n            \\n            firstAvg = Math.round(firstSum / (i+1)); \\n            \\n            if((n - i - 1) > 0){\\n                lastAvg = Math.round(lastSum / (n - i - 1)); \\n            \\n            }else{\\n                lastAvg = 0;\\n            }\\n            \\n            indexAvg = Math.abs(firstAvg - lastAvg);\\n            \\n            if(indexAvg < minAvg){\\n                minAvg = indexAvg;\\n                ans = i;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//TC : O(n)\\n//SC : O(1)\\npublic int minimumAverageDifference(int[] nums) {\\n        \\n        if(nums.length == 1){\\n            return 0;\\n        }\\n        \\n        int minAvg = Integer.MAX_VALUE;\\n        int indexAvg = 0;\\n        \\n        long firstSum = 0; //Take sum data type Long to avoid sum overflow\\n        int firstAvg = 0;\\n        \\n        long lastSum = 0;\\n        int lastAvg = 0;\\n        \\n        int n = nums.length;\\n        \\n        int ans = 0;\\n        \\n        for(int i = 0; i < n; i++){\\n            lastSum += nums[i];\\n            \\n        }\\n        \\n        for(int i = 0; i < n; i++){\\n            \\n            firstSum += nums[i];\\n            lastSum -= nums[i];\\n            \\n            firstAvg = Math.round(firstSum / (i+1)); \\n            \\n            if((n - i - 1) > 0){\\n                lastAvg = Math.round(lastSum / (n - i - 1)); \\n            \\n            }else{\\n                lastAvg = 0;\\n            }\\n            \\n            indexAvg = Math.abs(firstAvg - lastAvg);\\n            \\n            if(indexAvg < minAvg){\\n                minAvg = indexAvg;\\n                ans = i;\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2876975,
                "title": "simple-prefix-sum-sol",
                "content": "# Intuition\\nsimple prefix sum problem\\n\\n# Approach\\nJust prefix sum it \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {   int n=nums.size();\\n        long long a[n],sum=0,ans=INT_MAX,ai=-1;\\n        a[0]=nums[0];\\n        sum=a[0];\\n        for(int i=1;i<n;i++)\\n         {a[i]=a[i-1]+nums[i];sum+=nums[i];}\\n        for(int i=0;i<n;i++)\\n        { long long avg;\\n          if(i==n-1)\\n          avg=abs(a[i]/(i+1));\\n          else\\n          avg=abs(a[i]/(i+1)-(sum-a[i])/(n-i-1));\\n          if(avg<ans)\\n          {ans=avg;ai=i;}\\n        }\\n    return ai;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {   int n=nums.size();\\n        long long a[n],sum=0,ans=INT_MAX,ai=-1;\\n        a[0]=nums[0];\\n        sum=a[0];\\n        for(int i=1;i<n;i++)\\n         {a[i]=a[i-1]+nums[i];sum+=nums[i];}\\n        for(int i=0;i<n;i++)\\n        { long long avg;\\n          if(i==n-1)\\n          avg=abs(a[i]/(i+1));\\n          else\\n          avg=abs(a[i]/(i+1)-(sum-a[i])/(n-i-1));\\n          if(avg<ans)\\n          {ans=avg;ai=i;}\\n        }\\n    return ai;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876878,
                "title": "typescript-javascript-100-faster-memory-efficient",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction minimumAverageDifference(nums: number[]): number {\\n    let ans: number, minDiff = Infinity, runningSum = 0;\\n\\n    const total = nums.reduce((sum, n) => sum + n, 0);\\n\\n    for (let i = 0, n = nums.length; i < n; i++) {\\n        runningSum += nums[i];\\n        \\n        const rightSum = total - runningSum;\\n        const leftAvg = Math.floor(runningSum / (i + 1));\\n        const rightAvg = Math.floor(rightSum / ((i === n - 1) ? 1 : n - i - 1));\\n        const diff = Math.abs(leftAvg - rightAvg);\\n\\n        if (diff < minDiff) {\\n            minDiff = diff;\\n            ans = i;\\n        }\\n    }\\n\\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nfunction minimumAverageDifference(nums: number[]): number {\\n    let ans: number, minDiff = Infinity, runningSum = 0;\\n\\n    const total = nums.reduce((sum, n) => sum + n, 0);\\n\\n    for (let i = 0, n = nums.length; i < n; i++) {\\n        runningSum += nums[i];\\n        \\n        const rightSum = total - runningSum;\\n        const leftAvg = Math.floor(runningSum / (i + 1));\\n        const rightAvg = Math.floor(rightSum / ((i === n - 1) ? 1 : n - i - 1));\\n        const diff = Math.abs(leftAvg - rightAvg);\\n\\n        if (diff < minDiff) {\\n            minDiff = diff;\\n            ans = i;\\n        }\\n    }\\n\\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2876834,
                "title": "swift-solution",
                "content": "```\\nimport Foundation\\n\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        var len = nums.count\\n        var res = 0\\n        var min = Int.max\\n        var sum = 0\\n        var leftSum = 0\\n        var rightSum = 0\\n        for num in nums {\\n            sum += num\\n        }\\n        for i in 0..<len {\\n            leftSum += nums[i]\\n            rightSum = sum - leftSum\\n            var diff = abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len - i - 1)))\\n            if diff < min {\\n                min = diff\\n                res = i\\n            }\\n        }\\n        return res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nimport Foundation\\n\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        var len = nums.count\\n        var res = 0\\n        var min = Int.max\\n        var sum = 0\\n        var leftSum = 0\\n        var rightSum = 0\\n        for num in nums {\\n            sum += num\\n        }\\n        for i in 0..<len {\\n            leftSum += nums[i]\\n            rightSum = sum - leftSum\\n            var diff = abs(leftSum / (i + 1) - (len - i == 1 ? 0 : rightSum / (len - i - 1)))\\n            if diff < min {\\n                min = diff\\n                res = i\\n            }\\n        }\\n        return res\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876833,
                "title": "c-prefix-sum-does-everything-we-need-explaination-with-comments",
                "content": "```\\n// I prefer not to go gentle ~Pratham Nikam\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        // size of nums vector\\n        int n = nums.size();\\n        \\n        // data-structure to store prefix-sum\\n        vector<long long> prefixsum(n,0);\\n        \\n        // initializing prefix sum vector\\n        prefixsum[0] = nums[0];\\n        \\n        \\n        // storing prefix-sum\\n        for(int i=1;i<n;i++){\\n            prefixsum[i] = nums[i] + prefixsum[i-1];\\n        }\\n        \\n        // variable keeping track of minimum average differnece\\n        int res = INT_MAX;\\n        \\n        // variable to return index of minimum average differnece\\n        int resindex = 0;\\n        \\n        // I declared this two variables to obtain the sum of last n-i-1 elements from last\\n        int a,b;\\n        \\n        // Find answer manually by going through all indics\\n        for(int i=0;i<n;i++){\\n            if(i == n-1)\\n                a = 0;\\n            else\\n                a = (prefixsum[n-1]-prefixsum[i])/(n-i-1) ;\\n            b = (prefixsum[i]/(i+1));\\n            int diff = a - b;\\n            \\n            if(diff < 0) diff *= -1;\\n            \\n            if(diff < res){\\n                resindex = i;\\n                res = min(res,diff);\\n            }\\n        }\\n        \\n        // Return the index of our answer\\n        return resindex;\\n    }\\n};\\n```\\n**Do share feedbacks and do upvote if found it helpful.\\nThanks!!!**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\n// I prefer not to go gentle ~Pratham Nikam\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        // size of nums vector\\n        int n = nums.size();\\n        \\n        // data-structure to store prefix-sum\\n        vector<long long> prefixsum(n,0);\\n        \\n        // initializing prefix sum vector\\n        prefixsum[0] = nums[0];\\n        \\n        \\n        // storing prefix-sum\\n        for(int i=1;i<n;i++){\\n            prefixsum[i] = nums[i] + prefixsum[i-1];\\n        }\\n        \\n        // variable keeping track of minimum average differnece\\n        int res = INT_MAX;\\n        \\n        // variable to return index of minimum average differnece\\n        int resindex = 0;\\n        \\n        // I declared this two variables to obtain the sum of last n-i-1 elements from last\\n        int a,b;\\n        \\n        // Find answer manually by going through all indics\\n        for(int i=0;i<n;i++){\\n            if(i == n-1)\\n                a = 0;\\n            else\\n                a = (prefixsum[n-1]-prefixsum[i])/(n-i-1) ;\\n            b = (prefixsum[i]/(i+1));\\n            int diff = a - b;\\n            \\n            if(diff < 0) diff *= -1;\\n            \\n            if(diff < res){\\n                resindex = i;\\n                res = min(res,diff);\\n            }\\n        }\\n        \\n        // Return the index of our answer\\n        return resindex;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876802,
                "title": "java-o-n-o-1-space-beats-99-78",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        if(nums.length==1){\\n            return 0;\\n        }\\n        long comp_sum=0;\\n        int count=1;\\n        long tempSum=0;\\n        long remSum=0;\\n        long frst=0;\\n        long sec=0;\\n        long result=0;\\n        long min = Long.MAX_VALUE;\\n        int index=-1;\\n        for(int i=0;i<nums.length;i++){\\n            comp_sum+=nums[i];\\n        }\\n        \\n        for(int i=0;i<nums.length;i++){\\n            tempSum+=nums[i];\\n            remSum=comp_sum-tempSum;\\n            frst=tempSum/count;\\n            if(i==nums.length-1){\\n                sec=0;\\n            }else{\\n            sec=remSum/(nums.length-count);\\n            }\\n            result=Math.abs(frst-sec);\\n            if(result<min){\\n                min=result;\\n                index=i;\\n            }\\n            count=count+1;\\n        }\\n        return index;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        if(nums.length==1){\\n            return 0;\\n        }\\n        long comp_sum=0;\\n        int count=1;\\n        long tempSum=0;\\n        long remSum=0;\\n        long frst=0;\\n        long sec=0;\\n        long result=0;\\n        long min = Long.MAX_VALUE;\\n        int index=-1;\\n        for(int i=0;i<nums.length;i++){\\n            comp_sum+=nums[i];\\n        }\\n        \\n        for(int i=0;i<nums.length;i++){\\n            tempSum+=nums[i];\\n            remSum=comp_sum-tempSum;\\n            frst=tempSum/count;\\n            if(i==nums.length-1){\\n                sec=0;\\n            }else{\\n            sec=remSum/(nums.length-count);\\n            }\\n            result=Math.abs(frst-sec);\\n            if(result<min){\\n                min=result;\\n                index=i;\\n            }\\n            count=count+1;\\n        }\\n        return index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876584,
                "title": "95-acceptance-simple-c",
                "content": "If you like the solution please do upvote\\n```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    int minimumAverageDifference(vector<int>& arr) {\\n        ll tSum = 0;\\n        for(auto it : arr) tSum += it;\\n        ll currSum = 0;\\n        ll ansIdx = INT_MAX, ansAvg = INT_MAX;\\n        for(int i = 0;i<arr.size();i++){\\n            ll leftSum = 0, rightSum = 0;\\n            currSum += arr[i];\\n            leftSum = currSum;\\n            rightSum = tSum-currSum;\\n            ll leftAvg, rightAvg;\\n            leftAvg = leftSum/(i+1);\\n            if(i == arr.size()-1) rightAvg = 0;\\n            else rightAvg = rightSum/(arr.size()-(i+1));\\n            \\n            ll avgDiff = abs(leftAvg - rightAvg);\\n            if(avgDiff < ansAvg){\\n                ansAvg = avgDiff;\\n                ansIdx = i;\\n            }\\n        }\\n        return ansIdx;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    int minimumAverageDifference(vector<int>& arr) {\\n        ll tSum = 0;\\n        for(auto it : arr) tSum += it;\\n        ll currSum = 0;\\n        ll ansIdx = INT_MAX, ansAvg = INT_MAX;\\n        for(int i = 0;i<arr.size();i++){\\n            ll leftSum = 0, rightSum = 0;\\n            currSum += arr[i];\\n            leftSum = currSum;\\n            rightSum = tSum-currSum;\\n            ll leftAvg, rightAvg;\\n            leftAvg = leftSum/(i+1);\\n            if(i == arr.size()-1) rightAvg = 0;\\n            else rightAvg = rightSum/(arr.size()-(i+1));\\n            \\n            ll avgDiff = abs(leftAvg - rightAvg);\\n            if(avgDiff < ansAvg){\\n                ansAvg = avgDiff;\\n                ansIdx = i;\\n            }\\n        }\\n        return ansIdx;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876577,
                "title": "prefix-sum-c-easy-solution-o-1-space",
                "content": "```\\nint minimumAverageDifference(vector<int>& nums) {\\n        long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        long long ans=INT_MAX;\\n        int n=nums.size();\\n        int index=0;\\n        long long currsum=0;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            currsum+=nums[i];\\n            long long rest=sum-currsum;\\n            long long avgx=currsum/(i+1);\\n            long long avgy=rest/(n-(i+1));\\n            if(abs(avgx-avgy)<ans)\\n            {\\n                ans=abs(avgx-avgy);\\n                index=i;\\n            }\\n        }\\n        if(ans>sum/n)\\n            index=n-1;\\n        \\n        return index;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nint minimumAverageDifference(vector<int>& nums) {\\n        long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        long long ans=INT_MAX;\\n        int n=nums.size();\\n        int index=0;\\n        long long currsum=0;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            currsum+=nums[i];\\n            long long rest=sum-currsum;\\n            long long avgx=currsum/(i+1);\\n            long long avgy=rest/(n-(i+1));\\n            if(abs(avgx-avgy)<ans)\\n            {\\n                ans=abs(avgx-avgy);\\n                index=i;\\n            }\\n        }\\n        if(ans>sum/n)\\n            index=n-1;\\n        \\n        return index;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2876534,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int  ans=INT_MAX;\\n        int n=nums.size();\\n        long long sum=0;\\n        for(int i=0;i<n;i++)\\n        sum+=nums[i];\\n        long long temp=0;\\n        int idx=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            temp+=nums[i];\\n            sum-=nums[i];\\n            int p;\\n            if(n-1-i!=0)\\n            p=abs(temp/(i+1)-sum/(n-1-i));\\n            else if(n!=1)\\n            p=temp/(i+1);\\n            if(p<ans)\\n            {\\n                ans=p;\\n                idx=i;\\n\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int  ans=INT_MAX;\\n        int n=nums.size();\\n        long long sum=0;\\n        for(int i=0;i<n;i++)\\n        sum+=nums[i];\\n        long long temp=0;\\n        int idx=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            temp+=nums[i];\\n            sum-=nums[i];\\n            int p;\\n            if(n-1-i!=0)\\n            p=abs(temp/(i+1)-sum/(n-1-i));\\n            else if(n!=1)\\n            p=temp/(i+1);\\n            if(p<ans)\\n            {\\n                ans=p;\\n                idx=i;\\n\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876499,
                "title": "java-prefix-sum",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse idea of prefix sum.\\n\\n# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long leftSum = 0, rightSum = Arrays.stream(nums).asLongStream().sum();\\n        int minAverageDifference = Integer.MAX_VALUE;\\n        int targetIndex = 0;\\n        for (int i = 0; i < n; ++i) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n\\n            // be aware of division by zero exception here.\\n            int currDifference = (int)(Math.abs(leftSum / (i + 1) - rightSum / Math.max((n - (i + 1)), 1) ));\\n            if (currDifference < minAverageDifference) {\\n                minAverageDifference = currDifference;\\n                targetIndex = i;\\n            }\\n        }\\n        return targetIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        long leftSum = 0, rightSum = Arrays.stream(nums).asLongStream().sum();\\n        int minAverageDifference = Integer.MAX_VALUE;\\n        int targetIndex = 0;\\n        for (int i = 0; i < n; ++i) {\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n\\n            // be aware of division by zero exception here.\\n            int currDifference = (int)(Math.abs(leftSum / (i + 1) - rightSum / Math.max((n - (i + 1)), 1) ));\\n            if (currDifference < minAverageDifference) {\\n                minAverageDifference = currDifference;\\n                targetIndex = i;\\n            }\\n        }\\n        return targetIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876481,
                "title": "easy-code-less-variables-can-be-optimized-further",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRecreated the equation first.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIf count is 1 returned zero directly.\\nIn the loop whenever the value zero appeared just returned it directly.\\nUsed the same array to store the value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MinimumAverageDifference(int[] nums) \\n    {\\n        int count = nums.Length;\\n        if(count == 1)\\n            return 0;\\n        long leftSum = 0;\\n        long totalsum = nums.Sum(x=>(long)x);\\n        for(int i =0; i< count; i++)\\n        {\\n            leftSum += nums[i];\\n            if(i != nums.Length -1)\\n            {\\n                nums[i] = Convert.ToInt32(Math.Abs((leftSum / (i + 1)) - (totalsum - leftSum) / (nums.Length - (i + 1))));\\n                if(nums[i]  == 0)\\n                {\\n                    return i;\\n                }\\n            }\\n            else\\n            {\\n                nums[i] = Convert.ToInt32(Math.Abs(leftSum /(i+1)));\\n            }\\n        }\\n\\n        long storemin = nums.Min();\\n        return Array.FindIndex(nums, x => x == storemin);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MinimumAverageDifference(int[] nums) \\n    {\\n        int count = nums.Length;\\n        if(count == 1)\\n            return 0;\\n        long leftSum = 0;\\n        long totalsum = nums.Sum(x=>(long)x);\\n        for(int i =0; i< count; i++)\\n        {\\n            leftSum += nums[i];\\n            if(i != nums.Length -1)\\n            {\\n                nums[i] = Convert.ToInt32(Math.Abs((leftSum / (i + 1)) - (totalsum - leftSum) / (nums.Length - (i + 1))));\\n                if(nums[i]  == 0)\\n                {\\n                    return i;\\n                }\\n            }\\n            else\\n            {\\n                nums[i] = Convert.ToInt32(Math.Abs(leftSum /(i+1)));\\n            }\\n        }\\n\\n        long storemin = nums.Min();\\n        return Array.FindIndex(nums, x => x == storemin);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876465,
                "title": "prefix-sum-c-easy-to-understand",
                "content": "Please Upvote if you like the solution!\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long int> pre(n);\\n        pre[0] = nums[0];\\n        for(int i=1;i<n;i++) {\\n            pre[i] = nums[i] + pre[i-1];\\n        }\\n        long long int mini = INT_MAX , ans = 0,tot = pre[n-1];\\n        for(int i=0;i<n;i++) {\\n            long long int f = pre[i]/(i+1);\\n            long long int s = 0;\\n            if(i != (n-1)) s = (tot - pre[i])/(n-i-1);\\n            \\n            long long int diff = abs(f-s);\\n            if(diff < mini) {\\n                ans = i;\\n                mini = diff;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long int> pre(n);\\n        pre[0] = nums[0];\\n        for(int i=1;i<n;i++) {\\n            pre[i] = nums[i] + pre[i-1];\\n        }\\n        long long int mini = INT_MAX , ans = 0,tot = pre[n-1];\\n        for(int i=0;i<n;i++) {\\n            long long int f = pre[i]/(i+1);\\n            long long int s = 0;\\n            if(i != (n-1)) s = (tot - pre[i])/(n-i-1);\\n            \\n            long long int diff = abs(f-s);\\n            if(diff < mini) {\\n                ans = i;\\n                mini = diff;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876463,
                "title": "cpp-easy-to-understand-o-n",
                "content": "\\n# Approach \\n- Prefix Sum\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long min1(long a,long b)\\n    {\\n        return a>b?b:a;\\n    }\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int mn=INT_MAX;\\n        int n=nums.size();\\n        vector<int> v;\\n        vector<long> sm(n+1,0);\\n        sm[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n            sm[i]=sm[i-1]+nums[i];\\n        for(int i=0;i<n;i++){\\n            if(i!=n-1)\\n                mn=min1(mn,abs(sm[i]/(i+1)-(sm[n-1]-sm[i])/(n-i-1)));\\n            else\\n                mn=min1(mn,sm[n-1]/n);\\n            v.push_back(mn);\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            if(v[i]==mn)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long min1(long a,long b)\\n    {\\n        return a>b?b:a;\\n    }\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int mn=INT_MAX;\\n        int n=nums.size();\\n        vector<int> v;\\n        vector<long> sm(n+1,0);\\n        sm[0]=nums[0];\\n        for(int i=1;i<nums.size();i++)\\n            sm[i]=sm[i-1]+nums[i];\\n        for(int i=0;i<n;i++){\\n            if(i!=n-1)\\n                mn=min1(mn,abs(sm[i]/(i+1)-(sm[n-1]-sm[i])/(n-i-1)));\\n            else\\n                mn=min1(mn,sm[n-1]/n);\\n            v.push_back(mn);\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            if(v[i]==mn)\\n                return i;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876454,
                "title": "c-easy-solution-sliding-window",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n \\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long long int sum1=nums[0],sum2=0;\\n        for(long long int i=1;i<nums.size();i++)\\n        sum2+=nums[i];\\n\\n        long long int av1=sum1, av2,fi=0;\\n        if(nums.size()-1==0)\\n        av2=0;\\n        else\\n        av2=sum2/(nums.size()-1);\\n        long long int mind=abs(av1-av2);\\n        long long int ans=mind;\\n        // cout<<mind<<endl;\\n        for(long long int i=1;i<nums.size();i++)\\n        {\\n            sum1+=nums[i];\\n            sum2-=nums[i];\\n\\n            av1=sum1/(i+1);\\n            if(nums.size()-i-1==0)\\n            av2=0;\\n            else\\n            av2=sum2/(nums.size()-i-1);\\n\\n            // cout<<av1<<\" \"<<av2<<endl;\\n            mind=abs(av1-av2);\\n            if(mind<ans)\\n            {\\n                ans=mind;\\n                fi=i;\\n            }\\n        }    \\n\\n        return fi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n \\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        long long int sum1=nums[0],sum2=0;\\n        for(long long int i=1;i<nums.size();i++)\\n        sum2+=nums[i];\\n\\n        long long int av1=sum1, av2,fi=0;\\n        if(nums.size()-1==0)\\n        av2=0;\\n        else\\n        av2=sum2/(nums.size()-1);\\n        long long int mind=abs(av1-av2);\\n        long long int ans=mind;\\n        // cout<<mind<<endl;\\n        for(long long int i=1;i<nums.size();i++)\\n        {\\n            sum1+=nums[i];\\n            sum2-=nums[i];\\n\\n            av1=sum1/(i+1);\\n            if(nums.size()-i-1==0)\\n            av2=0;\\n            else\\n            av2=sum2/(nums.size()-i-1);\\n\\n            // cout<<av1<<\" \"<<av2<<endl;\\n            mind=abs(av1-av2);\\n            if(mind<ans)\\n            {\\n                ans=mind;\\n                fi=i;\\n            }\\n        }    \\n\\n        return fi;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2876384,
                "title": "c-easy-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int sum=0,sum2=0,n=nums.size(),avg=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n        }\\n        \\n        long long int i=0,x=INT_MAX,index=-1;\\n        \\n        while(i<n){\\n            sum2+=nums[i];\\n            \\n            int y=sum2/(i+1);\\n            int z=(i+1)==n?0:(sum-sum2)/(n-i-1);\\n            \\n            avg=abs(y-z);\\n            \\n            if(avg<x){\\n                x=avg;\\n                index=i;\\n            }\\n            \\n            i++;\\n        }\\n        \\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long int sum=0,sum2=0,n=nums.size(),avg=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            sum+=nums[i];\\n        }\\n        \\n        long long int i=0,x=INT_MAX,index=-1;\\n        \\n        while(i<n){\\n            sum2+=nums[i];\\n            \\n            int y=sum2/(i+1);\\n            int z=(i+1)==n?0:(sum-sum2)/(n-i-1);\\n            \\n            avg=abs(y-z);\\n            \\n            if(avg<x){\\n                x=avg;\\n                index=i;\\n            }\\n            \\n            i++;\\n        }\\n        \\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876348,
                "title": "c-java-o-n-time-o-1-space-complexity-with-explanation",
                "content": "# \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\n```\\n//  if we already had the sum of all elements of the array, then we can subtract the left part\\'s sum from it to get the right part\\'s sum, thus we can discard the suffixSum array and use only prefixSum array with a totalSum variable.\\n\\n// But further we can notice, that while iterating on every index for breaking the nums array in two parts at that index, every time we only use the value at the current index i from the prefixSum array. Thus, instead of storing all prefix sums in an array, we can store the prefix sum till index i in a variable. So, we can also discard the prefixSum array and only use a currPrefixSum variable instead of it.\\n// Thus, instead of two arrays, we can use only two variables totalSum and currPrefixSum.\\n    \\n// Algorithm\\n// Initialize variables:\\n\\n// n, integer to store the number of elements in the array.\\n// minAvgDiff, initialized with a large integer value, stores the minimum average difference.\\n// totalSum, a variable to store the sum of all elements of the nums array.\\n// currPrefixSum, a variable to store the sum of all elements till the current index of the nums array.\\n// ans, integer to store the index where we found the minimum average difference.\\n// Iterate on the nums array and calculate totalSum.\\n\\n// Iterate over each index of the nums array:\\n\\n// At each index i, we add the current element in currPrefixSum, to get the sum of all elements of the nums array from index 0 to index i, and divide the sum by i + 1 to get the average of the left part of the array.\\n// Similarly, we can get the sum of elements from index i + 1 to n - 1 after subtracting the left part\\'s sum from the total sum of the array, and then divide it by n - i - 1 to get the average of the right part of the array.\\n// If the difference between the average of the left and right part of the array is smaller than minAvgDiff, then store this difference in minAvgDiff and the current index i in ans.\\n// Return ans.\\n    \\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1;\\n        int minAvgDiff = Integer.MAX_VALUE;\\n        long currPrefixSum = 0;\\n        \\n        // Get total sum of array.\\n        long totalSum = 0;\\n        for (int index = 0; index < n; ++index) {\\n            totalSum += nums[index];\\n        }\\n        \\n        for (int index = 0; index < n; ++index) {\\n            currPrefixSum += nums[index];\\n            \\n            // Calculate average of left part of array, index 0 to i.\\n            long leftPartAverage = currPrefixSum;\\n            leftPartAverage /= (index + 1);\\n            \\n            // Calculate average of right part of array, index i+1 to n-1.\\n            long rightPartAverage = totalSum - currPrefixSum;\\n            // If right part have 0 elements, then we don\\'t divide by 0.\\n            if (index != n - 1) {\\n                rightPartAverage /= (n - index - 1);\\n            }\\n            \\n            int currDifference = (int) Math.abs(leftPartAverage - rightPartAverage);\\n            // If current difference of averages is smaller,\\n            // then current index can be our answer.\\n            if (currDifference < minAvgDiff) {\\n                minAvgDiff = currDifference;\\n                ans = index;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\n//  if we already had the sum of all elements of the array, then we can subtract the left part\\'s sum from it to get the right part\\'s sum, thus we can discard the suffixSum array and use only prefixSum array with a totalSum variable.\\n\\n// But further we can notice, that while iterating on every index for breaking the nums array in two parts at that index, every time we only use the value at the current index i from the prefixSum array. Thus, instead of storing all prefix sums in an array, we can store the prefix sum till index i in a variable. So, we can also discard the prefixSum array and only use a currPrefixSum variable instead of it.\\n// Thus, instead of two arrays, we can use only two variables totalSum and currPrefixSum.\\n    \\n// Algorithm\\n// Initialize variables:\\n\\n// n, integer to store the number of elements in the array.\\n// minAvgDiff, initialized with a large integer value, stores the minimum average difference.\\n// totalSum, a variable to store the sum of all elements of the nums array.\\n// currPrefixSum, a variable to store the sum of all elements till the current index of the nums array.\\n// ans, integer to store the index where we found the minimum average difference.\\n// Iterate on the nums array and calculate totalSum.\\n\\n// Iterate over each index of the nums array:\\n\\n// At each index i, we add the current element in currPrefixSum, to get the sum of all elements of the nums array from index 0 to index i, and divide the sum by i + 1 to get the average of the left part of the array.\\n// Similarly, we can get the sum of elements from index i + 1 to n - 1 after subtracting the left part\\'s sum from the total sum of the array, and then divide it by n - i - 1 to get the average of the right part of the array.\\n// If the difference between the average of the left and right part of the array is smaller than minAvgDiff, then store this difference in minAvgDiff and the current index i in ans.\\n// Return ans.\\n    \\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int n = nums.length;\\n        int ans = -1;\\n        int minAvgDiff = Integer.MAX_VALUE;\\n        long currPrefixSum = 0;\\n        \\n        // Get total sum of array.\\n        long totalSum = 0;\\n        for (int index = 0; index < n; ++index) {\\n            totalSum += nums[index];\\n        }\\n        \\n        for (int index = 0; index < n; ++index) {\\n            currPrefixSum += nums[index];\\n            \\n            // Calculate average of left part of array, index 0 to i.\\n            long leftPartAverage = currPrefixSum;\\n            leftPartAverage /= (index + 1);\\n            \\n            // Calculate average of right part of array, index i+1 to n-1.\\n            long rightPartAverage = totalSum - currPrefixSum;\\n            // If right part have 0 elements, then we don\\'t divide by 0.\\n            if (index != n - 1) {\\n                rightPartAverage /= (n - index - 1);\\n            }\\n            \\n            int currDifference = (int) Math.abs(leftPartAverage - rightPartAverage);\\n            // If current difference of averages is smaller,\\n            // then current index can be our answer.\\n            if (currDifference < minAvgDiff) {\\n                minAvgDiff = currDifference;\\n                ans = index;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876302,
                "title": "c-solution",
                "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min=INT_MAX;\\n        long long int post=0;\\n        long long int pre=0;\\n        int ans=0;\\n        \\n        for(auto x: nums){\\n            post+=x;\\n        }\\n        for(int i=0;i<nums.size();i++){\\n            pre+=nums[i];\\n            post-=nums[i];\\n\\n            int a=pre/(i+1);\\n            int b = (i==nums.size()-1) ? 0 : post/(nums.size()-i-1);\\n            if(abs(a-b)<min){\\n                min=abs(a-b);\\n                ans=i;\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min=INT_MAX;\\n        long long int post=0;\\n        long long int pre=0;\\n        int ans=0;\\n        \\n        for(auto x: nums){\\n            post+=x;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2876199,
                "title": "python-simple-iterative-solution",
                "content": "# Approach\\n1) Calculate initial sum of all elements in array\\n2) On each iteration step calculate prefix and suffix (initila sum - prefix) and recalculate answer!\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first_half, second_half = 0, sum(nums)\\n        num_first_half = 0\\n        ans, min_ind = 1e18, 1e18\\n        for i in range(len(nums)):\\n            first_half += nums[i]\\n            num_first_half += 1\\n            if i < len(nums) - 1:\\n                carry = abs((first_half // num_first_half) - ((second_half - first_half)//(len(nums) - i - 1)))\\n            else:\\n                carry = abs(first_half // num_first_half)\\n            if carry < ans:\\n                ans = carry\\n                min_ind = i\\n        return min_ind    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        first_half, second_half = 0, sum(nums)\\n        num_first_half = 0\\n        ans, min_ind = 1e18, 1e18\\n        for i in range(len(nums)):\\n            first_half += nums[i]\\n            num_first_half += 1\\n            if i < len(nums) - 1:\\n                carry = abs((first_half // num_first_half) - ((second_half - first_half)//(len(nums) - i - 1)))\\n            else:\\n                carry = abs(first_half // num_first_half)\\n            if carry < ans:\\n                ans = carry\\n                min_ind = i\\n        return min_ind    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876188,
                "title": "javascript-solution",
                "content": "```\\nvar minimumAverageDifference = function(nums) {\\n    \\n    if (nums.length == 1) return 0;\\n    \\n    let mins = 100000 \\n    let resultIndex = 0 \\n    let leftTotal = 0;\\n    let rightTotal = nums.reduce((a,b)=>a + b);\\n    let numLength = nums.length;\\n    \\n    nums.forEach((data, index)=> {\\n        leftTotal += data;\\n        rightTotal -= data;\\n        let currentAverageDiff = Math.abs(Math.floor(leftTotal/(index+1)) - Math.floor(rightTotal/(numLength-index-1) || 0));\\n        if (currentAverageDiff < mins) {\\n            resultIndex = index;\\n            mins = currentAverageDiff;\\n        }\\n    });\\n    return resultIndex;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar minimumAverageDifference = function(nums) {\\n    \\n    if (nums.length == 1) return 0;\\n    \\n    let mins = 100000 \\n    let resultIndex = 0 \\n    let leftTotal = 0;\\n    let rightTotal = nums.reduce((a,b)=>a + b);\\n    let numLength = nums.length;\\n    \\n    nums.forEach((data, index)=> {\\n        leftTotal += data;\\n        rightTotal -= data;\\n        let currentAverageDiff = Math.abs(Math.floor(leftTotal/(index+1)) - Math.floor(rightTotal/(numLength-index-1) || 0));\\n        if (currentAverageDiff < mins) {\\n            resultIndex = index;\\n            mins = currentAverageDiff;\\n        }\\n    });\\n    return resultIndex;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2876105,
                "title": "simple-solution-in-c-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nFind the presum at each index.\\nFind the postsum at each index.\\n\\nFind diff of minimum of [presum[i]/(i+1) - postsum[i+1]/(n-i-1)].\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(2N) for presum and postsum\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#define ll long long\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        ll n = nums.size();\\n        vector<ll> presum;\\n        vector<ll> postsum;\\n\\n        ll curr_sum = 0;\\n        for(ll i=0;i<nums.size();i++){\\n            curr_sum += nums[i];\\n            presum.push_back(curr_sum);\\n        }\\n\\n        curr_sum = presum[n-1];\\n        postsum.push_back(curr_sum);\\n        for(ll i=1;i<n;i++){\\n            curr_sum -= nums[i-1];\\n            postsum.push_back(curr_sum);\\n        }\\n\\n        ll idx = 0;\\n        ll min_val = INT_MAX;\\n\\n        for(ll i=0;i<n-1;i++){\\n            ll val = abs(presum[i]/(i+1) - postsum[i+1]/(n-i-1));\\n            if(min_val > val){\\n                min_val = val;\\n                idx = i;\\n            }\\n        }\\n\\n        if(min_val > presum[n-1]/n){\\n            idx = n-1;\\n        }\\n\\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#define ll long long\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        ll n = nums.size();\\n        vector<ll> presum;\\n        vector<ll> postsum;\\n\\n        ll curr_sum = 0;\\n        for(ll i=0;i<nums.size();i++){\\n            curr_sum += nums[i];\\n            presum.push_back(curr_sum);\\n        }\\n\\n        curr_sum = presum[n-1];\\n        postsum.push_back(curr_sum);\\n        for(ll i=1;i<n;i++){\\n            curr_sum -= nums[i-1];\\n            postsum.push_back(curr_sum);\\n        }\\n\\n        ll idx = 0;\\n        ll min_val = INT_MAX;\\n\\n        for(ll i=0;i<n-1;i++){\\n            ll val = abs(presum[i]/(i+1) - postsum[i+1]/(n-i-1));\\n            if(min_val > val){\\n                min_val = val;\\n                idx = i;\\n            }\\n        }\\n\\n        if(min_val > presum[n-1]/n){\\n            idx = n-1;\\n        }\\n\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876085,
                "title": "java-from-13-to-96-faster-2-solutions",
                "content": "# Solution 1 | 13% Faster | 33ms\\n\\n# Complexity\\n- Time complexity: O(N + N + N) => O(N)\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long[] avgsLeft = new long[nums.length];\\n        long sumOne = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            sumOne += nums[i];\\n            avgsLeft[i] = sumOne / (i + 1);\\n        }\\n\\n        long[] avgsRight = new long[nums.length];\\n        long sumTwo = 0, count = 1;\\n        for (int i = nums.length - 2; i >= 0; i--) {\\n            sumTwo += nums[i + 1];\\n            avgsRight[i] = sumTwo / (count++);\\n        }\\n\\n        long min = Integer.MAX_VALUE;\\n        int idx = 0;\\n\\n        for (int i = 0; i < avgsLeft.length; i++) {\\n            avgsLeft[i] = Math.abs(avgsLeft[i] - avgsRight[i]);\\n            if (min > avgsLeft[i]) {\\n                min = avgsLeft[i];\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```\\n\\n# Solution 2 | 96% Faster | 17ms\\n# Complexity\\n- Time complexity: O(N + N) => O(N)\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sumLeft = 0;\\n        for (int n : nums) sumLeft += n;\\n        long sumIncr = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            sumIncr += nums[i];\\n            sumLeft -= nums[i];\\n            nums[i] = (int) Math.abs((sumIncr / (i + 1)) - (sumLeft / (nums.length - i - 1)));\\n        }\\n        sumIncr += nums[nums.length - 1];\\n        nums[nums.length - 1] = (int)(sumIncr / nums.length);\\n        int min = Integer.MAX_VALUE, idx = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (min > nums[i]) {\\n                min = nums[i];\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long[] avgsLeft = new long[nums.length];\\n        long sumOne = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            sumOne += nums[i];\\n            avgsLeft[i] = sumOne / (i + 1);\\n        }\\n\\n        long[] avgsRight = new long[nums.length];\\n        long sumTwo = 0, count = 1;\\n        for (int i = nums.length - 2; i >= 0; i--) {\\n            sumTwo += nums[i + 1];\\n            avgsRight[i] = sumTwo / (count++);\\n        }\\n\\n        long min = Integer.MAX_VALUE;\\n        int idx = 0;\\n\\n        for (int i = 0; i < avgsLeft.length; i++) {\\n            avgsLeft[i] = Math.abs(avgsLeft[i] - avgsRight[i]);\\n            if (min > avgsLeft[i]) {\\n                min = avgsLeft[i];\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sumLeft = 0;\\n        for (int n : nums) sumLeft += n;\\n        long sumIncr = 0;\\n        for (int i = 0; i < nums.length - 1; i++) {\\n            sumIncr += nums[i];\\n            sumLeft -= nums[i];\\n            nums[i] = (int) Math.abs((sumIncr / (i + 1)) - (sumLeft / (nums.length - i - 1)));\\n        }\\n        sumIncr += nums[nums.length - 1];\\n        nums[nums.length - 1] = (int)(sumIncr / nums.length);\\n        int min = Integer.MAX_VALUE, idx = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (min > nums[i]) {\\n                min = nums[i];\\n                idx = i;\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876039,
                "title": "easy-code-with-explanation-o-n-prefix-sum",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCalculating sum upto current index in curr and having total sum in s. at every index we are checking `abs(curr_sum/curr_idx+1, total_sum-curr/n-curr_idx-1)` with min we have i.e `mn` in following code. we are storing index with minimum avg in `idx`.\\nIn code checking the condition `i!=n-1` take care of n - curr_idx - 1.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n`O(N)` - we are traversing only once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n`O(1)` We are not using any extra space.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long int s =0,curr =0;   // s-> total_sum, cuur-> sum upto curr index\\n        int mn = INT_MAX,idx =0,n = nums.size();\\n\\n        for(int i:nums) s+=i;    //calculating total sum\\n\\n        for(int i=0;i<n;i++){\\n            curr+= nums[i];\\n            s-=nums[i];\\n            if(i!=n-1){\\n                if(mn>abs(curr/(i+1) - (s/(n-i-1)))){\\n                    mn = abs(curr/(i+1) - (s/(n-i-1)));\\n                    idx= i;\\n                }\\n            } \\n            else{                       //i = n-1\\n                if(mn>curr/(i+1)){\\n                    mn = curr/n;\\n                    idx= i;\\n                    }\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long int s =0,curr =0;   // s-> total_sum, cuur-> sum upto curr index\\n        int mn = INT_MAX,idx =0,n = nums.size();\\n\\n        for(int i:nums) s+=i;    //calculating total sum\\n\\n        for(int i=0;i<n;i++){\\n            curr+= nums[i];\\n            s-=nums[i];\\n            if(i!=n-1){\\n                if(mn>abs(curr/(i+1) - (s/(n-i-1)))){\\n                    mn = abs(curr/(i+1) - (s/(n-i-1)));\\n                    idx= i;\\n                }\\n            } \\n            else{                       //i = n-1\\n                if(mn>curr/(i+1)){\\n                    mn = curr/n;\\n                    idx= i;\\n                    }\\n            }\\n        }\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2876031,
                "title": "c-beginner-friendly-solution-prefix-sum-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& n) {\\n        ios_base::sync_with_stdio(false);cin.tie(NULL);\\n        vector <long long>psum(n.size());\\n        int idx;\\n        long long int dif=INT_MAX;\\n        psum[0]=n[0];\\n        for(int i=1; i<n.size(); i++){\\n            psum[i]=n[i]+psum[i-1];\\n        }\\n        for(int i=0; i<n.size(); i++){\\n            long long start,end=0,d;\\n            start=psum[i]/(i+1);\\n            if(i<n.size()-1){\\n                end=(psum[n.size()-1]-(psum[i]))/(n.size()-(i+1));\\n            }\\n            d=abs(start-end);\\n            if(d<dif){\\n                dif=d;\\n                idx=i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```\\nplease do up-vote my solution if you guys find it useful",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& n) {\\n        ios_base::sync_with_stdio(false);cin.tie(NULL);\\n        vector <long long>psum(n.size());\\n        int idx;\\n        long long int dif=INT_MAX;\\n        psum[0]=n[0];\\n        for(int i=1; i<n.size(); i++){\\n            psum[i]=n[i]+psum[i-1];\\n        }\\n        for(int i=0; i<n.size(); i++){\\n            long long start,end=0,d;\\n            start=psum[i]/(i+1);\\n            if(i<n.size()-1){\\n                end=(psum[n.size()-1]-(psum[i]))/(n.size()-(i+1));\\n            }\\n            d=abs(start-end);\\n            if(d<dif){\\n                dif=d;\\n                idx=i;\\n            }\\n        }\\n        \\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875959,
                "title": "java-time-o-n-space-o-1-beats-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First calculate total sum of array.\\n- Use the total sum to calculate suffix sum.\\n- Maintain prefix sum while calculating min average.\\n- Use long to store sums to avoid Integer Overflow.\\n# Complexity\\n- Time complexity  :  O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity : O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sumTotal = 0;\\n        for(int i=0; i<nums.length; i++){\\n            sumTotal += nums[i];\\n        }\\n        \\n        long sumPre = 0;\\n        long suf_avg = 0;\\n        long min = Integer.MAX_VALUE;\\n        int ans = -1;\\n        for(int i = 0; i < nums.length; i++){\\n            ///Calculating Prefix Sum.\\n            sumPre += nums[i];\\n            long pre_avg = Math.abs(sumPre/(i+1)); \\n            \\n            //For last index the suffix average will be zero\\n            if(i == nums.length-1){\\n                suf_avg = 0;\\n            }\\n            else{\\n                suf_avg = Math.abs((sumTotal - sumPre)/(nums.length - i - 1));\\n            }\\n\\n            //System.out.println(\" pre : \" + pre_avg + \" suf : \" + suf_avg);\\n            long avg = Math.abs(pre_avg - suf_avg);\\n            \\n            // Minimum possible difference is zero. So, returning index.\\n            if(avg == 0) return i;\\n            if(min > avg){\\n                min = avg;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Suffix Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sumTotal = 0;\\n        for(int i=0; i<nums.length; i++){\\n            sumTotal += nums[i];\\n        }\\n        \\n        long sumPre = 0;\\n        long suf_avg = 0;\\n        long min = Integer.MAX_VALUE;\\n        int ans = -1;\\n        for(int i = 0; i < nums.length; i++){\\n            ///Calculating Prefix Sum.\\n            sumPre += nums[i];\\n            long pre_avg = Math.abs(sumPre/(i+1)); \\n            \\n            //For last index the suffix average will be zero\\n            if(i == nums.length-1){\\n                suf_avg = 0;\\n            }\\n            else{\\n                suf_avg = Math.abs((sumTotal - sumPre)/(nums.length - i - 1));\\n            }\\n\\n            //System.out.println(\" pre : \" + pre_avg + \" suf : \" + suf_avg);\\n            long avg = Math.abs(pre_avg - suf_avg);\\n            \\n            // Minimum possible difference is zero. So, returning index.\\n            if(avg == 0) return i;\\n            if(min > avg){\\n                min = avg;\\n                ans = i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875871,
                "title": "easy-c-prefix-sum-with-explanation",
                "content": "# Intuition\\nUse Prefix Sum\\n\\n# Approach\\nLet nums2 be the original array\\nLet nums be the typecasted array (to long long int), and nums array has been converted in the form of prefix sum array.\\nThen:\\navg(for index i) = abs((nums[i]/(i+1))-((nums[n-1]-nums[i])/(n-i-1)))\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums2) {\\n        long long int ans=0, avg = INT_MAX, n = nums2.size();\\n        vector<long long int>nums(n);\\n        \\n        nums[0] = long(nums2[0]);\\n\\n        for(int i=1;i<nums2.size();i++){\\n            nums[i] = long(nums2[i]);\\n            nums[i] += nums[i-1];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            if(i==n-1){\\n                if(avg > (nums[n-1]/n))\\n                    ans = i;\\n            }\\n            else if(avg > abs((nums[i]/(i+1))-((nums[n-1]-nums[i])/(n-i-1))) ){\\n                avg = abs((nums[i]/(i+1))-((nums[n-1]-nums[i])/(n-i-1)));\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums2) {\\n        long long int ans=0, avg = INT_MAX, n = nums2.size();\\n        vector<long long int>nums(n);\\n        \\n        nums[0] = long(nums2[0]);\\n\\n        for(int i=1;i<nums2.size();i++){\\n            nums[i] = long(nums2[i]);\\n            nums[i] += nums[i-1];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            if(i==n-1){\\n                if(avg > (nums[n-1]/n))\\n                    ans = i;\\n            }\\n            else if(avg > abs((nums[i]/(i+1))-((nums[n-1]-nums[i])/(n-i-1))) ){\\n                avg = abs((nums[i]/(i+1))-((nums[n-1]-nums[i])/(n-i-1)));\\n                ans = i;\\n            }\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875866,
                "title": "c-prefix-sum-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n         long long int n=nums.size();\\n        long long int arr1[n];\\n        arr1[0]=nums[0];\\n        \\n      long long  int sum=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            sum+=nums[i];\\n            arr1[i]=sum;\\n        }\\n        long long int last=arr1[n-1];\\n        \\n        int sol=0;\\n        \\n        int ans=INT_MAX;\\n        for(int i=0;i<n;i++)\\n        {\\n            int avg2=0;\\n            int avg1=arr1[i]/(i+1);\\n            if(i!=n-1)\\n            avg2=(last-arr1[i])/(n-i-1);\\n            else \\n            avg2=0;\\n            \\n            if(abs(avg1-avg2)<ans)\\n            {\\n                 sol=i;\\n                ans=abs(avg1-avg2);\\n            }\\n            \\n        }\\n        return sol;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n         long long int n=nums.size();\\n        long long int arr1[n];\\n        arr1[0]=nums[0];\\n        \\n      long long  int sum=nums[0];\\n        for(int i=1;i<n;i++)\\n        {\\n            sum+=nums[i];\\n            arr1[i]=sum;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2875860,
                "title": "rust-prefix-sum-o-1-space",
                "content": "\\n### Prefix Sum\\n\\n```rust\\npub fn minimum_average_difference(nums: impl AsRef<[i32]>) -> i32 {\\n    let nums = nums.as_ref();\\n\\n    // Calculate the prefix sum., use i64 in order to avoid overflows\\n    let mut sum = vec![0i64; nums.len()];\\n    sum[0] = nums[0] as i64;\\n    for i in 1..sum.len() {\\n        sum[i] = sum[i - 1] + nums[i] as i64;\\n    }\\n\\n    let mut val = i64::MAX;\\n    let mut idx = 0;\\n\\n    for i in 0..sum.len() {\\n        // Get the sum of the two halves of the array: [0..=i] AND [i+1..sum.len]\\n        let a = sum[i];\\n        let b = sum[sum.len() - 1] - sum[i];\\n\\n        //  Calculate the average value for each half \\n        let x = a / (i + 1) as i64;\\n        let y = b / 1.max(sum.len() - i - 1) as i64; // avoid division by 0\\n\\n        // Check if the absolute difference is smaller\\n        let diff = x.max(y) - x.min(y);\\n        if diff < val {\\n            val = diff;\\n            idx = i;\\n        }\\n    }\\n\\n    idx as i32\\n}\\n```\\n\\n### Prefix SUm with `O(1)` space\\n\\nThe same idea ass above, but we calculate the prefix sum on the fly:\\n\\n```rust\\npub fn minimum_average_difference(nums: impl AsRef<[i32]>) -> i32 {\\n    let nums = nums.as_ref();\\n\\n    let total = nums.iter().map(|x| *x as i64).sum::<i64>();\\n    let mut sum = 0;\\n\\n    let mut val = i64::MAX;\\n    let mut idx = 0;\\n\\n    for i in 0..nums.len() {\\n        sum += nums[i] as i64;\\n\\n        let a = sum;\\n        let b = total - sum;\\n\\n        let x = a / (i + 1) as i64;\\n        let y = b / 1.max(nums.len() - i - 1) as i64;\\n\\n        let diff = x.max(y) - x.min(y);\\n        if diff < val {\\n            val = diff;\\n            idx = i;\\n        }\\n    }\\n\\n    idx as i32\\n}\\n```\\n",
                "solutionTags": [
                    "Rust",
                    "Prefix Sum"
                ],
                "code": "```rust\\npub fn minimum_average_difference(nums: impl AsRef<[i32]>) -> i32 {\\n    let nums = nums.as_ref();\\n\\n    // Calculate the prefix sum., use i64 in order to avoid overflows\\n    let mut sum = vec![0i64; nums.len()];\\n    sum[0] = nums[0] as i64;\\n    for i in 1..sum.len() {\\n        sum[i] = sum[i - 1] + nums[i] as i64;\\n    }\\n\\n    let mut val = i64::MAX;\\n    let mut idx = 0;\\n\\n    for i in 0..sum.len() {\\n        // Get the sum of the two halves of the array: [0..=i] AND [i+1..sum.len]\\n        let a = sum[i];\\n        let b = sum[sum.len() - 1] - sum[i];\\n\\n        //  Calculate the average value for each half \\n        let x = a / (i + 1) as i64;\\n        let y = b / 1.max(sum.len() - i - 1) as i64; // avoid division by 0\\n\\n        // Check if the absolute difference is smaller\\n        let diff = x.max(y) - x.min(y);\\n        if diff < val {\\n            val = diff;\\n            idx = i;\\n        }\\n    }\\n\\n    idx as i32\\n}\\n```\n```rust\\npub fn minimum_average_difference(nums: impl AsRef<[i32]>) -> i32 {\\n    let nums = nums.as_ref();\\n\\n    let total = nums.iter().map(|x| *x as i64).sum::<i64>();\\n    let mut sum = 0;\\n\\n    let mut val = i64::MAX;\\n    let mut idx = 0;\\n\\n    for i in 0..nums.len() {\\n        sum += nums[i] as i64;\\n\\n        let a = sum;\\n        let b = total - sum;\\n\\n        let x = a / (i + 1) as i64;\\n        let y = b / 1.max(nums.len() - i - 1) as i64;\\n\\n        let diff = x.max(y) - x.min(y);\\n        if diff < val {\\n            val = diff;\\n            idx = i;\\n        }\\n    }\\n\\n    idx as i32\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875823,
                "title": "java-o-n-tc-o-1-sc-prefix-sum",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] inp) {\\n        int n=inp.length;\\n        if(n==1)   return 0;\\n        long prefix=0,postfix=0;\\n        for(int i=0;i<n;i++) postfix+=inp[i];\\n        long min=Integer.MAX_VALUE;\\n        int ind=0;\\n        for(int i=0;i<n;i++){\\n            prefix+=inp[i];\\n            long temp=prefix/(i+1);\\n            if(i+1<n)   temp-=(postfix-prefix)/(n-i-1);\\n            temp=Math.abs(temp);\\n            if(temp<min){\\n                min=temp;\\n                ind=i;\\n            }\\n        }\\n        return ind;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] inp) {\\n        int n=inp.length;\\n        if(n==1)   return 0;\\n        long prefix=0,postfix=0;\\n        for(int i=0;i<n;i++) postfix+=inp[i];\\n        long min=Integer.MAX_VALUE;\\n        int ind=0;\\n        for(int i=0;i<n;i++){\\n            prefix+=inp[i];\\n            long temp=prefix/(i+1);\\n            if(i+1<n)   temp-=(postfix-prefix)/(n-i-1);\\n            temp=Math.abs(temp);\\n            if(temp<min){\\n                min=temp;\\n                ind=i;\\n            }\\n        }\\n        return ind;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875789,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums)\\n    {\\n       vector<int>f ;\\n       vector<int>s ;\\n       vector<int>ans ;\\n       long long int sum1 = 0 , sum2 = 0;\\n       long long min = INT_MAX ;\\n       long long el = 0 ;\\n       long long n = nums.size() ;\\n       for(int i=0 ; i<n ; i++)\\n       {\\n           sum1 += nums[i] ;\\n           int avg1 = sum1/(i+1) ;\\n           f.push_back(avg1) ;\\n       }   \\n       s.push_back(0) ;\\n       for(int i=n-1 ; i>0 ; i--)\\n       {\\n           sum2 += nums[i] ;\\n           int avg2 = sum2/(n-i) ;\\n           s.push_back(avg2) ;\\n       }\\n       for(int i=0 ; i<f.size() ; i++)\\n       {\\n           int an = abs(f[i]-s[(f.size())-i-1]) ;\\n           ans.push_back(an) ;\\n       }\\n       for(int i=0 ; i<ans.size() ; i++)\\n       {\\n           if(ans[i]<min)\\n           {\\n               min = ans[i] ;\\n               el = i ;\\n           }\\n       }\\n       return el ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums)\\n    {\\n       vector<int>f ;\\n       vector<int>s ;\\n       vector<int>ans ;\\n       long long int sum1 = 0 , sum2 = 0;\\n       long long min = INT_MAX ;\\n       long long el = 0 ;\\n       long long n = nums.size() ;\\n       for(int i=0 ; i<n ; i++)\\n       {\\n           sum1 += nums[i] ;\\n           int avg1 = sum1/(i+1) ;\\n           f.push_back(avg1) ;\\n       }   \\n       s.push_back(0) ;\\n       for(int i=n-1 ; i>0 ; i--)\\n       {\\n           sum2 += nums[i] ;\\n           int avg2 = sum2/(n-i) ;\\n           s.push_back(avg2) ;\\n       }\\n       for(int i=0 ; i<f.size() ; i++)\\n       {\\n           int an = abs(f[i]-s[(f.size())-i-1]) ;\\n           ans.push_back(an) ;\\n       }\\n       for(int i=0 ; i<ans.size() ; i++)\\n       {\\n           if(ans[i]<min)\\n           {\\n               min = ans[i] ;\\n               el = i ;\\n           }\\n       }\\n       return el ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875721,
                "title": "easy-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n\\n       long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        long long suml=0,sumr=0,dl,dr,res=INT_MAX,ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            suml+=nums[i];\\n            sumr=sum-suml;\\n            dl=suml/(i+1);\\n            if(i==nums.size()-1)\\n            {\\n                dr=0;\\n            }\\n            else\\n            dr=sumr/(nums.size()-i-1);\\n            if(res>abs(dl-dr))\\n            {\\n                ans=i;\\n                res=abs(dl-dr);\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n\\n       long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum+=nums[i];\\n        }\\n        long long suml=0,sumr=0,dl,dr,res=INT_MAX,ans;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            suml+=nums[i];\\n            sumr=sum-suml;\\n            dl=suml/(i+1);\\n            if(i==nums.size()-1)\\n            {\\n                dr=0;\\n            }\\n            else\\n            dr=sumr/(nums.size()-i-1);\\n            if(res>abs(dl-dr))\\n            {\\n                ans=i;\\n                res=abs(dl-dr);\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875714,
                "title": "c-optimized-prefix-sum-beats-98-51",
                "content": "***If you find this helpful, Please Upvote \\uD83D\\uDD3C\\nThank You !***\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        int leftAvg = 0, rightAvg = 0;\\n\\n        // \\'long long\\' bcoz \"nums[i] <= 10^5\", \\'int\\' may overflow\\n        long long leftSum = 0, rightSum = 0;\\n        for(int i=0; i<n; i++) rightSum += nums[i];\\n\\n        int diff = 0;\\n        int ansIndex = 0;\\n        int miniDiff = INT_MAX;\\n        \\n        for(int i=0; i<n; i++) {\\n\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n\\n            leftAvg = (leftSum)/(i+1);\\n            if(i!=n-1) {\\n                rightAvg = (rightSum)/(n-(i+1));\\n            }\\n            else {\\n                rightAvg = 0;\\n            }\\n\\n            diff = abs(leftAvg - rightAvg);\\n            if(miniDiff > diff) {\\n                miniDiff = diff;\\n                ansIndex = i;\\n            }\\n            miniDiff = min(miniDiff, diff);\\n\\n            // cout << \"i : \" << i << endl;\\n            // cout << \"leftSum : \" << leftSum << endl;\\n            // cout << \"rightSum : \" << rightSum << endl;\\n            // cout << \"leftAvg : \" << leftAvg << endl;\\n            // cout << \"rightAvg : \" << rightAvg << endl;\\n            // cout << \"diff : \" << diff << endl;\\n            // cout << \"miniDiff : \" << miniDiff << endl << endl;\\n        }\\n        \\n        return ansIndex;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        int leftAvg = 0, rightAvg = 0;\\n\\n        // \\'long long\\' bcoz \"nums[i] <= 10^5\", \\'int\\' may overflow\\n        long long leftSum = 0, rightSum = 0;\\n        for(int i=0; i<n; i++) rightSum += nums[i];\\n\\n        int diff = 0;\\n        int ansIndex = 0;\\n        int miniDiff = INT_MAX;\\n        \\n        for(int i=0; i<n; i++) {\\n\\n            leftSum += nums[i];\\n            rightSum -= nums[i];\\n\\n            leftAvg = (leftSum)/(i+1);\\n            if(i!=n-1) {\\n                rightAvg = (rightSum)/(n-(i+1));\\n            }\\n            else {\\n                rightAvg = 0;\\n            }\\n\\n            diff = abs(leftAvg - rightAvg);\\n            if(miniDiff > diff) {\\n                miniDiff = diff;\\n                ansIndex = i;\\n            }\\n            miniDiff = min(miniDiff, diff);\\n\\n            // cout << \"i : \" << i << endl;\\n            // cout << \"leftSum : \" << leftSum << endl;\\n            // cout << \"rightSum : \" << rightSum << endl;\\n            // cout << \"leftAvg : \" << leftAvg << endl;\\n            // cout << \"rightAvg : \" << rightAvg << endl;\\n            // cout << \"diff : \" << diff << endl;\\n            // cout << \"miniDiff : \" << miniDiff << endl << endl;\\n        }\\n        \\n        return ansIndex;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2875621,
                "title": "java-solution-using-prefix-sum-easy-and-simple",
                "content": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long prefix[]=new long[nums.length];\\n        prefix[0]=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            prefix[i]=prefix[i-1]+nums[i];\\n        }\\n        int idx=0;\\n        long min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length-1;i++){\\n            long firsthalf=prefix[i]/(i+1);\\n            long secondhalf=(prefix[nums.length-1]-prefix[i])/(nums.length-i-1);\\n            long diff=Math.abs(firsthalf-secondhalf);\\n            if(min>diff){\\n                idx=i;\\n                min=diff;\\n            }\\n          //System.out.println(diff + \" \"+min);\\n        }\\n            long diff=prefix[nums.length-1]/nums.length;\\n            if(min>diff){\\n                idx=nums.length-1;\\n                min=diff;\\n            }\\n      // System.out.println(diff);\\n      // System.out.println(min);\\n        return idx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long prefix[]=new long[nums.length];\\n        prefix[0]=nums[0];\\n        for(int i=1;i<nums.length;i++){\\n            prefix[i]=prefix[i-1]+nums[i];\\n        }\\n        int idx=0;\\n        long min=Integer.MAX_VALUE;\\n        for(int i=0;i<nums.length-1;i++){\\n            long firsthalf=prefix[i]/(i+1);\\n            long secondhalf=(prefix[nums.length-1]-prefix[i])/(nums.length-i-1);\\n            long diff=Math.abs(firsthalf-secondhalf);\\n            if(min>diff){\\n                idx=i;\\n                min=diff;\\n            }\\n          //System.out.println(diff + \" \"+min);\\n        }\\n            long diff=prefix[nums.length-1]/nums.length;\\n            if(min>diff){\\n                idx=nums.length-1;\\n                min=diff;\\n            }\\n      // System.out.println(diff);\\n      // System.out.println(min);\\n        return idx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875602,
                "title": "c-easy-solution",
                "content": "# Intuition\\nCalculate the prefix of right side average as well as left side average and then find the absolute difference.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        int mini=INT_MAX;\\n        int ans=0;\\n        vector<int> leftavg;\\n        vector<int> rightavg(n);\\n        long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum=sum+nums[i];\\n            leftavg.push_back(sum/(i+1));\\n        }\\n        sum=0;\\n        rightavg[n-1]=0;\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            sum=sum+nums[i+1];\\n            rightavg[i]=(sum/(n-i-1));\\n        }\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            int diff;\\n            if(i==n-1)\\n            diff=leftavg[i];\\n            else\\n             diff=abs(leftavg[i]-rightavg[i]);\\n            if(diff<mini)\\n            {\\n                ans=i;\\n                mini=diff;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        int mini=INT_MAX;\\n        int ans=0;\\n        vector<int> leftavg;\\n        vector<int> rightavg(n);\\n        long long sum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            sum=sum+nums[i];\\n            leftavg.push_back(sum/(i+1));\\n        }\\n        sum=0;\\n        rightavg[n-1]=0;\\n        for(int i=n-2;i>=0;i--)\\n        {\\n            sum=sum+nums[i+1];\\n            rightavg[i]=(sum/(n-i-1));\\n        }\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            int diff;\\n            if(i==n-1)\\n            diff=leftavg[i];\\n            else\\n             diff=abs(leftavg[i]-rightavg[i]);\\n            if(diff<mini)\\n            {\\n                ans=i;\\n                mini=diff;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875542,
                "title": "simple-and-easy-to-understand-java-solution-clean-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nPrefix Sum Approach\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n        int n = nums.length;\\n        long sum = 0;\\n        for(int i = 0; i < n; i++) sum += nums[i];\\n\\n        long avg = Long.MAX_VALUE;\\n        int ans = 0;\\n        long pre = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            pre += nums[i];\\n\\n            long avg1 = pre / (i + 1);\\n            long avg2 = (i != n-1) ? (sum - pre) / (n - i - 1) : 0;\\n\\n\\n            if(Math.abs(avg1 - avg2) < avg)\\n            {\\n                avg = Math.abs(avg1 - avg2);\\n                ans = i;\\n            }\\n\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        \\n        int n = nums.length;\\n        long sum = 0;\\n        for(int i = 0; i < n; i++) sum += nums[i];\\n\\n        long avg = Long.MAX_VALUE;\\n        int ans = 0;\\n        long pre = 0;\\n        for(int i = 0; i < n; i++)\\n        {\\n            pre += nums[i];\\n\\n            long avg1 = pre / (i + 1);\\n            long avg2 = (i != n-1) ? (sum - pre) / (n - i - 1) : 0;\\n\\n\\n            if(Math.abs(avg1 - avg2) < avg)\\n            {\\n                avg = Math.abs(avg1 - avg2);\\n                ans = i;\\n            }\\n\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875532,
                "title": "easy-approach-beginner-friendly-c",
                "content": "~~~\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min=INT_MAX,index;\\n        int n=nums.size();\\n        long long pre[n];\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n            pre[i]=pre[i-1]+nums[i];\\n        for(int i=0;i<nums.size();i++){\\n            int num1=pre[i]/(i+1);\\n            int num2;\\n            int x=(nums.size()-i-1);\\n            if(x==0)\\n                num2=0;\\n            else num2=(pre[n-1]-pre[i])/x;\\n            if(abs(num1-num2)<min){\\n                min=abs(num1-num2);\\n                index=i;\\n        }\\n      }\\n      return index;\\n    }\\n};\\n~~~\\n***if helpful please upvote***",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min=INT_MAX,index;\\n        int n=nums.size();\\n        long long pre[n];\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++)\\n            pre[i]=pre[i-1]+nums[i];\\n        for(int i=0;i<nums.size();i++){\\n            int num1=pre[i]/(i+1);\\n            int num2;\\n            int x=(nums.size()-i-1);\\n            if(x==0)\\n                num2=0;\\n            else num2=(pre[n-1]-pre[i])/x;\\n            if(abs(num1-num2)<min){\\n                min=abs(num1-num2);\\n                index=i;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2875525,
                "title": "prefix-sum-easy-to-understand-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long tsum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            tsum+=nums[i];\\n        }\\n        long long psum=0;\\n        for(int i=1;i<=nums.size();i++)\\n        {\\n            long long ans1=0;\\n            psum+=nums[i-1];\\n            long long f=psum/i;\\n            int d=nums.size();\\n            long long l;\\n\\n            if(d-i)\\n            l=(tsum-psum)/(d-i);\\n            else\\n            l=0;\\n\\n            ans1=abs(f-l);\\n            nums[i-1]=ans1;\\n        }\\n        int fans=nums[0];\\n        int index=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n             if(nums[i]<fans){\\n             fans=nums[i];\\n             index=i;\\n             }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        long long tsum=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            tsum+=nums[i];\\n        }\\n        long long psum=0;\\n        for(int i=1;i<=nums.size();i++)\\n        {\\n            long long ans1=0;\\n            psum+=nums[i-1];\\n            long long f=psum/i;\\n            int d=nums.size();\\n            long long l;\\n\\n            if(d-i)\\n            l=(tsum-psum)/(d-i);\\n            else\\n            l=0;\\n\\n            ans1=abs(f-l);\\n            nums[i-1]=ans1;\\n        }\\n        int fans=nums[0];\\n        int index=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n             if(nums[i]<fans){\\n             fans=nums[i];\\n             index=i;\\n             }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875505,
                "title": "concise-and-simple-java-code-too-petite-tbh",
                "content": "# Approach\\nSimply Solving prefix sum and calculating sum of elements in O(1) time and taking average of it.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long n = nums.length, prefixSum[] = new long[(int)n], tot = 0, res = -1, minAvgDiff = Long.MAX_VALUE, avgDiff, postfixSum;\\n        int i;\\n        for(i = 0; i<n; i++) prefixSum[i] = (tot += nums[i]);\\n        for(i = 0; i<n; i++) {\\n            postfixSum = tot==prefixSum[i]? 0: (tot - prefixSum[i])/(n - i - 1);\\n            avgDiff = (int)Math.abs(prefixSum[i]/(i + 1) - postfixSum);\\n            if(avgDiff < minAvgDiff) {\\n                minAvgDiff = avgDiff;\\n                res = i;\\n            }\\n        }\\n        return (int)res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long n = nums.length, prefixSum[] = new long[(int)n], tot = 0, res = -1, minAvgDiff = Long.MAX_VALUE, avgDiff, postfixSum;\\n        int i;\\n        for(i = 0; i<n; i++) prefixSum[i] = (tot += nums[i]);\\n        for(i = 0; i<n; i++) {\\n            postfixSum = tot==prefixSum[i]? 0: (tot - prefixSum[i])/(n - i - 1);\\n            avgDiff = (int)Math.abs(prefixSum[i]/(i + 1) - postfixSum);\\n            if(avgDiff < minAvgDiff) {\\n                minAvgDiff = avgDiff;\\n                res = i;\\n            }\\n        }\\n        return (int)res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875457,
                "title": "simple-o-1-space-solution-with-explanation",
                "content": "**Approach**\\n\\nIt is mostly like the prefix sum.\\nBut the way to do it in O(1) is not to maintain any type of the prefix sum array.\\n\\n**Optimization**\\nInstead of that you can:\\n- Store the total sum in a total variable.\\n- Now, traverse the array and uptil that index you just need to store the sum of nums[i]\\n- **Left_length** = (i + 1) and **Right_length**  =  (n - i  - 1).\\n- **Left_sum** = curr_sum and **Right_sum** = total - curr_sum\\n\\nThat\\'s it, now check for the minimum average difference\\n\\n**Code:**\\n```\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        long total = accumulate(begin(nums), end(nums), 0L);\\n        long sum = 0;\\n        long mn = INT_MAX;\\n        long abs_diff = 0;\\n        long left_avg, right_avg;\\n        int res = 0;\\n        \\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n            left_avg = sum / (i + 1);\\n            right_avg = i == n - 1 ? 0 : (total - sum) / (n - i - 1);\\n            abs_diff = abs(left_avg - right_avg);\\n            \\n            if(abs_diff < mn)\\n                mn = abs_diff, res = i;\\n        }\\n        \\n        return res;\\n    }\\n```\\n\\nPlease cosider to **upvote ^**, if you want to see more content like this.\\n\\nThanks for your time!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        long total = accumulate(begin(nums), end(nums), 0L);\\n        long sum = 0;\\n        long mn = INT_MAX;\\n        long abs_diff = 0;\\n        long left_avg, right_avg;\\n        int res = 0;\\n        \\n        for(int i = 0; i < n; i++){\\n            sum += nums[i];\\n            left_avg = sum / (i + 1);\\n            right_avg = i == n - 1 ? 0 : (total - sum) / (n - i - 1);\\n            abs_diff = abs(left_avg - right_avg);\\n            \\n            if(abs_diff < mn)\\n                mn = abs_diff, res = i;\\n        }\\n        \\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875420,
                "title": "c-easy-prefix-sum-solution",
                "content": "Time complexity = O(N)\\nSpace complexity=O(N)\\nwhere N is the size of vector\\n```\\n    int minimumAverageDifference(vector<int>& nums)\\n    {\\n        int mini=INT_MAX ,ind=-1, n=nums.size(),c=0;\\n        vector<long long int> pre(n),suf(n);\\n        long long int sum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n            pre[i]=sum/(i+1);\\n        }\\n        sum=0;\\n        for(int i=n-1;i>=0;i--)\\n        { \\n            c++;\\n            sum+=nums[i];\\n            suf[i]=sum/c;   \\n        }\\n        for(int i=0;i<n-1;i++){\\n            int dif=abs(pre[i]-suf[i+1]);\\n            if(dif<mini)\\n            {\\n                mini=dif;\\n                ind=i;\\n            }\\n        }\\n        if(pre[n-1]<mini)\\n        {\\n             mini=pre[n-1];\\n             ind=n-1;\\n          \\n        }\\n        return ind;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Prefix Sum"
                ],
                "code": "```\\n    int minimumAverageDifference(vector<int>& nums)\\n    {\\n        int mini=INT_MAX ,ind=-1, n=nums.size(),c=0;\\n        vector<long long int> pre(n),suf(n);\\n        long long int sum=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            sum+=nums[i];\\n            pre[i]=sum/(i+1);\\n        }\\n        sum=0;\\n        for(int i=n-1;i>=0;i--)\\n        { \\n            c++;\\n            sum+=nums[i];\\n            suf[i]=sum/c;   \\n        }\\n        for(int i=0;i<n-1;i++){\\n            int dif=abs(pre[i]-suf[i+1]);\\n            if(dif<mini)\\n            {\\n                mini=dif;\\n                ind=i;\\n            }\\n        }\\n        if(pre[n-1]<mini)\\n        {\\n             mini=pre[n-1];\\n             ind=n-1;\\n          \\n        }\\n        return ind;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875416,
                "title": "100-simple",
                "content": "# Approach\\nTrack min average differeance and note down the index\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int N = nums.size(), idx=-1;\\n        if ( N < 2) return 0;\\n        long endSum=0, begSum=0, min_avg = INT_MAX,avg;\\n        for(auto e: nums) endSum += e;\\n\\n        for (int i=0; i < N; i++){\\n            begSum += nums[i]; //sum 0 to i\\n            endSum -= nums[i]; //sum i+1 to N-1\\n\\n            if (i != N-1)avg = begSum/(i+1) -endSum/(N-i-1);\\n            else avg = begSum/(i+1); // Avoid divide by 0\\n            if ( abs(avg) < min_avg){\\n                min_avg = abs(avg); //Track minmum and index\\n                idx = i;\\n            }\\n        }\\n\\n        return idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int N = nums.size(), idx=-1;\\n        if ( N < 2) return 0;\\n        long endSum=0, begSum=0, min_avg = INT_MAX,avg;\\n        for(auto e: nums) endSum += e;\\n\\n        for (int i=0; i < N; i++){\\n            begSum += nums[i]; //sum 0 to i\\n            endSum -= nums[i]; //sum i+1 to N-1\\n\\n            if (i != N-1)avg = begSum/(i+1) -endSum/(N-i-1);\\n            else avg = begSum/(i+1); // Avoid divide by 0\\n            if ( abs(avg) < min_avg){\\n                min_avg = abs(avg); //Track minmum and index\\n                idx = i;\\n            }\\n        }\\n\\n        return idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875404,
                "title": "javascript-2-approaches-with-explanation-clean-code",
                "content": "**Approach #1: Prefix Sum**\\n\\n**Intuition:**\\n* \\tWe will be using 2 arrays to store left & right running sum.\\n\\n```\\n// Time complexity: O(n)\\n// Space complexity: O(n)\\n\\nconst minimumAverageDifference = function(nums) {\\n\\tconst n = nums.length;\\n\\tconst leftSum = new Array(n).fill(0);\\n\\tconst rightSum = new Array(n).fill(0);\\n\\t\\n\\tleftSum[0] = nums[0];\\n\\tfor (let i = 1; i < n; i++) \\n\\t\\tleftSum[i] = leftSum[i - 1] + nums[i];\\n\\t\\n\\trightSum[n - 1] = nums[n - 1];\\n\\tfor (let i = n - 2; i >= 0; i--)\\n\\t\\trightSum[i] = rightSum[i + 1] + nums[i];\\n\\t\\n\\tlet minAvgDiff = Infinity;\\n\\tlet answer = -1;\\n\\t\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\tconst leftAvg = Math.floor(leftSum[i] / (i + 1));\\n\\t\\tconst rightAvg = i == n - 1  ? 0 : Math.floor(rightSum[i + 1] / (n - i - 1));\\n\\t\\tconst avgDiff = Math.abs(leftAvg - rightAvg);\\n\\t\\t\\n\\t\\tif (avgDiff < minAvgDiff) {\\n\\t\\t\\tminAvgDiff = avgDiff;\\n\\t\\t\\tanswer = i;\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn answer;\\n};\\n```\\n\\n**Approach #2: Prefix Sum Optimized**\\n\\n**Intuition:**\\n* \\tWe will be using 2 variables to store left & right running sum.\\n\\n```\\n// Time complexity: O(n)\\n// Space complexity: O(1)\\n\\nconst minimumAverageDifference = function(nums) {\\n\\tconst n = nums.length;\\n\\tlet leftSum = 0;\\n\\tlet rightSum = 0;\\n\\n\\tfor (let i = 0; i < n; i++) \\n\\t\\trightSum += nums[i];\\n\\n\\tlet minAvgDiff = Infinity;\\n\\tlet answer = -1;\\n\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum -= nums[i];\\n\\n\\t\\tconst leftAvg = Math.floor(leftSum / (i + 1));\\n\\t\\tconst rightAvg = i == n - 1  ? 0 : Math.floor(rightSum / (n - i - 1));\\n\\t\\tconst avgDiff = Math.abs(leftAvg - rightAvg);\\n\\t\\t\\n\\t\\tif (avgDiff < minAvgDiff) {\\n\\t\\t\\tminAvgDiff = avgDiff;\\n\\t\\t\\tanswer = i;\\n\\t\\t}\\n\\t}\\n\\n\\treturn answer;\\n};\\n```\\n\\n**Please upvote if you find these solutions useful. Happy Coding!**",
                "solutionTags": [
                    "JavaScript",
                    "Prefix Sum"
                ],
                "code": "```\\n// Time complexity: O(n)\\n// Space complexity: O(n)\\n\\nconst minimumAverageDifference = function(nums) {\\n\\tconst n = nums.length;\\n\\tconst leftSum = new Array(n).fill(0);\\n\\tconst rightSum = new Array(n).fill(0);\\n\\t\\n\\tleftSum[0] = nums[0];\\n\\tfor (let i = 1; i < n; i++) \\n\\t\\tleftSum[i] = leftSum[i - 1] + nums[i];\\n\\t\\n\\trightSum[n - 1] = nums[n - 1];\\n\\tfor (let i = n - 2; i >= 0; i--)\\n\\t\\trightSum[i] = rightSum[i + 1] + nums[i];\\n\\t\\n\\tlet minAvgDiff = Infinity;\\n\\tlet answer = -1;\\n\\t\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\tconst leftAvg = Math.floor(leftSum[i] / (i + 1));\\n\\t\\tconst rightAvg = i == n - 1  ? 0 : Math.floor(rightSum[i + 1] / (n - i - 1));\\n\\t\\tconst avgDiff = Math.abs(leftAvg - rightAvg);\\n\\t\\t\\n\\t\\tif (avgDiff < minAvgDiff) {\\n\\t\\t\\tminAvgDiff = avgDiff;\\n\\t\\t\\tanswer = i;\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn answer;\\n};\\n```\n```\\n// Time complexity: O(n)\\n// Space complexity: O(1)\\n\\nconst minimumAverageDifference = function(nums) {\\n\\tconst n = nums.length;\\n\\tlet leftSum = 0;\\n\\tlet rightSum = 0;\\n\\n\\tfor (let i = 0; i < n; i++) \\n\\t\\trightSum += nums[i];\\n\\n\\tlet minAvgDiff = Infinity;\\n\\tlet answer = -1;\\n\\n\\tfor (let i = 0; i < n; i++) {\\n\\t\\tleftSum += nums[i];\\n\\t\\trightSum -= nums[i];\\n\\n\\t\\tconst leftAvg = Math.floor(leftSum / (i + 1));\\n\\t\\tconst rightAvg = i == n - 1  ? 0 : Math.floor(rightSum / (n - i - 1));\\n\\t\\tconst avgDiff = Math.abs(leftAvg - rightAvg);\\n\\t\\t\\n\\t\\tif (avgDiff < minAvgDiff) {\\n\\t\\t\\tminAvgDiff = avgDiff;\\n\\t\\t\\tanswer = i;\\n\\t\\t}\\n\\t}\\n\\n\\treturn answer;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2875339,
                "title": "swift-one-liner",
                "content": "**One-Liner, terse (accepted answer)**\\n```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        nums.indices.reduce(into:([Int](),0,nums.reduce(0,+))){x,i in x.1+=nums[i];let d=nums.count-i-1;let y=d==0 ? 0:(x.2-x.1)/d;x.0.append(abs((x.1/(i+1))-y))}.0.enumerated().sorted{$0.1<$1.1}[0].0\\n    }\\n}\\n```\\n**NOTE:** This is technically a one-liner, since the `return` keyword could be omitted.\\n\\n---\\n\\n**One-Liner, expanded and annotated (accepted answer)**\\n```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        nums.indices.reduce(into: (\\n            diffsArray: [Int](),\\n            leftSum: 0,\\n            totalSum: nums.reduce(0,+)\\n        )) { data,i in \\n            data.leftSum += nums[i]\\n            let leftElementCount = i + 1\\n            let leftAvg = data.leftSum / leftElementCount\\n\\t\\t\\t\\n            let rightElementCount = nums.count-i-1\\n            let rightSum = data.totalSum - data.leftSum \\n            let rightAvg = rightElementCount == 0 ? 0 : rightSum / rightElementCount\\n            \\n\\t\\t\\tlet avgDiff = abs(leftAvg - rightAvg)\\n            data.diffsArray.append(avgDiff)\\n        }.diffsArray.enumerated()\\n        // Enumeration gives us an array of tuples [(offset, element), (offset, element) ... ]\\n        // the offset is the array index, the element is avg diff for that offset\\n        // So, sort by elements (descending), so the lowest avg is first item in the array, \\n\\t\\t// then return first item\\'s associated offset (index of min avg diff).\\n        .sorted{ a,b in a.element < b.element}[0].offset\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        nums.indices.reduce(into:([Int](),0,nums.reduce(0,+))){x,i in x.1+=nums[i];let d=nums.count-i-1;let y=d==0 ? 0:(x.2-x.1)/d;x.0.append(abs((x.1/(i+1))-y))}.0.enumerated().sorted{$0.1<$1.1}[0].0\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        nums.indices.reduce(into: (\\n            diffsArray: [Int](),\\n            leftSum: 0,\\n            totalSum: nums.reduce(0,+)\\n        )) { data,i in \\n            data.leftSum += nums[i]\\n            let leftElementCount = i + 1\\n            let leftAvg = data.leftSum / leftElementCount\\n\\t\\t\\t\\n            let rightElementCount = nums.count-i-1\\n            let rightSum = data.totalSum - data.leftSum \\n            let rightAvg = rightElementCount == 0 ? 0 : rightSum / rightElementCount\\n            \\n\\t\\t\\tlet avgDiff = abs(leftAvg - rightAvg)\\n            data.diffsArray.append(avgDiff)\\n        }.diffsArray.enumerated()\\n        // Enumeration gives us an array of tuples [(offset, element), (offset, element) ... ]\\n        // the offset is the array index, the element is avg diff for that offset\\n        // So, sort by elements (descending), so the lowest avg is first item in the array, \\n\\t\\t// then return first item\\'s associated offset (index of min avg diff).\\n        .sorted{ a,b in a.element < b.element}[0].offset\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875310,
                "title": "beats-95-submissions-fastest-and-easiest-two-pointer-approach-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA SINGLE TRAVERSAL REQUIRED TO KEEP A COUNT ON THE LEFT AND RIGHT SUM.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTWO POINTER APPROACH TO CALCULATE THE ABSOLUTE DIFFERENCE OF EACH INDEX.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        N=len(nums)\\n        l,r=0,sum(nums)\\n        min=10**20\\n        mini=0\\n        for i in range(N):\\n            l +=nums[i]\\n            r -=nums[i]\\n            if i+1 == N:\\n                res=abs(l//(i+1))\\n            else :\\n                res=abs(l//(i+1) - r//(N-i-1))\\n            if res < min :\\n                min=res\\n                mini=i \\n        return mini\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Two Pointers",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        N=len(nums)\\n        l,r=0,sum(nums)\\n        min=10**20\\n        mini=0\\n        for i in range(N):\\n            l +=nums[i]\\n            r -=nums[i]\\n            if i+1 == N:\\n                res=abs(l//(i+1))\\n            else :\\n                res=abs(l//(i+1) - r//(N-i-1))\\n            if res < min :\\n                min=res\\n                mini=i \\n        return mini\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875290,
                "title": "simple-python-3-approach-with-tc-o-n-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nleftSum + rightSum = total at any given index\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. To calculate the leftSum at any given index we add the nums[i] \\n2. To calculate the rightSum for the same index we subtract leftSum from the total \\n3. we check if leftSum == total which means we are at the last element and rightSum average will be 0\\n3. We calculate the absolute difference of the floored averages of leftSum and rightSum \\n4. Check with the global absolute value which we use to keep track of the minimum value which is stored as [minAbsvalue, index]\\n5. return minAbs[1] which is the index at which it is minimum\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if(n == 1):\\n            return 0\\n        total = sum(nums)\\n        leftSum = nums[0]\\n        rightSum = total - leftSum\\n        \\n        minAbs = [abs(math.floor(leftSum/1) - math.floor(rightSum/(n-1))),0]\\n        for i in range(1,n):\\n            leftSum += nums[i]\\n            rightSum = total - leftSum\\n            if(leftSum == total):\\n                temp = math.floor(abs(leftSum/(i+1)))\\n            else:\\n                temp = abs(math.floor(leftSum/(i+1)) - math.floor(rightSum/(n-i-1)))\\n            print(temp)\\n            if(temp < minAbs[0]):\\n                minAbs = [temp,i]\\n        return minAbs[1]\\n\\n            \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        if(n == 1):\\n            return 0\\n        total = sum(nums)\\n        leftSum = nums[0]\\n        rightSum = total - leftSum\\n        \\n        minAbs = [abs(math.floor(leftSum/1) - math.floor(rightSum/(n-1))),0]\\n        for i in range(1,n):\\n            leftSum += nums[i]\\n            rightSum = total - leftSum\\n            if(leftSum == total):\\n                temp = math.floor(abs(leftSum/(i+1)))\\n            else:\\n                temp = abs(math.floor(leftSum/(i+1)) - math.floor(rightSum/(n-i-1)))\\n            print(temp)\\n            if(temp < minAbs[0]):\\n                minAbs = [temp,i]\\n        return minAbs[1]\\n\\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875189,
                "title": "c-easy-clean-code-o-n-beginner-friendly",
                "content": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min_avg = INT_MAX, min_idx = 0;\\n        long long int sum_total = 0;\\n        for(int i = 0 ; i < nums.size(); i++)\\n        {\\n            sum_total += nums[i];\\n        }\\n        long long int r_sum = 0;\\n        int start = 0, end = 0;\\n        int r_idx = 1, n = nums.size();\\n        for(int i = 0 ; i < n; i++)\\n        {\\n            r_sum += nums[i];\\n            start = r_sum/r_idx;\\n            if(n - r_idx == 0)\\n                end = 0;\\n            else\\n                end = (sum_total - r_sum)/(n - r_idx);\\n            r_idx++;\\n            if(abs(start - end) < min_avg){\\n                min_avg = abs(start - end);\\n                min_idx = i;                \\n            }\\n        }\\n        return min_idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int min_avg = INT_MAX, min_idx = 0;\\n        long long int sum_total = 0;\\n        for(int i = 0 ; i < nums.size(); i++)\\n        {\\n            sum_total += nums[i];\\n        }\\n        long long int r_sum = 0;\\n        int start = 0, end = 0;\\n        int r_idx = 1, n = nums.size();\\n        for(int i = 0 ; i < n; i++)\\n        {\\n            r_sum += nums[i];\\n            start = r_sum/r_idx;\\n            if(n - r_idx == 0)\\n                end = 0;\\n            else\\n                end = (sum_total - r_sum)/(n - r_idx);\\n            r_idx++;\\n            if(abs(start - end) < min_avg){\\n                min_avg = abs(start - end);\\n                min_idx = i;                \\n            }\\n        }\\n        return min_idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875144,
                "title": "c-solution-easy-to-understand-clean-code",
                "content": "\\n# Code\\n```\\nclass Solution \\n{\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        if (nums.size() == 1) {\\n            return 0;\\n        }\\n\\t\\t\\n\\t\\t// Storing prefix sum\\n        vector<long long> sums;\\n        for (auto num : nums) {\\n            if(sums.size() == 0) {\\n                sums.push_back(num);\\n            }\\n            else {\\n                sums.push_back(sums.back() + num);\\n            }\\n        }\\n        \\n        long long idx = 0;\\n        long long f = nums[0], b = (sums.back() - nums[0]) / (sums.size() - 1), S = abs(b - f);\\n        \\n        for (long long i = 1; i < sums.size() - 1; i++) \\n        {\\n            f = sums[i] / (i + 1);\\n            b = (sums.back() - sums[i]) / (sums.size() - (i + 1));\\n            if (abs(f - b) < S) \\n            {\\n                S = abs(f - b);\\n                idx = i;\\n            }\\n        }\\n        \\n        if (sums.back() / sums.size() < S) \\n        {\\n            idx = sums.size() - 1;\\n        }\\n        \\n        return idx;                     \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) \\n    {\\n        if (nums.size() == 1) {\\n            return 0;\\n        }\\n\\t\\t\\n\\t\\t// Storing prefix sum\\n        vector<long long> sums;\\n        for (auto num : nums) {\\n            if(sums.size() == 0) {\\n                sums.push_back(num);\\n            }\\n            else {\\n                sums.push_back(sums.back() + num);\\n            }\\n        }\\n        \\n        long long idx = 0;\\n        long long f = nums[0], b = (sums.back() - nums[0]) / (sums.size() - 1), S = abs(b - f);\\n        \\n        for (long long i = 1; i < sums.size() - 1; i++) \\n        {\\n            f = sums[i] / (i + 1);\\n            b = (sums.back() - sums[i]) / (sums.size() - (i + 1));\\n            if (abs(f - b) < S) \\n            {\\n                S = abs(f - b);\\n                idx = i;\\n            }\\n        }\\n        \\n        if (sums.back() / sums.size() < S) \\n        {\\n            idx = sums.size() - 1;\\n        }\\n        \\n        return idx;                     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2875135,
                "title": "c-solution-tc-o-n-sc-o-n",
                "content": "1st Approach using Prefix and Postfix: \\nTC: O(N)\\nSC: O(N) + O(N)\\n```\\nclass Solution {\\n#define ll long long\\npublic:\\n\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\tint n = nums.size();\\n\\t\\tpair<int, int> res = {INT_MAX, 0};\\n\\t\\tvector<ll > prefix(n + 1, 0), postfix(n + 1, 0);\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n\\t\\t\\tprefix[i] = prefix[i - 1] + nums[i - 1];\\n\\t\\t\\tpostfix[n - i] = postfix[n - i + 1] + nums[n - i];\\n\\t\\t}\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n            int div = n - i;\\n            div == 0 ? div = 1 : div;\\n\\t\\t\\tint left = prefix[i] / i;\\n\\t\\t\\tint right = postfix[i] / div;\\n\\t\\t\\tint temp = abs(left - right);\\n\\t\\t\\tif (res.first > temp)\\n\\t\\t\\t\\tres = {temp, i - 1};\\n\\t\\t}\\n\\t\\treturn res.second;\\n\\t}\\n};\\n```\\n\\n2nd Approach using Prefix sum:\\nTC: O(N)\\nSC: O(N)\\n\\n```\\nclass Solution {\\n#define ll long long\\npublic:\\n\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\tint n = nums.size();\\n\\t\\tpair<int, int> res = {INT_MAX, 0};\\n\\t\\tvector<ll > prefix(n + 1, 0);\\n\\t\\tfor (int i = 1; i <= n; ++i)\\n\\t\\t\\tprefix[i] = prefix[i - 1] + nums[i - 1];\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n\\t\\t\\tint div = n - i;\\n\\t\\t\\tdiv == 0 ? div = 1 : div;\\n\\t\\t\\tint left = prefix[i] / i;\\n\\t\\t\\tint right = (prefix[n] - prefix[i]) / div;\\n\\t\\t\\tint temp = abs(left - right);\\n\\t\\t\\tif (res.first > temp)\\n\\t\\t\\t\\tres = {temp, i - 1};\\n\\t\\t}\\n\\t\\treturn res.second;\\n\\t}\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\n#define ll long long\\npublic:\\n\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\tint n = nums.size();\\n\\t\\tpair<int, int> res = {INT_MAX, 0};\\n\\t\\tvector<ll > prefix(n + 1, 0), postfix(n + 1, 0);\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n\\t\\t\\tprefix[i] = prefix[i - 1] + nums[i - 1];\\n\\t\\t\\tpostfix[n - i] = postfix[n - i + 1] + nums[n - i];\\n\\t\\t}\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n            int div = n - i;\\n            div == 0 ? div = 1 : div;\\n\\t\\t\\tint left = prefix[i] / i;\\n\\t\\t\\tint right = postfix[i] / div;\\n\\t\\t\\tint temp = abs(left - right);\\n\\t\\t\\tif (res.first > temp)\\n\\t\\t\\t\\tres = {temp, i - 1};\\n\\t\\t}\\n\\t\\treturn res.second;\\n\\t}\\n};\\n```\n```\\nclass Solution {\\n#define ll long long\\npublic:\\n\\tint minimumAverageDifference(vector<int>& nums) {\\n\\t\\tint n = nums.size();\\n\\t\\tpair<int, int> res = {INT_MAX, 0};\\n\\t\\tvector<ll > prefix(n + 1, 0);\\n\\t\\tfor (int i = 1; i <= n; ++i)\\n\\t\\t\\tprefix[i] = prefix[i - 1] + nums[i - 1];\\n\\t\\tfor (int i = 1; i <= n; ++i) {\\n\\t\\t\\tint div = n - i;\\n\\t\\t\\tdiv == 0 ? div = 1 : div;\\n\\t\\t\\tint left = prefix[i] / i;\\n\\t\\t\\tint right = (prefix[n] - prefix[i]) / div;\\n\\t\\t\\tint temp = abs(left - right);\\n\\t\\t\\tif (res.first > temp)\\n\\t\\t\\t\\tres = {temp, i - 1};\\n\\t\\t}\\n\\t\\treturn res.second;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874932,
                "title": "easy-code-with-explanation",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n//prefix array based question\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long long>pre(nums.size(),0);\\n        pre[0]=nums[0];\\n        for(long long i=1;i<nums.size();i++)\\n        {\\n            pre[i]=pre[i-1]+nums[i];\\n        }\\n        long long ans=LONG_MAX;\\n        int index=0;\\n        long long sum=accumulate(nums.begin(),nums.end(),0LL);//0LL as we want it in long long \\n        //sum -pre[i] will work as suffix array\\n        for(long long i=0;i<nums.size();i++)\\n        {\\n            long long left=0,right=0;\\n             left=pre[i]/(i+1);\\n             if(nums.size()-1-i>0)//to prevent from divide by zero \\n             right=(sum-pre[i])/(nums.size()-1-i);\\n            // cout<<left<<\" \"<<right<<endl;\\n            long long vali=abs(left-right);\\n           if(ans>vali)\\n           {\\n               ans=vali;\\n               index=i;\\n           }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n//prefix array based question\\n    int minimumAverageDifference(vector<int>& nums) {\\n        vector<long long>pre(nums.size(),0);\\n        pre[0]=nums[0];\\n        for(long long i=1;i<nums.size();i++)\\n        {\\n            pre[i]=pre[i-1]+nums[i];\\n        }\\n        long long ans=LONG_MAX;\\n        int index=0;\\n        long long sum=accumulate(nums.begin(),nums.end(),0LL);//0LL as we want it in long long \\n        //sum -pre[i] will work as suffix array\\n        for(long long i=0;i<nums.size();i++)\\n        {\\n            long long left=0,right=0;\\n             left=pre[i]/(i+1);\\n             if(nums.size()-1-i>0)//to prevent from divide by zero \\n             right=(sum-pre[i])/(nums.size()-1-i);\\n            // cout<<left<<\" \"<<right<<endl;\\n            long long vali=abs(left-right);\\n           if(ans>vali)\\n           {\\n               ans=vali;\\n               index=i;\\n           }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2874927,
                "title": "c-prefix-sum-faster-easy-to-understand",
                "content": "* ***Using Prefix Sum***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // calculate total sum of nums\\n        \\n        long long total_sum = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            total_sum += nums[i];\\n        }\\n        \\n        long long curr_sum = 0;\\n        \\n        long long mini = INT_MAX;\\n        \\n        int min_idx = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            curr_sum += nums[i];\\n            \\n            // calculate average of first (i + 1) elements\\n            \\n            long long left_avg = curr_sum / (i + 1);\\n            \\n            // claculate average of last (n - i - 1) elements\\n            \\n            long long right_avg = 0;\\n            \\n            // there should be atleast one element on right side\\n            \\n            if(n - i - 1 > 0)\\n            {\\n                right_avg = (total_sum - curr_sum) / (n - i - 1); \\n            }\\n            \\n            // find the absolute diff. of left part and right part\\n            \\n            // then update the result\\n            \\n            if(abs(left_avg - right_avg) < mini)\\n            {\\n                mini = abs(left_avg - right_avg);\\n                \\n                min_idx = i;\\n            }\\n        }\\n        \\n        return min_idx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // calculate total sum of nums\\n        \\n        long long total_sum = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            total_sum += nums[i];\\n        }\\n        \\n        long long curr_sum = 0;\\n        \\n        long long mini = INT_MAX;\\n        \\n        int min_idx = 0;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            curr_sum += nums[i];\\n            \\n            // calculate average of first (i + 1) elements\\n            \\n            long long left_avg = curr_sum / (i + 1);\\n            \\n            // claculate average of last (n - i - 1) elements\\n            \\n            long long right_avg = 0;\\n            \\n            // there should be atleast one element on right side\\n            \\n            if(n - i - 1 > 0)\\n            {\\n                right_avg = (total_sum - curr_sum) / (n - i - 1); \\n            }\\n            \\n            // find the absolute diff. of left part and right part\\n            \\n            // then update the result\\n            \\n            if(abs(left_avg - right_avg) < mini)\\n            {\\n                mini = abs(left_avg - right_avg);\\n                \\n                min_idx = i;\\n            }\\n        }\\n        \\n        return min_idx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874919,
                "title": "time-o-n-space-o-1-short-and-simple",
                "content": "**Time: O(n), Space: O(n)**\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long>left(n);\\n        left[0] = nums[0];\\n        for (auto i = 1; i < n; i++){\\n            left[i] = nums[i] + left[i-1];\\n        }\\n        long long ans = LLONG_MAX, index = 0;\\n        for (auto i = 0; i < n; i++){\\n            long long a = left[i] / (i + 1);\\n            long long b = i < n-1? (left[n-1] - left[i]) / (n - i - 1): 0;\\n            if (ans > abs(a-b)){\\n                ans = abs(a-b), index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```\\n\\n**Time: O(n), Space: O(1)**\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        long long sum = 0, curSum = 0;\\n        for (auto i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n        long long ans = LLONG_MAX, index = 0;\\n        for (auto i = 0; i < n; i++){\\n            curSum += nums[i];\\n            long long a = curSum / (i + 1);\\n            long long b = i < n-1? (sum - curSum) / (n - i - 1): 0;\\n            if (ans > abs(a-b)){\\n                ans = abs(a-b), index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        vector<long long>left(n);\\n        left[0] = nums[0];\\n        for (auto i = 1; i < n; i++){\\n            left[i] = nums[i] + left[i-1];\\n        }\\n        long long ans = LLONG_MAX, index = 0;\\n        for (auto i = 0; i < n; i++){\\n            long long a = left[i] / (i + 1);\\n            long long b = i < n-1? (left[n-1] - left[i]) / (n - i - 1): 0;\\n            if (ans > abs(a-b)){\\n                ans = abs(a-b), index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n = nums.size();\\n        long long sum = 0, curSum = 0;\\n        for (auto i = 0; i < n; i++){\\n            sum += nums[i];\\n        }\\n        long long ans = LLONG_MAX, index = 0;\\n        for (auto i = 0; i < n; i++){\\n            curSum += nums[i];\\n            long long a = curSum / (i + 1);\\n            long long b = i < n-1? (sum - curSum) / (n - i - 1): 0;\\n            if (ans > abs(a-b)){\\n                ans = abs(a-b), index = i;\\n            }\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874881,
                "title": "java-solution-using-prefix-sum",
                "content": "# Code\\n```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum1 = 0l;\\n        int len = nums.length;\\n        \\n        for(int i=0;i<len;i++) sum1+=nums[i];\\n        \\n        long sum2 = 0l;\\n        long min = Integer.MAX_VALUE;\\n        int minIdx = 0;\\n\\n        for(int i=0;i<len;i++){\\n            sum2+=nums[i];\\n\\n            long ksum = Math.abs(sum1-sum2);\\n            int d1 = i+1;\\n            int d2 = len-i-1;\\n            long m = 0l;\\n\\n            try{\\n                m = Math.abs((sum2/d1) - (ksum/d2));\\n            }catch(Exception e){\\n                m = Math.abs(sum2/d1);\\n            }\\n                        \\n            if(m<min){\\n                min = m;\\n                minIdx = i;\\n            }\\n        }\\n        return minIdx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        long sum1 = 0l;\\n        int len = nums.length;\\n        \\n        for(int i=0;i<len;i++) sum1+=nums[i];\\n        \\n        long sum2 = 0l;\\n        long min = Integer.MAX_VALUE;\\n        int minIdx = 0;\\n\\n        for(int i=0;i<len;i++){\\n            sum2+=nums[i];\\n\\n            long ksum = Math.abs(sum1-sum2);\\n            int d1 = i+1;\\n            int d2 = len-i-1;\\n            long m = 0l;\\n\\n            try{\\n                m = Math.abs((sum2/d1) - (ksum/d2));\\n            }catch(Exception e){\\n                m = Math.abs(sum2/d1);\\n            }\\n                        \\n            if(m<min){\\n                min = m;\\n                minIdx = i;\\n            }\\n        }\\n        return minIdx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874847,
                "title": "c-solution-using-prefix-sum-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<long> pre(n);\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++){\\n            pre[i]=pre[i-1]+nums[i];\\n        }\\n        vector<pair<long,long>> vp;\\n        for(int i=0;i<n-1;i++){\\n            long r1=pre[i]/(i+1);\\n            long r2=(pre[n-1]-pre[i])/(n-i-1);\\n            long res=abs(r1-r2);\\n            vp.push_back({res,i});\\n        }\\n        vp.push_back({pre[n-1]/n,n-1});\\n        sort(vp.begin(),vp.end());\\n        return vp[0].second;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n        int n=nums.size();\\n        vector<long> pre(n);\\n        pre[0]=nums[0];\\n        for(int i=1;i<n;i++){\\n            pre[i]=pre[i-1]+nums[i];\\n        }\\n        vector<pair<long,long>> vp;\\n        for(int i=0;i<n-1;i++){\\n            long r1=pre[i]/(i+1);\\n            long r2=(pre[n-1]-pre[i])/(n-i-1);\\n            long res=abs(r1-r2);\\n            vp.push_back({res,i});\\n        }\\n        vp.push_back({pre[n-1]/n,n-1});\\n        sort(vp.begin(),vp.end());\\n        return vp[0].second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874841,
                "title": "golang",
                "content": "```go\\nfunc minimumAverageDifference(nums []int) int {\\n\\tn, total := len(nums), 0\\n\\tfor _, num := range nums {\\n\\t\\ttotal += num\\n\\t}\\n\\tmin, prefix, idx := total, 0, 0\\n\\tfor i := 0; i < n-1; i++ {\\n\\t\\tprefix += nums[i]\\n\\t\\tcur := prefix/(i+1) - (total-prefix)/(n-i-1)\\n\\t\\tif cur < 0 {\\n\\t\\t\\tcur = -cur\\n\\t\\t}\\n\\t\\tif cur < min {\\n\\t\\t\\tmin, idx = cur, i\\n\\t\\t}\\n\\t}\\n\\tif total/n < min {\\n\\t\\treturn n - 1\\n\\t}\\n\\treturn idx\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc minimumAverageDifference(nums []int) int {\\n\\tn, total := len(nums), 0\\n\\tfor _, num := range nums {\\n\\t\\ttotal += num\\n\\t}\\n\\tmin, prefix, idx := total, 0, 0\\n\\tfor i := 0; i < n-1; i++ {\\n\\t\\tprefix += nums[i]\\n\\t\\tcur := prefix/(i+1) - (total-prefix)/(n-i-1)\\n\\t\\tif cur < 0 {\\n\\t\\t\\tcur = -cur\\n\\t\\t}\\n\\t\\tif cur < min {\\n\\t\\t\\tmin, idx = cur, i\\n\\t\\t}\\n\\t}\\n\\tif total/n < min {\\n\\t\\treturn n - 1\\n\\t}\\n\\treturn idx\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2874839,
                "title": "video",
                "content": "# Intuition & Approach\\n<!-- Describe your approach to solving the problem. -->\\nhttps://youtu.be/62lqCxl1WdI\\n\\uD835\\uDDE3\\uD835\\uDDF9\\uD835\\uDDF2\\uD835\\uDDEE\\uD835\\uDE00\\uD835\\uDDF2 \\uD835\\uDDF1\\uD835\\uDDFF\\uD835\\uDDFC\\uD835\\uDDFD \\uD835\\uDDF0\\uD835\\uDDFC\\uD835\\uDDFA\\uD835\\uDDFA\\uD835\\uDDF2\\uD835\\uDDFB\\uD835\\uDE01\\uD835\\uDE00 \\uD835\\uDDEE\\uD835\\uDDFB\\uD835\\uDDF1 \\uD835\\uDDF3\\uD835\\uDDF2\\uD835\\uDDF2\\uD835\\uDDF1\\uD835\\uDDEF\\uD835\\uDDEE\\uD835\\uDDF0\\uD835\\uDDF8 \\uD835\\uDDF3\\uD835\\uDDFC\\uD835\\uDDFF \\uD835\\uDDF6\\uD835\\uDDFA\\uD835\\uDDFD\\uD835\\uDDFF\\uD835\\uDDFC\\uD835\\uDE03\\uD835\\uDDF2\\uD835\\uDDFA\\uD835\\uDDF2\\uD835\\uDDFB\\uD835\\uDE01\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar minimumAverageDifference = function(nums) {\\n    let sum1 = 0;\\n    let sum2 = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        sum2 += nums[i];\\n    }\\n\\n    let n1 = 0;\\n    let n2 = nums.length;\\n    let minDiff = Infinity;\\n    let res = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n        sum1 += nums[i];\\n        n1++;\\n        sum2 -= nums[i];\\n        n2--;\\n        let absDiff = Math.abs(parseInt(sum1/n1) - parseInt(sum2/(n2||1)));\\n        if (minDiff > absDiff) {\\n            minDiff = absDiff;\\n            res = i;\\n        }\\n    }\\n    return res;\\n};\\n\\n/*\\n i\\n[2,5,3,9,5,3]\\n\\ni = 3\\n\\navg1 = (2+5+3+9) / 4 = 4\\navg2 = (5+3)/2 = 4\\n\\ndiff = Abs(4 - 4) = 0\\n\\n\\n\\n*/\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar minimumAverageDifference = function(nums) {\\n    let sum1 = 0;\\n    let sum2 = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        sum2 += nums[i];\\n    }\\n\\n    let n1 = 0;\\n    let n2 = nums.length;\\n    let minDiff = Infinity;\\n    let res = 0;\\n    for (let i = 0; i < nums.length; i++) {\\n        sum1 += nums[i];\\n        n1++;\\n        sum2 -= nums[i];\\n        n2--;\\n        let absDiff = Math.abs(parseInt(sum1/n1) - parseInt(sum2/(n2||1)));\\n        if (minDiff > absDiff) {\\n            minDiff = absDiff;\\n            res = i;\\n        }\\n    }\\n    return res;\\n};\\n\\n/*\\n i\\n[2,5,3,9,5,3]\\n\\ni = 3\\n\\navg1 = (2+5+3+9) / 4 = 4\\navg2 = (5+3)/2 = 4\\n\\ndiff = Abs(4 - 4) = 0\\n\\n\\n\\n*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2874771,
                "title": "rust-elixir-maintain-left-sum-and-right-sum",
                "content": "Seems there is overflow for i32 so use i64 to store sum.\\nThere is division by zero issue when i = n - 1, so use `1i64.max()` on the denominator to avoid it.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Rust\\n```rust\\nimpl Solution {\\n    pub fn minimum_average_difference(nums: Vec<i32>) -> i32 {\\n        let mut left = 0;\\n        let mut right = nums.iter().map(|&x| x as i64).sum::<i64>();\\n        let mut ans = 0;\\n        let mut min = i64::MAX;\\n        for i in 0..nums.len() {\\n            left += nums[i] as i64;\\n            right -= nums[i] as i64;\\n            let diff = (left / (i + 1) as i64 - right / 1i64.max((nums.len() - i - 1) as i64)).abs();\\n            if diff < min {\\n                ans = i as i32;\\n                min = diff;\\n            }\\n        }\\n        ans\\n    }\\n}\\n```\\n# Elixir\\n```elixir\\ndefmodule Solution do\\n  @spec minimum_average_difference(nums :: [integer]) :: integer\\n  def minimum_average_difference(nums) do\\n    n = length(nums)\\n    sum = Enum.sum(nums)\\n    Enum.scan(nums, {0, sum}, fn x, {left, right} -> {left + x, right - x} end)\\n    |> Enum.with_index()\\n    |> Enum.map(fn {{left, right}, i} ->\\n      diff =\\n        floor(left / (i + 1)) - floor(right / max(n - i - 1, 1))\\n        |> abs()\\n      {diff, i}\\n    end)\\n    |> Enum.min()\\n    |> elem(1)\\n  end\\nend\\n```",
                "solutionTags": [
                    "Rust",
                    "Elixir"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn minimum_average_difference(nums: Vec<i32>) -> i32 {\\n        let mut left = 0;\\n        let mut right = nums.iter().map(|&x| x as i64).sum::<i64>();\\n        let mut ans = 0;\\n        let mut min = i64::MAX;\\n        for i in 0..nums.len() {\\n            left += nums[i] as i64;\\n            right -= nums[i] as i64;\\n            let diff = (left / (i + 1) as i64 - right / 1i64.max((nums.len() - i - 1) as i64)).abs();\\n            if diff < min {\\n                ans = i as i32;\\n                min = diff;\\n            }\\n        }\\n        ans\\n    }\\n}\\n```\n```elixir\\ndefmodule Solution do\\n  @spec minimum_average_difference(nums :: [integer]) :: integer\\n  def minimum_average_difference(nums) do\\n    n = length(nums)\\n    sum = Enum.sum(nums)\\n    Enum.scan(nums, {0, sum}, fn x, {left, right} -> {left + x, right - x} end)\\n    |> Enum.with_index()\\n    |> Enum.map(fn {{left, right}, i} ->\\n      diff =\\n        floor(left / (i + 1)) - floor(right / max(n - i - 1, 1))\\n        |> abs()\\n      {diff, i}\\n    end)\\n    |> Enum.min()\\n    |> elem(1)\\n  end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2874767,
                "title": "readable-100-swift-solution-w-comments",
                "content": "```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        \\n        // Result for 0 or 1 element array will always be 0\\n        guard nums.count > 1 else { return 0 }\\n        \\n        // Total value of all elements of nums added up\\n        let total = nums.reduce(0, +)\\n        var left = 0\\n        var right = total\\n        \\n        // Will be nil until first iteration\\n        var minimum: (Int, Int)?\\n        \\n        for i in 0..<nums.count-1 {\\n            left += nums[i]\\n            right -= nums[i]\\n            let avgDiff = abs(left/(i+1) - right/(nums.count-i-1))\\n            if minimum != nil, avgDiff < minimum!.1 {\\n                minimum = (i, avgDiff)\\n            } else if minimum == nil {\\n                minimum = (i, avgDiff)\\n            }\\n        }\\n        \\n        // Last iteration separated due to divide by 0\\n        let avgDiff = abs(total/nums.count)\\n        if avgDiff < minimum!.1 {\\n            minimum = (nums.count-1, avgDiff)\\n        }\\n        \\n        return minimum!.0\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    func minimumAverageDifference(_ nums: [Int]) -> Int {\\n        \\n        // Result for 0 or 1 element array will always be 0\\n        guard nums.count > 1 else { return 0 }\\n        \\n        // Total value of all elements of nums added up\\n        let total = nums.reduce(0, +)\\n        var left = 0\\n        var right = total\\n        \\n        // Will be nil until first iteration\\n        var minimum: (Int, Int)?\\n        \\n        for i in 0..<nums.count-1 {\\n            left += nums[i]\\n            right -= nums[i]\\n            let avgDiff = abs(left/(i+1) - right/(nums.count-i-1))\\n            if minimum != nil, avgDiff < minimum!.1 {\\n                minimum = (i, avgDiff)\\n            } else if minimum == nil {\\n                minimum = (i, avgDiff)\\n            }\\n        }\\n        \\n        // Last iteration separated due to divide by 0\\n        let avgDiff = abs(total/nums.count)\\n        if avgDiff < minimum!.1 {\\n            minimum = (nums.count-1, avgDiff)\\n        }\\n        \\n        return minimum!.0\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874766,
                "title": "straightforward-and-detailed-solution-o-n",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate a prefix sum array. Then iterate through the prefix sum array  to obtain the averages. Then we simply check if this average is the minAvg so far. I have outlined an equation which can be used to solve this.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        # pesudo code:\\n\\n        # prefix sum array\\n        # [2, 7, 10, 19, 24, 27]\\n\\n        # n = 6\\n        # i = 0\\n        # equation: |(num[i] // i+1) - (nums[n-1] - nums[i] / n - i + 1)|\\n        # |2 -  ((27 - 2) / 5)|\\n        # |2 - 5| \\n        # 3\\n\\n        # (7 // 2) \\n\\n        n = len(nums)\\n        prefix = [nums[0]]\\n        minDiff = float(\"inf\")\\n        idx = 0\\n\\n        # compute the prefix sum of the array\\n        for i in range(1, n):\\n            prefix.append(prefix[-1] + nums[i])\\n        \\n        # find the min difference average\\n        for i in range(n):\\n            \\n            first = prefix[i] // (i+1)\\n            second = 0\\n\\n            if (n - i - 1) > 0:\\n                second = (prefix[n-1] - prefix[i]) // (n - i - 1)\\n\\n            avg = abs(first - second)\\n            \\n            if avg < minDiff:\\n                idx = i\\n                minDiff = avg\\n            \\n        return idx\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution:\\n    def minimumAverageDifference(self, nums: List[int]) -> int:\\n        \\n        # pesudo code:\\n\\n        # prefix sum array\\n        # [2, 7, 10, 19, 24, 27]\\n\\n        # n = 6\\n        # i = 0\\n        # equation: |(num[i] // i+1) - (nums[n-1] - nums[i] / n - i + 1)|\\n        # |2 -  ((27 - 2) / 5)|\\n        # |2 - 5| \\n        # 3\\n\\n        # (7 // 2) \\n\\n        n = len(nums)\\n        prefix = [nums[0]]\\n        minDiff = float(\"inf\")\\n        idx = 0\\n\\n        # compute the prefix sum of the array\\n        for i in range(1, n):\\n            prefix.append(prefix[-1] + nums[i])\\n        \\n        # find the min difference average\\n        for i in range(n):\\n            \\n            first = prefix[i] // (i+1)\\n            second = 0\\n\\n            if (n - i - 1) > 0:\\n                second = (prefix[n-1] - prefix[i]) // (n - i - 1)\\n\\n            avg = abs(first - second)\\n            \\n            if avg < minDiff:\\n                idx = i\\n                minDiff = avg\\n            \\n        return idx\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1704602,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705021,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704615,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704945,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705261,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704609,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704528,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705700,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1709078,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1713403,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704602,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705021,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704615,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704945,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705261,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704609,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1704528,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705700,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1709078,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1713403,
                "content": [
                    {
                        "username": "Yiiipu",
                        "content": "This one looks so simple but many weird things happen during submission "
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "True, the integer overflow"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Remember that the minimumAverageDifference is an absolute value. It can't get better than 0! Return the index if it is found. Lets not iterate through that entire array of length 10^5 :)"
                    },
                    {
                        "username": "2uringTested",
                        "content": "wow, thanks for the tip mate, improved my run time a lot!"
                    },
                    {
                        "username": "louis1204",
                        "content": "If you\\'re using DP to store prefix sums, watch out for integer overflow as that bit me in behind."
                    },
                    {
                        "username": "louis1204",
                        "content": "[@wuxuanyi27](/wuxuanyi27) Use a bigger datatype to hold the prefix sums"
                    },
                    {
                        "username": "wuxuanyi27",
                        "content": "Same for me, debugging for a while..."
                    },
                    {
                        "username": "vera5433",
                        "content": "why it\\'s 0 not 1 for [0,1,0,1,0,1]?"
                    },
                    {
                        "username": "kunaljainwin",
                        "content": "i=3\\n2/4 and 1/2\\n\\n0 and 0\\ndiff ==0\\n\\nHope you can understand the case"
                    },
                    {
                        "username": "Zsix",
                        "content": "god this case took me lots of time!"
                    },
                    {
                        "username": "allen2221",
                        "content": "maybe you can try to use \"//\" to replace \"/\""
                    },
                    {
                        "username": "WillTsai",
                        "content": "You should \"round down\" the average before calculating the difference."
                    },
                    {
                        "username": "cheetha_lc",
                        "content": "If most of the test cases are passing and only few are failing - consider changing your data type from int to long"
                    },
                    {
                        "username": "white_trenton91",
                        "content": "Yep, this worked for me. The integer overflow is super tricky on this one."
                    },
                    {
                        "username": "monapriya",
                        "content": "It worked, thanks. My approach was right but still got wrong answers. And as soon as I changed the data type to long, my solution got accepted."
                    },
                    {
                        "username": "heenahmed08",
                        "content": "Thank you so much, I was really confused though my logic was correct still larger testcases were failing. Type conversion really helped."
                    },
                    {
                        "username": "crocodilehy",
                        "content": "why [4,2,0] output is 2?  4/1 - (2+0)/2 = 4 - 1 = 3          (4+2)/2 - 0/1 = 3-0 = 0, return minimum index should be 0?"
                    },
                    {
                        "username": "davidaviadh",
                        "content": "if the index is equal to the length of the list it returns the mean of the list minus zero. in this case 2. so at index 2 = len(nums) the output is 2."
                    },
                    {
                        "username": "vinayagarwal360",
                        "content": "i = 0  -->  (4)/1 - (2+0)/2 = 3\\ni = 1  -->  (4+2)/2 - (0)/1 = 3\\ni = 2  -->  (4+2+0)/3 - 0  = 2     <--Min "
                    },
                    {
                        "username": "jiajingy",
                        "content": "output is 2 means that when your index is at 2 (in this case, last index, value 0):\\n(4+2+0)/3 = 6/3 = 2\\n\\nat index 0 average sum is 3 as you mentioned already\\nat index 1: (4+2)/2 - 0/1 = 3 - 0 = 3"
                    },
                    {
                        "username": "nghiadq",
                        "content": "why nums=[1] output is 0 ?? it must be |1/1 - 0| = 1"
                    },
                    {
                        "username": "Msey",
                        "content": "it\\'s all about index"
                    },
                    {
                        "username": "Nishant_kumar_54",
                        "content": "try to use floor division\\n"
                    },
                    {
                        "username": "nasa_18",
                        "content": "Because its ask for index and index of ans is 0"
                    },
                    {
                        "username": "mrlizhuoyou",
                        "content": "the result is expected to be the index"
                    },
                    {
                        "username": "Sakirty",
                        "content": "its asking for index"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "WTF is average difference of the last index??? WHY you concider average of ZERO elements to be zero??\\nThis is ridiculous"
                    },
                    {
                        "username": "NikitaVechtomov",
                        "content": "[@chazwinter](/chazwinter) we\\'re not comparing values but its average. How you determine average of zero elemets without div by zero?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "You can see in the problem that given an index i, you're supposed to compare the values UP TO i, with the rest of the values, even if there are no other values. Even in the 6 value array, the last comparison is to 0. So it's your job to make sure you can even compare a single value to 0. If you can't do it, that's not the problem's fault. \nHint: \"if (i + 1 < nums.length)\""
                    },
                    {
                        "username": "esrujan",
                        "content": "Stumped me with the same question. Honestly, that is not clear at all. I mean it cannot be considered as the difference of average between some elements with some other elements."
                    },
                    {
                        "username": "chazwinter",
                        "content": "I hit the time limit on the case with a huge number of values in the array :(\nEDIT: Figured it out. My issue was that I kept calculating the totals over and over when it wasn't needed. The first total is just the actual first value in the array, and every total after that just adds the next number in the array to the existing total."
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "class Solution {\n    public int minimumAverageDifference(int[] nums)\n    {\n\t\tint sum = 0, temp = 0, result = 999999, result2= 0; \n        Integer[]  a = new Integer[nums.length];\n        \n\n        for (int i=0; i < nums.length ; i++) sum += nums[i];\n        \n        for (int i = 0; i < nums.length-1; i++) {\n            temp += nums[i];\n            sum -= nums[i];\n            a[i] = Math.abs(temp / (i+1) - sum / ((nums.length)-(i+1))) ;\n\n            if(a[i]<result)\n            {\n                result = a[i];\n                result2 = i;\n            }\n        }\n\n\n        temp += nums[(nums.length-1)];\n        a[(nums.length-1)] = Math.abs((temp / (nums.length))) ;\n        if((a[(nums.length-1)])<result)return (nums.length-1);\n\n        return result2;\n    }\n}\n\n\nthis is perfect program but not accepting at test case no .74 out of 77\ncan anyone help me....i have losted whole day on it....so sad"
                    },
                    {
                        "username": "KumarRaj123",
                        "content": "bhai declare every variable with long and at the time of returning typecast into int and also why are u using an extra array ??"
                    },
                    {
                        "username": "harsh_9389",
                        "content": "make result = INT_MAX; "
                    },
                    {
                        "username": "h766932",
                        "content": "[@Yongbi](/Yongbi) yes"
                    },
                    {
                        "username": "devanshumasodker357",
                        "content": "bro the constrains are 10^5 so when you perform sum operation then you need to use long datatype "
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@only_sarthak22](/only_sarthak22) Hello, \\nCheck round down and long for prefix sum, Integer overflow! "
                    }
                ]
            },
            {
                "id": 1705692,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1705308,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1705115,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 2006688,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1966886,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1892828,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1762286,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1714523,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1713378,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1708397,
                "content": [
                    {
                        "username": "ManjeetYdv",
                        "content": "Use long for prefixSum"
                    },
                    {
                        "username": "nexstar",
                        "content": "What if we don't have limitation for `0 <= nums[i] <= 10` and sum would overflow the maximum of type long(unsigned long either). How would you tackle this issue?"
                    },
                    {
                        "username": "SachinSensei",
                        "content": "we will decrease all numbers with a certain fixed number as all numbers difference would still remain same ..now you can do it without any overflow ...!"
                    },
                    {
                        "username": "Dhananjay40",
                        "content": "why in java it\\'s always complicated?"
                    },
                    {
                        "username": "chazwinter",
                        "content": "It\\'s almost like you\\'re training for a high paying job that not just anybody can do. If it\\'s not for you, that\\'s not a problem, though. There are other professions you can try."
                    },
                    {
                        "username": "PrateekGoel",
                        "content": "Its not Java, its way how you are using it."
                    },
                    {
                        "username": "nirutgupta",
                        "content": "python <3\\n"
                    },
                    {
                        "username": "advanced-bencoding",
                        "content": "Try C#"
                    },
                    {
                        "username": "Sabfo",
                        "content": "Test 73:\\nInput nums = [4, 2, 0], Expected = 2, My output = 0.\\nWhy expected index 2? They both have equal abs diff: (4 / 1 - (2 + 0) / 2) = 3 and ((4 + 2) / 2 - 0 / 1) = 3, but the smallest index is 0. So according to the description of problem the correct output is 0."
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": " format :   leftElem(count = i+1), right elem(count =n-i-1) , diff\n   for index 0 :          [ 4]                                                   [2,0]                                    3\n   for  index 1 :          [4,2]                                                  [0]                                    3 \n     index 2 :            [4,2,0]                                               null                                     2\nso min abs diff is min at index 2 which is of value 2\nhope u understand!"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "In prefix sum problems , we have to use correct DataType on keeping an eye on the constraints on range of array elemnts."
                    },
                    {
                        "username": "18013e",
                        "content": "It just takes forever to undertstand these long stupid descriptions"
                    },
                    {
                        "username": "SaikatDass",
                        "content": "74th testcase failed.. can anyone explain?"
                    },
                    {
                        "username": "NanoDragon",
                        "content": "class Solution {\\npublic:\\n    int minimumAverageDifference(vector<int>& nums) {\\n       int n = nums.size();\\n       if(n==1)\\n       return 0;\\n       long sum =0;\\n       long long h =0;\\n       long long c=0;\\n       long long p=0;\\n       long long result = INT_MAX;\\n       for(int i=0;i<n;i++)\\n           c= c+ nums[i];\\n       for(int i=0;i<n-1;i++)\\n       {\\n          h = nums[i]+h;\\n          int k = c-h;\\n          sum = abs((h/(i+1))-(k/(n-i-1)));\\n          if(sum<result)\\n             {\\n                  p = i;\\n                  result = sum;\\n             }\\n        \\n       }  \\n        sum = c/n;\\n        if(sum<result)\\n          return n-1;\\n       return p;\\n    }\\n};\\n75/78 tc are getting passed , please help me where i am going wrong?"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "Input\\nnums =[5,2]\\nOutput\\n1\\nExpected\\n0\\nwhy this happend?\\nbecause average differance is [3,10]...so my answer is correct but it show incorrect.....\\n"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "Average difference is not [3,10] rather [3,3] as for index 1, `right_avg=0` & `let_avg=(5+2)/2=3` and difference between them is 3.\nSince it is mentioned that If there are multiple such indices with same minimum value, return the smallest one, we return index 0."
                    },
                    {
                        "username": "Piyush_321",
                        "content": "I am getting this error i cannot figure out. \n\nLine 130: Char 39: runtime error: signed integer overflow: 2147453785 + 36049 cannot be represented in type 'int' (stl_numeric.h)\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_numeric.h:139:39\n\nBelow here[leetcode](https://leetcode.com) is my code :\nclass Solution {\npublic:\n    int minimumAverageDifference(vector<int>& nums) {\n        long long  total = accumulate(nums.begin(), nums.end(),0);\n         long long  sum =0;  long long f_avg , l_avg , avg , min_avg ; long long  res =0;\n        long long  n = nums.size();\n        vector<long long> average;\n        for(int i=0; i<n; i++){\n            sum = sum + nums[i];\n            f_avg = sum/(i+1);\n            if( i != n-1 ) { l_avg = (total-sum)/(n-i-1); }\n            else{l_avg = 0;}\n            avg = abs(f_avg - l_avg);\n            if(avg ==0){return i;}\n            if(i==0){ \n                average.push_back(avg);\n            }\n            else{ sort(average.begin(),average.end());\n                if(average[0]>avg){\n                    average.clear(); \n                    average.push_back(avg);\n                    res =i;\n                }\n            }\n        }\n        return res;\n    }\n};\n\nThanks in advance."
                    }
                ]
            },
            {
                "id": 1705651,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705650,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705338,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705220,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705204,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705160,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705114,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705045,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1705009,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            },
            {
                "id": 1704988,
                "content": [
                    {
                        "username": "serkora",
                        "content": "I think it would be quite helpful to add the first paragraph of the official solution to the problem description (e.g. \"find the index that splits the array into two parts most evenly\"). It explains what the problem is actually about MUCH clearer than the more algorithmic approach (i.e. that states how, and not broadly what needs to be done). That is more in the spirit of practicing coding problem, I think, as we are supposed to be learing and understanding various concepts that can they be applied to a broader range of problems that we might encounter at our jobs. And that means going from a generic idea (find a split point) to the specifics (sum values from 0 to i and from i+1 to n), rather than the other way around.\n\nI, for example, was quite confused by that descrition and lazy at the moment to understand wth do they want from me, so decided to get some hints and after reading that first paragraph immediately went back and solved it on the first try."
                    },
                    {
                        "username": "esrujan",
                        "content": "Why is the expected answer 2 for [4,2,0].\\nI can clearly see that it is 0.\\n\\nFor index 0: 4 - 1 = 3\\nFor index 1: 3 - 0 = 3\\nFor index 2: 3 - 0 = 3\\n\\nThe smallest index among 0, 1 and 2 is 0.\\n\\nCan some one please explain this?"
                    },
                    {
                        "username": "esrujan",
                        "content": "[@cnmeyer](/cnmeyer) Thanks for the response. It is clear to me now.\\n\\nThe problem is assuming that for the last index, the difference is calculated as absolute value of the average of all elements in the array. We are not subtracting anything from it.  Thanks again."
                    },
                    {
                        "username": "cnmeyer",
                        "content": "```text\\nIndex 0:\\nLower Average: |4/1=4|\\nUpper Average: |2/2=1|\\nDifference: |4-1| = 3\\nMinimum: 3(0)\\nIndex 1:\\nLower Average: |6/2=3|\\nUpper Average: |0/1=0|\\nDifference: |3-0| = 3\\nMinimum: 3(0)\\nIndex 2:\\nLower Average: |6/3=2|\\nUpper Average: |0/0=0|\\nDifference: |2-0| = 2\\nMinimum: 2(2)\\nMinimum average is: 2 at index: 2\\n```\\nHope this helps."
                    },
                    {
                        "username": "anupatirajashekar9219",
                        "content": "can anyone help me with this\\ni\\'m getting wrong output when input is [0,4,3,0,0]\\n\\n\\n\\n\\nclass Solution {\\n    public int minimumAverageDifference(int[] nums) {\\n        int l=nums.length;\\n        long [] sum=new long[l];\\n        long sum1=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            sum1=sum1+nums[i];\\n            sum[i]=sum1;\\n        }\\n        int indx=-1;\\n        int i=0;\\n        long min=Integer.MAX_VALUE;\\n        for(i=0;i<l-1;i++)\\n        {\\n            sum1=Math.abs(Math.abs(sum[i]/(i+1))-Math.abs((sum[l-1]-sum[i])/(l-i-1)));\\n            if(sum1==0)\\n            {\\n                indx=i;\\n                return i;\\n            }\\n            else if(sum1<min)\\n            {\\n                min=sum1;\\n                indx=i;\\n            }\\n        }\\n        sum1=Math.abs(sum[l-1]/l-1);\\n        if(sum1<min)\\n        {\\n            min=sum1;\\n            indx=i;\\n        }\\n        return indx;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "! Both averages should be rounded down to the nearest integer.\nYour current answer is 1, but if you round average(sum i - sum j), then the correct answer would be 0."
                    },
                    {
                        "username": "NeedGyan",
                        "content": "Just maintain startSum and endSum... iterate over the array and find minimum average.\\nMake sure to use \"long long\" in cpp because few testcases exceed \"int\" limits and cause overflow error."
                    },
                    {
                        "username": "kkmeena",
                        "content": "i do not know why i am getting wrong ans\\n\\npublic int minimumAverageDifference(int[] nums) {\\n\\n        int sum=0;\\n        for(int i=0;i<nums.length;i++) {\\n            sum=sum+nums[i];\\n        }\\n\\n        int index=0;\\n        int startsum=0;\\n        int endsum=sum;\\n        int size=nums.length;\\n        int min=Integer.MAX_VALUE;\\n\\n        for(int i=0;i<size;i++) {\\n\\n            startsum=startsum+nums[i];\\n            endsum=endsum-nums[i];\\n            int savg=startsum/(i+1);\\n            int eavg= i==size-1 ? 0 :endsum/(size-i-1);\\n            // System.out.println(\"index=\"+i+\" abs=\"+Math.abs(savg-eavg)+\" savg=\"+savg+\" eavg=\"+eavg);\\n            if(Math.abs(savg-eavg) < min) {\\n                min=Math.abs(savg-eavg);\\n                index=i;\\n            }\\n        }\\n        return index;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Both averages should be rounded down to the nearest integer!! and it might be due to Interger overflow:\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "only_sarthak22",
                        "content": "arr[i] = sum2 / (i+1) - sum / (nums.length-(i+1));   in this formula, when last part \\'(nums.length-(i+1)\\' is becoming a zero the it gives error, what shoud i do to prevent dividation with zero?     :("
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "[@Yongbi](/Yongbi)  right , thank u)"
                    },
                    {
                        "username": "Yongbi",
                        "content": "[@ABDUMALIK0](/ABDUMALIK0) \"If else\" in for loop it will check this condition every time.\\nJust change range(n)-> range(n-1), then performs outside loop one more conditional expression (avg=sum(nums)/n)."
                    },
                    {
                        "username": "ABDUMALIK0",
                        "content": "use ternary operator: for example in python (sum(nums) //  if len(nums) !=0 else 0)"
                    },
                    {
                        "username": "vdsyrocks",
                        "content": "the trick is in accumulate (for c++) while summing up - use 0L\\naccumulate(nums.begin(),nums.end(),0l)"
                    },
                    {
                        "username": "silent_voice143",
                        "content": " `your inline code...your inline code...`\\n\\nwhy my code getting wrong output ...it passes 80% testcases.....can someone help me to understand where i m doing mistake"
                    },
                    {
                        "username": "nikhil97agra",
                        "content": "use long to calculate sum......it is  because of integer overflow"
                    },
                    {
                        "username": "allen2221",
                        "content": "dude, u didnt post your code"
                    },
                    {
                        "username": "raj-rkv",
                        "content": "Question looks like very easy problem but after submission have to think a lot."
                    },
                    {
                        "username": "shubhamgulik80",
                        "content": "I was trying to solve this problem without using extra space.\\nThis code is passing 70-80% test cases.\\nBut failing after that.\\n\\nCan anyone please tell me why this is happening.\\n\\n\\n`class Solution {\\n        public int minimumAverageDifference(int[] a) {\\n           int n = a.length;\\n           System.out.println(n);\\n           if(n == 1) return 0;\\n\\n        long ans = Integer.MAX_VALUE;\\n        \\n        int sum = 0; // total sum\\n        for(int i=0; i<n; i++){\\n            sum += a[i];\\n        }\\n        int index = 0; // Index to return at end\\n        int preSum = 0; // initially preSum will be 0\\n        int postSum = sum; // initially postSum will be total sum\\n\\n        long avg1 = 0,avg2 = 0;\\n        \\n        for(int i=0; i <= a.length-1; i++){\\n\\n\\n            preSum = preSum + a[i]; // Will add current element in the preSum \\n            postSum = postSum - a[i]; // Delete current element from postSum\\n\\n            avg1 = Math.round(preSum/(i+1));\\n            \\n            if(n-i-1 == 0){\\n                avg2 = 0;\\n            }else{\\n                avg2 = Math.round(postSum/(n-i-1)) ;\\n            }\\n\\n            long abs = (long)Math.abs(avg1-avg2); // Absolute difference\\n            \\n            // If absolute diff is smaller than final answer then we\\'ll get it\\n            if(abs < ans){\\n                ans = abs;\\n                index = i; // update index if we get smaller absolute difference\\n            }\\n            \\n        }\\n        return index;\\n    }\\n` "
                    },
                    {
                        "username": "ManjeetYdv",
                        "content": "Its because of integer overflow . use long for presum and postsum "
                    },
                    {
                        "username": "Yongbi",
                        "content": "I think it might be due to Interger overflow:\\nnums[i]<= 10^5, len(nums) <=10^5 !!! sum(nums) <=10^10"
                    },
                    {
                        "username": "nirutgupta",
                        "content": "this looks good only, what is the failing test case ? you can try to dry run, there might be some bug."
                    }
                ]
            }
        ]
    }
]