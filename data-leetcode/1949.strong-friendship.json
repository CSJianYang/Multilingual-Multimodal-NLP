[
    {
        "title": "Strong Friendship",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1566702,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 1576888,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 1759883,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 1576702,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 1575809,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 2055390,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            },
            {
                "id": 1887778,
                "content": [
                    {
                        "username": "someguy22ee",
                        "content": "How do we expect to do this in a short time at FB interview? lol"
                    },
                    {
                        "username": "aghosh704",
                        "content": "Please help me understand this test case:\\n\\n{\"headers\":{\"Friendship\":[\"user1_id\",\"user2_id\"]},\"rows\":{\"Friendship\":[[4,12],[4,13],[1,4],[4,18],[4,6],[12,13],[2,12],[3,12],[7,12],[13,18],[1,2],[1,7],[2,7],[3,6],[6,18]]}}\\n\\nOutput {\"headers\": [\"user1_id\", \"user2_id\", \"common_friend\"], \"values\": [[1, 12, 3]]}\\n\\nExpected {\"headers\":[\"user1_id\",\"user2_id\",\"common_friend\"],\"values\":[]}\\n\\n1 is friend of 4,2 and 7 because [1,4] [1,2] [1,7]\\n12 is a friend of 4, 2 and 7 because [4, 12] [2, 12] [7, 12]\\n\\nHence common friends count = 3\\n\\nExpected = 0\\n\\nWhat am I missing?\\nThanks"
                    },
                    {
                        "username": "ruyee",
                        "content": "you are not wrong test case is wrong. 1 and 12 are not friends in this test case."
                    },
                    {
                        "username": "rajarshi777",
                        "content": "Wrong test case\\n\\nFriendship =\\n| user1_id | user2_id |\\n| -------- | -------- |\\n| 4        | 12       |\\n| 4        | 13       |\\n| 1        | 4        |\\n| 4        | 18       |\\n| 4        | 6        |\\n| 12       | 13       |\\n| 2        | 12       |\\n| 3        | 12       |\\n| 7        | 12       |\\n| 13       | 18       |\\n| 1        | 2        |\\n| 1        | 7        |\\n| 2        | 7        |\\n| 3        | 6        |\\n| 6        | 18       |\\n\\nAs per the given data above ,\\nfriend list of 1 and 12 are the ones as shown below\\n1 => 4,2,7\\n12 => 13,2,3,4,7\\nso, common friends are 2,4,7 and count = 3\\n\\n| USER1_ID | USER2_ID | COMMON_FRIEND |\\n| -------- | -------- | ------------- |\\n| 1        | 12       | 3             |\\n\\nbut the expected answer of the output is given as 0 \\n\\nThis test data is wrong\\n"
                    },
                    {
                        "username": "wbetheri",
                        "content": "Kept getting caught up -- missing the fact that user1 and user2 have to be friends in addition to having >= 3 common friends:\\n\\nwith friend_shipped \\nas\\n(\\nselect user1_id, user2_id from Friendship\\nunion all(\\nselect user2_id, user1_id from Friendship\\n)\\n) #This CTE makes sure we have friends both directions user1->user2 and user2->user1\\n\\nselect \\nuser1_friends.user1_id, \\nuser2_friends.user1_id as user2_id, \\ncount(distinct user2_friends.user2_id) as common_friend from \\nfriend_shipped user1_friends\\n#Inner join where:\\n#1) We have a common friend on both projections\\n#2) We aren\\'t the same user on the left\\n#3) We only compare left user_id < right user_id\\ninner join friend_shipped user2_friends\\non user1_friends.user2_id = user2_friends.user2_id\\nand user1_friends.user1_id <> user2_friends.user1_id\\nand user1_friends.user1_id < user2_friends.user1_id\\n#This inner join ensures that user1 and user2 are friends\\ninner join friend_shipped 3_friends\\non user1_friends.user1_id = 3_friends.user1_id and user2_friends.user1_id = 3_friends.user2_id\\ngroup by user1_friends.user1_id, user2_friends.user1_id\\nhaving count(distinct user2_friends.user2_id) >=3 #At least 3 common friends"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "with a as(\\nselect *\\nfrom Friendship\\nunion all\\nselect user2_id as user1_id, user1_id as user2_id\\nfrom Friendship)\\n\\nselect a1.user1_id, a1.user2_id, count(a2.user2_id) as common_friend\\nfrom a a1 join a a2\\non a1.user1_id = a2.user1_id and a1.user2_id != a2.user2_id\\njoin a a3\\non a1.user2_id = a3.user1_id and a2.user2_id = a3.user2_id\\nwhere a1.user1_id < a1.user2_id\\ngroup by a1.user1_id, a1.user2_id\\nhaving count(distinct a2.user2_id) >= 3"
                    },
                    {
                        "username": "zux106",
                        "content": "Why the expected output for the input data \n| user1_id | user2_id |\n| -------- | -------- |\n| 4        | 12       |\n| 4        | 13       |\n| 1        | 4        |\n| 4        | 18       |\n| 4        | 6        |\n| 12       | 13       |\n| 2        | 12       |\n| 3        | 12       |\n| 7        | 12       |\n| 13       | 18       |\n| 1        | 2        |\n| 1        | 7        |\n| 2        | 7        |\n| 3        | 6        |\n| 6        | 18       |\n\nshould be empty? I thought (as my attempted code gave) the correct output is\n\n| user1_id | user2_id | common_friend |\n| -------- | -------- | ------------- |\n| 1        | 12       | 3             |\n\nYet I couldn't pass this test case.  Could anyone please explain where I misunderstood? "
                    },
                    {
                        "username": "siwook955",
                        "content": "Is there any way to find an individual\\'s friends via GROUP_CONCAT?"
                    }
                ]
            }
        ]
    }
]