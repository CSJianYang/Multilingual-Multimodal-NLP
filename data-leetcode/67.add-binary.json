[
    {
        "title": "Add Binary",
        "question_content": "Given two binary strings a and b, return their sum as a binary string.\n&nbsp;\nExample 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"\nExample 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"\n&nbsp;\nConstraints:\n\n\t1 <= a.length, b.length <= 104\n\ta and b consist&nbsp;only of '0' or '1' characters.\n\tEach string does not contain leading zeros except for the zero itself.",
        "solutions": [
            {
                "id": 24488,
                "title": "short-ac-solution-in-java-with-explanation",
                "content": "    public class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder sb = new StringBuilder();\\n            int i = a.length() - 1, j = b.length() -1, carry = 0;\\n            while (i >= 0 || j >= 0) {\\n                int sum = carry;\\n                if (j >= 0) sum += b.charAt(j--) - '0';\\n                if (i >= 0) sum += a.charAt(i--) - '0';\\n                sb.append(sum % 2);\\n                carry = sum / 2;\\n            }\\n            if (carry != 0) sb.append(carry);\\n            return sb.reverse().toString();\\n        }\\n    }\\n\\nComputation from string usually can be simplified by using a carry as such.",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder sb = new StringBuilder();\\n            int i = a.length() - 1, j = b.length() -1, carry = 0;\\n            while (i >= 0 || j >= 0) {\\n                int sum = carry;\\n                if (j >= 0) sum += b.charAt(j--) - '0';\\n                if (i >= 0) sum += a.charAt(i--) - '0';\\n                sb.append(sum % 2);\\n                carry = sum / 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1679423,
                "title": "well-detailed-explaination-java-c-python-easy-for-mind-to-accept-it",
                "content": "```\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t# IMPORTANT INFO FOR YOU\\n```\\n* If, you are preperaing for `FACEBOOK interview` or will prepare. Then according to `LeetCode premium` it is no.4 most asked Question by **Facebook** as per now.\\n\\n**So Ladies n Gentlemen without any further due let\\'s start,**\\n`What question saying is, Given two binary strings a and b, return their sum as a binary string.`\\n\\n**Approach Explained :**\\n\\n**Summary of Below Explanation :**\\n\\n*The overall idea is to make up the short two strings with 00 to make the two strings have the same length, and then traverse and calculate from the end to get the final result.*\\n\\nLet\\'s understand with an **example** : Addition of **1 and 1** will lead to **carry 1** and **print 0** , Addition of **1 and 0** give us **1 as carry** will lead **print 0** , Addition of last remaning **carry 1** with no body will lead to **print 1** , So, we get something like **\"1 0 0\"** as answer\\nOne **key point** total addition will be 3 then print 1 and carry will remain 1\\n\\n**Detailed Explaination :**\\n\\nSo, first do we understand how do we perform **binary addition**. **Take an example**, given two numbers **\"11\" + \"1\"** where **\"11\"** is representing **\"3\"** & **\"1\"** is **\"1\"**, in decimal form. \\nNow let\\'s perform **binary addition** it\\'s very **similar to the decimal addition** that we do. In decimal what we do we add 2 numbers & if it goes beyond 9 we **take a carry**. And here also we have a **number in range 0 - 1**, **2 values over here** & in **Decimal range is 0 - 9**, **10 values** are there. So, in binary what it means is if result more **than 1**, there **is a carry** otherwise **no carry**.\\nLet me show you in diagram:\\n![image](https://assets.leetcode.com/users/images/fcd956d9-2703-41fe-90ad-57c49e227799_1641778567.285665.png)\\n\\n\\n* So, what\\'s going in diagram is **intially carry is \"0\"** we **add 1 + 1** we **get 2** which is more **then 1**, so there is a **carry of 1** and **result is 0**. Now we have **carry of 1**, **again 1 + 1 is 0**, and still left with **carry of 1**. And the **last carry** one will be **return as it is**. \\n* So, if you see this binary number it is **[2^2 * 1 + 2^1 * 0 + 2^0 * 0]** and this is the decimal coversion of **[1 0 0]** which **is 4**. \\n\\n![image](https://assets.leetcode.com/users/images/b12c2264-ddf0-4709-a761-4bfa3becdd95_1641779179.1482372.png)\\n\\n**Hope you got the point **\\n\\n*Now, let\\'s code it up:*\\n**code, each lne explained :** `Similar for C++, Java, Python` **{Only synatx difference}** approach is same\\n\\n* Step 1:\\n```\\n{\\n// First, create result name string and intially it is empty & in the end we gonna return it as our aswer\\n        StringBuilder res = new StringBuilder(); \\n        int i = a.length() - 1; // we crete i pointer for string a and we have to start adding from right to left \\n        int j = b.length() - 1; // similar pointer j for string b\\n        int carry = 0; // we create a carry, as we have to consider it as well\\n```\\n* Step 2:\\n```\\n// iterate over the loop until the both condition become false\\n        while(i >= 0 || j >= 0){ \\n            int sum = carry; // intialise our sum with carry;\\n            \\n            // Now, we subtract by \\'0\\' to convert the numbers from a char type into an int, so we can perform operations on the numbers\\n            if(i >= 0) sum += a.charAt(i--) - \\'0\\';\\n            if(j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            // taking carry;\\n            carry = sum > 1 ? 1 : 0; // getting carry depend on the quotient we get by dividing sum / 2 that will be our carry. Carry could be either 1 or 0 \\n\\t\\t\\t// if sum is 0 res is 1 & then carry would be 0;\\n            // if sum is 1 res is 1 & carry would be 0\\n            // if sum is 2 res is 0 & carry would be 1\\n            // if sum is 3 res is 1 & carry would be 1\\n            res.append(sum % 2); // just moduling the sum so, we can get remainder and add it into our result\\n        }\\n```\\n* Final Step:\\n```\\nif(carry != 0) res.append(carry); // we gonna add it into res until carry becomes 0;\\n        return res.reverse().toString(); // revese the answer we get & convt to string and return by the help of result;\\n```\\n* Let\\'s combine each line of code\\n\\n\\n**Java**\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder res = new StringBuilder();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a.charAt(i--) - \\'0\\';\\n            if(j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            res.append(sum % 2);\\n        }\\n        if(carry != 0) res.append(carry);\\n        return res.reverse().toString();\\n    }\\n}\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            res += to_string(sum % 2);\\n        }\\n        if(carry) res += to_string(carry);\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n```\\n**Python**\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        res = \"\"\\n        i, j, carry = len(a) - 1, len(b) - 1, 0\\n        while i >= 0 or j >= 0:\\n            sum = carry;\\n            if i >= 0 : sum += ord(a[i]) - ord(\\'0\\') # ord is use to get value of ASCII character\\n            if j >= 0 : sum += ord(b[j]) - ord(\\'0\\')\\n            i, j = i - 1, j - 1\\n            carry = 1 if sum > 1 else 0;\\n            res += str(sum % 2)\\n\\n        if carry != 0 : res += str(carry);\\n        return res[::-1]\\n```\\nANALYSIS :-\\n* **Time Complexity :-** BigO(max(M, N)), M & N is the length of string a, b;\\n\\n* **Space Complexity :-** BigO(max(M, N)), which is the size of \"res\" object\\n\\n**Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F**\\n`If you have some \\uD83E\\uDD14 doubts feel free to bug me`",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t# IMPORTANT INFO FOR YOU\\n```\n```\\n{\\n// First, create result name string and intially it is empty & in the end we gonna return it as our aswer\\n        StringBuilder res = new StringBuilder(); \\n        int i = a.length() - 1; // we crete i pointer for string a and we have to start adding from right to left \\n        int j = b.length() - 1; // similar pointer j for string b\\n        int carry = 0; // we create a carry, as we have to consider it as well\\n```\n```\\n// iterate over the loop until the both condition become false\\n        while(i >= 0 || j >= 0){ \\n            int sum = carry; // intialise our sum with carry;\\n            \\n            // Now, we subtract by \\'0\\' to convert the numbers from a char type into an int, so we can perform operations on the numbers\\n            if(i >= 0) sum += a.charAt(i--) - \\'0\\';\\n            if(j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            // taking carry;\\n            carry = sum > 1 ? 1 : 0; // getting carry depend on the quotient we get by dividing sum / 2 that will be our carry. Carry could be either 1 or 0 \\n\\t\\t\\t// if sum is 0 res is 1 & then carry would be 0;\\n            // if sum is 1 res is 1 & carry would be 0\\n            // if sum is 2 res is 0 & carry would be 1\\n            // if sum is 3 res is 1 & carry would be 1\\n            res.append(sum % 2); // just moduling the sum so, we can get remainder and add it into our result\\n        }\\n```\n```\\nif(carry != 0) res.append(carry); // we gonna add it into res until carry becomes 0;\\n        return res.reverse().toString(); // revese the answer we get & convt to string and return by the help of result;\\n```\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder res = new StringBuilder();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a.charAt(i--) - \\'0\\';\\n            if(j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            res.append(sum % 2);\\n        }\\n        if(carry != 0) res.append(carry);\\n        return res.reverse().toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            res += to_string(sum % 2);\\n        }\\n        if(carry) res += to_string(carry);\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        res = \"\"\\n        i, j, carry = len(a) - 1, len(b) - 1, 0\\n        while i >= 0 or j >= 0:\\n            sum = carry;\\n            if i >= 0 : sum += ord(a[i]) - ord(\\'0\\') # ord is use to get value of ASCII character\\n            if j >= 0 : sum += ord(b[j]) - ord(\\'0\\')\\n            i, j = i - 1, j - 1\\n            carry = 1 if sum > 1 else 0;\\n            res += str(sum % 2)\\n\\n        if carry != 0 : res += str(carry);\\n        return res[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24475,
                "title": "short-code-by-c",
                "content": "    class Solution\\n    {\\n    public:\\n        string addBinary(string a, string b)\\n        {\\n            string s = \"\";\\n            \\n            int c = 0, i = a.size() - 1, j = b.size() - 1;\\n            while(i >= 0 || j >= 0 || c == 1)\\n            {\\n                c += i >= 0 ? a[i --] - '0' : 0;\\n                c += j >= 0 ? b[j --] - '0' : 0;\\n                s = char(c % 2 + '0') + s;\\n                c /= 2;\\n            }\\n            \\n            return s;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution\\n    {\\n    public:\\n        string addBinary(string a, string b)\\n        {\\n            string s = \"\";\\n            \\n            int c = 0, i = a.size() - 1, j = b.size() - 1;\\n            while(i >= 0 || j >= 0 || c == 1)\\n            {\\n                c += i >= 0 ? a[i --] - '0' : 0;\\n                c += j >= 0 ? b[j --] - '0' : 0;\\n                s = char(c % 2 + '0') + s;\\n                c /= 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3183205,
                "title": "1ms-beats-100-full-explanation-append-reverse-c-java-python3",
                "content": "# Intuition :\\n- We have to add two binary numbers (made up of 0\\'s and 1\\'s) and returns the result in binary.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach :\\n- We start at the right end of each binary number, adding the digits and any carry-over value, and storing the result in a new string. \\n- Now we move to the next digit on the left and repeats the process until it has gone through all the digits in both binary numbers.\\n- If there is any carry-over value after adding all the digits,  append it to the end of the new string. \\n- Finally, the new string is reversed and returned as the sum of the two binary numbers.\\n<!-- Describe your approach to solving the problem. -->\\n# Explanation to Approach :\\n- Suppose we want to add two binary numbers - \"1010\" and \"1101\". \\n- To add these two numbers, we can use the given function as follows:\\n- First, we initialize a StringBuilder object to store the sum and two integer variables \\'carry\\' and \\'i\\' to keep track of the carry-over value and the current position in the first binary number (a), respectively. \\n- We also initialize another integer variable \\'j\\' to keep track of the current position in the second binary number (b). Here is how the code initializes these variables:\\n```\\nStringBuilder sb = new StringBuilder();\\nint carry = 0;\\nint i = a.length() - 1;\\nint j = b.length() - 1;\\n\\n```\\n- Next, we enter a while loop that iterates until we have processed all digits in both binary numbers and there is no more carry-over value left. In each iteration, we add the digits from both numbers at the current position and the carry-over value (if any), and append the result to the StringBuilder object. \\n- We also update the carry-over value based on the sum of the digits. Here is the code for this step:\\n```\\nwhile (i >= 0 || j >= 0 || carry == 1) {\\n    if (i >= 0) {\\n        carry += a.charAt(i--) - \\'0\\';\\n    }\\n    if (j >= 0) {\\n        carry += b.charAt(j--) - \\'0\\';\\n    }\\n    sb.append(carry % 2);\\n    carry /= 2;\\n}\\n\\n```\\n- In each iteration, the current position in each binary number is moved one digit to the left (if there are any digits left to process) by decrementing the value of i and j. \\n- If there is a carry-over value from the previous iteration or the addition of the two digits produces a carry-over value, we set the value of \\'carry\\' to 1; otherwise, we set it to 0. \\n- We also append the sum of the digits to the StringBuilder object by computing the remainder of \\'carry\\' divided by 2 (which is either 0 or 1). \\n- Finally, we update the value of \\'carry\\' by dividing it by 2 (which gives either 0 or 1) so that we can carry over any remaining value to the next iteration.\\n- After the while loop completes, we reverse the StringBuilder object and convert it to a string using the toString() method. \\n- This gives us the sum of the two binary numbers in binary format. Here is the final code:\\n```\\nreturn sb.reverse().toString();\\n\\n```\\n# Example : the sum of \"1010\" and \"1101\\n```\\n     1010\\n    +1101\\n    ______\\n    10111\\n```\\n\\n# Complexity\\n- Time complexity : O(max|a|,|b|)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(max|a|,|b|)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\\n# Codes [C++ |Java |Python3] \\n```C++ []\\nclass Solution {\\n public:\\n  string addBinary(string a, string b) {\\n    string ans;\\n    int carry = 0;\\n    int i = a.length() - 1;\\n    int j = b.length() - 1;\\n\\n    while (i >= 0 || j >= 0 || carry) {\\n      if (i >= 0)\\n        carry += a[i--] - \\'0\\';\\n      if (j >= 0)\\n        carry += b[j--] - \\'0\\';\\n      ans += carry % 2 + \\'0\\';\\n      carry /= 2;\\n    }\\n\\n    reverse(begin(ans), end(ans));\\n    return ans;\\n  }\\n};\\n```\\n```Java []\\nclass Solution \\n{\\n  public String addBinary(String a, String b) \\n  {\\n    StringBuilder sb = new StringBuilder();\\n    int carry = 0;\\n    int i = a.length() - 1;\\n    int j = b.length() - 1;\\n\\n    while (i >= 0 || j >= 0 || carry == 1) \\n    {\\n      if(i >= 0)\\n        carry += a.charAt(i--) - \\'0\\';\\n      if(j >= 0)\\n        carry += b.charAt(j--) - \\'0\\';\\n      sb.append(carry % 2);\\n      carry /= 2;\\n    }\\n    return sb.reverse().toString();\\n  }\\n}\\n```\\n```Python3 []\\nclass Solution:\\n  def addBinary(self, a: str, b: str) -> str:\\n    s = []\\n    carry = 0\\n    i = len(a) - 1\\n    j = len(b) - 1\\n\\n    while i >= 0 or j >= 0 or carry:\\n      if i >= 0:\\n        carry += int(a[i])\\n        i -= 1\\n      if j >= 0:\\n        carry += int(b[j])\\n        j -= 1\\n      s.append(str(carry % 2))\\n      carry //= 2\\n\\n    return \\'\\'.join(reversed(s))\\n```\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n![ezgif-3-22a360561c.gif](https://assets.leetcode.com/users/images/fe5d77d5-39f2-4839-9fcf-41c50106b04f_1676347139.1033723.gif)\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nStringBuilder sb = new StringBuilder();\\nint carry = 0;\\nint i = a.length() - 1;\\nint j = b.length() - 1;\\n\\n```\n```\\nwhile (i >= 0 || j >= 0 || carry == 1) {\\n    if (i >= 0) {\\n        carry += a.charAt(i--) - \\'0\\';\\n    }\\n    if (j >= 0) {\\n        carry += b.charAt(j--) - \\'0\\';\\n    }\\n    sb.append(carry % 2);\\n    carry /= 2;\\n}\\n\\n```\n```\\nreturn sb.reverse().toString();\\n\\n```\n```\\n     1010\\n    +1101\\n    ______\\n    10111\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\n```C++ []\\nclass Solution {\\n public:\\n  string addBinary(string a, string b) {\\n    string ans;\\n    int carry = 0;\\n    int i = a.length() - 1;\\n    int j = b.length() - 1;\\n\\n    while (i >= 0 || j >= 0 || carry) {\\n      if (i >= 0)\\n        carry += a[i--] - \\'0\\';\\n      if (j >= 0)\\n        carry += b[j--] - \\'0\\';\\n      ans += carry % 2 + \\'0\\';\\n      carry /= 2;\\n    }\\n\\n    reverse(begin(ans), end(ans));\\n    return ans;\\n  }\\n};\\n```\n```Java []\\nclass Solution \\n{\\n  public String addBinary(String a, String b) \\n  {\\n    StringBuilder sb = new StringBuilder();\\n    int carry = 0;\\n    int i = a.length() - 1;\\n    int j = b.length() - 1;\\n\\n    while (i >= 0 || j >= 0 || carry == 1) \\n    {\\n      if(i >= 0)\\n        carry += a.charAt(i--) - \\'0\\';\\n      if(j >= 0)\\n        carry += b.charAt(j--) - \\'0\\';\\n      sb.append(carry % 2);\\n      carry /= 2;\\n    }\\n    return sb.reverse().toString();\\n  }\\n}\\n```\n```Python3 []\\nclass Solution:\\n  def addBinary(self, a: str, b: str) -> str:\\n    s = []\\n    carry = 0\\n    i = len(a) - 1\\n    j = len(b) - 1\\n\\n    while i >= 0 or j >= 0 or carry:\\n      if i >= 0:\\n        carry += int(a[i])\\n        i -= 1\\n      if j >= 0:\\n        carry += int(b[j])\\n        j -= 1\\n      s.append(str(carry % 2))\\n      carry //= 2\\n\\n    return \\'\\'.join(reversed(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 279879,
                "title": "python-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        carry = 0\\n        result = \\'\\'\\n\\n        a = list(a)\\n        b = list(b)\\n\\n        while a or b or carry:\\n            if a:\\n                carry += int(a.pop())\\n            if b:\\n                carry += int(b.pop())\\n\\n            result += str(carry %2)\\n            carry //= 2\\n\\n        return result[::-1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        carry = 0\\n        result = \\'\\'\\n\\n        a = list(a)\\n        b = list(b)\\n\\n        while a or b or carry:\\n            if a:\\n                carry += int(a.pop())\\n            if b:\\n                carry += int(b.pop())\\n\\n            result += str(carry %2)\\n            carry //= 2\\n\\n        return result[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1680021,
                "title": "very-simple-o-n-c-solution",
                "content": "**Adding 2 binary bits :\\n0 + 0 = 0\\n1 + 0 = 1\\n0 + 1 = 1\\n1 + 1 = 10**\\n```\\nstring addBinary(string a, string b) {\\n        int i = a.length()-1;\\n        int j = b.length()-1;\\n        string ans;\\n        int carry = 0;\\n        \\n        while(i>=0 || j>=0 || carry){\\n            if(i>=0){\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            if(j>=0){\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            ans += (carry%2 + \\'0\\');\\n            carry = carry/2;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```\\n\\n\\n**Important point to note:**    (Reference - [here](http://codeforces.com/blog/entry/66660))\\n- `a = a + \"xy\"`\\xA0is O(N) while\\xA0`a += \"xy\"`\\xA0is O(1) (amortized).\\n    \\n    `a = a + \"xy\"`\\xA0creates a\\xA0`copy of a`, appends \"xy\" and then assigns it back to\\xA0`a`.\\n    \\n    `a += \"xy\"`\\xA0just appends \"xy\" to\\xA0`a`.\\n\\t\\nTherefore the time complexity of this approach is O(n).\\n\\n***Please Upvote, if you find the solution helpful!***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring addBinary(string a, string b) {\\n        int i = a.length()-1;\\n        int j = b.length()-1;\\n        string ans;\\n        int carry = 0;\\n        \\n        while(i>=0 || j>=0 || carry){\\n            if(i>=0){\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            if(j>=0){\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            ans += (carry%2 + \\'0\\');\\n            carry = carry/2;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24500,
                "title": "an-accepted-concise-python-recursive-solution-10-lines",
                "content": "#add two binary from back to front, I think it is very self explained, when 1+1 we need a carry.\\n\\t#The time complex is O(m+n+c)\\uFF0Cit\\'s linear, where m=len(a)\\uFF0Cn=len(b) and c=\"count of carries, which is less than min(m,n)\".\\n\\n\\n       class Solution:\\n            def addBinary(self, a, b):\\n                if len(a)==0: return b\\n                if len(b)==0: return a\\n                if a[-1] == \\'1\\' and b[-1] == \\'1\\':\\n                    return self.addBinary(self.addBinary(a[0:-1],b[0:-1]),\\'1\\')+\\'0\\'\\n                if a[-1] == \\'0\\' and b[-1] == \\'0\\':\\n                    return self.addBinary(a[0:-1],b[0:-1])+\\'0\\'\\n                else:\\n                    return self.addBinary(a[0:-1],b[0:-1])+\\'1\\'",
                "solutionTags": [
                    "Python"
                ],
                "code": "#add two binary from back to front, I think it is very self explained, when 1+1 we need a carry.\\n\\t#The time complex is O(m+n+c)\\uFF0Cit\\'s linear, where m=len(a)\\uFF0Cn=len(b) and c=\"count of carries, which is less than min(m,n)\".\\n\\n\\n       class Solution:\\n            def addBinary(self, a, b):\\n                if len(a)==0: return b\\n                if len(b)==0: return a\\n                if a[-1] == \\'1\\' and b[-1] == \\'1\\':\\n                    return self.addBinary(self.addBinary(a[0:-1],b[0:-1]),\\'1\\')+\\'0\\'\\n                if a[-1] == \\'0\\' and b[-1] == \\'0\\':\\n                    return self.addBinary(a[0:-1],b[0:-1])+\\'0\\'\\n                else:\\n                    return self.addBinary(a[0:-1],b[0:-1])+\\'1\\'",
                "codeTag": "Java"
            },
            {
                "id": 3183091,
                "title": "c-explained-beginner-friendly-approach-self-explanatory-clean-code",
                "content": "\\n\\n# Code\\n\\n# Please Do Upvote!!!!\\n##### Connect with me on Linkedin -> https://www.linkedin.com/in/md-kamran-55b98521a/\\n\\n\\n**The Approach goes same as like how we add two binary numbers manually firstly we have to make sizes of both the strings equal ie. the smaller sized one is to be made equal by adding zeroes at its left. then we have to handle all the caes ie. ( 11, 10, 01, 00), and we will also require a carry that will store the carry, at every step we add the values at the positions along with carry using the boolean algebra, and store carry accordingly, finally if carry is \"1\", then obviously the sum that we are getting is one bit larger than the numbers we had earlier, finally return the string**\\n\\n\\n```\\n\\nclass Solution {\\npublic:\\n\\n    string addBinary(string a, string b) {\\n        \\n        \\n        if(b.size() > a.size()) swap(a,b);\\n        \\n        \\n        while(b.size() < a.size()) b = \"0\" + b;\\n\\n        int carry = 0;\\n\\n        string res = \"\";\\n\\n        for(int i = b.size()-1; i >= 0 ; --i)\\n        {\\n             \\n             if(b[i] == \\'1\\' && a[i]==\\'1\\')\\n             {\\n\\n                if(carry == 0) res = \"0\" + res;\\n                \\n                else res = \"1\" + res;\\n                    \\n                carry = 1;\\n             }\\n\\n             else if(b[i] ==\\'0\\' && a[i] ==\\'0\\')\\n             {\\n\\n                if(carry == 0) res = \"0\" + res;\\n                 \\n                else\\n                {\\n                    res = \"1\" + res;\\n                    carry = 0;\\n                }\\n             }\\n\\n             else if((b[i]==\\'0\\' && a[i]==\\'1\\') || (b[i]==\\'1\\' && a[i] == \\'0\\'))\\n             {\\n                 \\n                if(carry == 0) res = \"1\" + res;\\n                 \\n                else res = \"0\" + res;\\n                 \\n             }\\n             \\n        }\\n        \\n        if(carry == 1) res = \"1\" + res;\\n        \\n        return res;\\n    }\\n};\\n\\n\\n```\\n![b62ab1be-232a-438f-9524-7d8ca4dbd5fe_1675328166.1161866.png](https://assets.leetcode.com/users/images/98b7adbc-5abf-45f7-9b5b-538574194654_1676344687.6513524.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n\\n    string addBinary(string a, string b) {\\n        \\n        \\n        if(b.size() > a.size()) swap(a,b);\\n        \\n        \\n        while(b.size() < a.size()) b = \"0\" + b;\\n\\n        int carry = 0;\\n\\n        string res = \"\";\\n\\n        for(int i = b.size()-1; i >= 0 ; --i)\\n        {\\n             \\n             if(b[i] == \\'1\\' && a[i]==\\'1\\')\\n             {\\n\\n                if(carry == 0) res = \"0\" + res;\\n                \\n                else res = \"1\" + res;\\n                    \\n                carry = 1;\\n             }\\n\\n             else if(b[i] ==\\'0\\' && a[i] ==\\'0\\')\\n             {\\n\\n                if(carry == 0) res = \"0\" + res;\\n                 \\n                else\\n                {\\n                    res = \"1\" + res;\\n                    carry = 0;\\n                }\\n             }\\n\\n             else if((b[i]==\\'0\\' && a[i]==\\'1\\') || (b[i]==\\'1\\' && a[i] == \\'0\\'))\\n             {\\n                 \\n                if(carry == 0) res = \"1\" + res;\\n                 \\n                else res = \"0\" + res;\\n                 \\n             }\\n             \\n        }\\n        \\n        if(carry == 1) res = \"1\" + res;\\n        \\n        return res;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 385148,
                "title": "simple-javascript-solution-using-bigint",
                "content": "Greetings comrades:\\n\\nBelow is my boring but clear solution, using the proposed [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) object.\\n\\nThe idea is to use inputs, `a` and `b` to build two binary literals.  Calculating the sum is done by calling the `BigInt` function on our binary literals, adding them together and returning the sum with a call to the `toString` method with 2 as the argument, since we are working with binary numbers.\\n\\n```javascript\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n  const aBin = `0b${a}`\\n  const bBin = `0b${b}`\\n  const sum = BigInt(aBin) + BigInt(bBin)\\n  return sum.toString(2)\\n};\\n```\\n\\nThanks for looking at my solution.  Comments/feedback is appreciated. :)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n  const aBin = `0b${a}`\\n  const bBin = `0b${b}`\\n  const sum = BigInt(aBin) + BigInt(bBin)\\n  return sum.toString(2)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24524,
                "title": "simple-accepted-java-solution",
                "content": "    public class Solution {\\n        public String addBinary(String a, String b) {\\n            if(a == null || a.isEmpty()) {\\n                return b;\\n            }\\n            if(b == null || b.isEmpty()) {\\n                return a;\\n            }\\n            char[] aArray = a.toCharArray();\\n            char[] bArray = b.toCharArray();\\n            StringBuilder stb = new StringBuilder();\\n    \\n            int i = aArray.length - 1;\\n            int j = bArray.length - 1;\\n            int aByte;\\n            int bByte;\\n            int carry = 0;\\n            int result;\\n    \\n            while(i > -1 || j > -1 || carry == 1) {\\n                aByte = (i > -1) ? Character.getNumericValue(aArray[i--]) : 0;\\n                bByte = (j > -1) ? Character.getNumericValue(bArray[j--]) : 0;\\n                result = aByte ^ bByte ^ carry;\\n                carry = ((aByte + bByte + carry) >= 2) ? 1 : 0;\\n                stb.append(result);\\n            }\\n            return stb.reverse().toString();\\n        }\\n    }\\n\\nAddition bits are calculated by xor. Carry bit is calculated as simple integer addition.",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public String addBinary(String a, String b) {\\n            if(a == null || a.isEmpty()) {\\n                return b;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3182882,
                "title": "super-easy-solution-full-explanation-c-python3-java-commented",
                "content": "# Consider\\uD83D\\uDC4D\\n```\\n                    Please Upvote If You Find It Helpful\\n```\\n# Intuition\\nLet\\'s understand with an example : Addition of 1 and 1 will lead to carry 1 and print 0 , Addition of 1 and 0 give us 1 as carry will lead print 0 , Addition of last remaning carry 1 with no body will lead to print 1 , So, we get something like \"1 0 0\" as answer\\nOne key point total addition will be 3 then print 1 and carry will remain 1.\\n\\n**Adding 2 binary bits :**\\n        0 + 0 = 0\\n        1 + 0 = 1\\n        0 + 1 = 1\\n        1 + 1 = 10\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n**Example :**\\n- So, what\\'s going in diagram is intially **carry is \"0\"** we **add 1 + 1** we **get 2** which is **more then 1**, so there is a **carry of 1 and result is 0**. Now we have **carry of 1, again 1 + 1 is 0**, and **still left with carry of 1**. And the last carry one will be **return as it is**.\\n- So, if you see this binary number it is **[2^2 * 1 + 2^1 * 0 + 2^0 * 0]** and this is the decimal coversion of **[1 0 0] which is 4.**\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(max(n, m))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(max(n, m))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Consider\\uD83D\\uDC4D\\n                            Thanks for visiting\\uD83D\\uDE0A\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    // Function to add two binary numbers represented as strings\\n    string addBinary(string a, string b) {\\n        // Initialize two pointers to traverse the binary strings from right to left\\n        int i = a.length()-1;\\n        int j = b.length()-1;\\n        string ans;\\n        int carry = 0;\\n        \\n        // Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while(i >= 0 || j >= 0 || carry) {\\n            // Add the current binary digit in string a, if the pointer is still within bounds\\n            if(i >= 0) {\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            \\n            // Add the current binary digit in string b, if the pointer is still within bounds\\n            if(j >= 0) {\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            // Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            ans += (carry % 2 + \\'0\\');\\n            \\n            // Calculate the next carry-over value by dividing the sum by 2\\n            carry = carry / 2;\\n        }\\n        \\n        // Reverse the result and return it as a string\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n```\\n```python []\\nclass Solution:\\n    \\n    # Function to add two binary numbers represented as strings\\n    def addBinary(self, a, b):\\n        # List to store the result\\n        result = []\\n        # Variable to store the carry-over value\\n        carry = 0\\n        \\n        # Initialize two pointers to traverse the binary strings from right to left\\n        i, j = len(a)-1, len(b)-1\\n        \\n        # Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while i >= 0 or j >= 0 or carry:\\n            total = carry\\n            \\n            # Add the current binary digit in string a, if the pointer is still within bounds\\n            if i >= 0:\\n                total += int(a[i])\\n                i -= 1\\n            \\n            # Add the current binary digit in string b, if the pointer is still within bounds\\n            if j >= 0:\\n                total += int(b[j])\\n                j -= 1\\n            \\n            # Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            result.append(str(total % 2))\\n            \\n            # Calculate the next carry-over value by dividing the sum by 2\\n            carry = total // 2\\n            \\n        # Reverse the result and join the elements to form a single string\\n        return \\'\\'.join(reversed(result))\\n\\n```\\n```Java []\\nclass Solution {\\n    // Function to add two binary numbers represented as strings\\n    public String addBinary(String a, String b) {\\n        // Initialize two pointers to traverse the binary strings from right to left\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        StringBuilder ans = new StringBuilder();\\n        int carry = 0;\\n        \\n        // Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while (i >= 0 || j >= 0 || carry != 0) {\\n            // Add the current binary digit in string a, if the pointer is still within bounds\\n            if (i >= 0) {\\n                carry += a.charAt(i) - \\'0\\';\\n                i--;\\n            }\\n            \\n            // Add the current binary digit in string b, if the pointer is still within bounds\\n            if (j >= 0) {\\n                carry += b.charAt(j) - \\'0\\';\\n                j--;\\n            }\\n            \\n            // Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            ans.append(carry % 2);\\n            \\n            // Calculate the next carry-over value by dividing the sum by 2\\n            carry = carry / 2;\\n        }\\n        \\n        // Reverse the result and return it as a string\\n        return ans.reverse().toString();\\n    }\\n}\\n\\n```\\n\\n```\\n                        Give a \\uD83D\\uDC4D. It motivates me alot\\n```\\nLet\\'s Connect On [Linkedin](https://www.linkedin.com/in/naman-agarwal-0551aa1aa/)",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\n                    Please Upvote If You Find It Helpful\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    // Function to add two binary numbers represented as strings\\n    string addBinary(string a, string b) {\\n        // Initialize two pointers to traverse the binary strings from right to left\\n        int i = a.length()-1;\\n        int j = b.length()-1;\\n        string ans;\\n        int carry = 0;\\n        \\n        // Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while(i >= 0 || j >= 0 || carry) {\\n            // Add the current binary digit in string a, if the pointer is still within bounds\\n            if(i >= 0) {\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            \\n            // Add the current binary digit in string b, if the pointer is still within bounds\\n            if(j >= 0) {\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            // Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            ans += (carry % 2 + \\'0\\');\\n            \\n            // Calculate the next carry-over value by dividing the sum by 2\\n            carry = carry / 2;\\n        }\\n        \\n        // Reverse the result and return it as a string\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n```\n```python []\\nclass Solution:\\n    \\n    # Function to add two binary numbers represented as strings\\n    def addBinary(self, a, b):\\n        # List to store the result\\n        result = []\\n        # Variable to store the carry-over value\\n        carry = 0\\n        \\n        # Initialize two pointers to traverse the binary strings from right to left\\n        i, j = len(a)-1, len(b)-1\\n        \\n        # Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while i >= 0 or j >= 0 or carry:\\n            total = carry\\n            \\n            # Add the current binary digit in string a, if the pointer is still within bounds\\n            if i >= 0:\\n                total += int(a[i])\\n                i -= 1\\n            \\n            # Add the current binary digit in string b, if the pointer is still within bounds\\n            if j >= 0:\\n                total += int(b[j])\\n                j -= 1\\n            \\n            # Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            result.append(str(total % 2))\\n            \\n            # Calculate the next carry-over value by dividing the sum by 2\\n            carry = total // 2\\n            \\n        # Reverse the result and join the elements to form a single string\\n        return \\'\\'.join(reversed(result))\\n\\n```\n```Java []\\nclass Solution {\\n    // Function to add two binary numbers represented as strings\\n    public String addBinary(String a, String b) {\\n        // Initialize two pointers to traverse the binary strings from right to left\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        StringBuilder ans = new StringBuilder();\\n        int carry = 0;\\n        \\n        // Loop until both pointers have reached the beginning of their respective strings and there is no carry-over value left\\n        while (i >= 0 || j >= 0 || carry != 0) {\\n            // Add the current binary digit in string a, if the pointer is still within bounds\\n            if (i >= 0) {\\n                carry += a.charAt(i) - \\'0\\';\\n                i--;\\n            }\\n            \\n            // Add the current binary digit in string b, if the pointer is still within bounds\\n            if (j >= 0) {\\n                carry += b.charAt(j) - \\'0\\';\\n                j--;\\n            }\\n            \\n            // Calculate the next binary digit in the result by taking the remainder of the sum divided by 2\\n            ans.append(carry % 2);\\n            \\n            // Calculate the next carry-over value by dividing the sum by 2\\n            carry = carry / 2;\\n        }\\n        \\n        // Reverse the result and return it as a string\\n        return ans.reverse().toString();\\n    }\\n}\\n\\n```\n```\\n                        Give a \\uD83D\\uDC4D. It motivates me alot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1017596,
                "title": "detail-explanation-easy-single-line-97-faster",
                "content": "```\\nvar addBinary = function(a, b) {\\n    return (BigInt(\"0b\"+a) + BigInt(\"0b\"+b)).toString(2);\\n}\\n```\\n**BigInt is used to represent Integers greater than 2^53 -1.**\\n(2^53) - 1 is the Maximum Number Primitive which can be safely represented using JavaScript.\\nThis is represented by MAX_SAFE_INTEGER.\\n**We coule use parseInt(\"number\", base)** to convert the arguments \\'a\\' and \\'b\\' from binary base to decimal base and then add them together.\\nBut the **problem** here is, if we have integers, i.e a or b\\'s **binary value to be huge** (that is if the numbers passed to a or b is really big which is more than 2^52 -1), then **javascript can not process it as the max Number primitive it can work with safely is 2^53 -1 or lesser.**\\n\\nTherefore, we make use of BigInt to represent all kind of numbers, small to large Integers.\\nThe **BigInt object takes a String Integer literal** as argument and then **returns** us a number which is of the**BigInt datatype**.\\n\\nSo, here we need to pass the string (which should be an Integer Literal), as whichever base it is currently represented as.\\nIn our case we have \\'a\\' and \\'b\\' as binary numbers(strings).\\nWe need to tell **BigInt() that \\'a\\' and \\'b\\' are Binary numbers, so we append \\'0b\\' to the beginning of \\'a\\' and \\'b\\' and then pass them to BigInt().**\\nSimilarly, if we have Hexadecimal number we prefix \\'0x\\' and for Octal numbers we prefix \\'0o\\'.\\n\\nOnce we have converted our binary numbers \\'a\\' and \\'b\\' to BigInt datatype, we add them using normal addition (+) operator.\\n\\nNow, we use the **toString method to convert our BigInt number (sum calculated) to String which is a Binary, by passing the base we want to convert our argument to.**\\nstr.toString(2) converts the str string to Binary (base 2).",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function(a, b) {\\n    return (BigInt(\"0b\"+a) + BigInt(\"0b\"+b)).toString(2);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 743698,
                "title": "python-8-lines-neat-solution-explained",
                "content": "What we need to do in this problem is just add two numbers given in binary representation. How we can do it? Using usual schoolbook \\u0441olumnar addition of course! So, we need to start from the last column and add two digits and also not to forget about `carry`. We need to stop when we reached beginning of both numbers. `d1` and `d2` are current processed digits. We form `summ` string, adding element to the end and in the end we reverse it.\\n\\n**Complexity**: time complexity is `O(n + m)`, where `n` and `m` are lengths of numbers, space complexity is `O(max(m,n))`, because result will have this length.\\n\\n```\\nclass Solution:\\n    def addBinary(self, a, b):\\n        i, j, summ, carry = len(a) - 1, len(b) - 1, [], 0\\n        while i >= 0 or j >= 0 or carry:\\n            d1 = int(a[i]) if i >= 0 else 0\\n            d2 = int(b[j]) if j >= 0 else 0\\n            summ += [str((d1 + d2 + carry) % 2)]\\n            carry = (d1 + d2 + carry) // 2\\n            i, j = i-1, j-1 \\n        return \"\".join(summ[::-1])\\n```\\n\\nIf you have any questoins, feel free to ask. If you like the solution and explanation, please **upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a, b):\\n        i, j, summ, carry = len(a) - 1, len(b) - 1, [], 0\\n        while i >= 0 or j >= 0 or carry:\\n            d1 = int(a[i]) if i >= 0 else 0\\n            d2 = int(b[j]) if j >= 0 else 0\\n            summ += [str((d1 + d2 + carry) % 2)]\\n            carry = (d1 + d2 + carry) // 2\\n            i, j = i-1, j-1 \\n        return \"\".join(summ[::-1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24756,
                "title": "very-concise-c-solution-without-calculating-longest-string",
                "content": "I am not sure if this can be made even more concise (possibly yes), but I believe this is sufficiently concise without sacrificing readability.\\n\\n    string addBinary(string a, string b) \\n    {\\n        string result = \"\";\\n        int apos = a.size() - 1;\\n        int bpos = b.size() - 1;\\n        int adigit, bdigit, carry = 0;\\n        \\n        while (apos >= 0 || bpos >= 0 || carry == 1)\\n        {\\n            adigit = bdigit = 0;\\n            \\n            if (apos >= 0) adigit = a[apos--] == '1';\\n            if (bpos >= 0) bdigit = b[bpos--] == '1';\\n            \\n            // Another way: the digit is 1 if adigit + bdigit + carry == 1 or == 3, but I noticed that\\n            // XOR is more concise:\\n            result = static_cast<char>(adigit ^ bdigit ^ carry + '0') + result; \\n            carry = adigit + bdigit + carry >= 2;\\n        }\\n        \\n        return result;\\n    }",
                "solutionTags": [],
                "code": "I am not sure if this can be made even more concise (possibly yes), but I believe this is sufficiently concise without sacrificing readability.\\n\\n    string addBinary(string a, string b) \\n    {\\n        string result = \"\";\\n        int apos = a.size() - 1;\\n        int bpos = b.size() - 1;\\n        int adigit, bdigit, carry = 0;\\n        \\n        while (apos >= 0 || bpos >= 0 || carry == 1)\\n        {\\n            adigit = bdigit = 0;\\n            \\n            if (apos >= 0) adigit = a[apos--] == '1';\\n            if (bpos >= 0) bdigit = b[bpos--] == '1';\\n            \\n            // Another way: the digit is 1 if adigit + bdigit + carry == 1 or == 3, but I noticed that\\n            // XOR is more concise:\\n            result = static_cast<char>(adigit ^ bdigit ^ carry + '0') + result; \\n            carry = adigit + bdigit + carry >= 2;\\n        }\\n        \\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24759,
                "title": "tiny-clean-c-solution-quite-readable",
                "content": "    class Solution {\\n    public:\\n            string addBinary(string a, string b) {\\n                    string ret = \"\";\\n                    int carry = 0;\\n                    for (int i = a.size() - 1, j = b.size() - 1; i >= 0 || j >= 0; i--, j--) {\\n                            int m = (i >= 0 && a[i] == '1');\\n                            int n = (j >= 0 && b[j] == '1');\\n                            ret = to_string((m + n + carry) & 0x1) + ret;\\n                            carry = (m + n + carry) >> 1;\\n                    }\\n                    return carry ? '1' + ret : ret;\\n            }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n            string addBinary(string a, string b) {\\n                    string ret = \"\";\\n                    int carry = 0;\\n                    for (int i = a.size() - 1, j = b.size() - 1; i >= 0 || j >= 0; i--, j--) {\\n                            int m = (i >= 0 && a[i] == '1');\\n                            int n = (j >= 0 && b[j] == '1');\\n                            ret = to_string((m + n + carry) & 0x1) + ret;\\n                            carry = (m + n + carry) >> 1;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 24752,
                "title": "c-simple-solution",
                "content": "        \\n    string addBinary(string a, string b) {\\n        int i = a.size()-1, j = b.size()-1;\\n        int carry = 0;\\n        string ret = \"\";\\n        while (i >= 0 || j >= 0 || carry!=0) {\\n            if (i >= 0) {\\n                carry += a[i]=='0'?0:1;\\n                i--;\\n            }\\n            if (j >= 0) {\\n                carry += b[j]=='0'?0:1;\\n                j--;\\n            }\\n            ret = ((carry%2)==0?\"0\":\"1\") + ret;\\n            carry /= 2;\\n        }\\n        return ret;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "        \\n    string addBinary(string a, string b) {\\n        int i = a.size()-1, j = b.size()-1;\\n        int carry = 0;\\n        string ret = \"\";\\n        while (i >= 0 || j >= 0 || carry!=0) {\\n            if (i >= 0) {\\n                carry += a[i]=='0'?0:1;\\n                i--;\\n            }\\n            if (j >= 0) {\\n                carry += b[j]=='0'?0:1;\\n                j--;\\n            }\\n            ret = ((carry%2)==0?\"0\":\"1\") + ret;\\n            carry /= 2;\\n        }\\n        return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2783480,
                "title": "one-liner-in-java",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt uses the BigInteger class to add two binary numbers.\\n\\n# Complexity \\n- Time complexity: $$O(n)$$\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\nreturn new java.math.BigInteger(a, 2).add(new java.math.BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```\\n### If you like the solution then please upvote me...........",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String",
                    "Bit Manipulation",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\nreturn new java.math.BigInteger(a, 2).add(new java.math.BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1679429,
                "title": "python3-binary-addition-explained",
                "content": "To calculate the final result we use binary addition rules. For every bit:\\n> `0 + 0 = 0`\\n\\t`1 + 0 = 1`\\n\\t`1 + 1 = 0 (carry 1)`\\n\\t`1 + 1 + (carry 1) = 1 (carry 1)`\\n\\nTo simplify logic, there are couple of tricks here:\\n* The resulting bit is equal to `(aBit + bBit + carry) % 2`. That works because the bit becomes `1` only if the sum `(aBit + bBit + carry)` is greater than 2. Example: `1+1+1 = 3 => 3%2 = 1`\\n* Carry can be calculated as `(aBit + bBit + carry) // 2` (the result of division floor rounded). Example: `1+1+1 = 3 => carry = 3//2 = 1`\\n* Use negative index `i` here to iterate from the end (`list[-1]` gives the last element of the list). That allows us to have just one single index for both strings.\\n\\nSo we just iterate over characters of input strings and using addition rules calculater the result\\n\\nTime: **O(n)** - for scan\\nSpace: **O(1)** - nothing stored\\n\\nRuntime: 32 ms, faster than **80.60%** of Python3 online submissions for Add Binary.\\nMemory Usage: 14.3 MB, less than **55.41%** of Python3 online submissions for Add Binary.\\n\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        aL, bL = -len(a), -len(b)\\n        i, carry, res = -1, 0, \"\"\\n\\n        while i >= aL or i >= bL:\\n            aBit = int(a[i]) if i >= aL else 0\\n            bBit = int(b[i]) if i >= bL else 0\\n            \\n            sum = aBit + bBit + carry\\n            res = str(sum % 2) + res\\n            carry = sum // 2\\n\\n            i -= 1\\n            \\n        return \"1\" + res if carry else res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        aL, bL = -len(a), -len(b)\\n        i, carry, res = -1, 0, \"\"\\n\\n        while i >= aL or i >= bL:\\n            aBit = int(a[i]) if i >= aL else 0\\n            bBit = int(b[i]) if i >= bL else 0\\n            \\n            sum = aBit + bBit + carry\\n            res = str(sum % 2) + res\\n            carry = sum // 2\\n\\n            i -= 1\\n            \\n        return \"1\" + res if carry else res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 580924,
                "title": "clean-simple-c-solution-100-faster-100-memory",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        auto output = \"\"s;\\n        int i = a.size() - 1, j = b.size() - 1, carry = 0;\\n        while (i >= 0 || j >= 0 || carry) {\\n            if (i >= 0 && a[i--] == \\'1\\') ++carry;\\n            if (j >= 0 && b[j--] == \\'1\\') ++carry;\\n            output.insert(0, carry % 2 == 1 ? \"1\" : \"0\");\\n            carry /= 2;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        auto output = \"\"s;\\n        int i = a.size() - 1, j = b.size() - 1, carry = 0;\\n        while (i >= 0 || j >= 0 || carry) {\\n            if (i >= 0 && a[i--] == \\'1\\') ++carry;\\n            if (j >= 0 && b[j--] == \\'1\\') ++carry;\\n            output.insert(0, carry % 2 == 1 ? \"1\" : \"0\");\\n            carry /= 2;\\n        }\\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24726,
                "title": "my-python-solution",
                "content": "\\n\\n    def addBinary(self, a, b):\\n        res, carry = '', 0\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0 or carry:\\n            curval = (i >= 0 and a[i] == '1') + (j >= 0 and b[j] == '1')\\n            carry, rem = divmod(curval + carry, 2)\\n            res = `rem` + res\\n            i -= 1\\n            j -= 1\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n\\n    def addBinary(self, a, b):\\n        res, carry = '', 0\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0 or carry:\\n            curval = (i >= 0 and a[i] == '1') + (j >= 0 and b[j] == '1')\\n            carry, rem = divmod(curval + carry, 2)\\n            res = `rem` + res\\n            i -= 1\\n            j -= 1\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 577148,
                "title": "simple-javascript-solution",
                "content": "```\\nlet addBinary = (a, b) => {\\n  // Truth Table\\n  // 1st + 2nd + carry = sum, new carry, decimal sum\\n  //   0 +  0  + 0 = 0, 0 (0)\\n  //   0 +  0  + 1 = 1, 0 (1)\\n  //   0 +  1  + 1 = 0, 1 (2)\\n  //   1 +  1  + 1 = 1, 1 (3)\\n\\n  let carry = 0;\\n  let result = \\'\\';\\n\\n  let len1 = a.length - 1;\\n  let len2 = b.length - 1;\\n\\n  for (; len1 >= 0 || len2 >= 0 || carry > 0; len1--, len2--) {\\n    let sum = (+a[len1] || 0) + (+b[len2] || 0) + carry;\\n    if (sum > 1) {\\n      sum = sum % 2;\\n      carry = 1;\\n    } else {\\n      carry = 0;\\n    }\\n    result = `${sum}${result}`;\\n  }\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet addBinary = (a, b) => {\\n  // Truth Table\\n  // 1st + 2nd + carry = sum, new carry, decimal sum\\n  //   0 +  0  + 0 = 0, 0 (0)\\n  //   0 +  0  + 1 = 1, 0 (1)\\n  //   0 +  1  + 1 = 0, 1 (2)\\n  //   1 +  1  + 1 = 1, 1 (3)\\n\\n  let carry = 0;\\n  let result = \\'\\';\\n\\n  let len1 = a.length - 1;\\n  let len2 = b.length - 1;\\n\\n  for (; len1 >= 0 || len2 >= 0 || carry > 0; len1--, len2--) {\\n    let sum = (+a[len1] || 0) + (+b[len2] || 0) + carry;\\n    if (sum > 1) {\\n      sum = sum % 2;\\n      carry = 1;\\n    } else {\\n      carry = 0;\\n    }\\n    result = `${sum}${result}`;\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24562,
                "title": "one-line-python-solution",
                "content": "    class Solution:\\n        def addBinary(self, a, b):\\n            return bin(eval('0b' + a) + eval('0b' + b))[2:]",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        def addBinary(self, a, b):\\n            return bin(eval('0b' + a) + eval('0b' + b))[2:]",
                "codeTag": "Java"
            },
            {
                "id": 24667,
                "title": "13-lines-easy-java-solution-simple-and-elegant",
                "content": "    public String addBinary(String a, String b) {\\n        int lena = a.length();\\n        int lenb = b.length();\\n        int i =0, carry = 0;\\n        String res = \"\";\\n        while(i<lena || i<lenb || carry!=0){\\n            int x = (i<lena) ? Character.getNumericValue(a.charAt(lena - 1 - i)) : 0;\\n            int y = (i<lenb) ? Character.getNumericValue(b.charAt(lenb - 1 - i)) : 0;\\n            res = (x + y + carry)%2 + res;\\n            carry = (x + y + carry)/2;\\n            i++;\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "    public String addBinary(String a, String b) {\\n        int lena = a.length();\\n        int lenb = b.length();\\n        int i =0, carry = 0;\\n        String res = \"\";\\n        while(i<lena || i<lenb || carry!=0){\\n            int x = (i<lena) ? Character.getNumericValue(a.charAt(lena - 1 - i)) : 0;\\n            int y = (i<lenb) ? Character.getNumericValue(b.charAt(lenb - 1 - i)) : 0;\\n            res = (x + y + carry)%2 + res;\\n            carry = (x + y + carry)/2;\\n            i++;\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 743586,
                "title": "self-explanatory-detailed-steps-2-solution-java-1-liner-using-biginteger",
                "content": "\\n**Approach:**\\n1. Intialize i & j index for a and from last character index of a & b\\n2. Loop over for both index until anyone reach 0, add last bit of both string along with carry intilized with 0. reminder from 2 is the new bit and divide by 2 is carry.\\n3. check if i >= 0 repeat for string a\\n4. check if j >= 0 repeat for string b\\n5. check if carry != 0 - add carry in sb.\\n6. return reverse of sb.\\n\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        int sum = 0;\\n        while(i >= 0 && j >= 0) {\\n            sum = a.charAt(i--) - \\'0\\' + b.charAt(j--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        while(i >= 0) {\\n            sum = a.charAt(i--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        while(j >= 0) {\\n            sum = b.charAt(j--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        if(carry != 0) sb.append(carry);\\n        \\n        return sb.reverse().toString();\\n    }\\n}\\n```\\n\\n********\\n\\nWe can also combine 3 while loops used in above code into 1 like below.\\n\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        \\n        while (i >= 0 || j >= 0) {\\n            int sum = carry;\\n            if (i >= 0) sum += a.charAt(i--) - \\'0\\';\\n\\t\\t\\tif (j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        if (carry != 0) sb.append(carry);\\n        \\n        return sb.reverse().toString();\\n    }\\n}\\n```\\n\\n********\\n**1-Liner with BigInteger**\\n```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return new BigInteger(a, 2).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```\\n\\n********\\nIf you have any doubt and question ask in comment. If you like solution upvote.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        int sum = 0;\\n        while(i >= 0 && j >= 0) {\\n            sum = a.charAt(i--) - \\'0\\' + b.charAt(j--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        while(i >= 0) {\\n            sum = a.charAt(i--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        while(j >= 0) {\\n            sum = b.charAt(j--) - \\'0\\' + carry;\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        \\n        if(carry != 0) sb.append(carry);\\n        \\n        return sb.reverse().toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        \\n        while (i >= 0 || j >= 0) {\\n            int sum = carry;\\n            if (i >= 0) sum += a.charAt(i--) - \\'0\\';\\n\\t\\t\\tif (j >= 0) sum += b.charAt(j--) - \\'0\\';\\n            sb.append(sum % 2);\\n            carry = sum / 2;\\n        }\\n        if (carry != 0) sb.append(carry);\\n        \\n        return sb.reverse().toString();\\n    }\\n}\\n```\n```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return new BigInteger(a, 2).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 307335,
                "title": "javascript-super-easy-to-understand-and-beat-92",
                "content": "```\\nvar addBinary = function(a, b) {\\n    a = a.split(\"\").reverse().join(\"\");\\n    b = b.split(\"\").reverse().join(\"\");\\n    len = a.length > b.length ? a.length : b.length;\\n    result = [];\\n    for(let i = 0; i < len; i += 1){\\n        num1 = Number(a[i] || 0);\\n        num2 = Number(b[i]) || 0;\\n        curr = Number(result[i]||0) + num1 + num2\\n        if(curr >= 2){\\n            result[i] = curr%2;\\n            result.push(1)\\n        }\\n        else{\\n            result[i] = curr\\n        }\\n    }\\n    return result.reverse().join(\"\")\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function(a, b) {\\n    a = a.split(\"\").reverse().join(\"\");\\n    b = b.split(\"\").reverse().join(\"\");\\n    len = a.length > b.length ? a.length : b.length;\\n    result = [];\\n    for(let i = 0; i < len; i += 1){\\n        num1 = Number(a[i] || 0);\\n        num2 = Number(b[i]) || 0;\\n        curr = Number(result[i]||0) + num1 + num2\\n        if(curr >= 2){\\n            result[i] = curr%2;\\n            result.push(1)\\n        }\\n        else{\\n            result[i] = curr\\n        }\\n    }\\n    return result.reverse().join(\"\")\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 236550,
                "title": "my-c-solution",
                "content": "```\\nchar* addBinary(char* a, char* b)\\n{\\n    int i, j, k, c = 0;\\n    char *res;\\n    \\n    i = strlen(a);\\n    j = strlen(b);\\n    k = i > j ? i : j;\\n    k += 2;\\n\\n    res = malloc(k * sizeof(char));\\n    \\n    i--;\\n    j--;\\n    res[--k] = \\'\\\\0\\';\\n    \\n    while (--k >= 0) {\\n        c += i >= 0 ? a[i--] - \\'0\\': 0;\\n        c += j >= 0 ? b[j--] - \\'0\\': 0;\\n        \\n        res[k] = c % 2 + \\'0\\';\\n        c /= 2;\\n    }\\n    \\n    if (res[0] == \\'0\\')\\n       memmove(res, res + 1, strlen(res) * sizeof(char));\\n    \\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar* addBinary(char* a, char* b)\\n{\\n    int i, j, k, c = 0;\\n    char *res;\\n    \\n    i = strlen(a);\\n    j = strlen(b);\\n    k = i > j ? i : j;\\n    k += 2;\\n\\n    res = malloc(k * sizeof(char));\\n    \\n    i--;\\n    j--;\\n    res[--k] = \\'\\\\0\\';\\n    \\n    while (--k >= 0) {\\n        c += i >= 0 ? a[i--] - \\'0\\': 0;\\n        c += j >= 0 ? b[j--] - \\'0\\': 0;\\n        \\n        res[k] = c % 2 + \\'0\\';\\n        c /= 2;\\n    }\\n    \\n    if (res[0] == \\'0\\')\\n       memmove(res, res + 1, strlen(res) * sizeof(char));\\n    \\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 798567,
                "title": "short-and-simple-logic-with-explanation-beats-100-c",
                "content": "```\\n    string addBinary(string a, string b) {\\n        int carry = 0;\\n        string s;\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        while(i>=0 || j>=0)\\n        {\\n            int x = (i>=0)?a[i--]-\\'0\\':0; // subtract with 0, to convert it to int\\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            s.append(to_string(sum%2)); // 1+1 = 2, 2%2=0, this is enough to explain %2\\n            carry = sum/2;// 1+1=2, 2/2=1, carry is one, OR 1+0=1,1/2=0,carry = 0\\n        }\\n        if(carry>0)\\n               s.append(to_string(1));//if carry generated by last two digits is > 0, append in RESULT\\n        reverse(s.begin() , s.end()); //if you use insert() then reverse is not necessary\\n        return s;   \\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    string addBinary(string a, string b) {\\n        int carry = 0;\\n        string s;\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        while(i>=0 || j>=0)\\n        {\\n            int x = (i>=0)?a[i--]-\\'0\\':0; // subtract with 0, to convert it to int\\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            s.append(to_string(sum%2)); // 1+1 = 2, 2%2=0, this is enough to explain %2\\n            carry = sum/2;// 1+1=2, 2/2=1, carry is one, OR 1+0=1,1/2=0,carry = 0\\n        }\\n        if(carry>0)\\n               s.append(to_string(1));//if carry generated by last two digits is > 0, append in RESULT\\n        reverse(s.begin() , s.end()); //if you use insert() then reverse is not necessary\\n        return s;   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3057915,
                "title": "fast-javascript-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n    // we used BigInt() to convert binary to Integer. Syntax is BigInt(0b11) here `0b` is prefix and `11` is binary number\\n    let sum = BigInt(`0b${a}`) + BigInt(`0b${b}`);\\n    // sum is converted back to string using toString(2), here 2 is radix argument, so toString(2) converts to binary\\n    return sum.toString(2);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n    // we used BigInt() to convert binary to Integer. Syntax is BigInt(0b11) here `0b` is prefix and `11` is binary number\\n    let sum = BigInt(`0b${a}`) + BigInt(`0b${b}`);\\n    // sum is converted back to string using toString(2), here 2 is radix argument, so toString(2) converts to binary\\n    return sum.toString(2);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24659,
                "title": "simple-python-solution-76ms",
                "content": "I assume using `int` and `str` is okay, I think this is easy to understand.\\n\\n    def addBinary(self, a, b):\\n        result = ''\\n        index = 0\\n        \\n        carry = '0'\\n        while index < max(len(a), len(b)) or carry == '1':\\n            num_a = a[-1 - index] if index < len(a) else '0'\\n            num_b = b[-1 - index] if index < len(b) else '0'\\n            \\n            val = int(num_a) + int(num_b) + int(carry)\\n            result = str(val % 2) + result\\n            \\n            carry = '1' if val > 1 else '0'\\n            index += 1\\n\\n        return result\\n\\n================== update ===============\\n\\nNo `int` and `str` version.\\n\\n    class Solution:\\n    # @param a, a string\\n    # @param b, a string\\n    # @return a string\\n    # 75ms\\n    def addBinary(self, a, b):\\n        result = ''\\n        index = 0\\n        \\n        carry = '0'\\n        while index < max(len(a), len(b)) or carry == '1':\\n            num_a = a[-1 - index] if index < len(a) else '0'\\n            num_b = b[-1 - index] if index < len(b) else '0'\\n            \\n            val = self.to_int(num_a) + self.to_int(num_b) + self.to_int(carry)\\n            result = \"%s%s\" % (val % 2, result)\\n            \\n            carry = '1' if val > 1 else '0'\\n            index += 1\\n\\n        return result\\n    \\n    def to_int(self, c):\\n        if c == '1':\\n            return 1\\n        elif c == '0':\\n            return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "I assume using `int` and `str` is okay, I think this is easy to understand.\\n\\n    def addBinary(self, a, b):\\n        result = ''\\n        index = 0\\n        \\n        carry = '0'\\n        while index < max(len(a), len(b)) or carry == '1':\\n            num_a = a[-1 - index] if index < len(a) else '0'\\n            num_b = b[-1 - index] if index < len(b) else '0'\\n            \\n            val = int(num_a) + int(num_b) + int(carry)\\n            result = str(val % 2) + result\\n            \\n            carry = '1' if val > 1 else '0'\\n            index += 1\\n\\n        return result\\n\\n================== update ===============\\n\\nNo `int` and `str` version.\\n\\n    class Solution:\\n    # @param a, a string\\n    # @param b, a string\\n    # @return a string\\n    # 75ms\\n    def addBinary(self, a, b):\\n        result = ''\\n        index = 0\\n        \\n        carry = '0'\\n        while index < max(len(a), len(b)) or carry == '1':\\n            num_a = a[-1 - index] if index < len(a) else '0'\\n            num_b = b[-1 - index] if index < len(b) else '0'\\n            \\n            val = self.to_int(num_a) + self.to_int(num_b) + self.to_int(carry)\\n            result = \"%s%s\" % (val % 2, result)\\n            \\n            carry = '1' if val > 1 else '0'\\n            index += 1\\n\\n        return result\\n    \\n    def to_int(self, c):\\n        if c == '1':\\n            return 1\\n        elif c == '0':\\n            return 0",
                "codeTag": "Java"
            },
            {
                "id": 3183112,
                "title": "day-45-c-easiest-beginner-friendly-sol",
                "content": "# Intuition of this Problem:\\nThe intuition behind the given code is to perform binary addition by converting the binary strings to their integer equivalent and then adding them.\\n\\nThe given code first reverses the input binary strings \\'a\\' and \\'b\\' so that the least significant bit is at index 0, making it easier to calculate the corresponding decimal value of each bit using powers of 2. It then iterates over each bit of the reversed \\'a\\' and \\'b\\' and calculates the decimal value of each bit.\\n\\nIt does this by taking the integer equivalent of each binary digit (0 or 1), multiplying it by the corresponding power of 2 (2 raised to the index of the digit), and adding this to the running sum. The running sum is then added together to get the decimal value of the two binary strings.\\n\\nThe decimal sum is then converted back into a binary string by performing repeated division by 2 and recording the remainders in reverse order until the sum becomes zero. The binary string is then reversed and returned as the final output.\\n\\nWhile this approach can work for smaller binary numbers, it may not be suitable for larger binary strings as it can result in overflow errors due to the use of integer variables.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**NOTE - PLEASE READ APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Approach for this Problem:\\n1. Initialize an empty string called result to store the binary sum of the two input strings.\\n2. Initialize a variable called carry to store the carry generated during the binary addition.\\n3. Start from the last digit of both input strings and move towards the left.\\n4. In each iteration, add the current digits of both strings and the carry generated in the previous iteration.\\n5. Compute the sum modulo 2 and append the result to the result string.\\n6. Compute the carry as the integer division of the sum by 2.\\n7. Repeat steps 4-6 until there are no more digits in both input strings and the carry is zero.\\n8. Reverse the result string and return it.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Humble Request:\\n- If my solution is helpful to you then please **UPVOTE** my solution, your **UPVOTE** motivates me to post such kind of solution.\\n- Please let me know in comments if there is need to do any improvement in my approach, code....anything.\\n- **Let\\'s connect on** https://www.linkedin.com/in/abhinash-singh-1b851b188\\n\\n![57jfh9.jpg](https://assets.leetcode.com/users/images/c2826b72-fb1c-464c-9f95-d9e578abcaf3_1674104075.4732099.jpeg)\\n\\n# Code:\\n```C++ []\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string result = \"\";\\n        int carry = 0;\\n        int i = a.size() - 1, j = b.size() - 1;\\n        while (i >= 0 || j >= 0 || carry) {\\n            int sum = carry;\\n            if (i >= 0) {\\n              sum += a[i] - \\'0\\';\\n              i--;\\n            }\\n            if (j >= 0) {\\n              sum += b[j] - \\'0\\';\\n              j--;\\n            }\\n            carry = sum / 2;\\n            result += to_string(sum % 2);\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        return result;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        String result = \"\";\\n        int carry = 0;\\n        int i = a.length() - 1, j = b.length() - 1;\\n        while (i >= 0 || j >= 0 || carry != 0) {\\n            int sum = carry;\\n            if (i >= 0) {\\n                sum += a.charAt(i) - \\'0\\';\\n                i--;\\n            }\\n            if (j >= 0) {\\n                sum += b.charAt(j) - \\'0\\';\\n                j--;\\n            }\\n            carry = sum / 2;\\n            result = (sum % 2) + result;\\n        }\\n        return result;\\n    }\\n}\\n\\n\\n```\\n```Python []\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        result = \"\"\\n        carry = 0\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0 or carry != 0:\\n            sum = carry\\n            if i >= 0:\\n                sum += int(a[i])\\n                i -= 1\\n            if j >= 0:\\n                sum += int(b[j])\\n                j -= 1\\n            carry = sum // 2\\n            result = str(sum % 2) + result\\n        return result\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- Time complexity: **O(max(n,m))** where n and m are the lengths of the input strings a and b respectively. We need to perform at most max(n,m) iterations to add the two strings.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(max(n,m))** for storing the result string.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string result = \"\";\\n        int carry = 0;\\n        int i = a.size() - 1, j = b.size() - 1;\\n        while (i >= 0 || j >= 0 || carry) {\\n            int sum = carry;\\n            if (i >= 0) {\\n              sum += a[i] - \\'0\\';\\n              i--;\\n            }\\n            if (j >= 0) {\\n              sum += b[j] - \\'0\\';\\n              j--;\\n            }\\n            carry = sum / 2;\\n            result += to_string(sum % 2);\\n        }\\n        \\n        reverse(result.begin(), result.end());\\n        return result;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        String result = \"\";\\n        int carry = 0;\\n        int i = a.length() - 1, j = b.length() - 1;\\n        while (i >= 0 || j >= 0 || carry != 0) {\\n            int sum = carry;\\n            if (i >= 0) {\\n                sum += a.charAt(i) - \\'0\\';\\n                i--;\\n            }\\n            if (j >= 0) {\\n                sum += b.charAt(j) - \\'0\\';\\n                j--;\\n            }\\n            carry = sum / 2;\\n            result = (sum % 2) + result;\\n        }\\n        return result;\\n    }\\n}\\n\\n\\n```\n```Python []\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        result = \"\"\\n        carry = 0\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0 or carry != 0:\\n            sum = carry\\n            if i >= 0:\\n                sum += int(a[i])\\n                i -= 1\\n            if j >= 0:\\n                sum += int(b[j])\\n                j -= 1\\n            carry = sum // 2\\n            result = str(sum % 2) + result\\n        return result\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1680441,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        x=int(a,2)\\n        y=int(b,2)\\n        return bin(x+y)[2:]\\n```\\n\\nPlease UPVOTE if you like the Solution",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        x=int(a,2)\\n        y=int(b,2)\\n        return bin(x+y)[2:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 201676,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n\\t\\t\\tvar sb = new StringBuilder();\\n            var t = 0;\\n            for (int i = a.Length - 1, j = b.Length - 1; i >= 0 || j >= 0 || t > 0; i--, j--)\\n            {\\n                var av = i < 0 || a[i] == \\'0\\' ? 0 : 1;\\n                var bv = j < 0 || b[j] == \\'0\\' ? 0 : 1;\\n                sb.Insert(0, (av + bv + t) % 2);\\n                t = (av + bv + t) / 2;\\n            }\\n\\n            return sb.ToString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n\\t\\t\\tvar sb = new StringBuilder();\\n            var t = 0;\\n            for (int i = a.Length - 1, j = b.Length - 1; i >= 0 || j >= 0 || t > 0; i--, j--)\\n            {\\n                var av = i < 0 || a[i] == \\'0\\' ? 0 : 1;\\n                var bv = j < 0 || b[j] == \\'0\\' ? 0 : 1;\\n                sb.Insert(0, (av + bv + t) % 2);\\n                t = (av + bv + t) / 2;\\n            }\\n\\n            return sb.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24770,
                "title": "python-easy-to-understand-solution-with-two-pointer",
                "content": "\\n    def addBinary(self, a, b):\\n        i, j, carry, res = len(a)-1, len(b)-1, 0, \"\"\\n        while i >= 0 or j >= 0 or carry:\\n            if i >= 0:\\n                carry += int(a[i])\\n                i -= 1\\n            if j >= 0:\\n                carry += int(b[j])\\n                j -= 1\\n            res = str(carry%2) + res\\n            carry //= 2\\n        return res",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "\\n    def addBinary(self, a, b):\\n        i, j, carry, res = len(a)-1, len(b)-1, 0, \"\"\\n        while i >= 0 or j >= 0 or carry:\\n            if i >= 0:\\n                carry += int(a[i])\\n                i -= 1\\n            if j >= 0:\\n                carry += int(b[j])\\n                j -= 1\\n            res = str(carry%2) + res\\n            carry //= 2\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 2061593,
                "title": "c-beginner-friendly",
                "content": "```\\nchar * addBinary(char * a, char * b){\\n    int sizeA = strlen(a);\\n    int sizeB = strlen(b);\\n    int sizeOutput = (sizeA > sizeB ? sizeA : sizeB) + 1;\\n    char * output = (char *)malloc(sizeOutput + 1);\\n    int sum = 0;\\n    \\n    output[sizeOutput] = \\'\\\\0\\';\\n    \\n    while(sizeA > 0 || sizeB > 0 || sum > 0) {\\n        \\n        if(sizeA > 0) {\\n            sum += a[--sizeA] - \\'0\\';\\n        }\\n        if(sizeB > 0) {\\n            sum += b[--sizeB] - \\'0\\';\\n        }\\n        output[--sizeOutput] = sum % 2 + \\'0\\';\\n        sum /= 2;\\n    }\\n    return output + sizeOutput;   \\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * addBinary(char * a, char * b){\\n    int sizeA = strlen(a);\\n    int sizeB = strlen(b);\\n    int sizeOutput = (sizeA > sizeB ? sizeA : sizeB) + 1;\\n    char * output = (char *)malloc(sizeOutput + 1);\\n    int sum = 0;\\n    \\n    output[sizeOutput] = \\'\\\\0\\';\\n    \\n    while(sizeA > 0 || sizeB > 0 || sum > 0) {\\n        \\n        if(sizeA > 0) {\\n            sum += a[--sizeA] - \\'0\\';\\n        }\\n        if(sizeB > 0) {\\n            sum += b[--sizeB] - \\'0\\';\\n        }\\n        output[--sizeOutput] = sum % 2 + \\'0\\';\\n        sum /= 2;\\n    }\\n    return output + sizeOutput;   \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1915690,
                "title": "100-fastest-swift-solution-time-o-n-m-space-o-n-m",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n + m), where n is the length of the a and m is the length of the b.\\n    //   - space: O(n + m), where n is the length of the a and m is the length of the b.\\n\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        guard !a.isEmpty else { return b }\\n        guard !b.isEmpty else { return a }\\n\\n        var carry = 0\\n        let a = Array(a)\\n        let b = Array(b)\\n        var i = a.count - 1\\n        var j = b.count - 1\\n        var ans = [Int]()\\n\\n        while i >= 0 || j >= 0 || carry != 0 {\\n            var sum = carry\\n            if i >= 0, a[i] == \"1\" { sum += 1 }\\n            if j >= 0, b[j] == \"1\" { sum += 1 }\\n\\n            let digit = sum % 2\\n            carry = sum / 2\\n            ans.append(digit)\\n\\n            i -= 1\\n            j -= 1\\n        }\\n\\n        return ans.map { String($0) }.reversed().joined()\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n + m), where n is the length of the a and m is the length of the b.\\n    //   - space: O(n + m), where n is the length of the a and m is the length of the b.\\n\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        guard !a.isEmpty else { return b }\\n        guard !b.isEmpty else { return a }\\n\\n        var carry = 0\\n        let a = Array(a)\\n        let b = Array(b)\\n        var i = a.count - 1\\n        var j = b.count - 1\\n        var ans = [Int]()\\n\\n        while i >= 0 || j >= 0 || carry != 0 {\\n            var sum = carry\\n            if i >= 0, a[i] == \"1\" { sum += 1 }\\n            if j >= 0, b[j] == \"1\" { sum += 1 }\\n\\n            let digit = sum % 2\\n            carry = sum / 2\\n            ans.append(digit)\\n\\n            i -= 1\\n            j -= 1\\n        }\\n\\n        return ans.map { String($0) }.reversed().joined()\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1633397,
                "title": "simple-easy-c-solution",
                "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n         \\n       string res;\\n        int i = a.size() - 1, j = b.size() - 1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0) {\\n            sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            res += to_string(sum % 2);  \\n\\t\\t\\t                                         \\n            carry = sum / 2;\\n            \\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n\\n\\n// if you like this solution please do upvote me //\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n         \\n       string res;\\n        int i = a.size() - 1, j = b.size() - 1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0) {\\n            sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            res += to_string(sum % 2);  \\n\\t\\t\\t                                         \\n            carry = sum / 2;\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 538786,
                "title": "js-single-line-98-using-template-strings",
                "content": "```\\nvar addBinary = function(a, b) {\\n    return (BigInt(`0b${a}`) + BigInt(`0b${b}`)).toString(2)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function(a, b) {\\n    return (BigInt(`0b${a}`) + BigInt(`0b${b}`)).toString(2)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24708,
                "title": "another-simple-java",
                "content": "    public String addBinary(String a, String b) {\\n        if(a == null || b ==null)\\n            return a == null? b: a;\\n            \\n        int carry =0;\\n        StringBuilder sb = new StringBuilder();        \\n        \\n        for(int i = a.length()-1, j = b.length() -1;  i >=0 || j >=0 || carry >0 ; i --, j --){\\n            int sum = 0;\\n            sum += (i >=0) ? a.charAt(i) - '0' : 0;\\n            sum += (j >=0) ? b.charAt(j) - '0' : 0;\\n            sum += carry;\\n            \\n            carry = sum /2;\\n            sum %=2;\\n            sb.append(sum);\\n        }\\n        \\n        return sb.reverse().toString();\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public String addBinary(String a, String b) {\\n        if(a == null || b ==null)\\n            return a == null? b: a;\\n            \\n        int carry =0;\\n        StringBuilder sb = new StringBuilder();        \\n        \\n        for(int i = a.length()-1, j = b.length() -1;  i >=0 || j >=0 || carry >0 ; i --, j --){\\n            int sum = 0;\\n            sum += (i >=0) ? a.charAt(i) - '0' : 0;\\n            sum += (j >=0) ? b.charAt(j) - '0' : 0;\\n            sum += carry;\\n            \\n            carry = sum /2;\\n            sum %=2;\\n            sb.append(sum);\\n        }\\n        \\n        return sb.reverse().toString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24783,
                "title": "simple-c-code-implementing-a-full-adder",
                "content": "    char* addBinary(char* a, char* b) {\\n    int la = strlen(a);\\n    int lb = strlen(b);\\n    int lr = la > lb ? la : lb;\\n    int carry = 0;\\n    char *res = (char*)calloc(lr + 2, sizeof(char));\\n    res[lr + 1] = '\\\\0';\\n    la--; lb--;\\n    while (la >= 0 || lb >= 0) {\\n        int ba = la >= 0 ? a[la--] - '0' : 0;\\n        int bb = lb >= 0 ? b[lb--] - '0' : 0;\\n        int br = ba ^ bb ^ carry;\\n        carry = (ba & bb) | (carry & (ba ^ bb));\\n        res[lr--] = br + '0';\\n    }\\n    if (!carry) return res + 1;\\n    res[0] = '1';\\n    return res;\\n}",
                "solutionTags": [],
                "code": "    char* addBinary(char* a, char* b) {\\n    int la = strlen(a);\\n    int lb = strlen(b);\\n    int lr = la > lb ? la : lb;\\n    int carry = 0;\\n    char *res = (char*)calloc(lr + 2, sizeof(char));\\n    res[lr + 1] = '\\\\0';\\n    la--; lb--;\\n    while (la >= 0 || lb >= 0) {\\n        int ba = la >= 0 ? a[la--] - '0' : 0;\\n        int bb = lb >= 0 ? b[lb--] - '0' : 0;\\n        int br = ba ^ bb ^ carry;\\n        carry = (ba & bb) | (carry & (ba ^ bb));\\n        res[lr--] = br + '0';\\n    }\\n    if (!carry) return res + 1;\\n    res[0] = '1';\\n    return res;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 3519981,
                "title": "c-java-python-javascript-detailed-explanation-easy-to-understand",
                "content": "# Intuition:\\nThe problem is to add two binary numbers represented as strings, i.e., \"101\" + \"110\" should give \"1011\". We can start by aligning the two binary numbers by adding leading zeros to the shorter string so that both strings have equal lengths. Then we can add the digits from right to left and keep track of any carry generated. Finally, we add the carry to the leftmost position if any.\\n\\n# Approach:\\n1. Calculate the lengths of the two input strings.\\n2. If the length of string a is greater than that of string b, add leading zeros to string b to make its length equal to that of string a. Otherwise, add leading zeros to string a to make its length equal to that of string b.\\n3. Initialize carry to 0 and an empty string ans.\\n4. Traverse the two input strings from right to left, one character at a time.\\n5. For each character, add its value with the corresponding character from the other string and the carry.\\n6. Determine the value of the current bit and the carry generated.\\n7. Add the current bit to the left end of the ans string.\\n8. Finally, if there is any carry left, add it to the leftmost position of the ans string.\\n9. Return the ans string.\\n\\n# Complexity:\\n- Time Complexity: The algorithm has a time complexity of O(N), where N is the length of the longer input string. This is because we traverse the input strings once from right to left, which takes O(N) time. \\n- Space Complexity: The algorithm has a space complexity of O(N), where N is the length of the longer input string. This is because we store the result in an ans string which can have a maximum length of N+1.\\n\\n---\\n# C++\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int l1=a.length();\\n        int l2=b.length();\\n        if(a.length()>b.length()){\\n            int diff=(a.length()-b.length());\\n            for(int i=0;i<diff;i++){\\n                b=\"0\"+b;\\n            }\\n        }\\n        if(a.length()<b.length()){\\n            int diff=(b.length()-a.length());\\n            for(int i=0;i<diff;i++){\\n                a=\"0\"+a;\\n            }\\n        }\\n        int carry=0;\\n        string ans=\"\";\\n        for(int i=a.length()-1;i>=0;i--){\\n            cout<<a[i]<<\"+\"<<b[i]<<\"+\"<<carry<<endl;\\n            if(a[i]==\\'0\\' && b[i]==\\'0\\' && carry==0){\\n                ans=\"0\"+ans;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'0\\' && carry==1){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'1\\' && carry==1){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'0\\' && carry==1){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'0\\' && carry==0){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'1\\' && carry==1){\\n                ans=\"1\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'1\\' && carry==0){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'1\\' && carry==0){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n        }\\n        if(carry==1){\\n            ans=\"1\"+ans;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n\\n# JAVA\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int l1 = a.length();\\n        int l2 = b.length();\\n        if (a.length() > b.length()) {\\n            int diff = a.length() - b.length();\\n            for (int i = 0; i < diff; i++) {\\n                b = \"0\" + b;\\n            }\\n        }\\n        if (a.length() < b.length()) {\\n            int diff = b.length() - a.length();\\n            for (int i = 0; i < diff; i++) {\\n                a = \"0\" + a;\\n            }\\n        }\\n        int carry = 0;\\n        String ans = \"\";\\n        for (int i = a.length() - 1; i >= 0; i--) {\\n            if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'0\\' && carry == 0) {\\n                ans = \"0\" + ans;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'0\\' && carry == 1) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'1\\' && carry == 1) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'0\\' && carry == 1) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'0\\' && carry == 0) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'1\\' && carry == 1) {\\n                ans = \"1\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'1\\' && carry == 0) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'1\\' && carry == 0) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            }\\n        }\\n        if (carry == 1) {\\n            ans = \"1\" + ans;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\\n\\n---\\n# Python\\n```\\nclass Solution(object):\\n    def addBinary(self, a, b):\\n        l1 = len(a)\\n        l2 = len(b)\\n        if len(a) > len(b):\\n            diff = len(a) - len(b)\\n            for i in range(diff):\\n                b = \"0\" + b\\n        if len(a) < len(b):\\n            diff = len(b) - len(a)\\n            for i in range(diff):\\n                a = \"0\" + a\\n        carry = 0\\n        ans = \"\"\\n        for i in range(len(a) - 1, -1, -1):\\n            if a[i] == \\'0\\' and b[i] == \\'0\\' and carry == 0:\\n                ans = \"0\" + ans\\n            elif a[i] == \\'0\\' and b[i] == \\'0\\' and carry == 1:\\n                ans = \"1\" + ans\\n                carry = 0\\n            elif a[i] == \\'0\\' and b[i] == \\'1\\' and carry == 1:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'0\\' and carry == 1:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'0\\' and carry == 0:\\n                ans = \"1\" + ans\\n                carry = 0\\n            elif a[i] == \\'1\\' and b[i] == \\'1\\' and carry == 1:\\n                ans = \"1\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'1\\' and carry == 0:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'0\\' and b[i] == \\'1\\' and carry == 0:\\n                ans = \"1\" + ans\\n                carry = 0\\n        if carry == 1:\\n            ans = \"1\" + ans\\n        return ans\\n\\n```\\n\\n---\\n\\n# JavaScript\\n```\\nvar addBinary = function(a, b) {\\n    let l1 = a.length;\\n    let l2 = b.length;\\n    if (a.length > b.length) {\\n        let diff = a.length - b.length;\\n        for (let i = 0; i < diff; i++) {\\n            b = \"0\" + b;\\n        }\\n    }\\n    if (a.length < b.length) {\\n        let diff = b.length - a.length;\\n        for (let i = 0; i < diff; i++) {\\n            a = \"0\" + a;\\n        }\\n    }\\n    let carry = 0;\\n    let ans = \"\";\\n    for (let i = a.length - 1; i >= 0; i--) {\\n        if (a[i] === \\'0\\' && b[i] === \\'0\\' && carry === 0) {\\n            ans = \"0\" + ans;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'0\\' && carry === 1) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'1\\' && carry === 1) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'0\\' && carry === 1) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'0\\' && carry === 0) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'1\\' && carry === 1) {\\n            ans = \"1\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'1\\' && carry === 0) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'1\\' && carry === 0) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        }\\n    }\\n    if (carry === 1) {\\n        ans = \"1\" + ans;\\n    }\\n    return ans; \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int l1=a.length();\\n        int l2=b.length();\\n        if(a.length()>b.length()){\\n            int diff=(a.length()-b.length());\\n            for(int i=0;i<diff;i++){\\n                b=\"0\"+b;\\n            }\\n        }\\n        if(a.length()<b.length()){\\n            int diff=(b.length()-a.length());\\n            for(int i=0;i<diff;i++){\\n                a=\"0\"+a;\\n            }\\n        }\\n        int carry=0;\\n        string ans=\"\";\\n        for(int i=a.length()-1;i>=0;i--){\\n            cout<<a[i]<<\"+\"<<b[i]<<\"+\"<<carry<<endl;\\n            if(a[i]==\\'0\\' && b[i]==\\'0\\' && carry==0){\\n                ans=\"0\"+ans;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'0\\' && carry==1){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'1\\' && carry==1){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'0\\' && carry==1){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'0\\' && carry==0){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'1\\' && carry==1){\\n                ans=\"1\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'1\\' && b[i]==\\'1\\' && carry==0){\\n                ans=\"0\"+ans;\\n                carry=1;\\n            }\\n            else if(a[i]==\\'0\\' && b[i]==\\'1\\' && carry==0){\\n                ans=\"1\"+ans;\\n                carry=0;\\n            }\\n        }\\n        if(carry==1){\\n            ans=\"1\"+ans;\\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int l1 = a.length();\\n        int l2 = b.length();\\n        if (a.length() > b.length()) {\\n            int diff = a.length() - b.length();\\n            for (int i = 0; i < diff; i++) {\\n                b = \"0\" + b;\\n            }\\n        }\\n        if (a.length() < b.length()) {\\n            int diff = b.length() - a.length();\\n            for (int i = 0; i < diff; i++) {\\n                a = \"0\" + a;\\n            }\\n        }\\n        int carry = 0;\\n        String ans = \"\";\\n        for (int i = a.length() - 1; i >= 0; i--) {\\n            if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'0\\' && carry == 0) {\\n                ans = \"0\" + ans;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'0\\' && carry == 1) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'1\\' && carry == 1) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'0\\' && carry == 1) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'0\\' && carry == 0) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'1\\' && carry == 1) {\\n                ans = \"1\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'1\\' && b.charAt(i) == \\'1\\' && carry == 0) {\\n                ans = \"0\" + ans;\\n                carry = 1;\\n            } else if (a.charAt(i) == \\'0\\' && b.charAt(i) == \\'1\\' && carry == 0) {\\n                ans = \"1\" + ans;\\n                carry = 0;\\n            }\\n        }\\n        if (carry == 1) {\\n            ans = \"1\" + ans;\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\n```\\nclass Solution(object):\\n    def addBinary(self, a, b):\\n        l1 = len(a)\\n        l2 = len(b)\\n        if len(a) > len(b):\\n            diff = len(a) - len(b)\\n            for i in range(diff):\\n                b = \"0\" + b\\n        if len(a) < len(b):\\n            diff = len(b) - len(a)\\n            for i in range(diff):\\n                a = \"0\" + a\\n        carry = 0\\n        ans = \"\"\\n        for i in range(len(a) - 1, -1, -1):\\n            if a[i] == \\'0\\' and b[i] == \\'0\\' and carry == 0:\\n                ans = \"0\" + ans\\n            elif a[i] == \\'0\\' and b[i] == \\'0\\' and carry == 1:\\n                ans = \"1\" + ans\\n                carry = 0\\n            elif a[i] == \\'0\\' and b[i] == \\'1\\' and carry == 1:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'0\\' and carry == 1:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'0\\' and carry == 0:\\n                ans = \"1\" + ans\\n                carry = 0\\n            elif a[i] == \\'1\\' and b[i] == \\'1\\' and carry == 1:\\n                ans = \"1\" + ans\\n                carry = 1\\n            elif a[i] == \\'1\\' and b[i] == \\'1\\' and carry == 0:\\n                ans = \"0\" + ans\\n                carry = 1\\n            elif a[i] == \\'0\\' and b[i] == \\'1\\' and carry == 0:\\n                ans = \"1\" + ans\\n                carry = 0\\n        if carry == 1:\\n            ans = \"1\" + ans\\n        return ans\\n\\n```\n```\\nvar addBinary = function(a, b) {\\n    let l1 = a.length;\\n    let l2 = b.length;\\n    if (a.length > b.length) {\\n        let diff = a.length - b.length;\\n        for (let i = 0; i < diff; i++) {\\n            b = \"0\" + b;\\n        }\\n    }\\n    if (a.length < b.length) {\\n        let diff = b.length - a.length;\\n        for (let i = 0; i < diff; i++) {\\n            a = \"0\" + a;\\n        }\\n    }\\n    let carry = 0;\\n    let ans = \"\";\\n    for (let i = a.length - 1; i >= 0; i--) {\\n        if (a[i] === \\'0\\' && b[i] === \\'0\\' && carry === 0) {\\n            ans = \"0\" + ans;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'0\\' && carry === 1) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'1\\' && carry === 1) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'0\\' && carry === 1) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'0\\' && carry === 0) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'1\\' && carry === 1) {\\n            ans = \"1\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'1\\' && b[i] === \\'1\\' && carry === 0) {\\n            ans = \"0\" + ans;\\n            carry = 1;\\n        } else if (a[i] === \\'0\\' && b[i] === \\'1\\' && carry === 0) {\\n            ans = \"1\" + ans;\\n            carry = 0;\\n        }\\n    }\\n    if (carry === 1) {\\n        ans = \"1\" + ans;\\n    }\\n    return ans; \\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3183207,
                "title": "java-easy-solution-with-detailed-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- We have to find the `sum` so we need to start from the **right** end of both the numbers.\\n- To start iterating from the right end of the strings we first calculated the last indices `indexA` & `indexB`\\n- To store the digits sum we initialized `digitSum=0`\\n- To store the carry we initialized `carry=0`\\n- Then we keep a check if `a` & `b` is non-Empty if yes we increase the `digitSum`\\n- To keep check of the `carry`, we check if `digitSum > 1`. If yes, that means there is a `carry` and it needs to be considered.\\n\\n- At last, we insert the calculated digit at the start of the StringBuilder.\\n- And then return the sum after converting it to String via `toString()`. \\n\\n# Complexity\\n- Time complexity: `O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Please give this an UPVOTE if you find it useful!\\n\\n# Code\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sum= new StringBuilder(\"\");\\n        int indexA= a.length()-1;\\n        int indexB =b.length()-1;\\n        int carry=0;\\n        int digitSum=0;\\n        while(indexA >= 0 || indexB >= 0 || carry > 0 ){\\n            digitSum = carry;\\n            if(indexA >= 0) digitSum += a.charAt(indexA--)-\\'0\\';\\n            if(indexB >= 0) digitSum += b.charAt(indexB--)-\\'0\\';\\n            if(digitSum >1) carry=1;\\n            else carry=0;\\n            sum.insert(0, digitSum%2);\\n        }\\n        return sum.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sum= new StringBuilder(\"\");\\n        int indexA= a.length()-1;\\n        int indexB =b.length()-1;\\n        int carry=0;\\n        int digitSum=0;\\n        while(indexA >= 0 || indexB >= 0 || carry > 0 ){\\n            digitSum = carry;\\n            if(indexA >= 0) digitSum += a.charAt(indexA--)-\\'0\\';\\n            if(indexB >= 0) digitSum += b.charAt(indexB--)-\\'0\\';\\n            if(digitSum >1) carry=1;\\n            else carry=0;\\n            sum.insert(0, digitSum%2);\\n        }\\n        return sum.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 372361,
                "title": "java-1ms-100-100-simple-explanation-without-converting-char-in-one-loop",
                "content": "```java\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        boolean carry = false;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n\\t\\t// Create a buffer with length equal to the bigger input String  + 1 to carry overflow\\n\\t\\t// Result of \\'11\\' + \\'1\\' = \\'100\\', so length(\\'11\\') + 1 = 3\\n        StringBuilder result = new StringBuilder(((i > j) ? i : j) + 1); \\n        \\n        while (i >= 0 || j >= 0) {\\n\\t\\t\\t// if one of the input is shorter, use \\'0\\' as operand. \\'11\\' + \\'1\\' = \\'11\\' + \\'01\\'\\n            char charA = (i >= 0) ? a.charAt(i--) : \\'0\\'; \\n            char charB = (j >= 0) ? b.charAt(j--) : \\'0\\';\\n            \\n\\t\\t\\t// Cases when adding Binary\\t\\t\\t\\n\\t\\t\\t// 0 + 0 = 0 \\n\\t\\t\\t// 1 + 0 = 1\\n\\t\\t\\t// 1 + 1 = 10 \\n\\t\\t\\t// 1 + 1 + 1 = 11\\n            if (charA == \\'1\\' && charB == \\'1\\') { // 1 + 1\\n\\t\\t\\t\\tresult = (carry) ? result.append(\\'1\\') : result.append(\\'0\\'); // result is 11 or 10 ?\\n\\t\\t\\t\\tcarry = true;\\n            } else if (charA == \\'0\\' && charB == \\'0\\') { // 0 + 0\\n                result = (carry) ? result.append(\\'1\\') : result.append(\\'0\\'); // result is 1 or 0 ?\\n                carry = false;\\n            } else { // 1 + 0 or 0 + 1\\n                result = (carry) ? result.append(\\'0\\') : result.append(\\'1\\'); // result is 10 or 1 ?\\n            }\\n        }\\n        \\n\\t\\t// carry overflow : \\'11\\' + \\'1\\' = \\'00\\' + 1 overflow = \\'001\\'\\n        if (carry) result.append(\\'1\\');\\n        \\n\\t\\t// reverse the result string : \\'11\\' + \\'1\\' = \\'001\\' , so reverse it to obtain \\'100\\'\\n        return result.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        boolean carry = false;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n\\t\\t// Create a buffer with length equal to the bigger input String  + 1 to carry overflow\\n\\t\\t// Result of \\'11\\' + \\'1\\' = \\'100\\', so length(\\'11\\') + 1 = 3\\n        StringBuilder result = new StringBuilder(((i > j) ? i : j) + 1); \\n        \\n        while (i >= 0 || j >= 0) {\\n\\t\\t\\t// if one of the input is shorter, use \\'0\\' as operand. \\'11\\' + \\'1\\' = \\'11\\' + \\'01\\'\\n            char charA = (i >= 0) ? a.charAt(i--) : \\'0\\'; \\n            char charB = (j >= 0) ? b.charAt(j--) : \\'0\\';\\n            \\n\\t\\t\\t// Cases when adding Binary\\t\\t\\t\\n\\t\\t\\t// 0 + 0 = 0 \\n\\t\\t\\t// 1 + 0 = 1\\n\\t\\t\\t// 1 + 1 = 10 \\n\\t\\t\\t// 1 + 1 + 1 = 11\\n            if (charA == \\'1\\' && charB == \\'1\\') { // 1 + 1\\n\\t\\t\\t\\tresult = (carry) ? result.append(\\'1\\') : result.append(\\'0\\'); // result is 11 or 10 ?\\n\\t\\t\\t\\tcarry = true;\\n            } else if (charA == \\'0\\' && charB == \\'0\\') { // 0 + 0\\n                result = (carry) ? result.append(\\'1\\') : result.append(\\'0\\'); // result is 1 or 0 ?\\n                carry = false;\\n            } else { // 1 + 0 or 0 + 1\\n                result = (carry) ? result.append(\\'0\\') : result.append(\\'1\\'); // result is 10 or 1 ?\\n            }\\n        }\\n        \\n\\t\\t// carry overflow : \\'11\\' + \\'1\\' = \\'00\\' + 1 overflow = \\'001\\'\\n        if (carry) result.append(\\'1\\');\\n        \\n\\t\\t// reverse the result string : \\'11\\' + \\'1\\' = \\'001\\' , so reverse it to obtain \\'100\\'\\n        return result.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24476,
                "title": "super-short-java-code",
                "content": "    public class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder sum = new StringBuilder();\\n            int i = a.length() - 1;\\n            int j = b.length() - 1;\\n            int carry = 0;\\n            while (i >= 0 || j >= 0 || carry == 1) {\\n                int digitA = i < 0 ? 0 : a.charAt(i--) - '0';\\n                int digitB = j < 0 ? 0 : b.charAt(j--) - '0';\\n                sum.insert(0, (digitA + digitB + carry) % 2);\\n                carry = (digitA + digitB + carry) / 2;\\n            }\\n            return sum.toString();\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder sum = new StringBuilder();\\n            int i = a.length() - 1;\\n            int j = b.length() - 1;\\n            int carry = 0;\\n            while (i >= 0 || j >= 0 || carry == 1) {\\n                int digitA = i < 0 ? 0 : a.charAt(i--) - '0';\\n                int digitB = j < 0 ? 0 : b.charAt(j--) - '0';\\n                sum.insert(0, (digitA + digitB + carry) % 2);\\n                carry = (digitA + digitB + carry) / 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 294845,
                "title": "one-line-java-solution",
                "content": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return (new BigInteger(a, 2)).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return (new BigInteger(a, 2)).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 203758,
                "title": "very-simple-swift-solution",
                "content": "```\\nclass Solution {\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        var a = a, b = b\\n        var carry = 0\\n        var result = \"\"\\n        while !a.isEmpty || !b.isEmpty || carry > 0 {\\n            let x = Int(a.isEmpty ? \"0\" : String(a.removeLast()))!\\n            let y = Int(b.isEmpty ? \"0\" : String(b.removeLast()))!\\n            let sum = x + y + carry\\n            result = String(sum % 2) + result\\n            carry = sum / 2\\n        }        \\n        return result\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        var a = a, b = b\\n        var carry = 0\\n        var result = \"\"\\n        while !a.isEmpty || !b.isEmpty || carry > 0 {\\n            let x = Int(a.isEmpty ? \"0\" : String(a.removeLast()))!\\n            let y = Int(b.isEmpty ? \"0\" : String(b.removeLast()))!\\n            let sum = x + y + carry\\n            result = String(sum % 2) + result\\n            carry = sum / 2\\n        }        \\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24788,
                "title": "short-o-n-time-o-1-space-c-solution",
                "content": "I just write the sum into the longer one of the inputs. Don't worry about modifying them, as getting `string` means we're getting copies. The \"O(1) space\" of course refers to the space I use in addition to input and output. If the output doesn't need to be longer than the longer input, I even only use O(1) space in addition to only the input.\\n\\n    struct Solution {\\n        string addBinary(string a, string b) {\\n            if (a.size() < b.size())\\n                swap(a, b);\\n            int i = a.size(), j = b.size();\\n            while (i--) {\\n                if (j) a[i] += b[--j] & 1;\\n                if (a[i] > '1') {\\n                    a[i] -= 2;\\n                    if (i) a[i-1]++; else a = '1' + a;\\n                }\\n            }\\n            return a;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "I just write the sum into the longer one of the inputs. Don't worry about modifying them, as getting `string` means we're getting copies. The \"O(1) space\" of course refers to the space I use in addition to input and output. If the output doesn't need to be longer than the longer input, I even only use O(1) space in addition to only the input.\\n\\n    struct Solution {\\n        string addBinary(string a, string b) {\\n            if (a.size() < b.size())\\n                swap(a, b);\\n            int i = a.size(), j = b.size();\\n            while (i--) {\\n                if (j) a[i] += b[--j] & 1;\\n                if (a[i] > '1') {\\n                    a[i] -= 2;\\n                    if (i) a[i-1]++; else a = '1' + a;\\n                }\\n            }\\n            return a;\\n        }\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 3182944,
                "title": "python-3-one-lines-of-code-time-95-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis code is a simple implementation of converting binary numbers to integers, adding them, and then converting the sum back to binary. The conversion of binary to integer is done using the int() method with a base of 2, which means that it will treat the string as a binary number and return the equivalent integer. After adding the integers,\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a , 2) + int(b,2))[2:]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a , 2) + int(b,2))[2:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2637606,
                "title": "c-easy-to-understand-o-n-m-diagrammatic-representation",
                "content": "**Approach**\\n![image](https://assets.leetcode.com/users/images/ed94d72f-379a-4868-910b-ae5c2ac3606c_1664435071.5181186.png)\\n\\n``` \\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) \\n    {\\n        int n = a.size(), m = b.size();\\n        int i = n-1 , j = m-1;\\n        int carry = 0;\\n        string ans = \"\";\\n        while(i >= 0 || j >= 0)\\n        {\\n            int val1 = (i >= 0) ? a[i]-\\'0\\' : 0 ;\\n            int val2 = (j >= 0) ? b[j]-\\'0\\' : 0 ;\\n            \\n            int total = val1 + val2 + carry ;\\n            ans = to_string(total % 2) + ans ;\\n\\t\\t\\t/*\\n\\t\\t\\tif total = 3 means ans will be 1 since 1 + 1 + 1 = 1 with carry 1.\\n\\t\\t\\tif total = 2 then ans will be 0 since 1 + 1 = 0 with carry 1.\\n\\t\\t\\tif total = 1 means ans will be 1 since 0 + 1 = 1 with carry 0.\\n\\t\\t\\t*/\\n            carry = total/2 ;\\n            i--;\\n            j--;\\n        }\\n        \\n        if(carry)\\n        {\\n            ans = \\'1\\' + ans ;\\n        }\\n        \\n        return ans ;\\n        \\n    }\\n};\\n```\\n\\n**Time Complexity = O(N+M)**\\n**Space Comlexity = O(M)**\\n\\n**If you understood the approach then please do upvote!**\\n**Happy Coding!\\u2764\\uFE0F**",
                "solutionTags": [
                    "C"
                ],
                "code": "``` \\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) \\n    {\\n        int n = a.size(), m = b.size();\\n        int i = n-1 , j = m-1;\\n        int carry = 0;\\n        string ans = \"\";\\n        while(i >= 0 || j >= 0)\\n        {\\n            int val1 = (i >= 0) ? a[i]-\\'0\\' : 0 ;\\n            int val2 = (j >= 0) ? b[j]-\\'0\\' : 0 ;\\n            \\n            int total = val1 + val2 + carry ;\\n            ans = to_string(total % 2) + ans ;\\n\\t\\t\\t/*\\n\\t\\t\\tif total = 3 means ans will be 1 since 1 + 1 + 1 = 1 with carry 1.\\n\\t\\t\\tif total = 2 then ans will be 0 since 1 + 1 = 0 with carry 1.\\n\\t\\t\\tif total = 1 means ans will be 1 since 0 + 1 = 1 with carry 0.\\n\\t\\t\\t*/\\n            carry = total/2 ;\\n            i--;\\n            j--;\\n        }\\n        \\n        if(carry)\\n        {\\n            ans = \\'1\\' + ans ;\\n        }\\n        \\n        return ans ;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1421832,
                "title": "python3-self-understandable",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        while len(b)<len(a):\\n            b=\\'0\\'+b\\n        while len(a)<len(b):\\n            a=\\'0\\'+a\\n        carry=0\\n        a=[int(i) for i in a]\\n        b=[int(i) for i in b]\\n        ans=\\'\\'\\n        for i in range(len(a)-1,-1,-1):\\n            val=a[i]+b[i]+carry\\n            if val==3:\\n                carry=1\\n                ans=\\'1\\'+ans\\n            elif val==2:\\n                carry=1\\n                ans=\\'0\\'+ans\\n            elif val==1:\\n                ans=\\'1\\'+ans\\n                carry=0\\n            else:\\n                ans=\\'0\\'+ans\\n        return str(carry)+ans if carry else ans\\n```\\n\\n***Do upvote if you found my solution helpful :)***",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        while len(b)<len(a):\\n            b=\\'0\\'+b\\n        while len(a)<len(b):\\n            a=\\'0\\'+a\\n        carry=0\\n        a=[int(i) for i in a]\\n        b=[int(i) for i in b]\\n        ans=\\'\\'\\n        for i in range(len(a)-1,-1,-1):\\n            val=a[i]+b[i]+carry\\n            if val==3:\\n                carry=1\\n                ans=\\'1\\'+ans\\n            elif val==2:\\n                carry=1\\n                ans=\\'0\\'+ans\\n            elif val==1:\\n                ans=\\'1\\'+ans\\n                carry=0\\n            else:\\n                ans=\\'0\\'+ans\\n        return str(carry)+ans if carry else ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061502,
                "title": "rust-one-liner",
                "content": "Just for fun seeing some Python solutions wanted to find out how terse this could be done in Rust. Behold:\\n\\n```\\nimpl Solution {\\n    pub fn add_binary(a: String, b: String) -> String {\\n        format!(\"{:b}\", u128::from_str_radix(&a, 2).unwrap() + u128::from_str_radix(&b, 2).unwrap())\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn add_binary(a: String, b: String) -> String {\\n        format!(\"{:b}\", u128::from_str_radix(&a, 2).unwrap() + u128::from_str_radix(&b, 2).unwrap())\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24671,
                "title": "my-0ms-c-solution-15-lines",
                "content": "    char* addBinary(char* a, char* b) {\\n    int lena = strlen(a), lenb = strlen(b), carry = 0;\\n    int lenc = lena > lenb?lena:lenb;\\n    char * c = malloc(lenc+2);\\n    c[lenc+1] = '\\\\0';\\n    while(lena || lenb ){\\n        if(lena) carry += (a[--lena]-'0');\\n        if(lenb) carry += (b[--lenb]-'0');\\n        c[lenc--] = (carry&1)+'0';\\n        carry >>= 1;\\n    }\\n    c[0] = carry+'0';\\n    return c+(carry^1);\\n    // for(int i = -1, j = 0;c[j] && !carry;c[++i] = c[++j]);\\n    // return c;\\n    }",
                "solutionTags": [],
                "code": "    char* addBinary(char* a, char* b) {\\n    int lena = strlen(a), lenb = strlen(b), carry = 0;\\n    int lenc = lena > lenb?lena:lenb;\\n    char * c = malloc(lenc+2);\\n    c[lenc+1] = '\\\\0';\\n    while(lena || lenb ){\\n        if(lena) carry += (a[--lena]-'0');\\n        if(lenb) carry += (b[--lenb]-'0');\\n        c[lenc--] = (carry&1)+'0';\\n        carry >>= 1;\\n    }\\n    c[0] = carry+'0';\\n    return c+(carry^1);\\n    // for(int i = -1, j = 0;c[j] && !carry;c[++i] = c[++j]);\\n    // return c;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24585,
                "title": "my-simple-4ms-java-solution-clean-and-consice",
                "content": "      public String addBinary(String a, String b) {\\n        int aLength = a.length();\\n        int bLength = b.length();\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        while(Math.max(aLength, bLength) > 0) {\\n          int aNum = aLength > 0 ? (a.charAt(aLength---1) - '0') : 0;\\n          int bNum = bLength > 0 ? (b.charAt(bLength---1) - '0') : 0;\\n          int cNum = aNum + bNum + carry;\\n          sb.append(cNum%2);\\n          carry = cNum / 2;\\n        }\\n        return (carry == 1)?sb.append(1).reverse().toString():sb.reverse().toString();\\n      }",
                "solutionTags": [
                    "Java"
                ],
                "code": "      public String addBinary(String a, String b) {\\n        int aLength = a.length();\\n        int bLength = b.length();\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        while(Math.max(aLength, bLength) > 0) {\\n          int aNum = aLength > 0 ? (a.charAt(aLength---1) - '0') : 0;\\n          int bNum = bLength > 0 ? (b.charAt(bLength---1) - '0') : 0;\\n          int cNum = aNum + bNum + carry;\\n          sb.append(cNum%2);\\n          carry = cNum / 2;\\n        }\\n        return (carry == 1)?sb.append(1).reverse().toString():sb.reverse().toString();\\n      }",
                "codeTag": "Unknown"
            },
            {
                "id": 3059554,
                "title": "very-straightforward-c-solution",
                "content": "# Approach\\nStarting from the end of numbers `a` and `b`, sum the digits one by one in a loop while keeping track of a carry on each step. If one of the numbers ends, use a zero instead of a digit. In the end, reverse the result list and concatenate all digits to get the final number. That\\'s it!\\n\\n# Complexity\\n- Time complexity: $$O(Max(n,m))$$\\n\\n- Space complexity: $$O(Max(n,m))$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var sum = new List<int>();\\n        for (int i = a.Length - 1, j = b.Length - 1, carry = 0; i >= 0 || j >= 0 || carry > 0;)\\n        {\\n            var firstDigit = i >= 0 ? a[i--] - \\'0\\' : 0;\\n            var secondDigit = j >= 0 ? b[j--] - \\'0\\' : 0;\\n            var sumDigit = firstDigit + secondDigit + carry;\\n            carry = sumDigit / 2;\\n            sum.Add(sumDigit % 2);\\n        }\\n        sum.Reverse();\\n        return String.Concat(sum);\\n    }\\n}\\n```\\n\\nPlease, upvote if the solution was useful for you!",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var sum = new List<int>();\\n        for (int i = a.Length - 1, j = b.Length - 1, carry = 0; i >= 0 || j >= 0 || carry > 0;)\\n        {\\n            var firstDigit = i >= 0 ? a[i--] - \\'0\\' : 0;\\n            var secondDigit = j >= 0 ? b[j--] - \\'0\\' : 0;\\n            var sumDigit = firstDigit + secondDigit + carry;\\n            carry = sumDigit / 2;\\n            sum.Add(sumDigit % 2);\\n        }\\n        sum.Reverse();\\n        return String.Concat(sum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1243244,
                "title": "c-100-faster-0-ms-clean-code",
                "content": "***\\u2714C++ Implementation :***\\n\\n```\\n\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        int carry = 0;\\n        string ans=\"\";\\n        int i=0;\\n        while(i<a.length() && i<b.length()){\\n            int sum = carry + (a[i] - \\'0\\') + (b[i]-\\'0\\');\\n            carry = sum>=2 ? 1 : 0;\\n            ans += (sum%2) + \\'0\\';\\n            i++;\\n        }\\n        \\n\\n            if(i<a.length()){\\n                while(i<a.length()){\\n                    int sum = carry + (a[i] - \\'0\\');\\n                    carry = sum>=2 ? 1 : 0;\\n                    ans += (sum%2) + \\'0\\';\\n                    i++;\\n                }\\n            }else{\\n                while(i<b.length()){\\n                    int sum = carry + (b[i] - \\'0\\');\\n                    carry = sum>=2 ? 1 : 0;\\n                    ans += (sum%2) + \\'0\\';\\n                    i++;\\n                }\\n            }\\n        \\n        if(carry) ans += carry + \\'0\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n\\t\\n```\\n\\nHope you liked it , kindly upvote :)\\n\\n## Happy Coding Fellas \\uD83E\\uDD17\\u270C\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        int carry = 0;\\n        string ans=\"\";\\n        int i=0;\\n        while(i<a.length() && i<b.length()){\\n            int sum = carry + (a[i] - \\'0\\') + (b[i]-\\'0\\');\\n            carry = sum>=2 ? 1 : 0;\\n            ans += (sum%2) + \\'0\\';\\n            i++;\\n        }\\n        \\n\\n            if(i<a.length()){\\n                while(i<a.length()){\\n                    int sum = carry + (a[i] - \\'0\\');\\n                    carry = sum>=2 ? 1 : 0;\\n                    ans += (sum%2) + \\'0\\';\\n                    i++;\\n                }\\n            }else{\\n                while(i<b.length()){\\n                    int sum = carry + (b[i] - \\'0\\');\\n                    carry = sum>=2 ? 1 : 0;\\n                    ans += (sum%2) + \\'0\\';\\n                    i++;\\n                }\\n            }\\n        \\n        if(carry) ans += carry + \\'0\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1218664,
                "title": "java-bit-manipulation-xor-and-100-explanations",
                "content": "**1. What are the inputs ?**\\n- 3 numbers : `n1`, `n2`, `c(carry)`, are used to form a new number, denoted as `n`\\n\\n**2. What remains as output(in one digit)?**\\n- The least significant digit of n.\\n\\n**3. What gets to shift to more significant bits?**\\n- The most significant digit of n (since n can have at most two digits here, the highest digit).  \\n\\n\\n**4. Patterns of the least significant digit (denoted as `lowest`)**\\n- `lowest` = 0 if:\\n\\t-  any two of n1, n2, and carry are 1 OR\\n\\t-  all three are 0, \\n\\t-  which means an even number of 1s is needed to form a 0. \\n- `lowest` = 1 if :\\n\\t-  any one of n1, n2 and carry is 1 OR\\n\\t-  all three are 1\\n\\t-  which means an odd number of 1s is needed to form a 1. \\n- This leads us to the **XOR** operation. \\n\\t- 0 ^ 0 ^ 0 = 0\\n\\t- 0 ^ 0 ^ 1 = 1\\n\\t- 0 ^ 1 ^ 0 = 1\\n\\t- 0 ^ 1 ^ 1 = 0\\n\\t- 1 ^ 0 ^ 0  = 1\\n\\t- 1 ^ 0 ^ 1 = 0 \\n\\t- 1 ^ 1 ^ 0 = 0\\n\\t- 1 ^ 1 ^ 1 = 1 \\n\\n**5. Patterns of the most siginificant digit (denoted as `highest`) :**\\nLet\\'s go back to elementary arithmetic and think about :\\n- What is a carry? \\n\\t-  Carry is a number being transferred from a lower digit to a higher one.  \\n- Why do we need a carry ? \\n\\t- A number is too large for the lower digits to represent. \\n- Specifically, when do we need a carry in the binary system\\uFF1F\\n\\t- When a number is **larger than or equal to 2**. \\n- How to make sure the number `n` is at least two? \\n\\t- n is at least two = at least two components, n1, n2, and carry have values of 1. \\n\\t- Make use of the **&** operator. \\n\\t- Because only 1 & 1 = 1, all other cases 1 & 0, 0 & 0, 0 & 1 are 0. \\n```\\npublic String addBinary(String a, String b) {\\n\\tint pa = a.length() - 1, pb = b.length() - 1; \\n\\tint carry = 0;\\n\\tStringBuilder builder = new StringBuilder(); \\n\\n\\tint na, nb; \\n\\twhile (pa >= 0 || pb >= 0 || carry != 0) {\\n\\t\\tna = pa >= 0 ? a.charAt(pa) - \\'0\\' : 0;\\n\\t\\tnb = pb >= 0 ? b.charAt(pb) - \\'0\\' : 0;\\n\\t\\tbuilder.append(na ^ nb ^ carry);  // add lowest to output\\n\\t\\tcarry = (na & nb) | (na & carry) | (nb & carry);  // keeps highest as next carry \\n\\t\\tpa--;\\n\\t\\tpb--;\\n\\t}\\n\\n\\treturn builder.reverse().toString(); \\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\npublic String addBinary(String a, String b) {\\n\\tint pa = a.length() - 1, pb = b.length() - 1; \\n\\tint carry = 0;\\n\\tStringBuilder builder = new StringBuilder(); \\n\\n\\tint na, nb; \\n\\twhile (pa >= 0 || pb >= 0 || carry != 0) {\\n\\t\\tna = pa >= 0 ? a.charAt(pa) - \\'0\\' : 0;\\n\\t\\tnb = pb >= 0 ? b.charAt(pb) - \\'0\\' : 0;\\n\\t\\tbuilder.append(na ^ nb ^ carry);  // add lowest to output\\n\\t\\tcarry = (na & nb) | (na & carry) | (nb & carry);  // keeps highest as next carry \\n\\t\\tpa--;\\n\\t\\tpb--;\\n\\t}\\n\\n\\treturn builder.reverse().toString(); \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3186596,
                "title": "have-you-thought-this-way-beats-100-self-explanatory-code",
                "content": "![3549-pepepopcorn.png](https://assets.leetcode.com/users/images/19cd7464-9788-4e2b-b03c-92c42adf55eb_1676405483.184702.png)\\n\\nVery easy indeed. But have you thought this way?\\n\\n# Approach\\nYou probably know that from decimal to binary:\\n0 -> 0\\n1 -> 1\\n2 -> 10\\n3 -> 11\\n\\nHow about we split them as sums of 1 and 0\\'s:\\n\\n| carry | ch1 | ch2 | sum | decimal value |\\n|-------|-----|-----|-----|-----|\\n| 0 | 0 | 0 | 0| 0 |\\n|0 | 0 | 1 | 1 | 1 |\\n|0 | 1 | 0 | 10 | 2 |\\n|1 | 1 | 1 | 11 | 3 |\\n\\nWe need to first distinguish the larger and smaller strings. For our solution, we will always determine **a** as smaller and **b** as larger. If they are not, we will swap them.\\n\\nThen, we will iterate the loop until the larger value >= 0. \\n- If the smaller value is < 0, we will assign ch1 = 0;\\n- Then we will sum all of them. Remind to sum the carry. At first the carry is 0.\\n- If the sum is either 0 or 1, carry will be 0.\\n- But if the sum is 2 or 3, the carry will be 1.\\n- The string appended will be 0 for sum = 2\\nand 1 for sum = 3.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\nWe declare a new StringBuilder and also a new temp variable while swapping the strings. These will require extra space. The size is dependent on the input length. That\\'s why O(n).\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int smaller = a.length()-1, larger = b.length()-1;\\n        if(smaller>larger){\\n            int tmp = smaller;\\n            smaller = larger;\\n            larger = tmp;\\n            String temp = a;\\n            a = b;\\n            b = temp;\\n        }\\n        int carry = 0;\\n        while(larger>=0){\\n            int ch1 = (smaller>=0)?a.charAt(smaller)-\\'0\\':0;\\n            int ch2 = b.charAt(larger)-\\'0\\';\\n            int sum = ch1 + ch2 + carry;\\n            // 2 = 10\\n            if(sum == 2){\\n                carry = 1;\\n                sb.append(\"0\");\\n            }\\n            // 3 = 11\\n            else if(sum == 3){\\n                carry = 1;\\n                sb.append(\"1\");\\n            }\\n            // 1 = 1, or, 0 = 0\\n            else{\\n                carry = 0;\\n                char ch = (char)(sum+\\'0\\');\\n                sb.append(ch);\\n            }\\n            smaller--;\\n            larger--;\\n        }\\n        // if there\\'s still one carry left!\\n        if(carry == 1){\\n            sb.append(\"1\");\\n        }\\n        \\n        sb.reverse();\\n        return sb.toString();\\n    }\\n}\\n```\\n\\n![No Upvotes, Have a Good Day.png](https://assets.leetcode.com/users/images/a1a61be1-eb3e-4e69-8d8a-49ce68f4a13b_1676405549.70167.png)\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int smaller = a.length()-1, larger = b.length()-1;\\n        if(smaller>larger){\\n            int tmp = smaller;\\n            smaller = larger;\\n            larger = tmp;\\n            String temp = a;\\n            a = b;\\n            b = temp;\\n        }\\n        int carry = 0;\\n        while(larger>=0){\\n            int ch1 = (smaller>=0)?a.charAt(smaller)-\\'0\\':0;\\n            int ch2 = b.charAt(larger)-\\'0\\';\\n            int sum = ch1 + ch2 + carry;\\n            // 2 = 10\\n            if(sum == 2){\\n                carry = 1;\\n                sb.append(\"0\");\\n            }\\n            // 3 = 11\\n            else if(sum == 3){\\n                carry = 1;\\n                sb.append(\"1\");\\n            }\\n            // 1 = 1, or, 0 = 0\\n            else{\\n                carry = 0;\\n                char ch = (char)(sum+\\'0\\');\\n                sb.append(ch);\\n            }\\n            smaller--;\\n            larger--;\\n        }\\n        // if there\\'s still one carry left!\\n        if(carry == 1){\\n            sb.append(\"1\");\\n        }\\n        \\n        sb.reverse();\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1329387,
                "title": "solution-swift-add-binary",
                "content": "```swift\\nclass Solution {\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        let arrA = Array(a), arrB = Array(b)\\n        var result = \"\", carry = 0, idx1 = arrA.count - 1, idx2 = arrB.count - 1\\n        \\n        while idx1 >= 0 || idx2 >= 0 || carry > 0 {\\n            var sum = carry\\n            idx1 >= 0 ? (sum += Int(\"\\\\(arrA[idx1])\")!, idx1 -= 1) : nil\\n            idx2 >= 0 ? (sum += Int(\"\\\\(arrB[idx2])\")!, idx2 -= 1) : nil\\n            result = \"\\\\(sum % 2)\" + result\\n            carry = sum / 2\\n        }\\n        return result\\n    }\\n}\\n```\\n\\n---\\n\\n<p>\\n<details>\\n<summary>\\n<img src=\"https://git.io/JDblm\" height=\"24\">\\n<b>TEST CASES</b>\\n</summary>\\n\\n<p><pre>\\n<b>Result:</b> Executed 2 tests, with 0 failures (0 unexpected) in 0.016 (0.018) seconds\\n</pre></p>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    func test0() {\\n        let value = solution.addBinary(\"11\", \"1\")\\n        XCTAssertEqual(value, \"100\")\\n    }\\n    \\n    func test1() {\\n        let value = solution.addBinary(\"1010\", \"1011\")\\n        XCTAssertEqual(value, \"10101\")\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>\\n</p>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        let arrA = Array(a), arrB = Array(b)\\n        var result = \"\", carry = 0, idx1 = arrA.count - 1, idx2 = arrB.count - 1\\n        \\n        while idx1 >= 0 || idx2 >= 0 || carry > 0 {\\n            var sum = carry\\n            idx1 >= 0 ? (sum += Int(\"\\\\(arrA[idx1])\")!, idx1 -= 1) : nil\\n            idx2 >= 0 ? (sum += Int(\"\\\\(arrB[idx2])\")!, idx2 -= 1) : nil\\n            result = \"\\\\(sum % 2)\" + result\\n            carry = sum / 2\\n        }\\n        return result\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    func test0() {\\n        let value = solution.addBinary(\"11\", \"1\")\\n        XCTAssertEqual(value, \"100\")\\n    }\\n    \\n    func test1() {\\n        let value = solution.addBinary(\"1010\", \"1011\")\\n        XCTAssertEqual(value, \"10101\")\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 695976,
                "title": "c-2-solutions-easy-to-understand-bit-manipulation-and-bit-by-bit-addition",
                "content": "**Addition Operation**\\n\\nStraight-forward solution where you add up the bits one at a time.\\n\\n```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var n1 = a.Length - 1;\\n        var n2 = b.Length - 1;\\n        var carry = 0;\\n        \\n        var result = new StringBuilder();\\n        while(carry > 0 || n1 >= 0 || n2 >= 0) {\\n            var c1 = n1 >= 0 ? a[n1] : \\'0\\';\\n            var c2 = n2 >= 0 ? b[n2] : \\'0\\';\\n            \\n            var sum = carry + (c1-\\'0\\') + (c2-\\'0\\');\\n            if(sum > 1) {\\n                carry = 1;\\n                sum = sum - 2;\\n            } else {\\n                carry = 0;\\n            }\\n            \\n            result.Insert(0, sum);\\n            \\n            n1--;\\n            n2--;\\n        }\\n        \\n        return result.ToString();\\n    }\\n}\\n```\\n\\n**Bit Manipulation**\\n\\nA follow-up to this question is to solve this problem without using addition operation. We can use bit manipulation instead. The intuition is that to calculate carry, at least 2 of the 3 bits (carry, bit from string a, bit from string b) have to be 1. Therefore, you can do:\\n`carry = (c1 | carry ) & (c2 | carry) & (c1 | c2);`\\n\\n```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var n1 = a.Length - 1;\\n        var n2 = b.Length - 1;\\n        var carry = 0;\\n        \\n        var result = new StringBuilder();\\n        while(carry > 0 || n1 >= 0 || n2 >= 0) {\\n            var c1 = n1 >= 0 ? a[n1] - \\'0\\' : 0;\\n            var c2 = n2 >= 0 ? b[n2] - \\'0\\' : 0;\\n            \\n            var sum = (c1 ^ c2 ^ carry);\\n            carry = (c1 | carry ) & (c2 | carry) & (c1 | c2);\\n            \\n            result.Insert(0, sum);\\n            \\n            n1--;\\n            n2--;\\n        }\\n\\n        return result.ToString();\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var n1 = a.Length - 1;\\n        var n2 = b.Length - 1;\\n        var carry = 0;\\n        \\n        var result = new StringBuilder();\\n        while(carry > 0 || n1 >= 0 || n2 >= 0) {\\n            var c1 = n1 >= 0 ? a[n1] : \\'0\\';\\n            var c2 = n2 >= 0 ? b[n2] : \\'0\\';\\n            \\n            var sum = carry + (c1-\\'0\\') + (c2-\\'0\\');\\n            if(sum > 1) {\\n                carry = 1;\\n                sum = sum - 2;\\n            } else {\\n                carry = 0;\\n            }\\n            \\n            result.Insert(0, sum);\\n            \\n            n1--;\\n            n2--;\\n        }\\n        \\n        return result.ToString();\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        var n1 = a.Length - 1;\\n        var n2 = b.Length - 1;\\n        var carry = 0;\\n        \\n        var result = new StringBuilder();\\n        while(carry > 0 || n1 >= 0 || n2 >= 0) {\\n            var c1 = n1 >= 0 ? a[n1] - \\'0\\' : 0;\\n            var c2 = n2 >= 0 ? b[n2] - \\'0\\' : 0;\\n            \\n            var sum = (c1 ^ c2 ^ carry);\\n            carry = (c1 | carry ) & (c2 | carry) & (c1 | c2);\\n            \\n            result.Insert(0, sum);\\n            \\n            n1--;\\n            n2--;\\n        }\\n\\n        return result.ToString();\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 198691,
                "title": "java-one-liner",
                "content": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return new BigInteger(a, 2).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return new BigInteger(a, 2).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 190723,
                "title": "5ms-java-solution-with-explanation-of-code-and-binary-adding",
                "content": "I didn\\u2019t like the other Java solutions posted, they seem to either use \\u201Ctricks\\u201D or don\\u2019t explain what\\u2019s going on. So first of all I\\u2019ll start by saying that if you haven\\u2019t noticed, it\\u2019s a lot harder to solve this problem concisely in Java than it is in Python or C++. Below is a 5ms solution, so only faster than 25% of solutions. I purposely haven\\u2019t optimized it to its max potential to keep it legible, but hopefully you can find a faster way of doing it.\\n\\n\\n\\\\\\n\\\\\\n***Arithmetic***  \\n\\\\\\nTo solve the problem, you need to know how arithmetic works for any base. Humans use base 10, so our number system is composed of the combination of numbers from 0-9. Think of the base as the amount of unique digits you can represent a number with, but make sure to include 0. Right now we are trying to make an adder for base 2, a.k.a binary.\\n\\nYou should already know how adding works, you start by adding two values from right to left. Let\\u2019s call this value the *sum*. If the *sum* exceeds the highest single integer you can represent them with ( for base 10: 9, binary: 1), you subtract the base from the *sum*  *n* amount of times, where *n* is the number of times you had to subtract base from *sum* be within the range of the integers you can represent. You then \\u201Ccarry over\\u201D the value of *n*, to be added to the next pair of integers.\\n\\n\\n\\\\\\n\\\\\\nA base 10 example:\\n\\nFor 27 + 27, you add 7+7 to get 14, which is greater than 9. So you subtract 10 once from 14, and now you have a carry of 1 and a final sum of 4. You now add one, two, and two to get 5. So your final answer is 54.\\n\\n\\\\\\nSo for binary a = \\u201C11\\u201D, b = \\u201C1\\u201D\\na: 11\\nb: 01\\n\\nFirst we add 1+1, which equals 2. Since 2 > 1, our highest integer, we set the value of the first place to to 2 - 2 (0), and carry over the base * 1 to the next addition. So our result right now is **0**, and we have a carry of 1 (our base times 1.)\\n\\nSo 1+0 is 0, but our carry is also 1. We add the carry to this sum, and now the value is 2 (1 + 0 + 1.) We do the same thing as last time, and set the sum to 2-2, and carry over the base*I, the amount of time we had to subtract 2 to get the value to be less than 2, yet again. Our result right now is **00**.\\n\\nWe are out of numbers to add, but we still have a carry of base, so we simply add that to the end. Our final result is then **100**.\\n\\n\\n\\n\\n\\nBy now you probably have a good idea of how to solve this problem, but there\\u2019s one case you have to watch out for: when the carry is greater than 1.\\n\\\\\\n\\\\\\nSo for binary a = \\u201C110\\u201D, b = \\u201C111\\u201D\\na: 110\\nb: 111\\n\\nFirst we add 0 + 1, and no carry, so our result is **1**\\nThen we add 1 + 1, since 2 > 1, we set our sum to 0 and carry over 1. Our result is now **01**\\n\\nNow we do 1+1 again, except with a carry of 1, so the real sum is 3. Since 3 > 1, we have to subtract 2 from it just once, but now the final sum is 1, not 0. Most people will try to implement a binary adder where you simply set the final value to 0 when the final sum is greater than 1, but that\\u2019s too naive of an approach. \\n\\nCheck out how I implemented it, after writing this I think I\\u2019ve found 10 new ways of making this more efficient, but I\\u2019ll let you have at it.\\n\\\\\\n\\\\\\n***Code***  \\n\\n` \\n\\n    public String addBinary(String a, String b) {\\n    // As another user pointed out, iterating across char arrays is faster than using\\n    // charAt(); So split into them and iterate with a single pointer.\\n    char[] aArray = a.toCharArray();\\n    int aLen = aArray.length;\\n\\t\\n    char[] bArray = b.toCharArray();\\n    int bLen = bArray.length;\\n\\n    int ptr = 0;\\n\\n    int carry=0;\\n    int aVal=0;\\n    int bVal=0;\\n    String strToReturn=\\u201C\\u201D;\\n\\n    while(ptr < aLen || ptr < bLen) {\\n      aVal=0; bVal=0; // Reset values after every pointer iteration.\\n      if(ptr < aLen)\\n        aVal = (aArray[aLen-1 -ptr] == \\u20181\\u2019) ? 1 : 0; // Converts from char to integer\\n      if(ptr <bLen)\\n        bVal = (bArray[bLen-1 -ptr] == \\u20181\\u2019) ? 1 : 0;\\n\\n      int finalVal = aVal +bVal + carry; // total after adding carry.\\n      if(finalVal > 1) {\\n        carry=finalVal-1;\\n        if(carry > 1) {finalVal = 1; carry=1; }\\n        else finalVal=0;\\n\\n      }\\n      else\\n          carry=0; // If either 0 or 1 after adding carry, just reset carry.\\n\\n      strToReturn=finalVal+\\u201D\\u201D+strToReturn; // Add to front of string.\\n      ptr++;\\n    }\\n    if(carry > 0) strToReturn=\\u201C1\\u201D+strToReturn; // If any leftover carry at the end, just append a \\u201C1\\u201D to the start.\\n    return strToReturn;\\n    }\\n`\\n\\n\\n",
                "solutionTags": [],
                "code": "I didn\\u2019t like the other Java solutions posted, they seem to either use \\u201Ctricks\\u201D or don\\u2019t explain what\\u2019s going on. So first of all I\\u2019ll start by saying that if you haven\\u2019t noticed, it\\u2019s a lot harder to solve this problem concisely in Java than it is in Python or C++. Below is a 5ms solution, so only faster than 25% of solutions. I purposely haven\\u2019t optimized it to its max potential to keep it legible, but hopefully you can find a faster way of doing it.\\n\\n\\n\\\\\\n\\\\\\n***Arithmetic***  \\n\\\\\\nTo solve the problem, you need to know how arithmetic works for any base. Humans use base 10, so our number system is composed of the combination of numbers from 0-9. Think of the base as the amount of unique digits you can represent a number with, but make sure to include 0. Right now we are trying to make an adder for base 2, a.k.a binary.\\n\\nYou should already know how adding works, you start by adding two values from right to left. Let\\u2019s call this value the *sum*. If the *sum* exceeds the highest single integer you can represent them with ( for base 10: 9, binary: 1), you subtract the base from the *sum*  *n* amount of times, where *n* is the number of times you had to subtract base from *sum* be within the range of the integers you can represent. You then \\u201Ccarry over\\u201D the value of *n*, to be added to the next pair of integers.\\n\\n\\n\\\\\\n\\\\\\nA base 10 example:\\n\\nFor 27 + 27, you add 7+7 to get 14, which is greater than 9. So you subtract 10 once from 14, and now you have a carry of 1 and a final sum of 4. You now add one, two, and two to get 5. So your final answer is 54.\\n\\n\\\\\\nSo for binary a = \\u201C11\\u201D, b = \\u201C1\\u201D\\na: 11\\nb: 01\\n\\nFirst we add 1+1, which equals 2. Since 2 > 1, our highest integer, we set the value of the first place to to 2 - 2 (0), and carry over the base * 1 to the next addition. So our result right now is **0**, and we have a carry of 1 (our base times 1.)\\n\\nSo 1+0 is 0, but our carry is also 1. We add the carry to this sum, and now the value is 2 (1 + 0 + 1.) We do the same thing as last time, and set the sum to 2-2, and carry over the base*I, the amount of time we had to subtract 2 to get the value to be less than 2, yet again. Our result right now is **00**.\\n\\nWe are out of numbers to add, but we still have a carry of base, so we simply add that to the end. Our final result is then **100**.\\n\\n\\n\\n\\n\\nBy now you probably have a good idea of how to solve this problem, but there\\u2019s one case you have to watch out for: when the carry is greater than 1.\\n\\\\\\n\\\\\\nSo for binary a = \\u201C110\\u201D, b = \\u201C111\\u201D\\na: 110\\nb: 111\\n\\nFirst we add 0 + 1, and no carry, so our result is **1**\\nThen we add 1 + 1, since 2 > 1, we set our sum to 0 and carry over 1. Our result is now **01**\\n\\nNow we do 1+1 again, except with a carry of 1, so the real sum is 3. Since 3 > 1, we have to subtract 2 from it just once, but now the final sum is 1, not 0. Most people will try to implement a binary adder where you simply set the final value to 0 when the final sum is greater than 1, but that\\u2019s too naive of an approach. \\n\\nCheck out how I implemented it, after writing this I think I\\u2019ve found 10 new ways of making this more efficient, but I\\u2019ll let you have at it.\\n\\\\\\n\\\\\\n***Code***  \\n\\n` \\n\\n    public String addBinary(String a, String b) {\\n    // As another user pointed out, iterating across char arrays is faster than using\\n    // charAt(); So split into them and iterate with a single pointer.\\n    char[] aArray = a.toCharArray();\\n    int aLen = aArray.length;\\n\\t\\n    char[] bArray = b.toCharArray();\\n    int bLen = bArray.length;\\n\\n    int ptr = 0;\\n\\n    int carry=0;\\n    int aVal=0;\\n    int bVal=0;\\n    String strToReturn=\\u201C\\u201D;\\n\\n    while(ptr < aLen || ptr < bLen) {\\n      aVal=0; bVal=0; // Reset values after every pointer iteration.\\n      if(ptr < aLen)\\n        aVal = (aArray[aLen-1 -ptr] == \\u20181\\u2019) ? 1 : 0; // Converts from char to integer\\n      if(ptr <bLen)\\n        bVal = (bArray[bLen-1 -ptr] == \\u20181\\u2019) ? 1 : 0;\\n\\n      int finalVal = aVal +bVal + carry; // total after adding carry.\\n      if(finalVal > 1) {\\n        carry=finalVal-1;\\n        if(carry > 1) {finalVal = 1; carry=1; }\\n        else finalVal=0;\\n\\n      }\\n      else\\n          carry=0; // If either 0 or 1 after adding carry, just reset carry.\\n\\n      strToReturn=finalVal+\\u201D\\u201D+strToReturn; // Add to front of string.\\n      ptr++;\\n    }\\n    if(carry > 0) strToReturn=\\u201C1\\u201D+strToReturn; // If any leftover carry at the end, just append a \\u201C1\\u201D to the start.\\n    return strToReturn;\\n    }\\n`\\n\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 24656,
                "title": "7-line-7ms-c-code-probably-shortest",
                "content": "it's important to write concise code\\n\\n    class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            string res;\\n            int i = a.size(), j = b.size(), cur = 0;\\n            while(i || j || cur) {\\n                cur += (i ? a[(i--)-1] -'0' : 0) + (j ? b[(j--)-1] -'0' : 0);\\n                res = char(cur%2 + '0') + res;\\n                cur /= 2;\\n            }\\n            return res;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            string res;\\n            int i = a.size(), j = b.size(), cur = 0;\\n            while(i || j || cur) {\\n                cur += (i ? a[(i--)-1] -'0' : 0) + (j ? b[(j--)-1] -'0' : 0);\\n                res = char(cur%2 + '0') + res;\\n                cur /= 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 24838,
                "title": "a-straightforward-c-solution",
                "content": "  \\n\\n      string addBinary(string a, string b) {\\n            string result = \"\";\\n            int ia = a.size() - 1;\\n            int ib = b.size() - 1;\\n            int sum = 0;\\n            while (ia >= 0 || ib >= 0) {\\n                int va = 0, vb = 0;\\n                if (ia >= 0) {\\n                    va = a[ia] - '0'; ia --;\\n                }\\n                if (ib >= 0) {\\n                    vb = b[ib] - '0'; ib --;\\n                }\\n                sum = sum + va + vb;\\n                // possible values of sum: 0 ~ 3\\n                result = (sum % 2 == 0 ? \"0\" : \"1\") + result;\\n                sum = sum / 2;\\n            }\\n            if (sum == 1) result = \"1\" + result;\\n            return result;\\n        }",
                "solutionTags": [],
                "code": "  \\n\\n      string addBinary(string a, string b) {\\n            string result = \"\";\\n            int ia = a.size() - 1;\\n            int ib = b.size() - 1;\\n            int sum = 0;\\n            while (ia >= 0 || ib >= 0) {\\n                int va = 0, vb = 0;\\n                if (ia >= 0) {\\n                    va = a[ia] - '0'; ia --;\\n                }\\n                if (ib >= 0) {\\n                    vb = b[ib] - '0'; ib --;\\n                }\\n                sum = sum + va + vb;\\n                // possible values of sum: 0 ~ 3\\n                result = (sum % 2 == 0 ? \"0\" : \"1\") + result;\\n                sum = sum / 2;\\n            }\\n            if (sum == 1) result = \"1\" + result;\\n            return result;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 24808,
                "title": "python-one-liner-solution",
                "content": "    class Solution:\\n        # @param {string} a\\n        # @param {string} b\\n        # @return {string}\\n        def addBinary(self, a, b):\\n            return bin(int(a,2) + int(b,2))[2:]",
                "solutionTags": [
                    "Python"
                ],
                "code": "class Solution:\\n        # @param {string}",
                "codeTag": "Java"
            },
            {
                "id": 24797,
                "title": "213ms-java-solution-use-two-pointer-to-calculate-o-n-times",
                "content": "    public class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder str = new StringBuilder();\\n            int aPtr = a.length() - 1;\\n            int bPtr = b.length() - 1;\\n            int carry = 0;\\n            int count = 0;\\n            while(aPtr >= 0 || bPtr >= 0) {\\n                if(aPtr >= 0) {\\n                    if(a.charAt(aPtr) == '1') {\\n                        count ++;\\n                    }\\n                }\\n                if(bPtr >= 0) {\\n                    if(b.charAt(bPtr) == '1') {\\n                        count ++;\\n                    }\\n                }\\n                if(carry == 1) {\\n                    count++;\\n                }\\n                carry = (count > 1 ? 1 : 0);\\n                str.insert(0, ((count == 0 || count == 2)? '0' : '1'));\\n                count = 0;\\n                aPtr--;\\n                bPtr--;\\n            }\\n            if(carry == 1) {\\n                str.insert(0, '1');\\n            }\\n            return str.toString();\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public String addBinary(String a, String b) {\\n            StringBuilder str = new StringBuilder();\\n            int aPtr = a.length() - 1;\\n            int bPtr = b.length() - 1;\\n            int carry = 0;\\n            int count = 0;\\n            while(aPtr >= 0 || bPtr >= 0) {\\n                if(aPtr >= 0) {\\n                    if(a.charAt(aPtr) == '1') {\\n                        count ++;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3967679,
                "title": "two-simple-java-solutions-runtime-0ms-beats100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code 1\\n```\\nclass Solution {\\n   public static String addBinary(String a, String b) {\\n    int carry = 0;\\n    StringBuilder output = new StringBuilder();\\n    int length = Math.max(a.length(), b.length());\\n\\n    for (int i = a.length() - 1, z = b.length() - 1; length > 0; i--, z--, length--) {\\n        int x = (i >= 0) ? Character.getNumericValue(a.charAt(i)) : 0;\\n        int y = (z >= 0) ? Character.getNumericValue(b.charAt(z)) : 0;\\n\\n        int sum = x + y + carry;\\n        output.append(sum % 2); // Append the remainder of the sum\\n        carry = sum / 2; // Update the carry\\n    }\\n\\n    if (carry > 0) {\\n        output.append(carry); // If there\\'s a final carry, append it\\n    }\\n\\n    return output.reverse().toString();\\n}\\n\\n\\n}\\n```\\n\\n# code 2 \\n\\n```\\nclass Solution {\\npublic static String addBinary(String a, String b) {\\n    int carry = 0;\\n    StringBuilder output = new StringBuilder();\\n    int length = Math.max(a.length(), b.length()); // Use Math.max to get the maximum length\\n\\n    for (int i = a.length() - 1, z = b.length() - 1; length > 0; i--, z--, length--) {\\n        int x = (i >= 0) ? Character.getNumericValue(a.charAt(i)) : 0;\\n        int y = (z >= 0) ? Character.getNumericValue(b.charAt(z)) : 0;\\n\\n        int sum = x + y + carry;\\n\\n        if (sum > 1) {\\n            carry = 1;\\n            output.append(sum % 2); // Append the remainder of the sum\\n        } else {\\n            carry = 0;\\n            output.append(sum);\\n        }\\n    }\\n\\n    if (carry > 0) {\\n        output.append(carry); // If there\\'s a final carry, append it\\n    }\\n\\n    return output.reverse().toString();\\n}\\n}\\n```\\n\\n![e78315ef-8a9d-492b-9908-e3917f23eb31_1674946036.087042.jpeg](https://assets.leetcode.com/users/images/50f0b47b-f4a3-435a-a546-d93f75633914_1693145096.446008.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public static String addBinary(String a, String b) {\\n    int carry = 0;\\n    StringBuilder output = new StringBuilder();\\n    int length = Math.max(a.length(), b.length());\\n\\n    for (int i = a.length() - 1, z = b.length() - 1; length > 0; i--, z--, length--) {\\n        int x = (i >= 0) ? Character.getNumericValue(a.charAt(i)) : 0;\\n        int y = (z >= 0) ? Character.getNumericValue(b.charAt(z)) : 0;\\n\\n        int sum = x + y + carry;\\n        output.append(sum % 2); // Append the remainder of the sum\\n        carry = sum / 2; // Update the carry\\n    }\\n\\n    if (carry > 0) {\\n        output.append(carry); // If there\\'s a final carry, append it\\n    }\\n\\n    return output.reverse().toString();\\n}\\n\\n\\n}\\n```\n```\\nclass Solution {\\npublic static String addBinary(String a, String b) {\\n    int carry = 0;\\n    StringBuilder output = new StringBuilder();\\n    int length = Math.max(a.length(), b.length()); // Use Math.max to get the maximum length\\n\\n    for (int i = a.length() - 1, z = b.length() - 1; length > 0; i--, z--, length--) {\\n        int x = (i >= 0) ? Character.getNumericValue(a.charAt(i)) : 0;\\n        int y = (z >= 0) ? Character.getNumericValue(b.charAt(z)) : 0;\\n\\n        int sum = x + y + carry;\\n\\n        if (sum > 1) {\\n            carry = 1;\\n            output.append(sum % 2); // Append the remainder of the sum\\n        } else {\\n            carry = 0;\\n            output.append(sum);\\n        }\\n    }\\n\\n    if (carry > 0) {\\n        output.append(carry); // If there\\'s a final carry, append it\\n    }\\n\\n    return output.reverse().toString();\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183184,
                "title": "clean-and-easy-c-code",
                "content": "\\n# Code \\uD83D\\uDE80\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n\\n        string ans;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n\\n            if(i>=0) sum += a[i--]-\\'0\\';\\n            if(j>=0) sum += b[j--]-\\'0\\';\\n            \\n            //update carry for next round\\n            carry = sum>1 ? 1 : 0;\\n            ans += to_string(sum%2);\\n        }\\n\\n        if(carry) ans += to_string(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n# Please, Do Upvote if you find the solution helpful!\\nHappy coding :)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n\\n        string ans;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n\\n            if(i>=0) sum += a[i--]-\\'0\\';\\n            if(j>=0) sum += b[j--]-\\'0\\';\\n            \\n            //update carry for next round\\n            carry = sum>1 ? 1 : 0;\\n            ans += to_string(sum%2);\\n        }\\n\\n        if(carry) ans += to_string(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2945235,
                "title": "java-oneline-solutioin",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport java.math.*;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger m=new BigInteger(a,2);\\n        BigInteger n=m.add(new BigInteger(b,2));\\n        \\n        \\n        return n.toString(2);\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.*;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger m=new BigInteger(a,2);\\n        BigInteger n=m.add(new BigInteger(b,2));\\n        \\n        \\n        return n.toString(2);\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2765135,
                "title": "it-s-one-liner-baby",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return str(bin(int(a,2)+int(b,2)))[2:]  # first two elements of the binary is always 0b\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return str(bin(int(a,2)+int(b,2)))[2:]  # first two elements of the binary is always 0b\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2104551,
                "title": "c-simple-solution-0ms-96-beat-memory-usage",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int carry=0;\\n        \\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        string ans;\\n        while(i>=0 && j>=0){\\n            \\n            if(carry==0){\\n                if(a[i]==\\'0\\'){\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'0\\';\\n                    }\\n                    else{\\n                        ans+=\\'1\\';\\n                    }\\n                }\\n                else{\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'1\\';\\n                    }\\n                    else{\\n                        ans+=\\'0\\';\\n                        carry=1;\\n                    }\\n                }\\n            }\\n            else{\\n                 if(a[i]==\\'0\\'){\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'1\\';\\n                        carry=0;\\n                    }\\n                    else{\\n                        ans+=\\'0\\';\\n                    }\\n                }\\n                else{\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'0\\';\\n                    }\\n                    else{\\n                        ans+=\\'1\\';\\n                    }\\n                }\\n            }\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i>=0){\\n            if(carry==0){\\n                ans+=a[i];\\n            }\\n            else{\\n                if(a[i]==\\'0\\'){\\n                    ans+=\\'1\\';\\n                    carry=0;\\n                }\\n                else{\\n                    ans+=\\'0\\';\\n                }\\n            }\\n            i--;\\n        }\\n        while(j>=0){\\n            if(carry==0){\\n                ans+=b[j];\\n            }\\n            else{\\n                if(b[j]==\\'0\\'){\\n                    ans+=\\'1\\';\\n                    carry=0;\\n                }\\n                else{\\n                    ans+=\\'0\\';\\n                }\\n            }\\n            j--;\\n        }\\n        if(carry==1)\\n            ans+=\\'1\\';\\n        \\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int carry=0;\\n        \\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        string ans;\\n        while(i>=0 && j>=0){\\n            \\n            if(carry==0){\\n                if(a[i]==\\'0\\'){\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'0\\';\\n                    }\\n                    else{\\n                        ans+=\\'1\\';\\n                    }\\n                }\\n                else{\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'1\\';\\n                    }\\n                    else{\\n                        ans+=\\'0\\';\\n                        carry=1;\\n                    }\\n                }\\n            }\\n            else{\\n                 if(a[i]==\\'0\\'){\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'1\\';\\n                        carry=0;\\n                    }\\n                    else{\\n                        ans+=\\'0\\';\\n                    }\\n                }\\n                else{\\n                    if(b[j]==\\'0\\'){\\n                        ans+=\\'0\\';\\n                    }\\n                    else{\\n                        ans+=\\'1\\';\\n                    }\\n                }\\n            }\\n            i--;\\n            j--;\\n        }\\n        \\n        while(i>=0){\\n            if(carry==0){\\n                ans+=a[i];\\n            }\\n            else{\\n                if(a[i]==\\'0\\'){\\n                    ans+=\\'1\\';\\n                    carry=0;\\n                }\\n                else{\\n                    ans+=\\'0\\';\\n                }\\n            }\\n            i--;\\n        }\\n        while(j>=0){\\n            if(carry==0){\\n                ans+=b[j];\\n            }\\n            else{\\n                if(b[j]==\\'0\\'){\\n                    ans+=\\'1\\';\\n                    carry=0;\\n                }\\n                else{\\n                    ans+=\\'0\\';\\n                }\\n            }\\n            j--;\\n        }\\n        if(carry==1)\\n            ans+=\\'1\\';\\n        \\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1794830,
                "title": "python3-using-bin-and-int-simple",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        summ = bin(int(a, 2) + int(b, 2))\\n        return summ[2:]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        summ = bin(int(a, 2) + int(b, 2))\\n        return summ[2:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 845910,
                "title": "c-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n        string str=\"\";\\n        while(i>=0|| j>=0){\\n            int x = (i>=0)?a[i--]-\\'0\\':0; \\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            str=to_string(sum%2)+str;\\n            carry=sum/2;\\n        }\\n        if(carry>0)\\n               str=to_string(1)+str;\\n        return str;\\n        \\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n        string str=\"\";\\n        while(i>=0|| j>=0){\\n            int x = (i>=0)?a[i--]-\\'0\\':0; \\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            str=to_string(sum%2)+str;\\n            carry=sum/2;\\n        }\\n        if(carry>0)\\n               str=to_string(1)+str;\\n        return str;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 441283,
                "title": "simple-and-elegant-golang-solution-0-ms-faster-than-100-00",
                "content": "```go\\nfunc addBinary(a string, b string) string {\\n    if len(a) < len(b) {\\n        a, b = b, a\\n    }\\n    ans := make([]byte, len(a) + 1)\\n\\tvar carry byte\\n\\tfor i, j := len(a), len(b); i >= 1 || j >= 1; {\\n\\t\\ti, j = i - 1, j - 1\\n\\t\\tvar a2Digit, b2Digit byte\\n\\t\\tif (i >= 0) {\\n\\t\\t\\ta2Digit = a[i] - \\'0\\'\\n\\t\\t}\\n\\t\\tif (j >= 0) {\\n\\t\\t\\tb2Digit = b[j] - \\'0\\'\\n\\t\\t}\\n        // sum and carry of full adder\\n\\t\\tsum := a2Digit ^ b2Digit ^ carry\\n\\t\\tcarry = a2Digit & b2Digit | carry & (a2Digit ^ b2Digit)\\n        ans[i+1] = sum + \\'0\\'\\n\\t}\\n\\tif carry == 1 {\\n\\t\\tans[0] = \\'1\\'\\n        return string(ans)\\n\\t}\\n    return string(ans[1:])\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc addBinary(a string, b string) string {\\n    if len(a) < len(b) {\\n        a, b = b, a\\n    }\\n    ans := make([]byte, len(a) + 1)\\n\\tvar carry byte\\n\\tfor i, j := len(a), len(b); i >= 1 || j >= 1; {\\n\\t\\ti, j = i - 1, j - 1\\n\\t\\tvar a2Digit, b2Digit byte\\n\\t\\tif (i >= 0) {\\n\\t\\t\\ta2Digit = a[i] - \\'0\\'\\n\\t\\t}\\n\\t\\tif (j >= 0) {\\n\\t\\t\\tb2Digit = b[j] - \\'0\\'\\n\\t\\t}\\n        // sum and carry of full adder\\n\\t\\tsum := a2Digit ^ b2Digit ^ carry\\n\\t\\tcarry = a2Digit & b2Digit | carry & (a2Digit ^ b2Digit)\\n        ans[i+1] = sum + \\'0\\'\\n\\t}\\n\\tif carry == 1 {\\n\\t\\tans[0] = \\'1\\'\\n        return string(ans)\\n\\t}\\n    return string(ans[1:])\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24593,
                "title": "javascript-solution-beats-96",
                "content": "```\\nvar addBinary = function(a, b) {\\n    var result = \"\";\\n    var i = a.length - 1;\\n    var j = b.length - 1;\\n    var carry = 0;\\n    while (i >= 0 || j >= 0 || carry > 0) {\\n        carry += i >= 0 ? parseInt(a[i--]) : 0;\\n        carry += j >= 0 ? parseInt(b[j--]) : 0;\\n        result = carry % 2 + result;\\n        carry = parseInt(carry / 2);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar addBinary = function(a, b) {\\n    var result = \"\";\\n    var i = a.length - 1;\\n    var j = b.length - 1;\\n    var carry = 0;\\n    while (i >= 0 || j >= 0 || carry > 0) {\\n        carry += i >= 0 ? parseInt(a[i--]) : 0;\\n        carry += j >= 0 ? parseInt(b[j--]) : 0;\\n        result = carry % 2 + result;\\n        carry = parseInt(carry / 2);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24776,
                "title": "a-8-line-c-solution-to-have-all-languages-here",
                "content": "    public string AddBinary(string a, string b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        for (int i = a.Length - 1, j = b.Length - 1; i >= 0 || j >= 0; i--, j--){\\n            int total= ((i >= 0 ? a[i] - '0' : 0) + (j >= 0 ? b[j] - '0' : 0)) + carry;\\n            sb.Insert(0, total == 2 || total == 0 ? '0' : '1');\\n            carry = total > 1 ? 1 : 0;\\n        }\\n        return carry == 1 ? sb.Insert(0, 1).ToString() : sb.ToString();\\n    }",
                "solutionTags": [],
                "code": "    public string AddBinary(string a, string b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        for (int i = a.Length - 1, j = b.Length - 1; i >= 0 || j >= 0; i--, j--){\\n            int total= ((i >= 0 ? a[i] - '0' : 0) + (j >= 0 ? b[j] - '0' : 0)) + carry;\\n            sb.Insert(0, total == 2 || total == 0 ? '0' : '1');\\n            carry = total > 1 ? 1 : 0;\\n        }\\n        return carry == 1 ? sb.Insert(0, 1).ToString() : sb.ToString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3129097,
                "title": "js-fully-loop-through-strings-perform-binary-addition",
                "content": "# Intuition\\nUse `parseInt(x,2)` to get the values of the strings as integers, add them, then convert back to a bianry string. This doesn\\'t work due to a binary number with length 10^4 not fitting into an integer. Second approach was to loop through the strings and impelment binary addition.\\n\\n# Approach\\nLoop through both strings, continuing through the longest. We could trim off the front of the longest to save a few loops, but we\\'d need to account for any carry over from the last addition. To keep it simple, we\\'ll just loop through and let the addition do its job.\\n\\nWhile our loop index will increase, we\\'ll add from the end of the strings. Indexing from 0 for the loop allows us to keep processing the strings consistently, even if they are different lengths.\\n\\nSince we are processing through the longest string, we need to check that the other string still has values with a length check. If not, we treat that as a 0.\\n\\nFor the actual addition, we\\'ll parse a single character into an integer. An improvement here could be to take multiple characters, but we\\'d still have to deal with the complexity putting the slices back together without hitting out integer limits.\\n\\nSince we are performing one character at a time, we simply add the two values, plus any carryover from previous calcualtions. If the result is 0 or 1, that\\'s our result. Greater that 1 we\\'ll need to remove our carryover and our result is the remained. In this case,carry over is always 1, and out result in sum mod 2, since binary representations of 2 and 3 are 10 and 11 respectively. We can never have a value higher than 3. Once we have our result we add it to the front of our string. \\n\\nWhen we complete the loop, we may still have a carryover. This problem does not allow for a leading zero. We can\\'t just loop an extra iteration. If carry is zero, that would add a leading zero to our string. After the loop, we add a 1 if we have a carryover.\\n\\n# Test Cases\\n - Either or both numbers are 0\\n - Cases to verify all our possible outcomes of addition (0,1,2,3)\\n   - 0 + 1\\n   - 1 + 1\\n   - 1 + 11\\n   - 10 + 11\\n   - 11 + 11\\n - Leading 0 vs Leading 1\\n   - 1 + 1000\\n   - 1000 + 1000\\n- Numbers greater than or whos sum is greater than Number.MAX_SAFE_INTEGER\\n\\n# Code\\n```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n\\n    let result = \"\";\\n    let carry = 0;\\n    let index = 0;\\n\\n    while (index < Math.max(a.length,b.length)) {\\n        let x = 0;\\n        let y = 0;\\n\\n        if(a.length-1-index >= 0) {\\n            x = parseInt(a[a.length-1-index],2);\\n        }\\n\\n        if(b.length-1-index >= 0) {\\n            y = parseInt(b[b.length-1-index],2);\\n        }\\n        \\n        let sum = carry + x + y;\\n\\n        if(sum <= 1) {\\n            result = `${sum}${result}`;\\n            carry = 0;\\n        } else {\\n            result = `${sum%2}${result}`;\\n            carry = 1;\\n        }\\n\\n        index++;\\n    }\\n\\n    if (carry === 1) {\\n        result = `${carry}${result}`;\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n\\n    let result = \"\";\\n    let carry = 0;\\n    let index = 0;\\n\\n    while (index < Math.max(a.length,b.length)) {\\n        let x = 0;\\n        let y = 0;\\n\\n        if(a.length-1-index >= 0) {\\n            x = parseInt(a[a.length-1-index],2);\\n        }\\n\\n        if(b.length-1-index >= 0) {\\n            y = parseInt(b[b.length-1-index],2);\\n        }\\n        \\n        let sum = carry + x + y;\\n\\n        if(sum <= 1) {\\n            result = `${sum}${result}`;\\n            carry = 0;\\n        } else {\\n            result = `${sum%2}${result}`;\\n            carry = 1;\\n        }\\n\\n        index++;\\n    }\\n\\n    if (carry === 1) {\\n        result = `${carry}${result}`;\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3086336,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    //110101001\\n    //1101\\n    string addBinary(string a, string b) { \\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        int i=0,j=0;\\n        string c=\"0\";\\n        string ans=\"\";\\n        while(i<a.length() && j<b.length())\\n        {\\n            if(a[i]==\\'0\\' && b[j]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else if(a[i]==\\'1\\' && b[j]==\\'1\\')\\n            {\\n                ans+=c;\\n                c=\"1\";\\n            }\\n            else\\n            {\\n                if(c==\"1\")\\n                {\\n                    ans+=\"0\";\\n                    c=\"1\";\\n                }\\n                else\\n                {\\n                    ans+=\"1\";\\n                    c=\"0\";\\n                }\\n            }\\n            i++;\\n            j++;\\n        }\\n        while(i<a.length())\\n        {\\n            if(a[i]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else\\n            {\\n                if(c==\"0\")\\n                {\\n                    ans+=a[i];\\n                }\\n                else\\n                {\\n                    ans+=\\'0\\';\\n                    c=\"1\";\\n                }\\n                \\n            }\\n            i++;\\n        }\\n        while(j<b.length())\\n        {\\n            if(b[j]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else\\n            {\\n                if(c==\"0\")\\n                {\\n                    ans+=b[j];\\n                }\\n                else\\n                {\\n                    ans+=\\'0\\';\\n                    c=\"1\";\\n                }\\n                \\n            }\\n            j++;\\n        }\\n        if(c==\"1\")\\n        ans+=c;\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //110101001\\n    //1101\\n    string addBinary(string a, string b) { \\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        int i=0,j=0;\\n        string c=\"0\";\\n        string ans=\"\";\\n        while(i<a.length() && j<b.length())\\n        {\\n            if(a[i]==\\'0\\' && b[j]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else if(a[i]==\\'1\\' && b[j]==\\'1\\')\\n            {\\n                ans+=c;\\n                c=\"1\";\\n            }\\n            else\\n            {\\n                if(c==\"1\")\\n                {\\n                    ans+=\"0\";\\n                    c=\"1\";\\n                }\\n                else\\n                {\\n                    ans+=\"1\";\\n                    c=\"0\";\\n                }\\n            }\\n            i++;\\n            j++;\\n        }\\n        while(i<a.length())\\n        {\\n            if(a[i]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else\\n            {\\n                if(c==\"0\")\\n                {\\n                    ans+=a[i];\\n                }\\n                else\\n                {\\n                    ans+=\\'0\\';\\n                    c=\"1\";\\n                }\\n                \\n            }\\n            i++;\\n        }\\n        while(j<b.length())\\n        {\\n            if(b[j]==\\'0\\')\\n            {\\n                ans+=c;\\n                c=\"0\";\\n            }\\n            else\\n            {\\n                if(c==\"0\")\\n                {\\n                    ans+=b[j];\\n                }\\n                else\\n                {\\n                    ans+=\\'0\\';\\n                    c=\"1\";\\n                }\\n                \\n            }\\n            j++;\\n        }\\n        if(c==\"1\")\\n        ans+=c;\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2121434,
                "title": "python-concise-solution-with-divmod",
                "content": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n        \\n        la, lb = len(a), len(b)\\n        \\n        if la < lb:\\n            a = \\'0\\' * (lb - la) + a\\n        else:\\n            b = \\'0\\' * (la - lb) + b\\n        \\n        a = [int(c) for c in a]\\n        b = [int(c) for c in b]\\n        \\n        carry = 0\\n        \\n        for i in range(len(a)-1,-1,-1):\\n            \\n            carry, a[i] = divmod(a[i]+b[i]+carry,2)\\n        \\n        if carry:\\n             a = [carry] + a\\n        \\n        return \\'\\'.join([str(d) for d in a])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n        \\n        la, lb = len(a), len(b)\\n        \\n        if la < lb:\\n            a = \\'0\\' * (lb - la) + a\\n        else:\\n            b = \\'0\\' * (la - lb) + b\\n        \\n        a = [int(c) for c in a]\\n        b = [int(c) for c in b]\\n        \\n        carry = 0\\n        \\n        for i in range(len(a)-1,-1,-1):\\n            \\n            carry, a[i] = divmod(a[i]+b[i]+carry,2)\\n        \\n        if carry:\\n             a = [carry] + a\\n        \\n        return \\'\\'.join([str(d) for d in a])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1174486,
                "title": "python-single-line-solution-with-explanation",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a,2) + int(b,2))[2:]\\n```\\n\\nHere, first we convert the given strings(a and b) into their binary equivalents.\\nThis is done by ```int(a,2)``` and ```int(b,2)```. If we simply give ```int(a)```, the string will be converted to its decimal equivalent. So we need to specify to which base we need to convert the string into, which is 2 in our case.\\n\\nNow we need to carry out binary addition. To tell the system that we intend to carry out a binary operation and require the result in binary format, we enclose ```int(a,2) + int(b,2)``` with the ```bin()``` function. If we simply write ```int(a,2) + int(b,2)```, we will get the answer in decimal form.\\n\\nNow we will get the binary result with ```bin(int(a,2) + int(b,2))```. But by convention, the value of ```bin()``` is stored as a string starting with \\'0b\\', and then the result. For example if the actual answer for the binary addition is \\'100\\', the string returned by ```bin()``` will be \\'0b100\\'. This is to denote that the string represents a binary number.\\n\\nBut we do not need the extra \\'0b\\' in front of our answer. So we slice the string to ignore the first two characters, i.e. by [2:]. So the final answer is reached.\\n\\n```bin(int(a,2) + int(b,2))[2:]```\\n\\nNow just return it.\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a,2) + int(b,2))[2:]\\n```\n```int(a,2)```\n```int(b,2)```\n```int(a)```\n```int(a,2) + int(b,2)```\n```bin()```\n```int(a,2) + int(b,2)```\n```bin(int(a,2) + int(b,2))```\n```bin()```\n```bin()```\n```bin(int(a,2) + int(b,2))[2:]```",
                "codeTag": "Java"
            },
            {
                "id": 1012869,
                "title": "0ms-golang-solution-use-math-big-package-very-simple",
                "content": "```\\nfunc addBinary(a string, b string) string {\\n\\taInt,bInt,sum:=new(big.Int),new(big.Int),new(big.Int)\\n\\taInt.SetString(a,2)\\n\\tbInt.SetString(b,2)\\n\\tsum.Add(aInt,bInt)\\n\\treturn sum.Text(2)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addBinary(a string, b string) string {\\n\\taInt,bInt,sum:=new(big.Int),new(big.Int),new(big.Int)\\n\\taInt.SetString(a,2)\\n\\tbInt.SetString(b,2)\\n\\tsum.Add(aInt,bInt)\\n\\treturn sum.Text(2)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 865910,
                "title": "javascript-bit-manipulation",
                "content": "```\\nvar addBinary = function(a, b) {\\n  let binaryA = BigInt(\"0b\" + a);\\n  let binaryB = BigInt(\"0b\" + b);\\n  let sum;\\n  let carry;\\n  while (binaryB || carry === undefined) {\\n    sum = binaryA ^ binaryB;\\n    carry = (binaryA & binaryB) << BigInt(\"0b1\");\\n    binaryA = sum\\n    binaryB = carry\\n  }\\n  return sum.toString(2);\\n};\\n```\\nDoes it make sense ?",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function(a, b) {\\n  let binaryA = BigInt(\"0b\" + a);\\n  let binaryB = BigInt(\"0b\" + b);\\n  let sum;\\n  let carry;\\n  while (binaryB || carry === undefined) {\\n    sum = binaryA ^ binaryB;\\n    carry = (binaryA & binaryB) << BigInt(\"0b1\");\\n    binaryA = sum\\n    binaryB = carry\\n  }\\n  return sum.toString(2);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 847720,
                "title": "super-simple-python-solution-1-line",
                "content": "The idea behind the code is pretty simple.\\n\\nFirst, convert the given binary strings into base 10 integers. Then add them.\\nFinally, return the binary value of the answer.\\n\\n```\\ndef addBinary(self, a: str, b: str) -> str:\\n# Convert the given strings to int and add them. Then return bin value of result.\\n        return bin(int(a,2)+int(b,2))[2:]\\n\\t\\t\\n\\t\\t\\n\\t\\t# [2:] is taken because python returns the bin value starting with \"0b\" which we do not need.\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n# Convert the given strings to int and add them. Then return bin value of result.\\n        return bin(int(a,2)+int(b,2))[2:]\\n\\t\\t\\n\\t\\t\\n\\t\\t# [2:] is taken because python returns the bin value starting with \"0b\" which we do not need.\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 613270,
                "title": "javascript",
                "content": "```\\nvar addBinary = function(a, b) {\\n    let index1 = a.length;\\n    let index2 = b.length;\\n    let result = \\'\\';\\n    let carry = 0;\\n    while (index1 || index2) {\\n        let sum = (index1 > 0 ? +a[--index1] : 0) + (index2 > 0 ? +b[--index2] : 0) + carry;\\n        result = (sum % 2) + result;\\n        carry = sum > 1 ? 1 : 0;\\n    };\\n    return carry ? carry + result : result;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar addBinary = function(a, b) {\\n    let index1 = a.length;\\n    let index2 = b.length;\\n    let result = \\'\\';\\n    let carry = 0;\\n    while (index1 || index2) {\\n        let sum = (index1 > 0 ? +a[--index1] : 0) + (index2 > 0 ? +b[--index2] : 0) + carry;\\n        result = (sum % 2) + result;\\n        carry = sum > 1 ? 1 : 0;\\n    };\\n    return carry ? carry + result : result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24699,
                "title": "3ms-java-simple-solution-using-stringbuilder",
                "content": "    class Solution {\\n        public String addBinary(String a, String b) {\\n            int c = 0;\\n            StringBuilder sb = new StringBuilder();\\n            for(int i = a.length() - 1, j = b.length() - 1; i >= 0 || j >= 0;){\\n                if(i >= 0) c += a.charAt(i--) - '0';\\n                if(j >= 0) c += b.charAt(j--) - '0';\\n                sb.insert(0, (char)((c % 2) + '0'));\\n                c /= 2;\\n            }\\n            if(c == 1) sb.insert(0, \"1\");\\n            return sb.toString();\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "class Solution {\\n        public String addBinary(String a, String b) {\\n            int c = 0;\\n            StringBuilder sb = new StringBuilder();\\n            for(int i = a.length() - 1, j = b.length() - 1; i >= 0 || j >= 0;){\\n                if(i >= 0) c += a.charAt(i--) - '0';\\n                if(j >= 0) c += b.charAt(j--) - '0';\\n                sb.insert(0, (char)((c % 2) + '0'));\\n                c /= 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 24748,
                "title": "short-4ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            bool carry = false;\\n            int i = a.length() - 1, j = b.length()-1;\\n            string res(max(i,j)+1, '0');\\n            while(i >= 0 || j >= 0) {\\n                int cur = (i >= 0? a[i--]-'0' : 0) + (j >= 0 ? b[j--]-'0' : 0 ) + carry;\\n                res[max(i,j)+1] = (cur % 2) + '0';\\n                carry = (cur > 1);\\n            }\\n            if (carry) \\n                res = \"1\" + res;\\n            return res;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            bool carry = false;\\n            int i = a.length() - 1, j = b.length()-1;\\n            string res(max(i,j)+1, '0');\\n            while(i >= 0 || j >= 0) {\\n                int cur = (i >= 0? a[i--]-'0' : 0) + (j >= 0 ? b[j--]-'0' : 0 ) + carry;\\n                res[max(i,j)+1] = (cur % 2) + '0';\\n                carry = (cur > 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 24768,
                "title": "ac-clean-java-solution",
                "content": "    public String addBinary(String s1, String s2) {\\n        int i = s1.length() - 1, j = s2.length() - 1, c = 0;\\n        String s = \"\";\\n        \\n        while (i >= 0 || j >= 0 || c == 1) {\\n            int a = (i < 0) ? 0 : s1.charAt(i--) - '0';\\n            int b = (j < 0) ? 0 : s2.charAt(j--) - '0';\\n            \\n            s = (char)('0' + a ^ b ^ c) + s;\\n            c = (a + b + c) >> 1;\\n        }\\n        \\n        return s;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public String addBinary(String s1, String s2) {\\n        int i = s1.length() - 1, j = s2.length() - 1, c = 0;\\n        String s = \"\";\\n        \\n        while (i >= 0 || j >= 0 || c == 1) {\\n            int a = (i < 0) ? 0 : s1.charAt(i--) - '0';\\n            int b = (j < 0) ? 0 : s2.charAt(j--) - '0';\\n            \\n            s = (char)('0' + a ^ b ^ c) + s;\\n            c = (a + b + c) >> 1;\\n        }\\n        \\n        return s;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24773,
                "title": "c-vanilla",
                "content": "The idea is to use two pointers initialied at the end of the two binary numbers and add from back to forth.\\n\\n```cpp\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int m = a.size(), n = b.size(), carry = 0;\\n        for (int i = m - 1, j = n - 1; i >= 0 || j >= 0 || carry; i--, j--) {\\n            int x = i >= 0 ? a[i] - \\'0\\' : 0;\\n            int y = j >= 0 ? b[j] - \\'0\\' : 0;\\n            int sum = x ^ y ^ carry;\\n            carry = (x & y) | (x & carry) | (y & carry);\\n            ans = to_string(sum) + ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int m = a.size(), n = b.size(), carry = 0;\\n        for (int i = m - 1, j = n - 1; i >= 0 || j >= 0 || carry; i--, j--) {\\n            int x = i >= 0 ? a[i] - \\'0\\' : 0;\\n            int y = j >= 0 ? b[j] - \\'0\\' : 0;\\n            int sum = x ^ y ^ carry;\\n            carry = (x & y) | (x & carry) | (y & carry);\\n            ans = to_string(sum) + ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3859464,
                "title": "simple-and-clean-code-c-optimized",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\npublic:\\n\\n//facebook\\'s top 4 question:::\\n\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            //changing again to string for storing\\n            res += to_string(sum % 2);\\n        }\\n        //bilkull end me agar still koi carry aata hai to\\n        if(carry) res += to_string(carry);\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n\\n   \\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String",
                    "Bit Manipulation",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n\\npublic:\\n\\n//facebook\\'s top 4 question:::\\n\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0) sum += a[i--] - \\'0\\';\\n            if(j >= 0) sum += b[j--] - \\'0\\';\\n            carry = sum > 1 ? 1 : 0;\\n            //changing again to string for storing\\n            res += to_string(sum % 2);\\n        }\\n        //bilkull end me agar still koi carry aata hai to\\n        if(carry) res += to_string(carry);\\n        reverse(res.begin(), res.end());\\n        return res;\\n    }\\n};\\n\\n   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073488,
                "title": "python-one-liner-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe are just convert a binary number into a decimal and do a summation and return it as a binary number using \"bin\" and \"int\" functions of python. Here, by default we got 0b in answer as a prifix because of the \"bin\" function. That\\'s why we slice that final answer by doing [2:]\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a,2)+int(b,2))[2:]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a,2)+int(b,2))[2:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2571449,
                "title": "javascript-solution-in-one-line",
                "content": "```\\nvar addBinary = function (a, b) {\\n  return (BigInt(\\'0b\\' + a) + BigInt(\\'0b\\' + b)).toString(2);\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function (a, b) {\\n  return (BigInt(\\'0b\\' + a) + BigInt(\\'0b\\' + b)).toString(2);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1355068,
                "title": "c-solution-faster-than-100-easy-to-understand",
                "content": "Be clear with concepts of string and integer and their conversion.\\n\\nHere\\'s the code:\\n\\n\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        string result;\\n        int carry=0;\\n        while(i>=0||j>=0)\\n        {    \\n            int sum = carry;\\n            if(i>=0)\\n            sum+=a[i--] - \\'0\\';\\n            if(j>=0)\\n            sum+=b[j--] - \\'0\\';\\n            carry=sum > 1 ? 1:0;\\n            result+=to_string(sum%2);\\n        }\\n        if(carry)\\n            result+=to_string(carry);\\n            reverse(result.begin(),result.end());\\n        return result;\\n    }\\n};\\n```\\n\\nFor eg:\\nAdd 101 and 11\\nfrom last adding 1 and 1 ,initial carry is 0 , adding all we get 2\\n2>1 , so carry is 1 for next string.\\nresult is\\' 0\\'+\\'(2%2)\\'=\\'0\\';\\nnow add 0+1+1(carry)=2;\\nsum>1 =>carry =1 for next;\\nresult=\\'0\\'+\\'(2%2)\\'=\\'00\\'\\nnow add 1+1(carry)\\nsum>1 =carry =1;\\nresult=\\'00\\'+\\'(2%2)=\\'000\\'\\nboth strings end, append leftover carry by converting to string \\nresult = \\'000\\'+\\'1\\'=\\'0001\\';\\nreverse for final result=\\'1000\\'\\n101 (5) + 11 (3) = 1000  (8).\\n\\nHope you understood.\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        string result;\\n        int carry=0;\\n        while(i>=0||j>=0)\\n        {    \\n            int sum = carry;\\n            if(i>=0)\\n            sum+=a[i--] - \\'0\\';\\n            if(j>=0)\\n            sum+=b[j--] - \\'0\\';\\n            carry=sum > 1 ? 1:0;\\n            result+=to_string(sum%2);\\n        }\\n        if(carry)\\n            result+=to_string(carry);\\n            reverse(result.begin(),result.end());\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1324370,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn add_binary(a: String, b: String) -> String {\\n        use std::iter;\\n        let mut carry = 0;\\n        let mut cur_sum = 0;\\n        let mut char_vec = a\\n            .as_bytes()\\n            .iter()\\n            .rev()\\n            .chain(iter::repeat(&b\\'0\\'))\\n            .zip(b.as_bytes().iter().rev().chain(iter::repeat(&b\\'0\\')))\\n            .take(a.len().max(b.len()))\\n            .map(|(ac, bc)| {\\n                cur_sum = (*ac - b\\'0\\') + (*bc - b\\'0\\') + carry;\\n                carry = cur_sum / 2;\\n                match cur_sum % 2 {\\n                    1 => \\'1\\',\\n                    _ => \\'0\\',\\n                }\\n            })\\n            .collect::<Vec<_>>();\\n\\n        if carry == 1 {\\n            char_vec.push(\\'1\\');\\n        }\\n\\n        char_vec.iter().rev().collect()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn add_binary(a: String, b: String) -> String {\\n        use std::iter;\\n        let mut carry = 0;\\n        let mut cur_sum = 0;\\n        let mut char_vec = a\\n            .as_bytes()\\n            .iter()\\n            .rev()\\n            .chain(iter::repeat(&b\\'0\\'))\\n            .zip(b.as_bytes().iter().rev().chain(iter::repeat(&b\\'0\\')))\\n            .take(a.len().max(b.len()))\\n            .map(|(ac, bc)| {\\n                cur_sum = (*ac - b\\'0\\') + (*bc - b\\'0\\') + carry;\\n                carry = cur_sum / 2;\\n                match cur_sum % 2 {\\n                    1 => \\'1\\',\\n                    _ => \\'0\\',\\n                }\\n            })\\n            .collect::<Vec<_>>();\\n\\n        if carry == 1 {\\n            char_vec.push(\\'1\\');\\n        }\\n\\n        char_vec.iter().rev().collect()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 840448,
                "title": "js-98",
                "content": "```js\\nvar addBinary = function(a, b) {\\n  let i = a.length - 1, \\n      j = b.length - 1,\\n      carry = 0, \\n      result = [];\\n  while(i >= 0 || j >= 0) {\\n    let n1 = +a[i] || 0;\\n    let n2 = +b[j] || 0;\\n    let sum = n1 + n2 + carry;\\n    if(sum === 0) {\\n      result.unshift(0);\\n      carry = 0;\\n    } else if(sum === 1) {\\n      result.unshift(1);\\n       carry = 0;\\n    } else if(sum === 2) {\\n      result.unshift(0);\\n      carry = 1;\\n    } else if(sum === 3) {\\n      result.unshift(1);\\n      carry = 1;\\n    }\\n    i--;\\n    j--; \\n  }\\n  if(carry) {\\n    result.unshift(1);\\n  }\\n  return result.join(\"\");\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar addBinary = function(a, b) {\\n  let i = a.length - 1, \\n      j = b.length - 1,\\n      carry = 0, \\n      result = [];\\n  while(i >= 0 || j >= 0) {\\n    let n1 = +a[i] || 0;\\n    let n2 = +b[j] || 0;\\n    let sum = n1 + n2 + carry;\\n    if(sum === 0) {\\n      result.unshift(0);\\n      carry = 0;\\n    } else if(sum === 1) {\\n      result.unshift(1);\\n       carry = 0;\\n    } else if(sum === 2) {\\n      result.unshift(0);\\n      carry = 1;\\n    } else if(sum === 3) {\\n      result.unshift(1);\\n      carry = 1;\\n    }\\n    i--;\\n    j--; \\n  }\\n  if(carry) {\\n    result.unshift(1);\\n  }\\n  return result.join(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 726796,
                "title": "python-one-liner",
                "content": "Approach:\\n1. The problem can be solved by first **converting both binary values to decimals.** \\n2. **Compute sum** by adding the two decimal values.\\n3. Return the **binary value of the sum** in string format. \\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return str(bin(int(a, 2) + int (b, 2)))[2:]\\n```\\nIn python, a binary number ```n``` can be converted to its decimal form by using the ```int(n,2)```.\\nThus the operation ``` int(a, 2) + int(b, 2) ```will add the decimals after conversion. This sum is then converted back to binary using ```bin()```. The binary is converted to type string and returned.\\n\\n**NOTE:** The string is returned from [2:] because, in python, the first two characters in the binary form are \"0b\" followed by the actual binary value. \\n\\nFor example,\\nLet ```a = \"11\", b = \"1\"```\\nAfter running ```str(bin(int(a,2) + int(b,2)))``` the result would be ```\"0b100\"```. Thus when returning the string, the first two characters are omitted and hence the term **[2:]**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return str(bin(int(a, 2) + int (b, 2)))[2:]\\n```\n```n```\n```int(n,2)```\n``` int(a, 2) + int(b, 2) ```\n```bin()```\n```a = \"11\", b = \"1\"```\n```str(bin(int(a,2) + int(b,2)))```\n```\"0b100\"```",
                "codeTag": "Java"
            },
            {
                "id": 167114,
                "title": "javascript-solution-with-2-pointers",
                "content": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n  let i = a.length-1;\\n  let j = b.length-1;\\n  let carry = 0;\\n  let result = \\'\\';\\n  while (i >= 0 || j >= 0) {\\n      let aDigit = a[i] || \\'0\\';\\n      let bDigit = b[j] || \\'0\\';\\n      let temp = parseInt(aDigit) + parseInt(bDigit) + carry;\\n      let digit = temp % 2;\\n      carry = Math.floor(temp / 2);\\n      result = digit + result;\\n      i--;\\n      j--;\\n   }\\n  if (carry !== 0) result = carry + result;\\n  return result;\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n  let i = a.length-1;\\n  let j = b.length-1;\\n  let carry = 0;\\n  let result = \\'\\';\\n  while (i >= 0 || j >= 0) {\\n      let aDigit = a[i] || \\'0\\';\\n      let bDigit = b[j] || \\'0\\';\\n      let temp = parseInt(aDigit) + parseInt(bDigit) + carry;\\n      let digit = temp % 2;\\n      carry = Math.floor(temp / 2);\\n      result = digit + result;\\n      i--;\\n      j--;\\n   }\\n  if (carry !== 0) result = carry + result;\\n  return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24684,
                "title": "java-simple-solution",
                "content": "        \\n    public String addBinary(String a, String b) {\\n        if (a == null || a == \"\")\\n            return b;\\n        if (b == null || b == \"\")\\n            return a;\\n        int carry = 0;\\n        String ret = \"\";\\n        int l1 = a.length()-1;\\n        int l2 = b.length()-1;\\n        while (l1 >= 0 || l2 >= 0 || carry == 1) {\\n            if (l1 >= 0) {\\n                carry += Integer.parseInt(a.charAt(l1)+\"\");\\n                l1--;\\n            }\\n            if (l2 >= 0) {\\n                carry += Integer.parseInt(b.charAt(l2)+\"\");\\n                l2--;\\n            }\\n            ret = String.valueOf(carry%2) + ret;\\n            carry /= 2;\\n        }\\n        return ret;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "        \\n    public String addBinary(String a, String b) {\\n        if (a == null || a == \"\")\\n            return b;\\n        if (b == null || b == \"\")\\n            return a;\\n        int carry = 0;\\n        String ret = \"\";\\n        int l1 = a.length()-1;\\n        int l2 = b.length()-1;\\n        while (l1 >= 0 || l2 >= 0 || carry == 1) {\\n            if (l1 >= 0) {\\n                carry += Integer.parseInt(a.charAt(l1)+\"\");\\n                l1--;\\n            }\\n            if (l2 >= 0) {\\n                carry += Integer.parseInt(b.charAt(l2)+\"\");\\n                l2--;\\n            }\\n            ret = String.valueOf(carry%2) + ret;\\n            carry /= 2;\\n        }\\n        return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3738124,
                "title": "sol-using-python-just-2-line",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        res = str(bin(int(a, 2) + int(b, 2)))\\n        return res[2:]\\n        \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        res = str(bin(int(a, 2) + int(b, 2)))\\n        return res[2:]\\n        \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415431,
                "title": "easy-c-solution-with-if-else-which-beats-60-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAdding each bit of the string individually.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIterating through both the string simultaneously and adding the result in the resultant string according to the iterators current values.\\n\\n# Complexity\\n- Time complexity: O(max(a,b))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(max(a,b))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string s;\\n        std::string::iterator itr1=a.end()-1,itr2=b.end()-1;\\n        bool carry=0;\\n        while(itr1>=a.begin()&&itr2>=b.begin())\\n        {\\n            if(*itr1==\\'1\\'&&*itr2==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                    carry=1;\\n                }\\n            }\\n            else if((*itr1==\\'1\\'&&*itr2==\\'0\\')||(*itr1==\\'0\\'&&*itr2==\\'1\\'))\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }\\n            itr1--;itr2--;\\n        }\\n        for(;itr1>=a.begin();itr1--)\\n        {\\n            if(*itr1==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }}\\n            for(;itr2>=b.begin();itr2--)\\n        {\\n            if(*itr2==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }\\n        }\\n        if(carry==1)\\n        {\\n            s=\\'1\\'+s;\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string s;\\n        std::string::iterator itr1=a.end()-1,itr2=b.end()-1;\\n        bool carry=0;\\n        while(itr1>=a.begin()&&itr2>=b.begin())\\n        {\\n            if(*itr1==\\'1\\'&&*itr2==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                    carry=1;\\n                }\\n            }\\n            else if((*itr1==\\'1\\'&&*itr2==\\'0\\')||(*itr1==\\'0\\'&&*itr2==\\'1\\'))\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }\\n            itr1--;itr2--;\\n        }\\n        for(;itr1>=a.begin();itr1--)\\n        {\\n            if(*itr1==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }}\\n            for(;itr2>=b.begin();itr2--)\\n        {\\n            if(*itr2==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n                else\\n                {\\n                    s=\\'1\\'+s;\\n                }\\n            }\\n            else\\n            {\\n                if(carry==1)\\n                {\\n                    s=\\'1\\'+s;\\n                    carry=0;\\n                }\\n                else\\n                {\\n                    s=\\'0\\'+s;\\n                }\\n            }\\n        }\\n        if(carry==1)\\n        {\\n            s=\\'1\\'+s;\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3184413,
                "title": "c-beginner-friendly-o-n-m",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA little bit lengthy but easy to understand. \\nWe just have to handle all the cases like for carry and sum of a[i] and b[i].  \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n+m)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1) --> not considering ans string \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int i=0;\\n        int carry=0;\\n        reverse(begin(a),end(a));\\n        reverse(begin(b),end(b));\\n        while(i<a.size() and i<b.size()){\\n            ans+=((a[i]!=b[i] and !carry) or (a[i]==b[i] and carry))?\\'1\\':\\'0\\';\\n            carry= ((a[i]==\\'1\\' and b[i]==\\'1\\') or (a[i]!=b[i] and carry));\\n            i++;\\n        }\\n        while(i<a.size()){\\n            ans+=((a[i]==\\'1\\' and carry) or (a[i]==\\'0\\' and !carry))?\\'0\\':\\'1\\';\\n            carry=(a[i]==\\'1\\' and carry);\\n            i++;\\n        }\\n         while(i<b.size()){\\n            ans+=((b[i]==\\'1\\' and carry) or (b[i]==\\'0\\' and !carry))?\\'0\\':\\'1\\';\\n            carry=(b[i]==\\'1\\' and carry);\\n            i++;\\n        }\\n        if(carry)ans+=\\'1\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int i=0;\\n        int carry=0;\\n        reverse(begin(a),end(a));\\n        reverse(begin(b),end(b));\\n        while(i<a.size() and i<b.size()){\\n            ans+=((a[i]!=b[i] and !carry) or (a[i]==b[i] and carry))?\\'1\\':\\'0\\';\\n            carry= ((a[i]==\\'1\\' and b[i]==\\'1\\') or (a[i]!=b[i] and carry));\\n            i++;\\n        }\\n        while(i<a.size()){\\n            ans+=((a[i]==\\'1\\' and carry) or (a[i]==\\'0\\' and !carry))?\\'0\\':\\'1\\';\\n            carry=(a[i]==\\'1\\' and carry);\\n            i++;\\n        }\\n         while(i<b.size()){\\n            ans+=((b[i]==\\'1\\' and carry) or (b[i]==\\'0\\' and !carry))?\\'0\\':\\'1\\';\\n            carry=(b[i]==\\'1\\' and carry);\\n            i++;\\n        }\\n        if(carry)ans+=\\'1\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183290,
                "title": "beginner-friendly-solution-easy-simple-iteration",
                "content": "# Intuition\\nSimplpy iterating strings\\n\\n# Approach\\n- take carry, value as 0 and an empty string\\n- take a while loop in which iterate both the string and a condition in which carry is not equal to zero\\n- take index A-i-1(A size of string a) of a and B-i-1(B size of string b) of b and add these values at these indexes with carry and mod the value\\n- convert the values to string and add to ans string\\n- increment i\\n- after the loop return string ans\\n\\n# Complexity\\n- Time complexity:\\nO(size  of string a) or O(size of string b)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code in C++\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n       int i=0,carry=0;\\n        string ans=\"\";\\n        int A=a.size();\\n        int B=b.size();\\n       while(i<A||i<B||carry!=0){\\n           int x=0;\\n           if(i<A &&a[A-i-1]==\\'1\\'){\\n               x=1;\\n           }\\n           int y=0;\\n           if(i<B &&b[B-i-1]==\\'1\\'){\\n               y=1;\\n           }\\n           ans=to_string((x+y+carry)%2)+ans;\\n           carry=(x+y+carry)/2;\\n           i+=1;\\n       }\\n        return ans;\\n    }\\n};\\n```\\n# Code in python\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        i=0\\n        ans=\"\"\\n        carry=0\\n        while(i<len(a) or i<len(b) or carry!=0):\\n            x=0\\n            if(i<len(a) and a[len(a)-i-1]==\\'1\\'):\\n                x=1\\n            y=0\\n            if(i<len(b) and b[len(b)-i-1]==\\'1\\'):\\n                y=1\\n            ans=str((x+y+carry)%2)+ans\\n            carry=(x+y+carry)//2\\n            i+=1\\n        return ans\\n        \\n    pyt\\n```\\n\\n# DON\\'T FORGET TO UPVOTE !",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "Math",
                    "String",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n       int i=0,carry=0;\\n        string ans=\"\";\\n        int A=a.size();\\n        int B=b.size();\\n       while(i<A||i<B||carry!=0){\\n           int x=0;\\n           if(i<A &&a[A-i-1]==\\'1\\'){\\n               x=1;\\n           }\\n           int y=0;\\n           if(i<B &&b[B-i-1]==\\'1\\'){\\n               y=1;\\n           }\\n           ans=to_string((x+y+carry)%2)+ans;\\n           carry=(x+y+carry)/2;\\n           i+=1;\\n       }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        i=0\\n        ans=\"\"\\n        carry=0\\n        while(i<len(a) or i<len(b) or carry!=0):\\n            x=0\\n            if(i<len(a) and a[len(a)-i-1]==\\'1\\'):\\n                x=1\\n            y=0\\n            if(i<len(b) and b[len(b)-i-1]==\\'1\\'):\\n                y=1\\n            ans=str((x+y+carry)%2)+ans\\n            carry=(x+y+carry)//2\\n            i+=1\\n        return ans\\n        \\n    pyt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3182731,
                "title": "daily-leetcoding-challenge-february-day-14",
                "content": "This problem is the Daily LeetCoding Challenge for February, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 3172276,
                "title": "easy-to-understand-python-o-n-tc-solution",
                "content": "# Intuition\\nUse basic rules of binary addition but remember to consider carry Rules could be mapped with this approach:\\n1. if we have 3 \\'1\\' w.r.t a[i] , b[j] and carry then \\ncarry = 1 and  ( addtion of a[i] , b[j] and carry = 1 )\\n\\n2. if we have 2 \\'1\\' w.r.t a[i], b[j] and carry then\\ncarry = 1 and ( addtion of a[i] , b[j] and carry = 0 )\\n\\n3. if we have 1 \\'1\\' w.r.t a[i] , b[j] and carry then \\ncarry = 0 and ( addtion of a[i] , b[j] and carry = 1 )\\n\\n4. if we have 0 \\'1\\' w.r.t a[i] , b[j] and carry then\\ncarry = 0 and ( addtion of a[i] , b[j] and carry = 0 )\\n\\n# Approach\\n\\nsimple iterate the string a and string b and carry is not empty\\nwith carry not empty I mean not zero\\n\\nIterate in reverse order for addition\\n\\nEvery time we initialize ones with 0 and if we see a \\'1\\' we increment the count of ones\\n\\nand rest is mapping based on the intuition \\n# Complexity\\n- Time complexity: O(N)\\n\\n- Space complexity: O(1) -- if we don\\'t consider ans string else O(N)\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        ans = \"\"\\n        i = len(a) - 1\\n        j = len(b) - 1\\n        carry = 0\\n\\n        while i >= 0 or j >= 0 or carry:\\n            ones = 0\\n            if i >= 0 and a[i] == \\'1\\':\\n                ones += 1 \\n            if j >= 0 and b[j] == \\'1\\':\\n                ones += 1 \\n            if carry == 1:\\n                ones += 1 \\n            \\n            if ones == 0:\\n                ans = ans + \"0\"\\n            elif ones == 1:\\n                ans = ans + \\'1\\'\\n                carry = 0\\n            elif ones == 2:\\n                ans = ans + \\'0\\'\\n                carry = 1\\n            else:\\n                ans = ans + \\'1\\'\\n                carry = 1\\n\\n            i -= 1 \\n            j -= 1 \\n        return ans[::-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        ans = \"\"\\n        i = len(a) - 1\\n        j = len(b) - 1\\n        carry = 0\\n\\n        while i >= 0 or j >= 0 or carry:\\n            ones = 0\\n            if i >= 0 and a[i] == \\'1\\':\\n                ones += 1 \\n            if j >= 0 and b[j] == \\'1\\':\\n                ones += 1 \\n            if carry == 1:\\n                ones += 1 \\n            \\n            if ones == 0:\\n                ans = ans + \"0\"\\n            elif ones == 1:\\n                ans = ans + \\'1\\'\\n                carry = 0\\n            elif ones == 2:\\n                ans = ans + \\'0\\'\\n                carry = 1\\n            else:\\n                ans = ans + \\'1\\'\\n                carry = 1\\n\\n            i -= 1 \\n            j -= 1 \\n        return ans[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2792541,
                "title": "1-line-kotlin-solution-with-80-space-complexity",
                "content": "# Complexity\\n- Time complexity: Runtime 76.33%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 80%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun addBinary(a: String, b: String): String {\\n        return (a.toBigInteger(2) + b.toBigInteger(2)).toString(2)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun addBinary(a: String, b: String): String {\\n        return (a.toBigInteger(2) + b.toBigInteger(2)).toString(2)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707115,
                "title": "python-two-line-solution-very-easy-to-understand-o-n-100",
                "content": "Firstly we convert string into int using python function.\\nThen add both the numbers.\\nAt last Converting back int to string and returning them.\\n\\n```\\n    def addBinary(self, a, b):\\n        x,y = int(a,2) , int (b,2)\\n        return str(bin(x+y).replace(\"0b\",\"\"))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def addBinary(self, a, b):\\n        x,y = int(a,2) , int (b,2)\\n        return str(bin(x+y).replace(\"0b\",\"\"))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2378436,
                "title": "beginner-friendly-java-javascript-python-solutions",
                "content": "```java []\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        int i= a.length() -1;\\n        int j= b.length() -1;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0)\\n                sum+=a.charAt(i--)-\\'0\\'; // -\\'0\\' is just to convert char in integer\\n            if(j>=0)\\n                sum+=b.charAt(j--)-\\'0\\';\\n            sb.append(sum%2);   // If we have sum = 1  1  then = 2 % 2 = 0 and 0  1 = 1 % 2 = 1\\n            carry = sum /2;\\n        }\\n        if(carry>0)\\n            sb.append(carry);\\n        return sb.reverse().toString();\\n    }\\n}\\n```\\n```javascript []\\nvar addBinary = function(a, b) {\\n    let i = a.length-1, j = b.length-1, carry = 0\\n    let s =[]\\n    while(i >= 0 || j >= 0){\\n        let sum = carry\\n        if(i >= 0)  sum += a[i--].charCodeAt() - 48\\n        if(j >= 0)  sum += b[j--].charCodeAt() - 48\\n        s.unshift(sum % 2)\\n        carry = ~~(sum/2)\\n    }\\n    return carry > 0 ? \"1\" + s.join(\"\") : s.join(\"\")\\n};\\n```\\n```python []\\nclass Solution(object):\\n    def addBinary(self, a, b):\\n        i, j, carry = len(a)-1, len(b)-1, 0\\n        s = []\\n        while i >= 0 or j >= 0:\\n            sm = carry\\n            if i >= 0:\\n                sm += ord(a[i]) - 48\\n                i -= 1\\n            if j >= 0:\\n                sm += ord(b[j]) - 48\\n                j -= 1\\n            s.insert(0, (sm % 2))\\n            carry = sm/2\\n        return \\'1\\' + \\'\\'.join(map(str, s)) if carry > 0 else \\'\\'.join(map(str, s))\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```java []\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        int i= a.length() -1;\\n        int j= b.length() -1;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0)\\n                sum+=a.charAt(i--)-\\'0\\'; // -\\'0\\' is just to convert char in integer\\n            if(j>=0)\\n                sum+=b.charAt(j--)-\\'0\\';\\n            sb.append(sum%2);   // If we have sum = 1  1  then = 2 % 2 = 0 and 0  1 = 1 % 2 = 1\\n            carry = sum /2;\\n        }\\n        if(carry>0)\\n            sb.append(carry);\\n        return sb.reverse().toString();\\n    }\\n}\\n```\n```javascript []\\nvar addBinary = function(a, b) {\\n    let i = a.length-1, j = b.length-1, carry = 0\\n    let s =[]\\n    while(i >= 0 || j >= 0){\\n        let sum = carry\\n        if(i >= 0)  sum += a[i--].charCodeAt() - 48\\n        if(j >= 0)  sum += b[j--].charCodeAt() - 48\\n        s.unshift(sum % 2)\\n        carry = ~~(sum/2)\\n    }\\n    return carry > 0 ? \"1\" + s.join(\"\") : s.join(\"\")\\n};\\n```\n```python []\\nclass Solution(object):\\n    def addBinary(self, a, b):\\n        i, j, carry = len(a)-1, len(b)-1, 0\\n        s = []\\n        while i >= 0 or j >= 0:\\n            sm = carry\\n            if i >= 0:\\n                sm += ord(a[i]) - 48\\n                i -= 1\\n            if j >= 0:\\n                sm += ord(b[j]) - 48\\n                j -= 1\\n            s.insert(0, (sm % 2))\\n            carry = sm/2\\n        return \\'1\\' + \\'\\'.join(map(str, s)) if carry > 0 else \\'\\'.join(map(str, s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2368240,
                "title": "runtime-0ms-faster-than-100-00-of-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string str=\"\";\\n        int carry=0;      \\n        while(a.size()!=0 || b.size()!=0)\\n        {     \\n            char al;        \\n            char bl;\\n            (a.size()!=0)? al=a.back():al=\\'0\\';         \\n            (b.size()!=0)? bl=b.back():bl=\\'0\\';\\n           \\n            if((al==\\'1\\' && bl==\\'0\\')||(al==\\'0\\' && bl==\\'1\\'))\\n            {\\n                if(carry==0)\\n                {\\n                    str+=\\'1\\';\\n                }\\n                else\\n                { \\n                    str+=\\'0\\';\\n                    carry=1;\\n                }\\n            }\\n            else if(al==\\'1\\' && bl==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    str+=\\'1\\';carry=1;\\n                }\\n                else\\n                {\\n                    str+=\\'0\\';carry=1;\\n                }\\n            }\\n            else if(al==\\'0\\'&& bl==\\'0\\')\\n            {\\n                if(carry==0)str+=\\'0\\';\\n                else\\n                { \\n                    str+=\\'1\\';\\n                    carry=0;\\n                }\\n            }\\n            if(a.size()!=0)a.pop_back();\\n            if(b.size()!=0)b.pop_back();\\n        }\\n        if(carry==1)str+=\\'1\\';\\n        reverse(str.begin(),str.end());\\n        return str;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string str=\"\";\\n        int carry=0;      \\n        while(a.size()!=0 || b.size()!=0)\\n        {     \\n            char al;        \\n            char bl;\\n            (a.size()!=0)? al=a.back():al=\\'0\\';         \\n            (b.size()!=0)? bl=b.back():bl=\\'0\\';\\n           \\n            if((al==\\'1\\' && bl==\\'0\\')||(al==\\'0\\' && bl==\\'1\\'))\\n            {\\n                if(carry==0)\\n                {\\n                    str+=\\'1\\';\\n                }\\n                else\\n                { \\n                    str+=\\'0\\';\\n                    carry=1;\\n                }\\n            }\\n            else if(al==\\'1\\' && bl==\\'1\\')\\n            {\\n                if(carry==1)\\n                {\\n                    str+=\\'1\\';carry=1;\\n                }\\n                else\\n                {\\n                    str+=\\'0\\';carry=1;\\n                }\\n            }\\n            else if(al==\\'0\\'&& bl==\\'0\\')\\n            {\\n                if(carry==0)str+=\\'0\\';\\n                else\\n                { \\n                    str+=\\'1\\';\\n                    carry=0;\\n                }\\n            }\\n            if(a.size()!=0)a.pop_back();\\n            if(b.size()!=0)b.pop_back();\\n        }\\n        if(carry==1)str+=\\'1\\';\\n        reverse(str.begin(),str.end());\\n        return str;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1890638,
                "title": "100-fastest-typescript-solution",
                "content": "```\\nfunction addBinary(a: string, b: string): string {\\n  let result = \"\"\\n  let carry = 0\\n  let length = Math.max(a.length, b.length)\\n  let i = 1\\n  const its = []\\n\\n  while (i <= length) {\\n    let x = Number(a[a.length - i] || 0)\\n    let y = Number(b[b.length - i] || 0)\\n    let sum = x + y + carry\\n\\n    carry = sum > 1 ? 1 : 0\\n    result = (sum % 2) + result\\n\\n    its.push({ i, x, y, carry, sum, result })\\n    i++\\n  }\\n\\n  if (carry) { result = carry.toString(2) + result }\\n  return result\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction addBinary(a: string, b: string): string {\\n  let result = \"\"\\n  let carry = 0\\n  let length = Math.max(a.length, b.length)\\n  let i = 1\\n  const its = []\\n\\n  while (i <= length) {\\n    let x = Number(a[a.length - i] || 0)\\n    let y = Number(b[b.length - i] || 0)\\n    let sum = x + y + carry\\n\\n    carry = sum > 1 ? 1 : 0\\n    result = (sum % 2) + result\\n\\n    its.push({ i, x, y, carry, sum, result })\\n    i++\\n  }\\n\\n  if (carry) { result = carry.toString(2) + result }\\n  return result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1679490,
                "title": "c-binary-addition-with-three-different-approach-s",
                "content": "> Given two binary strings a and b, return their sum as a binary string.\\n***\\n**Intuition:-**\\nThere will be many different intuitions in this question \\n* **Easy but long way** is to convert `a` and `b` to decimal then add them and convert the result back to binary and return the result .\\n* **A optimized approach** can be to simply do the `binary addition` in a `result` variable and return the result .\\n* **A well optimized approach** can be that we just write the sum into the longer one of the inputs and return that as result. In this case space complexity will become O(1) .\\n***\\n**Algorithm :-**\\n* Intialize i & j index for a and b from last character index of a & b .\\n* Now loop till the both index reaches 0 and add last bit of both the string along wtih their carry.\\n* Reminder from 2 is the new bit we are dicussing and divide by 2 gives us our carry\\n***\\n**Optimized Code:-**\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n        string result=\"\";\\n        while(i>=0|| j>=0){\\n            int x = (i>=0)?a[i--]-\\'0\\':0; \\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            result=to_string(sum%2)+result;\\n            carry=sum/2;\\n        }\\n        if(carry>0)\\n               result=to_string(1)+result;\\n        return result;\\n        \\n    }\\n};\\n```\\n**Time Complexity :** *`O(n)`*\\n**Space Complexity :** *`O(n)`*\\n***\\n**Well Space Optimized Code:-**\\n```\\nclass Solution {\\npublic:\\n     string addBinary(string a, string b) {\\n        //making \\'a\\' as larger by swaping\\n        if(a.size() < b.size()) swap(a, b); \\n        int i = a.size(), j = b.size();\\n        //Traversing the whole \"a\"\\n        while (i--) {\\n            if(j) a[i] += b[--j] & 1;\\n            if(a[i] > \\'1\\') {\\n                a[i] -= 2;\\n                if(i) \\n                    a[i-1]++; else a = \\'1\\' + a;\\n            }\\n        }\\n        return a;\\n    }\\n};\\n```\\n**Time Complexity:** *`O(n^2) `*\\n**Space Complexity:** *`O(1)`*\\n***\\n***\\n**If you have some doubts feel free to bug me anytime or If you understood than don\\'t forget to upvote ;)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i=a.size()-1,j=b.size()-1;\\n        int carry=0;\\n        string result=\"\";\\n        while(i>=0|| j>=0){\\n            int x = (i>=0)?a[i--]-\\'0\\':0; \\n            int y = (j>=0)?b[j--]-\\'0\\':0;\\n            int sum = x+y+carry;\\n            result=to_string(sum%2)+result;\\n            carry=sum/2;\\n        }\\n        if(carry>0)\\n               result=to_string(1)+result;\\n        return result;\\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n     string addBinary(string a, string b) {\\n        //making \\'a\\' as larger by swaping\\n        if(a.size() < b.size()) swap(a, b); \\n        int i = a.size(), j = b.size();\\n        //Traversing the whole \"a\"\\n        while (i--) {\\n            if(j) a[i] += b[--j] & 1;\\n            if(a[i] > \\'1\\') {\\n                a[i] -= 2;\\n                if(i) \\n                    a[i-1]++; else a = \\'1\\' + a;\\n            }\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1506359,
                "title": "c-simple-clean-and-short-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int ai = a.size()-1, bi = b.size()-1, carry = 0, curr;\\n        string res = \"\";\\n        \\n        for (; ai >= 0 || bi >= 0; ai--, bi--) {\\n            curr = (ai >= 0) ? a[ai]-\\'0\\' : 0;\\n            curr += (bi >= 0) ? b[bi]-\\'0\\' : 0;\\n            curr += carry;\\n            \\n            carry = curr >= 2;\\n            curr %= 2;\\n            \\n            res = to_string(curr) + res;\\n        }\\n        \\n        return carry ? \"1\" + res : res;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int ai = a.size()-1, bi = b.size()-1, carry = 0, curr;\\n        string res = \"\";\\n        \\n        for (; ai >= 0 || bi >= 0; ai--, bi--) {\\n            curr = (ai >= 0) ? a[ai]-\\'0\\' : 0;\\n            curr += (bi >= 0) ? b[bi]-\\'0\\' : 0;\\n            curr += carry;\\n            \\n            carry = curr >= 2;\\n            curr %= 2;\\n            \\n            res = to_string(curr) + res;\\n        }\\n        \\n        return carry ? \"1\" + res : res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1485094,
                "title": "c-0-ms-faster-than-100-00",
                "content": "```\\nstring addBinary(string a, string b) {\\n    int sum=0;\\n    string s;\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        int carry=0;\\n        while(i>=0 && j>=0){\\n            sum=(a[i--]-\\'0\\')+(b[j--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n        while(i>=0){\\n             sum=(a[i--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n         while(j>=0){\\n             sum=(b[j--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n        if(carry==1){\\n            std::string s1 = std::to_string(carry);\\n            s+=s1;\\n        }\\n        reverse(s.begin(), s.end());\\n        return s;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring addBinary(string a, string b) {\\n    int sum=0;\\n    string s;\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        int carry=0;\\n        while(i>=0 && j>=0){\\n            sum=(a[i--]-\\'0\\')+(b[j--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n        while(i>=0){\\n             sum=(a[i--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n         while(j>=0){\\n             sum=(b[j--]-\\'0\\')+carry;\\n            if(sum>1){\\n                carry=1;\\n            }else carry=0;\\n            std::string s1 = std::to_string(sum%2);\\n            s+=s1;\\n        }\\n        if(carry==1){\\n            std::string s1 = std::to_string(carry);\\n            s+=s1;\\n        }\\n        reverse(s.begin(), s.end());\\n        return s;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1337965,
                "title": "simple-code-of-c-100-faster-and-0ms",
                "content": "```\\n string addBinary(string a, string b) {\\n        int p = a.length() - 1;\\n        int q = b.length() - 1;\\n        int carry = 0;\\n        string r = \"\";\\n        while (p >= 0 || q >= 0 || carry )\\n        {\\n            carry += (p >= 0) ? a[p--] - \\'0\\' : 0;\\n            carry += (q >= 0) ? b[q--] - \\'0\\': 0;\\n            r = char(carry % 2+ \\'0\\') + r;\\n            carry /= 2;\\n        }\\n        return r;\\n       \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n string addBinary(string a, string b) {\\n        int p = a.length() - 1;\\n        int q = b.length() - 1;\\n        int carry = 0;\\n        string r = \"\";\\n        while (p >= 0 || q >= 0 || carry )\\n        {\\n            carry += (p >= 0) ? a[p--] - \\'0\\' : 0;\\n            carry += (q >= 0) ? b[q--] - \\'0\\': 0;\\n            r = char(carry % 2+ \\'0\\') + r;\\n            carry /= 2;\\n        }\\n        return r;\\n       \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1039251,
                "title": "my-long-way-javascript-97-93",
                "content": "```\\nvar addBinary = function(a, b) {\\n    if (a === \"0\" && b === \"0\") return \"0\";\\n    \\n    let output = \"\";\\n    let carry = 0;\\n    let i = a.length - 1;\\n    let j = b.length - 1;\\n    while (i >= 0 || j >= 0) {\\n        const num1 = a[i] === undefined ? 0 : +a[i];\\n        const num2 = b[j] === undefined ? 0 : +b[j];\\n        if (num1 + num2 + carry < 2) {\\n            output = (num1 + num2 + carry).toString() + output;\\n            carry = 0;\\n        } else if (num1 + num2 + carry >= 2) {\\n            output = (num1 + num2 + carry - 2).toString() + output;\\n            carry = 0;\\n            carry++;\\n        }\\n        i--, j--;\\n    }\\n    return `${carry || \"\"}${output}`;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addBinary = function(a, b) {\\n    if (a === \"0\" && b === \"0\") return \"0\";\\n    \\n    let output = \"\";\\n    let carry = 0;\\n    let i = a.length - 1;\\n    let j = b.length - 1;\\n    while (i >= 0 || j >= 0) {\\n        const num1 = a[i] === undefined ? 0 : +a[i];\\n        const num2 = b[j] === undefined ? 0 : +b[j];\\n        if (num1 + num2 + carry < 2) {\\n            output = (num1 + num2 + carry).toString() + output;\\n            carry = 0;\\n        } else if (num1 + num2 + carry >= 2) {\\n            output = (num1 + num2 + carry - 2).toString() + output;\\n            carry = 0;\\n            carry++;\\n        }\\n        i--, j--;\\n    }\\n    return `${carry || \"\"}${output}`;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 977474,
                "title": "100-faster-simple-code-with-proper-comments-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans=\"\";\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        int carry=0;\\n        \\n        while(i>=0 || j>=0)\\n        {\\n            int temp=carry;\\n            if(i>=0) temp+=(a[i]-\\'0\\'); // converting string into integer\\n            if(j>=0) temp+=(b[j]-\\'0\\');\\n            ans+=to_string(temp%2); // if both digit is 1 then append 0\\n            carry=temp/2; // if sum is 2 then carry 1\\n            i--,j--;\\n        }\\n        if(carry!=0) ans+=to_string(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans=\"\";\\n        int i=a.length()-1;\\n        int j=b.length()-1;\\n        int carry=0;\\n        \\n        while(i>=0 || j>=0)\\n        {\\n            int temp=carry;\\n            if(i>=0) temp+=(a[i]-\\'0\\'); // converting string into integer\\n            if(j>=0) temp+=(b[j]-\\'0\\');\\n            ans+=to_string(temp%2); // if both digit is 1 then append 0\\n            carry=temp/2; // if sum is 2 then carry 1\\n            i--,j--;\\n        }\\n        if(carry!=0) ans+=to_string(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 745334,
                "title": "easy-clear-java-solution",
                "content": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        StringBuffer sb = new StringBuffer();\\n        while(i>=0 || j>=0){\\n            int sum = 0;\\n            if(i >= 0){\\n                sum += a.charAt(i) - \\'0\\';// -\\'0\\' to convert a char to int\\n                i--;    \\n            }\\n            if(j>=0){\\n                sum += b.charAt(j) - \\'0\\';\\n                j--;    \\n            }\\n                sum += carry;\\n                sb.append(sum%2);\\n                carry = sum/2;\\n        }\\n        if(carry > 0)\\n            sb.append(carry);\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        StringBuffer sb = new StringBuffer();\\n        while(i>=0 || j>=0){\\n            int sum = 0;\\n            if(i >= 0){\\n                sum += a.charAt(i) - \\'0\\';// -\\'0\\' to convert a char to int\\n                i--;    \\n            }\\n            if(j>=0){\\n                sum += b.charAt(j) - \\'0\\';\\n                j--;    \\n            }\\n                sum += carry;\\n                sb.append(sum%2);\\n                carry = sum/2;\\n        }\\n        if(carry > 0)\\n            sb.append(carry);\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 500315,
                "title": "simple-go-solution",
                "content": "```\\nfunc addBinary(a string, b string) string {\\n    s := 0\\n    carry := 0\\n    res := \"\"\\n    la := len(a) - 1\\n    lb := len(b) - 1\\n    for la >= 0 || lb >= 0 || carry != 0{\\n        s = carry\\n        if la >= 0 {\\n            s += int(a[la] - \\'0\\')\\n            la -- \\n        }\\n        if lb >= 0 {\\n            s += int(b[lb] - \\'0\\')\\n            lb --\\n        }\\n        carry = s / 2\\n        res = string(s % 2 + \\'0\\') + res\\n    }\\n    return res\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc addBinary(a string, b string) string {\\n    s := 0\\n    carry := 0\\n    res := \"\"\\n    la := len(a) - 1\\n    lb := len(b) - 1\\n    for la >= 0 || lb >= 0 || carry != 0{\\n        s = carry\\n        if la >= 0 {\\n            s += int(a[la] - \\'0\\')\\n            la -- \\n        }\\n        if lb >= 0 {\\n            s += int(b[lb] - \\'0\\')\\n            lb --\\n        }\\n        carry = s / 2\\n        res = string(s % 2 + \\'0\\') + res\\n    }\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 358445,
                "title": "easy-to-understand-python-solution-32ms-beats-97",
                "content": "The idea is similar to https://leetcode.com/problems/add-two-numbers/ -- iterate backwards and build the result from the back by adding two last digits while keeping carry in mind. In the end, if carry is non-zero we append it to the front.\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        carry = 0\\n        result = \"\"\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0:\\n            a_digit = int(a[i]) if i >= 0 else 0\\n            b_digit = int(b[j]) if j >= 0 else 0\\n            _sum = a_digit + b_digit + carry\\n            digit = _sum % 2\\n            carry = _sum // 2\\n            result = str(digit) + result\\n            i -= 1\\n            j -= 1\\n        if carry:\\n            result = str(carry) + result\\n        return result\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        carry = 0\\n        result = \"\"\\n        i, j = len(a) - 1, len(b) - 1\\n        while i >= 0 or j >= 0:\\n            a_digit = int(a[i]) if i >= 0 else 0\\n            b_digit = int(b[j]) if j >= 0 else 0\\n            _sum = a_digit + b_digit + carry\\n            digit = _sum % 2\\n            carry = _sum // 2\\n            result = str(digit) + result\\n            i -= 1\\n            j -= 1\\n        if carry:\\n            result = str(carry) + result\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 186022,
                "title": "java-use-xor-and-displacement",
                "content": "```\\nclass Solution {\\n   public String addBinary(String astr, String bstr) {\\n        StringBuilder res = new StringBuilder();\\n        int inc=0;\\n        char[] as = astr.toCharArray();\\n        char[] bs = bstr.toCharArray();\\n        int i=astr.length()-1,j=bstr.length()-1;\\n        while(i>=0||j>=0||inc>0){\\n            int a = i>=0?as[i]-\\'0\\':0;\\n            int b = j>=0?bs[j]-\\'0\\':0;\\n            res.append(a^b^inc);\\n            inc = (a&b)|(a&inc)|(b&inc);\\n            i--;j--;\\n        }\\n        return res.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n   public String addBinary(String astr, String bstr) {\\n        StringBuilder res = new StringBuilder();\\n        int inc=0;\\n        char[] as = astr.toCharArray();\\n        char[] bs = bstr.toCharArray();\\n        int i=astr.length()-1,j=bstr.length()-1;\\n        while(i>=0||j>=0||inc>0){\\n            int a = i>=0?as[i]-\\'0\\':0;\\n            int b = j>=0?bs[j]-\\'0\\':0;\\n            res.append(a^b^inc);\\n            inc = (a&b)|(a&inc)|(b&inc);\\n            i--;j--;\\n        }\\n        return res.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24645,
                "title": "my-java-neat-and-clean-solution-using-bit-manipulation",
                "content": "Hello everyone,\\n\\nI am sharing my Java solution using bit manipulation with a very neat and clean code, easy to understand:\\n\\n```\\n    public String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int sum = 0, carry = 0;\\n        int i = a.length() - 1, j = b.length() - 1;\\n        \\n        // start from the end\\n        while(i >= 0 || j >= 0){\\n            // take the bits\\n            int bit1 = (i >= 0) ? Integer.parseInt(String.valueOf(a.charAt(i))) : 0;\\n            int bit2 = (j >= 0) ? Integer.parseInt(String.valueOf(b.charAt(j))) : 0;\\n            \\n            // calculate the sum and the carry\\n            sum = carry ^ bit1 ^ bit2;\\n            carry = (carry & bit1) | (carry & bit2) | (bit1 & bit2);\\n            \\n            result.append(String.valueOf(sum));\\n            i--;\\n            j--;\\n        }\\n        \\n        if(carry > 0)\\n            result.append(String.valueOf(carry));\\n            \\n        return result.reverse().toString();\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\n    public String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int sum = 0, carry = 0;\\n        int i = a.length() - 1, j = b.length() - 1;\\n        \\n        // start from the end\\n        while(i >= 0 || j >= 0){\\n            // take the bits\\n            int bit1 = (i >= 0) ? Integer.parseInt(String.valueOf(a.charAt(i))) : 0;\\n            int bit2 = (j >= 0) ? Integer.parseInt(String.valueOf(b.charAt(j))) : 0;\\n            \\n            // calculate the sum and the carry\\n            sum = carry ^ bit1 ^ bit2;\\n            carry = (carry & bit1) | (carry & bit2) | (bit1 & bit2);\\n            \\n            result.append(String.valueOf(sum));\\n            i--;\\n            j--;\\n        }\\n        \\n        if(carry > 0)\\n            result.append(String.valueOf(carry));\\n            \\n        return result.reverse().toString();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24762,
                "title": "consise-java-solution-11-lines",
                "content": "    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        for(int i=a.length()-1,j=b.length()-1;i>=0 || j>=0;i--,j--){\\n            int v1 = (i<0)?0:a.charAt(i)-'0';\\n            int v2 = (j<0)?0:b.charAt(j)-'0';\\n            int val = (v1+v2+carry)%2;\\n            carry = (v1+v2+carry)/2;\\n            sb.insert(0,(char)(val+'0'));\\n        }\\n        if(carry == 1) sb.insert(0,'1');\\n        return sb.toString();\\n    }",
                "solutionTags": [],
                "code": "    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int carry = 0;\\n        for(int i=a.length()-1,j=b.length()-1;i>=0 || j>=0;i--,j--){\\n            int v1 = (i<0)?0:a.charAt(i)-'0';\\n            int v2 = (j<0)?0:b.charAt(j)-'0';\\n            int val = (v1+v2+carry)%2;\\n            carry = (v1+v2+carry)/2;\\n            sb.insert(0,(char)(val+'0'));\\n        }\\n        if(carry == 1) sb.insert(0,'1');\\n        return sb.toString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3836500,
                "title": "easy-readable-and-concise-c-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\nint sum_funct(int a,int b){\\n    if (a==1 && b==1)return 10;\\n    return a+b;\\n}\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        string ans;\\n        int n= a.size(); int m= b.size();\\n        int i=0; int j=0;\\n        int carry=0;\\n        while (i<n && j<m){\\n            int sum= sum_funct(a[i]-\\'0\\',b[j]-\\'0\\');\\n            sum= sum_funct(sum,carry);\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            i++; j++;\\n        }\\n        while (i<n){\\n            int sum= sum_funct(a[i]-\\'0\\',carry);\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            i++;\\n        }\\n        while (j<m){\\n            int sum= sum_funct(carry,b[j]-\\'0\\');\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            j++;\\n        }\\n        if (carry==1)ans+= \\'1\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint sum_funct(int a,int b){\\n    if (a==1 && b==1)return 10;\\n    return a+b;\\n}\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        string ans;\\n        int n= a.size(); int m= b.size();\\n        int i=0; int j=0;\\n        int carry=0;\\n        while (i<n && j<m){\\n            int sum= sum_funct(a[i]-\\'0\\',b[j]-\\'0\\');\\n            sum= sum_funct(sum,carry);\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            i++; j++;\\n        }\\n        while (i<n){\\n            int sum= sum_funct(a[i]-\\'0\\',carry);\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            i++;\\n        }\\n        while (j<m){\\n            int sum= sum_funct(carry,b[j]-\\'0\\');\\n            carry= sum/10;\\n            ans+= (sum%10)+\\'0\\';\\n            j++;\\n        }\\n        if (carry==1)ans+= \\'1\\';\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3718779,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to add two binary numbers (made up of 0\\'s and 1\\'s) and returns the result in binary.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n->We start at the right end of each binary number, adding the digits and any carry-over value, and storing the result in a new string.\\n->Now we move to the next digit on the left and repeats the process until it has gone through all the digits in both binary numbers.\\n->If there is any carry-over value after adding all the digits, append it to the end of the new string.\\n->Finally, the new string is reversed and returned as the sum of the two binary numbers.\\n\\n# Code\\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int carry = 0;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n\\n        while(i>=0 || j>=0 || carry==1){\\n            if(i>=0){\\n                carry += a.charAt(i--) -\\'0\\';\\n            }\\n            if(j>=0){\\n                carry += b.charAt(j--) - \\'0\\';\\n            }\\n            result.append(carry%2);\\n            carry /= 2;\\n        }\\n\\n        return result.reverse().toString();\\n\\n    }\\n}\\n```\\n![oie_CksRiTNvbciG.jpg](https://assets.leetcode.com/users/images/9bf324f7-cdd3-46f7-b072-451013fd616b_1688494785.9285524.jpeg)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int carry = 0;\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n\\n        while(i>=0 || j>=0 || carry==1){\\n            if(i>=0){\\n                carry += a.charAt(i--) -\\'0\\';\\n            }\\n            if(j>=0){\\n                carry += b.charAt(j--) - \\'0\\';\\n            }\\n            result.append(carry%2);\\n            carry /= 2;\\n        }\\n\\n        return result.reverse().toString();\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183131,
                "title": "c-0ms-solution-optimal-solution-easy-to-understand-clean-and-concise",
                "content": "# Code\\n# **PLEASE DO UPVOTE !**\\n**CONNECT WITH ME ON LINKEDIN : https://www.linkedin.com/in/kunal-shaw-/**\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        if(a.size()>b.size()){\\n            while(b.size()<a.size()){\\n                b+=\"0\";\\n            }\\n        }\\n        else if(b.size()>a.size()){\\n            while(a.size()<b.size()){\\n                a+=\"0\";\\n            }\\n        }\\n        string ans=\"\";\\n        int c=0;\\n        for(int i=0;i<a.size();i++){\\n            if(a[i]==\\'1\\' and b[i]==\\'1\\' and c==0){\\n                ans+=\"0\";\\n                c=1;\\n            }\\n            else if(a[i]==\\'1\\' and b[i]==\\'1\\' and c==1){\\n                ans+=\"1\";\\n                c=1;\\n            }\\n            else if(((a[i]==\\'1\\' and b[i]==\\'0\\') or (a[i]==\\'0\\' and b[i]==\\'1\\')) and c==0){\\n                ans+=\"1\";\\n                c=0;\\n            }\\n            else if(((a[i]==\\'1\\' and b[i]==\\'0\\') or (a[i]==\\'0\\' and b[i]==\\'1\\')) and c==1){\\n                ans+=\"0\";\\n                c=1;\\n            }\\n            else if(a[i]==\\'0\\' and b[i]==\\'0\\' and c==0){\\n                ans+=\"0\";\\n                c=0;\\n            }\\n            else if(a[i]==\\'0\\' and a[i]==\\'0\\' and c==1){\\n                ans+=\"1\";\\n                c=0;\\n            }\\n        }\\n        if(c==1){\\n            ans+=\"1\";\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n![memer-cat.jpg](https://assets.leetcode.com/users/images/dfc2018d-01d8-43da-9889-af2896179f15_1675779280.3429081.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(),a.end());\\n        reverse(b.begin(),b.end());\\n        if(a.size()>b.size()){\\n            while(b.size()<a.size()){\\n                b+=\"0\";\\n            }\\n        }\\n        else if(b.size()>a.size()){\\n            while(a.size()<b.size()){\\n                a+=\"0\";\\n            }\\n        }\\n        string ans=\"\";\\n        int c=0;\\n        for(int i=0;i<a.size();i++){\\n            if(a[i]==\\'1\\' and b[i]==\\'1\\' and c==0){\\n                ans+=\"0\";\\n                c=1;\\n            }\\n            else if(a[i]==\\'1\\' and b[i]==\\'1\\' and c==1){\\n                ans+=\"1\";\\n                c=1;\\n            }\\n            else if(((a[i]==\\'1\\' and b[i]==\\'0\\') or (a[i]==\\'0\\' and b[i]==\\'1\\')) and c==0){\\n                ans+=\"1\";\\n                c=0;\\n            }\\n            else if(((a[i]==\\'1\\' and b[i]==\\'0\\') or (a[i]==\\'0\\' and b[i]==\\'1\\')) and c==1){\\n                ans+=\"0\";\\n                c=1;\\n            }\\n            else if(a[i]==\\'0\\' and b[i]==\\'0\\' and c==0){\\n                ans+=\"0\";\\n                c=0;\\n            }\\n            else if(a[i]==\\'0\\' and a[i]==\\'0\\' and c==1){\\n                ans+=\"1\";\\n                c=0;\\n            }\\n        }\\n        if(c==1){\\n            ans+=\"1\";\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2742895,
                "title": "python-one-line-solution-easy",
                "content": "````\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        #int(a,2) a represents str, 2 represents base\\n        return str(bin(int(a,2)+int(b,2)))[2:]  # first two elements of the binary is always 0b",
                "solutionTags": [
                    "Python"
                ],
                "code": "````\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        #int(a,2) a represents str, 2 represents base\\n        return str(bin(int(a,2)+int(b,2)))[2:]  # first two elements of the binary is always 0b",
                "codeTag": "Java"
            },
            {
                "id": 2635764,
                "title": "explaination-solution-java-90",
                "content": "Explaination : add two binary (given in the form of string ) and return the sum as a return\\n1+1 = 0  , 1 + 0 = 1 (binary sum)\\nApproach : \\n1. Used String Builder to use method like reverse , append \\n2. add last digits of binary and add the last digit of sum into new stringBuilder\\n3. also add the carry to next sum\\n4. atlast reverse the string \\n```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = a.length()-1 , j = b.length()-1, carry = 0;\\n        while (i>=0||j>=0){\\n            int sum = carry;\\n            if(i>=0)sum += a.charAt(i--) - \\'0\\'; ////we subtract \\'0\\' to get the int value of the char from the ascii\\n            if(j>=0)sum += b.charAt(j--) - \\'0\\';\\n            sb.append(sum%2);\\n            carry = sum/2;\\n        }\\n        if(carry!=0) sb.append(carry); //adding remaining carry to sum\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuilder sb = new StringBuilder();\\n        int i = a.length()-1 , j = b.length()-1, carry = 0;\\n        while (i>=0||j>=0){\\n            int sum = carry;\\n            if(i>=0)sum += a.charAt(i--) - \\'0\\'; ////we subtract \\'0\\' to get the int value of the char from the ascii\\n            if(j>=0)sum += b.charAt(j--) - \\'0\\';\\n            sb.append(sum%2);\\n            carry = sum/2;\\n        }\\n        if(carry!=0) sb.append(carry); //adding remaining carry to sum\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2529905,
                "title": "c-solution-add-binary",
                "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        \\n        string result;\\n        int i = a.size()-1, j = b.size()-1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0){\\n                sum += a[i--] -\\'0\\'; \\n            }\\n            if(j >= 0){\\n                sum += b[j--] - \\'0\\';\\n            }\\n            carry = sum > 1 ? 1 : 0;\\n            result += to_string(sum%2);\\n        }\\n        if(carry) result += to_string(carry);\\n        reverse(result.begin(), result.end());\\n        return result;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        \\n        string result;\\n        int i = a.size()-1, j = b.size()-1;\\n        int carry = 0;\\n        while(i >= 0 || j >= 0){\\n            int sum = carry;\\n            if(i >= 0){\\n                sum += a[i--] -\\'0\\'; \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2524346,
                "title": "easy-approach-100-fast",
                "content": "```\\npublic String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int i = a.length() -1 ;\\n        int j = b.length() -1 ;\\n        int carry = 0;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0) sum+= a.charAt(i--) - \\'0\\';\\n            if(j>=0) sum+= b.charAt(j--) - \\'0\\';\\n            carry = sum >1 ? 1:0;\\n            result.append(sum%2);\\n        }\\n        if(carry!=0) result.append(carry);\\n        return result.reverse().toString();\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String addBinary(String a, String b) {\\n        StringBuilder result = new StringBuilder();\\n        int i = a.length() -1 ;\\n        int j = b.length() -1 ;\\n        int carry = 0;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0) sum+= a.charAt(i--) - \\'0\\';\\n            if(j>=0) sum+= b.charAt(j--) - \\'0\\';\\n            carry = sum >1 ? 1:0;\\n            result.append(sum%2);\\n        }\\n        if(carry!=0) result.append(carry);\\n        return result.reverse().toString();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2506833,
                "title": "0ms-easily-understandable-c-solution-single-for-loop",
                "content": "![image](https://assets.leetcode.com/users/images/8697268a-6131-4691-a90c-b6eebe3655a2_1661892025.0757692.png)\\n\\n**Question** (*read it after going through the code*): You will wonder, if we reversed the strings just to push back and then also reversed the final string at the end, then can\\'t we insert everything at the beginning so to save 3 reverse operations? \\n**Answer**: Try it yourself and drop in comments if you get the way! I would be impressed.\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(), a.end());                        //Reversing both strings (if you get this, then you got the code very well)\\n        reverse(b.begin(), b.end());\\n        \\n        if(a.size()>b.size()){                              //These two conditions are for making both strings equal sized by adding \\'0\\' to smaller string\\n            for(int i=b.size(); i<a.size(); i++){           //We need to add \\'0\\' to front so not to affect the sum, that\\'s why we first reversed the string and then pushed back ;)\\n                b.push_back(\\'0\\');\\n            }\\n        }\\n        else if(a.size()<b.size()){\\n            for(int i=a.size(); i<b.size(); i++){\\n                a.push_back(\\'0\\');\\n            }\\n        }\\n        \\n        string res;                                         //Result string\\n        char carry=\\'0\\';                                     //Carry\\n        for(int i=0; i<a.size(); i++){\\n            if(a[i]==\\'1\\'&&b[i]==\\'1\\'){\\n                res.push_back(carry);\\n                carry=\\'1\\';\\n            }\\n            else if((a[i]==\\'1\\' || b[i]==\\'1\\')){\\n                if(carry==\\'1\\') res.push_back(\\'0\\');\\n                else res.push_back(\\'1\\');\\n            }\\n            else{\\n                res.push_back(carry);\\n                if(carry==\\'1\\') carry=\\'0\\';\\n            }\\n        }\\n        if(carry==\\'1\\') res.push_back(\\'1\\');                  //if carry is present after looping, add it at the end (remember, we first reversed strings. So everything we need to add to the front, we will push back)\\n            \\n        reverse(res.begin(), res.end());                    //Reverse again to get the final string\\n        return res;   \\n    }\\n};\\n```\\n**Plz Upvote if you find the solution helpful :)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        reverse(a.begin(), a.end());                        //Reversing both strings (if you get this, then you got the code very well)\\n        reverse(b.begin(), b.end());\\n        \\n        if(a.size()>b.size()){                              //These two conditions are for making both strings equal sized by adding \\'0\\' to smaller string\\n            for(int i=b.size(); i<a.size(); i++){           //We need to add \\'0\\' to front so not to affect the sum, that\\'s why we first reversed the string and then pushed back ;)\\n                b.push_back(\\'0\\');\\n            }\\n        }\\n        else if(a.size()<b.size()){\\n            for(int i=a.size(); i<b.size(); i++){\\n                a.push_back(\\'0\\');\\n            }\\n        }\\n        \\n        string res;                                         //Result string\\n        char carry=\\'0\\';                                     //Carry\\n        for(int i=0; i<a.size(); i++){\\n            if(a[i]==\\'1\\'&&b[i]==\\'1\\'){\\n                res.push_back(carry);\\n                carry=\\'1\\';\\n            }\\n            else if((a[i]==\\'1\\' || b[i]==\\'1\\')){\\n                if(carry==\\'1\\') res.push_back(\\'0\\');\\n                else res.push_back(\\'1\\');\\n            }\\n            else{\\n                res.push_back(carry);\\n                if(carry==\\'1\\') carry=\\'0\\';\\n            }\\n        }\\n        if(carry==\\'1\\') res.push_back(\\'1\\');                  //if carry is present after looping, add it at the end (remember, we first reversed strings. So everything we need to add to the front, we will push back)\\n            \\n        reverse(res.begin(), res.end());                    //Reverse again to get the final string\\n        return res;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2379284,
                "title": "c-solution-3ms-fast-than-89",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int i = a.length()-1, j = b.length()-1;\\n        int carry = 0;\\n        while(i>=0 || j>=0 || carry){\\n            if(i>=0){\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            if(j>=0){\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            ans += (carry%2 + \\'0\\');\\n            carry/=2;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans;\\n        int i = a.length()-1, j = b.length()-1;\\n        int carry = 0;\\n        while(i>=0 || j>=0 || carry){\\n            if(i>=0){\\n                carry += a[i] - \\'0\\';\\n                i--;\\n            }\\n            if(j>=0){\\n                carry += b[j] - \\'0\\';\\n                j--;\\n            }\\n            \\n            ans += (carry%2 + \\'0\\');\\n            carry/=2;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1883447,
                "title": "add-binary",
                "content": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        StringBuilder s = new StringBuilder();\\n        int sum = 0;\\n        while(i >= 0 || j >= 0){\\n            sum = sum/2;\\n            if(i >= 0) \\n                sum = sum + a.charAt(i) - \\'0\\';\\n            if(j >= 0) \\n                sum = sum + b.charAt(j) - \\'0\\';\\n            s.append(sum % 2);\\n            i--;\\n            j--;\\n        }\\n        if(sum / 2 != 0) \\n            s.append(1);\\n        return s.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search Tree"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        StringBuilder s = new StringBuilder();\\n        int sum = 0;\\n        while(i >= 0 || j >= 0){\\n            sum = sum/2;\\n            if(i >= 0) \\n                sum = sum + a.charAt(i) - \\'0\\';\\n            if(j >= 0) \\n                sum = sum + b.charAt(j) - \\'0\\';\\n            s.append(sum % 2);\\n            i--;\\n            j--;\\n        }\\n        if(sum / 2 != 0) \\n            s.append(1);\\n        return s.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714533,
                "title": "easy-python-1-liner",
                "content": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n        return (bin(int(a,2) + int(b,2)))[2:]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n        return (bin(int(a,2) + int(b,2)))[2:]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1686352,
                "title": "javascript-o-max-n-m-time-complexity-o-1-space-complexity",
                "content": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n    let aLen = a.length - 1;\\n    let bLen = b.length - 1;\\n\\n    let binaryCount = \"\";\\n    let hasCarry = false;\\n\\n    while(aLen >= 0 || bLen >= 0) {\\n        let num1 = (aLen >= 0 ? Number.parseInt(a[aLen]) : 0);\\n        let num2 = (bLen >= 0 ? Number.parseInt(b[bLen]) : 0);\\n\\n        let value = hasCarry ? 1 ^ (num1 ^ num2) : (num1 ^ num2);\\n\\n        binaryCount = value.toString().concat(binaryCount);\\n\\n        hasCarry = num1 === num2 && num1 === 1 || hasCarry && (num1 === 1 || num2 === 1);\\n\\n        aLen--;\\n        bLen--;\\n    }\\n\\n    return hasCarry ? \"1\".concat(binaryCount) : binaryCount;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n    let aLen = a.length - 1;\\n    let bLen = b.length - 1;\\n\\n    let binaryCount = \"\";\\n    let hasCarry = false;\\n\\n    while(aLen >= 0 || bLen >= 0) {\\n        let num1 = (aLen >= 0 ? Number.parseInt(a[aLen]) : 0);\\n        let num2 = (bLen >= 0 ? Number.parseInt(b[bLen]) : 0);\\n\\n        let value = hasCarry ? 1 ^ (num1 ^ num2) : (num1 ^ num2);\\n\\n        binaryCount = value.toString().concat(binaryCount);\\n\\n        hasCarry = num1 === num2 && num1 === 1 || hasCarry && (num1 === 1 || num2 === 1);\\n\\n        aLen--;\\n        bLen--;\\n    }\\n\\n    return hasCarry ? \"1\".concat(binaryCount) : binaryCount;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1680413,
                "title": "short-and-easy-python-solution",
                "content": "Modify string values so you can convert them into integers with the int() function, then add them and return the result in binary format as a string without the \\'0b\\' at the start.\\n```\\ndef addBinary(self, a: str, b: str) -> str:\\n        a = \"0b\" + a\\n        b = \"0b\" + b\\n        \\n        result = int(a, 2) + int(b, 2)\\n        \\n        return str(bin(result))[2:]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef addBinary(self, a: str, b: str) -> str:\\n        a = \"0b\" + a\\n        b = \"0b\" + b\\n        \\n        result = int(a, 2) + int(b, 2)\\n        \\n        return str(bin(result))[2:]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1679607,
                "title": "cpp-solution-can-we-optimize-it-further",
                "content": "Can i do better than this solution ?\\n\\n\\n    string addBinary(string a, string b) {\\n        int i = a.length()-1;\\n    int j = b.length() -1 ;\\n\\n    int carry  = 0;\\n    string ans = \"\";\\n    while(carry || j>=0 || i>=0){\\n        int sum = 0;\\n        if(i>=0){\\n            sum += a[i] - \\'0\\';\\n            i--;\\n        }if(j>=0){\\n            sum += b[j] - \\'0\\';\\n            j--;\\n        }\\n        sum += carry;\\n        ans = ans + to_string(sum % 2) ;\\n        carry = sum /2 ;\\n        \\n    }\\n        reverse(ans.begin(),ans.end());\\n    return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "Can i do better than this solution ?\\n\\n\\n    string addBinary(string a, string b) {\\n        int i = a.length()-1;\\n    int j = b.length() -1 ;\\n\\n    int carry  = 0;\\n    string ans = \"\";\\n    while(carry || j>=0 || i>=0){\\n        int sum = 0;\\n        if(i>=0){\\n            sum += a[i] - \\'0\\';\\n            i--;\\n        }if(j>=0){\\n            sum += b[j] - \\'0\\';\\n            j--;\\n        }\\n        sum += carry;\\n        ans = ans + to_string(sum % 2) ;\\n        carry = sum /2 ;\\n        \\n    }\\n        reverse(ans.begin(),ans.end());\\n    return ans;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1617150,
                "title": "javascript",
                "content": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nconst addBinary = (a, b) => {\\n  const arrA = a.split(\"\").reverse();\\n  const arrB = b.split(\"\").reverse();\\n  let carry = 0;\\n  let answer = [];\\n  let idx = 0;\\n  const len = a.length > b.length ? a.length : b.length;\\n\\n  while (idx < len) {\\n    const x = arrA[idx] ? +arrA[idx] : 0;\\n    const y = arrB[idx] ? +arrB[idx] : 0;\\n    const sum = carry + x + y;\\n    carry = Math.floor(sum / 2);\\n    answer.unshift(sum % 2);\\n    idx++;\\n  }\\n\\n  if (carry > 0) answer.unshift(carry);\\n\\n  return answer.join(\"\");\\n};\\n```\\nRuntime: 72 ms, faster than 94.73% of JavaScript online submissions for Add Binary.\\nMemory Usage: 40.8 MB, less than 55.11% of JavaScript online submissions for Add Binary.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nconst addBinary = (a, b) => {\\n  const arrA = a.split(\"\").reverse();\\n  const arrB = b.split(\"\").reverse();\\n  let carry = 0;\\n  let answer = [];\\n  let idx = 0;\\n  const len = a.length > b.length ? a.length : b.length;\\n\\n  while (idx < len) {\\n    const x = arrA[idx] ? +arrA[idx] : 0;\\n    const y = arrB[idx] ? +arrB[idx] : 0;\\n    const sum = carry + x + y;\\n    carry = Math.floor(sum / 2);\\n    answer.unshift(sum % 2);\\n    idx++;\\n  }\\n\\n  if (carry > 0) answer.unshift(carry);\\n\\n  return answer.join(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1395977,
                "title": "python-simple-solution-one-liner-faster-than-97",
                "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a, 2)+int(b, 2))[2:]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return bin(int(a, 2)+int(b, 2))[2:]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1132526,
                "title": "c-0-ms-solution-bit-by-bit-calculation",
                "content": "Gist : \\n* Get last index of both string.\\n* calculate each position sum & carry bit by bit (Similar to adding two numbers in link list)\\n* Since it\\'s base 2 number, at each position value should be saved after modulo 2.\\n* Carry is 1 if sum at that position is greater than two else 0.\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int ai = a.length() - 1;\\n        int bi = b.length() - 1;\\n        string ans{};\\n        int carry = 0;\\n        while(ai >= 0 || bi >= 0){\\n            if(ai >= 0){\\n                carry += a[ai] - \\'0\\';\\n                --ai;\\n            }\\n            if(bi >= 0){\\n                carry += b[bi]- \\'0\\';\\n                --bi;\\n            }\\n            ans.push_back((carry % 2) + \\'0\\');\\n            if(carry > 1)\\n                carry = 1;\\n            else\\n                carry = 0;\\n        }\\n        if(carry)\\n            ans.push_back((carry % 2) + \\'0\\');\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int ai = a.length() - 1;\\n        int bi = b.length() - 1;\\n        string ans{};\\n        int carry = 0;\\n        while(ai >= 0 || bi >= 0){\\n            if(ai >= 0){\\n                carry += a[ai] - \\'0\\';\\n                --ai;\\n            }\\n            if(bi >= 0){\\n                carry += b[bi]- \\'0\\';\\n                --bi;\\n            }\\n            ans.push_back((carry % 2) + \\'0\\');\\n            if(carry > 1)\\n                carry = 1;\\n            else\\n                carry = 0;\\n        }\\n        if(carry)\\n            ans.push_back((carry % 2) + \\'0\\');\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1089002,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuffer sb = new StringBuffer();\\n        int aIndex = a.length()-1;\\n        int bIndex = b.length()-1;\\n        \\n        int add = 0;\\n        while(aIndex >= 0 || bIndex >= 0) {\\n            int val1 = aIndex < 0 ? 0 : a.charAt(aIndex)-\\'0\\';\\n            int val2 = bIndex < 0 ? 0 : b.charAt(bIndex)-\\'0\\';\\n            int sum = val1 + val2 + add;\\n            if(sum >= 2) {\\n                add = 1;\\n                sum = sum - 2;\\n            } else {\\n                add = 0;\\n            }\\n            sb.append(sum);\\n            aIndex--;\\n            bIndex--;\\n        }\\n        if(add == 1) sb.append(add);\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        StringBuffer sb = new StringBuffer();\\n        int aIndex = a.length()-1;\\n        int bIndex = b.length()-1;\\n        \\n        int add = 0;\\n        while(aIndex >= 0 || bIndex >= 0) {\\n            int val1 = aIndex < 0 ? 0 : a.charAt(aIndex)-\\'0\\';\\n            int val2 = bIndex < 0 ? 0 : b.charAt(bIndex)-\\'0\\';\\n            int sum = val1 + val2 + add;\\n            if(sum >= 2) {\\n                add = 1;\\n                sum = sum - 2;\\n            } else {\\n                add = 0;\\n            }\\n            sb.append(sum);\\n            aIndex--;\\n            bIndex--;\\n        }\\n        if(add == 1) sb.append(add);\\n        return sb.reverse().toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 977822,
                "title": "python-one-liner",
                "content": "``` \\nreturn format(int(a, 2) + int(b,2), \"b\")",
                "solutionTags": [],
                "code": "``` \\nreturn format(int(a, 2) + int(b,2), \"b\")",
                "codeTag": "Unknown"
            },
            {
                "id": 921110,
                "title": "python-3-intuitive-24-ms",
                "content": "~~~\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        llen = max(len(a), len(b))\\n        diff = abs(len(a) - len(b))\\n        carry = 0\\n        result = \"\"\\n        if len(a) > len(b):\\n            b = \\'\\'.join((\\'0\\'*(diff), b)) # Insert \\'0\\' at the beginning of the string\\n        elif len(a) < len(b):\\n            a = \\'\\'.join((\\'0\\'*(diff), a))\\n        for i in range((llen-1), -1, -1):\\n            if (int(a[i]) + int(b[i]) + carry) == 2:\\n                result = \\'\\'.join((\\'0\\', result))\\n                carry = 1\\n            elif (int(a[i]) + int(b[i]) + carry) == 3:\\n                result = \\'\\'.join((\\'1\\', result))\\n                carry = 1\\n            elif (int(a[i]) + int(b[i]) + carry) == 1:\\n                result = \\'\\'.join((\\'1\\', result))\\n                carry = 0\\n            elif (int(a[i]) + int(b[i]) + carry) == 0:\\n                result = \\'\\'.join((\\'0\\', result))\\n                carry = 0\\n        if carry == 1:\\n            result = \\'\\'.join((\\'1\\', result))\\n        return result if len(result) else \"0\"\\n~~~",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "~~~\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        llen = max(len(a), len(b))\\n        diff = abs(len(a) - len(b))\\n        carry = 0\\n        result = \"\"\\n        if len(a) > len(b):\\n            b = \\'\\'.join((\\'0\\'*(diff), b)) # Insert \\'0\\' at the beginning of the string\\n        elif len(a) < len(b):\\n            a = \\'\\'.join((\\'0\\'*(diff), a))\\n        for i in range((llen-1), -1, -1):\\n            if (int(a[i]) + int(b[i]) + carry) == 2:\\n                result = \\'\\'.join((\\'0\\', result))\\n                carry = 1\\n            elif (int(a[i]) + int(b[i]) + carry) == 3:\\n                result = \\'\\'.join((\\'1\\', result))\\n                carry = 1\\n            elif (int(a[i]) + int(b[i]) + carry) == 1:\\n                result = \\'\\'.join((\\'1\\', result))\\n                carry = 0\\n            elif (int(a[i]) + int(b[i]) + carry) == 0:\\n                result = \\'\\'.join((\\'0\\', result))\\n                carry = 0\\n        if carry == 1:\\n            result = \\'\\'.join((\\'1\\', result))\\n        return result if len(result) else \"0\"\\n~~~",
                "codeTag": "Java"
            },
            {
                "id": 744625,
                "title": "swift-minimalistic-solution-with-complexity",
                "content": "Time: O(n + c), Space: O(n + c) where n is the length of the longer string, and c is the carry (0 or 1)\\n```\\nfunc addBinary(_ a: String, _ b: String) -> String {\\n\\tlet arrayA = Array(a)\\n\\tlet arrayB = Array(b)\\n\\tvar i = arrayA.count - 1\\n\\tvar j = arrayB.count - 1\\n\\n\\tvar result = \"\"\\n\\tvar carry = 0\\n\\n\\twhile i >= 0 || j >= 0 || carry > 0 {\\n\\t\\tvar sum = carry\\n\\n\\t\\tif i >= 0 {\\n\\t\\t\\tsum += Int(String(arrayA[i]))!\\n\\t\\t\\ti -= 1\\n\\t\\t}\\n\\n\\t\\tif j >= 0 {\\n\\t\\t\\tsum += Int(String(arrayB[j]))!\\n\\t\\t\\tj -= 1\\n\\t\\t}\\n\\n\\t\\tresult = \"\\\\(sum % 2)\" + result\\n\\t\\tcarry = sum / 2\\n\\t}\\n\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nfunc addBinary(_ a: String, _ b: String) -> String {\\n\\tlet arrayA = Array(a)\\n\\tlet arrayB = Array(b)\\n\\tvar i = arrayA.count - 1\\n\\tvar j = arrayB.count - 1\\n\\n\\tvar result = \"\"\\n\\tvar carry = 0\\n\\n\\twhile i >= 0 || j >= 0 || carry > 0 {\\n\\t\\tvar sum = carry\\n\\n\\t\\tif i >= 0 {\\n\\t\\t\\tsum += Int(String(arrayA[i]))!\\n\\t\\t\\ti -= 1\\n\\t\\t}\\n\\n\\t\\tif j >= 0 {\\n\\t\\t\\tsum += Int(String(arrayB[j]))!\\n\\t\\t\\tj -= 1\\n\\t\\t}\\n\\n\\t\\tresult = \"\\\\(sum % 2)\" + result\\n\\t\\tcarry = sum / 2\\n\\t}\\n\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 615989,
                "title": "c-o-n-solution",
                "content": "```\\n/*\\n    Time: O(n) where n = max(a.Length, b.Length)\\n    Space: O(n) where n = max(a.Length, b.Length), since StringBuilder tracks the result.\\n*/\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int i = a.Length - 1, j = b.Length - 1, carry = 0;\\n        \\n        while(i >= 0 || j >= 0 || carry > 0)\\n        {\\n            int valA = i < 0? 0 : a[i] - \\'0\\';\\n            int valB = j < 0? 0 : b[j] - \\'0\\';\\n            \\n            int sum = valA + valB + carry;\\n            sb.Insert(0, sum % 2);\\n            carry = sum / 2;\\n            i--;\\n            j--;\\n        }\\n        \\n        return sb.ToString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n    Time: O(n) where n = max(a.Length, b.Length)\\n    Space: O(n) where n = max(a.Length, b.Length), since StringBuilder tracks the result.\\n*/\\npublic class Solution {\\n    public string AddBinary(string a, string b) {\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int i = a.Length - 1, j = b.Length - 1, carry = 0;\\n        \\n        while(i >= 0 || j >= 0 || carry > 0)\\n        {\\n            int valA = i < 0? 0 : a[i] - \\'0\\';\\n            int valB = j < 0? 0 : b[j] - \\'0\\';\\n            \\n            int sum = valA + valB + carry;\\n            sb.Insert(0, sum % 2);\\n            carry = sum / 2;\\n            i--;\\n            j--;\\n        }\\n        \\n        return sb.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 611983,
                "title": "easy-to-understand-java-solution",
                "content": "```\\npublic String addBinary(String a, String b) {\\n       StringBuffer sb = new StringBuffer();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0){\\n                sum += a.charAt(i--)-\\'0\\';\\n            }\\n            if(j>=0){\\n                sum += b.charAt(j--)-\\'0\\';\\n            }\\n            sb.insert(0,sum%2);\\n            carry = sum/2;\\n         }\\n        if(carry!=0){\\n            sb.insert(0,carry);\\n        }\\n        return sb.toString();\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\npublic String addBinary(String a, String b) {\\n       StringBuffer sb = new StringBuffer();\\n        int i = a.length() - 1;\\n        int j = b.length() - 1;\\n        int carry = 0;\\n        while(i>=0 || j>=0){\\n            int sum = carry;\\n            if(i>=0){\\n                sum += a.charAt(i--)-\\'0\\';\\n            }\\n            if(j>=0){\\n                sum += b.charAt(j--)-\\'0\\';\\n            }\\n            sb.insert(0,sum%2);\\n            carry = sum/2;\\n         }\\n        if(carry!=0){\\n            sb.insert(0,carry);\\n        }\\n        return sb.toString();\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 158430,
                "title": "java-beat-100",
                "content": "```\\n public String addBinary(String a, String b) {\\n        char[] result = new char[Math.max(a.length(), b.length())];\\n        int carryBit = 0;\\n        for (int a1 = a.length() - 1, a2 = b.length() - 1; a1 >= 0 || a2 >= 0; --a1, --a2) {\\n            int c1 = a1 < 0 ? 0 : (a.charAt(a1) - \\'0\\');\\n            int c2 = a2 < 0 ? 0 : (b.charAt(a2) - \\'0\\');\\n            result[Math.max(a1, a2)] = (char) ((c1 + c2 + carryBit) % 2 + (int) \\'0\\');\\n\\n            if ((c1 + c2 + carryBit) / 2 > 0) carryBit = 1;\\n            else carryBit = 0;\\n        }\\n        return (carryBit > 0 ? \"1\" : \"\") + new String(result);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public String addBinary(String a, String b) {\\n        char[] result = new char[Math.max(a.length(), b.length())];\\n        int carryBit = 0;\\n        for (int a1 = a.length() - 1, a2 = b.length() - 1; a1 >= 0 || a2 >= 0; --a1, --a2) {\\n            int c1 = a1 < 0 ? 0 : (a.charAt(a1) - \\'0\\');\\n            int c2 = a2 < 0 ? 0 : (b.charAt(a2) - \\'0\\');\\n            result[Math.max(a1, a2)] = (char) ((c1 + c2 + carryBit) % 2 + (int) \\'0\\');\\n\\n            if ((c1 + c2 + carryBit) / 2 > 0) carryBit = 1;\\n            else carryBit = 0;\\n        }\\n        return (carryBit > 0 ? \"1\" : \"\") + new String(result);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 24551,
                "title": "clean-c-3ms-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int carry = 0;\\n        string s = \"\";\\n        int i = a.size() - 1;\\n        int j = b.size() - 1;\\n        while(i >= 0 || j >= 0 || carry){\\n            int num1 = i < 0 ? 0 : a[i] - '0';\\n            int num2 = j < 0 ? 0 : b[j] - '0';\\n            int sum = num1 + num2 + carry;\\n            s.push_back(sum % 2 + '0');\\n            carry = sum / 2;\\n            i--;\\n            j--;\\n        }\\n        reverse(s.begin(), s.end());\\n        return s;\\n    }\\n};\\n```\\n***\\nShorter version.\\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i = a.size() - 1, j = b.size() - 1, carry = 0;\\n        string s = \"\";\\n        while(i >= 0 || j >= 0 || carry){\\n            int sum = (i < 0 ? 0 : a[i--] - '0') + (j < 0 ? 0 : b[j--] - '0') + carry;\\n            s = to_string(sum % 2) + s;\\n            carry = sum / 2;\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int carry = 0;\\n        string s = \"\";\\n        int i = a.size() - 1;\\n        int j = b.size() - 1;\\n        while(i >= 0 || j >= 0 || carry){\\n            int num1 = i < 0 ? 0 : a[i] - '0';\\n            int num2 = j < 0 ? 0 : b[j] - '0';\\n            int sum = num1 + num2 + carry;\\n            s.push_back(sum % 2 + '0');\\n            carry = sum / 2;\\n            i--;\\n            j--;\\n        }\\n        reverse(s.begin(), s.end());\\n        return s;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int i = a.size() - 1, j = b.size() - 1, carry = 0;\\n        string s = \"\";\\n        while(i >= 0 || j >= 0 || carry){\\n            int sum = (i < 0 ? 0 : a[i--] - '0') + (j < 0 ? 0 : b[j--] - '0') + carry;\\n            s = to_string(sum % 2) + s;\\n            carry = sum / 2;\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 24608,
                "title": "share-my-2ms-java-solution-beats-96",
                "content": "    public String addBinary(String a, String b) {\\n    \\tchar[] aArray = a.toCharArray();\\n    \\tchar[] bArray = b.toCharArray();\\n        char[] sumArray = new char[Math.max(a.length(), b.length()) + 1];\\n        int index = sumArray.length - 1, carry = 0;\\n        for(int aIndex = a.length()-1, bIndex = b.length()-1; aIndex >=0 || bIndex >= 0; aIndex--, bIndex--){\\n            int aNum = aIndex < 0 ? 0 : aArray[aIndex] - '0';\\n            int bNum = bIndex < 0 ? 0 : bArray[bIndex] - '0';\\n            int sum = aNum + bNum + carry;\\n            sumArray[index--] = (char)('0' + (sum % 2));\\n            carry = sum / 2;\\n        }\\n        sumArray[0] = (char)('0' + carry);\\n        return carry == 0 ? new String(sumArray, 1, sumArray.length - 1): new String(sumArray);\\n    }",
                "solutionTags": [],
                "code": "    public String addBinary(String a, String b) {\\n    \\tchar[] aArray = a.toCharArray();\\n    \\tchar[] bArray = b.toCharArray();\\n        char[] sumArray = new char[Math.max(a.length(), b.length()) + 1];\\n        int index = sumArray.length - 1, carry = 0;\\n        for(int aIndex = a.length()-1, bIndex = b.length()-1; aIndex >=0 || bIndex >= 0; aIndex--, bIndex--){\\n            int aNum = aIndex < 0 ? 0 : aArray[aIndex] - '0';\\n            int bNum = bIndex < 0 ? 0 : bArray[bIndex] - '0';\\n            int sum = aNum + bNum + carry;\\n            sumArray[index--] = (char)('0' + (sum % 2));\\n            carry = sum / 2;\\n        }\\n        sumArray[0] = (char)('0' + carry);\\n        return carry == 0 ? new String(sumArray, 1, sumArray.length - 1): new String(sumArray);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 24690,
                "title": "short-and-concise-c-solution",
                "content": "    class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            if(b.size() > a.size())\\n                return addBinary(b, a);\\n            \\n            int x = 0, y = 0, carry = 0;\\n            for(int i = a.size() - 1; i >= 0; i--){\\n                int ib = b.size() - a.size() + i;\\n                y = ib >= 0 ? b[ib] - '0' : 0;\\n                x = a[i] - '0';\\n                a[i] = (x + y + carry) % 2 + '0';\\n                carry = x + y + carry >= 2 ? 1 : 0;\\n            }\\n            \\n            if(carry) a = \"1\" + a;\\n            return a;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            if(b.size() > a.size())\\n                return addBinary(b, a);\\n            \\n            int x = 0, y = 0, carry = 0;\\n            for(int i = a.size() - 1; i >= 0; i--){\\n                int ib = b.size() - a.size() + i;\\n                y = ib >= 0 ? b[ib] - '0' : 0;\\n                x = a[i] - '0';\\n                a[i] = (x + y + carry) % 2 + '0';\\n                carry = x + y + carry >= 2 ? 1 : 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 24715,
                "title": "c-4ms-very-simple-logic",
                "content": "    class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            /* make strings the same length, by padding one in front with 0s */\\n            if(a.size() > b.size()) while(a.size() > b.size()) b = \"0\" + b;\\n            else if(b.size() > a.size()) while(b.size() > a.size()) a = \"0\" + a;\\n\\n            int i = a.size()-1;\\n            string sum = \"\";\\n            int carry = 0;\\n            \\n            while(i >= 0) {\\n                if(carry == 1) {\\n                    if(a[i] == '0' && b[i] == '0') {\\n                        sum = \"1\" + sum;\\n                        carry = 0;\\n                    }\\n                    else if((a[i] == '0' && b[i] == '1') || (a[i] == '1' && b[i] == '0')) {\\n                        sum = \"0\" + sum;\\n                    }\\n                    else { /* we're adding three 1s here */\\n                        sum = \"1\" + sum;\\n                    }\\n                }\\n                else {\\n                    if(a[i] == '0' && b[i] == '0') {\\n                        sum = \"0\" + sum;\\n                    }\\n                    else if((a[i] == '0' && b[i] == '1') || (a[i] == '1' && b[i] == '0')) {\\n                        sum = \"1\" + sum;\\n                    }\\n                    else { /* we're adding two 1s here */\\n                        sum = \"0\" + sum;\\n                        carry = 1;\\n                    }\\n                }\\n                \\n                i--;\\n            }\\n            \\n            if(carry == 1) sum = \"1\" + sum;\\n            \\n            return sum;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        string addBinary(string a, string b) {\\n            /* make strings the same length, by padding one in front with 0s */\\n            if(a.size() > b.size()) while(a.size() > b.size()) b = \"0\" + b;\\n            else if(b.size() > a.size()) while(b.size() > a.size()) a = \"0\" + a;\\n\\n            int i = a.size()-1;\\n            string sum = \"\";\\n            int carry = 0;\\n            \\n            while(i >= 0) {\\n                if(carry == 1) {\\n                    if(a[i] == '0' && b[i] == '0') {\\n                        sum = \"1\" + sum;\\n                        carry = 0;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 24779,
                "title": "c-4ms-solution-inspired-by-hardware-full-adder-circuit",
                "content": "This solution computes the stage value (sum) and carry-out using Boolean expressions of the [full adder circuit][1] <br> The circuit for the full adder is below.\\n![Full Adder circuit][2]\\n<br>\\nThe expressions are.\\n\\n                 S     = A xor B xor C_in\\n                 C_out = A.B + C_in. (A xor B)\\n\\nThe inputs are padded to the same size to emulate a hardware-adder with inputs of the same size.\\n\\n    string addBinary(string a, string b) {\\n        // Pad to same length\\n        if (a.size()> b.size())\\n                 b.insert(b.begin(), a.size()-b.size(), '0');\\n        else\\n                 a.insert(a.begin(), b.size()-a.size(), '0');\\n        int len = a.size();\\n        bool carry_out= false, sum= false;\\n        string res(len, '0'); // all zero\\n        for (int i=len-1; i>=0 ; --i) {\\n                bool ai = a[i]-'0'== 1; \\n                bool bi = b[i]-'0'== 1;\\n                // Full adder sum = (A xor B xor C_in)\\n                sum = ai != bi != carry_out ;\\n                // Full adder C_out =  (A.B + C_in. (A xor B))\\n                carry_out =  ai && bi || (carry_out && (ai != bi)) ; \\n                if (sum) res[i] = '1';\\n        }\\n        if (carry_out)  // carry over at end\\n                res= \"1\" + res;\\n        return res;\\n    }\\n\\nNote I have used boolean xor operator (i.e. != operator) instead of bit-wise xor ( ^ operator)\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Full_adder\\n  [2]: http://www.cs.iit.edu/~cs561/cs350/ADDER/full_adder.jpg",
                "solutionTags": [
                    "C++"
                ],
                "code": "This solution computes the stage value (sum) and carry-out using Boolean expressions of the [full adder circuit][1] <br> The circuit for the full adder is below.\\n![Full Adder circuit][2]\\n<br>\\nThe expressions are.\\n\\n                 S     = A xor B xor C_in\\n                 C_out = A.B + C_in. (A xor B)\\n\\nThe inputs are padded to the same size to emulate a hardware-adder with inputs of the same size.\\n\\n    string addBinary(string a, string b) {\\n        // Pad to same length\\n        if (a.size()> b.size())\\n                 b.insert(b.begin(), a.size()-b.size(), '0');\\n        else\\n                 a.insert(a.begin(), b.size()-a.size(), '0');\\n        int len = a.size();\\n        bool carry_out= false, sum= false;\\n        string res(len, '0'); // all zero\\n        for (int i=len-1; i>=0 ; --i) {\\n                bool ai = a[i]-'0'== 1; \\n                bool bi = b[i]-'0'== 1;\\n                // Full adder sum = (A xor B xor C_in)\\n                sum = ai != bi != carry_out ;\\n                // Full adder C_out =  (A.B + C_in. (A xor B))\\n                carry_out =  ai && bi || (carry_out && (ai != bi)) ; \\n                if (sum) res[i] = '1';\\n        }\\n        if (carry_out)  // carry over at end\\n                res= \"1\" + res;\\n        return res;\\n    }\\n\\nNote I have used boolean xor operator (i.e. != operator) instead of bit-wise xor ( ^ operator)\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Full_adder\\n  [2]: http://www.cs.iit.edu/~cs561/cs350/ADDER/full_adder.jpg",
                "codeTag": "Unknown"
            },
            {
                "id": 3979776,
                "title": "using-big-integer-in-java",
                "content": "# * Using Big Integer\\n\\n# Code\\n```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a1, String b1) {\\n        BigInteger c=new BigInteger(a1,2);\\n        BigInteger d=new BigInteger(b1,2);\\n        BigInteger p=c.add(d);        \\n         String o = p.toString(2);\\n        return o;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a1, String b1) {\\n        BigInteger c=new BigInteger(a1,2);\\n        BigInteger d=new BigInteger(b1,2);\\n        BigInteger p=c.add(d);        \\n         String o = p.toString(2);\\n        return o;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3332248,
                "title": "java-biginteger",
                "content": "\\n\\n# Code\\n```\\nimport java.math.*;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return (new BigInteger(a, 2)).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.*;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        return (new BigInteger(a, 2)).add(new BigInteger(b, 2)).toString(2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186288,
                "title": "python-explained-solutions-good-to-know-one-liner-solution",
                "content": "# Solution 1 - O(N), O(N)\\n\\n# Intuition\\nUnderstand carry.\\n\\nAdding all possible 2 binary bits :\\n0 + 0 = 0, carry = 0\\n1 + 0 = 1, carry = 0\\n0 + 1 = 1 carry = 0\\n1 + 1 = 2, carry = 1\\n**-> Carry is simply the sum // 2**\\n\\n\\nTherefore only when the Addition of 1 and 1 happens we get a carry 1.\\n\\n\\n# Approach\\n1. Define carry = 0 and empty answer string \"\"\\n2. Find the one with the largest count of bits. This will help us to make the other of same length by appending zeros in the front.\\n2. Reverse both the string so we can start adding from the right most bit.\\n3. Find sum and add any previous carry\\n4. Find carry and append the summation\\n5. Repeat 4 and 5 until loop ends\\n6. If we get any carry form them addition on left most bits, add \"1\"\\n7. Revese the answer and return\\n\\n# Complexity\\n- Time complexity:\\n$$O(N)$$\\n\\n- Space complexity:\\n$$O(N)$$ -> answer string\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        answer = \"\"\\n        carry = 0\\n        len_diff = abs(len(a)-len(b))\\n        if len(a) >= len(b):\\n            b = \"0\" * len_diff + b\\n        else:\\n            a = \"0\" * len_diff + a\\n\\n        for i,j in zip(reversed(a), reversed(b)):\\n            summation = int(i) + int(j) + carry\\n            \\n            carry = summation // 2\\n            answer += str(summation % 2)\\n\\n        if carry == 1:\\n            answer += \"1\"\\n        return answer[::-1]\\n            \\n        \\n```\\n\\n\\n# Solution 2 - O(N), O(1) - Python One-liner\\n(Not recommended in a technical interview; but good to know :p)\\n\\n# Intuition\\nConvert string to integer and add as usual. Return the binary converted string of the answer.\\n\\n# Approach:\\n1. `int(a,2)`: this function converts the a into the needed base `2`\\n2. `format(sum, \"b\")`: converts the integer back into binary without \"0b\"\\n\\n# Complexity\\n- Time complexity:\\n$$O(N)$$ -> int() and format() -> involves arithmetics and are optimized to O(N)\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return format(int(a,2) + int(b,2), \"b\")\\n        \\n```\\n\\n[]()\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Bit Manipulation",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        answer = \"\"\\n        carry = 0\\n        len_diff = abs(len(a)-len(b))\\n        if len(a) >= len(b):\\n            b = \"0\" * len_diff + b\\n        else:\\n            a = \"0\" * len_diff + a\\n\\n        for i,j in zip(reversed(a), reversed(b)):\\n            summation = int(i) + int(j) + carry\\n            \\n            carry = summation // 2\\n            answer += str(summation % 2)\\n\\n        if carry == 1:\\n            answer += \"1\"\\n        return answer[::-1]\\n            \\n        \\n```\n```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        return format(int(a,2) + int(b,2), \"b\")\\n        \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1693882,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1574456,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800157,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800274,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800317,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1782417,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1574409,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1570139,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1565221,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1571988,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1693882,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1574456,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800157,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800274,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800317,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1782417,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1574409,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1570139,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1565221,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1571988,
                "content": [
                    {
                        "username": "MeetaHaldar",
                        "content": "I am a beginner and i do not think it s an easy question."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "bolleoa",
                        "content": "[@zenfred](/zenfred) Python has no limits on the size of integers."
                    },
                    {
                        "username": "shafaitahir8",
                        "content": "agreed"
                    },
                    {
                        "username": "zenfred",
                        "content": "[@qazFatNerd](/qazFatNerd) Converting to decimal does not make the situation easier, because the largest input is 10,000 bits long, which doesn\\'t fit into any primitive integer types."
                    },
                    {
                        "username": "dhlg1995",
                        "content": "[@abhinav-23](/abhinav-23) i use this way. and i think its a stupid way. can you suggest another way to solve?. I dont know what is BigInt(javascript) (i saw it in the very first solution after I submit my code)"
                    },
                    {
                        "username": "Tulsyan_25",
                        "content": "You are absolutely right, am also not able to solve it in very first time but let me give you a hint. Simply, convert both binary number in decimal then add them after that convert that decimal number in binary again."
                    },
                    {
                        "username": "qazFatNerd",
                        "content": "As a novice, I personally think the most intuitive and easiest way is  converting to decimal first."
                    },
                    {
                        "username": "santanusen",
                        "content": "The problem has around 51% acceptance rate; so you have a point."
                    },
                    {
                        "username": "Riaad_Morshed",
                        "content": "Once you solve it, it will be easy. First make both string same length by adding leading zero to smaller string and loop over strings at the same time and check [@Abhinav Gupta](/abhinav-23) mentioned conditions. It will be easy if you solve some cases on paper."
                    },
                    {
                        "username": "abhinav-23",
                        "content": "try solving the question in the way you actually add two binary numbers in maths (that is right to left) using loop and if-else condition.\\n\\nfew conditions are:\\nwhen carry=0\\na) 1+1+carry=0 and carry=1;\\nb)1+0+carry=1 and carry=0;\\nc)0+0+carry=0 and carry=0;"
                    },
                    {
                        "username": "YaduVuuDuu",
                        "content": "The word \\'easy\\' in itself is really subjective(someday this might be easy for you but difficult to someone else). Just enjoy the process of trying to solve it!! If you do solve it, celebrate it no matter the difficulty. Good luck!!"
                    },
                    {
                        "username": "Subhashish_Panda-123",
                        "content": "**Concept of Binary Addition.**\\n\\n**Rememeber,\\n1+1=0 with carry 1\\n1+0=1 with carry 0\\n0+1=1 with carry 0\\n0+0=0 with carry 0\\nImp:1+1=1 with carry 1 if previous carry was 1.\\nThe carry gets added in next step(scanning from right to left).\\n**\\n\\n*Know the algorithm first,then write your own code~Problem solving*"
                    },
                    {
                        "username": "harshabandi09",
                        "content": "how to add carry  1 in the text step?  in for loop!\\n\\n "
                    },
                    {
                        "username": "nat1902",
                        "content": "are you in GH ?"
                    },
                    {
                        "username": "liudger",
                        "content": "0 + 0 = 0 with carry 0? shouldn\\'t that be 1 then? cuz 0 + 0 = 0 + 1 = 1?"
                    },
                    {
                        "username": "Yash2k04",
                        "content": "1+1+1=1 with carry 1\\n**(Imp: 1+1 gives 0 with carry 1 and again we add 1 in 0 gives you 1\\nThis is case when both number are 1 and have carry 1 on it.)**\\nSo Remember,\\n1+1+1=1 with carry 1"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "[@Sinan6942069](/Sinan6942069)  Fact"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Sinan6942069",
                        "content": "I mean everyone who learned a bit of binary knows how it works, my main problem is getting that algorithm to code"
                    },
                    {
                        "username": "rinkub",
                        "content": "awesome"
                    },
                    {
                        "username": "sugarteddy",
                        "content": "easy for two days, leetcode think we need to get a life for valentines ig"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "[@kanishk--](/kanishk--)   can relate to you buddy\\n"
                    },
                    {
                        "username": "kanishk--",
                        "content": "Sadly, people like me don\\'t have one."
                    },
                    {
                        "username": "sepac",
                        "content": "If you are trying to convert the input strings into decimals, add them, and convert the number into a string, you're going to exceed a 64-bit integer. Therefore, think of a different approach."
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "i also did same thing vro"
                    },
                    {
                        "username": "TwilightTraveler",
                        "content": "Did this in python and got top 99.5% in time."
                    },
                    {
                        "username": "JordiBustos",
                        "content": "In JavaScript works with big int :p"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "I was almost done with that approach but thanks :("
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "does anyone else get a runtime error at the 194th test case?\\n  `java.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 668, java.base/java.lang.Integer.parseInt\\n  at line 3, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main`"
                    },
                    {
                        "username": "cmhandan",
                        "content": "yep i did get that error\\n"
                    },
                    {
                        "username": "prathyushadagumati",
                        "content": "you can resolve this error by importing BigInteger"
                    },
                    {
                        "username": "mayank_1515",
                        "content": "195th bro... \\nbut if you count from 0 then alright..."
                    },
                    {
                        "username": "Upsite",
                        "content": "Same brothern same mann!! I also learned about using the shifting xor and method too to solve this,"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Yep Bro."
                    },
                    {
                        "username": "Pathak9696",
                        "content": "yup\\n"
                    },
                    {
                        "username": "RuslanZinovyev",
                        "content": "Apparently Leetcode wants you to provide your own algorithm to calculate the binaries without reusing embedded Integer or Long methods. "
                    },
                    {
                        "username": "yabdelaziz123",
                        "content": "How there is a test case with input \"10100000100100110110010000010101111011011001101110111111111101000000101111001110\" and there is a constraint with a max length of 10^4?!!!!!"
                    },
                    {
                        "username": "spannm",
                        "content": "String length!"
                    },
                    {
                        "username": "cthulhuden",
                        "content": "[@rushabhvg](/rushabhvg) between 0 and 2^(10^4)-1, actually"
                    },
                    {
                        "username": "rushabhvg",
                        "content": "10^4 constraint means there will 10^4 binary numbers (0 or 1), not that binary number will be 10^4. It can be anything between 0 and 2^(10^5)-1"
                    },
                    {
                        "username": "varshvilas",
                        "content": "return str(bin(int(a,2)+int(b,2)))[2:]\\n"
                    },
                    {
                        "username": "_sarthakmisal",
                        "content": "Tell me if it would work "
                    },
                    {
                        "username": "paulLyu",
                        "content": "The queation really says length of a and b is kinda short. So I used integers sum up but got overflow when a and b length is pretty long. So I think question should revise a little bit. And I have to acknowledge it is not good practice to use interger sum in string problem"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 10.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-binary/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Bit-by-Bit Computation\n\n  \n**Approach 2:** Bit Manipulation\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "zenfred",
                        "content": "This problem is made Daily Coding Challenge again on Valentine\\'s Day 2023. Good omen? (1+1=10)"
                    },
                    {
                        "username": "Jeetaksh",
                        "content": "https://leetcode.com/problems/add-binary/solutions/3063782/c-easily-explained/?orderBy=most_votes"
                    },
                    {
                        "username": "jlyric2015",
                        "content": "What's with the malloc requirement being missing form this question?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "machinelearning.lsc",
                        "content": "return bin(int(a,2)+int(b,2))[2:]"
                    }
                ]
            },
            {
                "id": 1800587,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1910197,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1800376,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1800528,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1800683,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1574044,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1575034,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 2016873,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1950604,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1924374,
                "content": [
                    {
                        "username": "JiayingGao",
                        "content": "Bless every leetcoder to become romantic and wisdom!"
                    },
                    {
                        "username": "imran26_96",
                        "content": "In starting I thought in just few minute I solve it but few to far minute \\nstill I m struggling now :("
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Enjoy EASY marked questions, as long they last"
                    },
                    {
                        "username": "theRadFad",
                        "content": "The string lengths can be up to 10^4. That number of bits cannot be contained in a variable in any computer alive today, so you\\'ll have to work with the numbers in their string format. Without the handy \\'+\\' operator, you might have to go back to elementary school"
                    },
                    {
                        "username": "ramonivandy21",
                        "content": "me rn struggle in this case "
                    },
                    {
                        "username": "va14___",
                        "content": "How do leetcode consider the difficulty of the question ?\\nIs it done manually or some automatic method ? "
                    },
                    {
                        "username": "masterpratikyadav",
                        "content": "return(bin(int(str(a),2)+int(str(b),2))[2:])"
                    },
                    {
                        "username": "Menaka17",
                        "content": "bin_sum=int(a,2)+int(b,2)\\nbin_sum=bin(bin_sum)\\nreturn (bin_sum [2:])\\n"
                    },
                    {
                        "username": "SahilShukla26031998",
                        "content": "you don\\'t have to do it using the internal functions of Python. Leetcode checks your logical capability to think of a logic on your own and change that logic into code with basic functions/options available in all programming languages"
                    },
                    {
                        "username": "ishika_jaiswal",
                        "content": "dont think this is particularly easy"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "I lost kind of 30 minutes on this \"easy\" problem, yes I'm a programmer of four months, and I don't know any patterns and techniques for solving LeetCode problems, so I solve the problems on my own. \nHowever, I truely hope that there are programmers that will solve this problem \"easily\" like in <5 minutes for the first time."
                    },
                    {
                        "username": "natitati",
                        "content": "Quite fun to do in C"
                    }
                ]
            },
            {
                "id": 1847074,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1801289,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1801215,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1800935,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1800086,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1800019,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1573637,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1572055,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 1576277,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 2075604,
                "content": [
                    {
                        "username": "gupta_arpita",
                        "content": "Can someone figure out what is wrong here...debug logs are attached : \\n`#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main() {\\n    string a = \"1010\";\\n    string b = \"1011\";\\n         int sizeOfA = a.size();\\n        int sizeOfB = b.size();\\n        string sum = \"\";\\n        int carry = 0;\\n        int smaller = sizeOfA <= sizeOfB ? sizeOfA : sizeOfB;\\n        for (int i = smaller-1; i>=0; i--)\\n        {\\n            cout << \"\\\\na[i] : \" << a[i] << \"\\\\n b[i] : \" << b[i] ;\\n            if(a[i] ==0 && b[i] ==0)\\n            {\\n                if (carry ==1 )\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 0;\\n                    cout <<\"\\\\n 1.  sum : \" << sum;    \\n                    \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    cout <<\"\\\\n 2.  sum : \" << sum; \\n                }\\n            }\\n            else if ((a[i] ==0 && b[i] ==1) || (a[i] ==1 && b[i] ==0))\\n            {\\n                if (carry ==1)\\n                {\\n                    sum = \"0\"+sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 3.  sum : \" << sum; \\n                }\\n                else{\\n                    sum = \"1\" + sum;\\n                    cout <<\"\\\\n 4.  sum : \" << sum; \\n                }\\n            }\\n            else \\n            {\\n                if (carry == 1)\\n                {\\n                    sum = \"1\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 5.  sum : \" << sum; \\n                }\\n                else\\n                {\\n                    sum = \"0\" + sum;\\n                    carry = 1;\\n                    cout <<\"\\\\n 6.  sum : \" << sum; \\n                }\\n                  \\n            }              \\n\\n        }\\n        if (smaller == sizeOfA)\\n        {\\n            for (int i=sizeOfB-smaller-1;i>=0;i--)\\n            {\\n                if(b[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 7.  sum : \" << sum; \\n                    }\\n                    else \\n                    {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 8.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 9.  sum : \" << sum; \\n                    }\\n                    else{ \\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 10.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n        else \\n        {\\n            for (int i=sizeOfA-smaller-1;i>=0;i--)\\n            {\\n                if(a[i] ==0)\\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"1\"+sum;\\n                        carry = 0;\\n                        cout <<\"\\\\n 11.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"0\"+sum;\\n                        cout <<\"\\\\n 12.  sum : \" << sum; \\n                    }\\n                }\\n                else \\n                {\\n                    if(carry ==1)\\n                    {\\n                        sum = \"0\"+sum;\\n                        carry = 1;\\n                        cout <<\"\\\\n 13.  sum : \" << sum; \\n                    }\\n                    else {\\n                        sum = \"1\"+sum;\\n                        cout <<\"\\\\n 14.  sum : \" << sum; \\n                    }\\n                }\\n                    \\n            }\\n        }\\n\\n\\n        if (carry ==1)\\n        {\\n            sum = \"1\" + sum;\\n            cout <<\"\\\\n 15.  sum : \" << sum; \\n        }\\n\\n        cout <<\"\\\\nfinal sum : \" << sum;    \\n\\treturn 0;\\n}\\n\\n\\n\\n\\nOP : \\n\\n\\na[i] : 0\\n b[i] : 1\\n 6.  sum : 0\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 10\\na[i] : 0\\n b[i] : 0\\n 5.  sum : 110\\na[i] : 1\\n b[i] : 1\\n 5.  sum : 1110\\n 15.  sum : 11110\\nfinal sum : 11110"
                    },
                    {
                        "username": "shuvo_922",
                        "content": "Can we solve this question by using following approach???\n\n \n\n`public class Solution {\n\n    public String addBinary(String a, String b) {\n\n        int decimal_a=Integer.parseInt(a,2);\n\n        int decimal_b=Integer.parseInt(b,2);\n\n        int add=decimal_a + decimal_b;\n\n        return Integer.toBinaryString(add);\n\n    }\n\n}`\n\n"
                    },
                    {
                        "username": "Upsite",
                        "content": "That\\'s one way to do it I did it using a shifting method but, it seems to be too big\\n"
                    },
                    {
                        "username": "manojkr6637",
                        "content": "Not possible for Big string greater than integer data type"
                    },
                    {
                        "username": "wesamnabeel99",
                        "content": "hint: try to use Boolean algebra to manipulate the bits, it\\'ll be easy."
                    },
                    {
                        "username": "theaksaa",
                        "content": "perfect gift for valentine\\'s day, thank you leetcode <3"
                    },
                    {
                        "username": "luanct",
                        "content": "2 easy problems consecutive. Not surprised at all if they set 3 hard problems consecutive in the next 3 days lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Two easies in a row? Something is not right here..."
                    },
                    {
                        "username": "EmreSF",
                        "content": "![image](https://assets.leetcode.com/users/emresf/image_1587246948.png)\\n\\n"
                    },
                    {
                        "username": "ghayrat_samiev",
                        "content": "people come here to check the discussion, why would you share your solution here"
                    },
                    {
                        "username": "johnopj",
                        "content": "I get runtime error in your first line. "
                    },
                    {
                        "username": "jchatterjee",
                        "content": "That is incredible!"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/add-binary/solutions/2218807/eat-sleep-code-repeat-0-n-optimized/"
                    },
                    {
                        "username": "Liu_Guangyang",
                        "content": "return bin(int(a,2)+int(b,2))[2:]    "
                    },
                    {
                        "username": "diegohernandez6661",
                        "content": "\"\"\"\\nreturn str(bin(int(a,2)+int(b,2))[2:])\\n\"\"\""
                    },
                    {
                        "username": "BhavaniMedchal",
                        "content": "explain this problem"
                    }
                ]
            },
            {
                "id": 2074249,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2068623,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2067698,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2065679,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2063022,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2030029,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 2026211,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 1998802,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 1994963,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 1988403,
                "content": [
                    {
                        "username": "kelvin2602",
                        "content": "anyone here get Time limit Exceeded\nI try not to use Integer. toBinaryString()\nSo I declare the algorithm by my own way but finnaly I receive Time limit exceeded ?\nor is it because the time complexity is too hight ?\n"
                    },
                    {
                        "username": "Joseph_TL",
                        "content": "Is it just me or are the numbers reversed?"
                    },
                    {
                        "username": "Engg_Ayush",
                        "content": "While solving this question it took some time ,\\nbut one thing i want to suggest that don\\'t convert it to int and just try to solve by making logics ,like if (1+1 is there than carry will be one and in o/p string you have to insert 0),\\n\\nhappy coding."
                    },
                    {
                        "username": "Ashnu_B",
                        "content": "This should not be an easy question because of tricky implementation .\\nAtleast should be marked as medium.\\n"
                    },
                    {
                        "username": "Rollinghappy",
                        "content": "i got the answer in C. but the result is in \"char finalArray[ ]\" and just simply \"return finalArray\" is telling me the output is null. when i print the array the answer is correct. what should i do in the return statement?"
                    },
                    {
                        "username": "coveyjorjet",
                        "content": "make sure youre finalArray is mallocated\n```\n\n    int lenA = strlen(a);\n    int lenB = strlen(b);\n    int maxLength = lenA > lenB ? lenA : lenB;\n    char* finalArray = (char*)malloc((maxLength + 2) * sizeof(char));\n    //make sure you add +2 for potential carry and null terminator\n\n\n```\n\nafter your preferred logic make sure that finalChar is null terminated\nresult[whateveryourlastindexis] = '\\0';"
                    },
                    {
                        "username": "shaw-code",
                        "content": "Whoever categorized this question to \\'Easy\\' must be a genius that he/she found this question a walk in the park. This question should be placed at \\'Medium\\'. Idk if we can somehow change the category of a question on this platform."
                    },
                    {
                        "username": "500kbaby",
                        "content": "seems to work on the any other c++ ide but fails in leetcode. it fails with values when a=1 and b=111. may not be the best solution out there but it works. i think there is a problem with leetcode backend \\n `      \\n        reverse(a.begin(), a.end());\\n        reverse(b.begin(), b.end());\\n\\n        while (a[at] != \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            if(a[at]==b[at]){\\n                if (carry==0){\\n                    ans += \\'0\\';\\n                    if(a[at]==\\'1\\') carry++;  \\n                }else{\\n                    if (a[at]==\\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else{\\n                        ans += \\'1\\';\\n                    }\\n                }\\n            }else {\\n                if (carry==0)\\n                    ans += \\'1\\';\\n                else{\\n                    ans += \\'0\\'; \\n                }\\n            }\\n            at++;\\n        }\\n        if (a[at] == \\'\\\\0\\' && b[at] != \\'\\\\0\\'){\\n            while (b[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += b[at];\\n                else {\\n                    if (b[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (b[at] == \\'\\\\0\\' && a[at] != \\'\\\\0\\'){\\n            while (a[at] != \\'\\\\0\\'){\\n                if (carry == 0)\\n                    ans += a[at];\\n                else {\\n                    if (a[at] == \\'0\\'){\\n                        ans += \\'1\\';\\n                        carry--;\\n                    }else\\n                        ans += \\'0\\';\\n                }\\n                at++;\\n            }\\n        }\\n        if (carry != 0){\\n            ans += \\'1\\';\\n        }\\n        reverse(ans.begin(), ans.end());`"
                    },
                    {
                        "username": "namjoshisp",
                        "content": "Just implement Full adder circuit"
                    },
                    {
                        "username": "MitchMountainCoding",
                        "content": "The challenge offers an opportunity to understand and implement binary addition, which is a fundamental concept in computer science. I love binary addition."
                    },
                    {
                        "username": "mafishere",
                        "content": "Why is this approach not working?\nIn this approach, I first calculate the decimal sum from the two given strings.\nThen I convert the decimal sum to binary.\n\nIt is failing on this test case:\n```\na =\n\"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\"\nb =\n\"110101001011101110001111100110001010100001101011101010000011011011001011101111001100000011011110011\"\n\nOutput\n\"11101000101011001000011011000001100011110011010010011000000000\"\nExpected\n\"110111101100010011000101110110100000011101000101011001000011011000001100011110011010010011000000000\"\n```\n\n```cpp\nstring addBinary(string a, string b)\n    {\nstring addBinary(string a, string b)\n{\n    unsigned long long int sum = 0, weight = 1;\n\n    for (int i = a.length() - 1; i >= 0; i--)\n    {\n        if (a[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    weight = 1;\n    for (int i = b.length() - 1; i >= 0; i--)\n    {\n        if (b[i] == '1')\n            sum += weight;\n        weight *= 2;\n    }\n\n    if (sum == 0)\n        return \"0\";\n\n    string c = \"\";\n    while (sum > 0)\n    {\n        int x = sum % 2;\n        sum = sum / 2;\n\n        if (x == 1)\n            c += '1';\n        else\n            c += '0';\n    }\n\n    // reversing\n    for (int i = 0; i < c.length() / 2; i++)\n    {\n        char temp = c[i];\n        c[i] = c[c.length() - 1 - i];\n        c[c.length() - 1 - i] = temp;\n    }\n\n    return c;\n}\n```"
                    },
                    {
                        "username": "ahamedibrahim2002",
                        "content": "same here! , did you find why it\\'s failing? "
                    }
                ]
            },
            {
                "id": 1968682,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1950846,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1913583,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1912528,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1900010,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1897924,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1870908,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1847430,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1840271,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1827585,
                "content": [
                    {
                        "username": "wilderfield",
                        "content": "Is it possible to do divide and conquer? Or no, because the nature of carry propagation means you have to start from the LSB and go serially?"
                    },
                    {
                        "username": "eduard92",
                        "content": "I hate this problem "
                    },
                    {
                        "username": "nathan-riggs",
                        "content": "I\\'m not sure someone who is mostly comfortable doing \"easy\" problems will have an easy time figuring out binary addition. It\\'s easy in itself, but I would dread something like this if I were just learning. "
                    },
                    {
                        "username": "erShivuu",
                        "content": "ava.lang.NumberFormatException: For input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\" under radix 2\\n  at line 67, java.base/java.lang.NumberFormatException.forInputString\\n  at line 711, java.base/java.lang.Long.parseLong\\n  at line 4, Solution.addBinary\\n  at line 54, __DriverSolution__.__helper__\\n  at line 87, __Driver__.main\\nI am getting this error"
                    },
                    {
                        "username": "ankush920",
                        "content": "Must Watch || Power of Ternary operator || small || simple || 0(N) || easy code :)\\nankush920\\n0\\nin a few seconds\\nC++\\nIntuition\\nbits carry digit carry\\n0 + 0 + 0 = 0 0\\n0 + 0 + 1 = 1 0\\n1 + 0 + 0 = 1 0\\n0 + 1 + 0 = 1 0\\n1 + 0 + 1 = 0 1\\n0 + 1 + 1 = 0 1\\n1 + 1 + 0 = 0 0\\n1 + 1 + 1 = 1 1\\n\\nApproach\\njust implemented the upper table and store result in result string :)\\n\\nComplexity\\nTime complexity:\\n0(N) --> ( max (length of(a,b)))\\n\\nSpace complexity:\\n0(1)\\n\\nCode\\n //upvote it vro :)\\n class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n    string res = \"\";\\n    \\n    int i = a.size()-1 , j = b.size()-1 ,carry = 0 ;\\n    \\n\\n   while( i>=0 && j>= 0 )\\n   {\\n      int val1 = a[i] -\\'0\\';\\n      int val2 = b[j] -\\'0\\';\\n      int ans = val1 + val2 + carry;     \\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;     \\n      i--; j--;\\n   }\\n\\n    while( i>=0)\\n    {\\n          int val1 = a[i] -\\'0\\';\\n           int ans = val1 +  carry;\\n              ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;  \\n     \\n           i--; \\n            }\\n   \\n   while( j>=0)\\n   {\\n              int val2 = b[j] - \\'0\\';\\n             int ans = val2 +  carry;\\n       ans%2==0  ? res =\"0\"+ res : res = \"1\"+ res;\\n        carry = ans>1  ? 1 : 0;   \\n              j--;\\n   }\\n\\n   if(carry) { res = \"1\" + res ; }\\n\\nreturn res ;\\n    }\\n};"
                    },
                    {
                        "username": "gabbar0101",
                        "content": " //I really think that this is correct code but idk somehow due to \\n runtime error or\\n        other reason it is not working\\nPLEASE HELP \\n `your inline code...\\nint l1 = a.length() - 1;\\n        int l2 = b.length() - 1;\\n        int sum = 0, carry = 0;\\n        string str;\\n\\n        while(l1 >= 0 || l2 >= 0)\\n        {\\n            sum = (a[l1] - \\'0\\') + (b[l2] - \\'0\\') + carry;\\n\\n            str += to_string(sum % 2);\\n            carry = (sum / 2);\\n\\n            l1--;\\n            l2--;\\n        }\\n\\n        while(l1 >= 0)\\n        {\\n            str += to_string(a[l1]);\\n            l1--;\\n        }\\n\\n        while(l2 >= 0)\\n        {\\n            str += to_string(b[l2]);\\n            l2--;\\n        }\\n\\n        if(carry) str += to_string(carry);\\n\\n        reverse(str.begin(), str.end());\\n        \\n        return str;\\nyour inline code...`"
                    },
                    {
                        "username": "Lokeshram12",
                        "content": "\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n    long  number0 = Long.parseLong(a, 2);\\n    long  number1 = Long.parseLong(b, 2);\\n\\n    long  sum = number0 + number1;\\n    int value=(int)sum;\\n\\n    return Integer.toBinaryString(value); //returns the answer as a binary value;\\n//sum of the two binary numbers will be small enough to fit within an integer (i.e., a 32-bit signed integer). If the sum is too large, it will overflow and the result will be incorrect.\\n    }\\n}\\n\\n\\n\\n//Alternative solution is\\n\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger num1 = new BigInteger(a, 2);\\n        BigInteger num2 = new BigInteger(b, 2);\\n\\n        BigInteger sum = num1.add(num2);\\n\\n        return sum.toString(2);// works for all cases\\n    }\\n}\\n\\n"
                    },
                    {
                        "username": "No_one_can_stop_me",
                        "content": "Hi guys how to handle this : input string: \"10100000100100110110010000010101111011011001101110111111111101000000101111001110001111100001101\""
                    },
                    {
                        "username": "lucianoinso",
                        "content": "Wow, I busted my brain implement it bitwise with XOR and AND and most of the solutions convert the digits to decimal and then use modulus or division by 2"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "## How to parse large number in javascript?\\n\\n### Code\\n\\n```javascript\\nvar addBinary = function (a, b) {\\n\\treturn (parseInt(a, 2) + parseInt(b, 2)).toString(2);\\n};\\n```\\nMy solution works only small integers howvever it does not work with big integers? Any recommendation?"
                    }
                ]
            },
            {
                "id": 1814336,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1808400,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1802479,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1802298,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1801941,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1801149,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1800911,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1800889,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1800873,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1800598,
                "content": [
                    {
                        "username": "ShivanshuSamdhiya",
                        "content": "how to sum two binary number in a string"
                    },
                    {
                        "username": "aishwaryamoghekar",
                        "content": "what is missing??\\n\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string res;\\n        int i=a.size()-1, j= b.size()-1;\\n        int sum, carry = 0;\\n        while(i >= 0 || j >= 0){\\n            sum=carry;\\n            if(i>0) sum+=a[i]-\\'0\\';\\n            if(j>0) sum+=b[j]-\\'0\\';\\n            res += to_string(sum % 2);\\n            carry = sum/2 ;\\n            i--,j--;\\n        }\\n        if(carry != 0) res += \\'1\\';\\n        reverse(res.begin(),res.end());\\n        return res;\\n\\n    }\\n};"
                    },
                    {
                        "username": "raulgarcia",
                        "content": "What are the possible uses of this in real life coding problems? I mean... It's good to know more but, is this somehow going to be useful someday?"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 989"
                    },
                    {
                        "username": "optionngoma",
                        "content": "Is using the wrapper class advisable?"
                    },
                    {
                        "username": "ygdev",
                        "content": "this one broke me"
                    },
                    {
                        "username": "jotarooraora94",
                        "content": "i am trying to use a for loop that checks the string backwards with if( a[i] == \\'1\\' && b[i] == \\'1\\' && carry == \\'0\\') and puts  sum[i] = \\'1\\' and carry = 1 etc. depending on binary addition concept.\\n\\ni realloc a to b or b to a depending on whats longer, put a 0 on the end of the shorter string, malloc sum with +1 space for extra carry and put at the start of sum a 0.\\n\\nat the and i used if() again for checking if carry is still 1 at the end so it can put a 1 on the start of sum or leave the 0 and return sum. \\n\\nbut all i get at the end is (null) as output.\\ni would post my code but i guess solutions or even false solutions shouldnt be posted in discussion tab."
                    },
                    {
                        "username": "Deepak_8811",
                        "content": "class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int aLen=a.size();\\n        int bLen=b.size();\\n        int i=0;\\n        int carry=0;\\n        string ans=\"\";\\n        while(i<aLen||i<bLen||carry!=0){\\n            int x=0;\\n            if(i<aLen && a[aLen-i-1]==\\'1\\'){\\n                x=1;\\n            }\\n            int y=0;\\n            if(i<bLen && b[bLen-i-1]==\\'1\\'){\\n                y=1;\\n            }\\n            ans=to_string((x+y+carry)%2)+ans;\\n            carry=(x+y+carry)/2;\\n            i++;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "sakega",
                        "content": "Valentines Day gift for the coding lovers :) "
                    },
                    {
                        "username": "VladQweqw",
                        "content": "can i be your 1 and you be my 0 ?"
                    }
                ]
            },
            {
                "id": 1800576,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800562,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800529,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800515,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800372,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800347,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800324,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800321,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800298,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800280,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "As follow up: don't convert the strings to numbers."
                    },
                    {
                        "username": "Lokii1811",
                        "content": "my code is 99 lines :),and the question is marked easy\\nclass Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        string ans = \"\";\\n        int p = a.length()-1;\\n        int q = b.length()-1;\\n        int rem = 0;\\n        while(p>=0 and q>=0){\\n            if(a[p] == \\'0\\' and b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else if(a[p] == \\'1\\' and b[q] == \\'1\\'){\\n                if(rem == 0){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                    rem = 1;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 0){\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                    q--;\\n                }\\n            }\\n        }\\n        while(p>=0){\\n            if(a[p] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    p--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    p--;\\n                }\\n            }\\n        }\\n        while(q>=0){\\n            if(b[q] == \\'0\\'){\\n                if(rem == 1){\\n                    ans = \\'1\\'+ans;\\n                    rem = 0;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n            }\\n            else{\\n                if(rem == 1){\\n                    ans = \\'0\\'+ans;\\n                    q--;\\n                }\\n                else{\\n                    ans = \\'1\\'+ans;\\n                    q--;\\n                }\\n            }\\n        }\\n        if(rem == 1){\\n            ans = \\'1\\'+ans;\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "it\\'s a little bit similar to merge sort, same idea."
                    },
                    {
                        "username": "Day_Tripper",
                        "content": "```\\nclass Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        def BinToNum(s):\\n            res = 0\\n            t = s[::-1]\\n            for i in range(len(s)):\\n                res += (2**i) * int(t[i])\\n            return res\\n\\n        def NumToBin(val): \\n            return bin(val)\\n\\n        a1 , b1 = BinToNum(a) , BinToNum(b)\\n        return NumToBin(a1+b1)[2:]\\n\\n\\n   ```"
                    },
                    {
                        "username": "sh171",
                        "content": "class Solution {\\n    public String addBinary(String a, String b) {\\n        return Integer.toBinaryString(Integer.parseInt(a,2)+Integer.parseInt(b,2));\\n    }\\n}\\nWhy is this not working??"
                    },
                    {
                        "username": "utkarsh_30",
                        "content": "how do you convert a string to a int?"
                    },
                    {
                        "username": "jasmeet_2001",
                        "content": "use stoi function if you want to"
                    },
                    {
                        "username": "cherkezovr",
                        "content": "You don\\'t need to convert to int. Just implement summation digit-by-digit"
                    },
                    {
                        "username": "yomaChoma",
                        "content": "This question made me feel extremely stupid"
                    },
                    {
                        "username": "KarthikPrabhu2541",
                        "content": "**greedy method**\nI was able to find approaches to this problem through simple binary addition\njust wanted to ask someone if this problem can be solved using greedy method by thinking of the different positions in the number as denominations regardless of the fact that it seems to be a round about approach compared to simple binary addition.  "
                    },
                    {
                        "username": "rohitramteke",
                        "content": "This is an interesting problem.....\\n"
                    },
                    {
                        "username": "anuragtk2002",
                        "content": "please find error in my code JAVA\\n\\n\\n      int decimal=Integer.parseInt(a,2); \\n         int decimal2=Integer.parseInt(b,2);\\n        int sum=decimal+decimal2;\\n        return Integer.toBinaryString(sum); "
                    },
                    {
                        "username": "yash_raileet",
                        "content": "import java.math.BigInteger;\\nclass Solution {\\n    public String addBinary(String a, String b) {\\n        BigInteger dec1 = new BigInteger(a,2);\\n        BigInteger dec2 = new BigInteger(b,2);\\n        BigInteger add = dec1.add(dec2);\\n        return add.toString(2);\\n    }\\n}\\n\\nuse BigInteger class. :)"
                    },
                    {
                        "username": "yash_raileet",
                        "content": "it exceeds 64 bit integer \\n"
                    },
                    {
                        "username": "aryamangodara",
                        "content": "leetcode going easy on us"
                    }
                ]
            },
            {
                "id": 1800102,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1800055,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1800027,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1800022,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1800021,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1800018,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1785662,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1775331,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1740096,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            },
            {
                "id": 1739448,
                "content": [
                    {
                        "username": "jems1123",
                        "content": "I really don\\'t enjoy such a easy question, it this week for easy one??\\n"
                    },
                    {
                        "username": "AlecLC",
                        "content": "# <span style='color:green'>Hint</span>\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/xor4.png)\n![](https://leetcode.com/problems/add-binary/solutions/414426/Figures/67/carry2.png)"
                    },
                    {
                        "username": "MasamuneDate",
                        "content": "Yes another easy morning. you can use basic math - binary and carry for approach method in this problem"
                    },
                    {
                        "username": "chees-e",
                        "content": "Leetcode do be giving us a nice little break after series of hard and hard in diguise dailies..."
                    },
                    {
                        "username": "UchihaKim",
                        "content": "if you don't know how to manipulate strings to add the two numbers , try to convert each one to integer by the power of 2(10010 =1*2^4 +0*2^3 +0*2^2 +1*2^1 + 0*2^0) then add them then convert to binary by dividing over 2 (35/2=17 r=1, 17/2=8 r=1, 8/2=4 r=0,4/2=2 r=0, 2/2=1 r=0,1/2=0 r=1   .... 100011)"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "this will go out of range of integer or long(runtime error)"
                    },
                    {
                        "username": "scor32k",
                        "content": "again nice one lc"
                    },
                    {
                        "username": "brightkut",
                        "content": " ````\\nimport (\\n    \"math\"\\n    \"strconv\"\\n)\\n\\nfunc addBinary(a string, b string) string {\\n    if a == \"0\" && b == \"0\"{\\n        return \"0\"\\n    }\\n\\n    total:= convertBinaryToInt(a)+ convertBinaryToInt(b)\\n\\n    \\n    return convertIntToBinary(total)\\n}\\n\\nfunc convertBinaryToInt(a string) int {\\n\\tvar c int = 0\\n\\tvar res int\\n\\n\\tfor i := len(a) - 1; 0 <= i; i-- {\\n\\t\\taIntValue, _ := strconv.Atoi(string(a[i]))\\n\\t\\tres += int(aIntValue) * int(math.Pow(float64(2), float64(c)))\\n\\t\\tc++\\n\\t}\\n\\treturn res\\n}\\n\\nfunc convertIntToBinary(n int) string {\\n\\tvar res string\\n\\tdivide := n\\n\\n\\tfor divide != 1 {\\n\\t\\tres = strconv.Itoa(divide%2) + res\\n\\t\\tdivide = divide / 2\\n\\t}\\n\\n\\treturn \"1\" + res\\n}\\n\\n````\\n\\n\\nThis is my code and I suspected why this code has time limit exceed. "
                    },
                    {
                        "username": "krishnadev7",
                        "content": "`class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        int alen = a.length();\\n        int blen = b.length();\\n        int i = 0, carry = 0;\\n        string ans = \"\";\\n        while( i<alen || i<blen || carry!=\\'0\\'){\\n            int x = 0;\\n            if(i<alen && a[alen-i-1] == \\'1\\'){\\n                x = 1;\\n            }\\n            int y = 0;\\n            if(i<blen && b[blen-i-1] == \\'1\\'){\\n                y = 1;\\n            }\\n            ans = to_string((x+y+carry)%2) + ans;\\n            carry = (x+y+carry)/2;\\n            i+=1;\\n        }\\n        return ans;\\n    }\\n};`\\nwhy  i getting memory limit exceeded"
                    },
                    {
                        "username": "ec1912",
                        "content": " class Solution {\npublic:\n    string addBinary(string a, string b) {\n        string ans = \"\"; \n        int len1 = a.size() , len2 = b.size() , i,j, ds=0;\n        i = len1 - 1;\n        j = len2 - 1;\n        while(i>=0 || j>=0 || ds==1)\n        {\n            ds = ds + ((i >= 0) ? a[i] - '0' : 0);\n            ds = ds + ((j >= 0) ? b[j] - '0' : 0);\n            ans = char(ds % 2 + '0') + ans;\n            ds = ds/2;\n            i--;\n            j--;\n        }\n        return ans;\n    }\n};\n\n\nHere is the solution of such code , please let me update if there is any other compact code with heigh beat rate. "
                    },
                    {
                        "username": "13zidane",
                        "content": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nchar * addBinary(char * a, char * b)\n{\n    int binarybits[]={128,64,32,16,8,4,2,1};\n    int sum = 0;\n    int acount = 0;\n    for (int i=strlen(a)-1;i>=0;i--)\n    {\n        if (a[i] == '1')\n        {\n            sum += pow(2,acount);\n            acount++;\n        }\n        else\n        {\n            acount++;\n        }\n        \n    }\n    int bcount = 0;\n    for (int j=strlen(b)-1;j>=0;j--)\n    {\n        if (b[j] == '1')\n        {\n            sum += pow(2,bcount);\n            bcount++;\n        }\n        else\n        {\n            bcount++;\n        }\n        \n    }\n    int start = 0;\n    for (int k=0;k<8;k++)\n    {\n        if (binarybits[k]<=sum)\n        {\n            start = k;\n            break;\n        }\n    }\n    char *ans = malloc(sizeof(char)*(3));\n    int count = 0;\n    if (sum == 0)\n    {\n        ans[0] = '0';\n        return ans;\n    }\n    for (int L=start;L<8;L++)\n    {\n        if (binarybits[L] <= sum)\n        {\n            sum -= binarybits[L];\n            ans[count++] = '1';\n\n        }\n        else\n        {\n            ans[count++] = '0';\n        }\n    }\n    return ans;\n}\n\nWhy does this result in heap buffer overflow even though it works on the compiler?\n"
                    }
                ]
            }
        ]
    }
]