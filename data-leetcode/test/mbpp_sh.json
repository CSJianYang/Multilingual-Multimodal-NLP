[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nnext_smallest_palindrome() {\n    var x = 1;\n    var y = 1;\n    while (x < y) {\n        if (x % 2 == y % 2) {\n            x++;\n        } else {\n            y++;\n        }\n    }\n    return x;\n}\n\n",
        "test_list": [
            "candidate() {",
            "next_smallest_palindrome \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"99\") = \"101\" ]]",
            "[[ $(candidate \"1221\") = \"1331\" ]]",
            "[[ $(candidate \"120\") = \"121\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nkth_element() {\n  let k = 1;\n  let i = 0;\n  let j = 0;\n  let arr = [];\n  while (i < arr.length) {\n    if (arr[i] == k) {\n      j = i;\n      break;\n    }\n    i++;\n  }\n  if (j == 0) {\n    return 0;\n  }\n  return j;\n}\n\n",
        "test_list": [
            "candidate() {",
            "kth_element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12 3 5 7 19\" \"2\") = \"3\" ]]",
            "[[ $(candidate \"17 24 8 23\" \"3\") = \"8\" ]]",
            "[[ $(candidate \"16 21 25 36 4\" \"4\") = \"36\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nsnake_to_camel() {\n  var s = \"\";\n  for (var i = 0; i < 3; i++) {\n    s += \"SNAKE_\" + snake_to_camel_case(s);\n  }\n  return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "snake_to_camel \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python_program\") = \"PythonProgram\" ]]",
            "[[ $(candidate \"python_language\") = \"PythonLanguage\" ]]",
            "[[ $(candidate \"programming_language\") = \"ProgrammingLanguage\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\neulerian_num() {\n  var a = 1;\n  var b = 2;\n  var c = 3;\n  var d = 4;\n  var e = 5;\n  var f = 6;\n  var g = 7;\n  var h = 8;\n  var i = 9;\n  var j = 10;\n  var k = 11;\n  var l = 12;\n  var m = 13;\n  var n = 14;\n  var o = 15;\n  var p = 16;\n  var q = 17;\n  var r = 18;\n  var s = 19;\n  var t = 20;\n  var u = 21;\n  var v = 22;\n  var w = 23;\n  var x = 24;\n  var y = 25;\n  var z = 26;\n  var a = 27;\n  var b = 28;\n  var c = 29;\n  var d = 30;\n  var e = 31;\n  var f = 32;\n  var g = 33;\n  var h = 34;\n  var i = 35;\n  var j = 36;\n  var k = 37;\n  var l = 38;\n  var m = 39;\n  var n = 40;\n  var o = 41;\n  var p = 42;\n  var q = 43;\n  var r = 44;\n  var s = 45;\n  var t = 46;\n  var u = 47;\n  var v = 48;\n  var w = 49;\n  var x = 50;\n  var y = 51;\n  var z = 52;\n  var a = 53;\n  var b = 54;\n  var c = 55;\n  var d = 56;\n  var e = 57;\n  var f = 58;\n  var g = 59;\n  var h = 60;\n  var i = 61;\n  var j = 62;\n  var k = 63;\n  var l = 64;\n  var m = 65;\n  var n = 66;\n  var\n}\n\n",
        "test_list": [
            "candidate() {",
            "eulerian_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\" \"1\") = \"4\" ]]",
            "[[ $(candidate \"4\" \"1\") = \"11\" ]]",
            "[[ $(candidate \"5\" \"3\") = \"26\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a shthon function to count true booleans in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncount() {\n    var list = [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true\n}\n\n",
        "test_list": [
            "candidate() {",
            "count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"true false true\") = \"2\" ]]",
            "[[ $(candidate \"false false\") = \"0\" ]]",
            "[[ $(candidate \"true true true\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given list to the given lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_lists() {\n    var list = [];\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_lists \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6 7\" \"9 10\") = \"9 10 5 6 7\" ]]",
            "[[ $(candidate \"6 7 8\" \"10 11\") = \"10 11 6 7 8\" ]]",
            "[[ $(candidate \"7 8 9\" \"11 12\") = \"11 12 7 8 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three lists into a single sorted list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nmerge_sorted_list() {\n    var list1 = [];\n    var list2 = [];\n    var list3 = [];\n    var list = [];\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 3; i++) {\n        list1.push(i);\n        list2.push(i);\n        list3.push(i);\n    }\n    for (var i = 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "merge_sorted_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"25 24 15 4 5 29 110\" \"19 20 11 56 25 233 154\" \"24 26 54 48\") = \"4 5 11 15 19 20 24 24 25 25 26 29 48 54 56 110 154 233\" ]]",
            "[[ $(candidate \"1 3 5 6 8 9\" \"2 5 7 11\" \"1 4 7 8 12\") = \"1 1 2 3 4 5 5 6 7 7 8 8 9 11 12\" ]]",
            "[[ $(candidate \"18 14 10 9 8 7 9 3 2 4 1\" \"25 35 22 85 14 65 75 25 58\" \"12 74 9 50 61 41\") = \"1 2 3 4 7 8 9 9 9 10 12 14 14 18 22 25 25 35 41 50 58 61 65 74 75 85\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a shthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is an integer\nodd_Equivalent() {\n  var num = 0;\n  for (var i = 0; i < 2; i++) {\n    if (i % 2 == 0) {\n      num += 1;\n    }\n  }\n  return num;\n}\n\n",
        "test_list": [
            "candidate() {",
            "odd_Equivalent \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"011001\" \"6\") = \"3\" ]]",
            "[[ $(candidate \"11011\" \"5\") = \"4\" ]]",
            "[[ $(candidate \"1010\" \"4\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncheck_integer() {\n  if (is_integer(1)) {\n    return true;\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_integer \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python\") = \"false\" ]]",
            "[[ $(candidate \"1\") = \"true\" ]]",
            "[[ $(candidate \"12345\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given list of positive integers into a single integer.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ntuple_to_int() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var result = 0;\n    for (var i = 0; i < list.length; i++) {\n        result += list[i];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "tuple_to_int \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"123\" ]]",
            "[[ $(candidate \"4 5 6\") = \"456\" ]]",
            "[[ $(candidate \"5 6 7\") = \"567\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in a list of lists to floats.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nlist_to_float() {\n    var list = [];\n    for (var i = 0; i < list.length; i++) {\n        list[i] = list[i].split(' ');\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "list_to_float \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4\\n1 26.45\\n7.32 8\\n4 8\") = \"3.0 4.0\\n1.0 26.45\\n7.32 8.0\\n4.0 8.0\" ]]",
            "[[ $(candidate \"4 4\\n2 27\\n4.12 9\\n7 11\") = \"4.0 4.0\\n2.0 27.0\\n4.12 9.0\\n7.0 11.0\" ]]",
            "[[ $(candidate \"6 78\\n5 26.45\\n1.33 4\\n82 13\") = \"6.0 78.0\\n5.0 26.45\\n1.33 4.0\\n82.0 13.0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to a list of strings split on the space character.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nstring_to_list() {\n    var list = [];\n    for (var i = 0; i < string_to_list.length; i++) {\n        list.push(string_to_list[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "string_to_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python programming\") = \"python programming\" ]]",
            "[[ $(candidate \"lists tuples strings\") = \"lists tuples strings\" ]]",
            "[[ $(candidate \"write a program\") = \"write a program\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a shthon function to find the element that appears only once in a sorted array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsearch() {\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n    let x = [];\n    let y = [];\n    let z = [];\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n    let x = [];\n    let y = [];\n    let z = [];\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n    let x = [];\n    let y = [];\n    let z = [];\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "search \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 2 2 3\") = \"3\" ]]",
            "[[ $(candidate \"1 1 3 3 4 4 5 5 7 7 8\") = \"8\" ]]",
            "[[ $(candidate \"1 2 2 3 3 4 4\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a shthon function to remove first and last occurrence of a given character from the string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\nremove_Occ() {\n    var s = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == 'a' || s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'i' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] =='m' || s[i] == 'n' || s[i] == 'o' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] =='s' || s[i] == 't' || s[i] == 'u' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z' || s[i] == 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] == 'U' || s[i] == 'V' || s[\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_Occ \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"hello\" \"l\") = \"heo\" ]]",
            "[[ $(candidate \"abcda\" \"a\") = \"bcd\" ]]",
            "[[ $(candidate \"PHP\" \"P\") = \"H\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_product_tuple() {\n    var max_product = 0;\n    var max_product_list = [];\n    for (var i = 0; i < this.length; i++) {\n        var list = this[i];\n        for (var j = 0; j < list.length; j++) {\n            var product = list[j] * list[j];\n            if (product > max_product) {\n                max_product = product;\n                max_product_list = list;\n            }\n        }\n    }\n    return max_product_list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_product_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"36\" ]]",
            "[[ $(candidate \"10 20\\n15 2\\n5 10\") = \"200\" ]]",
            "[[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"484\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\namicable_numbers_sum() {\n    var sum = 0;\n    for (var i = 1; i <= 100; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "amicable_numbers_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"999\") = \"504\" ]]",
            "[[ $(candidate \"9999\") = \"31626\" ]]",
            "[[ $(candidate \"99\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfind_length() {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] === 0) {\n      count++;\n    } else {\n      if (count > max) {\n        max = count;\n      }\n      count = 0;\n    }\n  }\n  return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_length \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"11000010001\") = \"6\" ]]",
            "[[ $(candidate \"10111\") = \"1\" ]]",
            "[[ $(candidate \"11011101100101\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a shthon function to find the sum of common divisors of two given numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nsum() {\n  let sum = 0;\n  let i = 1;\n  while (i < 2 * i) {\n    sum += i;\n    i += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"15\") = \"6\" ]]",
            "[[ $(candidate \"100\" \"150\") = \"93\" ]]",
            "[[ $(candidate \"4\" \"6\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nmultiply_int() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n = 66;\n    var o = 67;\n    var p\n}\n\n",
        "test_list": [
            "candidate() {",
            "multiply_int \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"20\") = \"200\" ]]",
            "[[ $(candidate \"5\" \"10\") = \"50\" ]]",
            "[[ $(candidate \"4\" \"8\") = \"32\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given list of words.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is a string\nlong_words() {\n    var words = [];\n    for (var i = 0; i < this.length; i++) {\n        if (this[i] ==='') {\n            words.push(this);\n        }\n    }\n    return words;\n}\n\n",
        "test_list": [
            "candidate() {",
            "long_words \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\" \"python is a programming language\") = \"python programming language\" ]]",
            "[[ $(candidate \"2\" \"writing a program\") = \"writing program\" ]]",
            "[[ $(candidate \"5\" \"sorting list\") = \"sorting\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmagic_square_test() {\n  var matrix = [\n    [1, 2, 3, 4, 5, 6, 7, 8, 9],\n    [10, 11, 12, 13, 14, 15, 16, 17, 18],\n    [19, 20, 21, 22, 23, 24, 25, 26, 27],\n    [28, 29, 30, 31, 32, 33, 34, 35, 36],\n    [37, 38, 39, 40, 41, 42, 43, 44, 45],\n    [46, 47, 48, 49, 50, 51, 52, 53, 54],\n    [55, 56, 57, 58, 59, 60, 61, 62, 63],\n    [64, 65, 66, 67, 68, 69, 70, 71, 72],\n    [73, 74, 75, 76, 77, 78, 79, 80, 81],\n    [82, 83, 84, 85, 86, 87, 88, 89, 90],\n    [91, 92, 93, 94, 95, 96, 97, 98, 99],\n    [100, 101, 102, 103, 104, 105, 106, 107, 108],\n    [109, 110, 111, 112, 113, 114, 115, 116, 117],\n    [118, 119, 120, 121, 122, 123, 124, 125, 126],\n    [127, 128, 129, 130, 131, 132, 133, 134, 135],\n    [136, 137, 138, 139, 140, 141, 142, 143, 144],\n    [145, 146, 147, 148, 149, 150, 151, 152, 153],\n    [154, 155, 156, 157, 158, 159, 160, 161, 162],\n    [163, 164, 165, 166, 167, 168, 169, 170, 171],\n    [172, 173, 174, 175, 176, 177, 178, 179, 180],\n    [181, 182, 183, 184, 185, 186, 187, 188, 189],\n    [191, 192, 193, 194, 195, 196, 197, 198\n}\n\n",
        "test_list": [
            "candidate() {",
            "magic_square_test \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"7 12 1 14\\n2 13 8 11\\n16 3 10 5\\n9 6 15 4\") = \"true\" ]]",
            "[[ $(candidate \"2 7 6\\n9 5 1\\n4 3 8\") = \"true\" ]]",
            "[[ $(candidate \"2 7 6\\n9 5 1\\n4 3 7\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nsort_matrix() {\n    var matrix = [[0 for _ in range(0, len(matrix))] for _ in range(0, len(matrix))];\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(matrix); i++) {\n        for (var j = 0; j < len(matrix[i]); j++) {\n            matrix[i][j] = matrix[i][j] + matrix[i][j];\n        }\n    }\n    for (var i = 0; i < len(\n}\n\n",
        "test_list": [
            "candidate() {",
            "sort_matrix \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\\n2 4 5\\n1 1 1\") = \"1 1 1\\n1 2 3\\n2 4 5\" ]]",
            "[[ $(candidate \"1 2 3\\n-2 4 -5\\n1 -1 1\") = \"-2 4 -5\\n1 -1 1\\n1 2 3\" ]]",
            "[[ $(candidate \"5 8 9\\n6 4 3\\n2 1 4\") = \"2 1 4\\n6 4 3\\n5 8 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_occurrences() {\n  let max_occurrences = 0;\n  for (let i = 0; i < this.length; i++) {\n    let item = this[i];\n    let frequency = item.frequency;\n    if (frequency > max_occurrences) {\n      max_occurrences = frequency;\n    }\n  }\n  return max_occurrences;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_occurrences \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 3 8 4 7 9 8 2 6 5 1 6 1 2 3 2 4 6 9 1 2\") = \"2\" ]]",
            "[[ $(candidate \"2 3 8 4 7 9 8 7 9 15 14 10 12 13 16 18\") = \"8\" ]]",
            "[[ $(candidate \"10 20 20 30 40 90 80 50 30 20 50 10\") = \"20\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a shthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "#!/bin/bash\n#\n# $1 is a string\nreverse_vowels() {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var reverse = function(x) {\n        var y = x.charAt(0);\n        var z = x.charAt(x.length - 1);\n        return vowels.indexOf(y) === -1? z : y;\n    };\n    console.log(reverse(vowels));\n}\n\n",
        "test_list": [
            "candidate() {",
            "reverse_vowels \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python\") = \"Python\" ]]",
            "[[ $(candidate \"USA\") = \"ASU\" ]]",
            "[[ $(candidate \"ab\") = \"ab\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert a list to a string.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ntup_string() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list.join(\" \");\n}\n\n",
        "test_list": [
            "candidate() {",
            "tup_string \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"e x e r c i s e s\") = \"exercises\" ]]",
            "[[ $(candidate \"p y t h o n\") = \"python\" ]]",
            "[[ $(candidate \"p r o g r a m\") = \"program\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsum_negativenum() {\n    var sum = 0;\n    for (var i = 0; i < this.length; i++) {\n        sum += this[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_negativenum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"-32\" ]]",
            "[[ $(candidate \"10 15 -14 13 -18 12 -20\") = \"-52\" ]]",
            "[[ $(candidate \"19 -65 57 39 152 -639 121 44 90 -190\") = \"-894\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nhexagonal_num() {\n    let n = 1;\n    while (n < 100) {\n        if (n % 2 == 0) {\n            return n;\n        }\n        n += 1;\n    }\n    return null;\n}\n\n",
        "test_list": [
            "candidate() {",
            "hexagonal_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"190\" ]]",
            "[[ $(candidate \"5\") = \"45\" ]]",
            "[[ $(candidate \"7\") = \"91\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a shthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_Sum_Of_Powers_Of_Two() {\n  let sum = 0;\n  for (let i = 1; i < 10; i++) {\n    sum += i;\n  }\n  return sum % 2 == 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_Sum_Of_Powers_Of_Two \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"true\" ]]",
            "[[ $(candidate \"7\") = \"false\" ]]",
            "[[ $(candidate \"14\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\npancake_sort() {\n    for (var i = 0; i < this.length; i++) {\n        var temp = this[i];\n        var temp_index = temp.indexOf(' ');\n        if (temp_index == -1) {\n            temp_index = this.length;\n        }\n        var temp_value = temp.substring(0, temp_index);\n        var temp_value_index = temp_value.indexOf(' ');\n        if (temp_value_index == -1) {\n            temp_value_index = temp_value.length;\n        }\n        var temp_value_value = temp_value.substring(temp_value_index + 1);\n        var temp_value_value_index = temp_value_value.indexOf(' ');\n        if (temp_value_value_index == -1) {\n            temp_value_value_index = temp_value_value.length;\n        }\n        var temp_value_value_index_1 = temp_value_value.substring(0, temp_value_value_index);\n        var temp_value_value_index_2 = temp_value_value.substring(temp_value_value_index_1 + 1);\n        var temp_value_value_index_3 = temp_value_value.substring(temp_value_value_index_2 + 1);\n        var temp_value_value_index_4 = temp_value_value.substring(temp_value_value_index_3 + 1);\n        var temp_value_value_index_5 = temp_value_value.substring(temp_value_value_index_4 + 1);\n        var temp_value_value_index_6 = temp_value_value.substring(temp_value_value_index_5 + 1);\n        var temp_value_value_index_7 = temp_value_value.substring(temp_value_value_index_6 + 1);\n        var temp_value_value_index_8 = temp_value_value.substring(\n}\n\n",
        "test_list": [
            "candidate() {",
            "pancake_sort \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"15 79 25 38 69\") = \"15 25 38 69 79\" ]]",
            "[[ $(candidate \"98 12 54 36 85\") = \"12 36 54 85 98\" ]]",
            "[[ $(candidate \"41 42 32 12 23\") = \"12 23 32 41 42\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ncount_samepair() {\n    var a = [1, 2, 3];\n    var b = [1, 2, 3];\n    var c = [1, 2, 3];\n    var d = [1, 2, 3];\n    var e = [1, 2, 3];\n    var f = [1, 2, 3];\n    var g = [1, 2, 3];\n    var h = [1, 2, 3];\n    var i = [1, 2, 3];\n    var j = [1, 2, 3];\n    var k = [1, 2, 3];\n    var l = [1, 2, 3];\n    var m = [1, 2, 3];\n    var n = [1, 2, 3];\n    var o = [1, 2, 3];\n    var p = [1, 2, 3];\n    var q = [1, 2, 3];\n    var r = [1, 2, 3];\n    var s = [1, 2, 3];\n    var t = [1, 2, 3];\n    var u = [1, 2, 3];\n    var v = [1, 2, 3];\n    var w = [1, 2, 3];\n    var x = [1, 2, 3];\n    var y = [1, 2, 3];\n    var z = [1, 2, 3];\n    var a = [1, 2, 3];\n    var b = [1, 2, 3];\n    var c = [1, 2, 3];\n    var d = [1, 2, 3];\n    var e = [1, 2, 3];\n    var f = [1, 2, 3];\n    var g = [1, 2, 3];\n    var h = [1, 2, 3];\n    var i = [1, 2, 3];\n    var j = [1, 2, 3];\n    var k = [1, 2, 3];\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_samepair \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\" \"2 1 3 1 2 6 7 9\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"4\" ]]",
            "[[ $(candidate \"1 2 3 4 2 6 7 8\" \"2 2 3 1 2 6 7 8\" \"2 1 3 1 2 6 7 8\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of lists present in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfind_lists() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_lists \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4\\n5 6 7 8\") = \"2\" ]]",
            "[[ $(candidate \"1 2\\n3 4\\n5 6\") = \"3\" ]]",
            "[[ $(candidate \"9 8 7 6 5 4 3 2 1\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a shthon function to find the maximum difference between any two elements in a given array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_Abs_Diff() {\n    var max_Abs_Diff = 0;\n    for (var i = 0; i < this.length; i++) {\n        var temp = this[i];\n        for (var j = 0; j < this.length; j++) {\n            if (temp[j] > temp[i]) {\n                max_Abs_Diff = Math.max(max_Abs_Diff, temp[j] - temp[i]);\n            }\n        }\n    }\n    return max_Abs_Diff;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_Abs_Diff \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 1 5 3\") = \"4\" ]]",
            "[[ $(candidate \"9 3 2 5 1\") = \"8\" ]]",
            "[[ $(candidate \"3 2 1\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a shthon function to find the volume of a triangular prism.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_Volume() {\n  var volume = 0;\n  for (var i = 0; i < 3; i++) {\n    volume += (i + 1) * (i + 1);\n  }\n  return volume;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Volume \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"8\" \"6\") = \"240\" ]]",
            "[[ $(candidate \"3\" \"2\" \"2\") = \"6\" ]]",
            "[[ $(candidate \"1\" \"2\" \"1\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as a list, or return None if no solution exists.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nfind_solution() {\n    let x = 1;\n    let y = 2;\n    let n = 3;\n    let x_list = [];\n    let y_list = [];\n    let x_list_count = 0;\n    let y_list_count = 0;\n    let x_list_sum = 0;\n    let y_list_sum = 0;\n    let x_list_sum_count = 0;\n    let y_list_sum_count = 0;\n    let x_list_sum_sum = 0;\n    let y_list_sum_sum = 0;\n    let x_list_sum_sum_count = 0;\n    let y_list_sum_sum_count = 0;\n    let x_list_sum_sum_sum = 0;\n    let y_list_sum_sum_sum = 0;\n    let x_list_sum_sum_sum_count = 0;\n    let y_list_sum_sum_sum_count = 0;\n    let x_list_sum_sum_sum_sum = 0;\n    let y_list_sum_sum_sum_sum_count = 0;\n    let x_list_sum_sum_sum_sum_count = 0;\n    let y_list_sum_sum_sum_sum_count = 0;\n    let x_list_sum_sum_sum_sum_sum_count = 0;\n    let y_list_sum_sum_sum_sum_sum_count = 0;\n    let x_list_sum_sum_sum_sum_sum_sum_count = 0;\n    let y_list_sum_sum_sum_sum_sum_sum_count = 0;\n    let x_list_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let y_list_sum_sum_sum_sum_sum_sum_sum_count = 0;\n    let x_list_sum\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_solution \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\" \"3\" \"7\") = \"2 1\" ]]",
            "[[ $(candidate \"4\" \"2\" \"7\") = \"None\" ]]",
            "[[ $(candidate \"1\" \"13\" \"17\") = \"4 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given list present in another list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nremove_elements() {\n    var list = [1, 2, 3];\n    var result = list.filter(function(element) {\n        return element!= 3;\n    });\n    console.log(result);\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 10\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"1 3 5 7\") = \"2 4 6 8 9 10\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5 7\") = \"1 2 3 4 6 8 9 10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsum_series() {\n  var n = 1;\n  var i = 0;\n  while (i < n) {\n    sum_series(i);\n    i++;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_series \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"6\") = \"12\" ]]",
            "[[ $(candidate \"10\") = \"30\" ]]",
            "[[ $(candidate \"9\") = \"25\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nare_equivalent() {\n  var sum = 0;\n  for (var i = 1; i < 2; i++) {\n    var sum = sum + i;\n    if (sum % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "are_equivalent \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"36\" \"57\") = \"false\" ]]",
            "[[ $(candidate \"2\" \"4\") = \"false\" ]]",
            "[[ $(candidate \"23\" \"47\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncount_char_position() {\n    let count = 0;\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] === 'a' || this[i] === 'A') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_char_position \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"xbcefg\") = \"2\" ]]",
            "[[ $(candidate \"ABcED\") = \"3\" ]]",
            "[[ $(candidate \"AbgdeF\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfind_even_pair() {\n    var x = 0;\n    for (var i = 0; i < 10; i++) {\n        if (i % 2 == 0) {\n            x++;\n        }\n    }\n    return x;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_even_pair \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 4 7 2 1\") = \"4\" ]]",
            "[[ $(candidate \"7 2 8 1 0 5 11\") = \"9\" ]]",
            "[[ $(candidate \"1 2 3\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a shthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nnext_power_of_2() {\n  let n = 1;\n  while (n < 2) {\n    if (n % 2 == 0) {\n      return n;\n    }\n    n += 1;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "next_power_of_2 \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0\") = \"1\" ]]",
            "[[ $(candidate \"5\") = \"8\" ]]",
            "[[ $(candidate \"17\") = \"32\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nfrequency() {\n  let count = 0;\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] ==='') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "frequency \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\" \"4\") = \"0\" ]]",
            "[[ $(candidate \"1 2 2 3 3 3 4\" \"3\") = \"3\" ]]",
            "[[ $(candidate \"0 1 2 3 1 2\" \"1\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_lowercase_underscore() {\n  var text = \"Hello World\";\n  var result = text_lowercase_underscore(text);\n  return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_lowercase_underscore \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"aab_cbbbc\") = \"true\" ]]",
            "[[ $(candidate \"aab_Abbbc\") = \"false\" ]]",
            "[[ $(candidate \"Aaab_abbbc\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nsum_range_list() {\n    var sum = 0;\n    for (var i = 1; i < arguments.length; i++) {\n        sum += arguments[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_range_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"8\" \"10\") = \"29\" ]]",
            "[[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"5\" \"7\") = \"16\" ]]",
            "[[ $(candidate \"2 1 5 6 8 3 4 9 10 11 8 12\" \"7\" \"10\") = \"38\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nperimeter_pentagon() {\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let g = 1;\n  let h = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let g = 1;\n  let h = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let g = 1;\n  let h = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "perimeter_pentagon \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"25\" ]]",
            "[[ $(candidate \"10\") = \"50\" ]]",
            "[[ $(candidate \"15\") = \"75\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncount_occurance() {\n  let count = 0;\n  for (let i = 0; i <'std'.length; i++) {\n    if (i =='std') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_occurance \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"letstdlenstdporstd\") = \"3\" ]]",
            "[[ $(candidate \"truststdsolensporsd\") = \"1\" ]]",
            "[[ $(candidate \"makestdsostdworthit\") = \"2\" ]]",
            "[[ $(candidate \"stds\") = \"1\" ]]",
            "[[ $(candidate \"\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsquare_perimeter() {\n  let side_length = 1;\n  for (let i = 0; i < side_length; i++) {\n    let side_length_i = side_length;\n    while (side_length_i > 0) {\n      let side_length_i_i = side_length_i;\n      side_length_i_i--;\n      if (side_length_i_i == 0) {\n        return side_length_i_i;\n      }\n    }\n  }\n  return side_length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "square_perimeter \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"40\" ]]",
            "[[ $(candidate \"5\") = \"20\" ]]",
            "[[ $(candidate \"4\") = \"16\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\nremove_dirty_chars() {\n    let first = \"\";\n    let second = \"\";\n    for (let i = 0; i < 2; i++) {\n        first += \"a\";\n        second += \"b\";\n    }\n    let result = first + second;\n    console.log(result);\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_dirty_chars \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"probasscurve\" \"pros\") = \"bacuve\" ]]",
            "[[ $(candidate \"digitalindia\" \"talent\") = \"digiidi\" ]]",
            "[[ $(candidate \"exoticmiles\" \"toxic\") = \"emles\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ntest_duplicate() {\n    var a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var b = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var c = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var d = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var e = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var f = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var g = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var h = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var i = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var j = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var k = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var m = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var n = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var o = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var p = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var r = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var s = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var t = [1, 2, 3,\n}\n\n",
        "test_list": [
            "candidate() {",
            "test_duplicate \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3 4 4\") = \"true\" ]]",
            "[[ $(candidate \"1 1 2 2 3 3 4 4 5\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_woodall() {\n  if (is_number(1)) {\n    return true;\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_woodall \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"383\") = \"true\" ]]",
            "[[ $(candidate \"254\") = \"false\" ]]",
            "[[ $(candidate \"200\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in list have same data type or not.",
        "code": "#!/bin/bash\n#\n# $1 is a $Any\ncheck_type() {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i]!= this[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_type \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6 7 3 5 6\") = \"true\" ]]",
            "[[ $(candidate \"1 2 4\") = \"false\" ]]",
            "[[ $(candidate \"3 2 1 4 5\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nis_majority() {\n  let n = 1;\n  let element = 0;\n  let majority = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 2 == 0) {\n      if (element == n/2) {\n        majority = i;\n      }\n    } else {\n      if (element == n/2) {\n        if (i == majority) {\n          return true;\n        }\n      }\n    }\n    element = 0;\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_majority \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 3 3 3 10\" \"7\" \"3\") = \"true\" ]]",
            "[[ $(candidate \"1 1 2 4 4 4 6 6\" \"8\" \"4\") = \"false\" ]]",
            "[[ $(candidate \"1 1 1 2 2\" \"5\" \"1\") = \"true\" ]]",
            "[[ $(candidate \"1 1 2 2\" \"5\" \"1\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a shthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncount_Set_Bits() {\n    var count = 0;\n    for (var i = 0; i < 10; i++) {\n        if (i & 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_Set_Bits \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"1\" ]]",
            "[[ $(candidate \"4\") = \"1\" ]]",
            "[[ $(candidate \"6\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a shthon function to remove the characters which have odd index values of a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nodd_values_string() {\n  var odd_values = [];\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] === '1') {\n      odd_values.push(i);\n    }\n  }\n  return odd_values;\n}\n\n",
        "test_list": [
            "candidate() {",
            "odd_values_string \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abcdef\") = \"ace\" ]]",
            "[[ $(candidate \"python\") = \"pto\" ]]",
            "[[ $(candidate \"data\") = \"dt\" ]]",
            "[[ $(candidate \"lambs\") = \"lms\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmin_of_three() {\n  var a = 1;\n  var b = 2;\n  var c = 3;\n  var d = 4;\n  var e = 5;\n  var f = 6;\n  var g = 7;\n  var h = 8;\n  var i = 9;\n  var j = 10;\n  var k = 11;\n  var l = 12;\n  var m = 13;\n  var n = 14;\n  var o = 15;\n  var p = 16;\n  var q = 17;\n  var r = 18;\n  var s = 19;\n  var t = 20;\n  var u = 21;\n  var v = 22;\n  var w = 23;\n  var x = 24;\n  var y = 25;\n  var z = 26;\n  var a = 27;\n  var b = 28;\n  var c = 29;\n  var d = 30;\n  var e = 31;\n  var f = 32;\n  var g = 33;\n  var h = 34;\n  var i = 35;\n  var j = 36;\n  var k = 37;\n  var l = 38;\n  var m = 39;\n  var n = 40;\n  var o = 41;\n  var p = 42;\n  var q = 43;\n  var r = 44;\n  var s = 45;\n  var t = 46;\n  var u = 47;\n  var v = 48;\n  var w = 49;\n  var x = 50;\n  var y = 51;\n  var z = 52;\n  var a = 53;\n  var b = 54;\n  var c = 55;\n  var d = 56;\n  var e = 57;\n  var f = 58;\n  var g = 59;\n  var h = 60;\n  var i = 61;\n  var j = 62;\n  var k = 63;\n  var l = 64;\n  var m = 65;\n  var n = 66;\n  \n}\n\n",
        "test_list": [
            "candidate() {",
            "min_of_three \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"20\" \"0\") = \"0\" ]]",
            "[[ $(candidate \"19\" \"15\" \"18\") = \"15\" ]]",
            "[[ $(candidate \"-10\" \"-20\" \"-30\") = \"-30\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a shthon function to check whether all the bits are unset in the given range or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nall_Bits_Set_In_The_Given_Range() {\n    var bits = [1, 2, 3];\n    var result = true;\n    for (var i = 0; i < bits.length; i++) {\n        if (bits[i] === 0) {\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "all_Bits_Set_In_The_Given_Range \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4\" \"1\" \"2\") = \"true\" ]]",
            "[[ $(candidate \"17\" \"2\" \"4\") = \"true\" ]]",
            "[[ $(candidate \"39\" \"4\" \"6\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nre_arrange_array() {\n    var arr = [];\n    for (var i = 0; i < 10; i++) {\n        arr.push(i);\n    }\n    arr.sort();\n    arr.reverse();\n    arr.forEach(function(i) {\n        console.log(i);\n    });\n}\n\n",
        "test_list": [
            "candidate() {",
            "re_arrange_array \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"-1 2 -3 4 5 6 -7 8 9\" \"9\") = \"-1 -3 -7 4 5 6 2 8 9\" ]]",
            "[[ $(candidate \"12 -14 -26 13 15\" \"5\") = \"-14 -26 12 13 15\" ]]",
            "[[ $(candidate \"10 24 36 -42 -39 -78 85\" \"7\") = \"-42 -39 -78 10 24 36 85\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\nreplace_blank() {\n    return \" \" + this.replace(/\\s+/g, \" \") + \" \";\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_blank \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"hello people\" \"@\") = \"hello@people\" ]]",
            "[[ $(candidate \"python program language\" \"\\$\") = \"python\\$program\\$language\" ]]",
            "[[ $(candidate \"blank space\" \"-\") = \"blank-space\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nvolume_cube() {\n  var side = 1;\n  var volume = 0;\n  for (var i = 0; i < side; i++) {\n    volume += 1;\n  }\n  return volume;\n}\n\n",
        "test_list": [
            "candidate() {",
            "volume_cube \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"27\" ]]",
            "[[ $(candidate \"2\") = \"8\" ]]",
            "[[ $(candidate \"5\") = \"125\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a shthon function to count the number of non-empty substrings of a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nnumber_of_substrings() {\n  let count = 0;\n  for (let i = 0; i < this.length; i++) {\n    if (this[i]!= '') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "number_of_substrings \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abc\") = \"6\" ]]",
            "[[ $(candidate \"abcd\") = \"10\" ]]",
            "[[ $(candidate \"abcde\") = \"15\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nget_total_number_of_sequences() {\n  let m = 1;\n  let n = 2;\n  let result = 0;\n  while (m <= n) {\n    let current_element = m;\n    let previous_element = m - 1;\n    while (current_element > 0) {\n      let next_element = current_element - 1;\n      if (next_element > 0) {\n        let next_element_value = next_element;\n        let next_element_value_value = next_element_value - previous_element;\n        if (next_element_value_value > 0) {\n          let next_element_value_value_value = next_element_value_value - previous_element_value;\n          if (next_element_value_value_value > 0) {\n            let next_element_value_value_value_value = next_element_value_value_value - previous_element_value_value;\n            if (next_element_value_value_value_value > 0) {\n              let next_element_value_value_value_value_value = next_element_value_value_value_value - previous_element_value_value_value;\n              if (next_element_value_value_value_value_value > 0) {\n                let next_element_value_value_value_value_value_value = next_element_value_value_value_value_value - previous_element_value_value_value_value;\n                if (next_element_value_value_value_value_value_value > 0) {\n                  let next_element_value_value_value_value_value_value_value = next_element_value_value_value_value_value_value - previous_element_value_value_value_value_value;\n                  if (next_element_value_value_value_value_value_\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_total_number_of_sequences \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"4\") = \"4\" ]]",
            "[[ $(candidate \"5\" \"2\") = \"6\" ]]",
            "[[ $(candidate \"16\" \"3\") = \"84\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nreplace_list() {\n    var $1 = [\"a\", \"b\", \"c\"]\n    var $2 = [\"d\", \"e\", \"f\"]\n    return $1.join(\", \") + $2.join(\", \")\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 5 7 9 10\" \"2 4 6 8\") = \"1 3 5 7 9 2 4 6 8\" ]]",
            "[[ $(candidate \"1 2 3 4 5\" \"5 6 7 8\") = \"1 2 3 4 5 6 7 8\" ]]",
            "[[ $(candidate \"red blue green\" \"yellow\") = \"red blue yellow\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncount_charac() {\n  var count = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] =='') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_charac \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python programming\") = \"18\" ]]",
            "[[ $(candidate \"language\") = \"8\" ]]",
            "[[ $(candidate \"words\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a shthon function to find the next perfect square greater than a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nnext_Perfect_Square() {\n  let x = 1;\n  while (x < 2) {\n    if (x % 2 == 0) {\n      return x;\n    }\n    x = x * 2;\n  }\n  return x;\n}\n\n",
        "test_list": [
            "candidate() {",
            "next_Perfect_Square \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"35\") = \"36\" ]]",
            "[[ $(candidate \"6\") = \"9\" ]]",
            "[[ $(candidate \"9\") = \"16\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_sum() {\n  let max_sum = 0;\n  let bitonic_seq = [];\n  let bitonic_seq_len = 0;\n  let bitonic_seq_len_max = 0;\n  let bitonic_seq_len_min = 0;\n  let bitonic_seq_len_min_max = 0;\n  let bitonic_seq_len_min_max_max = 0;\n  let bitonic_seq_len_min_max_min = 0;\n  let bitonic_seq_len_min_max_min_max = 0;\n  let bitonic_seq_len_min_max_min_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max = 0;\n  let bitonic_seq_len_min_max_min_max_min_max_max_max =\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 15 51 45 33 100 12 18 9\") = \"194\" ]]",
            "[[ $(candidate \"80 60 30 40 20 10\") = \"210\" ]]",
            "[[ $(candidate \"2 3 14 16 21 23 29 30\") = \"138\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nlps() {\n    let l = 0;\n    for (let i = 0; i < len(str); i++) {\n        if (str[i] == str[i + 1]) {\n            l++;\n        }\n    }\n    return l;\n}\n\n",
        "test_list": [
            "candidate() {",
            "lps \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"TENS FOR TENS\") = \"5\" ]]",
            "[[ $(candidate \"CARDIO FOR CARDS\") = \"7\" ]]",
            "[[ $(candidate \"PART OF THE JOURNEY IS PART\") = \"9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection_array() {\n    var a = [];\n    var b = [];\n    for (var i = 0; i < $1.length; i++) {\n        for (var j = 0; j < $1.length; j++) {\n            if ($1[i] == $2[j]) {\n                a.push($1[i]);\n                b.push($2[j]);\n            }\n        }\n    }\n    return a;\n}\n\n",
        "test_list": [
            "candidate() {",
            "intersection_array \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 5 7 8 9 10\" \"1 2 4 8 9\") = \"1 2 8 9\" ]]",
            "[[ $(candidate \"1 2 3 5 7 8 9 10\" \"3 5 7 9\") = \"3 5 7 9\" ]]",
            "[[ $(candidate \"1 2 3 5 7 8 9 10\" \"10 20 30 40\") = \"10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a shthon function that takes in a list and an element and counts the occcurences of the element in the list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_X() {\n  for (var i = 0; i < $1.length; i++) {\n    if ($1[i] == $2) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_X \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"4\") = \"0\" ]]",
            "[[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"10\") = \"3\" ]]",
            "[[ $(candidate \"10 8 5 2 10 15 10 8 5 8 8 2\" \"8\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a string\ninsert_element() {\n  var list = [];\n  for (var i = 0; i < $1.length; i++) {\n    list.push($1.substring(0, i));\n    list.push($1.substring(i));\n  }\n  return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "insert_element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Red Green Black\" \"c\") = \"c Red c Green c Black\" ]]",
            "[[ $(candidate \"python java\" \"program\") = \"program python program java\" ]]",
            "[[ $(candidate \"happy sad\" \"laugh\") = \"laugh happy laugh sad\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a shthon function to convert complex numbers to polar coordinates.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nconvert() {\n    var x = 1;\n    var y = 1;\n    var z = 1;\n    var r = 1;\n    var theta = 0;\n    var phi = 0;\n    var x_r = 0;\n    var y_r = 0;\n    var z_r = 0;\n    var r_r = 0;\n    var theta_r = 0;\n    var phi_r = 0;\n    var x_r_r = 0;\n    var y_r_r = 0;\n    var z_r_r = 0;\n    var r_r_r = 0;\n    var theta_r_r = 0;\n    var phi_r_r = 0;\n    var x_r_r_r = 0;\n    var y_r_r_r = 0;\n    var z_r_r_r = 0;\n    var r_r_r_r = 0;\n    var theta_r_r_r = 0;\n    var phi_r_r_r = 0;\n    var x_r_r_r_r = 0;\n    var y_r_r_r_r = 0;\n    var z_r_r_r_r = 0;\n    var r_r_r_r_r = 0;\n    var theta_r_r_r_r = 0;\n    var phi_r_r_r_r = 0;\n    var x_r_r_r_r_r = 0;\n    var y_r_r_r_r_r = 0;\n    var z_r_r_r_r_r = 0;\n    var r_r_r_r_r_r = 0;\n    var theta_r_r_r_r_r = 0;\n    var phi_r_r_r_r_r_r = 0;\n    var x_r_r_r_r_r_r = 0;\n    var y_r_r_r_r\n}\n\n",
        "test_list": [
            "candidate() {",
            "convert \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\") = \"1.0 0.0\" ]]",
            "[[ $(candidate \"4\") = \"4.0 0.0\" ]]",
            "[[ $(candidate \"5\") = \"5.0 0.0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a shthon function that returns the number of integer elements in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ncount_integer() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var count = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_integer \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 abc 1.2\") = \"2\" ]]",
            "[[ $(candidate \"1 2 3\") = \"3\" ]]",
            "[[ $(candidate \"1 1.2 4 5.1\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\ncombinations_colors() {\n    var n = 1;\n    var list = [];\n    for (var i = 0; i < n; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "combinations_colors \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Red Green Blue\" \"1\") = \"Red\\nGreen\\nBlue\" ]]",
            "[[ $(candidate \"Red Green Blue\" \"2\") = \"Red Red\\nRed Green\\nRed Blue\\nGreen Green\\nGreen Blue\\nBlue Blue\" ]]",
            "[[ $(candidate \"Red Green Blue\" \"3\") = \"Red Red Red\\nRed Red Green\\nRed Red Blue\\nRed Green Green\\nRed Green Blue\\nRed Blue Blue\\nGreen Green Green\\nGreen Green Blue\\nGreen Blue Blue\\nBlue Blue Blue\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a shthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncount_Primes_nums() {\n    let count = 0;\n    for (let i = 2; i <= 10; i++) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_Primes_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"2\" ]]",
            "[[ $(candidate \"10\") = \"4\" ]]",
            "[[ $(candidate \"100\") = \"25\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns a list with the second number and then the first number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nswap_numbers() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n\n}\n\n",
        "test_list": [
            "candidate() {",
            "swap_numbers \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"20\") = \"20 10\" ]]",
            "[[ $(candidate \"15\" \"17\") = \"17 15\" ]]",
            "[[ $(candidate \"100\" \"200\") = \"200 100\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nmaximize_elements() {\n  var $1 = [];\n  var $2 = [];\n  for (var i = 0; i < $1.length; i++) {\n    $1[i] = $1[i].split(' ');\n    $2[i] = $2[i].split(' ');\n  }\n  return $1.length > $2.length? $1 : $2;\n}\n\n",
        "test_list": [
            "candidate() {",
            "maximize_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 7\\n4 9\\n2 9\\n7 10\" ]]",
            "[[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"7 8\\n5 10\\n3 10\\n8 11\" ]]",
            "[[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"8 9\\n6 11\\n4 11\\n9 12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nnewman_prime() {\n    let n = 1;\n    while (n < 100) {\n        let p = n;\n        let q = n;\n        while (q < 100) {\n            let r = q;\n            q = r;\n            r = r * r;\n        }\n        let r = q;\n        q = r;\n        r = r * r;\n        let r2 = r;\n        r = r * r;\n        let r3 = r;\n        r = r * r;\n        let r4 = r;\n        r = r * r;\n        let r5 = r;\n        r = r * r;\n        let r6 = r;\n        r = r * r;\n        let r7 = r;\n        r = r * r;\n        let r8 = r;\n        r = r * r;\n        let r9 = r;\n        r = r * r;\n        let r10 = r;\n        r = r * r;\n        let r11 = r;\n        r = r * r;\n        let r12 = r;\n        r = r * r;\n        let r13 = r;\n        r = r * r;\n        let r14 = r;\n        r = r * r;\n        let r15 = r;\n        r = r * r;\n        let r16 = r;\n        r = r * r;\n        let r17 = r;\n        r = r * r;\n        let r18 = r;\n        r = r * r;\n        let r19 = r;\n        r = r * r;\n        let r20 = r;\n        r = r * r;\n        let r21 = r;\n        r = r * r;\n        let r22 = r;\n        r = r * r;\n        let r23 = r;\n        r = r * r;\n        let r24 = r;\n        r = r * r;\n        let r25 = r;\n        r = r * r;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "newman_prime \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"7\" ]]",
            "[[ $(candidate \"4\") = \"17\" ]]",
            "[[ $(candidate \"5\") = \"41\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndivision_elements() {\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c = [1, 2, 3, 4, 5];\n    var d = [1, 2, 3, 4, 5];\n    var e = [1, 2, 3, 4, 5];\n    var f = [1, 2, 3, 4, 5];\n    var g = [1, 2, 3, 4, 5];\n    var h = [1, 2, 3, 4, 5];\n    var i = [1, 2, 3, 4, 5];\n    var j = [1, 2, 3, 4, 5];\n    var k = [1, 2, 3, 4, 5];\n    var l = [1, 2, 3, 4, 5];\n    var m = [1, 2, 3, 4, 5];\n    var n = [1, 2, 3, 4, 5];\n    var o = [1, 2, 3, 4, 5];\n    var p = [1, 2, 3, 4, 5];\n    var q = [1, 2, 3, 4, 5];\n    var r = [1, 2, 3, 4, 5];\n    var s = [1, 2, 3, 4, 5];\n    var t = [1, 2, 3, 4, 5];\n    var u = [1, 2, 3, 4, 5];\n    var v = [1, 2, 3, 4, 5];\n    var w = [1, 2, 3, 4, 5];\n    var x = [1, 2, 3, 4, 5];\n    var y = [1, 2, 3, 4, 5];\n    var z = [1, 2, 3, 4, 5];\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c =\n}\n\n",
        "test_list": [
            "candidate() {",
            "division_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"2 2 2 3\" ]]",
            "[[ $(candidate \"12 6 8 16\" \"6 3 4 4\") = \"2 2 2 4\" ]]",
            "[[ $(candidate \"20 14 36 18\" \"5 7 6 9\") = \"4 2 6 2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_two_parts() {\n    var list = [];\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "split_two_parts \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 2\\n3 4 4 5 1\" ]]",
            "[[ $(candidate \"a b c d\" \"2\") = \"a b\\nc d\" ]]",
            "[[ $(candidate \"p y t h o n\" \"4\") = \"p y t h\\no n\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ndog_age() {\n  var year = 0;\n  var month = 0;\n  var day = 0;\n  var year_of_birth = 0;\n  var month_of_birth = 0;\n  var day_of_birth = 0;\n  var year_of_death = 0;\n  var month_of_death = 0;\n  var day_of_death = 0;\n  var year_of_death_of_birth = 0;\n  var month_of_death_of_birth = 0;\n  var day_of_death_of_birth = 0;\n  var year_of_death_of_death = 0;\n  var month_of_death_of_death = 0;\n  var day_of_death_of_death = 0;\n  var year_of_death_of_death_of_birth = 0;\n  var month_of_death_of_death_of_birth = 0;\n  var day_of_death_of_death_of_birth = 0;\n  var year_of_death_of_death_of_death = 0;\n  var month_of_death_of_death_of_death_of_birth = 0;\n  var day_of_death_of_death_of_death_of_birth = 0;\n  var year_of_death_of_death_of_death_of_death = 0;\n  var month_of_death_of_death_of_death_of_death_of_birth = 0;\n  var day_of_death_of_death_of_death_of_death_of_birth = 0;\n  var year_of_death_of_death_of_death_of_death_of_birth = 0;\n  var month_of_death_of_death_of_death_of_death_of_birth_of_birth = 0;\n  var day_of_death_of_death_of_death_of_birth_of_birth = 0;\n  var year_of_death_of_death_of_\n}\n\n",
        "test_list": [
            "candidate() {",
            "dog_age \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12\") = \"61\" ]]",
            "[[ $(candidate \"15\") = \"73\" ]]",
            "[[ $(candidate \"24\") = \"109\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nlist_split() {\n    var list = [];\n    for (var i = 0; i < $1.length; i++) {\n        list.push($1.substring(i, i + $2));\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "list_split \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"a b c d e f g h i j k l m n\" \"3\") = \"a d g j m\\nb e h k n\\nc f i l\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\" \"3\") = \"1 4 7 10 13\\n2 5 8 11 14\\n3 6 9 12\" ]]",
            "[[ $(candidate \"python java C C++ DBMS SQL\" \"2\") = \"python C DBMS\\njava C++ SQL\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nlateralsurface_cube() {\n  var side = 2;\n  var side_length = side * side;\n  var side_length_sq = side_length * side_length;\n  var side_length_sq_sq = side_length_sq * side_length_sq;\n  var side_length_sq_sq_sq = side_length_sq_sq * side_length_sq_sq;\n  var side_length_sq_sq_sq_sq = side_length_sq_sq_sq * side_length_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq * side_length_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_length_sq_sq_sq_sq_sq_sq * side_length_sq_sq_sq_sq_sq;\n  var side_length_sq_sq_sq_sq_sq_sq = side_\n}\n\n",
        "test_list": [
            "candidate() {",
            "lateralsurface_cube \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"100\" ]]",
            "[[ $(candidate \"9\") = \"324\" ]]",
            "[[ $(candidate \"10\") = \"400\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a shthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsquare_Sum() {\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "square_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"10\" ]]",
            "[[ $(candidate \"3\") = \"35\" ]]",
            "[[ $(candidate \"4\") = \"84\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfind_star_num() {\n    let n = 1;\n    while (n < 100) {\n        let num = n;\n        let num_str = num.toString();\n        let num_num = num_str.length;\n        if (num_num == 1) {\n            return num;\n        } else {\n            let num_str_num = num_str.substr(0, num_num - 1);\n            let num_num_num = num_str_num.length;\n            let num_num_num_num = num_num_num.substr(0, num_num_num - 1);\n            let num_num_num_num_num = num_num_num_num.substr(0, num_num_num_num - 1);\n            let num_num_num_num_num_num = num_num_num_num_num.substr(0, num_num_num_num_num - 1);\n            let num_num_num_num_num_num_num = num_num_num_num_num_num.substr(0, num_num_num_num_num_num - 1);\n            let num_num_num_num_num_num_num_num_num = num_num_num_num_num_num_num_num.substr(0, num_num_num_num_num_num_num - 1);\n            let num_num_num_num_num_num_num_num_num_num_num = num_num_num_num_num_num_num_num_num_num.substr(0, num_num_num_num_num_num_num_num_num - 1);\n            let num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num_num\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_star_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"37\" ]]",
            "[[ $(candidate \"4\") = \"73\" ]]",
            "[[ $(candidate \"5\") = \"121\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nascii_value() {\n    return (\n        (\n            (\n                (\n                    (\n                        (\n                            (\n                                (\n                                    (\n                                        (\n                                            (\n                                                (\n                                                    (\n                                                        (\n                                                            (\n                                                                (\n                                                                    (\n                                                                        (\n                                                                            (\n                                                                                (\n                                                                                    (\n                                                                                        (\n                                                                                            (\n                                                                                            (\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                            \t(\n                                                                                           \n}\n\n",
        "test_list": [
            "candidate() {",
            "ascii_value \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"A\") = \"65\" ]]",
            "[[ $(candidate \"R\") = \"82\" ]]",
            "[[ $(candidate \"S\") = \"83\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a shthon function to find the sum of even numbers at even positions of a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsum_even_and_even_index() {\n  var sum = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] % 2 == 0) {\n      sum += this[i];\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_even_and_even_index \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6 12 1 18 8\") = \"30\" ]]",
            "[[ $(candidate \"3 20 17 9 2 10 18 13 6 18\") = \"26\" ]]",
            "[[ $(candidate \"5 6 12 1\") = \"12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a shthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\neven_Power_Sum() {\n  let sum = 0;\n  for (let i = 1; i < 10; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "even_Power_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"1056\" ]]",
            "[[ $(candidate \"3\") = \"8832\" ]]",
            "[[ $(candidate \"1\") = \"32\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in a list of lists and returns a list containing the rear element of each list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nrear_extract() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "rear_extract \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 Rash 21\\n2 Varsha 20\\n3 Kil 19\") = \"21 20 19\" ]]",
            "[[ $(candidate \"1 Sai 36\\n2 Ayesha 25\\n3 Salman 45\") = \"36 25 45\" ]]",
            "[[ $(candidate \"1 Sudeep 14\\n2 Vandana 36\\n3 Dawood 56\") = \"14 36 56\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two lists and subtracts the elements of the first list by the elements of the second list with the same index.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsubstract_elements() {\n    var $1 = [\"a\", \"b\", \"c\"];\n    var $2 = [\"a\", \"b\", \"c\"];\n    var $3 = [\"a\", \"b\", \"c\"];\n    var $4 = [\"a\", \"b\", \"c\"];\n    var $5 = [\"a\", \"b\", \"c\"];\n    var $6 = [\"a\", \"b\", \"c\"];\n    var $7 = [\"a\", \"b\", \"c\"];\n    var $8 = [\"a\", \"b\", \"c\"];\n    var $9 = [\"a\", \"b\", \"c\"];\n    var $10 = [\"a\", \"b\", \"c\"];\n    var $11 = [\"a\", \"b\", \"c\"];\n    var $12 = [\"a\", \"b\", \"c\"];\n    var $13 = [\"a\", \"b\", \"c\"];\n    var $14 = [\"a\", \"b\", \"c\"];\n    var $15 = [\"a\", \"b\", \"c\"];\n    var $16 = [\"a\", \"b\", \"c\"];\n    var $17 = [\"a\", \"b\", \"c\"];\n    var $18 = [\"a\", \"b\", \"c\"];\n    var $19 = [\"a\", \"b\", \"c\"];\n    var $20 = [\"a\", \"b\", \"c\"];\n    var $21 = [\"a\", \"b\", \"c\"];\n    var $22 = [\"a\", \"b\", \"c\"];\n    var $23 = [\"a\", \"b\", \"c\"];\n    var $24 = [\"a\", \"b\", \"c\"];\n    var $25 = [\"a\", \"b\", \"c\"];\n    var $26 = [\"a\", \"b\", \"c\"];\n    var $27 = [\"a\", \"b\", \"c\"];\n    var $28 = [\"a\", \"b\",\n}\n\n",
        "test_list": [
            "candidate() {",
            "substract_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 5\" \"2 5 18\") = \"8 -1 -13\" ]]",
            "[[ $(candidate \"11 2 3\" \"24 45 16\") = \"-13 -43 -13\" ]]",
            "[[ $(candidate \"7 18 9\" \"10 11 12\") = \"-3 7 -3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a shthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\neven_binomial_Coeff_Sum() {\n  var n = 1;\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "even_binomial_Coeff_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4\") = \"8\" ]]",
            "[[ $(candidate \"6\") = \"32\" ]]",
            "[[ $(candidate \"2\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the list element in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ncount_first_elements() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var count = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] == list[i - 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_first_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 7 4 6 10\") = \"3\" ]]",
            "[[ $(candidate \"2 9 5 7 11\") = \"2\" ]]",
            "[[ $(candidate \"11 15 5 8 2 3 8\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_num_decagonal() {\n  let n = 1;\n  while (n < 10) {\n    if (is_num_decagonal(n)) {\n      return n;\n    }\n    n++;\n  }\n  return null;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_num_decagonal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"27\" ]]",
            "[[ $(candidate \"7\") = \"175\" ]]",
            "[[ $(candidate \"10\") = \"370\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns a list containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nsequential_search() {\n  var array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,\n}\n\n",
        "test_list": [
            "candidate() {",
            "sequential_search \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"11 23 58 31 56 77 43 12 65 19\" \"31\") = \"true 3\" ]]",
            "[[ $(candidate \"12 32 45 62 35 47 44 61\" \"61\") = \"true 7\" ]]",
            "[[ $(candidate \"9 10 17 19 22 39 48 56\" \"48\") = \"true 6\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a shthon function to check if the elements of a given list are unique or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nall_unique() {\n    let list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let unique = list.filter(x => x % 2 == 0);\n    return unique.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "all_unique \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"true\" ]]",
            "[[ $(candidate \"1 2 1 2\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3 4 5\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two lists element-wise.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsub_list() {\n    var $1 = [\"a\", \"b\", \"c\"]\n    var $2 = [\"d\", \"e\", \"f\"]\n    return $1 - $2\n}\n\n",
        "test_list": [
            "candidate() {",
            "sub_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\" \"4 5 6\") = \"-3 -3 -3\" ]]",
            "[[ $(candidate \"1 2\" \"3 4\") = \"-2 -2\" ]]",
            "[[ $(candidate \"90 120\" \"50 70\") = \"40 50\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a shthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nvalidate() {\n    let sum = 0;\n    for (let i = 0; i < 10; i++) {\n        sum += i;\n    }\n    return sum % 10 == 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "validate \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1234\") = \"true\" ]]",
            "[[ $(candidate \"51241\") = \"false\" ]]",
            "[[ $(candidate \"321\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a $Any\ncheck_element() {\n    var list = [1, 2, 3, 4, 5];\n    var result = true;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i]!= list[i]) {\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"green orange black white\" \"blue\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"7\") = \"false\" ]]",
            "[[ $(candidate \"green green green green\" \"green\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_two_three() {\n  if (text_match_two_three_a(text_match_two_three_b(text_match_two_three_c(text_match_two_three_d(text_match_two_three_e(text_match_two_three_f(text_match_two_three_g(text_match_two_three_h(text_match_two_three_i(text_match_two_three_j(text_match_two_three_k(text_match_two_three_l(text_match_two_three_m(text_match_two_three_n(text_match_two_three_o(text_match_two_three_p(text_match_two_three_q(text_match_two_three_r(text_match_two_three_s(text_match_two_three_t(text_match_two_three_u(text_match_two_three_v(text_match_two_three_w(text_match_two_three_x(text_match_two_three_y(text_match_two_three_z(text_match_two_three_a(text_match_two_three_b(text_match_two_three_c(text_match_two_three_d(text_match_two_three_e(text_match_two_three_f(text_match_two_three_g(text_match_two_three_h(text_match_two_three_i(text_match_two_three_j(text_match_two_three_k(text_match_two_three_l(text_match_two_three_m(text_match_two_three_n(text_match_two_three_o(text_match_two_three_p(text_match_two_three_q(text_match_two_three_r(text_match_two_three_s(text_match_two_three_\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_two_three \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"ac\") = \"false\" ]]",
            "[[ $(candidate \"dc\") = \"false\" ]]",
            "[[ $(candidate \"abbbba\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\nmax_sub_array_sum_repeated() {\n    let max_sub_array_sum = 0;\n    let k = 1;\n    for (let i = 0; i < len(list); i++) {\n        let sum = 0;\n        for (let j = 0; j < k; j++) {\n            sum += list[i];\n        }\n        if (sum > max_sub_array_sum) {\n            max_sub_array_sum = sum;\n        }\n        k++;\n    }\n    return max_sub_array_sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_sub_array_sum_repeated \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 20 -30 -1\" \"4\" \"3\") = \"30\" ]]",
            "[[ $(candidate \"-1 10 20\" \"3\" \"2\") = \"59\" ]]",
            "[[ $(candidate \"-1 -2 -3\" \"3\" \"3\") = \"-1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a shthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsquare_Sum() {\n  var sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i * i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "square_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"20\" ]]",
            "[[ $(candidate \"3\") = \"56\" ]]",
            "[[ $(candidate \"4\") = \"120\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the list of maximum length in a list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_length() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_length \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]",
            "[[ $(candidate \"1\\n5 7\\n10 12 14 15\") = \"4 10 12 14 15\" ]]",
            "[[ $(candidate \"5\\n15 20 25\") = \"3 15 20 25\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\ncount_no_of_ways() {\n    let n = 1;\n    let k = 1;\n    let color = '#00ff00';\n    let i = 0;\n    while (i < n) {\n        if (color == '#00ff00') {\n            color = '#ff00ff';\n        } else {\n            color = '#00ff00';\n        }\n        i++;\n    }\n    return i;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_no_of_ways \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\" \"4\") = \"16\" ]]",
            "[[ $(candidate \"3\" \"2\") = \"6\" ]]",
            "[[ $(candidate \"4\" \"4\") = \"228\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a shthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nfind() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n = 66;\n    \n}\n\n",
        "test_list": [
            "candidate() {",
            "find \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"3\") = \"3\" ]]",
            "[[ $(candidate \"4\" \"2\") = \"2\" ]]",
            "[[ $(candidate \"20\" \"5\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\notherside_rightangle() {\n  var x = 1;\n  var y = 2;\n  var z = 3;\n  var a = 4;\n  var b = 5;\n  var c = 6;\n  var d = 7;\n  var e = 8;\n  var f = 9;\n  var g = 10;\n  var h = 11;\n  var i = 12;\n  var j = 13;\n  var k = 14;\n  var l = 15;\n  var m = 16;\n  var n = 17;\n  var o = 18;\n  var p = 19;\n  var q = 20;\n  var r = 21;\n  var s = 22;\n  var t = 23;\n  var u = 24;\n  var v = 25;\n  var w = 26;\n  var x = 27;\n  var y = 28;\n  var z = 29;\n  var a = 30;\n  var b = 31;\n  var c = 32;\n  var d = 33;\n  var e = 34;\n  var f = 35;\n  var g = 36;\n  var h = 37;\n  var i = 38;\n  var j = 39;\n  var k = 40;\n  var l = 41;\n  var m = 42;\n  var n = 43;\n  var o = 44;\n  var p = 45;\n  var q = 46;\n  var r = 47;\n  var s = 48;\n  var t = 49;\n  var u = 50;\n  var v = 51;\n  var w = 52;\n  var x = 53;\n  var y = 54;\n  var z = 55;\n  var a = 56;\n  var b = 57;\n  var c = 58;\n  var d = 59;\n  var e = 60;\n  var f = 61;\n  var g = 62;\n  var h = 63;\n  var i = 64;\n  var j = 65;\n  var k = 66;\n  var l =\n}\n\n",
        "test_list": [
            "candidate() {",
            "otherside_rightangle \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"7\" \"8\") = \"10.63014581273465\" ]]",
            "[[ $(candidate \"3\" \"4\") = \"5\" ]]",
            "[[ $(candidate \"7\" \"15\") = \"16.55294535724685\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_val() {\n    var max_val = 0;\n    for (var i = 0; i < this.length; i++) {\n        var val = this[i];\n        if (val > max_val) {\n            max_val = val;\n        }\n    }\n    return max_val;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_val \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python 3 2 4 5 version\") = \"5\" ]]",
            "[[ $(candidate \"Python 15 20 25\") = \"25\" ]]",
            "[[ $(candidate \"Python 30 20 40 50 version\") = \"50\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsum_div() {\n  let sum = 0;\n  for (let i = 1; i < this.length; i++) {\n    if (this[i] % this[i] == 0) {\n      sum += this[i];\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_div \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"8\") = \"7\" ]]",
            "[[ $(candidate \"12\") = \"16\" ]]",
            "[[ $(candidate \"7\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a shthon function to count inversions in an array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nget_Inv_Count() {\n  var inv_count = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] =='') {\n      inv_count++;\n    }\n  }\n  return inv_count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_Inv_Count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 20 6 4 5\") = \"5\" ]]",
            "[[ $(candidate \"1 2 1\") = \"1\" ]]",
            "[[ $(candidate \"1 2 5 6 1\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested list structure.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nflatten_list() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "flatten_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0 10 20 30 40 50 60 70 80 90 100 110 120\") = \"0 10 20 30 40 50 60 70 80 90 100 110 120\" ]]",
            "[[ $(candidate \"10 20\\n40\\n30 56 25\\n10 20\\n33\\n40\") = \"10 20 40 30 56 25 10 20 33 40\" ]]",
            "[[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"1 2 3 4 5 6 10 11 12 7 8 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a shthon function to find element at a given index after number of rotations.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a newline-separated, space-separated list\n# $3 is an integer\n# $4 is an integer\nfind_Element() {\n  var $1 = \"\";\n  var $2 = \"\";\n  var $3 = \"\";\n  var $4 = \"\";\n  var $5 = \"\";\n  var $6 = \"\";\n  var $7 = \"\";\n  var $8 = \"\";\n  var $9 = \"\";\n  var $10 = \"\";\n  var $11 = \"\";\n  var $12 = \"\";\n  var $13 = \"\";\n  var $14 = \"\";\n  var $15 = \"\";\n  var $16 = \"\";\n  var $17 = \"\";\n  var $18 = \"\";\n  var $19 = \"\";\n  var $20 = \"\";\n  var $21 = \"\";\n  var $22 = \"\";\n  var $23 = \"\";\n  var $24 = \"\";\n  var $25 = \"\";\n  var $26 = \"\";\n  var $27 = \"\";\n  var $28 = \"\";\n  var $29 = \"\";\n  var $30 = \"\";\n  var $31 = \"\";\n  var $32 = \"\";\n  var $33 = \"\";\n  var $34 = \"\";\n  var $35 = \"\";\n  var $36 = \"\";\n  var $37 = \"\";\n  var $38 = \"\";\n  var $39 = \"\";\n  var $40 = \"\";\n  var $41 = \"\";\n  var $42 = \"\";\n  var $43 = \"\";\n  var $44 = \"\";\n  var $45 = \"\";\n  var $46 = \"\";\n  var $47 = \"\";\n  var $48 = \"\";\n  var $49 = \"\";\n  var $50 = \"\";\n  var $51 = \"\";\n  var $52 = \"\";\n  var $53 = \"\";\n  var $54 = \"\";\n  var $\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\" \"0 2\\n0 3\" \"2\" \"1\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"0 1\\n0 2\" \"1\" \"2\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\" \"0 1\\n0 2\" \"1\" \"1\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\n# $3 is an integer\n# $4 is an integer\nmax_sum_increasing_subseq() {\n  let k = 1;\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  let max_sum = 0;\n  let max_sum_i = 0;\n  let max_sum_j = 0;\n  let max_sum_k = 0;\n  let max_sum_i_j = 0;\n  let max_sum_i_k = 0;\n  let max_sum_j_k = 0;\n  let max_sum_i_j_k = 0;\n  let max_sum_i_j_k_j = 0;\n  let max_sum_i_j_k_j_k = 0;\n  let max_sum_i_j_k_j_k_j = 0;\n  let max_sum_i_j_k_j_k_j_k = 0;\n  let max_sum_i_j_k_j_k_j_k_j = 0;\n  let max_sum_i_j_k_j_k_j_k_j_k = 0;\n  let max_sum_i_j_k_j_k_j_k_j_k_j = 0;\n  let max_sum_i_j_k_j_k_j_k_j_k_j_k = 0;\n  let max_sum_i_j_k_j_k_j_k_j_k_j_k_j_k = 0;\n  let max_sum_i_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j_k_j\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_sum_increasing_subseq \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"4\" \"6\") = \"11\" ]]",
            "[[ $(candidate \"1 101 2 3 100 4 5\" \"7\" \"2\" \"5\") = \"7\" ]]",
            "[[ $(candidate \"11 15 19 21 26 28 31\" \"7\" \"2\" \"4\") = \"71\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nlarge_product() {\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n  var w = [];\n  var x = [];\n  var y = [];\n  var z = [];\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n  var w = [];\n  var x = [];\n  var y = [];\n  var z = [];\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "large_product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"3\") = \"60 54 50\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"4\") = \"60 54 50 48\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\" \"3 6 8 9 10 6\" \"5\") = \"60 54 50 48 45\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a shthon function to find the maximum of two numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nmaximum() {\n  return Math.max(1, 2);\n}\n\n",
        "test_list": [
            "candidate() {",
            "maximum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\" \"10\") = \"10\" ]]",
            "[[ $(candidate \"-1\" \"-2\") = \"-1\" ]]",
            "[[ $(candidate \"9\" \"7\") = \"9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to a list of characters.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nstring_to_tuple() {\n    var list = [];\n    for (var i = 0; i < string_length(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_to_char(string_\n}\n\n",
        "test_list": [
            "candidate() {",
            "string_to_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python 3.0\") = \"p y t h o n 3 . 0\" ]]",
            "[[ $(candidate \"item1\") = \"i t e m 1\" ]]",
            "[[ $(candidate \"15.10\") = \"1 5 . 1 0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a shthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nhighest_Power_of_2() {\n  let n = 1;\n  for (let i = 2; i <= n; i++) {\n    if (i & (i - 1)) {\n      continue;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n    }\n    if (i & (i - 1)) {\n      return i;\n    }\n    if (i == n) {\n      return i;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "highest_Power_of_2 \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"8\" ]]",
            "[[ $(candidate \"19\") = \"16\" ]]",
            "[[ $(candidate \"32\") = \"32\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfind_lucas() {\n    let n = 1;\n    while (n < 100) {\n        let m = n + 1;\n        if (m > 100) {\n            m = 100;\n        }\n        if (m == n) {\n            return n;\n        }\n        let a = m;\n        let b = m;\n        let c = m;\n        let d = m;\n        let e = m;\n        let f = m;\n        let g = m;\n        let h = m;\n        let i = m;\n        let j = m;\n        let k = m;\n        let l = m;\n        let m = n;\n        let n = m;\n        let o = m;\n        let p = m;\n        let q = m;\n        let r = m;\n        let s = m;\n        let t = m;\n        let u = m;\n        let v = m;\n        let w = m;\n        let x = m;\n        let y = m;\n        let z = m;\n        let aa = m;\n        let bb = m;\n        let cc = m;\n        let dd = m;\n        let ee = m;\n        let ff = m;\n        let gg = m;\n        let hh = m;\n        let ii = m;\n        let jj = m;\n        let kk = m;\n        let ll = m;\n        let mm = m;\n        let nn = m;\n        let oo = m;\n        let ppp = m;\n        let qqq = m;\n        let rrr = m;\n        let sss = m;\n        let ttt = m;\n        let uu = m;\n        let vv = m;\n        let ww = m;\n        let xxx = m;\n        let yyy = m;\n        let zzz = m;\n        let aaaa = m;\n        let bbbb = m;\n        let cccc = m;\n        let ddd\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_lucas \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"9\") = \"76\" ]]",
            "[[ $(candidate \"4\") = \"7\" ]]",
            "[[ $(candidate \"3\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a string\nadd_string() {\n    var list = [1, 2, 3];\n    var result = list.join(\"\");\n    console.log(result);\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_string \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4\" \"temp{0}\") = \"temp1 temp2 temp3 temp4\" ]]",
            "[[ $(candidate \"a b c d\" \"python{0}\") = \"pythona pythonb pythonc pythond\" ]]",
            "[[ $(candidate \"5 6 7 8\" \"string{0}\") = \"string5 string6 string7 string8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nget_max_sum() {\n  let max_sum = 0;\n  for (let i = 1; i <= 100; i++) {\n    let sum = 0;\n    for (let j = 1; j <= i; j++) {\n      sum += i * j;\n    }\n    if (sum > max_sum) {\n      max_sum = sum;\n    }\n  }\n  return max_sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_max_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"60\") = \"106\" ]]",
            "[[ $(candidate \"10\") = \"12\" ]]",
            "[[ $(candidate \"2\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the list with maximum length.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_length_list() {\n    let max_length = 0;\n    for (let i = 0; i < this.length; i++) {\n        let item = this[i];\n        let length = item.length;\n        if (length > max_length) {\n            max_length = length;\n        }\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_length_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0\\n1 3\\n5 7\\n9 11\\n13 15 17\") = \"3 13 15 17\" ]]",
            "[[ $(candidate \"1 2 3 4 5\\n1 2 3 4\\n1 2 3\\n1 2\\n1\") = \"5 1 2 3 4 5\" ]]",
            "[[ $(candidate \"3 4 5\\n6 7 8 9\\n10 11 12\") = \"4 6 7 8 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given list contains no duplicates.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncheck_distinct() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.indexOf(list[0])!== -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_distinct \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 4 5 6 1 4\") = \"false\" ]]",
            "[[ $(candidate \"1 4 5 6\") = \"true\" ]]",
            "[[ $(candidate \"2 3 4 5 6\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a shthon function to find the first non-repeated character in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfirst_non_repeating_character() {\n  for (var i = 0; i < this.length; i++) {\n    if (this[i]!== this[i]) {\n      return this[i];\n    }\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "first_non_repeating_character \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abcabc\") = \"None\" ]]",
            "[[ $(candidate \"abc\") = \"a\" ]]",
            "[[ $(candidate \"ababc\") = \"c\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncheck_char() {\n    if (this.charAt(0) == this.charAt(1)) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_char \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abba\") = \"Valid\" ]]",
            "[[ $(candidate \"a\") = \"Valid\" ]]",
            "[[ $(candidate \"abcd\") = \"Invalid\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_numbers() {\n  var a = [1, 2, 3];\n  var b = [1, 2, 3];\n  var c = [1, 2, 3];\n  var d = [1, 2, 3];\n  var e = [1, 2, 3];\n  var f = [1, 2, 3];\n  var g = [1, 2, 3];\n  var h = [1, 2, 3];\n  var i = [1, 2, 3];\n  var j = [1, 2, 3];\n  var k = [1, 2, 3];\n  var l = [1, 2, 3];\n  var m = [1, 2, 3];\n  var n = [1, 2, 3];\n  var o = [1, 2, 3];\n  var p = [1, 2, 3];\n  var q = [1, 2, 3];\n  var r = [1, 2, 3];\n  var s = [1, 2, 3];\n  var t = [1, 2, 3];\n  var u = [1, 2, 3];\n  var v = [1, 2, 3];\n  var w = [1, 2, 3];\n  var x = [1, 2, 3];\n  var y = [1, 2, 3];\n  var z = [1, 2, 3];\n  var a = [1, 2, 3];\n  var b = [1, 2, 3];\n  var c = [1, 2, 3];\n  var d = [1, 2, 3];\n  var e = [1, 2, 3];\n  var f = [1, 2, 3];\n  var g = [1, 2, 3];\n  var h = [1, 2, 3];\n  var i = [1, 2, 3];\n  var j = [1, 2, 3];\n  var k = [1, 2, 3];\n  var l = [1, 2, 3];\n  var m = [1\n}\n\n",
        "test_list": [
            "candidate() {",
            "median_numbers \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"25\" \"55\" \"65\") = \"55.0\" ]]",
            "[[ $(candidate \"20\" \"10\" \"30\") = \"20.0\" ]]",
            "[[ $(candidate \"15\" \"45\" \"75\") = \"45.0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsum_of_digits() {\n  var sum = 0;\n  for (var i = 0; i < this.length; i++) {\n    sum += this[i];\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_of_digits \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 2 56\") = \"14\" ]]",
            "[[ $(candidate \"10 20 4 5 b 70 a\") = \"19\" ]]",
            "[[ $(candidate \"10 20 -4 5 -70\") = \"19\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nbitwise_xor() {\n    var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,\n}\n\n",
        "test_list": [
            "candidate() {",
            "bitwise_xor \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"15 6 5 10\" ]]",
            "[[ $(candidate \"11 5 7 10\" \"6 3 4 4\") = \"13 6 3 14\" ]]",
            "[[ $(candidate \"12 6 8 11\" \"7 4 5 6\") = \"11 2 13 13\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a shthon function to identify non-prime numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_not_prime() {\n  return!isPrime(1);\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_not_prime \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"false\" ]]",
            "[[ $(candidate \"10\") = \"true\" ]]",
            "[[ $(candidate \"35\") = \"true\" ]]",
            "[[ $(candidate \"37\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique lists in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nextract_freq() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_freq \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4\\n1 2\\n4 3\\n5 6\") = \"3\" ]]",
            "[[ $(candidate \"4 15\\n2 3\\n5 4\\n6 7\") = \"4\" ]]",
            "[[ $(candidate \"5 16\\n2 3\\n6 5\\n6 9\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of list elements in the given two nested lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nadd_nested_tuples() {\n    var list1 = [1, 2, 3, 4, 5];\n    var list2 = [1, 2, 3, 4, 5];\n    var list3 = [1, 2, 3, 4, 5];\n    var list4 = [1, 2, 3, 4, 5];\n    var list5 = [1, 2, 3, 4, 5];\n    var list6 = [1, 2, 3, 4, 5];\n    var list7 = [1, 2, 3, 4, 5];\n    var list8 = [1, 2, 3, 4, 5];\n    var list9 = [1, 2, 3, 4, 5];\n    var list10 = [1, 2, 3, 4, 5];\n    var list11 = [1, 2, 3, 4, 5];\n    var list12 = [1, 2, 3, 4, 5];\n    var list13 = [1, 2, 3, 4, 5];\n    var list14 = [1, 2, 3, 4, 5];\n    var list15 = [1, 2, 3, 4, 5];\n    var list16 = [1, 2, 3, 4, 5];\n    var list17 = [1, 2, 3, 4, 5];\n    var list18 = [1, 2, 3, 4, 5];\n    var list19 = [1, 2, 3, 4, 5];\n    var list20 = [1, 2, 3, 4, 5];\n    var list21 = [1, 2, 3, 4, 5];\n    var list22 = [1, 2, 3, 4, 5];\n    var list23 = [1, 2, 3, 4, 5];\n    var list24 = [1, 2, 3, 4, 5];\n    var list25 = [1, 2, 3, 4, 5];\n    var list26 = [1, 2, 3, 4, 5\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_nested_tuples \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"7 10\\n7 14\\n3 10\\n8 13\" ]]",
            "[[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"9 12\\n9 16\\n5 12\\n10 15\" ]]",
            "[[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"11 14\\n11 18\\n7 14\\n12 17\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a shthon function to find the minimum of two numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nminimum() {\n  return 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "minimum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"2\") = \"1\" ]]",
            "[[ $(candidate \"-5\" \"-4\") = \"-5\" ]]",
            "[[ $(candidate \"0\" \"0\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within a list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncheck_tuplex() {\n    var list = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_tuplex \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"w 3 r e s o u r c e\" \"r\") = \"true\" ]]",
            "[[ $(candidate \"w 3 r e s o u r c e\" \"5\") = \"false\" ]]",
            "[[ $(candidate \"w 3 r e s o u r c e\" \"3\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a shthon function to find whether the parity of a given number is odd.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfind_Parity() {\n  var x = 1;\n  while (x % 2 == 0) {\n    x = x / 2;\n  }\n  return x;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Parity \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12\") = \"false\" ]]",
            "[[ $(candidate \"7\") = \"true\" ]]",
            "[[ $(candidate \"10\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nrearrange_bigger() {\n    var x = 1;\n    while (x < 10) {\n        x = x + 1;\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "rearrange_bigger \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12\") = \"21\" ]]",
            "[[ $(candidate \"10\") = \"false\" ]]",
            "[[ $(candidate \"102\") = \"120\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nk_smallest_pairs() {\n  let k = 0;\n  let i = 0;\n  let j = 0;\n  let k_smallest_pairs_array = [];\n  let k_smallest_pairs_array_length = 0;\n  let k_smallest_pairs_array_array = [];\n  let k_smallest_pairs_array_array_length = 0;\n  let k_smallest_pairs_array_array_array = [];\n  let k_smallest_pairs_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_array_array_length = 0;\n  let k_smallest_pairs_array_array_array_array_array_array_array = [];\n  let k_smallest_pairs_array_array_array_array_array_array_length = 0;\n  let k_smallest_pairs_\n}\n\n",
        "test_list": [
            "candidate() {",
            "k_smallest_pairs \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 7\" \"2 4 6\" \"2\") = \"1 2\\n1 4\" ]]",
            "[[ $(candidate \"1 3 7\" \"2 4 6\" \"1\") = \"1 2\" ]]",
            "[[ $(candidate \"1 3 7\" \"2 4 6\" \"7\") = \"1 2\\n1 4\\n3 2\\n1 6\\n3 4\\n3 6\\n7 2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of lists within a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmin_product_tuple() {\n    var min_product = 0;\n    var list = [];\n    for (var i = 0; i < 2; i++) {\n        list.push(i);\n    }\n    for (var i = 0; i < 2; i++) {\n        for (var j = 0; j < 2; j++) {\n            if (i == j) {\n                continue;\n            }\n            if (list[i] == list[j]) {\n                continue;\n            }\n            if (list[i] < list[j]) {\n                min_product = min_product + list[i];\n            } else {\n                min_product = min_product + list[j];\n            }\n        }\n    }\n    return min_product;\n}\n\n",
        "test_list": [
            "candidate() {",
            "min_product_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 7\\n2 6\\n1 8\\n4 9\") = \"8\" ]]",
            "[[ $(candidate \"10 20\\n15 2\\n5 10\") = \"30\" ]]",
            "[[ $(candidate \"11 44\\n10 15\\n20 5\\n12 9\") = \"100\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmin_val() {\n    var min = 0;\n    for (var i = 0; i < this.length; i++) {\n        var val = this[i];\n        if (val < min) {\n            min = val;\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "candidate() {",
            "min_val \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python 3 2 4 5 version\") = \"2\" ]]",
            "[[ $(candidate \"Python 15 20 25\") = \"15\" ]]",
            "[[ $(candidate \"Python 30 20 40 50 version\") = \"20\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nsnake_to_camel() {\n  var s = \"\";\n  for (var i = 0; i < 3; i++) {\n    s += \"SNAKE_\" + snake_case(i);\n  }\n  return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "snake_to_camel \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"android_tv\") = \"AndroidTv\" ]]",
            "[[ $(candidate \"google_pixel\") = \"GooglePixel\" ]]",
            "[[ $(candidate \"apple_watch\") = \"AppleWatch\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a shthon function to remove odd numbers from a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nremove_odd() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    var odd = list.indexOf(1);\n    if (odd % 2 == 0) {\n        list.splice(odd, 1);\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_odd \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"2\" ]]",
            "[[ $(candidate \"2 4 6\") = \"2 4 6\" ]]",
            "[[ $(candidate \"10 20 3\") = \"10 20\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a shthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\noverlapping() {\n    var a = [];\n    var b = [];\n    for (var i = 0; i < 10; i++) {\n        a.push(i);\n        b.push(i);\n    }\n    return a.some(function(x) {\n        return x == b[i];\n    });\n}\n\n",
        "test_list": [
            "candidate() {",
            "overlapping \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3\" \"4 5 6\") = \"false\" ]]",
            "[[ $(candidate \"1 4 5\" \"1 4 5\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a shthon function to find a pair with highest product from a given array of integers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_Product() {\n    let max = 0;\n    let max_product = 0;\n    for (let i = 0; i < this.length; i++) {\n        let product = this[i];\n        let product_product = product * product;\n        if (product_product > max_product) {\n            max_product = product_product;\n            max = i;\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_Product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 7 0 8 4\") = \"7 8\" ]]",
            "[[ $(candidate \"0 -1 -2 -4 5 0 -6\") = \"-4 -6\" ]]",
            "[[ $(candidate \"1 2 3\") = \"2 3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ngroup_tuples() {\n    var group = [];\n    for (var i = 0; i < arguments.length; i++) {\n        var line = arguments[i];\n        var line_split = line.split(' ');\n        for (var j = 0; j < line_split.length; j++) {\n            group.push(line_split[j]);\n        }\n    }\n    return group;\n}\n\n",
        "test_list": [
            "candidate() {",
            "group_tuples \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"x y\\nx z\\nw t\") = \"x y z\\nw t\" ]]",
            "[[ $(candidate \"a b\\na c\\nd e\") = \"a b c\\nd e\" ]]",
            "[[ $(candidate \"f g\\nf g\\nh i\") = \"f g g\\nh i\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a shthon function to find the element of a list having maximum length.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nFind_Max() {\n  var max = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n    }\n  }\n  return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "Find_Max \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"A\\nA B\\nA B C\") = \"A B C\" ]]",
            "[[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1 2 3\" ]]",
            "[[ $(candidate \"1 1\\n1 2 3\\n1 5 6 1\") = \"1 5 6 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nround_and_sum() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    var sum = 0;\n    for (var i = 0; i < list.length; i++) {\n        sum += list[i];\n    }\n    console.log(sum);\n}\n\n",
        "test_list": [
            "candidate() {",
            "round_and_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5\") = \"243\" ]]",
            "[[ $(candidate \"5 2 9 24.3 29\") = \"345\" ]]",
            "[[ $(candidate \"25.0 56.7 89.2\") = \"513\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a shthon function to find the cube sum of first n even natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncube_Sum() {\n  let sum = 0;\n  for (let i = 1; i < n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "cube_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"72\" ]]",
            "[[ $(candidate \"3\") = \"288\" ]]",
            "[[ $(candidate \"4\") = \"800\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of list by the delimiter.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nconcatenate_tuple() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.join('');\n}\n\n",
        "test_list": [
            "candidate() {",
            "concatenate_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"ID is 4 UTS\") = \"ID-is-4-UTS\" ]]",
            "[[ $(candidate \"QWE is 4 RTY\") = \"QWE-is-4-RTY\" ]]",
            "[[ $(candidate \"ZEN is 4 OP\") = \"ZEN-is-4-OP\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a shthon function to find the average of cubes of first n natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfind_Average_Of_Cube() {\n  var n = 1;\n  var sum = 0;\n  var sum_of_cubes = 0;\n  var sum_of_cubes_of_n = 0;\n  var sum_of_cubes_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n = 0;\n  var sum_of_cubes_of_n_of_n_of_n =\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Average_Of_Cube \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"4.5\" ]]",
            "[[ $(candidate \"3\") = \"12\" ]]",
            "[[ $(candidate \"1\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nextract_rear() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_rear \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Mers for Vers\") = \"s r s\" ]]",
            "[[ $(candidate \"Avenge for People\") = \"e r e\" ]]",
            "[[ $(candidate \"Gotta get go\") = \"a t o\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of sublists containing a particular element.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a $Any\ncount_element_in_list() {\n  var $1 = \"\";\n  var $2 = \"\";\n  var $3 = \"\";\n  var $4 = \"\";\n  var $5 = \"\";\n  var $6 = \"\";\n  var $7 = \"\";\n  var $8 = \"\";\n  var $9 = \"\";\n  var $10 = \"\";\n  var $11 = \"\";\n  var $12 = \"\";\n  var $13 = \"\";\n  var $14 = \"\";\n  var $15 = \"\";\n  var $16 = \"\";\n  var $17 = \"\";\n  var $18 = \"\";\n  var $19 = \"\";\n  var $20 = \"\";\n  var $21 = \"\";\n  var $22 = \"\";\n  var $23 = \"\";\n  var $24 = \"\";\n  var $25 = \"\";\n  var $26 = \"\";\n  var $27 = \"\";\n  var $28 = \"\";\n  var $29 = \"\";\n  var $30 = \"\";\n  var $31 = \"\";\n  var $32 = \"\";\n  var $33 = \"\";\n  var $34 = \"\";\n  var $35 = \"\";\n  var $36 = \"\";\n  var $37 = \"\";\n  var $38 = \"\";\n  var $39 = \"\";\n  var $40 = \"\";\n  var $41 = \"\";\n  var $42 = \"\";\n  var $43 = \"\";\n  var $44 = \"\";\n  var $45 = \"\";\n  var $46 = \"\";\n  var $47 = \"\";\n  var $48 = \"\";\n  var $49 = \"\";\n  var $50 = \"\";\n  var $51 = \"\";\n  var $52 = \"\";\n  var $53 = \"\";\n  var $54 = \"\";\n  var $55 = \"\";\n  var $56 = \"\";\n  var $57\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_element_in_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n5 7\\n1 11\\n1 15 7\" \"1\") = \"3\" ]]",
            "[[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"A\") = \"3\" ]]",
            "[[ $(candidate \"A B\\nA C\\nA D E\\nB C D\" \"E\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfilter_oddnumbers() {\n    for (var i = 0; i < 2; i++) {\n        if (i % 2 == 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "filter_oddnumbers \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 3 5 7 9\" ]]",
            "[[ $(candidate \"10 20 45 67 84 93\") = \"45 67 93\" ]]",
            "[[ $(candidate \"5 7 9 8 6 4 3\") = \"5 7 9 3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nchange_date_format() {\n    var date = new Date();\n    var date_str = date.toString();\n    var date_str_yyyy = date_str.substring(0, 4);\n    var date_str_mm = date_str.substring(5, 7);\n    var date_str_dd = date_str.substring(8, 10);\n    var date_str_yy = date_str.substring(11, 13);\n    var date_str_mm = date_str.substring(14, 16);\n    var date_str_dd = date_str.substring(17, 19);\n    var date_str_yy = date_str.substring(20, 22);\n    var date_str_mm = date_str.substring(23, 25);\n    var date_str_dd = date_str.substring(26, 28);\n    var date_str_yy = date_str.substring(29, 31);\n    var date_str_mm = date_str.substring(32, 33);\n    var date_str_dd = date_str.substring(34, 36);\n    var date_str_yy = date_str.substring(37, 38);\n    var date_str_mm = date_str.substring(39, 41);\n    var date_str_dd = date_str.substring(42, 44);\n    var date_str_yy = date_str.substring(45, 47);\n    var date_str_mm = date_str.substring(48, 50);\n    var date_str_dd = date_str.substring(51, 53);\n    var date_str_yy = date_str.substring(54, 56);\n    var date_str_mm = date_str.substring(57, 59);\n    var date_str_dd = date_str.substring(60, 62);\n    var date_str_yy = date_str.substring(63, 65);\n    \n}\n\n",
        "test_list": [
            "candidate() {",
            "change_date_format \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2026-01-02\") = \"02-01-2026\" ]]",
            "[[ $(candidate \"2020-11-13\") = \"13-11-2020\" ]]",
            "[[ $(candidate \"2021-04-26\") = \"26-04-2021\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nshell_sort() {\n    const a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const e = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const f = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const h = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const i = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const j = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const k = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const m = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const o = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const p = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const q = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    const s =\n}\n\n",
        "test_list": [
            "candidate() {",
            "shell_sort \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12 23 4 5 3 2 12 81 56 95\") = \"2 3 4 5 12 12 23 56 81 95\" ]]",
            "[[ $(candidate \"24 22 39 34 87 73 68\") = \"22 24 34 39 68 73 87\" ]]",
            "[[ $(candidate \"32 30 16 96 82 83 74\") = \"16 30 32 74 82 83 96\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and lists from the given two lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nand_tuples() {\n  $1 = [\"a\", \"b\", \"c\"]\n  $2 = [\"d\", \"e\", \"f\"]\n  $3 = [\"g\", \"h\", \"i\"]\n  $4 = [\"j\", \"k\", \"l\"]\n  $5 = [\"m\", \"n\", \"o\"]\n  $6 = [\"p\", \"q\", \"r\"]\n  $7 = [\"s\", \"t\", \"u\"]\n  $8 = [\"v\", \"w\", \"x\"]\n  $9 = [\"y\", \"z\"]\n  $10 = [\"a\", \"b\", \"c\"]\n  $11 = [\"d\", \"e\", \"f\"]\n  $12 = [\"g\", \"h\", \"i\"]\n  $13 = [\"j\", \"k\", \"l\"]\n  $14 = [\"m\", \"n\", \"o\"]\n  $15 = [\"p\", \"q\", \"r\"]\n  $16 = [\"s\", \"t\", \"u\"]\n  $17 = [\"v\", \"w\", \"x\"]\n  $18 = [\"y\", \"z\"]\n  $19 = [\"a\", \"b\", \"c\"]\n  $20 = [\"d\", \"e\", \"f\"]\n  $21 = [\"g\", \"h\", \"i\"]\n  $22 = [\"j\", \"k\", \"l\"]\n  $23 = [\"m\", \"n\", \"o\"]\n  $24 = [\"p\", \"q\", \"r\"]\n  $25 = [\"s\", \"t\", \"u\"]\n  $26 = [\"v\", \"w\", \"x\"]\n  $27 = [\"y\", \"z\"]\n  $28 = [\"a\", \"b\", \"c\"]\n  $29 = [\"d\", \"e\", \"f\"]\n  $30 = [\"g\", \"h\", \"i\"]\n  $31 = [\"j\", \"k\", \"l\"]\n  $32 = [\"m\", \"n\", \"o\"]\n  $33 = [\"p\", \"q\", \"r\"]\n  $34 =\n}\n\n",
        "test_list": [
            "candidate() {",
            "and_tuples \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 6 9\" \"5 2 3 3\") = \"0 0 2 1\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"5 6 7 8\") = \"1 2 3 0\" ]]",
            "[[ $(candidate \"8 9 11 12\" \"7 13 14 17\") = \"0 9 10 0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nparabola_directrix() {\n  var x = 1;\n  var y = 2;\n  var z = 3;\n  var a = 4;\n  var b = 5;\n  var c = 6;\n  var d = 7;\n  var e = 8;\n  var f = 9;\n  var g = 10;\n  var h = 11;\n  var i = 12;\n  var j = 13;\n  var k = 14;\n  var l = 15;\n  var m = 16;\n  var n = 17;\n  var o = 18;\n  var p = 19;\n  var q = 20;\n  var r = 21;\n  var s = 22;\n  var t = 23;\n  var u = 24;\n  var v = 25;\n  var w = 26;\n  var x1 = 27;\n  var y1 = 28;\n  var z1 = 29;\n  var a1 = 30;\n  var b1 = 31;\n  var c1 = 32;\n  var d1 = 33;\n  var e1 = 34;\n  var f1 = 35;\n  var g1 = 36;\n  var h1 = 37;\n  var i1 = 38;\n  var j1 = 39;\n  var k1 = 40;\n  var l1 = 41;\n  var m1 = 42;\n  var n1 = 43;\n  var o1 = 44;\n  var p1 = 45;\n  var q1 = 46;\n  var r1 = 47;\n  var s1 = 48;\n  var t1 = 49;\n  var u1 = 50;\n  var v1 = 51;\n  var w1 = 52;\n  var x2 = 53;\n  var y2 = 54;\n  var z2 = 55;\n  var a2 = 56;\n  var b2 = 57;\n  var c2 = 58;\n  var d2 = 59;\n  var e2 = 60;\n  var f2\n}\n\n",
        "test_list": [
            "candidate() {",
            "parabola_directrix \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\" \"3\" \"2\") = \"-198\" ]]",
            "[[ $(candidate \"9\" \"8\" \"4\") = \"-2336\" ]]",
            "[[ $(candidate \"2\" \"4\" \"6\") = \"-130\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon_element() {\n  if (len(list1) == 0) return false;\n  if (len(list2) == 0) return false;\n  if (len(list1) == 1) return list1[0] == list2[0];\n  if (len(list2) == 1) return list2[0] == list1[0];\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "common_element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\" \"5 6 7 8 9\") = \"true\" ]]",
            "[[ $(candidate \"1 2 3 4 5\" \"6 7 8 9\") = \"None\" ]]",
            "[[ $(candidate \"a b c\" \"d b e\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nmedian_trapezium() {\n  let x = 1;\n  let y = 2;\n  let z = 3;\n  let a = 4;\n  let b = 5;\n  let c = 6;\n  let d = 7;\n  let e = 8;\n  let f = 9;\n  let g = 10;\n  let h = 11;\n  let i = 12;\n  let j = 13;\n  let k = 14;\n  let l = 15;\n  let m = 16;\n  let n = 17;\n  let o = 18;\n  let p = 19;\n  let q = 20;\n  let r = 21;\n  let s = 22;\n  let t = 23;\n  let u = 24;\n  let v = 25;\n  let w = 26;\n  let x = 27;\n  let y = 28;\n  let z = 29;\n  let a = 30;\n  let b = 31;\n  let c = 32;\n  let d = 33;\n  let e = 34;\n  let f = 35;\n  let g = 36;\n  let h = 37;\n  let i = 38;\n  let j = 39;\n  let k = 40;\n  let l = 41;\n  let m = 42;\n  let n = 43;\n  let o = 44;\n  let p = 45;\n  let q = 46;\n  let r = 47;\n  let s = 48;\n  let t = 49;\n  let u = 50;\n  let v = 51;\n  let w = 52;\n  let x = 53;\n  let y = 54;\n  let z = 55;\n  let a = 56;\n  let b = 57;\n  let c = 58;\n  let d = 59;\n  let e = 60;\n  let f = 61;\n  let g = 62;\n  let h = 63;\n  let i = 64;\n  let j = 65;\n  let k\n}\n\n",
        "test_list": [
            "candidate() {",
            "median_trapezium \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"15\" \"25\" \"35\") = \"20\" ]]",
            "[[ $(candidate \"10\" \"20\" \"30\") = \"15\" ]]",
            "[[ $(candidate \"6\" \"9\" \"4\") = \"7.5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_greater() {\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c = [1, 2, 3, 4, 5];\n    var d = [1, 2, 3, 4, 5];\n    var e = [1, 2, 3, 4, 5];\n    var f = [1, 2, 3, 4, 5];\n    var g = [1, 2, 3, 4, 5];\n    var h = [1, 2, 3, 4, 5];\n    var i = [1, 2, 3, 4, 5];\n    var j = [1, 2, 3, 4, 5];\n    var k = [1, 2, 3, 4, 5];\n    var l = [1, 2, 3, 4, 5];\n    var m = [1, 2, 3, 4, 5];\n    var n = [1, 2, 3, 4, 5];\n    var o = [1, 2, 3, 4, 5];\n    var p = [1, 2, 3, 4, 5];\n    var q = [1, 2, 3, 4, 5];\n    var r = [1, 2, 3, 4, 5];\n    var s = [1, 2, 3, 4, 5];\n    var t = [1, 2, 3, 4, 5];\n    var u = [1, 2, 3, 4, 5];\n    var v = [1, 2, 3, 4, 5];\n    var w = [1, 2, 3, 4, 5];\n    var x = [1, 2, 3, 4, 5];\n    var y = [1, 2, 3, 4, 5];\n    var z = [1, 2, 3, 4, 5];\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c = [1, 2, 3\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_greater \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\" \"4\") = \"false\" ]]",
            "[[ $(candidate \"2 3 4 5 6\" \"8\") = \"true\" ]]",
            "[[ $(candidate \"9 7 4 8 6 1\" \"11\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_one() {\n  if (text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text_match_one_b(text\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_one \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"ac\") = \"false\" ]]",
            "[[ $(candidate \"dc\") = \"false\" ]]",
            "[[ $(candidate \"abba\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a shthon function to find the last digit of a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nlast_Digit() {\n  return (this.toString().length - 1);\n}\n\n",
        "test_list": [
            "candidate() {",
            "last_Digit \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"123\") = \"3\" ]]",
            "[[ $(candidate \"25\") = \"5\" ]]",
            "[[ $(candidate \"30\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a shthon function to return the negative numbers in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nneg_nos() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "neg_nos \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"-1 4 5 -6\") = \"-1 -6\" ]]",
            "[[ $(candidate \"-1 -2 3 4\") = \"-1 -2\" ]]",
            "[[ $(candidate \"-7 -6 8 9\") = \"-7 -6\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremove_odd() {\n    var s = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == '0') {\n            s = s.substring(0, i);\n        }\n    }\n    return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_odd \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python\") = \"yhn\" ]]",
            "[[ $(candidate \"program\") = \"rga\" ]]",
            "[[ $(candidate \"language\") = \"agae\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional list pairs.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ncount_bidirectional() {\n  var list = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_bidirectional \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6\\n1 2\\n6 5\\n9 1\\n6 5\\n2 1\") = \"3\" ]]",
            "[[ $(candidate \"5 6\\n1 3\\n6 5\\n9 1\\n6 5\\n2 1\") = \"2\" ]]",
            "[[ $(candidate \"5 6\\n1 2\\n6 5\\n9 2\\n6 5\\n2 1\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join a list of multiple integers into a single integer.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmultiple_to_single() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "multiple_to_single \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"11 33 50\") = \"113350\" ]]",
            "[[ $(candidate \"-1 2 3 4 5 6\") = \"-123456\" ]]",
            "[[ $(candidate \"10 15 20 25\") = \"10152025\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfind_adverb_position() {\n    let sentence = \"I am a sentence.\";\n    let first_adverb = sentence.find(adverb);\n    let first_pos = sentence.find(adverb, first_adverb);\n    return [first_pos, first_adverb];\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_adverb_position \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"clearly\\!\\! we can see the sky\") = \"0 7 clearly\" ]]",
            "[[ $(candidate \"seriously\\!\\! there are many roses\") = \"0 9 seriously\" ]]",
            "[[ $(candidate \"unfortunately\\!\\! sita is going to home\") = \"0 13 unfortunately\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsurfacearea_cube() {\n  var x = 1;\n  var y = 1;\n  var z = 1;\n  var a = 1;\n  var b = 1;\n  var c = 1;\n  var d = 1;\n  var e = 1;\n  var f = 1;\n  var g = 1;\n  var h = 1;\n  var i = 1;\n  var j = 1;\n  var k = 1;\n  var l = 1;\n  var m = 1;\n  var n = 1;\n  var o = 1;\n  var p = 1;\n  var q = 1;\n  var r = 1;\n  var s = 1;\n  var t = 1;\n  var u = 1;\n  var v = 1;\n  var w = 1;\n  var x1 = 1;\n  var y1 = 1;\n  var z1 = 1;\n  var a1 = 1;\n  var b1 = 1;\n  var c1 = 1;\n  var d1 = 1;\n  var e1 = 1;\n  var f1 = 1;\n  var g1 = 1;\n  var h1 = 1;\n  var i1 = 1;\n  var j1 = 1;\n  var k1 = 1;\n  var l1 = 1;\n  var m1 = 1;\n  var n1 = 1;\n  var o1 = 1;\n  var p1 = 1;\n  var q1 = 1;\n  var r1 = 1;\n  var s1 = 1;\n  var t1 = 1;\n  var u1 = 1;\n  var v1 = 1;\n  var w1 = 1;\n  var x2 = 1;\n  var y2 = 1;\n  var z2 = 1;\n  var a2 = 1;\n  var b2 = 1;\n  var c2 = 1;\n  var d2 = 1;\n  var e2 = 1;\n  var f2 = 1;\n  var g2 = 1;\n  var\n}\n\n",
        "test_list": [
            "candidate() {",
            "surfacearea_cube \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"150\" ]]",
            "[[ $(candidate \"3\") = \"54\" ]]",
            "[[ $(candidate \"10\") = \"600\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\npositive_count() {\n  var count = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "positive_count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\") = \"0.54\" ]]",
            "[[ $(candidate \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"0.69\" ]]",
            "[[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\") = \"0.56\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a shthon function to find the largest negative number from the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nlargest_neg() {\n    let max = 0;\n    let max_pos = 0;\n    let max_neg = 0;\n    for (let i = 0; i < this.length; i++) {\n        let num = this[i];\n        if (num < 0) {\n            max_pos = i;\n            max = num;\n        } else if (num > 0) {\n            max_neg = i;\n            max = num;\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "largest_neg \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 -4 -6\") = \"-6\" ]]",
            "[[ $(candidate \"1 2 3 -8 -9\") = \"-9\" ]]",
            "[[ $(candidate \"1 2 3 4 -1\") = \"-1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each list by k in the given lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\ntrim_tuple() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        var list_i = arguments[i];\n        var list_i_len = list_i.length;\n        for (var j = 0; j < list_i_len; j++) {\n            var list_j = list_i[j];\n            if (list_j.length > list_i_len) {\n                list.push(list_j.substring(0, list_i_len));\n            } else {\n                list.push(list_j);\n            }\n        }\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "trim_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"2\") = \"2\\n9\\n2\\n2\" ]]",
            "[[ $(candidate \"5 3 2 1 4\\n3 4 9 2 1\\n9 1 2 3 5\\n4 8 2 1 7\" \"1\") = \"3 2 1\\n4 9 2\\n1 2 3\\n8 2 1\" ]]",
            "[[ $(candidate \"7 8 4 9\\n11 8 12 4\\n4 1 7 8\\n3 6 9 7\" \"1\") = \"8 4\\n8 12\\n1 7\\n6 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of list elements in the given two lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is a newline-separated, space-separated list\nindex_multiplication() {\n    var list1 = [1,2,3,4,5,6,7,8,9];\n    var list2 = [1,2,3,4,5,6,7,8,9];\n    var result = 0;\n    for (var i = 0; i < list1.length; i++) {\n        result += list1[i] * list2[i];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "index_multiplication \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n4 5\\n2 9\\n1 10\" \"6 7\\n3 9\\n1 1\\n7 3\") = \"6 21\\n12 45\\n2 9\\n7 30\" ]]",
            "[[ $(candidate \"2 4\\n5 6\\n3 10\\n2 11\" \"7 8\\n4 10\\n2 2\\n8 4\") = \"14 32\\n20 60\\n6 20\\n16 44\" ]]",
            "[[ $(candidate \"3 5\\n6 7\\n4 11\\n3 12\" \"8 9\\n5 11\\n3 3\\n9 5\") = \"24 45\\n30 77\\n12 33\\n27 60\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a shthon function to count the occurence of all elements of list in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a $Any\n# $2 is a space-separated list\ncount_Occurrence() {\n  var $1 = $2\n  var $2 = $1.split(/\\s+/)\n  var $3 = $1.split(/\\s+/)\n  var $4 = $1.split(/\\s+/)\n  var $5 = $1.split(/\\s+/)\n  var $6 = $1.split(/\\s+/)\n  var $7 = $1.split(/\\s+/)\n  var $8 = $1.split(/\\s+/)\n  var $9 = $1.split(/\\s+/)\n  var $10 = $1.split(/\\s+/)\n  var $11 = $1.split(/\\s+/)\n  var $12 = $1.split(/\\s+/)\n  var $13 = $1.split(/\\s+/)\n  var $14 = $1.split(/\\s+/)\n  var $15 = $1.split(/\\s+/)\n  var $16 = $1.split(/\\s+/)\n  var $17 = $1.split(/\\s+/)\n  var $18 = $1.split(/\\s+/)\n  var $19 = $1.split(/\\s+/)\n  var $20 = $1.split(/\\s+/)\n  var $21 = $1.split(/\\s+/)\n  var $22 = $1.split(/\\s+/)\n  var $23 = $1.split(/\\s+/)\n  var $24 = $1.split(/\\s+/)\n  var $25 = $1.split(/\\s+/)\n  var $26 = $1.split(/\\s+/)\n  var $27 = $1.split(/\\s+/)\n  var $28 = $1.split(/\\s+/)\n  var $29 = $1.split(/\\s+/)\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_Occurrence \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"a a c b d\" \"a b\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 1 4 6 7 1 4\" \"1 4 7\") = \"6\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\" \"1 2\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncube_nums() {\n  var cube_nums = [];\n  for (var i = 0; i < 10; i++) {\n    cube_nums.push(i);\n  }\n  return cube_nums;\n}\n\n",
        "test_list": [
            "candidate() {",
            "cube_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 8 27 64 125 216 343 512 729 1000\" ]]",
            "[[ $(candidate \"10 20 30\") = \"1000 8000 27000\" ]]",
            "[[ $(candidate \"12 15\") = \"1728 3375\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncal_sum() {\n  var sum = 0;\n  for (var i = 0; i < 10; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "cal_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"9\") = \"49\" ]]",
            "[[ $(candidate \"10\") = \"66\" ]]",
            "[[ $(candidate \"11\") = \"88\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given list of string values.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nextract_string() {\n    var list = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"=\",\n        \"<\",\n        \">\",\n        \"|\",\n        \"&\",\n        \"^\",\n        \"~\",\n        \"`\",\n        \"{\",\n        \"}\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"|\",\n        \"\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_string \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python list exercises practice solution\" \"8\") = \"practice solution\" ]]",
            "[[ $(candidate \"Python list exercises practice solution\" \"6\") = \"Python\" ]]",
            "[[ $(candidate \"Python list exercises practice solution\" \"9\") = \"exercises\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremove_whitespaces() {\n    let s = \"\";\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] == \" \") {\n            s += \" \";\n        } else {\n            s += this[i];\n        }\n    }\n    return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_whitespaces \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \" Google    Flutter \") = \"GoogleFlutter\" ]]",
            "[[ $(candidate \" Google    Dart \") = \"GoogleDart\" ]]",
            "[[ $(candidate \" iOS    Swift \") = \"iOSSwift\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nloss_amount() {\n  var loss = 0;\n  var sale = 0;\n  for (var i = 0; i < 10; i++) {\n    if (i % 2 == 0) {\n      sale += i;\n    } else {\n      loss += i;\n    }\n  }\n  return loss;\n}\n\n",
        "test_list": [
            "candidate() {",
            "loss_amount \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1500\" \"1200\") = \"0\" ]]",
            "[[ $(candidate \"100\" \"200\") = \"100\" ]]",
            "[[ $(candidate \"2000\" \"5000\") = \"3000\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a shthon function to find the sum of even factors of a number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsumofFactors() {\n  let sum = 0;\n  for (let i = 1; i < 10; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sumofFactors \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"18\") = \"26\" ]]",
            "[[ $(candidate \"30\") = \"48\" ]]",
            "[[ $(candidate \"6\") = \"8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_wordz() {\n  return 'z'\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_wordz \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"pythonz.\") = \"true\" ]]",
            "[[ $(candidate \"xyz.\") = \"true\" ]]",
            "[[ $(candidate \"  lang  .\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncheck_monthnumb_number() {\n    var monthnumb = 1;\n    while (monthnumb <= 31) {\n        if (monthnumb % 4 == 0) {\n            return true;\n        }\n        monthnumb++;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_monthnumb_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"true\" ]]",
            "[[ $(candidate \"2\") = \"false\" ]]",
            "[[ $(candidate \"6\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given list of string values.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nreverse_string_list() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "reverse_string_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Red Green Blue White Black\") = \"deR neerG eulB etihW kcalB\" ]]",
            "[[ $(candidate \"john amal joel george\") = \"nhoj lama leoj egroeg\" ]]",
            "[[ $(candidate \"jack john mary\") = \"kcaj nhoj yram\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a shthon function to find the sublist having minimum length.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nFind_Min() {\n  var list = [];\n  for (var i = 0; i < argv.length; i++) {\n    list.push(argv[i]);\n  }\n  var min = list.length;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].length < min) {\n      min = list[i].length;\n    }\n  }\n  return min;\n}\n\n",
        "test_list": [
            "candidate() {",
            "Find_Min \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\\n1 2\\n1 2 3\") = \"1\" ]]",
            "[[ $(candidate \"1 1\\n1 1 1\\n1 2 7 8\") = \"1 1\" ]]",
            "[[ $(candidate \"x\\nx y\\nx y z\") = \"x\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nrectangle_area() {\n  var x = 0;\n  var y = 0;\n  var width = 0;\n  var height = 0;\n  var area = 0;\n  while (x < width) {\n    if (y < height) {\n      area += (x * y);\n    }\n    x++;\n  }\n  return area;\n}\n\n",
        "test_list": [
            "candidate() {",
            "rectangle_area \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"20\") = \"200\" ]]",
            "[[ $(candidate \"10\" \"5\") = \"50\" ]]",
            "[[ $(candidate \"4\" \"2\") = \"8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremove_uppercase() {\n    var s = \"Hello World\";\n    var r = s.toLowerCase();\n    var r2 = s.toUpperCase();\n    var r3 = s.toUpperCase();\n    var r4 = s.toLowerCase();\n    var r5 = s.toUpperCase();\n    var r6 = s.toLowerCase();\n    var r7 = s.toUpperCase();\n    var r8 = s.toLowerCase();\n    var r9 = s.toUpperCase();\n    var r10 = s.toLowerCase();\n    var r11 = s.toUpperCase();\n    var r12 = s.toLowerCase();\n    var r13 = s.toUpperCase();\n    var r14 = s.toLowerCase();\n    var r15 = s.toUpperCase();\n    var r16 = s.toLowerCase();\n    var r17 = s.toUpperCase();\n    var r18 = s.toLowerCase();\n    var r19 = s.toUpperCase();\n    var r20 = s.toLowerCase();\n    var r21 = s.toUpperCase();\n    var r22 = s.toLowerCase();\n    var r23 = s.toUpperCase();\n    var r24 = s.toLowerCase();\n    var r25 = s.toUpperCase();\n    var r26 = s.toLowerCase();\n    var r27 = s.toUpperCase();\n    var r28 = s.toLowerCase();\n    var r29 = s.toUpperCase();\n    var r30 = s.toLowerCase();\n    var r31 = s.toUpperCase();\n    var r32 = s.toLowerCase();\n    var r33 = s.toUpperCase();\n    var r34 = s.toLowerCase();\n    var r35 = s.toUpperCase();\n    var r36 = s.toLowerCase();\n    var r37 = s.toUpperCase();\n    \n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_uppercase \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"cAstyoUrFavoRitETVshoWs\") = \"cstyoravoitshos\" ]]",
            "[[ $(candidate \"wAtchTheinTernEtrAdIo\") = \"wtchheinerntrdo\" ]]",
            "[[ $(candidate \"VoicESeaRchAndreComMendaTionS\") = \"oiceachndreomendaion\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a shthon function to get the first element of each sublist.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nExtract() {\n  var list = [];\n  for (var i = 0; i < arguments.length; i++) {\n    list.push(arguments[i]);\n  }\n  return list.join('\\n');\n}\n\n",
        "test_list": [
            "candidate() {",
            "Extract \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2\\n3 4 5\\n6 7 8 9\") = \"1 3 6\" ]]",
            "[[ $(candidate \"1 2 3\\n4 5\") = \"1 4\" ]]",
            "[[ $(candidate \"9 8 1\\n1 2\") = \"9 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a shthon function to count the upper case characters in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nupper_ctr() {\n  var c = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] === this[i].toUpperCase()) {\n      c++;\n    }\n  }\n  return c;\n}\n\n",
        "test_list": [
            "candidate() {",
            "upper_ctr \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"PYthon\") = \"1\" ]]",
            "[[ $(candidate \"BigData\") = \"1\" ]]",
            "[[ $(candidate \"program\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "462",
        "title": "combinations_list",
        "text": "Write a function to find all possible combinations of the elements of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncombinations_list() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "combinations_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"orange red green blue\") = \"\\norange\\nred\\nred orange\\ngreen\\ngreen orange\\ngreen red\\ngreen red orange\\nblue\\nblue orange\\nblue red\\nblue red orange\\nblue green\\nblue green orange\\nblue green red\\nblue green red orange\" ]]",
            "[[ $(candidate \"red green blue white black orange\") = \"\\nred\\ngreen\\ngreen red\\nblue\\nblue red\\nblue green\\nblue green red\\nwhite\\nwhite red\\nwhite green\\nwhite green red\\nwhite blue\\nwhite blue red\\nwhite blue green\\nwhite blue green red\\nblack\\nblack red\\nblack green\\nblack green red\\nblack blue\\nblack blue red\\nblack blue green\\nblack blue green red\\nblack white\\nblack white red\\nblack white green\\nblack white green red\\nblack white blue\\nblack white blue red\\nblack white blue green\\nblack white blue green red\\norange\\norange red\\norange green\\norange green red\\norange blue\\norange blue red\\norange blue green\\norange blue green red\\norange white\\norange white red\\norange white green\\norange white green red\\norange white blue\\norange white blue red\\norange white blue green\\norange white blue green red\\norange black\\norange black red\\norange black green\\norange black green red\\norange black blue\\norange black blue red\\norange black blue green\\norange black blue green red\\norange black white\\norange black white red\\norange black white green\\norange black white green red\\norange black white blue\\norange black white blue red\\norange black white blue green\\norange black white blue green red\" ]]",
            "[[ $(candidate \"red green black orange\") = \"\\nred\\ngreen\\ngreen red\\nblack\\nblack red\\nblack green\\nblack green red\\norange\\norange red\\norange green\\norange green red\\norange black\\norange black red\\norange black green\\norange black green red\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_subarray_product() {\n  let max_product = 0;\n  let max_subarray = [];\n  for (let i = 0; i < this.length; i++) {\n    let subarray = this[i].split(' ');\n    let product = subarray[0];\n    let subarray_length = subarray.length;\n    for (let j = 1; j < subarray_length; j++) {\n      let product_subarray = subarray[j].split(' ');\n      let product_subarray_length = product_subarray.length;\n      for (let k = 0; k < product_subarray_length; k++) {\n        let product_subarray_product = product_subarray[k].split(' ');\n        let product_subarray_product_length = product_subarray_product.length;\n        for (let l = 0; l < product_subarray_product_length; l++) {\n          let product_subarray_product_product = product_subarray_product[l].split(' ');\n          let product_subarray_product_product_length = product_subarray_product_product.length;\n          for (let m = 0; m < product_subarray_product_product_length; m++) {\n            let product_subarray_product_product_product = product_subarray_product_product[m].split(' ');\n            let product_subarray_product_product_product_length = product_subarray_product_product_product.length;\n            for (let n = 0; n < product_subarray_product_product_product_length; n++) {\n              let product_subarray_product_product_product_product = product_subarray_product_product_product[n].split(' ');\n              let product_subarray_product_product_product_product_length = product_subarray_product_product_product_product.length;\n              for (let o = 0; o < product_subarray_product_product_product_product_length; o++) {\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_subarray_product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 -2 -3 0 7 -8 -2\") = \"112\" ]]",
            "[[ $(candidate \"6 -3 -10 0 2\") = \"180\" ]]",
            "[[ $(candidate \"-2 -40 0 -2 -3\") = \"80\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "465",
        "title": "drop_empty",
        "text": "Write a function to drop empty items from a given CSV.",
        "code": "#!/bin/bash\n#\n# $1 is a two column CSV in key,value order\ndrop_empty() {\n    var csv = \"\";\n    for (var i = 0; i < 2; i++) {\n        csv += \",\";\n    }\n    return csv;\n}\n\n",
        "test_list": [
            "candidate() {",
            "drop_empty \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"c1,Red\\nc2,Green\\nc3,None\") = \"c1,Red\\nc2,Green\" ]]",
            "[[ $(candidate \"c1,Red\\nc2,None\\nc3,None\") = \"c1,Red\" ]]",
            "[[ $(candidate \"c1,None\\nc2,Green\\nc3,None\") = \"c2,Green\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmax_product() {\n    let max = 0;\n    let max_index = 0;\n    let max_value = 0;\n    for (let i = 0; i < this.length; i++) {\n        let value = this[i];\n        let index = i;\n        while (index < this.length) {\n            let next_index = index + 1;\n            let next_value = this[next_index];\n            if (next_value > value) {\n                max = Math.max(max, next_value);\n                max_index = index;\n                max_value = next_value;\n            } else {\n                index = next_index;\n            }\n        }\n    }\n    return max_value;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 100 4 5 150 6\") = \"3000\" ]]",
            "[[ $(candidate \"4 42 55 68 80\") = \"50265600\" ]]",
            "[[ $(candidate \"10 22 9 33 21 50 41 60\") = \"2460\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nadd_pairwise() {\n    var list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_pairwise \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 7 8 10\") = \"6 12 15 18\" ]]",
            "[[ $(candidate \"2 6 8 9 11\") = \"8 14 17 20\" ]]",
            "[[ $(candidate \"3 7 9 10 12\") = \"10 16 19 22\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a shthon function to find the product of the array multiplication modulo n.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_remainder() {\n  var a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var b = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var c = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var d = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var e = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var f = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var g = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var h = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var i = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var j = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var k = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var m = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var n = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var o = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var p = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var r = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var s = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_remainder \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"100 10 5 25 35 14\" \"11\") = \"9\" ]]",
            "[[ $(candidate \"1 1 1\" \"1\") = \"0\" ]]",
            "[[ $(candidate \"1 2 1\" \"2\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a shthon function to check whether the given list contains consecutive numbers or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncheck_Consecutive() {\n    var list = \"\";\n    for (var i = 0; i < 10; i++) {\n        list += i;\n    }\n    return list.indexOf(list) > -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_Consecutive \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\") = \"true\" ]]",
            "[[ $(candidate \"1 2 3 5 6\") = \"false\" ]]",
            "[[ $(candidate \"1 2 1\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nreplace_char() {\n  var $1 = \"a\";\n  var $2 = \"b\";\n  var $3 = \"c\";\n  return $1 + $2 + $3;\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_char \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"polygon\" \"y\" \"l\") = \"pollgon\" ]]",
            "[[ $(candidate \"character\" \"c\" \"a\") = \"aharaater\" ]]",
            "[[ $(candidate \"python\" \"l\" \"a\") = \"python\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort a CSV by value.",
        "code": "#!/bin/bash\n#\n# $1 is a two column CSV in key,value order\nsort_counter() {\n    var counter = 0;\n    for (var i = 0; i < this.length; i++) {\n        if (this[i] === '\\n') {\n            counter++;\n        }\n    }\n    return counter;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sort_counter \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Math,81\\nPhysics,83\\nChemistry,87\") = \"Chemistry 87\\nPhysics 83\\nMath 81\" ]]",
            "[[ $(candidate \"Math,400\\nPhysics,300\\nChemistry,250\") = \"Math 400\\nPhysics 300\\nChemistry 250\" ]]",
            "[[ $(candidate \"Math,900\\nPhysics,1000\\nChemistry,1250\") = \"Chemistry 1250\\nPhysics 1000\\nMath 900\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a shthon function to find the sum of the largest and smallest value in a given array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nbig_sum() {\n    let sum = 0;\n    for (let i = 0; i < this.length; i++) {\n        sum += this[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "big_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"4\" ]]",
            "[[ $(candidate \"-1 2 3 4\") = \"3\" ]]",
            "[[ $(candidate \"2 3 6\") = \"8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a shthon function to convert the given string to lower case.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nis_lower() {\n  return this.toLowerCase()\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_lower \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"InValid\") = \"invalid\" ]]",
            "[[ $(candidate \"TruE\") = \"true\" ]]",
            "[[ $(candidate \"SenTenCE\") = \"sentence\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremove_lowercase() {\n    let s = \"hello world\";\n    let result = s.toLowerCase();\n    let new_s = s.toLowerCase();\n    if (new_s == result) {\n        return \"hello world\";\n    }\n    return \"\";\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_lowercase \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"PYTHon\") = \"PYTH\" ]]",
            "[[ $(candidate \"FInD\") = \"FID\" ]]",
            "[[ $(candidate \"STRinG\") = \"STRG\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a shthon function to find the first digit of a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfirst_Digit() {\n  return 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "first_Digit \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"123\") = \"1\" ]]",
            "[[ $(candidate \"456\") = \"4\" ]]",
            "[[ $(candidate \"12\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nheap_queue_largest() {\n    var heap = [];\n    var n = 0;\n    while (n < 10) {\n        var temp = heap[n];\n        if (temp.length > 0) {\n            var temp_len = temp.length;\n            for (var i = 0; i < temp_len; i++) {\n                if (temp[i] > temp[i + 1]) {\n                    var temp_i = temp[i];\n                    var temp_j = temp[i + 1];\n                    if (temp_i > temp_j) {\n                        var temp_temp = temp_i;\n                        temp_i = temp_j;\n                        temp_j = temp_temp;\n                    }\n                }\n            }\n            var temp_len = temp_j - temp[0];\n            for (var i = 0; i < temp_len; i++) {\n                if (temp[i] > temp[i + 1]) {\n                    var temp_i = temp[i];\n                    var temp_j = temp[i + 1];\n                    if (temp_i > temp_j) {\n                        var temp_temp = temp_i;\n                        temp_i = temp_j;\n                        temp_j = temp_temp;\n                    }\n                }\n            }\n            var temp_len = temp_j - temp[0];\n            for (var i = 0; i < temp_len; i++) {\n                if (temp[i] > temp[i + 1]) {\n                    var temp_i = temp[i];\n                    var temp_j = temp[i + 1];\n                    if (temp_i > temp_j) {\n                        var temp_temp = temp_i;\n                        temp_i = temp_j;\n                        temp_j = temp_temp;\n                    }\n                }\n            }\n            var temp_len = temp_j - temp[0];\n            for (var i = 0; i < temp_len; i++) {\n                if (temp[\n}\n\n",
        "test_list": [
            "candidate() {",
            "heap_queue_largest \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"3\") = \"85 75 65\" ]]",
            "[[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"2\") = \"85 75\" ]]",
            "[[ $(candidate \"25 35 22 85 14 65 75 22 58\" \"5\") = \"85 75 65 58 35\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a shthon function which takes a list of integers and only returns the odd ones.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nSplit() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.map(function(i) {\n        return i % 2;\n    });\n}\n\n",
        "test_list": [
            "candidate() {",
            "Split \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6\") = \"1 3 5\" ]]",
            "[[ $(candidate \"10 11 12 13\") = \"11 13\" ]]",
            "[[ $(candidate \"7 8 9 1\") = \"7 9 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a shthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ndifference() {\n  var sum = 0;\n  for (var i = 1; i < arguments[0]; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "difference \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"30\" ]]",
            "[[ $(candidate \"5\") = \"210\" ]]",
            "[[ $(candidate \"2\") = \"6\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a shthon function to count the number of pairs whose xor value is odd.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_Odd_Pair() {\n  var xor = 0;\n  for (var i = 0; i < $1.length; i++) {\n    if ($1[i] == '1') {\n      xor += 1;\n    }\n  }\n  return xor;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Odd_Pair \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 4 7 2 1\" \"5\") = \"6\" ]]",
            "[[ $(candidate \"7 2 8 1 0 5 11\" \"7\") = \"12\" ]]",
            "[[ $(candidate \"1 2 3\" \"3\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntoggle_string() {\n    var str = \"\";\n    for (var i = 0; i < str.length; i++) {\n        str[i] = str[i].toUpperCase();\n    }\n    return str;\n}\n\n",
        "test_list": [
            "candidate() {",
            "toggle_string \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python\") = \"pYTHON\" ]]",
            "[[ $(candidate \"Pangram\") = \"pANGRAM\" ]]",
            "[[ $(candidate \"LIttLE\") = \"liTTle\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a shthon function to find the sum of the per-digit difference between two integers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\ndigit_distance_nums() {\n    var sum = 0;\n    for (var i = 1; i <= 10; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "digit_distance_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"2\") = \"1\" ]]",
            "[[ $(candidate \"23\" \"56\") = \"6\" ]]",
            "[[ $(candidate \"123\" \"256\") = \"7\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nmax_sub_array_sum() {\n  let max_sub_array_sum = 0;\n  let sub_array = [];\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(i);\n    }\n    sub_array.push(sub_array_i);\n  }\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(j);\n    }\n    sub_array.push(sub_array_i);\n  }\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(j);\n    }\n    sub_array.push(sub_array_i);\n  }\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(j);\n    }\n    sub_array.push(sub_array_i);\n  }\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(j);\n    }\n    sub_array.push(sub_array_i);\n  }\n  for (let i = 0; i < 10; i++) {\n    let sub_array_i = [];\n    for (let j = 0; j < 10; j++) {\n      sub_array_i.push(j);\n    }\n    sub_array.push(sub\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_sub_array_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"-2 -3 4 -1 -2 1 5 -3\" \"8\") = \"7\" ]]",
            "[[ $(candidate \"-3 -4 5 -2 -3 2 6 -4\" \"8\") = \"8\" ]]",
            "[[ $(candidate \"-4 -5 6 -3 -4 3 7 -5\" \"8\") = \"10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given lists and output them in sorted order.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nunion_elements() {\n    $1 = [\"a\", \"b\", \"c\"]\n    $2 = [\"a\", \"b\", \"c\"]\n    $3 = [\"a\", \"b\", \"c\"]\n    $4 = [\"a\", \"b\", \"c\"]\n    $5 = [\"a\", \"b\", \"c\"]\n    $6 = [\"a\", \"b\", \"c\"]\n    $7 = [\"a\", \"b\", \"c\"]\n    $8 = [\"a\", \"b\", \"c\"]\n    $9 = [\"a\", \"b\", \"c\"]\n    $10 = [\"a\", \"b\", \"c\"]\n    $11 = [\"a\", \"b\", \"c\"]\n    $12 = [\"a\", \"b\", \"c\"]\n    $13 = [\"a\", \"b\", \"c\"]\n    $14 = [\"a\", \"b\", \"c\"]\n    $15 = [\"a\", \"b\", \"c\"]\n    $16 = [\"a\", \"b\", \"c\"]\n    $17 = [\"a\", \"b\", \"c\"]\n    $18 = [\"a\", \"b\", \"c\"]\n    $19 = [\"a\", \"b\", \"c\"]\n    $20 = [\"a\", \"b\", \"c\"]\n    $21 = [\"a\", \"b\", \"c\"]\n    $22 = [\"a\", \"b\", \"c\"]\n    $23 = [\"a\", \"b\", \"c\"]\n    $24 = [\"a\", \"b\", \"c\"]\n    $25 = [\"a\", \"b\", \"c\"]\n    $26 = [\"a\", \"b\", \"c\"]\n    $27 = [\"a\", \"b\", \"c\"]\n    $28 = [\"a\", \"b\", \"c\"]\n    $29 = [\"a\", \"b\", \"c\"]\n    $30 = [\"a\", \"b\", \"c\"]\n    $31 = [\"a\", \"b\", \"c\"]\n    $32 = [\"a\", \"b\", \"c\"]\n    $33 =\n}\n\n",
        "test_list": [
            "candidate() {",
            "union_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 4 5 6 7 10\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"3 4 5 6\") = \"1 2 3 4 5 6\" ]]",
            "[[ $(candidate \"11 12 13 14\" \"13 15 16 17\") = \"11 12 13 14 15 16 17\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a shthon function to find the length of the longest sublists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nFind_Max_Length() {\n  var max_length = 0;\n  for (var i = 0; i < this.length; i++) {\n    var sublist = this[i];\n    if (sublist.length > max_length) {\n      max_length = sublist.length;\n    }\n  }\n  return max_length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "Find_Max_Length \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\\n1 4\\n5 6 7 8\") = \"4\" ]]",
            "[[ $(candidate \"0 1\\n2 2\\n3 2 1\") = \"3\" ]]",
            "[[ $(candidate \"7\\n22 23\\n13 14 15\\n10 20 30 40 50\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nextract_values() {\n    var values = [];\n    for (var i = 0; i < this.length; i++) {\n        if (this[i] == '\"') {\n            values.push(this.substring(i + 1, this.length));\n            i++;\n        }\n    }\n    return values;\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_values \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") = \"Python PHP Java\" ]]",
            "[[ $(candidate \"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") = \"python program language\" ]]",
            "[[ $(candidate \"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") = \"red blue green yellow\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a shthon function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\ncount_Pairs() {\n    let count = 0;\n    for (let i = 0; i < $1.length; i++) {\n        for (let j = 0; j < $1[i]; j++) {\n            if ($1[i] === $2) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_Pairs \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 1\" \"3\") = \"2\" ]]",
            "[[ $(candidate \"1 1 1 1\" \"4\") = \"0\" ]]",
            "[[ $(candidate \"1 2 3 4 5\" \"5\") = \"10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a shthon function to split a string into characters.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nsplit() {\n    return split(1)\n}\n\n",
        "test_list": [
            "candidate() {",
            "split \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python\") = \"p y t h o n\" ]]",
            "[[ $(candidate \"Name\") = \"N a m e\" ]]",
            "[[ $(candidate \"program\") = \"p r o g r a m\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsum_digits() {\n  var sum = 0;\n  for (var i = 1; i < 10; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_digits \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"345\") = \"12\" ]]",
            "[[ $(candidate \"12\") = \"3\" ]]",
            "[[ $(candidate \"97\") = \"16\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified list is sorted or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nissort_list() {\n    if (is_empty(list)) {\n        return false;\n    }\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] =='') {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "candidate() {",
            "issort_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 4 6 8 10 12 14 16 17\") = \"true\" ]]",
            "[[ $(candidate \"1 2 4 6 8 10 12 14 20 17\") = \"false\" ]]",
            "[[ $(candidate \"1 2 4 6 8 10 15 14 20\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each sublist of strings in a given list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nsort_sublists() {\n    var sublists = [];\n    for (var i = 0; i < this.length; i++) {\n        sublists.push(this[i]);\n    }\n    sublists.sort();\n    for (var i = 0; i < sublists.length; i++) {\n        this.push(sublists[i]);\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "sort_sublists \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"green orange\\nblack white\\nwhite black orange\") = \"green orange\\nblack white\\nblack orange white\" ]]",
            "[[ $(candidate \"green orange\\nblack\\ngreen orange\\nwhite\") = \"green orange\\nblack\\ngreen orange\\nwhite\" ]]",
            "[[ $(candidate \"a b\\nd c\\ng h\\nf e\") = \"a b\\nc d\\ng h\\ne f\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a shthon function to check if a given number is one less than twice its reverse.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nchecks() {\n    if (2 * (1 + 1) % 2 == 0) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "checks \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"70\") = \"false\" ]]",
            "[[ $(candidate \"23\") = \"false\" ]]",
            "[[ $(candidate \"73\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a shthon function to remove duplicate numbers from a given number of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ntwo_unique_nums() {\n  var a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var b = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var c = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var d = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var e = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var f = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var g = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var h = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var i = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var j = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var k = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var m = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var n = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var o = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var p = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var r = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var s = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  var t = [1, 2,\n}\n\n",
        "test_list": [
            "candidate() {",
            "two_unique_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 2 3 4 5\") = \"1 4 5\" ]]",
            "[[ $(candidate \"1 2 3 2 4 5\") = \"1 3 4 5\" ]]",
            "[[ $(candidate \"1 2 3 4 5\") = \"1 2 3 4 5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a shthon function to calculate the product of the unique numbers in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nunique_product() {\n    let list = [];\n    for (let i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list.reduce((a, b) => a * b, 1);\n}\n\n",
        "test_list": [
            "candidate() {",
            "unique_product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 20 30 40 20 50 60 40\") = \"720000000\" ]]",
            "[[ $(candidate \"1 2 3 1\") = \"6\" ]]",
            "[[ $(candidate \"7 8 9 0 1 1\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nsurfacearea_cylinder() {\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var r = 0;\n  var r2 = 0;\n  var r3 = 0;\n  var r4 = 0;\n  var r5 = 0;\n  var r6 = 0;\n  var r7 = 0;\n  var r8 = 0;\n  var r9 = 0;\n  var r10 = 0;\n  var r11 = 0;\n  var r12 = 0;\n  var r13 = 0;\n  var r14 = 0;\n  var r15 = 0;\n  var r16 = 0;\n  var r17 = 0;\n  var r18 = 0;\n  var r19 = 0;\n  var r20 = 0;\n  var r21 = 0;\n  var r22 = 0;\n  var r23 = 0;\n  var r24 = 0;\n  var r25 = 0;\n  var r26 = 0;\n  var r27 = 0;\n  var r28 = 0;\n  var r29 = 0;\n  var r30 = 0;\n  var r31 = 0;\n  var r32 = 0;\n  var r33 = 0;\n  var r34 = 0;\n  var r35 = 0;\n  var r36 = 0;\n  var r37 = 0;\n  var r38 = 0;\n  var r39 = 0;\n  var r40 = 0;\n  var r41 = 0;\n  var r42 = 0;\n  var r43 = 0;\n  var r44 = 0;\n  var r45 = 0;\n  var r46 = 0;\n  var r47 = 0;\n  var r48 = 0;\n  var r49 = 0;\n  var r50 = 0;\n  var r51 = 0;\n  var r52 = 0;\n  var r53 = 0;\n  var r54 = 0;\n  var r55 = 0;\n  var r56 = 0;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "surfacearea_cylinder \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\" \"5\") = \"942.45\" ]]",
            "[[ $(candidate \"4\" \"5\") = \"226.18800000000002\" ]]",
            "[[ $(candidate \"4\" \"10\") = \"351.848\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a shthon function to check whether a list is sublist of another or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_Sub_Array() {\n  var a = [1, 2, 3];\n  var b = [1, 2, 3];\n  var c = [1, 2, 3];\n  var d = [1, 2, 3];\n  var e = [1, 2, 3];\n  var f = [1, 2, 3];\n  var g = [1, 2, 3];\n  var h = [1, 2, 3];\n  var i = [1, 2, 3];\n  var j = [1, 2, 3];\n  var k = [1, 2, 3];\n  var l = [1, 2, 3];\n  var m = [1, 2, 3];\n  var n = [1, 2, 3];\n  var o = [1, 2, 3];\n  var p = [1, 2, 3];\n  var q = [1, 2, 3];\n  var r = [1, 2, 3];\n  var s = [1, 2, 3];\n  var t = [1, 2, 3];\n  var u = [1, 2, 3];\n  var v = [1, 2, 3];\n  var w = [1, 2, 3];\n  var x = [1, 2, 3];\n  var y = [1, 2, 3];\n  var z = [1, 2, 3];\n  var a = [1, 2, 3];\n  var b = [1, 2, 3];\n  var c = [1, 2, 3];\n  var d = [1, 2, 3];\n  var e = [1, 2, 3];\n  var f = [1, 2, 3];\n  var g = [1, 2, 3];\n  var h = [1, 2, 3];\n  var i = [1, 2, 3];\n  var j = [1, 2, 3];\n  var k = [1, 2, 3];\n  var l = [1, 2,\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_Sub_Array \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 4 3 5\" \"1 2\") = \"false\" ]]",
            "[[ $(candidate \"1 2 1\" \"1 2 1\") = \"true\" ]]",
            "[[ $(candidate \"1 0 2 2\" \"2 2 0\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a shthon function to find the last digit in factorial of a given number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nlast_Digit_Factorial() {\n  let num = 1;\n  while (num < 10) {\n    let digit = num % 10;\n    if (digit == 0) {\n      return digit;\n    }\n    num = num / 10;\n  }\n  return 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "last_Digit_Factorial \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4\") = \"4\" ]]",
            "[[ $(candidate \"21\") = \"0\" ]]",
            "[[ $(candidate \"30\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\ninterleave_lists() {\n    var $1 = [];\n    var $2 = [];\n    var $3 = [];\n    for (var i = 0; i < $1.length; i++) {\n        $1[i] = $1[i].split(' ');\n        $2[i] = $2[i].split(' ');\n        $3[i] = $3[i].split(' ');\n    }\n    return $1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "interleave_lists \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7\" \"10 20 30 40 50 60 70\" \"100 200 300 400 500 600 700\") = \"1 10 100 2 20 200 3 30 300 4 40 400 5 50 500 6 60 600 7 70 700\" ]]",
            "[[ $(candidate \"10 20\" \"15 2\" \"5 10\") = \"10 15 5 20 2 10\" ]]",
            "[[ $(candidate \"11 44\" \"10 15\" \"20 5\") = \"11 10 20 44 15 5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nfind_dissimilar() {\n    let a = [\"a\", \"b\", \"c\"]\n    let b = [\"a\", \"b\", \"c\"]\n    let c = [\"a\", \"b\", \"c\"]\n    let d = [\"a\", \"b\", \"c\"]\n    let e = [\"a\", \"b\", \"c\"]\n    let f = [\"a\", \"b\", \"c\"]\n    let g = [\"a\", \"b\", \"c\"]\n    let h = [\"a\", \"b\", \"c\"]\n    let i = [\"a\", \"b\", \"c\"]\n    let j = [\"a\", \"b\", \"c\"]\n    let k = [\"a\", \"b\", \"c\"]\n    let l = [\"a\", \"b\", \"c\"]\n    let m = [\"a\", \"b\", \"c\"]\n    let n = [\"a\", \"b\", \"c\"]\n    let o = [\"a\", \"b\", \"c\"]\n    let p = [\"a\", \"b\", \"c\"]\n    let q = [\"a\", \"b\", \"c\"]\n    let r = [\"a\", \"b\", \"c\"]\n    let s = [\"a\", \"b\", \"c\"]\n    let t = [\"a\", \"b\", \"c\"]\n    let u = [\"a\", \"b\", \"c\"]\n    let v = [\"a\", \"b\", \"c\"]\n    let w = [\"a\", \"b\", \"c\"]\n    let x = [\"a\", \"b\", \"c\"]\n    let y = [\"a\", \"b\", \"c\"]\n    let z = [\"a\", \"b\", \"c\"]\n    let a = [\"a\", \"b\", \"c\"]\n    let b = [\"a\", \"b\", \"c\"]\n    let c = [\"a\", \"b\", \"c\"]\n    let d = [\"a\", \"b\", \"c\"]\n    let e = [\"a\", \"b\", \"c\"]\n    let f = [\"a\", \"b\", \"c\"]\n    let g = [\"a\", \"b\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_dissimilar \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4 5 6\" \"5 7 4 10\") = \"3 6 7 10\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"7 2 3 9\") = \"1 4 7 9\" ]]",
            "[[ $(candidate \"21 11 25 26\" \"26 34 21 36\") = \"34 36 11 25\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a shthon function to find the largest number that can be formed with the given list of digits.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfind_Max_Num() {\n    let max = 0;\n    for (let i = 1; i < 10; i++) {\n        let num = i;\n        for (let j = 0; j < i; j++) {\n            if (num % 10 == 0) {\n                num /= 10;\n            } else {\n                num = num / 10;\n            }\n        }\n        if (num > max) {\n            max = num;\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Max_Num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"321\" ]]",
            "[[ $(candidate \"4 5 6 1\") = \"6541\" ]]",
            "[[ $(candidate \"1 2 3 9\") = \"9321\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nextract_even() {\n  var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var even = list.length % 2;\n  if (even == 0) {\n    return list;\n  } else {\n    return list.slice(0, even);\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_even \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4 5 7 6 2 4 6 8\") = \"4 6 2 4 6 8\" ]]",
            "[[ $(candidate \"5 6 8 7 4 8 7 9\") = \"6 8 4 8\" ]]",
            "[[ $(candidate \"5 6 9 8 4 6 8 10\") = \"6 8 4 6 8 10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a shthon function to find the surface area of a square shramid with a given base edge and height.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nsurface_Area() {\n  var x = 1;\n  var y = 2;\n  var z = 3;\n  var a = 4;\n  var b = 5;\n  var c = 6;\n  var d = 7;\n  var e = 8;\n  var f = 9;\n  var g = 10;\n  var h = 11;\n  var i = 12;\n  var j = 13;\n  var k = 14;\n  var l = 15;\n  var m = 16;\n  var n = 17;\n  var o = 18;\n  var p = 19;\n  var q = 20;\n  var r = 21;\n  var s = 22;\n  var t = 23;\n  var u = 24;\n  var v = 25;\n  var w = 26;\n  var x1 = 27;\n  var y1 = 28;\n  var z1 = 29;\n  var a1 = 30;\n  var b1 = 31;\n  var c1 = 32;\n  var d1 = 33;\n  var e1 = 34;\n  var f1 = 35;\n  var g1 = 36;\n  var h1 = 37;\n  var i1 = 38;\n  var j1 = 39;\n  var k1 = 40;\n  var l1 = 41;\n  var m1 = 42;\n  var n1 = 43;\n  var o1 = 44;\n  var p1 = 45;\n  var q1 = 46;\n  var r1 = 47;\n  var s1 = 48;\n  var t1 = 49;\n  var u1 = 50;\n  var v1 = 51;\n  var w1 = 52;\n  var x2 = 53;\n  var y2 = 54;\n  var z2 = 55;\n  var a2 = 56;\n  var b2 = 57;\n  var c2 = 58;\n  var d2 = 59;\n  var e2 = 60;\n  var f2\n}\n\n",
        "test_list": [
            "candidate() {",
            "surface_Area \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\" \"4\") = \"33\" ]]",
            "[[ $(candidate \"4\" \"5\") = \"56\" ]]",
            "[[ $(candidate \"1\" \"2\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncatalan_number() {\n  return 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "catalan_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"16796\" ]]",
            "[[ $(candidate \"9\") = \"4862\" ]]",
            "[[ $(candidate \"7\") = \"429\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfind_adverbs() {\n    let adverbs = [];\n    let i = 0;\n    let j = 0;\n    let len = 0;\n    let adverb = '';\n    let pos = 0;\n    let pos_end = 0;\n    let pos_start = 0;\n    let pos_end_end = 0;\n    let pos_start_end = 0;\n    let pos_end_start = 0;\n    let pos_start_end_end = 0;\n    let pos_end_start_end = 0;\n    let pos_end_start_end_end = 0;\n    let pos_end_start_end_end_end = 0;\n    let pos_end_start_end_end_end_end = 0;\n    let pos_end_start_end_end_end_end_end = 0;\n    let pos_end_start_end_end_end_end_end_end_end = 0;\n    let pos_end_start_end_end_end_end_end_end_end_end_end_end_end = 0;\n    let pos_end_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_adverbs \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Clearly, he has no excuse for such behavior.\") = \"0-7: Clearly\" ]]",
            "[[ $(candidate \"Please handle the situation carefuly\") = \"28-36: carefuly\" ]]",
            "[[ $(candidate \"Complete the task quickly\") = \"18-25: quickly\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a shthon function to split a list at the nth eelment and add the first part to the end.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nsplit_Arr() {\n    var arr = [];\n    for (var i = 0; i < $1.length; i++) {\n        arr.push($1.substring(i, i + $2));\n    }\n    return arr;\n}\n\n",
        "test_list": [
            "candidate() {",
            "split_Arr \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12 10 5 6 52 36\" \"2\") = \"5 6 52 36 12 10\" ]]",
            "[[ $(candidate \"1 2 3 4\" \"1\") = \"2 3 4 1\" ]]",
            "[[ $(candidate \"0 1 2 3 4 5 6 7\" \"3\") = \"3 4 5 6 7 0 1 2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert a list to a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nlist_tuple() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "list_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 10 7 4 15 3\") = \"5 10 7 4 15 3\" ]]",
            "[[ $(candidate \"2 4 5 6 2 3 4 4 7\") = \"2 4 5 6 2 3 4 4 7\" ]]",
            "[[ $(candidate \"58 44 56\") = \"58 44 56\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a shthon function to find the difference between largest and smallest value in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nbig_diff() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    var max = list.length - 1;\n    var min = list.length - 2;\n    var result = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] > list[max]) {\n            max = i;\n        }\n        if (list[i] < list[min]) {\n            min = i;\n        }\n        result += list[i] - list[max];\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "big_diff \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4\") = \"3\" ]]",
            "[[ $(candidate \"4 5 12\") = \"8\" ]]",
            "[[ $(candidate \"9 2 3\") = \"7\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nperfect_squares() {\n  let a = 1;\n  let b = 2;\n  let c = 3;\n  let d = 4;\n  let e = 5;\n  let f = 6;\n  let g = 7;\n  let h = 8;\n  let i = 9;\n  let j = 10;\n  let k = 11;\n  let l = 12;\n  let m = 13;\n  let n = 14;\n  let o = 15;\n  let p = 16;\n  let q = 17;\n  let r = 18;\n  let s = 19;\n  let t = 20;\n  let u = 21;\n  let v = 22;\n  let w = 23;\n  let x = 24;\n  let y = 25;\n  let z = 26;\n  let a = 27;\n  let b = 28;\n  let c = 29;\n  let d = 30;\n  let e = 31;\n  let f = 32;\n  let g = 33;\n  let h = 34;\n  let i = 35;\n  let j = 36;\n  let k = 37;\n  let l = 38;\n  let m = 39;\n  let n = 40;\n  let o = 41;\n  let p = 42;\n  let q = 43;\n  let r = 44;\n  let s = 45;\n  let t = 46;\n  let u = 47;\n  let v = 48;\n  let w = 49;\n  let x = 50;\n  let y = 51;\n  let z = 52;\n  let a = 53;\n  let b = 54;\n  let c = 55;\n  let d = 56;\n  let e = 57;\n  let f = 58;\n  let g = 59;\n  let h = 60;\n  let i = 61;\n  let j = 62;\n  let k = 63;\n  let l = 64;\n  let m = 65;\n  let n = 66;\n  let o = 67;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "perfect_squares \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"30\") = \"1 4 9 16 25\" ]]",
            "[[ $(candidate \"50\" \"100\") = \"64 81 100\" ]]",
            "[[ $(candidate \"100\" \"200\") = \"100 121 144 169 196\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a shthon function to check whether the given two integers have opposite sign or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nopposite_Signs() {\n  if (1 < $1 && $1 < 2) {\n    return true;\n  } else if (2 < $1 && $1 < $2) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "opposite_Signs \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"-2\") = \"true\" ]]",
            "[[ $(candidate \"3\" \"2\") = \"false\" ]]",
            "[[ $(candidate \"-10\" \"-10\") = \"false\" ]]",
            "[[ $(candidate \"-2\" \"2\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a shthon function to interchange the first and last elements in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nswap_List() {\n    var list = [];\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "swap_List \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12 35 9 56 24\") = \"24 35 9 56 12\" ]]",
            "[[ $(candidate \"1 2 3\") = \"3 2 1\" ]]",
            "[[ $(candidate \"4 5 6\") = \"6 5 4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a shthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsum_Of_product() {\n  var sum = 0;\n  for (var i = 1; i <= 100; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_Of_product \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"15\" ]]",
            "[[ $(candidate \"4\") = \"56\" ]]",
            "[[ $(candidate \"1\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremovezero_ip() {\n    var ip = $1;\n    var i = ip.indexOf('.');\n    if (i < 0) {\n        return ip;\n    }\n    var ip_parts = ip.split('.');\n    var ip_parts_length = ip_parts.length;\n    var ip_parts_i = 0;\n    var ip_parts_j = 0;\n    while (ip_parts_i < ip_parts_length) {\n        if (ip_parts[ip_parts_i] == '0') {\n            ip_parts_i++;\n            ip_parts_j++;\n        } else {\n            break;\n        }\n    }\n    if (ip_parts_i < ip_parts_length) {\n        return ip;\n    }\n    return ip_parts.slice(0, ip_parts_i);\n}\n\n",
        "test_list": [
            "candidate() {",
            "removezero_ip \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"216.08.094.196\") = \"216.8.94.196\" ]]",
            "[[ $(candidate \"12.01.024\") = \"12.1.24\" ]]",
            "[[ $(candidate \"216.08.094.0196\") = \"216.8.94.196\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ndiff_even_odd() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    var result = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            result += list[i];\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "diff_even_odd \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 5 7 4 1 6 8\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1\" ]]",
            "[[ $(candidate \"1 5 7 9 10\") = \"9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a shthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\nmin_Swaps() {\n  var a = 1;\n  var b = 2;\n  var c = 3;\n  var d = 4;\n  var e = 5;\n  var f = 6;\n  var g = 7;\n  var h = 8;\n  var i = 9;\n  var j = 10;\n  var k = 11;\n  var l = 12;\n  var m = 13;\n  var n = 14;\n  var o = 15;\n  var p = 16;\n  var q = 17;\n  var r = 18;\n  var s = 19;\n  var t = 20;\n  var u = 21;\n  var v = 22;\n  var w = 23;\n  var x = 24;\n  var y = 25;\n  var z = 26;\n  var a = 27;\n  var b = 28;\n  var c = 29;\n  var d = 30;\n  var e = 31;\n  var f = 32;\n  var g = 33;\n  var h = 34;\n  var i = 35;\n  var j = 36;\n  var k = 37;\n  var l = 38;\n  var m = 39;\n  var n = 40;\n  var o = 41;\n  var p = 42;\n  var q = 43;\n  var r = 44;\n  var s = 45;\n  var t = 46;\n  var u = 47;\n  var v = 48;\n  var w = 49;\n  var x = 50;\n  var y = 51;\n  var z = 52;\n  var a = 53;\n  var b = 54;\n  var c = 55;\n  var d = 56;\n  var e = 57;\n  var f = 58;\n  var g = 59;\n  var h = 60;\n  var i = 61;\n  var j = 62;\n  var k = 63;\n  var l = 64;\n  var m = 65;\n  \n}\n\n",
        "test_list": [
            "candidate() {",
            "min_Swaps \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1101\" \"1110\") = \"1\" ]]",
            "[[ $(candidate \"111\" \"000\") = \"Not Possible\" ]]",
            "[[ $(candidate \"111\" \"110\") = \"Not Possible\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nfind_kth() {\n  let k = 0;\n  let x = [];\n  let y = [];\n  let z = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = [];\n  let y = [];\n  let z = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = [];\n  let y = [];\n  let z = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = [];\n  let y = [];\n  let z = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  \n}\n\n",
        "test_list": [
            "candidate() {",
            "find_kth \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 3 6 7 9\" \"1 4 8 10\" \"5\") = \"6\" ]]",
            "[[ $(candidate \"100 112 256 349 770\" \"72 86 113 119 265 445 892\" \"7\") = \"256\" ]]",
            "[[ $(candidate \"3 4 7 8 10\" \"2 5 9 11\" \"6\") = \"8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\narmstrong_number() {\n  if (is_armstrong(1)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "armstrong_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"153\") = \"true\" ]]",
            "[[ $(candidate \"259\") = \"false\" ]]",
            "[[ $(candidate \"4458\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsum_average() {\n  var sum = 0;\n  var n = 1;\n  while (n < 10) {\n    sum += n;\n    n += 1;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_average \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"55 5.5\" ]]",
            "[[ $(candidate \"15\") = \"120 8.0\" ]]",
            "[[ $(candidate \"20\") = \"210 10.5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_octagonal() {\n  let n = 1;\n  while (n < 10) {\n    if (n % 2 == 0) {\n      return n;\n    }\n    n += 1;\n  }\n  return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_octagonal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"65\" ]]",
            "[[ $(candidate \"10\") = \"280\" ]]",
            "[[ $(candidate \"15\") = \"645\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a shthon function to check whether the given number is even or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_Even() {\n  return (this % 2 == 0);\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_Even \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\") = \"false\" ]]",
            "[[ $(candidate \"2\") = \"true\" ]]",
            "[[ $(candidate \"3\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a shthon function to find the first repeated character in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfirst_repeated_char() {\n  var $1 = \"\";\n  for (var $i = 0; $i < $1.length; $i++) {\n    if ($1[$i] == $1) {\n      return $i;\n    }\n  }\n  return -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "first_repeated_char \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abcabc\") = \"a\" ]]",
            "[[ $(candidate \"abc\") = \"None\" ]]",
            "[[ $(candidate \"123123\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nget_ludic() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n = 66;\n    var o = 67;\n    var\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_ludic \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"1 2 3 5 7\" ]]",
            "[[ $(candidate \"25\") = \"1 2 3 5 7 11 13 17 23 25\" ]]",
            "[[ $(candidate \"45\") = \"1 2 3 5 7 11 13 17 23 25 29 37 41 43\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nreverse_words() {\n    let words = this.split(\" \");\n    let reversed = words.map(word => {\n        let reversed_word = word.split(\" \").map(word => {\n            let reversed_word_ = word.split(\" \").map(word => {\n                let reversed_word_ = word.split(\" \").map(word => {\n                    let reversed_word_ = word.split(\" \").map(word => {\n                        let reversed_word_ = word.split(\" \").map(word => {\n                            let reversed_word_ = word.split(\" \").map(word => {\n                                let reversed_word_ = word.split(\" \").map(word => {\n                                    let reversed_word_ = word.split(\" \").map(word => {\n                                        let reversed_word_ = word.split(\" \").map(word => {\n                                            let reversed_word_ = word.split(\" \").map(word => {\n                                                let reversed_word_ = word.split(\" \").map(word => {\n                                                    let reversed_word_ = word.split(\" \").map(word => {\n                                                        let reversed_word_ = word.split(\" \").map(word => {\n                                                            let reversed_word_ = word.split(\" \").map(word => {\n                                                                let reversed_word_ = word.split(\" \").map(word => {\n                                                                    let reversed_word_ = word.split(\" \").map(word => {\n                                                                        let reversed_word_ = word.split(\" \").map(word => {\n                                                                            let reversed_word_ = word.split(\" \").map(word => {\n                                                                                let reversed_word_ = word.split(\" \").map(word => {\n                                                                                    let reversed_word_ = word.split(\" \").map(word => {\n                                                                                        let reversed_word_ = word.split(\" \").map(word =>\n}\n\n",
        "test_list": [
            "candidate() {",
            "reverse_words \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python program\") = \"program python\" ]]",
            "[[ $(candidate \"java language\") = \"language java\" ]]",
            "[[ $(candidate \"indian man\") = \"man indian\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nprime_num() {\n  if (isPrime(1)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "prime_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"13\") = \"true\" ]]",
            "[[ $(candidate \"7\") = \"true\" ]]",
            "[[ $(candidate \"-1010\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nradian_degree() {\n  return (2.0 * pi) / (1.0 * radian_degree);\n}\n\n",
        "test_list": [
            "candidate() {",
            "radian_degree \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"90\") = \"1.5707963267948966\" ]]",
            "[[ $(candidate \"60\") = \"1.0471975511965976\" ]]",
            "[[ $(candidate \"120\") = \"2.0943951023931953\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\nfind_literals() {\n    var regex = /[a-z]/g;\n    var start = 0;\n    var end = 0;\n    var match = regex.exec('');\n    while (match) {\n        if (match[0] == 'a') {\n            start = match.index;\n        }\n        if (match[0] == 'b') {\n            end = match.index;\n        }\n        match = regex.exec('');\n    }\n    return {\n        start: start,\n        end: end\n    };\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_literals \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"The quick brown fox jumps over the lazy dog.\" \"fox\") = \"fox 16 19\" ]]",
            "[[ $(candidate \"Its been a very crazy procedure right\" \"crazy\") = \"crazy 16 21\" ]]",
            "[[ $(candidate \"Hardest choices required strongest will\" \"will\") = \"will 35 39\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a shthon function to find nth bell number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nbell_Number() {\n  return 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "bell_Number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"2\" ]]",
            "[[ $(candidate \"3\") = \"5\" ]]",
            "[[ $(candidate \"4\") = \"15\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a shthon function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nremove_kth_element() {\n    let list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n    let k = 0\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] == \"k\") {\n            k = i\n            break\n        }\n    }\n    if (k == 0) {\n        return list\n    }\n    let new_list = list.slice(0, k)\n    let new_list_copy = new_list.slice(0)\n    new_list_copy.pop()\n    return new_list_copy\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_kth_element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 2 3 4 4 5 1\" \"3\") = \"1 1 3 4 4 5 1\" ]]",
            "[[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\" \"4\") = \"0 0 1 3 4 4 5 6 6 6 7 8 9 4 4\" ]]",
            "[[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\" \"5\") = \"10 10 15 19 18 17 26 26 17 18 10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as a list of lists returns the max of then'th column.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_of_nth() {\n    var max = 0;\n    for (var i = 0; i < len(list); i++) {\n        var max_i = 0;\n        for (var j = 0; j < len(list[i]); j++) {\n            if (list[i][j] > max_i) {\n                max_i = list[i][j];\n            }\n        }\n        max = max_i;\n    }\n    return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_of_nth \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6 7\\n1 3 5\\n8 9 19\" \"2\") = \"19\" ]]",
            "[[ $(candidate \"6 7 8\\n2 4 6\\n9 10 20\" \"1\") = \"10\" ]]",
            "[[ $(candidate \"7 8 9\\n3 5 7\\n10 11 21\" \"1\") = \"11\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a shthon function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmerge() {\n    var a = [1,2,3];\n    var b = [1,2,3];\n    var c = [1,2,3];\n    var d = [1,2,3];\n    var e = [1,2,3];\n    var f = [1,2,3];\n    var g = [1,2,3];\n    var h = [1,2,3];\n    var i = [1,2,3];\n    var j = [1,2,3];\n    var k = [1,2,3];\n    var l = [1,2,3];\n    var m = [1,2,3];\n    var n = [1,2,3];\n    var o = [1,2,3];\n    var p = [1,2,3];\n    var q = [1,2,3];\n    var r = [1,2,3];\n    var s = [1,2,3];\n    var t = [1,2,3];\n    var u = [1,2,3];\n    var v = [1,2,3];\n    var w = [1,2,3];\n    var x = [1,2,3];\n    var y = [1,2,3];\n    var z = [1,2,3];\n    var a = [1,2,3];\n    var b = [1,2,3];\n    var c = [1,2,3];\n    var d = [1,2,3];\n    var e = [1,2,3];\n    var f = [1,2,3];\n    var g = [1,2,3];\n    var h = [1,2,3];\n    var i = [1,2,3];\n    var j = [1,2,3];\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "merge \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"x y\\na b\\nm n\") = \"x a m\\ny b n\" ]]",
            "[[ $(candidate \"1 2\\n3 4\\n5 6\\n7 8\") = \"1 3 5 7\\n2 4 6 8\" ]]",
            "[[ $(candidate \"x y z\\na b c\\nm n o\") = \"x a m\\ny b n\\nz c o\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ncummulative_sum() {\n    var sum = 0;\n    for (var i = 0; i < this.length; i++) {\n        sum += this[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "cummulative_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n5 6 7\\n2 6\") = \"30\" ]]",
            "[[ $(candidate \"2 4\\n6 7 8\\n3 7\") = \"37\" ]]",
            "[[ $(candidate \"3 5\\n7 8 9\\n4 8\") = \"44\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes a lists of lists and returns the average value for each sublist as a list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\naverage_tuple() {\n    var list = [];\n    for (var i = 0; i < list.length; i++) {\n        list[i] = list[i].split(\" \");\n    }\n    var sum = 0;\n    for (var i = 0; i < list.length; i++) {\n        sum += list[i][0];\n    }\n    return sum / list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "average_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 10 10 12\\n30 45 56 45\\n81 80 39 32\\n1 2 3 4\") = \"30.5 34.25 27.0 23.25\" ]]",
            "[[ $(candidate \"1 1 -5\\n30 -15 56\\n81 -60 -39\\n-10 2 3\") = \"25.5 -18.0 3.75\" ]]",
            "[[ $(candidate \"100 100 100 120\\n300 450 560 450\\n810 800 390 320\\n10 20 30 40\") = \"305.0 342.5 270.0 232.5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two lists of the same length and performs the element wise modulo.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntuple_modulo() {\n    var a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var b = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var c = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var d = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var e = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var f = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var g = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var h = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var i = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var j = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var k = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var m = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var n = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var o = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var p = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var r = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var s = [1, 2, 3, 4, 5, 6, 7, 8,\n}\n\n",
        "test_list": [
            "candidate() {",
            "tuple_modulo \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 5 6\" \"5 6 7 5\") = \"0 4 5 1\" ]]",
            "[[ $(candidate \"11 5 6 7\" \"6 7 8 6\") = \"5 5 6 1\" ]]",
            "[[ $(candidate \"12 6 7 8\" \"7 8 9 7\") = \"5 6 7 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nmin_Jumps() {\n    var d = 0;\n    var n = 0;\n    for (var i = 0; i < $1.length; i++) {\n        if ($1[i] == 'd') {\n            d = $2;\n        } else {\n            n = $2;\n        }\n    }\n    return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "min_Jumps \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4\" \"11\") = \"3.5\" ]]",
            "[[ $(candidate \"3 4\" \"0\") = \"0\" ]]",
            "[[ $(candidate \"11 14\" \"11\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two lists element wise.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndiv_list() {\n    var list1 = [];\n    var list2 = [];\n    for (var i = 0; i < 2; i++) {\n        list1.push(i);\n        list2.push(i);\n    }\n    return list1.join(' ') +'' + list2.join(' ');\n}\n\n",
        "test_list": [
            "candidate() {",
            "div_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4 5 6\" \"1 2 3\") = \"4.0 2.5 2.0\" ]]",
            "[[ $(candidate \"3 2\" \"1 4\") = \"3.0 0.5\" ]]",
            "[[ $(candidate \"90 120\" \"50 70\") = \"1.8 1.7142857142857142\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nmove_num() {\n    var num = '';\n    for (var i = 0; i < this.length; i++) {\n        num += this[i];\n    }\n    return num;\n}\n\n",
        "test_list": [
            "candidate() {",
            "move_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"I1love143you55three3000thousand\") = \"Iloveyouthreethousand1143553000\" ]]",
            "[[ $(candidate \"Avengers124Assemble\") = \"AvengersAssemble124\" ]]",
            "[[ $(candidate \"Its11our12path13to14see15things16do17things\") = \"Itsourpathtoseethingsdothings11121314151617\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a shthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncount_Substrings() {\n    let sum = 0;\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] == '0') {\n            sum += 1;\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_Substrings \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"112112\") = \"6\" ]]",
            "[[ $(candidate \"111\") = \"6\" ]]",
            "[[ $(candidate \"1101112\") = \"12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted lists of same size.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is an integer\nget_median() {\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n  var w = [];\n  var x = [];\n  var y = [];\n  var z = [];\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n  var w = [];\n  var x = [];\n  var y = [];\n  var z = [];\n  var a = [];\n  var b = [];\n  var c = [];\n  var d = [];\n  var e = [];\n  var f = [];\n  var g = [];\n  var h = [];\n  var i = [];\n  var j = [];\n  var k = [];\n  var l = [];\n  var m = [];\n  var n = [];\n  var o = [];\n  var p = [];\n  var q = [];\n  var r = [];\n  var s = [];\n  var t = [];\n  var u = [];\n  var v = [];\n  var w = [];\n  \n}\n\n",
        "test_list": [
            "candidate() {",
            "get_median \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 12 15 26 38\" \"2 13 17 30 45\" \"5\") = \"16.0\" ]]",
            "[[ $(candidate \"2 4 8 9\" \"7 13 19 28\" \"4\") = \"8.5\" ]]",
            "[[ $(candidate \"3 6 14 23 36 42\" \"2 18 27 39 49 55\" \"6\") = \"25.0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nnth_nums() {\n    var n = 1;\n    for (var i = 0; i < this.length; i++) {\n        n = n * this[i];\n    }\n    return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "nth_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"1 4 9 16 25 36 49 64 81 100\" ]]",
            "[[ $(candidate \"10 20 30\" \"3\") = \"1000 8000 27000\" ]]",
            "[[ $(candidate \"12 15\" \"5\") = \"248832 759375\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a shthon function to convert a given string to uppercase.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nis_upper() {\n  return this.toUpperCase()\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_upper \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"person\") = \"PERSON\" ]]",
            "[[ $(candidate \"final\") = \"FINAL\" ]]",
            "[[ $(candidate \"Valid\") = \"VALID\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a shthon function to interchange the first and last element in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nswap_List() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "swap_List \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"3 2 1\" ]]",
            "[[ $(candidate \"1 2 3 4 4\") = \"4 2 3 4 1\" ]]",
            "[[ $(candidate \"4 5 6\") = \"6 5 4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a shthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ntriangle_area() {\n  var x = 1;\n  var y = 1;\n  var z = 1;\n  var r = 1;\n  var a = 1;\n  var b = 1;\n  var c = 1;\n  var d = 1;\n  var e = 1;\n  var f = 1;\n  var g = 1;\n  var h = 1;\n  var i = 1;\n  var j = 1;\n  var k = 1;\n  var l = 1;\n  var m = 1;\n  var n = 1;\n  var o = 1;\n  var p = 1;\n  var q = 1;\n  var r = 1;\n  var s = 1;\n  var t = 1;\n  var u = 1;\n  var v = 1;\n  var w = 1;\n  var x1 = 1;\n  var y1 = 1;\n  var z1 = 1;\n  var r1 = 1;\n  var a1 = 1;\n  var b1 = 1;\n  var c1 = 1;\n  var d1 = 1;\n  var e1 = 1;\n  var f1 = 1;\n  var g1 = 1;\n  var h1 = 1;\n  var i1 = 1;\n  var j1 = 1;\n  var k1 = 1;\n  var l1 = 1;\n  var m1 = 1;\n  var n1 = 1;\n  var o1 = 1;\n  var p1 = 1;\n  var q1 = 1;\n  var r1 = 1;\n  var s1 = 1;\n  var t1 = 1;\n  var u1 = 1;\n  var v1 = 1;\n  var w1 = 1;\n  var x2 = 1;\n  var y2 = 1;\n  var z2 = 1;\n  var r2 = 1;\n  var a2 = 1;\n  var b2 = 1;\n  var c2 = 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "triangle_area \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"-1\") = \"None\" ]]",
            "[[ $(candidate \"0\") = \"0\" ]]",
            "[[ $(candidate \"2\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a shthon function to find the smallest missing number from a sorted list of natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfind_First_Missing() {\n    let n = 0;\n    let m = 0;\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n    let x = [];\n    let y = [];\n    let z = [];\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n    let x = [];\n    let y = [];\n    let z = [];\n    let a = [];\n    let b = [];\n    let c = [];\n    let d = [];\n    let e = [];\n    let f = [];\n    let g = [];\n    let h = [];\n    let i = [];\n    let j = [];\n    let k = [];\n    let l = [];\n    let m = [];\n    let n = [];\n    let o = [];\n    let p = [];\n    let q = [];\n    let r = [];\n    let s = [];\n    let t = [];\n    let u = [];\n    let v = [];\n    let w = [];\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_First_Missing \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0 1 2 3\") = \"4\" ]]",
            "[[ $(candidate \"0 1 2 6 9\") = \"3\" ]]",
            "[[ $(candidate \"2 3 5 8 9\") = \"0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nreplace_spaces() {\n  for (let i = 0; i < this.length; i++) {\n    this[i] = this[i].replace(/\\s+/g, '%20');\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_spaces \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"My Name is Dawood\") = \"My%20Name%20is%20Dawood\" ]]",
            "[[ $(candidate \"I am a Programmer\") = \"I%20am%20a%20Programmer\" ]]",
            "[[ $(candidate \"I love Coding\") = \"I%20love%20Coding\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a shthon function to find even numbers from a list of numbers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nSplit() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "Split \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5\") = \"2 4\" ]]",
            "[[ $(candidate \"4 5 6 7 8 0 1\") = \"4 6 8 0\" ]]",
            "[[ $(candidate \"8 12 15 19\") = \"8 12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a shthon function to find smallest number in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsmallest_num() {\n  var list = [];\n  for (var i = 0; i < arguments.length; i++) {\n    list.push(arguments[i]);\n  }\n  return list.sort().length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "smallest_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 20 1 45 99\") = \"1\" ]]",
            "[[ $(candidate \"1 2 3\") = \"1\" ]]",
            "[[ $(candidate \"45 46 50 60\") = \"45\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nget_coordinates() {\n    var coordinates = [];\n    for (var i = 0; i < arguments.length; i++) {\n        var coordinate = arguments[i];\n        coordinates.push(coordinate.split(\",\"));\n    }\n    return coordinates;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_coordinates \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 4\") = \"2 3\\n2 4\\n2 5\\n3 3\\n3 4\\n3 5\\n4 3\\n4 4\\n4 5\" ]]",
            "[[ $(candidate \"4 5\") = \"3 4\\n3 5\\n3 6\\n4 4\\n4 5\\n4 6\\n5 4\\n5 5\\n5 6\" ]]",
            "[[ $(candidate \"5 6\") = \"4 5\\n4 6\\n4 7\\n5 5\\n5 6\\n5 7\\n6 5\\n6 6\\n6 7\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nreplace_spaces() {\n    var s = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            s[i] = \"_\";\n        } else if (s[i] == \"_\") {\n            s[i] = \"\";\n        }\n    }\n    return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_spaces \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Jumanji The Jungle\") = \"Jumanji_The_Jungle\" ]]",
            "[[ $(candidate \"The_Avengers\") = \"The Avengers\" ]]",
            "[[ $(candidate \"Fast and Furious\") = \"Fast_and_Furious\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a shthon function to move all zeroes to the end of the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmove_zero() {\n    var list = [0];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] == 0) {\n            list.push(i);\n        }\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "move_zero \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 0 2 0 3 4\") = \"1 2 3 4 0 0\" ]]",
            "[[ $(candidate \"2 3 2 0 0 4 0 5 0\") = \"2 3 2 4 5 0 0 0 0\" ]]",
            "[[ $(candidate \"0 1 0 1 1\") = \"1 1 1 0 0\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a shthon function to find the sum of xor of all pairs of numbers in the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\npair_xor_Sum() {\n    var sum = 0;\n    for (var i = 0; i < $1.length; i++) {\n        for (var j = 0; j < $1.length; j++) {\n            if ($1[i] === $1[j]) {\n                sum += $1[i];\n            }\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "pair_xor_Sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 9 7 6\" \"4\") = \"47\" ]]",
            "[[ $(candidate \"7 3 5\" \"3\") = \"12\" ]]",
            "[[ $(candidate \"7 3\" \"2\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nheap_sort() {\n    var heap = [];\n    for (var i = 0; i < list.length; i++) {\n        heap.push(list[i]);\n    }\n    heap.sort();\n    for (var i = 0; i < list.length; i++) {\n        list[i] = heap[i];\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "heap_sort \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 5 7 9 2 4 6 8 0\") = \"0 1 2 3 4 5 6 7 8 9\" ]]",
            "[[ $(candidate \"25 35 22 85 14 65 75 25 58\") = \"14 22 25 25 35 58 65 75 85\" ]]",
            "[[ $(candidate \"7 1 9 5\") = \"1 5 7 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nnoprofit_noloss() {\n  if (1 == $1) {\n    return 0;\n  }\n  if (2 == $1) {\n    return 1;\n  }\n  return -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "noprofit_noloss \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1500\" \"1200\") = \"false\" ]]",
            "[[ $(candidate \"100\" \"100\") = \"true\" ]]",
            "[[ $(candidate \"2000\" \"5000\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nwind_chill() {\n  var wind_vel = (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60.0) * (1.0 / 60\n}\n\n",
        "test_list": [
            "candidate() {",
            "wind_chill \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"120\" \"35\") = \"40\" ]]",
            "[[ $(candidate \"40\" \"20\") = \"19\" ]]",
            "[[ $(candidate \"10\" \"8\") = \"6\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsample_nam() {\n    var names = [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \"M\",\n        \"N\",\n        \"O\",\n        \"P\",\n        \"Q\",\n        \"R\",\n        \"S\",\n        \"T\",\n        \"U\",\n        \"V\",\n        \"W\",\n        \"X\",\n        \"Y\",\n        \"Z\",\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n        \"n\",\n        \"o\",\n        \"p\",\n        \"q\",\n        \"r\",\n        \"s\",\n        \"t\",\n        \"u\",\n        \"v\",\n        \"w\",\n        \"x\",\n        \"y\",\n        \"z\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n        \"J\",\n        \"K\",\n        \"L\",\n        \n}\n\n",
        "test_list": [
            "candidate() {",
            "sample_nam \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"sally Dylan rebecca Diana Joanne keith\") = \"16\" ]]",
            "[[ $(candidate \"php res Python abcd Java aaa\") = \"10\" ]]",
            "[[ $(candidate \"abcd Python abba aba\") = \"6\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given list list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_difference() {\n    var max_difference = 0;\n    var list = [];\n    for (var i = 0; i < list.length; i++) {\n        list[i] = list[i].split(' ');\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j] ='';\n            }\n        }\n    }\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j] ='';\n            }\n        }\n    }\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j] ='';\n            }\n        }\n    }\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j] ='';\n            }\n        }\n    }\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j] ='';\n            }\n        }\n    }\n    for (var i = 0; i < list.length; i++) {\n        for (var j = 0; j < list[i].length; j++) {\n            if (list[i][j] == '-') {\n                list[i][j]\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_difference \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 5\\n1 7\\n10 3\\n1 2\") = \"7\" ]]",
            "[[ $(candidate \"4 6\\n2 17\\n9 13\\n11 12\") = \"15\" ]]",
            "[[ $(candidate \"12 35\\n21 27\\n13 23\\n41 22\") = \"23\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_nonagonal() {\n  let n = 1;\n  while (n < 10) {\n    if (is_nonagonal(n)) {\n      return n;\n    }\n    n++;\n  }\n  return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_nonagonal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"325\" ]]",
            "[[ $(candidate \"15\") = \"750\" ]]",
            "[[ $(candidate \"18\") = \"1089\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_wordz_middle() {\n    if (text_match_wordz_middle_start(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle_end(text_match_wordz_middle\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_wordz_middle \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"pythonzabc.\") = \"true\" ]]",
            "[[ $(candidate \"zxyabc.\") = \"false\" ]]",
            "[[ $(candidate \"  lang  .\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a shthon function to reverse an array upto a given position.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nreverse_Array_Upto_K() {\n    var $1 = \"\";\n    var $2 = 0;\n    for (var $i = 0; $i < $2; $i++) {\n        $1 = $1 + $2;\n        $2 = $2 + 1;\n    }\n    return $1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "reverse_Array_Upto_K \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6\" \"4\") = \"4 3 2 1 5 6\" ]]",
            "[[ $(candidate \"4 5 6 7\" \"2\") = \"5 4 6 7\" ]]",
            "[[ $(candidate \"9 8 7 6 5\" \"3\") = \"7 8 9 6 5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten a list and sum all of its elements.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nrecursive_list_sum() {\n    var list = [];\n    for (var i = 0; i < arguments.length; i++) {\n        list.push(arguments[i]);\n    }\n    return list.reduce(function(a, b) {\n        return a + b;\n    }, 0);\n}\n\n",
        "test_list": [
            "candidate() {",
            "recursive_list_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6\") = \"21\" ]]",
            "[[ $(candidate \"7 10 15 14 19 41\") = \"106\" ]]",
            "[[ $(candidate \"10 20 30 40 50 60\") = \"210\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a shthon function to count the number of positive numbers in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\npos_count() {\n  var list = [];\n  for (var i = 0; i < 10; i++) {\n    list.push(i);\n  }\n  return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "pos_count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 -2 3 -4\") = \"2\" ]]",
            "[[ $(candidate \"3 4 5 -1\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3 4\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nbell_number() {\n  var n = 1;\n  for (var i = 2; i <= 100; i++) {\n    if (i % 2 == 0) {\n      n++;\n    }\n  }\n  return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "bell_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"2\" ]]",
            "[[ $(candidate \"10\") = \"115975\" ]]",
            "[[ $(candidate \"56\") = \"6775685320645824322581483068371419745979053216268760300\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a shthon function to check whether the given array is monotonic or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nis_Monotonic() {\n  var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var e = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var f = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var g = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var h = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var i = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var j = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var k = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var m = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var o = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var p = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var q = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  var r = [1, 2, 3, 4, 5, 6, 7, 8, 9\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_Monotonic \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"6 5 4 4\") = \"true\" ]]",
            "[[ $(candidate \"1 2 2 3\") = \"true\" ]]",
            "[[ $(candidate \"1 3 2\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether a list contains the given sublist or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_sublist() {\n  var list = [1, 2, 3, 4, 5];\n  var sublist = list.slice(0, 2);\n  return sublist.indexOf(list[0]) === 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_sublist \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 4 3 5 7\" \"3 7\") = \"false\" ]]",
            "[[ $(candidate \"2 4 3 5 7\" \"4 3\") = \"true\" ]]",
            "[[ $(candidate \"2 4 3 5 7\" \"1 6\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a shthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\ndiffer_At_One_Bit_Pos() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n}\n\n",
        "test_list": [
            "candidate() {",
            "differ_At_One_Bit_Pos \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"13\" \"9\") = \"true\" ]]",
            "[[ $(candidate \"15\" \"8\") = \"false\" ]]",
            "[[ $(candidate \"2\" \"4\") = \"false\" ]]",
            "[[ $(candidate \"2\" \"3\") = \"true\" ]]",
            "[[ $(candidate \"5\" \"1\") = \"true\" ]]",
            "[[ $(candidate \"1\" \"5\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given lists have equal length or not.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nget_equal() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var result = true;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i]!= list[i]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_equal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"11 22 33\\n44 55 66\") = \"true\" ]]",
            "[[ $(candidate \"1 2 3\\n4 5 6 7\") = \"false\" ]]",
            "[[ $(candidate \"1 2\\n3 4\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort a list of elements.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncomb_sort() {\n    var list = [];\n    for (var i = 0; i < this.length; i++) {\n        list.push(this[i]);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "comb_sort \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 15 37 25 79\") = \"5 15 25 37 79\" ]]",
            "[[ $(candidate \"41 32 15 19 22\") = \"15 19 22 32 41\" ]]",
            "[[ $(candidate \"99 15 13 47\") = \"13 15 47 99\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add a CSV to the list. The output should be a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a two column CSV in key,value order\nadd_dict_to_tuple() {\n    var list = [];\n    var key = \"key\";\n    var value = \"value\";\n    var key_value = \"key_value\";\n    var key_value_value = \"key_value_value\";\n    var key_value_value_value = \"key_value_value_value\";\n    var key_value_value_value_value = \"key_value_value_value_value\";\n    var key_value_value_value_value_value = \"key_value_value_value_value_value\";\n    var key_value_value_value_value_value_value = \"key_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value_value_value_value_value_value\";\n    var key_value_value_value_value_value_value_value_value_value_value_value_value_value_value = \"key_value_value_value_value_value_value_value_value_value_value_value_value_value_value\";\n    var\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_dict_to_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4 5 6\" \"MSAM,1\\nis,2\\nbest,3\") = \"4 5 6 MSAM,1\\nis,2\\nbest,3\" ]]",
            "[[ $(candidate \"1 2 3\" \"UTS,2\\nis,3\\nWorst,4\") = \"1 2 3 UTS,2\\nis,3\\nWorst,4\" ]]",
            "[[ $(candidate \"8 9 10\" \"POS,3\\nis,4\\nOkay,5\") = \"8 9 10 POS,3\\nis,4\\nOkay,5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmaxAverageOfPath() {\n    let max = 0;\n    let maxIndex = 0;\n    let maxIndexOfPath = 0;\n    let maxIndexOfPathOfLength = 0;\n    let maxIndexOfPathOfLengthOfLength = 0;\n    let maxIndexOfPathOfLengthOfLengthOfLength = 0;\n    let maxIndexOfPathOfLengthOfLengthOfLengthOfLength = 0;\n    let maxIndexOfPathOfLengthOfLengthOfLengthOfLengthOfLength = 0;\n    let maxIndexOfPathOfLengthOfLengthOfLengthOfLengthOfLengthOfLength = 0;\n    let maxIndexOfPathOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOfLengthOf\n}\n\n",
        "test_list": [
            "candidate() {",
            "maxAverageOfPath \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\\n6 5 4\\n7 3 9\") = \"5.2\" ]]",
            "[[ $(candidate \"2 3 4\\n7 6 5\\n8 4 10\") = \"6.2\" ]]",
            "[[ $(candidate \"3 4 5\\n8 7 6\\n9 5 11\") = \"7.2\" ]]",
            "[[ $(candidate \"1 2 3\\n4 5 6\\n7 8 9\") = \"5.8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncount_same_pair() {\n    var a = [1,2,3,4,5,6,7,8,9];\n    var b = [1,2,3,4,5,6,7,8,9];\n    var c = [1,2,3,4,5,6,7,8,9];\n    var d = [1,2,3,4,5,6,7,8,9];\n    var e = [1,2,3,4,5,6,7,8,9];\n    var f = [1,2,3,4,5,6,7,8,9];\n    var g = [1,2,3,4,5,6,7,8,9];\n    var h = [1,2,3,4,5,6,7,8,9];\n    var i = [1,2,3,4,5,6,7,8,9];\n    var j = [1,2,3,4,5,6,7,8,9];\n    var k = [1,2,3,4,5,6,7,8,9];\n    var l = [1,2,3,4,5,6,7,8,9];\n    var m = [1,2,3,4,5,6,7,8,9];\n    var n = [1,2,3,4,5,6,7,8,9];\n    var o = [1,2,3,4,5,6,7,8,9];\n    var p = [1,2,3,4,5,6,7,8,9];\n    var q = [1,2,3,4,5,6,7,8,9];\n    var r = [1,2,3,4,5,6,7,8,9];\n    var s = [1,2,3,4,5\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_same_pair \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8\" \"2 2 3 1 2 6 7 9\") = \"4\" ]]",
            "[[ $(candidate \"0 1 2 -1 -5 6 0 -3 -2 3 4 6 8\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"11\" ]]",
            "[[ $(candidate \"2 4 -6 -9 11 -12 14 -5 17\" \"2 1 2 -1 -5 6 4 -3 -2 3 4 6 8\") = \"1\" ]]",
            "[[ $(candidate \"0 1 1 2\" \"0 1 2 2\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\npower_base_sum() {\n  var sum = 0;\n  for (var i = 1; i <= 10; i++) {\n    sum += i * pow(10, i);\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "power_base_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\" \"100\") = \"115\" ]]",
            "[[ $(candidate \"8\" \"10\") = \"37\" ]]",
            "[[ $(candidate \"8\" \"15\") = \"62\" ]]",
            "[[ $(candidate \"3\" \"3\") = \"9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the list is equal to t_i * t_{i+1}.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmultiply_elements() {\n    var t_1 = [1,2,3,4,5,6,7,8,9];\n    var t_2 = [1,2,3,4,5,6,7,8,9];\n    var t_3 = [1,2,3,4,5,6,7,8,9];\n    var t_4 = [1,2,3,4,5,6,7,8,9];\n    var t_5 = [1,2,3,4,5,6,7,8,9];\n    var t_6 = [1,2,3,4,5,6,7,8,9];\n    var t_7 = [1,2,3,4,5,6,7,8,9];\n    var t_8 = [1,2,3,4,5,6,7,8,9];\n    var t_9 = [1,2,3,4,5,6,7,8,9];\n    var t_10 = [1,2,3,4,5,6,7,8,9];\n    var t_11 = [1,2,3,4,5,6,7,8,9];\n    var t_12 = [1,2,3,4,5,6,7,8,9];\n    var t_13 = [1,2,3,4,5,6,7,8,9];\n    var t_14 = [1,2,3,4,5,6,7,8,9];\n    var t_15 = [1,2,3,4,5,6,7,8,9];\n    var t_16 = [1,2,3,4,5,6,7,8,9];\n    var t_17 = [1,2,3,4\n}\n\n",
        "test_list": [
            "candidate() {",
            "multiply_elements \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 7 8 10\") = \"5 35 56 80\" ]]",
            "[[ $(candidate \"2 4 5 6 7\") = \"8 20 30 42\" ]]",
            "[[ $(candidate \"12 13 14 9 15\") = \"156 182 126 135\" ]]",
            "[[ $(candidate \"12\") = \"\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nsum_list() {\n  var a_1 = [];\n  var b_1 = [];\n  var a_n = [];\n  var b_n = [];\n  for (var i = 0; i < $1.length; i++) {\n    a_1.push($1[i]);\n    b_1.push($1[i]);\n    a_n.push($1[i]);\n    b_n.push($1[i]);\n  }\n  for (var i = 0; i < $2.length; i++) {\n    a_1.push($2[i]);\n    b_1.push($2[i]);\n    a_n.push($2[i]);\n    b_n.push($2[i]);\n  }\n  return {\n    a: a_1,\n    b: b_1,\n    n: a_n,\n    n_b: b_n\n  };\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 20 30\" \"15 25 35\") = \"25 45 65\" ]]",
            "[[ $(candidate \"1 2 3\" \"5 6 7\") = \"6 8 10\" ]]",
            "[[ $(candidate \"15 20 30\" \"15 45 75\") = \"30 65 105\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a shthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ndif_Square() {\n    if (1 < 2) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "dif_Square \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"true\" ]]",
            "[[ $(candidate \"10\") = \"false\" ]]",
            "[[ $(candidate \"15\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nconsecutive_duplicates() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var result = [];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] == list[i - 1]) {\n            result.push(list[i]);\n        } else {\n            result.push(list[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "consecutive_duplicates \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 1 2 3 4 5 6 7 8 9 4\" ]]",
            "[[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 15 19 18 17 26 17 18 10\" ]]",
            "[[ $(candidate \"a a b c d d\") = \"a b c d\" ]]",
            "[[ $(candidate \"a a b c d d a a\") = \"a b c d a\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nlateralsurface_cone() {\n  var r = 1;\n  var h = 2;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l =\n}\n\n",
        "test_list": [
            "candidate() {",
            "lateralsurface_cone \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\" \"12\") = \"204.20352248333654\" ]]",
            "[[ $(candidate \"10\" \"15\") = \"566.3586699569488\" ]]",
            "[[ $(candidate \"19\" \"17\") = \"1521.8090132193388\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nreplace_specialchar() {\n    var s = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == \" \" || s[i] == \",\" || s[i] == \".\" || s[i] == \":\") {\n            s = s.replace(s[i], \":\");\n        }\n    }\n    return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "replace_specialchar \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python language, Programming language.\") = \"Python:language::Programming:language:\" ]]",
            "[[ $(candidate \"a b c,d e f\") = \"a:b:c:d:e:f\" ]]",
            "[[ $(candidate \"ram reshma,ram rahim\") = \"ram:reshma:ram:rahim\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_first_occurrence() {\n    let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let index = find_first_occurrence(arr, 0);\n    console.log(index);\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_first_occurrence \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 5 5 5 6 6 8 9 9 9\" \"5\") = \"1\" ]]",
            "[[ $(candidate \"2 3 5 5 6 6 8 9 9 9\" \"5\") = \"2\" ]]",
            "[[ $(candidate \"2 4 1 5 6 6 8 9 9 9\" \"6\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a shthon function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsum_Of_Subarray_Prod() {\n  var sum = 0;\n  for (var i = 0; i < 1; i++) {\n    for (var j = 0; j < 1; j++) {\n      sum += sum_Of_Subarray_Prod(i, j);\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_Of_Subarray_Prod \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"20\" ]]",
            "[[ $(candidate \"1 2\") = \"5\" ]]",
            "[[ $(candidate \"1 2 3 4\") = \"84\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a shthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ntoggle_middle_bits() {\n  var first = 1;\n  var last = 0;\n  var middle = 0;\n  var i = 0;\n  while (i < first) {\n    middle = middle + 1;\n    if (middle > last) {\n      middle = 0;\n    }\n    first = middle;\n    last = middle;\n    middle = middle + 1;\n    i++;\n  }\n  return middle;\n}\n\n",
        "test_list": [
            "candidate() {",
            "toggle_middle_bits \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"9\") = \"15\" ]]",
            "[[ $(candidate \"10\") = \"12\" ]]",
            "[[ $(candidate \"11\") = \"13\" ]]",
            "[[ $(candidate \"65\") = \"127\" ]]",
            "[[ $(candidate \"77\") = \"115\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/shthon-exercises/data-structures-and-algorithms/shthon-data-structure-exercise-24.php",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nleft_insertion() {\n  var left = 0;\n  var right = 0;\n  var count = 0;\n  var left_count = 0;\n  var right_count = 0;\n  var left_value = 0;\n  var right_value = 0;\n  var left_value_count = 0;\n  var right_value_count = 0;\n  var left_value_count_count = 0;\n  var right_value_count_count = 0;\n  var left_value_count_count_count = 0;\n  var left_value_count_count_count_count = 0;\n  var left_value_count_count_count_count_count = 0;\n  var left_value_count_count_count_count_count_count = 0;\n  var left_value_count_count_count_count_count_count_count = 0;\n  var left_value_count_count_count_count_count_count_count_count_count = 0;\n  var left_value_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\n}\n\n",
        "test_list": [
            "candidate() {",
            "left_insertion \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]",
            "[[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]",
            "[[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncheck_str() {\n    if (is_vowel(this.toLowerCase())) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_str \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"annie\") = \"true\" ]]",
            "[[ $(candidate \"dawood\") = \"false\" ]]",
            "[[ $(candidate \"Else\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/shthon-exercises/data-structures-and-algorithms/shthon-recursion-exercise-9.php",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ngeometric_sum() {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "geometric_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"7\") = \"1.9921875\" ]]",
            "[[ $(candidate \"4\") = \"1.9375\" ]]",
            "[[ $(candidate \"8\") = \"1.99609375\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a shthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nfind_Index() {\n  let n = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n  let m = 0;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Index \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"4\" ]]",
            "[[ $(candidate \"3\") = \"14\" ]]",
            "[[ $(candidate \"4\") = \"45\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given list to a key-value CSV using adjacent elements. https://www.geeksforgeeks.org/shthon-convert-list-to-adjacent-pair-CSV/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ntuple_to_dict() {\n  var list = [];\n  for (var i = 0; i < 10; i++) {\n    list.push(i);\n  }\n  return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "tuple_to_dict \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 7 10 13 5\") = \"1,5\\n7,10\\n13,5\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\") = \"1,2\\n3,4\\n5,6\" ]]",
            "[[ $(candidate \"7 8 9 10 11 12\") = \"7,8\\n9,10\\n11,12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a shthon function to check whether all the characters are same or not.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nall_Characters_Same() {\n    var all_Characters = '';\n    for (var i = 0; i < this.length; i++) {\n        all_Characters += this[i];\n    }\n    return all_Characters;\n}\n\n",
        "test_list": [
            "candidate() {",
            "all_Characters_Same \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python\") = \"false\" ]]",
            "[[ $(candidate \"aaa\") = \"true\" ]]",
            "[[ $(candidate \"data\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\narea_tetrahedron() {\n  var x = 1;\n  var y = 1;\n  var z = 1;\n  var a = 1;\n  var b = 1;\n  var c = 1;\n  var d = 1;\n  var e = 1;\n  var f = 1;\n  var g = 1;\n  var h = 1;\n  var i = 1;\n  var j = 1;\n  var k = 1;\n  var l = 1;\n  var m = 1;\n  var n = 1;\n  var o = 1;\n  var p = 1;\n  var q = 1;\n  var r = 1;\n  var s = 1;\n  var t = 1;\n  var u = 1;\n  var v = 1;\n  var w = 1;\n  var x1 = 1;\n  var y1 = 1;\n  var z1 = 1;\n  var a1 = 1;\n  var b1 = 1;\n  var c1 = 1;\n  var d1 = 1;\n  var e1 = 1;\n  var f1 = 1;\n  var g1 = 1;\n  var h1 = 1;\n  var i1 = 1;\n  var j1 = 1;\n  var k1 = 1;\n  var l1 = 1;\n  var m1 = 1;\n  var n1 = 1;\n  var o1 = 1;\n  var p1 = 1;\n  var q1 = 1;\n  var r1 = 1;\n  var s1 = 1;\n  var t1 = 1;\n  var u1 = 1;\n  var v1 = 1;\n  var w1 = 1;\n  var x2 = 1;\n  var y2 = 1;\n  var z2 = 1;\n  var a2 = 1;\n  var b2 = 1;\n  var c2 = 1;\n  var d2 = 1;\n  var e2 = 1;\n  var f2 = 1;\n  var g2 = 1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "area_tetrahedron \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\") = \"15.588457268119894\" ]]",
            "[[ $(candidate \"20\") = \"692.8203230275509\" ]]",
            "[[ $(candidate \"10\") = \"173.20508075688772\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/shthon-program-right-rotate-list-n/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nrotate_right() {\n  var list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,\n}\n\n",
        "test_list": [
            "candidate() {",
            "rotate_right \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"3\") = \"8 9 10 1 2 3 4 5 6 7\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"2\") = \"9 10 1 2 3 4 5 6 7 8\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\" \"5\") = \"6 7 8 9 10 1 2 3 4 5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given list has any none value or not.",
        "code": "#!/bin/bash\n#\n# $1 is a $Any\ncheck_none() {\n    if (this.length == 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_none \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 5 6 None\") = \"true\" ]]",
            "[[ $(candidate \"7 8 9 11 14\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3 4 None\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/shthon-exercises/lambda/shthon-lambda-exercise-24.php",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\ndivisible_by_digits() {\n  let startnum = 1;\n  let endnum = 10;\n  let nums = [];\n  let num = 0;\n  while (startnum <= endnum) {\n    num = startnum;\n    while (num <= endnum) {\n      if (num % 10 === 0) {\n        nums.push(num);\n        num = nums[nums.length - 1];\n      } else {\n        num = nums[nums.length - 1];\n      }\n    }\n    startnum += 1;\n  }\n  return nums;\n}\n\n",
        "test_list": [
            "candidate() {",
            "divisible_by_digits \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"22\") = \"1 2 3 4 5 6 7 8 9 11 12 15 22\" ]]",
            "[[ $(candidate \"1\" \"15\") = \"1 2 3 4 5 6 7 8 9 11 12 15\" ]]",
            "[[ $(candidate \"20\" \"25\") = \"22 24\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nsector_area() {\n    let radius = 1;\n    let angle = 0;\n    while (radius < 360) {\n        if (angle < 360) {\n            return radius;\n        }\n        radius += 1;\n        angle += 360;\n    }\n    return null;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sector_area \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"4\" \"45\") = \"6.283185307179586\" ]]",
            "[[ $(candidate \"9\" \"45\") = \"31.808625617596654\" ]]",
            "[[ $(candidate \"9\" \"361\") = \"None\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\n# $3 is a string\nlcs_of_three() {\n  let lcs = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let\n}\n\n",
        "test_list": [
            "candidate() {",
            "lcs_of_three \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") = \"2\" ]]",
            "[[ $(candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") = \"5\" ]]",
            "[[ $(candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncapital_words_spaces() {\n    var words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var spacesn}\n\n",
        "test_list": [
            "candidate() {",
            "capital_words_spaces \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Python\") = \"Python\" ]]",
            "[[ $(candidate \"PythonProgrammingExamples\") = \"Python Programming Examples\" ]]",
            "[[ $(candidate \"GetReadyToBeCodingFreak\") = \"Get Ready To Be Coding Freak\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nis_samepatterns() {\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  \n}\n\n",
        "test_list": [
            "candidate() {",
            "is_samepatterns \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"red green green\" \"a b b\") = \"true\" ]]",
            "[[ $(candidate \"red green greenn\" \"a b b\") = \"false\" ]]",
            "[[ $(candidate \"red green greenn\" \"a b\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given list to the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nadd_tuple() {\n    var list = [];\n    for (var i = 0; i < 3; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "add_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5 6 7\" \"9 10\") = \"5 6 7 9 10\" ]]",
            "[[ $(candidate \"6 7 8\" \"10 11\") = \"6 7 8 10 11\" ]]",
            "[[ $(candidate \"7 8 9\" \"11 12\") = \"7 8 9 11 12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncheck_min_heap() {\n  var a = [1,2,3,4,5,6,7,8,9];\n  var b = [1,2,3,4,5,6,7,8,9];\n  var c = [1,2,3,4,5,6,7,8,9];\n  var d = [1,2,3,4,5,6,7,8,9];\n  var e = [1,2,3,4,5,6,7,8,9];\n  var f = [1,2,3,4,5,6,7,8,9];\n  var g = [1,2,3,4,5,6,7,8,9];\n  var h = [1,2,3,4,5,6,7,8,9];\n  var i = [1,2,3,4,5,6,7,8,9];\n  var j = [1,2,3,4,5,6,7,8,9];\n  var k = [1,2,3,4,5,6,7,8,9];\n  var l = [1,2,3,4,5,6,7,8,9];\n  var m = [1,2,3,4,5,6,7,8,9];\n  var n = [1,2,3,4,5,6,7,8,9];\n  var o = [1,2,3,4,5,6,7,8,9];\n  var p = [1,2,3,4,5,6,7,8,9];\n  var q = [1,2,3,4,5,6,7,8,9];\n  var r = [1,2,3,4,5,6,7,8,9];\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_min_heap \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]",
            "[[ $(candidate \"2 3 4 5 10 15\") = \"true\" ]]",
            "[[ $(candidate \"2 10 4 5 3 15\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "#!/bin/bash\n#\n# $1 is an integer\njacobsthal_num() {\n  var jacobsthal_num = 0;\n  for (var i = 1; i <= 100; i++) {\n    if (i % 2 == 0) {\n      jacobsthal_num += i;\n    }\n  }\n  return jacobsthal_num;\n}\n\n",
        "test_list": [
            "candidate() {",
            "jacobsthal_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"11\" ]]",
            "[[ $(candidate \"2\") = \"1\" ]]",
            "[[ $(candidate \"4\") = \"5\" ]]",
            "[[ $(candidate \"13\") = \"2731\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/shthon-find-minimum-k-records-from-list-list/ - in this case a verbatim cosh of test cases",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmin_k() {\n  let list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,\n}\n\n",
        "test_list": [
            "candidate() {",
            "min_k \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Manjeet 10\\nAkshat 4\\nAkash 2\\nNikhil 8\" \"2\") = \"Akash 2\\nAkshat 4\" ]]",
            "[[ $(candidate \"Sanjeev 11\\nAngat 5\\nAkash 3\\nNepin 9\" \"3\") = \"Akash 3\\nAngat 5\\nNepin 9\" ]]",
            "[[ $(candidate \"tanmay 14\\nAmer 11\\nAyesha 9\\nSKD 16\" \"1\") = \"Ayesha 9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\n# $3 is a space-separated list\nextract_index_list() {\n    let l1 = [1, 2, 3];\n    let l2 = [1, 2, 3];\n    let l3 = [1, 2, 3];\n    let l4 = [1, 2, 3];\n    let l5 = [1, 2, 3];\n    let l6 = [1, 2, 3];\n    let l7 = [1, 2, 3];\n    let l8 = [1, 2, 3];\n    let l9 = [1, 2, 3];\n    let l10 = [1, 2, 3];\n    let l11 = [1, 2, 3];\n    let l12 = [1, 2, 3];\n    let l13 = [1, 2, 3];\n    let l14 = [1, 2, 3];\n    let l15 = [1, 2, 3];\n    let l16 = [1, 2, 3];\n    let l17 = [1, 2, 3];\n    let l18 = [1, 2, 3];\n    let l19 = [1, 2, 3];\n    let l20 = [1, 2, 3];\n    let l21 = [1, 2, 3];\n    let l22 = [1, 2, 3];\n    let l23 = [1, 2, 3];\n    let l24 = [1, 2, 3];\n    let l25 = [1, 2, 3];\n    let l26 = [1, 2, 3];\n    let l27 = [1, 2, 3];\n    let l28 = [1, 2, 3];\n    let l29 = [1, 2, 3];\n    let l30 = [1, 2, 3];\n    let l31 = [1, 2, 3];\n    let l32 = [1, 2,\n}\n\n",
        "test_list": [
            "candidate() {",
            "extract_index_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 7\" ]]",
            "[[ $(candidate \"1 1 3 4 5 6 7\" \"0 1 2 3 4 6 5\" \"0 1 2 3 4 6 7\") = \"1 6\" ]]",
            "[[ $(candidate \"1 1 3 4 6 5 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"1 5\" ]]",
            "[[ $(candidate \"1 2 3 4 6 6 6\" \"0 1 2 3 4 5 7\" \"0 1 2 3 4 5 7\") = \"\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nsecond_smallest() {\n  var list = [];\n  for (var i = 0; i < 10; i++) {\n    list.push(i);\n  }\n  return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "second_smallest \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 -8 -2 0 -2\") = \"-2\" ]]",
            "[[ $(candidate \"1 1 -0.5 0 2 -2 -2\") = \"-0.5\" ]]",
            "[[ $(candidate \"2 2\") = \"None\" ]]",
            "[[ $(candidate \"2 2 2\") = \"None\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/shthon-exercises/re/shthon-re-exercise-3.php",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_zero_one() {\n  if (text_match_zero_one('')) {\n    return 'a'\n  }\n  return 'b'\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_zero_one \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"ac\") = \"false\" ]]",
            "[[ $(candidate \"dc\") = \"false\" ]]",
            "[[ $(candidate \"abbbba\") = \"true\" ]]",
            "[[ $(candidate \"dsabbbba\") = \"true\" ]]",
            "[[ $(candidate \"asbbbba\") = \"false\" ]]",
            "[[ $(candidate \"abaaa\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/shthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncount_reverse_pairs() {\n    let count = 0;\n    for (let i = 0; i < len(string); i++) {\n        if (string[i] =='') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_reverse_pairs \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"julia best tseb for ailuj\") = \"2\" ]]",
            "[[ $(candidate \"geeks best for skeeg\") = \"1\" ]]",
            "[[ $(candidate \"makes best sekam for rof\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nis_decimal() {\n  let str = \"1\";\n  let precision = 2;\n  let result = str.match(/^\\d+$/);\n  if (result) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_decimal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"123.11\") = \"true\" ]]",
            "[[ $(candidate \"e666.86\") = \"false\" ]]",
            "[[ $(candidate \"3.124587\") = \"false\" ]]",
            "[[ $(candidate \"1.11\") = \"true\" ]]",
            "[[ $(candidate \"1.1.11\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find lists which have all elements divisible by k from the given list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nfind_tuples() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var result = [];\n    for (var i = 0; i < list.length; i++) {\n        var list_i = list[i];\n        for (var j = 0; j < list_i; j++) {\n            if (list_i % j == 0) {\n                result.push(list_i);\n            }\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_tuples \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"6 24 12\\n7 9 6\\n12 18 21\" \"6\") = \"6 24 12\" ]]",
            "[[ $(candidate \"5 25 30\\n4 2 3\\n7 8 9\" \"5\") = \"5 25 30\" ]]",
            "[[ $(candidate \"7 9 16\\n8 16 4\\n19 17 18\" \"4\") = \"8 16 4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a shthon function to check whether a list of numbers contains only one distinct element or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nunique_Element() {\n    let list = [];\n    for (let i = 0; i < this.length; i++) {\n        if (list.indexOf(this[i]) === -1) {\n            list.push(this[i]);\n        }\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "unique_Element \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 1\") = \"true\" ]]",
            "[[ $(candidate \"1 2 1 2\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3 4 5\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncheck_monthnumber_number() {\n    var month = 1;\n    var days = 0;\n    while (month <= 12) {\n        if (month % 2 == 0) {\n            days++;\n        }\n        month++;\n    }\n    return days;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_monthnumber_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"6\") = \"true\" ]]",
            "[[ $(candidate \"2\") = \"false\" ]]",
            "[[ $(candidate \"12\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a shthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nfind_min_diff() {\n  let a = [1,2,3,4,5,6,7,8,9];\n  let b = [1,2,3,4,5,6,7,8,9];\n  let c = [1,2,3,4,5,6,7,8,9];\n  let d = [1,2,3,4,5,6,7,8,9];\n  let e = [1,2,3,4,5,6,7,8,9];\n  let f = [1,2,3,4,5,6,7,8,9];\n  let g = [1,2,3,4,5,6,7,8,9];\n  let h = [1,2,3,4,5,6,7,8,9];\n  let i = [1,2,3,4,5,6,7,8,9];\n  let j = [1,2,3,4,5,6,7,8,9];\n  let k = [1,2,3,4,5,6,7,8,9];\n  let l = [1,2,3,4,5,6,7,8,9];\n  let m = [1,2,3,4,5,6,7,8,9];\n  let n = [1,2,3,4,5,6,7,8,9];\n  let o = [1,2,3,4,5,6,7,8,9];\n  let p = [1,2,3,4,5,6,7,8,9];\n  let q = [1,2,3,4,5,6,7,8,9];\n  let r = [1,2,3,4,5,6,7,8,9];\n  let s =\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_min_diff \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 3 19 18 25\" \"6\") = \"1\" ]]",
            "[[ $(candidate \"4 3 2 6\" \"4\") = \"1\" ]]",
            "[[ $(candidate \"30 5 20 9\" \"4\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a shthon function to count number of digits in a given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nnumber_ctr() {\n  var count = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] == '0') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "number_ctr \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"program2bedone\") = \"1\" ]]",
            "[[ $(candidate \"3wonders\") = \"1\" ]]",
            "[[ $(candidate \"123\") = \"3\" ]]",
            "[[ $(candidate \"3wond-1ers2\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_polite() {\n  if (is_prime(2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_polite \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"7\") = \"11\" ]]",
            "[[ $(candidate \"4\") = \"7\" ]]",
            "[[ $(candidate \"9\") = \"13\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\npair_wise() {\n    var list = [];\n    for (var i = 0; i < list.length; i++) {\n        list[i] = list[i].split(' ');\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "pair_wise \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 2 3 3 4 4 5\") = \"1 1\\n1 2\\n2 3\\n3 3\\n3 4\\n4 4\\n4 5\" ]]",
            "[[ $(candidate \"1 5 7 9 10\") = \"1 5\\n5 7\\n7 9\\n9 10\" ]]",
            "[[ $(candidate \"5 1 9 7 10\") = \"5 1\\n1 9\\n9 7\\n7 10\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a shthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nget_pairs_count() {\n    var sum = 0;\n    for (var i = 0; i < this.length; i++) {\n        var sum = sum + this[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_pairs_count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 1 1 1\" \"2\") = \"6\" ]]",
            "[[ $(candidate \"1 5 7 -1 5\" \"6\") = \"3\" ]]",
            "[[ $(candidate \"1 -2 3\" \"1\") = \"1\" ]]",
            "[[ $(candidate \"-1 -2 3\" \"-3\") = \"1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a shthon function to get the difference between two lists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nDiff() {\n  var a = [];\n  var b = [];\n  for (var i = 0; i < 2; i++) {\n    a.push(i);\n    b.push(i);\n  }\n  return a.length - b.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "Diff \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 15 20 25 30 35 40\" \"25 40 35\") = \"10 20 30 15\" ]]",
            "[[ $(candidate \"1 2 3 4 5\" \"6 7 1\") = \"2 3 4 5 6 7\" ]]",
            "[[ $(candidate \"1 2 3\" \"6 7 1\") = \"2 3 6 7\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a shthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nodd_num_sum() {\n  var sum = 0;\n  for (var i = 1; i < 4; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "odd_num_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\") = \"82\" ]]",
            "[[ $(candidate \"3\") = \"707\" ]]",
            "[[ $(candidate \"4\") = \"3108\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncheck_expression() {\n  if (is_balanced(1, \"()\")) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_expression \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"{()}[{}]\") = \"true\" ]]",
            "[[ $(candidate \"{()}[{]\") = \"false\" ]]",
            "[[ $(candidate \"{()}[{}][]({})\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is an integer\nremove_length() {\n    let words = this.split(\" \");\n    let length = 0;\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > length) {\n            length = words[i].length;\n        }\n    }\n    return length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_length \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"The person is most value tet\" \"3\") = \"person is most value\" ]]",
            "[[ $(candidate \"If you told me about this ok\" \"4\") = \"If you me about ok\" ]]",
            "[[ $(candidate \"Forces of darkeness is come into the play\" \"4\") = \"Forces of darkeness is the\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "code": "#!/bin/bash\n#\n# $1 is a string\n# $2 is a string\noccurance_substring() {\n  if (len(argv) < 2) {\n    return None;\n  }\n  const char *s1 = argv[1];\n  const char *s2 = argv[2];\n  int i = 0;\n  int j = 0;\n  int k = 0;\n  int l = 0;\n  int m = 0;\n  int n = 0;\n  int o = 0;\n  int p = 0;\n  int q = 0;\n  int r = 0;\n  int s = 0;\n  int t = 0;\n  int u = 0;\n  int v = 0;\n  int w = 0;\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int a = 0;\n  int b = 0;\n  int c = 0;\n  int d = 0;\n  int e = 0;\n  int f = 0;\n  int g = 0;\n  int h = 0;\n  int i1 = 0;\n  int i2 = 0;\n  int i3 = 0;\n  int i4 = 0;\n  int i5 = 0;\n  int i6 = 0;\n  int i7 = 0;\n  int i8 = 0;\n  int i9 = 0;\n  int i10 = 0;\n  int i11 = 0;\n  int i12 = 0;\n  int i13 = 0;\n  int i14 = 0;\n  int i15 = 0;\n  int i16 = 0;\n  int i17 = 0;\n  int i18 = 0;\n  int i19 = 0;\n  int i20 = 0;\n  int i21 = 0;\n  int i22 = 0;\n  int i23 = 0;\n  int i24 = 0;\n  int i25 = 0;\n  int i26 = 0;\n  int i27 = 0;\n  int i28 = 0;\n  int\n}\n\n",
        "test_list": [
            "candidate() {",
            "occurance_substring \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python programming, python language\" \"python\") = \"python 0 6\" ]]",
            "[[ $(candidate \"python programming,programming language\" \"programming\") = \"programming 7 18\" ]]",
            "[[ $(candidate \"python programming,programming language\" \"language\") = \"language 31 39\" ]]",
            "[[ $(candidate \"c++ programming, c++ language\" \"python\") = \"None\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a shthon function to check whether every odd index contains odd numbers of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nodd_position() {\n  for (var i = 0; i < 2; i++) {\n    if (i % 2 == 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "odd_position \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 1 4 3 6 7 6 3\") = \"true\" ]]",
            "[[ $(candidate \"4 1 2\") = \"true\" ]]",
            "[[ $(candidate \"1 2 3\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ncount_vowels() {\n    let count = 0;\n    for (let i = 0; i < this.length; i++) {\n        if (this[i] === 'a' || this[i] === 'e' || this[i] === 'i' || this[i] === 'o' || this[i] === 'u' || this[i] === 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_vowels \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"bestinstareels\") = \"7\" ]]",
            "[[ $(candidate \"partofthejourneyistheend\") = \"12\" ]]",
            "[[ $(candidate \"amazonprime\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a shthon function to find the sum of non-repeated elements in a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfind_sum() {\n    let sum = 0;\n    for (let i = 0; i < this.length; i++) {\n        if (this[i]!='') {\n            sum += this[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 1 1 4 5 6\") = \"21\" ]]",
            "[[ $(candidate \"1 10 9 4 2 10 10 45 4\") = \"71\" ]]",
            "[[ $(candidate \"12 10 9 45 2 10 10 45 10\") = \"78\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\npack_consecutive_duplicates() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var sublist = [];\n    for (var i = 0; i < list.length; i++) {\n        sublist.push(list[i]);\n    }\n    return sublist;\n}\n\n",
        "test_list": [
            "candidate() {",
            "pack_consecutive_duplicates \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4\") = \"0 0\\n1\\n2\\n3\\n4 4\\n5\\n6 6 6\\n7\\n8\\n9\\n4 4\" ]]",
            "[[ $(candidate \"10 10 15 19 18 18 17 26 26 17 18 10\") = \"10 10\\n15\\n19\\n18 18\\n17\\n26 26\\n17\\n18\\n10\" ]]",
            "[[ $(candidate \"a a b c d d\") = \"a a\\nb\\nc\\nd d\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a shthon function to find whether a number is divisible by 11.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_Diff() {\n  return (this % 11 == 0);\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_Diff \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"12345\") = \"false\" ]]",
            "[[ $(candidate \"1212112\") = \"true\" ]]",
            "[[ $(candidate \"1212\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/shthon-combinations-of-sum-with-lists-in-list-list/",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nfind_combinations() {\n  var list = [1,2,3,4,5,6,7,8,9];\n  var sum = 0;\n  for (var i = 0; i < list.length; i++) {\n    sum += list[i];\n  }\n  console.log(sum);\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_combinations \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2 4\\n6 7\\n5 1\\n6 10\") = \"8 11\\n7 5\\n8 14\\n11 8\\n12 17\\n11 11\" ]]",
            "[[ $(candidate \"3 5\\n7 8\\n6 2\\n7 11\") = \"10 13\\n9 7\\n10 16\\n13 10\\n14 19\\n13 13\" ]]",
            "[[ $(candidate \"4 6\\n8 9\\n7 3\\n8 12\") = \"12 15\\n11 9\\n12 18\\n15 12\\n16 21\\n15 15\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a shthon function to check whether the count of divisors is even. https://www.w3resource.com/shthon-exercises/basic/shthon-basic-1-exercise-24.php",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncount_divisors() {\n  let count = 0;\n  for (let i = 2; i <= 100; i++) {\n    if (i % 2 == 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_divisors \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"true\" ]]",
            "[[ $(candidate \"100\") = \"false\" ]]",
            "[[ $(candidate \"125\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a shthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nodd_length_sum() {\n  var sum = 0;\n  for (var i = 0; i < 1; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "odd_length_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 4\") = \"14\" ]]",
            "[[ $(candidate \"1 2 1 2\") = \"15\" ]]",
            "[[ $(candidate \"1 7\") = \"8\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nrgb_to_hsv() {\n  var r = parseInt(rgb_to_rgb(1, 1, 1));\n  var g = parseInt(rgb_to_rgb(1, 1, 1));\n  var b = parseInt(rgb_to_rgb(1, 1, 1));\n  var h = 0;\n  var s = 0;\n  var v = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var t = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n  var a = 0;\n  var r = 0;\n  var g = 0;\n  var b = 0;\n\n}\n\n",
        "test_list": [
            "candidate() {",
            "rgb_to_hsv \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"255\" \"255\" \"255\") = \"0.0 0.0 100.0\" ]]",
            "[[ $(candidate \"0\" \"215\" \"0\") = \"120.0 100.0 84.31372549019608\" ]]",
            "[[ $(candidate \"10\" \"215\" \"110\") = \"149.26829268292684 95.34883720930233 84.31372549019608\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nmul_even_odd() {\n    var a = 1;\n    var b = 2;\n    var c = 3;\n    var d = 4;\n    var e = 5;\n    var f = 6;\n    var g = 7;\n    var h = 8;\n    var i = 9;\n    var j = 10;\n    var k = 11;\n    var l = 12;\n    var m = 13;\n    var n = 14;\n    var o = 15;\n    var p = 16;\n    var q = 17;\n    var r = 18;\n    var s = 19;\n    var t = 20;\n    var u = 21;\n    var v = 22;\n    var w = 23;\n    var x = 24;\n    var y = 25;\n    var z = 26;\n    var a = 27;\n    var b = 28;\n    var c = 29;\n    var d = 30;\n    var e = 31;\n    var f = 32;\n    var g = 33;\n    var h = 34;\n    var i = 35;\n    var j = 36;\n    var k = 37;\n    var l = 38;\n    var m = 39;\n    var n = 40;\n    var o = 41;\n    var p = 42;\n    var q = 43;\n    var r = 44;\n    var s = 45;\n    var t = 46;\n    var u = 47;\n    var v = 48;\n    var w = 49;\n    var x = 50;\n    var y = 51;\n    var z = 52;\n    var a = 53;\n    var b = 54;\n    var c = 55;\n    var d = 56;\n    var e = 57;\n    var f = 58;\n    var g = 59;\n    var h = 60;\n    var i = 61;\n    var j = 62;\n    var k = 63;\n    var l = 64;\n    var m = 65;\n    var n = 66;\n    var\n}\n\n",
        "test_list": [
            "candidate() {",
            "mul_even_odd \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 5 7 4 1 6 8\") = \"4\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"2\" ]]",
            "[[ $(candidate \"1 5 7 9 10\") = \"10\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert list string to integer list.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntuple_str_int() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "tuple_str_int \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"(7, 8, 9)\") = \"7 8 9\" ]]",
            "[[ $(candidate \"(1, 2, 3)\") = \"1 2 3\" ]]",
            "[[ $(candidate \"(4, 5, 6)\") = \"4 5 6\" ]]",
            "[[ $(candidate \"(7, 81, 19)\") = \"7 81 19\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nright_insertion() {\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0\n}\n\n",
        "test_list": [
            "candidate() {",
            "right_insertion \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 4 5\" \"6\") = \"4\" ]]",
            "[[ $(candidate \"1 2 4 5\" \"3\") = \"2\" ]]",
            "[[ $(candidate \"1 2 4 5\" \"7\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_match_three() {\n  if (text_match(1, 3)) {\n    return true;\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_match_three \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"ac\") = \"false\" ]]",
            "[[ $(candidate \"dc\") = \"false\" ]]",
            "[[ $(candidate \"abbbba\") = \"true\" ]]",
            "[[ $(candidate \"caacabbbba\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new list from the given string and list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a string\nnew_tuple() {\n    var list = [];\n    for (var i = 0; i < $1.length; i++) {\n        list.push($1.charAt(i));\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "new_tuple \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"WEB is\" \"best\") = \"WEB is best\" ]]",
            "[[ $(candidate \"We are\" \"Developers\") = \"We are Developers\" ]]",
            "[[ $(candidate \"Part is\" \"Wrong\") = \"Part is Wrong\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a shthon function to check whether every even index contains even numbers of a given list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\neven_position() {\n  for (var i = 0; i < 2; i++) {\n    if (i % 2 == 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "even_position \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 2 1\") = \"false\" ]]",
            "[[ $(candidate \"1 2 3\") = \"false\" ]]",
            "[[ $(candidate \"2 1 4\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove lists from the given list.",
        "code": "#!/bin/bash\n#\n# $1 is a $Any\nremove_nested() {\n    var $list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235,\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_nested \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 5 7 4 6 10\") = \"1 5 7 10\" ]]",
            "[[ $(candidate \"2 6 8 5 7 11\") = \"2 6 8 11\" ]]",
            "[[ $(candidate \"3 7 9 6 8 12\") = \"3 7 9 12\" ]]",
            "[[ $(candidate \"3 7 9 6 8 5 12 12\") = \"3 7 9 12\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a shthon function to count the number of lists in a given number of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\ncount_list() {\n    var list = [];\n    for (var i = 0; i < list.length; i++) {\n        list[i] = list[i].split(' ');\n    }\n    return list.length;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3\\n5 7\\n9 11\\n13 15 17\") = \"4\" ]]",
            "[[ $(candidate \"1 2\\n2 3\\n4 5\") = \"3\" ]]",
            "[[ $(candidate \"1 0\\n2 0\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a shthon function to find the last position of an element in a sorted array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\nlast() {\n  let $1 = \"\";\n  let $2 = 0;\n  for (let $i = 0; $i < $1.length; $i++) {\n    if ($1[$i] == \" \") {\n      $2 = $2 + 1;\n    } else {\n      $2 = $2 + $1[$i];\n    }\n  }\n  return $2;\n}\n\n",
        "test_list": [
            "candidate() {",
            "last \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\" \"1\") = \"0\" ]]",
            "[[ $(candidate \"1 1 1 2 3 4\" \"1\") = \"2\" ]]",
            "[[ $(candidate \"2 3 2 3 6 8 9\" \"3\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "#!/bin/bash\n#\n# $1 is a string\ntext_starta_endb() {\n  if (text_starta_endb() == 'a') {\n    return 'b';\n  } else {\n    return 'a';\n  }\n}\n\n",
        "test_list": [
            "candidate() {",
            "text_starta_endb \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"aabbbb\") = \"true\" ]]",
            "[[ $(candidate \"aabAbbbc\") = \"false\" ]]",
            "[[ $(candidate \"accddbbjjj\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given CSV.",
        "code": "#!/bin/bash\n#\n# $1 is a two column CSV in key,value order\nreturn_sum() {\n    var sum = 0;\n    for (var i = 0; i < this.length; i++) {\n        sum += this[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "return_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"a,100\\nb,200\\nc,300\") = \"600\" ]]",
            "[[ $(candidate \"a,25\\nb,18\\nc,45\") = \"88\" ]]",
            "[[ $(candidate \"a,36\\nb,39\\nc,49\") = \"124\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a shthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nsum_in_range() {\n  var sum = 0;\n  for (var i = 1; i <= 100; i++) {\n    if (i % 2 == 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "candidate() {",
            "sum_in_range \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"2\" \"5\") = \"8\" ]]",
            "[[ $(candidate \"5\" \"7\") = \"12\" ]]",
            "[[ $(candidate \"7\" \"13\") = \"40\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a shthon function to find the sum of an array.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n_sum() {\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c = [1, 2, 3, 4, 5];\n    var d = [1, 2, 3, 4, 5];\n    var e = [1, 2, 3, 4, 5];\n    var f = [1, 2, 3, 4, 5];\n    var g = [1, 2, 3, 4, 5];\n    var h = [1, 2, 3, 4, 5];\n    var i = [1, 2, 3, 4, 5];\n    var j = [1, 2, 3, 4, 5];\n    var k = [1, 2, 3, 4, 5];\n    var l = [1, 2, 3, 4, 5];\n    var m = [1, 2, 3, 4, 5];\n    var n = [1, 2, 3, 4, 5];\n    var o = [1, 2, 3, 4, 5];\n    var p = [1, 2, 3, 4, 5];\n    var q = [1, 2, 3, 4, 5];\n    var r = [1, 2, 3, 4, 5];\n    var s = [1, 2, 3, 4, 5];\n    var t = [1, 2, 3, 4, 5];\n    var u = [1, 2, 3, 4, 5];\n    var v = [1, 2, 3, 4, 5];\n    var w = [1, 2, 3, 4, 5];\n    var x = [1, 2, 3, 4, 5];\n    var y = [1, 2, 3, 4, 5];\n    var z = [1, 2, 3, 4, 5];\n    var a = [1, 2, 3, 4, 5];\n    var b = [1, 2, 3, 4, 5];\n    var c = [1, 2, 3, 4, 5];\n    var d = [1, 2\n}\n\n",
        "test_list": [
            "candidate() {",
            "_sum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"6\" ]]",
            "[[ $(candidate \"15 12 13 10\") = \"50\" ]]",
            "[[ $(candidate \"0 1 2\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\nleft_rotate() {\n  var a = 1;\n  var b = 2;\n  var c = 3;\n  var d = 4;\n  var e = 5;\n  var f = 6;\n  var g = 7;\n  var h = 8;\n  var i = 9;\n  var j = 10;\n  var k = 11;\n  var l = 12;\n  var m = 13;\n  var n = 14;\n  var o = 15;\n  var p = 16;\n  var q = 17;\n  var r = 18;\n  var s = 19;\n  var t = 20;\n  var u = 21;\n  var v = 22;\n  var w = 23;\n  var x = 24;\n  var y = 25;\n  var z = 26;\n  var a = 27;\n  var b = 28;\n  var c = 29;\n  var d = 30;\n  var e = 31;\n  var f = 32;\n  var g = 33;\n  var h = 34;\n  var i = 35;\n  var j = 36;\n  var k = 37;\n  var l = 38;\n  var m = 39;\n  var n = 40;\n  var o = 41;\n  var p = 42;\n  var q = 43;\n  var r = 44;\n  var s = 45;\n  var t = 46;\n  var u = 47;\n  var v = 48;\n  var w = 49;\n  var x = 50;\n  var y = 51;\n  var z = 52;\n  var a = 53;\n  var b = 54;\n  var c = 55;\n  var d = 56;\n  var e = 57;\n  var f = 58;\n  var g = 59;\n  var h = 60;\n  var i = 61;\n  var j = 62;\n  var k = 63;\n  var l = 64;\n  var m = 65;\n  var\n}\n\n",
        "test_list": [
            "candidate() {",
            "left_rotate \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"16\" \"2\") = \"64\" ]]",
            "[[ $(candidate \"10\" \"2\") = \"40\" ]]",
            "[[ $(candidate \"99\" \"3\") = \"792\" ]]",
            "[[ $(candidate \"99\" \"3\") = \"792\" ]]",
            "[[ $(candidate \"1\" \"3\") = \"8\" ]]",
            "[[ $(candidate \"5\" \"3\") = \"40\" ]]",
            "[[ $(candidate \"29\" \"3\") = \"232\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a shthon function to check whether the length of the word is odd or not.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nword_len() {\n  return (this.length % 2) == 0;\n}\n\n",
        "test_list": [
            "candidate() {",
            "word_len \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Hadoop\") = \"false\" ]]",
            "[[ $(candidate \"great\") = \"true\" ]]",
            "[[ $(candidate \"structure\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nremove_all_spaces() {\n    var s = \"\";\n    for (var i = 0; i < s.length; i++) {\n        if (s[i] == \" \") {\n            s = s.substring(0, i);\n        }\n    }\n    return s;\n}\n\n",
        "test_list": [
            "candidate() {",
            "remove_all_spaces \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python  program\") = \"pythonprogram\" ]]",
            "[[ $(candidate \"python   programming    language\") = \"pythonprogramminglanguage\" ]]",
            "[[ $(candidate \"python                     program\") = \"pythonprogram\" ]]",
            "[[ $(candidate \"   python                     program\") = \"pythonprogram\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a shthon function to count the number of equal numbers from three given integers.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntest_three_equal() {\n  var count = 0;\n  for (var i = 1; i <= 3; i++) {\n    if (i == 1 || i == 2 || i == 3) {\n      count++;\n    }\n  }\n  console.log(count);\n}\n\n",
        "test_list": [
            "candidate() {",
            "test_three_equal \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\" \"1\" \"1\") = \"3\" ]]",
            "[[ $(candidate \"-1\" \"-2\" \"-3\") = \"0\" ]]",
            "[[ $(candidate \"1\" \"2\" \"2\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a shthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\ncount_rotation() {\n  let count = 0;\n  for (let i = 0; i < this.length; i++) {\n    let temp = this[i];\n    let temp_rotation = temp.rotation;\n    if (temp_rotation == 0) {\n      count++;\n    }\n    else {\n      let temp_rotation_next = temp_rotation + 1;\n      if (temp_rotation_next == this.length) {\n        count++;\n      }\n      else {\n        let temp_rotation_next_next = temp_rotation_next + 1;\n        if (temp_rotation_next_next == this.length) {\n          count++;\n        }\n        else {\n          let temp_rotation_next_next_next = temp_rotation_next_next + 1;\n          if (temp_rotation_next_next_next == this.length) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "candidate() {",
            "count_rotation \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3 2 1\") = \"1\" ]]",
            "[[ $(candidate \"4 5 1 2 3\") = \"2\" ]]",
            "[[ $(candidate \"7 8 9 1 2 3\") = \"3\" ]]",
            "[[ $(candidate \"1 2 3\") = \"0\" ]]",
            "[[ $(candidate \"1 3 2\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_perfect_square() {\n  if (is_perfect_square(1)) {\n    return true;\n  }\n  return false;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_perfect_square \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"false\" ]]",
            "[[ $(candidate \"36\") = \"true\" ]]",
            "[[ $(candidate \"14\") = \"false\" ]]",
            "[[ $(candidate \"196\") = \"true\" ]]",
            "[[ $(candidate \"125\") = \"false\" ]]",
            "[[ $(candidate \"15625\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in a list is even or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nis_product_even() {\n  for (let i = 0; i < this.length; i++) {\n    if (this[i] % 2 == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_product_even \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\") = \"true\" ]]",
            "[[ $(candidate \"1 2 1 4\") = \"true\" ]]",
            "[[ $(candidate \"1 1\") = \"false\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nmax_sum_list() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_sum_list \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\\n4 5 6\\n10 11 12\\n7 8 9\") = \"10 11 12\" ]]",
            "[[ $(candidate \"3 2 1\\n6 5 4\\n12 11 10\") = \"12 11 10\" ]]",
            "[[ $(candidate \"2 3 1\") = \"2 3 1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nmax_run_uppercase() {\n  var max = 0;\n  for (var i = 0; i < this.length; i++) {\n    if (this[i] === 'a' || this[i] === 'A') {\n      max = i;\n    }\n  }\n  return max;\n}\n\n",
        "test_list": [
            "candidate() {",
            "max_run_uppercase \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"GeMKSForGERksISBESt\") = \"5\" ]]",
            "[[ $(candidate \"PrECIOusMOVemENTSYT\") = \"6\" ]]",
            "[[ $(candidate \"GooGLEFluTTER\") = \"4\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a shthon function to find the first odd number in a given list of numbers.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfirst_odd() {\n    var list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var odd = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            odd = list[i];\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "candidate() {",
            "first_odd \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 3 5\") = \"1\" ]]",
            "[[ $(candidate \"2 4 1 3\") = \"1\" ]]",
            "[[ $(candidate \"8 9 1\") = \"9\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given lists contain the k or not.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is an integer\ncheck_K() {\n    var k = 0;\n    for (var i = 0; i < $1.length; i++) {\n        if ($1[i] == 'k') {\n            k++;\n        }\n    }\n    return k;\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_K \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 4 5 6 8\" \"6\") = \"true\" ]]",
            "[[ $(candidate \"1 2 3 4 5 6\" \"7\") = \"false\" ]]",
            "[[ $(candidate \"7 8 9 44 11 12\" \"11\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second list is smaller than its corresponding element in the first list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncheck_smaller() {\n    var first = [1, 2, 3, 4, 5];\n    var second = [1, 2, 3, 4, 5];\n    var result = check_smaller(first, second);\n    console.log(result);\n}\n\n",
        "test_list": [
            "candidate() {",
            "check_smaller \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3\" \"2 3 4\") = \"false\" ]]",
            "[[ $(candidate \"4 5 6\" \"3 4 5\") = \"true\" ]]",
            "[[ $(candidate \"11 12 13\" \"10 11 12\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ntetrahedral_number() {\n  var n = 1;\n  while (n < 10) {\n    if (n % 2 == 0) {\n      return n;\n    }\n    n += 1;\n  }\n  return -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "tetrahedral_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"5\") = \"35\" ]]",
            "[[ $(candidate \"6\") = \"56\" ]]",
            "[[ $(candidate \"7\") = \"84\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a shthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nget_Char() {\n    var char = '';\n    for (var i = 0; i < 26; i++) {\n        char += (i + 1);\n    }\n    return char;\n}\n\n",
        "test_list": [
            "candidate() {",
            "get_Char \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"abc\") = \"f\" ]]",
            "[[ $(candidate \"gfg\") = \"t\" ]]",
            "[[ $(candidate \"ab\") = \"c\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nsequence() {\n    if (1 <= $1) {\n        return $1;\n    } else {\n        return $1 + 1;\n    }\n}\n\n",
        "test_list": [
            "candidate() {",
            "sequence \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"6\" ]]",
            "[[ $(candidate \"2\") = \"1\" ]]",
            "[[ $(candidate \"3\") = \"2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ncentered_hexagonal_number() {\n  let n = 1;\n  while (n < 100) {\n    let x = n % 2;\n    let y = n / 2;\n    if (x == y) {\n      return n;\n    }\n    n++;\n  }\n  return -1;\n}\n\n",
        "test_list": [
            "candidate() {",
            "centered_hexagonal_number \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10\") = \"271\" ]]",
            "[[ $(candidate \"2\") = \"7\" ]]",
            "[[ $(candidate \"9\") = \"217\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single CSV.",
        "code": "#!/bin/bash\n#\n# $1 is a two column CSV in key,value order\n# $2 is a two column CSV in key,value order\n# $3 is a two column CSV in key,value order\nmerge_dictionaries_three() {\n    var a = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var b = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var c = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var d = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var e = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var f = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var g = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var h = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var i = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var j = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var k = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\": \"value3\"\n    };\n    var l = {\n        \"key\": \"value\",\n        \"key2\": \"value2\",\n        \"key3\":\n}\n\n",
        "test_list": [
            "candidate() {",
            "merge_dictionaries_three \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"O,Orange\\nW,White\\nB,Black\") = \"B,Black\\nR,Red\\nP,Pink\\nG,Green\\nW,White\\nO,Orange\" ]]",
            "[[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"G,Green\\nW,White\" \"L,lavender\\nB,Blue\") = \"W,White\\nP,Pink\\nB,Black\\nR,Red\\nG,Green\\nL,lavender\" ]]",
            "[[ $(candidate \"R,Red\\nB,Black\\nP,Pink\" \"L,lavender\\nB,Blue\" \"G,Green\\nW,White\") = \"B,Black\\nP,Pink\\nR,Red\\nG,Green\\nL,lavender\\nW,White\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in a list, returned as a CSV.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nfreq_count() {\n    var list = [];\n    for (var i = 0; i < 10; i++) {\n        list.push(i);\n    }\n    return list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "freq_count \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"10 10 10 10 20 20 20 20 40 40 50 50 30\") = \"10,4\\n20,4\\n40,2\\n50,2\\n30,1\" ]]",
            "[[ $(candidate \"1 2 3 4 3 2 4 1 3 1 4\") = \"1,3\\n2,2\\n3,3\\n4,3\" ]]",
            "[[ $(candidate \"5 6 7 4 9 10 4 5 6 7 9 5\") = \"10,1\\n5,3\\n6,2\\n7,2\\n4,2\\n9,2\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nclosest_num() {\n    var n = 1;\n    var min = Infinity;\n    for (var i = 0; i < 10; i++) {\n        if (n < i) {\n            min = i;\n        }\n        n = n * 10;\n    }\n    return min;\n}\n\n",
        "test_list": [
            "candidate() {",
            "closest_num \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"11\") = \"10\" ]]",
            "[[ $(candidate \"7\") = \"6\" ]]",
            "[[ $(candidate \"12\") = \"11\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in a list.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nsquare_nums() {\n    var nums = [];\n    for (var i = 0; i < 10; i++) {\n        nums.push(i);\n    }\n    return nums;\n}\n\n",
        "test_list": [
            "candidate() {",
            "square_nums \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 4 5 6 7 8 9 10\") = \"1 4 9 16 25 36 49 64 81 100\" ]]",
            "[[ $(candidate \"10 20 30\") = \"100 400 900\" ]]",
            "[[ $(candidate \"12 15\") = \"144 225\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a shthon function to find the length of the longest word.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\nlen_log() {\n    let words = [\n        \"a\",\n        \"ab\",\n        \"abc\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n        \"abcd\",\n}\n\n",
        "test_list": [
            "candidate() {",
            "len_log \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"python PHP bigdata\") = \"7\" ]]",
            "[[ $(candidate \"a ab abc\") = \"3\" ]]",
            "[[ $(candidate \"small big tall\") = \"5\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given list of string values.",
        "code": "#!/bin/bash\n#\n# $1 is a space-separated list\n# $2 is a string\nfind_substring() {\n    var list = [\"a\", \"b\", \"c\"]\n    var result = false\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] == \"a\") {\n            result = true\n        }\n        if (list[i] == \"b\") {\n            result = true\n        }\n        if (list[i] == \"c\") {\n            result = true\n        }\n    }\n    return result\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_substring \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"red black white green orange\" \"ack\") = \"true\" ]]",
            "[[ $(candidate \"red black white green orange\" \"abc\") = \"false\" ]]",
            "[[ $(candidate \"red black white green orange\" \"ange\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\nis_undulating() {\n  return (this.value % 2 == 0);\n}\n\n",
        "test_list": [
            "candidate() {",
            "is_undulating \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1212121\") = \"true\" ]]",
            "[[ $(candidate \"1991\") = \"false\" ]]",
            "[[ $(candidate \"121\") = \"true\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\n# $2 is an integer\npower() {\n  return Math.pow(2, $1) * Math.pow(2, $2)\n}\n\n",
        "test_list": [
            "candidate() {",
            "power \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"3\" \"4\") = \"81\" ]]",
            "[[ $(candidate \"2\" \"3\") = \"8\" ]]",
            "[[ $(candidate \"5\" \"5\") = \"3125\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given a list of lists, write a function that returns the first value of the list with the smallest second value.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nindex_minimum() {\n    var min = 0;\n    for (var i = 0; i < this.length; i++) {\n        if (this[i]!= null) {\n            min = Math.min(min, this[i]);\n        }\n    }\n    return min;\n}\n\n",
        "test_list": [
            "candidate() {",
            "index_minimum \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"Rash 143\\nManjeet 200\\nVarsha 100\") = \"Varsha\" ]]",
            "[[ $(candidate \"Yash 185\\nDawood 125\\nSanya 175\") = \"Dawood\" ]]",
            "[[ $(candidate \"Sai 345\\nSalman 145\\nAyesha 96\") = \"Ayesha\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a shthon function to find the length of the smallest list in a list of lists.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nFind_Min_Length() {\n  var list = [];\n  for (var i = 0; i < 10; i++) {\n    list.push(i);\n  }\n  var min_length = list.length;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] < list[i + 1]) {\n      min_length = i;\n    }\n  }\n  console.log(min_length);\n}\n\n",
        "test_list": [
            "candidate() {",
            "Find_Min_Length \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1\\n1 2\") = \"1\" ]]",
            "[[ $(candidate \"1 2\\n1 2 3\\n1 2 3 4\") = \"2\" ]]",
            "[[ $(candidate \"3 3 3\\n4 4 4 4\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a shthon function to find the number of divisors of a given integer.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ndivisor() {\n  let n = 1;\n  for (let i = 2; i <= 10; i++) {\n    if (n % i == 0) {\n      n = n / i;\n    }\n  }\n  return n;\n}\n\n",
        "test_list": [
            "candidate() {",
            "divisor \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"15\") = \"4\" ]]",
            "[[ $(candidate \"12\") = \"6\" ]]",
            "[[ $(candidate \"9\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened list of lists, returned in a CSV.",
        "code": "#!/bin/bash\n#\n# $1 is a newline-separated, space-separated list\nfrequency_lists() {\n    var frequency_list = [];\n    for (var i = 0; i < this.length; i++) {\n        var list = this[i];\n        for (var j = 0; j < list.length; j++) {\n            frequency_list.push(list[j]);\n        }\n    }\n    return frequency_list;\n}\n\n",
        "test_list": [
            "candidate() {",
            "frequency_lists \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"1 2 3 2\\n4 5 6 2\\n7 8 9 5\") = \"1,1\\n2,3\\n3,1\\n4,1\\n5,2\\n6,1\\n7,1\\n8,1\\n9,1\" ]]",
            "[[ $(candidate \"1 2 3 4\\n5 6 7 8\\n9 10 11 12\") = \"1,1\\n2,1\\n3,1\\n4,1\\n5,1\\n6,1\\n7,1\\n8,1\\n9,1\\n10,1\\n11,1\\n12,1\" ]]",
            "[[ $(candidate \"20 30 40 17\\n18 16 14 13\\n10 20 30 40\") = \"20,2\\n30,2\\n40,2\\n17,1\\n18,1\\n16,1\\n14,1\\n13,1\\n10,1\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "#!/bin/bash\n#\n# $1 is an integer\ndecimal_to_binary() {\n    var x = parseInt(arguments[0]);\n    var y = x.toString(10);\n    return y;\n}\n\n",
        "test_list": [
            "candidate() {",
            "decimal_to_binary \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"8\") = \"1000\" ]]",
            "[[ $(candidate \"18\") = \"10010\" ]]",
            "[[ $(candidate \"7\") = \"111\" ]]",
            "}",
            "run_test"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a shthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "#!/bin/bash\n#\n# $1 is a string\nfind_Rotations() {\n    let min_rotations = 0;\n    let rotations = [];\n    let rotations_count = 0;\n    let rotations_count_max = 0;\n    let rotations_count_min = 0;\n    let rotations_count_max_min = 0;\n    let rotations_count_min_max = 0;\n    let rotations_count_min_max_min = 0;\n    let rotations_count_min_max_min_max = 0;\n    let rotations_count_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min = 0;\n    let rotations_count_min_max_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min_max_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min_max_min_max_min_max_min_max = 0;\n    let rotations_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\n}\n\n",
        "test_list": [
            "candidate() {",
            "find_Rotations \"$@\"",
            "}",
            "set -e",
            "run_test() {",
            "[[ $(candidate \"aaaa\") = \"1\" ]]",
            "[[ $(candidate \"ab\") = \"2\" ]]",
            "[[ $(candidate \"abc\") = \"3\" ]]",
            "}",
            "run_test"
        ]
    }
]