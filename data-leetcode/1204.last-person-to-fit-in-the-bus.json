[
    {
        "title": "Last Person to Fit in the Bus",
        "question_content": "Table: Queue\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| person_id   | int     |\n| person_name | varchar |\n| weight      | int     |\n| turn        | int     |\n+-------------+---------+\nperson_id column contains unique values.\nThis table has the information about all people waiting for a bus.\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\nweight is the weight of the person in kilograms.\n\n&nbsp;\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.\nWrite a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nQueue table:\n+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+\nOutput: \n+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+\nExplanation: The folowing table is ordered by the turn for simplicity.\n+------+----+-----------+--------+--------------+\n| Turn | ID | Name      | Weight | Total Weight |\n+------+----+-----------+--------+--------------+\n| 1    | 5  | Alice     | 250    | 250          |\n| 2    | 3  | Alex      | 350    | 600          |\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\n| 5    | 4  | Bob       | 175    | ___          |\n| 6    | 1  | Winston   | 500    | ___          |\n+------+----+-----------+--------+--------------+",
        "solutions": [
            {
                "id": 3634727,
                "title": "best-optimum-solution-with-explanation-using-joins",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe goal is to find the last person who can fit on the bus without exceeding the weight limit. We need to consider the order of people based on their turn and calculate the cumulative weight at each turn to check if it exceeds the weight limit.\\n\\n# Approach\\n1. We join the Queue table with itself, creating combinations of rows where each row is paired with all rows that have a higher or equal turn value.\\n1. We group the rows by turn and calculate the sum of weights for each group.\\n1. Using the HAVING clause, we filter out groups whose sum of weights exceeds the weight limit of 1000.\\n1. We order the results by the sum of weights in descending order, ensuring the last person who can fit is at the top.\\n1. Finally, we limit the result to 1 row since we only need the information of the last person.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this query is dependent on the number of rows in the Queue table. Let\\'s denote this number as \\'n\\'. The join operation has a complexity of $$O(n^2)$$, as it pairs each row with all the rows that have a higher turn. The grouping operation has a complexity of O(n), as it groups the rows by turn. Finally, ordering the result and limiting it to 1 row have a complexity of O(nlogn). Therefore, the overall time complexity is $$O(n^2)$$.\\n\\n- Space complexity:\\nThe space complexity is determined by the memory required to store the rows and the intermediate results of the query. In this case, it is proportional to the number of rows in the Queue table, so the space complexity is $$O(n)$$.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/f5b76a08-660e-4f26-adab-ecf38d2833c6_1686684410.6196277.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 389961,
                "title": "mysql-beat-100-lol-of-course-since-i-m-the-first-one-to-do-this-problem",
                "content": "The steps:\\n(1) Get cumulative sum weight using ```Join``` with condition ```q1.turn >= q2.turn``` and ```Group By q1.turn```  \\n(2) Filter the groups with  cum sum ```<=1000``` \\n(3) Order by cum sum with ```Desc``` order, select the 1st.\\n```\\nSELECT q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```Join```\n```q1.turn >= q2.turn```\n```Group By q1.turn```\n```<=1000```\n```Desc```\n```\\nSELECT q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 642795,
                "title": "mysql-beat-95-fast-solution-using-window-function",
                "content": "Calculate cumulative sum and order by descending and take first row which is last person in the lift!!\\n\\n```\\nselect person_name from\\n(select person_name, weight, turn, sum(weight) over(order by turn) as cum_sum\\nfrom queue) x\\nwhere cum_sum <= 1000\\norder by turn desc limit 1;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Sliding Window"
                ],
                "code": "```\\nselect person_name from\\n(select person_name, weight, turn, sum(weight) over(order by turn) as cum_sum\\nfrom queue) x\\nwhere cum_sum <= 1000\\norder by turn desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 432453,
                "title": "ms-sql-solution-based-on-windows-function",
                "content": "select top 1 sub.person_name\\nfrom \\n(select person_name,\\n       SUM(weight) OVER (ORDER BY turn ASC) AS running_total\\nfrom Queue) sub\\nwhere sub.running_total <= 1000\\norder by sub.running_total DESC",
                "solutionTags": [],
                "code": "select top 1 sub.person_name\\nfrom \\n(select person_name,\\n       SUM(weight) OVER (ORDER BY turn ASC) AS running_total\\nfrom Queue) sub\\nwhere sub.running_total <= 1000\\norder by sub.running_total DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 3745761,
                "title": "beat-96-6-mysql-window-sum-solution",
                "content": "# Intuition\\nas described \"Find the maximum number of turns among rows where \\'tot_weight <= 1000\\' \"\\n\\n# Approach\\n### (1) make running sum\\n### (2) find maximum turn where running sum <= 1000\\n\\n# Complexity\\n- Time complexity:\\nO(n), because I did sorting by window function\\n\\n- Space complexity:\\nalso O(n), because of soring that require save intermediate result some where else.(hopfuly in the memory not disk)\\n\\n# Code\\n```\\n# Find the maximum number of turns among rows where \\'tot_weight <= 1000\\'.\\n\\nWITH CTE AS (\\n    SELECT \\n        turn, person_name, weight,\\n        SUM(weight) OVER(ORDER BY turn ASC) AS tot_weight \\n    FROM Queue\\n    ORDER BY turn\\n)\\nSELECT person_name\\nFROM Queue q\\nWHERE q.turn = (SELECT MAX(turn) FROM CTE WHERE tot_weight <= 1000);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Find the maximum number of turns among rows where \\'tot_weight <= 1000\\'.\\n\\nWITH CTE AS (\\n    SELECT \\n        turn, person_name, weight,\\n        SUM(weight) OVER(ORDER BY turn ASC) AS tot_weight \\n    FROM Queue\\n    ORDER BY turn\\n)\\nSELECT person_name\\nFROM Queue q\\nWHERE q.turn = (SELECT MAX(turn) FROM CTE WHERE tot_weight <= 1000);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 390243,
                "title": "simple-mysql-solution-beat-100",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue as a\\nWHERE\\n(\\n    SELECT SUM(weight) FROM Queue as b\\n    WHERE b.turn<=a.turn\\n    ORDER By turn\\n)<=1000\\nORDER BY a.turn DESC limit 1;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue as a\\nWHERE\\n(\\n    SELECT SUM(weight) FROM Queue as b\\n    WHERE b.turn<=a.turn\\n    ORDER By turn\\n)<=1000\\nORDER BY a.turn DESC limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 895368,
                "title": "mysql-simple-sum-over",
                "content": "```\\nselect person_name from\\n(select person_name, sum(weight) over(order by turn) as gross_weight from queue) a\\nwhere gross_weight <= 1000\\norder by gross_weight desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect person_name from\\n(select person_name, sum(weight) over(order by turn) as gross_weight from queue) a\\nwhere gross_weight <= 1000\\norder by gross_weight desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3883280,
                "title": "no-window-no-limit-only-group-by",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- I want to get sum of all the weights till the ith approach\\n- I can get this by matching row of t turn with all the rows having turn <= t using the following query:\\n    ```sql\\n    SELECT q1.turn, SUM(q2.weight) as weight\\n    FROM Queue q1 JOIN Queue q2\\n    ON q1.turn >= q2.turn -- choose all turn smaller than q1.turn\\n    GROUP BY q1.turn -- to take the sum till smaller turn\\n    ORDER BY q1.turn; -- order by is for better visibility\\n    ```\\n- Now I want to know who is the last person to enter the bus\\n- It would be the person with MAX(weight) <= 1000\\n- So we will only pick the rows with sum <= 1000\\n    ```sql\\n    SELECT q1.turn, SUM(q2.weight) as weight\\n    FROM Queue q1 JOIN Queue q2\\n    ON q1.turn >= q2.turn\\n    GROUP BY q1.turn\\n    HAVING SUM(q2.weight) <= 1000 -- only pick turn having sum <= 1000\\n    ORDER BY q1.turn; -- order by is for better visibility\\n    ```\\n- Now this query gives us the turn with SUM(weight) <= 1000 but we are only concern with the last person so we can find his turn by taking MAX(turn)\\n    ```sql\\n    SELECT MAX(turn) -- selecting the max turn \\n    FROM (\\n        SELECT q1.turn as turn\\n        FROM Queue q1 JOIN Queue q2\\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000 -- only pick turn having sum <= 1000\\n        ORDER BY q1.turn -- order by is for better visibility\\n    ) as temp;    \\n    ```\\n- Now in the last step we will get the person who has this MAX(turn) which we can simply by matching it will all turns\\n    ```sql\\n    SELECT person_name FROM Queue\\n    WHERE turn = (\\n        SELECT MAX(turn) as turn FROM\\n        (\\n            SELECT q1.turn\\n            FROM Queue q1 JOIN QUEUE q2 \\n            ON q1.turn >= q2.turn\\n            GROUP BY q1.turn\\n            HAVING SUM(q2.weight) <= 1000\\n        ) as table1\\n    );\\n    ```\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue\\nWHERE turn = (\\n    SELECT MAX(turn) as turn FROM\\n    (\\n        SELECT q1.turn\\n        FROM Queue q1 JOIN QUEUE q2 \\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000\\n    ) as table1\\n);\\n```\\n\\n## HOPE IT HELPED :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\n    SELECT q1.turn, SUM(q2.weight) as weight\\n    FROM Queue q1 JOIN Queue q2\\n    ON q1.turn >= q2.turn -- choose all turn smaller than q1.turn\\n    GROUP BY q1.turn -- to take the sum till smaller turn\\n    ORDER BY q1.turn; -- order by is for better visibility\\n    ```\n```sql\\n    SELECT q1.turn, SUM(q2.weight) as weight\\n    FROM Queue q1 JOIN Queue q2\\n    ON q1.turn >= q2.turn\\n    GROUP BY q1.turn\\n    HAVING SUM(q2.weight) <= 1000 -- only pick turn having sum <= 1000\\n    ORDER BY q1.turn; -- order by is for better visibility\\n    ```\n```sql\\n    SELECT MAX(turn) -- selecting the max turn \\n    FROM (\\n        SELECT q1.turn as turn\\n        FROM Queue q1 JOIN Queue q2\\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000 -- only pick turn having sum <= 1000\\n        ORDER BY q1.turn -- order by is for better visibility\\n    ) as temp;    \\n    ```\n```sql\\n    SELECT person_name FROM Queue\\n    WHERE turn = (\\n        SELECT MAX(turn) as turn FROM\\n        (\\n            SELECT q1.turn\\n            FROM Queue q1 JOIN QUEUE q2 \\n            ON q1.turn >= q2.turn\\n            GROUP BY q1.turn\\n            HAVING SUM(q2.weight) <= 1000\\n        ) as table1\\n    );\\n    ```\n```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue\\nWHERE turn = (\\n    SELECT MAX(turn) as turn FROM\\n    (\\n        SELECT q1.turn\\n        FROM Queue q1 JOIN QUEUE q2 \\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000\\n    ) as table1\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549051,
                "title": "2-mysql-solutions-compared-and-explained",
                "content": "# Option 1: Derived table, windown function\\n```\\nselect\\n    person_name\\nfrom    \\n    (\\n        select\\n            *\\n            , sum(weight) over (order by Turn) as total_sum\\n        from queue\\n    ) t -- every derived table must have its own alias\\nwhere total_sum <= 1000\\norder by turn desc\\nlimit 1\\n```\\n\\n- Performance: This option uses a derived table and a window function to calculate the cumulative sum of weights. It then checks if the sum is less than or equal to 1000 and filters the results accordingly. The performance of this option depends on the size of the \"queue\" table and the efficiency of the window function. It\\'s important to have appropriate indexes on the relevant columns to optimize the ordering and window function calculations. Overall, this option can be efficient if the window function is optimized and the size of the \"queue\" table is manageable.\\n- Readability: This option uses a derived table and a window function to express the logic. The derived table provides a clear separation of the steps: calculating the cumulative sum of weights and checking if it\\'s within the desired range. The window function usage is explicit and can be easily understood by developers familiar with window functions.\\n\\n# Option 2: subquery, variable\\n```\\nselect person_name \\nfrom \\n    (\\n        select \\n            person_name, \\n            @total_weight := @total_weight + weight as total_weight \\n        from \\n            Queue,\\n            (select @total_weight := 0) as tmp order by turn\\n            \\n    ) as t -- every derived table must have its own alias\\nwhere total_weight <= 1000 \\norder by total_weight desc limit 1\\n```\\n- Performance: This option uses a subquery and a variable to calculate the cumulative sum of weights. The performance can depend on the size of the \"queue\" table and the efficiency of the subquery and variable assignment. It\\'s important to have appropriate indexes on the relevant columns to optimize the ordering. This option can be efficient if the subquery and variable assignment are optimized and the size of the \"queue\" table is manageable.\\n- Readability: This option uses a subquery and variable assignment to express the logic. The subquery provides a clear separation of the steps: calculating the cumulative sum of weights. However, the usage of variables can make the query slightly more complex to read and understand compared to the previous option.\\n\\n# Summary\\n\\nIn terms of performance, both options can be efficient if they are properly optimized and have appropriate indexes on the relevant columns. The performance can vary depending on the size of the \"queue\" table and the efficiency of the window function, subquery, and variable assignment.\\n\\nIn terms of readability, Option 1 (Derived Table, Window Function) provides a clear and concise expression of the logic using a derived table and window function. The steps are explicit and can be easily understood. Option 2 (Subquery, Variable) is slightly more complex due to the usage of variables, which may require extra effort to understand.\\n\\nConsidering both performance and readability, Option 1 (Derived Table, Window Function) is recommended. It provides a good balance between performance and readability, making it easier to maintain and understand by other developers.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    person_name\\nfrom    \\n    (\\n        select\\n            *\\n            , sum(weight) over (order by Turn) as total_sum\\n        from queue\\n    ) t -- every derived table must have its own alias\\nwhere total_sum <= 1000\\norder by turn desc\\nlimit 1\\n```\n```\\nselect person_name \\nfrom \\n    (\\n        select \\n            person_name, \\n            @total_weight := @total_weight + weight as total_weight \\n        from \\n            Queue,\\n            (select @total_weight := 0) as tmp order by turn\\n            \\n    ) as t -- every derived table must have its own alias\\nwhere total_weight <= 1000 \\norder by total_weight desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1119346,
                "title": "easy-cumulative-sum",
                "content": "```\\nwith cs as (\\n  select *,\\n    sum(weight) over(order by turn) as cum_sum\\n  from queue\\n)\\nselect person_name from cs\\nwhere cum_sum = (select max(cum_sum) from cs where cum_sum <= 1000)\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Sliding Window"
                ],
                "code": "```\\nwith cs as (\\n  select *,\\n    sum(weight) over(order by turn) as cum_sum\\n  from queue\\n)\\nselect person_name from cs\\nwhere cum_sum = (select max(cum_sum) from cs where cum_sum <= 1000)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 960364,
                "title": "my-sql-95-simple-solution",
                "content": "```\\n\\nselect person_name \\nfrom \\n(\\nselect person_name , sum(weight)over(order by turn ) as cumlative_sum \\nfrom \\nqueue) as t\\nwhere cumlative_sum <=1000\\ngroup by person_name\\norder by cumlative_sum desc limit 1",
                "solutionTags": [],
                "code": "```\\n\\nselect person_name \\nfrom \\n(\\nselect person_name , sum(weight)over(order by turn ) as cumlative_sum \\nfrom \\nqueue) as t\\nwhere cumlative_sum <=1000\\ngroup by person_name\\norder by cumlative_sum desc limit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1193593,
                "title": "easy-window-function-sql",
                "content": "```\\nselect person_name\\nfrom\\n(\\n    select person_name, \\n    sum(weight) over(order by turn) as cum_weight\\n    from queue\\n) temp\\nwhere cum_weight<=1000\\norder by cum_weight desc\\nlimit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect person_name\\nfrom\\n(\\n    select person_name, \\n    sum(weight) over(order by turn) as cum_weight\\n    from queue\\n) temp\\nwhere cum_weight<=1000\\norder by cum_weight desc\\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 400019,
                "title": "mysql-straightforward-variable-use",
                "content": "```\\nselect\\n    person_name\\nfrom\\n    (select person_name, @a := @a + weight as acc_weight\\n     from queue q, (select @a := 0) var\\n     order by q.turn) res\\nwhere\\n    acc_weight <= 1000\\norder by \\n    acc_weight desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    person_name\\nfrom\\n    (select person_name, @a := @a + weight as acc_weight\\n     from queue q, (select @a := 0) var\\n     order by q.turn) res\\nwhere\\n    acc_weight <= 1000\\norder by \\n    acc_weight desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3540369,
                "title": "mysql-solution-for-last-person-to-fit-in-the-bus-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given SQL query aims to select the person_name of the last person in a queue whose cumulative weight does not exceed 1000. The Queue table contains person_name and weight columns, and the queue order is determined by the turn column. The query uses a variable (@total_weight) to keep track of the cumulative weight and selects the person_name when the total weight reaches the limit.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query starts by initializing the variable @total_weight to 0 using (SELECT @total_weight := 0) AS tmp.\\n1. It then selects the person_name and calculates the cumulative weight by adding the weight to @total_weight using @total_weight := @total_weight + weight.\\n1. The subquery result is ordered by the turn column, ensuring that the person_names are processed in the order they appear in the queue.\\n1. The outer query selects the person_name from the subquery result where the total_weight is less than or equal to 1000.\\n1. The result is sorted in descending order of total_weight and limited to one row using ORDER BY total_weight DESC LIMIT 1.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the query depends on the number of rows in the Queue table. The query needs to scan the entire table, calculate the cumulative weight using the variable, and sort the result. The time complexity is typically linear, O(n), where n is the number of rows in the Queue table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the query depends on the number of rows in the Queue table and the space required to store the result set. The space required for storing the result is constant since it only includes one row. The space complexity is typically O(n) due to the scanning of the Queue table and the storage of intermediate variables.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name from \\n(select person_name, @total_weight := @total_weight + weight as total_weight from Queue,\\n(select @total_weight := 0) as tmp order by turn) as t\\nwhere total_weight <= 1000 order by total_weight desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name from \\n(select person_name, @total_weight := @total_weight + weight as total_weight from Queue,\\n(select @total_weight := 0) as tmp order by turn) as t\\nwhere total_weight <= 1000 order by total_weight desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3300001,
                "title": "clear-solution-with-window-function-cte-explained",
                "content": "# Intuition\\nGet running sum column to sort the results.\\n\\n# Approach\\nIt\\'s a classic running total/average problem, where we need to find cumulative sum of values.\\n\\n**Step 1**. Find running total for column \"Weight\" \\n\\nThis could be done with window function:\\n\\n```\\nSELECT person_id,\\n       person_name,\\n       weight,\\n       turn,\\n       SUM(Weight) OVER (ORDER BY turn) as running_total \\nFROM Queue\\nORDER BY turn;\\n```\\nThe output:\\n\\n| person_id | person_name | weight | turn | running_total |\\n| --------- | ----------- | ------ | ---- | ------------- |\\n| 5         | Alice       | 250    | 1    | 250           |\\n| 3         | Alex        | 350    | 2    | 600           |\\n| 6         | John Cena   | 400    | 3    | 1000          |\\n| 2         | Marie       | 200    | 4    | 1200          |\\n| 4         | Bob         | 175    | 5    | 1375          |\\n| 1         | Winston     | 500    | 6    | 1875          |\\n\\n\\nAs you can see from values in column \"running_total\", we already have the answer to this problem :)\\n\\n**Step 2.** Filter CTE by condition\\n\\nLet\\'s create CTE and place our first step table into it. From CTE we can select all rows with condition by column \"running_total\", which should be less ot equal to 1000.\\n\\n```\\nWITH total as (\\n    SELECT person_id,\\n           person_name,\\n           weight,\\n           turn,\\n           SUM(Weight) OVER (ORDER BY turn) as running_total \\n    FROM Queue\\n    ORDER BY turn)\\n\\nSELECT *\\nFROM total\\nWHERE running_total <= 1000;\\n```\\nThe output:\\n\\n| person_id | person_name | weight | turn | running_total |\\n| --------- | ----------- | ------ | ---- | ------------- |\\n| 5         | Alice       | 250    | 1    | 250           |\\n| 3         | Alex        | 350    | 2    | 600           |\\n| 6         | John Cena   | 400    | 3    | 1000          |\\n\\n**Step 3**. Get the correct name\\n\\nJust three things left:\\n- select only \"person_name\"\\n- sort results by column \"running_total\" in descending order\\n- limit the output to 1 row.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH total as (\\n    SELECT person_name,\\n           SUM(Weight) OVER (ORDER BY turn) as running_total \\n    FROM Queue\\n    ORDER BY turn)\\n\\nSELECT person_name\\nFROM total\\nWHERE running_total <= 1000\\nORDER BY running_total DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person_id,\\n       person_name,\\n       weight,\\n       turn,\\n       SUM(Weight) OVER (ORDER BY turn) as running_total \\nFROM Queue\\nORDER BY turn;\\n```\n```\\nWITH total as (\\n    SELECT person_id,\\n           person_name,\\n           weight,\\n           turn,\\n           SUM(Weight) OVER (ORDER BY turn) as running_total \\n    FROM Queue\\n    ORDER BY turn)\\n\\nSELECT *\\nFROM total\\nWHERE running_total <= 1000;\\n```\n```\\n# Write your MySQL query statement below\\nWITH total as (\\n    SELECT person_name,\\n           SUM(Weight) OVER (ORDER BY turn) as running_total \\n    FROM Queue\\n    ORDER BY turn)\\n\\nSELECT person_name\\nFROM total\\nWHERE running_total <= 1000\\nORDER BY running_total DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 470284,
                "title": "simple-mysql",
                "content": "```\\n\\nselect q1.person_name from Queue as q1\\ninner join\\nQueue as q2\\non q1.turn>=q2.turn\\ngroup by q1.turn\\nhaving sum(q2.weight)<=1000\\norder by sum(q2.weight) desc\\nlimit 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect q1.person_name from Queue as q1\\ninner join\\nQueue as q2\\non q1.turn>=q2.turn\\ngroup by q1.turn\\nhaving sum(q2.weight)<=1000\\norder by sum(q2.weight) desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1779382,
                "title": "easy-to-understand",
                "content": "```\\nwith a as (select turn, person_name, weight,\\nsum(weight) over(order by turn) total_weight\\nfrom queue),\\n\\nb as (select turn, person_name, total_weight,\\nlead(total_weight) over(order by turn) lead_total_weight\\nfrom a)\\n\\nselect person_name from b\\nwhere total_weight <= 1000 and (lead_total_weight > 1000 or lead_total_weight is null)\\n# lead_total_weight is null means all people can get board on the bus",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith a as (select turn, person_name, weight,\\nsum(weight) over(order by turn) total_weight\\nfrom queue),\\n\\nb as (select turn, person_name, total_weight,\\nlead(total_weight) over(order by turn) lead_total_weight\\nfrom a)\\n\\nselect person_name from b\\nwhere total_weight <= 1000 and (lead_total_weight > 1000 or lead_total_weight is null)\\n# lead_total_weight is null means all people can get board on the bus",
                "codeTag": "Unknown"
            },
            {
                "id": 1731287,
                "title": "ms-sql-solution-fast",
                "content": "```\\nselect top 1 q.person_name from\\n(select turn, person_name, weight,\\nSUM(weight) OVER(ORDER BY turn asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_weight\\nfrom Queue) q\\nwhere q.total_weight <=1000 \\norder by total_weight desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect top 1 q.person_name from\\n(select turn, person_name, weight,\\nSUM(weight) OVER(ORDER BY turn asc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_weight\\nfrom Queue) q\\nwhere q.total_weight <=1000 \\norder by total_weight desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 498695,
                "title": "super-clean-and-simple-mysql-81",
                "content": "SELECT a.person_name\\nFROM Queue as a\\nWHERE (SELECT SUM(b.weight)\\n      FROM Queue as b\\n      WHERE a.turn >= b.turn) <= 1000\\nORDER BY turn DESC\\nLIMIT 1;",
                "solutionTags": [],
                "code": "SELECT a.person_name\\nFROM Queue as a\\nWHERE (SELECT SUM(b.weight)\\n      FROM Queue as b\\n      WHERE a.turn >= b.turn) <= 1000\\nORDER BY turn DESC\\nLIMIT 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 430073,
                "title": "both-mysql-ms-sql-answers",
                "content": "mysql:\\n\\n```\\nselect\\ntemp.person_name\\nfrom (\\nselect\\nq1.person_name,\\nq1.turn\\nfrom Queue q1\\njoin Queue q2 on q1.turn >= q2.turn\\ngroup by q1.turn\\nhaving sum(q2.weight) <= 1000\\norder by q1.turn desc\\n)temp\\nlimit 1;\\n```\\n\\nms sql:\\n```\\nwith result as (\\nselect\\nperson_name,\\nturn,\\nsum(weight) over (order by turn)  as acc_sum\\nfrom queue\\n)\\nselect top 1\\nperson_name\\nfrom result\\nwhere acc_sum <= 1000\\norder by turn desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect\\ntemp.person_name\\nfrom (\\nselect\\nq1.person_name,\\nq1.turn\\nfrom Queue q1\\njoin Queue q2 on q1.turn >= q2.turn\\ngroup by q1.turn\\nhaving sum(q2.weight) <= 1000\\norder by q1.turn desc\\n)temp\\nlimit 1;\\n```\n```\\nwith result as (\\nselect\\nperson_name,\\nturn,\\nsum(weight) over (order by turn)  as acc_sum\\nfrom queue\\n)\\nselect top 1\\nperson_name\\nfrom result\\nwhere acc_sum <= 1000\\norder by turn desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3882117,
                "title": "easy-oracle-solution",
                "content": "# Code\\n```\\nselect person_name\\nfrom (select person_name, sum(weight) over (order by turn) as sum_weight\\n      from queue\\n      order by sum_weight desc)\\nwhere sum_weight <= 1000\\n  and rownum = 1;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect person_name\\nfrom (select person_name, sum(weight) over (order by turn) as sum_weight\\n      from queue\\n      order by sum_weight desc)\\nwhere sum_weight <= 1000\\n  and rownum = 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3625340,
                "title": "easy-simple-and-effective",
                "content": "**Bold**# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect TOP 1 person_name from (\\nselect * , sum(weight) over (order by Turn) as total_sum from queue) t \\nwhere total_sum <= 1000\\norder by turn DESC\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect TOP 1 person_name from (\\nselect * , sum(weight) over (order by Turn) as total_sum from queue) t \\nwhere total_sum <= 1000\\norder by turn DESC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3555537,
                "title": "solved-via-windows-functions",
                "content": "# Approach\\r\\nSolved via Windows functions\\r\\n\\r\\n# Code\\r\\n```\\r\\nwith cte1 as\\r\\n(\\r\\n    select *, \\r\\n    -- aggregate weight by over for each row inclusively\\r\\n    sum(weight) over(order by turn rows between unbounded preceding and current row) as floating_sum \\r\\n    from queue \\r\\n), \\r\\ncte2 as\\r\\n(\\r\\n    select \\r\\n        person_name, \\r\\n        floating_sum, \\r\\n        dense_rank() over(order by floating_sum desc) as row_numb -- getting row number\\r\\n    from cte1 \\r\\n    where floating_sum <= 1000\\r\\n)\\r\\n\\r\\nselect top 1 person_name from cte2 \\r\\norder by row_numb asc\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\nwith cte1 as\\r\\n(\\r\\n    select *, \\r\\n    -- aggregate weight by over for each row inclusively\\r\\n    sum(weight) over(order by turn rows between unbounded preceding and current row) as floating_sum \\r\\n    from queue \\r\\n), \\r\\ncte2 as\\r\\n(\\r\\n    select \\r\\n        person_name, \\r\\n        floating_sum, \\r\\n        dense_rank() over(order by floating_sum desc) as row_numb -- getting row number\\r\\n    from cte1 \\r\\n    where floating_sum <= 1000\\r\\n)\\r\\n\\r\\nselect top 1 person_name from cte2 \\r\\norder by row_numb asc\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3431645,
                "title": "solution-with-sum-over-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\nWITH CTE AS (\\r\\n    \\r\\n    SELECT\\r\\n        person_name,\\r\\n        SUM(weight) OVER(ORDER BY Turn ASC) TotalW\\r\\n    FROM\\r\\n        Queue\\r\\n)\\r\\n,CTE2 AS (\\r\\n\\r\\n        SELECT\\r\\n            person_name,\\r\\n            TotalW\\r\\n        FROM\\r\\n            CTE\\r\\n        WHERE\\r\\n            TotalW <= 1000\\r\\n)\\r\\nSELECT\\r\\n    TOP 1\\r\\n    person_name\\r\\nFROM\\r\\n    CTE2\\r\\nORDER BY\\r\\n    TotalW DESC\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\nWITH CTE AS (\\r\\n    \\r\\n    SELECT\\r\\n        person_name,\\r\\n        SUM(weight) OVER(ORDER BY Turn ASC) TotalW\\r\\n    FROM\\r\\n        Queue\\r\\n)\\r\\n,CTE2 AS (\\r\\n\\r\\n        SELECT\\r\\n            person_name,\\r\\n            TotalW\\r\\n        FROM\\r\\n            CTE\\r\\n        WHERE\\r\\n            TotalW <= 1000\\r\\n)\\r\\nSELECT\\r\\n    TOP 1\\r\\n    person_name\\r\\nFROM\\r\\n    CTE2\\r\\nORDER BY\\r\\n    TotalW DESC\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2475275,
                "title": "mysql-solution-short-and-very-easy-to-understand",
                "content": "WITH t1 as(SELECT *, SUM(weight) OVER(ORDER BY turn) csum from queue )\\n\\nSELECT person_name from queue WHERE turn=(SELECT MAX(turn) from t1 where csum<=1000)",
                "solutionTags": [],
                "code": "WITH t1 as(SELECT *, SUM(weight) OVER(ORDER BY turn) csum from queue )\\n\\nSELECT person_name from queue WHERE turn=(SELECT MAX(turn) from t1 where csum<=1000)",
                "codeTag": "Unknown"
            },
            {
                "id": 2445237,
                "title": "mysql-three-solutions-self-join-window-function-inner-join-good-luck",
                "content": "```\\n# Write your MySQL query statement below\\n/**\\nOne table: Queue\\n\\nperson_id is the primary key column for Queue table.\\nQueue table has the information about all people waiting for a bus.\\n\\nbus has a weight limit of 1000 kilograms, so there may be some people who cannot board\\n\\nPROBLEM: find the person_name of the last person that can fit on the bus without exceeding the weight limit.\\n\\nSTEPS:\\n    WITH CTE self JOIN find the cumilative sum\\n    WHERE condition\\n*/\\n\\n#Solution 1 using SELF JOIN\\n\\nWITH CTE AS\\n(\\nSELECT\\n    Q1.turn,\\n    Q1.person_id,\\n    Q1.person_name ,\\n    Q1.weight AS Weight,\\n    SUM(Q2.weight) AS TotalWeight\\n    \\nFROM Queue Q1\\nJOIN Queue Q2\\n    ON  Q1.turn >= Q2.turn\\nGROUP BY 1\\nHAVING SUM(Q2.weight) <= 1000\\nORDER BY 1\\n\\n) \\nSELECT \\n    person_name \\nFROM CTE\\nORDER BY TotalWeight DESC\\nLIMIT 1\\n\\n\\n# SOLUTION 2\\n\\n\\nWITH CTE AS\\n(\\nSELECT \\n    person_name,\\n    SUM(weight) OVER(ORDER BY turn ASC) as totalWeight\\nFROM Queue\\nGROUP BY turn\\n),\\n CTE2 AS\\n(\\nSELECT \\n    person_name,totalWeight\\nFROM CTE\\nHAVING totalWeight <= 1000\\nORDER BY totalWeight DESC\\nLIMIT 1\\n)\\nSELECT\\n    person_name\\nFROM CTE2\\n\\n\\n#SOLUTION 3 - Different Style\\n\\nSELECT \\n    A.person_name\\nFROM \\n(\\nSELECT \\n    person_name, turn,\\n    SUM(weight) OVER(ORDER BY turn ASC) as totalWeight\\nFROM Queue\\n) A\\nWHERE totalWeight <= 1000\\nGROUP BY turn\\nORDER BY totalWeight DESC\\n    LIMIT 1\\n\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n/**\\nOne table: Queue\\n\\nperson_id is the primary key column for Queue table.\\nQueue table has the information about all people waiting for a bus.\\n\\nbus has a weight limit of 1000 kilograms, so there may be some people who cannot board\\n\\nPROBLEM: find the person_name of the last person that can fit on the bus without exceeding the weight limit.\\n\\nSTEPS:\\n    WITH CTE self JOIN find the cumilative sum\\n    WHERE condition\\n*/\\n\\n#Solution 1 using SELF JOIN\\n\\nWITH CTE AS\\n(\\nSELECT\\n    Q1.turn,\\n    Q1.person_id,\\n    Q1.person_name ,\\n    Q1.weight AS Weight,\\n    SUM(Q2.weight) AS TotalWeight\\n    \\nFROM Queue Q1\\nJOIN Queue Q2\\n    ON  Q1.turn >= Q2.turn\\nGROUP BY 1\\nHAVING SUM(Q2.weight) <= 1000\\nORDER BY 1\\n\\n) \\nSELECT \\n    person_name \\nFROM CTE\\nORDER BY TotalWeight DESC\\nLIMIT 1\\n\\n\\n# SOLUTION 2\\n\\n\\nWITH CTE AS\\n(\\nSELECT \\n    person_name,\\n    SUM(weight) OVER(ORDER BY turn ASC) as totalWeight\\nFROM Queue\\nGROUP BY turn\\n),\\n CTE2 AS\\n(\\nSELECT \\n    person_name,totalWeight\\nFROM CTE\\nHAVING totalWeight <= 1000\\nORDER BY totalWeight DESC\\nLIMIT 1\\n)\\nSELECT\\n    person_name\\nFROM CTE2\\n\\n\\n#SOLUTION 3 - Different Style\\n\\nSELECT \\n    A.person_name\\nFROM \\n(\\nSELECT \\n    person_name, turn,\\n    SUM(weight) OVER(ORDER BY turn ASC) as totalWeight\\nFROM Queue\\n) A\\nWHERE totalWeight <= 1000\\nGROUP BY turn\\nORDER BY totalWeight DESC\\n    LIMIT 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1534880,
                "title": "ms-sql",
                "content": "#### Question\\n```\\n1204. Last Person to Fit in the Bus\\nMedium\\n\\nSQL Schema\\nTable: Queue\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| person_id   | int     |\\n| person_name | varchar |\\n| weight      | int     |\\n| turn        | int     |\\n+-------------+---------+\\nperson_id is the primary key column for this table.\\nThis table has the information about all people waiting for a bus.\\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\\nweight is the weight of the person in kilograms.\\n \\n\\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.\\n\\nWrite an SQL query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The testcases are generated such that the first person does not exceed the weight limit.\\n\\nThe query result format is in the following example:\\n\\n \\n\\nQueue table:\\n+-----------+-------------+--------+------+\\n| person_id | person_name | weight | turn |\\n+-----------+-------------+--------+------+\\n| 5         | Alice       | 250    | 1    |\\n| 4         | Bob         | 175    | 5    |\\n| 3         | Alex        | 350    | 2    |\\n| 6         | John Cena   | 400    | 3    |\\n| 1         | Winston     | 500    | 6    |\\n| 2         | Marie       | 200    | 4    |\\n+-----------+-------------+--------+------+\\n\\nResult table\\n+-------------+\\n| person_name |\\n+-------------+\\n| John Cena   |\\n+-------------+\\n\\nThe table is ordered by the turn for simplicity.\\n+------+----+-----------+--------+--------------+\\n| Turn | ID | Name      | Weight | Total Weight |\\n+------+----+-----------+--------+--------------+\\n| 1    | 5  | Alice     | 250    | 250          |\\n| 2    | 3  | Alex      | 350    | 600          |\\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\\n| 5    | 4  | Bob       | 175    | ___          |\\n| 6    | 1  | Winston   | 500    | ___          |\\n+------+----+-----------+--------+--------------+\\n```\\n\\n#### Answer1\\n```SQL\\nwith a as (select person_name, sum(weight) over (order by turn) wt  from Queue\\n)\\n\\nselect top(1) person_name from a\\nwhere wt <= 1000\\norder by wt desc\\n\\n```\\n\\n#### Answer2\\n```SQL\\nselect top 1 q1.person_name from queue q1 join queue q2 on q1.turn >= q2.turn\\ngroup by q1.person_id, q1.person_name, q1.turn\\nhaving sum(q2.weight) <= 1000\\norder by q1.turn desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n1204. Last Person to Fit in the Bus\\nMedium\\n\\nSQL Schema\\nTable: Queue\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| person_id   | int     |\\n| person_name | varchar |\\n| weight      | int     |\\n| turn        | int     |\\n+-------------+---------+\\nperson_id is the primary key column for this table.\\nThis table has the information about all people waiting for a bus.\\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\\nweight is the weight of the person in kilograms.\\n \\n\\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.\\n\\nWrite an SQL query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The testcases are generated such that the first person does not exceed the weight limit.\\n\\nThe query result format is in the following example:\\n\\n \\n\\nQueue table:\\n+-----------+-------------+--------+------+\\n| person_id | person_name | weight | turn |\\n+-----------+-------------+--------+------+\\n| 5         | Alice       | 250    | 1    |\\n| 4         | Bob         | 175    | 5    |\\n| 3         | Alex        | 350    | 2    |\\n| 6         | John Cena   | 400    | 3    |\\n| 1         | Winston     | 500    | 6    |\\n| 2         | Marie       | 200    | 4    |\\n+-----------+-------------+--------+------+\\n\\nResult table\\n+-------------+\\n| person_name |\\n+-------------+\\n| John Cena   |\\n+-------------+\\n\\nThe table is ordered by the turn for simplicity.\\n+------+----+-----------+--------+--------------+\\n| Turn | ID | Name      | Weight | Total Weight |\\n+------+----+-----------+--------+--------------+\\n| 1    | 5  | Alice     | 250    | 250          |\\n| 2    | 3  | Alex      | 350    | 600          |\\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\\n| 5    | 4  | Bob       | 175    | ___          |\\n| 6    | 1  | Winston   | 500    | ___          |\\n+------+----+-----------+--------+--------------+\\n```\n```SQL\\nwith a as (select person_name, sum(weight) over (order by turn) wt  from Queue\\n)\\n\\nselect top(1) person_name from a\\nwhere wt <= 1000\\norder by wt desc\\n\\n```\n```SQL\\nselect top 1 q1.person_name from queue q1 join queue q2 on q1.turn >= q2.turn\\ngroup by q1.person_id, q1.person_name, q1.turn\\nhaving sum(q2.weight) <= 1000\\norder by q1.turn desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1431425,
                "title": "no-join-and-no-subquery-mysql-beat-84-with-explanation",
                "content": "\"sum(weight) over ( order by turn asc) <= 1000\"  indicates a group of people who can attend the bus\\n\"sum(weight) over ( order by turn asc)\" provids the accumulate sum of weight ( total weight)\\n\\nThe logic is to select the highest  total weight within the a group of people who can attend the bus.\\n\\n```\\nselect person_name\\nfrom Queue \\norder by sum(weight) over ( order by turn asc) <= 1000  desc, sum(weight) over ( order by turn asc) desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect person_name\\nfrom Queue \\norder by sum(weight) over ( order by turn asc) <= 1000  desc, sum(weight) over ( order by turn asc) desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1065924,
                "title": "beats-96-simplest-solution",
                "content": "```\\nselect person_name\\nfrom\\n(\\n    select *, sum(weight) over(order by turn) s\\n    from Queue \\n) t\\nwhere s <= 1000\\norder by turn desc\\nLimit 1\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/images/f8fdd7cd-c180-46a2-a05f-35013d983279_1613345252.496031.png)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect person_name\\nfrom\\n(\\n    select *, sum(weight) over(order by turn) s\\n    from Queue \\n) t\\nwhere s <= 1000\\norder by turn desc\\nLimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 820803,
                "title": "mysql-using-window-function",
                "content": "SELECT person_name FROM\\n\\n(SELECT person_name, SUM(weight) OVER(ORDER BY turn ASC) AS total_weight FROM Queue) t1\\n\\nWHERE t1.total_weight <= 1000\\nORDER BY t1.total_weight DESC LIMIT 1",
                "solutionTags": [],
                "code": "SELECT person_name FROM\\n\\n(SELECT person_name, SUM(weight) OVER(ORDER BY turn ASC) AS total_weight FROM Queue) t1\\n\\nWHERE t1.total_weight <= 1000\\nORDER BY t1.total_weight DESC LIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 398979,
                "title": "easy-understood-and-fast-solution",
                "content": "```\\n# # 1. find the cumulative weight by the turn\\n# turn  person_name  cum_weight\\n# # 2. filter out those cum_weight > 100, and select person_name with max\\n# person_name\\n\\nSELECT table1.person_name\\nFROM\\n    (SELECT q.turn,\\n            q.person_name,\\n           (SELECT SUM(q1.weight) FROM queue q1\\n           WHERE q1.turn <= q.turn) AS cum_weight\\n    FROM queue q) table1\\nWHERE table1.cum_weight <= 1000\\nORDER BY table1.turn DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\n# # 1. find the cumulative weight by the turn\\n# turn  person_name  cum_weight\\n# # 2. filter out those cum_weight > 100, and select person_name with max\\n# person_name\\n\\nSELECT table1.person_name\\nFROM\\n    (SELECT q.turn,\\n            q.person_name,\\n           (SELECT SUM(q1.weight) FROM queue q1\\n           WHERE q1.turn <= q.turn) AS cum_weight\\n    FROM queue q) table1\\nWHERE table1.cum_weight <= 1000\\nORDER BY table1.turn DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3939749,
                "title": "last-person-to-fit-in-bus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal is to find the last person who can fit on the bus without exceeding the weight limit. We need to consider the order of people based on their turn and calculate the cumulative weight at each turn to check if it exceeds the weight limit.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe join the Queue table with itself, creating combinations of rows where each row is paired with all rows that have a higher or equal turn value.\\nWe group the rows by turn and calculate the sum of weights for each group.\\nUsing the HAVING clause, we filter out groups whose sum of weights exceeds the weight limit of 1000.\\nWe order the results by the sum of weights in descending order, ensuring the last person who can fit is at the top.\\nFinally, we limit the result to 1 row since we only need the information of the last person.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3616656,
                "title": "easy-mysql-solution-with-explanation-using-derived-table",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The question asks us to retrieve the **name of the last person** that gets on the bus as people are standing in a queue with each having a turn (number) and the **limit of the bus is 1000 kg**.\\n- We retrieve the person_name from a **derived table Q** which sums the weight of the persons as they get in the bus according to their turn.\\n- We then state a condition that the **sum of the weights cannot exceed 1000kg** and then order the people on the bus by their turn and limit the query result to 1 so that we retrieve the name of the last person.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the **person_name**.\\n2. In the FROM statement, we use a derived table Q where **total_weight is written as SUM(weight) OVER(ORDER BY turn)**.\\n3. The **WHERE clause** states a condition that **total_weight<=1000**\\n4. The **ORDER BY clause** orders the query result by **turn in descending order**, meaning the person who entered the bus last will be on top and then limit the result to 1 in order to retrieve the last person_name to enter the bus.\\n\\n# Code\\n```\\n# Write your MySQL solution below\\nSELECT person_name\\nFROM\\n(\\n  SELECT person_name, weight, turn, SUM(weight) OVER(ORDER BY turn) as total_weight FROM Queue\\n) as Q\\nWHERE total_weight<=1000\\nORDER BY turn DESC LIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL solution below\\nSELECT person_name\\nFROM\\n(\\n  SELECT person_name, weight, turn, SUM(weight) OVER(ORDER BY turn) as total_weight FROM Queue\\n) as Q\\nWHERE total_weight<=1000\\nORDER BY turn DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3474835,
                "title": "easy-mysql-window-function-running-sum-cte-beats-93",
                "content": "\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte1 as\\n (select * , sum(weight) over(order by turn Rows between unbounded preceding and current row) as running_sum from queue )\\n , cte2 as\\n (select person_name , running_sum , dense_rank() over(order by running_sum desc) as rn from cte1 \\n where running_sum<=1000\\n )\\n select person_name from cte2 \\n where rn=1;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte1 as\\n (select * , sum(weight) over(order by turn Rows between unbounded preceding and current row) as running_sum from queue )\\n , cte2 as\\n (select person_name , running_sum , dense_rank() over(order by running_sum desc) as rn from cte1 \\n where running_sum<=1000\\n )\\n select person_name from cte2 \\n where rn=1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2385263,
                "title": "simple-cte-window-function",
                "content": "with CTE as (select person_name, sum(weight) over(order by turn) as totalweight\\nfrom Queue\\norder by turn asc)\\n\\nselect person_name from CTE\\nwhere totalweight<=1000\\norder by totalweight desc limit 1\\n\\n**#Over() can be used on aggregate functions like count(), sum(), etc...**\\n**(Sum(weight) over(order by  turn) + order by turn asc) create a rolling sum of weight starting from turn 1**\\n**now we filter the total weight <= 1000 to find all person that can board the bus. We then order by weight descending to find the last person **",
                "solutionTags": [],
                "code": "with CTE as (select person_name, sum(weight) over(order by turn) as totalweight\\nfrom Queue\\norder by turn asc)\\n\\nselect person_name from CTE\\nwhere totalweight<=1000\\norder by totalweight desc limit 1\\n\\n**#Over() can be used on aggregate functions like count(), sum(), etc...**\\n**(Sum(weight) over(order by  turn) + order by turn asc) create a rolling sum of weight starting from turn 1**\\n**now we filter the total weight <= 1000 to find all person that can board the bus. We then order by weight descending to find the last person **",
                "codeTag": "Unknown"
            },
            {
                "id": 2264066,
                "title": "beautiful-and-simple",
                "content": "```\\nSELECT person_name\\nFROM \\n    (SELECT person_name, \\n           turn,\\n           SUM(weight) OVER(order by turn) total_weight\\n    FROM queue) sub1\\nWHERE total_weight <= \\'1000\\'\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name\\nFROM \\n    (SELECT person_name, \\n           turn,\\n           SUM(weight) OVER(order by turn) total_weight\\n    FROM queue) sub1\\nWHERE total_weight <= \\'1000\\'\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2136934,
                "title": "easy-window-function",
                "content": "select person_name from(\\nselect *,\\nsum(weight) over(order by turn) as total from Queue) sq1\\nwhere total<= 1000\\norder by turn desc\\nlimit 1",
                "solutionTags": [],
                "code": "select person_name from(\\nselect *,\\nsum(weight) over(order by turn) as total from Queue) sq1\\nwhere total<= 1000\\norder by turn desc\\nlimit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 2042742,
                "title": "mysql-solution-with-window-function",
                "content": "```\\n-- A two-step approach. \\n-- The first step is to calculate the running total of weight based on the sequence of their arrival\\nWITH cum_weight AS(\\n    SELECT person_name,\\n        SUM(weight) OVER(ORDER BY turn) AS running_total\\n    FROM Queue)\\n\\n-- The second step is to obtain the passenger name, whose calculated running total weight is equal to \\n-- the maximum running total that\\'s below 1000. \\nSELECT person_name\\nFROM cum_weight\\nWHERE running_total = (SELECT MAX(running_total) \\n                       FROM cum_weight \\n                       WHERE running_total <=1000);",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\n-- A two-step approach. \\n-- The first step is to calculate the running total of weight based on the sequence of their arrival\\nWITH cum_weight AS(\\n    SELECT person_name,\\n        SUM(weight) OVER(ORDER BY turn) AS running_total\\n    FROM Queue)\\n\\n-- The second step is to obtain the passenger name, whose calculated running total weight is equal to \\n-- the maximum running total that\\'s below 1000. \\nSELECT person_name\\nFROM cum_weight\\nWHERE running_total = (SELECT MAX(running_total) \\n                       FROM cum_weight \\n                       WHERE running_total <=1000);",
                "codeTag": "Unknown"
            },
            {
                "id": 1713822,
                "title": "fast-window-function",
                "content": "```\\nselect person_name from\\n(select turn, person_id, person_name, sum(weight) over(order by turn) as total from Queue q) t\\nwhere total<=1000\\norder by total desc\\nlimit 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect person_name from\\n(select turn, person_id, person_name, sum(weight) over(order by turn) as total from Queue q) t\\nwhere total<=1000\\norder by total desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1671548,
                "title": "windows-function",
                "content": "select person_name \\nfrom (\\n    select person_id, person_name, turn, weight, \\n        sum(weight) over(order by turn) as cum_wright\\n    from Queue\\n    order by turn) sub\\nwhere cum_wright <= 1000\\norder by cum_wright desc\\nlimit 1;",
                "solutionTags": [],
                "code": "select person_name \\nfrom (\\n    select person_id, person_name, turn, weight, \\n        sum(weight) over(order by turn) as cum_wright\\n    from Queue\\n    order by turn) sub\\nwhere cum_wright <= 1000\\norder by cum_wright desc\\nlimit 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 1662898,
                "title": "mysql-easy-solution",
                "content": "select person_name from (\\nselect a.person_name, sum(b.weight) \\nfrom Queue a, Queue b\\nwhere b.turn <= a.turn \\ngroup by 1 \\nhaving sum(b.weight) <= 1000\\norder by a.turn desc \\nlimit 1 ) as person",
                "solutionTags": [],
                "code": "select person_name from (\\nselect a.person_name, sum(b.weight) \\nfrom Queue a, Queue b\\nwhere b.turn <= a.turn \\ngroup by 1 \\nhaving sum(b.weight) <= 1000\\norder by a.turn desc \\nlimit 1 ) as person",
                "codeTag": "Unknown"
            },
            {
                "id": 1599256,
                "title": "full-breakdown-solution",
                "content": "Here is a solution that is code formatted, commented, and modular. You can use three backticks to add code blocks.\\n\\nI think many users are focusing on \\'fast\\', instead of discussing human readable and explainable solutions. You\\'ll be interviewed by humans not computers, and you\\'ll need to be able to talk through and explain what your code does.\\n\\nFor those looking to learn; there are separate CTE expressions here, you can look at each in isolation to see how it builds towards the solution. Hope this helps you!\\n\\n```SQL\\n-- Step 1: Use ROWS for a cumulative sum column, ordering by turn\\nWITH cumulative_sum AS (\\n    SELECT\\n        person_id,\\n        person_name,\\n        weight,\\n        turn,\\n        SUM(weight) OVER (\\n            ORDER BY turn\\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\\n        ) AS cumulative_weight\\n    FROM Queue\\n)\\n-- Step 2: Filter to 1000 or less cumulative weight, then invert\\n-- the table order and select only one record using LIMIT 1\\nSELECT\\n    person_name\\nFROM cumulative_sum\\nWHERE cumulative_weight <= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SQL\\n-- Step 1: Use ROWS for a cumulative sum column, ordering by turn\\nWITH cumulative_sum AS (\\n    SELECT\\n        person_id,\\n        person_name,\\n        weight,\\n        turn,\\n        SUM(weight) OVER (\\n            ORDER BY turn\\n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\\n        ) AS cumulative_weight\\n    FROM Queue\\n)\\n-- Step 2: Filter to 1000 or less cumulative weight, then invert\\n-- the table order and select only one record using LIMIT 1\\nSELECT\\n    person_name\\nFROM cumulative_sum\\nWHERE cumulative_weight <= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1534397,
                "title": "mysql-clear-simple-solution-faster-than-99-43",
                "content": "WITH CTE AS (\\n    SELECT *, SUM(weight) OVER(ORDER BY Turn) AS Total_Weight\\n    FROM Queue)\\n\\t\\nSELECT person_name\\nFROM CTE\\nWHERE Total_Weight <= 1000\\nORDER BY Total_Weight DESC\\nLIMIT 1",
                "solutionTags": [],
                "code": "WITH CTE AS (\\n    SELECT *, SUM(weight) OVER(ORDER BY Turn) AS Total_Weight\\n    FROM Queue)\\n\\t\\nSELECT person_name\\nFROM CTE\\nWHERE Total_Weight <= 1000\\nORDER BY Total_Weight DESC\\nLIMIT 1",
                "codeTag": "Unknown"
            },
            {
                "id": 1469952,
                "title": "using-window-function",
                "content": "```\\nselect person_name\\nfrom \\n(select person_name,\\nsum(weight) over (order by turn) as total_weight\\nfrom Queue) as w\\nwhere total_weight <= 1000\\norder by total_weight desc limit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect person_name\\nfrom \\n(select person_name,\\nsum(weight) over (order by turn) as total_weight\\nfrom Queue) as w\\nwhere total_weight <= 1000\\norder by total_weight desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1386465,
                "title": "simple-mysql-solution",
                "content": "```\\n-- Creat a column \\'total\\' to calculate the running total of the weight.\\nWITH temp AS(\\n    SELECT\\n        *\\n        ,Sum(weight) OVER(ORDER BY turn) as total\\n    FROM\\n        Queue\\n)\\n\\n-- Find the name in last row (name of last person)\\nSELECT\\n    person_name\\nFROM\\n    temp\\nWHERE\\n    total <= 1000\\nORDER BY\\n    total DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\n-- Creat a column \\'total\\' to calculate the running total of the weight.\\nWITH temp AS(\\n    SELECT\\n        *\\n        ,Sum(weight) OVER(ORDER BY turn) as total\\n    FROM\\n        Queue\\n)\\n\\n-- Find the name in last row (name of last person)\\nSELECT\\n    person_name\\nFROM\\n    temp\\nWHERE\\n    total <= 1000\\nORDER BY\\n    total DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1355279,
                "title": "mysql",
                "content": "```\\nselect person_name\\nfrom\\n(select person_id, person_name, turn, sum(weight)over(order by turn) as wt\\nfrom Queue) q\\nwhere wt <= 1000\\norder by turn desc\\nlimit 1\\n",
                "solutionTags": [],
                "code": "```\\nselect person_name\\nfrom\\n(select person_id, person_name, turn, sum(weight)over(order by turn) as wt\\nfrom Queue) q\\nwhere wt <= 1000\\norder by turn desc\\nlimit 1\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1239633,
                "title": "simple-solution-use-window-function",
                "content": "select person_name\\nfrom\\n(select *, sum(weight) over(order by turn) as total_weight\\nfrom Queue) s\\nwhere s.total_weight <= 1000\\norder by total_weight desc\\nlimit 1;",
                "solutionTags": [],
                "code": "select person_name\\nfrom\\n(select *, sum(weight) over(order by turn) as total_weight\\nfrom Queue) s\\nwhere s.total_weight <= 1000\\norder by total_weight desc\\nlimit 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 1198809,
                "title": "mysql",
                "content": "```\\n# running total \\nselect \\n    person_name\\nfrom\\n(\\nselect \\n    *,\\n    sum(weight) over (order by turn) as r_t\\nfrom queue \\n) tmp1\\nwhere r_t <= 1000\\norder by r_t desc\\nlimit 1;\\n",
                "solutionTags": [],
                "code": "```\\n# running total \\nselect \\n    person_name\\nfrom\\n(\\nselect \\n    *,\\n    sum(weight) over (order by turn) as r_t\\nfrom queue \\n) tmp1\\nwhere r_t <= 1000\\norder by r_t desc\\nlimit 1;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1190410,
                "title": "easy-and-simple-solution",
                "content": "```\\nWITH acc_weight AS (\\n    SELECT\\n        person_name,\\n        SUM(weight) OVER(ORDER BY turn) total_weight\\n    FROM queue )\\n\\nSELECT \\n    person_name\\nFROM acc_weight\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\nWITH acc_weight AS (\\n    SELECT\\n        person_name,\\n        SUM(weight) OVER(ORDER BY turn) total_weight\\n    FROM queue )\\n\\nSELECT \\n    person_name\\nFROM acc_weight\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1112795,
                "title": "window-function-and-simple-select-statements",
                "content": "```\\nSELECT person_name\\nFROM (\\n    SELECT person_name,\\n        turn,\\n        CASE\\n            WHEN cum_sum > 1000 THEN 1 \\n            ELSE 0\\n            END greater_1000\\n    FROM (\\n        SELECT person_name,\\n            turn,\\n            SUM(weight) OVER (ORDER BY turn) cum_sum\\n        FROM queue\\n        ORDER BY turn\\n        ) a\\n    ) final\\nWHERE greater_1000 = 0\\nORDER BY turn DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name\\nFROM (\\n    SELECT person_name,\\n        turn,\\n        CASE\\n            WHEN cum_sum > 1000 THEN 1 \\n            ELSE 0\\n            END greater_1000\\n    FROM (\\n        SELECT person_name,\\n            turn,\\n            SUM(weight) OVER (ORDER BY turn) cum_sum\\n        FROM queue\\n        ORDER BY turn\\n        ) a\\n    ) final\\nWHERE greater_1000 = 0\\nORDER BY turn DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1094089,
                "title": "mysql-using-window-function-and-subqueries",
                "content": "```\\nSELECT person_name FROM \\n(\\n    SELECT person_name , SUM(weight) OVER (ORDER BY turn) AS weight\\n    FROM queue\\n)a\\nWHERE weight <= 1000\\nORDER BY weight DESC LIMIT 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name FROM \\n(\\n    SELECT person_name , SUM(weight) OVER (ORDER BY turn) AS weight\\n    FROM queue\\n)a\\nWHERE weight <= 1000\\nORDER BY weight DESC LIMIT 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1063767,
                "title": "2-ctes-mysql-with-clear-variable-names-and-sum-over",
                "content": "First add a cumulative weight column to the table using a sum() over() clause. \\n\\nSecond, filter the above CTE to only keep rows where the cumulative weight is LTE 1000\\n\\nThird, select from the second CTE and revsere the ordering by turn descending and LIMIT 1. \\n\\n```sql\\nwith cumulative_weights AS (\\n    SELECT q.*, \\n        sum(q.weight) over(order by turn) as cumulative_weight\\n    FROM Queue q\\n)\\n, weights_lte_1000 AS (\\n    SELECT * FROM cumulative_weights \\n    WHERE cumulative_weight <= 1000\\n    ORDER BY turn\\n)\\n\\nSELECT person_name \\nFROM weights_lte_1000\\nORDER BY turn DESC \\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```sql\\nwith cumulative_weights AS (\\n    SELECT q.*, \\n        sum(q.weight) over(order by turn) as cumulative_weight\\n    FROM Queue q\\n)\\n, weights_lte_1000 AS (\\n    SELECT * FROM cumulative_weights \\n    WHERE cumulative_weight <= 1000\\n    ORDER BY turn\\n)\\n\\nSELECT person_name \\nFROM weights_lte_1000\\nORDER BY turn DESC \\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1003976,
                "title": "window-function-sum-over",
                "content": "```\\nselect\\n    person_name\\nfrom\\n(\\nselect\\n    person_name,\\n    sum(weight) over(order by turn) cumwgt\\nfrom Queue \\n) t\\nwhere cumwgt <= 1000\\norder by cumwgt desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n    person_name\\nfrom\\n(\\nselect\\n    person_name,\\n    sum(weight) over(order by turn) cumwgt\\nfrom Queue \\n) t\\nwhere cumwgt <= 1000\\norder by cumwgt desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 982910,
                "title": "no-windows-function-only-cte",
                "content": "```\\nwith weight_CTE as \\n(select person_name, turn, \\n(select sum(weight) from queue where turn <= q.turn) as cum_weight \\nfrom queue q )\\n\\nselect person_name from weight_CTE \\nwhere cum_weight<=1000\\norder by turn desc limit 1;\\n```",
                "solutionTags": [],
                "code": "```\\nwith weight_CTE as \\n(select person_name, turn, \\n(select sum(weight) from queue where turn <= q.turn) as cum_weight \\nfrom queue q )\\n\\nselect person_name from weight_CTE \\nwhere cum_weight<=1000\\norder by turn desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 905917,
                "title": "using-recursive-cte",
                "content": "\\nwith recursive base as \\n(select person_name,turn, weight from queue where turn = 1\\n union all\\n select b.person_name,b.turn,a.weight+ b.weight \\n from base a\\n join queue b \\n on a.turn + 1 = b.turn\\n)\\nselect person_name from base where weight <= 1000 \\norder by weight desc limit 1",
                "solutionTags": [],
                "code": "\\nwith recursive base as \\n(select person_name,turn, weight from queue where turn = 1\\n union all\\n select b.person_name,b.turn,a.weight+ b.weight \\n from base a\\n join queue b \\n on a.turn + 1 = b.turn\\n)\\nselect person_name from base where weight <= 1000 \\norder by weight desc limit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 858549,
                "title": "simple-ms-sql-solution",
                "content": "```\\nselect\\n    top 1\\n    person_name\\nfrom\\n    (\\n    select\\n        person_name\\n        ,turn\\n        ,sum(weight) over(order by turn asc) as moving_total_weight\\n    from\\n        Queue\\n    ) as a\\nwhere\\n    moving_total_weight <= 1000\\norder by\\n    a.turn desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect\\n    top 1\\n    person_name\\nfrom\\n    (\\n    select\\n        person_name\\n        ,turn\\n        ,sum(weight) over(order by turn asc) as moving_total_weight\\n    from\\n        Queue\\n    ) as a\\nwhere\\n    moving_total_weight <= 1000\\norder by\\n    a.turn desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 840214,
                "title": "mysql-simple-approach-solution-2-liner",
                "content": "Below is the solution using a concept which is generally asked in Amazon i.e. Correlated subquery \\n\\n```select person_name from Queue q1 where 1000 >= (select sum(weight) from Queue q2 where q1.turn >= q2.turn) order by turn desc limit 1 offset 0```",
                "solutionTags": [],
                "code": "```select person_name from Queue q1 where 1000 >= (select sum(weight) from Queue q2 where q1.turn >= q2.turn) order by turn desc limit 1 offset 0```",
                "codeTag": "Unknown"
            },
            {
                "id": 813958,
                "title": "simple-solution-faster-than-90-69-using-last-value-sum-and-limit-1",
                "content": "```\\nselect last_value(person_name) over () as person_name\\nfrom (select person_name, sum(weight) over (order by turn asc)  as cum_sum\\n        from Queue) as t\\nwhere cum_sum <= 1000\\nlimit 1\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect last_value(person_name) over () as person_name\\nfrom (select person_name, sum(weight) over (order by turn asc)  as cum_sum\\n        from Queue) as t\\nwhere cum_sum <= 1000\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 794105,
                "title": "mysql-solution-window-function",
                "content": "```\\n# Write your MySQL query statement below\\n\\nSELECT \\n    temp.person_name\\nFROM \\n(\\nSELECT\\n    person_name,\\n    SUM(weight) OVER (order by turn ASC) AS running_total\\nFROM Queue\\n)temp\\nWHERE temp.running_total <= 1000\\nORDER BY temp.running_total DESC LIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT \\n    temp.person_name\\nFROM \\n(\\nSELECT\\n    person_name,\\n    SUM(weight) OVER (order by turn ASC) AS running_total\\nFROM Queue\\n)temp\\nWHERE temp.running_total <= 1000\\nORDER BY temp.running_total DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 767711,
                "title": "accumulate-sum-and-limit-1",
                "content": "```SQL\\n\\nselect person_name from (select a.person_name, a.turn, sum(b.weight) accumulate_sum from Queue a \\njoin Queue b on b.turn <= a.turn\\ngroup by person_name, a.turn) a\\nwhere accumulate_sum <= 1000\\norder by turn desc\\nlimit 1\\n",
                "solutionTags": [],
                "code": "```SQL\\n\\nselect person_name from (select a.person_name, a.turn, sum(b.weight) accumulate_sum from Queue a \\njoin Queue b on b.turn <= a.turn\\ngroup by person_name, a.turn) a\\nwhere accumulate_sum <= 1000\\norder by turn desc\\nlimit 1\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 750096,
                "title": "simplest-4-line-solutions",
                "content": "```\\nSELECT person_name \\nFROM (SELECT person_name, SUM(weight) OVER (ORDER BY turn) AS cumulative_weight FROM Queue) qc\\nWHERE cumulative_weight <= 1000\\nORDER BY cumulative_weight DESC LIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name \\nFROM (SELECT person_name, SUM(weight) OVER (ORDER BY turn) AS cumulative_weight FROM Queue) qc\\nWHERE cumulative_weight <= 1000\\nORDER BY cumulative_weight DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 730636,
                "title": "3-solutions-self-join-window-function-sub-query",
                "content": "Self join\\n```\\nselect a.person_name\\nfrom queue a\\njoin queue b on a.turn>=b.turn\\ngroup by a.person_id\\nhaving sum(b.weight)<=1000\\norder by a.turn desc\\nlimit 1\\n```\\n\\nWindow function\\n```\\nwith t as\\n    (select *,\\n        sum(weight) over(order by turn) accumu_weight\\n    from queue)\\n\\nselect person_name\\nfrom t\\nwhere accumu_weight <= 1000\\norder by turn desc\\nlimit 1\\n```\\n\\nSub query\\n```\\nselect person_name\\nfrom queue a\\nwhere (\\n    select sum(weight) from queue b\\n    where a.turn>=b.turn\\n)<= 1000\\norder by a.turn desc\\nlimit 1\\n```",
                "solutionTags": [],
                "code": "```\\nselect a.person_name\\nfrom queue a\\njoin queue b on a.turn>=b.turn\\ngroup by a.person_id\\nhaving sum(b.weight)<=1000\\norder by a.turn desc\\nlimit 1\\n```\n```\\nwith t as\\n    (select *,\\n        sum(weight) over(order by turn) accumu_weight\\n    from queue)\\n\\nselect person_name\\nfrom t\\nwhere accumu_weight <= 1000\\norder by turn desc\\nlimit 1\\n```\n```\\nselect person_name\\nfrom queue a\\nwhere (\\n    select sum(weight) from queue b\\n    where a.turn>=b.turn\\n)<= 1000\\norder by a.turn desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 696844,
                "title": "mysql-solution-beat-99",
                "content": "```\\n\\nSELECT person_name\\nFROM (SELECT person_name, turn, SUM(weight) OVER (order by turn) as sum_weight FROM Queue) orders\\nWHERE sum_weight <= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\n\\nSELECT person_name\\nFROM (SELECT person_name, turn, SUM(weight) OVER (order by turn) as sum_weight FROM Queue) orders\\nWHERE sum_weight <= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 652281,
                "title": "faster-than-92-mysql",
                "content": "select person_name\\nfrom\\n(\\nselect \\nperson_name,turn,\\nsum(weight)over(order by turn asc) as total\\nfrom queue\\n    )sub\\nwhere total<=1000\\norder by turn desc\\nlimit 1",
                "solutionTags": [],
                "code": "select person_name\\nfrom\\n(\\nselect \\nperson_name,turn,\\nsum(weight)over(order by turn asc) as total\\nfrom queue\\n    )sub\\nwhere total<=1000\\norder by turn desc\\nlimit 1",
                "codeTag": "Unknown"
            },
            {
                "id": 649086,
                "title": "simple-mysql-beats-90-with-window-function-no-join",
                "content": "```\\nSELECT person_name FROM \\n    (SELECT person_name \\n            ,SUM(weight) over(ORDER BY turn) cum_sum FROM Queue) A\\nWHERE cum_sum <= 1000 \\nORDER BY cum_sum DESC LIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name FROM \\n    (SELECT person_name \\n            ,SUM(weight) over(ORDER BY turn) cum_sum FROM Queue) A\\nWHERE cum_sum <= 1000 \\nORDER BY cum_sum DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 626588,
                "title": "just-1-sum-window-fn-speed-83th-percentile",
                "content": "select top 1 person_name from\\n(select person_name, sum(weight) over (order by turn) as cum_weight from queue) a\\nwhere cum_weight<=1000 order by cum_weight desc",
                "solutionTags": [],
                "code": "select top 1 person_name from\\n(select person_name, sum(weight) over (order by turn) as cum_weight from queue) a\\nwhere cum_weight<=1000 order by cum_weight desc",
                "codeTag": "Unknown"
            },
            {
                "id": 625648,
                "title": "mysql-clear-solution-using-variable",
                "content": "```\\nSELECT person_name FROM\\n(\\n    SELECT person_name, @total_weight := @total_weight + weight total_weight\\n    FROM Queue, (SELECT @total_weight := 0) x\\n    ORDER BY turn\\n) y\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC LIMIT 1\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person_name FROM\\n(\\n    SELECT person_name, @total_weight := @total_weight + weight total_weight\\n    FROM Queue, (SELECT @total_weight := 0) x\\n    ORDER BY turn\\n) y\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC LIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 551388,
                "title": "mysql-a-simple-and-fast-solution-using-user-defined-variable-beat-98",
                "content": "```\\nSELECT\\n    person_name\\nFROM\\n    (SELECT\\n        q.person_name,\\n        @cum_weight:= @cum_weight + q.weight cum_weight\\n        FROM\\n        Queue q JOIN (SELECT @cum_weight:= 0) t1\\n    ORDER BY\\n        q.turn) t2\\nWHERE\\n    cum_weight <= 1000\\nORDER BY\\n    cum_weight DESC\\nLIMIT 1;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    person_name\\nFROM\\n    (SELECT\\n        q.person_name,\\n        @cum_weight:= @cum_weight + q.weight cum_weight\\n        FROM\\n        Queue q JOIN (SELECT @cum_weight:= 0) t1\\n    ORDER BY\\n        q.turn) t2\\nWHERE\\n    cum_weight <= 1000\\nORDER BY\\n    cum_weight DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 548042,
                "title": "easy-solution",
                "content": "```\\n\\nselect person_name\\nfrom\\n(\\nselect a.turn, a.person_name, sum(b.weight) as total_weight\\nfrom queue a\\n    join queue b on b.turn <= a.turn\\ngroup by a.turn\\n)o\\nwhere total_weight <= 1000\\norder by total_weight desc\\nlimit 1;\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nselect person_name\\nfrom\\n(\\nselect a.turn, a.person_name, sum(b.weight) as total_weight\\nfrom queue a\\n    join queue b on b.turn <= a.turn\\ngroup by a.turn\\n)o\\nwhere total_weight <= 1000\\norder by total_weight desc\\nlimit 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 534809,
                "title": "easy-to-understand",
                "content": "select top 1 person_name from \\n(\\nSELECT Person_name,turn,sum(weight) over(ORDER BY turn ASC) as cummulative_weight \\n    \\nFROM Queue\\n   \\n)x \\n\\n Where cummulative_weight   <= 1000\\norder by turn desc",
                "solutionTags": [],
                "code": "select top 1 person_name from \\n(\\nSELECT Person_name,turn,sum(weight) over(ORDER BY turn ASC) as cummulative_weight \\n    \\nFROM Queue\\n   \\n)x \\n\\n Where cummulative_weight   <= 1000\\norder by turn desc",
                "codeTag": "Unknown"
            },
            {
                "id": 478790,
                "title": "ms-sql-using-running-sum",
                "content": "\\u6211\\u7528\\u7684window function\\u5148\\u6C42\\u4E86running sum \\u7136\\u540E\\u622A\\u53D6\\u51FA\\u5C0F\\u4E8E\\u7B49\\u4E8E1000\\u7684row\\uFF0C\\u7136\\u540E\\u964D\\u5E8F\\u6392\\u5E8F\\u53D6top1\\u3002\\n\\n\\n```\\nselect top 1 person_name from \\n(\\n    select person_name, turn, sum(weight) over (order by turn) as running_total from Queue\\n) as sub \\nwhere sub.running_total <= 1000 \\norder by running_total DESC;\\n```\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect top 1 person_name from \\n(\\n    select person_name, turn, sum(weight) over (order by turn) as running_total from Queue\\n) as sub \\nwhere sub.running_total <= 1000 \\norder by running_total DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 454249,
                "title": "mysql-solution-using-variables",
                "content": "SELECT DISTINCT person_name FROM\\n(\\nSELECT person_id,person_name,turn,\\n@total_weight:=weight+@total_weight AS t,\\n@in_elevator:=CASE WHEN @total_weight>1000 THEN 0 ELSE @in_elevator END AS i\\nFROM (SELECT * FROM Queue ORDER BY turn) AS q,\\n(SELECT @total_weight:=0,@in_elevator:=1) AS u\\n) AS final\\nWHERE i=1\\nORDER BY turn DESC\\nLIMIT 1;",
                "solutionTags": [],
                "code": "SELECT DISTINCT person_name FROM\\n(\\nSELECT person_id,person_name,turn,\\n@total_weight:=weight+@total_weight AS t,\\n@in_elevator:=CASE WHEN @total_weight>1000 THEN 0 ELSE @in_elevator END AS i\\nFROM (SELECT * FROM Queue ORDER BY turn) AS q,\\n(SELECT @total_weight:=0,@in_elevator:=1) AS u\\n) AS final\\nWHERE i=1\\nORDER BY turn DESC\\nLIMIT 1;",
                "codeTag": "Unknown"
            },
            {
                "id": 448818,
                "title": "mssql",
                "content": "SELECT\\nTOP 1 person_name\\nFROM\\n(SELECT\\nperson_name, SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS wgt\\nFROM Queue) AS sub\\nWHERE sub.wgt <= 1000\\nORDER BY sub.wgt DESC",
                "solutionTags": [],
                "code": "SELECT\\nTOP 1 person_name\\nFROM\\n(SELECT\\nperson_name, SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS wgt\\nFROM Queue) AS sub\\nWHERE sub.wgt <= 1000\\nORDER BY sub.wgt DESC",
                "codeTag": "Unknown"
            },
            {
                "id": 390350,
                "title": "ms-sql-sum-window-function",
                "content": "```\\nselect top 1 person_name from\\n(select person_name,weight,sum(weight) over(order by turn) as run_weight\\nfrom queue) a\\nwhere run_weight<=1000\\ngroup by person_name\\norder by max(run_weight) desc\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect top 1 person_name from\\n(select person_name,weight,sum(weight) over(order by turn) as run_weight\\nfrom queue) a\\nwhere run_weight<=1000\\ngroup by person_name\\norder by max(run_weight) desc\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091613,
                "title": "using-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (\\nSELECT\\n        *,\\n        SUM(weight) OVER (ORDER BY turn) AS total_weight\\n    FROM Queue\\n)\\nselect person_name  from cte where total_weight <= 1000 \\norder by total_weight desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (\\nSELECT\\n        *,\\n        SUM(weight) OVER (ORDER BY turn) AS total_weight\\n    FROM Queue\\n)\\nselect person_name  from cte where total_weight <= 1000 \\norder by total_weight desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090629,
                "title": "easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect person_name from \\n        (select * , sum(Weight) over(order by turn) as cum_weight from Queue) Qu\\n        where cum_weight <= 1000 order by cum_weight desc limit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect person_name from \\n        (select * , sum(Weight) over(order by turn) as cum_weight from Queue) Qu\\n        where cum_weight <= 1000 order by cum_weight desc limit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088132,
                "title": "mysql-solution-with-over-beats-90-61",
                "content": "\\n\\n# Code\\n```\\nSELECT FIRST_VALUE(person_name) OVER (ORDER BY total_weight DESC) as person_name\\nFROM\\n(SELECT person_name, turn, SUM(weight) OVER (ORDER BY turn) as total_weight\\nFROM Queue\\nORDER BY turn) as subset\\nWHERE subset.total_weight <=1000\\nLIMIT 1;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT FIRST_VALUE(person_name) OVER (ORDER BY total_weight DESC) as person_name\\nFROM\\n(SELECT person_name, turn, SUM(weight) OVER (ORDER BY turn) as total_weight\\nFROM Queue\\nORDER BY turn) as subset\\nWHERE subset.total_weight <=1000\\nLIMIT 1;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079965,
                "title": "beats-99-of-the-users",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nWITH CTE AS(\\n  SELECT *, SUM(weight) OVER(ORDER BY turn) AS roll_sum\\n  FROM Queue\\n  ORDER BY turn\\n)\\n\\nSELECT person_name \\nFROM CTE\\nWHERE roll_sum <= 1000\\nORDER BY roll_sum DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nWITH CTE AS(\\n  SELECT *, SUM(weight) OVER(ORDER BY turn) AS roll_sum\\n  FROM Queue\\n  ORDER BY turn\\n)\\n\\nSELECT person_name \\nFROM CTE\\nWHERE roll_sum <= 1000\\nORDER BY roll_sum DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075106,
                "title": "pandas-two-lines-of-code-and-one-line-of-code-with-cumsum",
                "content": "# Intuition\\nPandas have few functions that can do cumulative operations: cummin rolling minimum, cummax = rolling maximum, cumprod = cumulative multiplication, and finally cumsum = cumulative sum. Thats exactly what we want. Whats most important - to get it right rows, must be in right order -> that\\'s why first, we have to sort. Then limit the dataframe to maximum of 1000, and return last row name.\\n\\n# Approach\\n1. sort dataframe by \\'turn\\'\\n2. create new columns \\'cumulative_sum\\' with use of `queue[\\'weight\\'].cumsum()`\\n3. limit dataframe to maximum of 1000 \\'cumulative_sum\\'.\\n4. return last rows `person_name`\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    queue = queue.sort_values(\\'turn\\')\\n    return queue.assign(cumulative_sum = queue[\\'weight\\'].cumsum()).query(\"cumulative_sum <= 1000\").tail(1)[[\\'person_name\\']] \\n\\n```\\nAlternatively we can do it all in one line, but it\\'s not recomennded since we have to sort two times in this proces - first to get rows in right order, then to get weight for cumulative_sum in right order\\n\\n```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    return queue.sort_values(\\'turn\\').assign(cs = queue.sort_values(\\'turn\\')[\\'weight\\'].cumsum()).query(\"cs <= 1000\").tail(1)[[\\'person_name\\']] \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    queue = queue.sort_values(\\'turn\\')\\n    return queue.assign(cumulative_sum = queue[\\'weight\\'].cumsum()).query(\"cumulative_sum <= 1000\").tail(1)[[\\'person_name\\']] \\n\\n```\n```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    return queue.sort_values(\\'turn\\').assign(cs = queue.sort_values(\\'turn\\')[\\'weight\\'].cumsum()).query(\"cs <= 1000\").tail(1)[[\\'person_name\\']] \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4074787,
                "title": "two-solutions-best-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code1\\n```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue\\nWHERE turn = (\\n    SELECT MAX(turn) as turn FROM\\n    (\\n        SELECT q1.turn\\n        FROM Queue q1 JOIN QUEUE q2 \\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000\\n    ) as table1\\n);\\n```\\n#**Code2**\\n```\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name FROM Queue\\nWHERE turn = (\\n    SELECT MAX(turn) as turn FROM\\n    (\\n        SELECT q1.turn\\n        FROM Queue q1 JOIN QUEUE q2 \\n        ON q1.turn >= q2.turn\\n        GROUP BY q1.turn\\n        HAVING SUM(q2.weight) <= 1000\\n    ) as table1\\n);\\n```\n```\\nSELECT \\n    q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074653,
                "title": "pandas-simple-solution-by-using-algorithm",
                "content": "\\n    import pandas as pd\\n\\n    def last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n        queue = queue.sort_values(by = \\'turn\\')\\n        queue.index = [i for i in range(len(queue))]\\n        last_name = \\'\\'\\n        total_weight = 0\\n        for i in range(len(queue[\\'weight\\'])):\\n            if queue[\\'weight\\'][i] + total_weight <= 1000:\\n                last_name = queue.loc[i ,\\'person_name\\']\\n                total_weight += queue.loc[i, \\'weight\\']\\n            else:\\n                return pd.DataFrame({\"person_name\" : [last_name]})\\n        \\n        return pd.DataFrame({\"person_name\" : [last_name]})",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "\\n    import pandas as pd\\n\\n    def last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n        queue = queue.sort_values(by = \\'turn\\')\\n        queue.index = [i for i in range(len(queue))]\\n        last_name = \\'\\'\\n        total_weight = 0\\n        for i in range(len(queue[\\'weight\\'])):\\n            if queue[\\'weight\\'][i] + total_weight <= 1000:\\n                last_name = queue.loc[i ,\\'person_name\\']\\n                total_weight += queue.loc[i, \\'weight\\']\\n            else:\\n                return pd.DataFrame({\"person_name\" : [last_name]})\\n        \\n        return pd.DataFrame({\"person_name\" : [last_name]})",
                "codeTag": "Python3"
            },
            {
                "id": 4074473,
                "title": "sql-server-solution-beats-79-62-runtime-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte as\\n(\\n  select *, sum(Weight) over (order by Turn) as Total_Weight  from Queue\\n)\\nselect top 1 person_name from cte\\nwhere Total_Weight<=1000\\norder by Total_Weight desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte as\\n(\\n  select *, sum(Weight) over (order by Turn) as Total_Weight  from Queue\\n)\\nselect top 1 person_name from cte\\nwhere Total_Weight<=1000\\norder by Total_Weight desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074190,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith cte as (select coalesce(sum(weight) over (order by turn rows between unbounded preceding and current row)) as weight ,person_name,turn from queue)\\n\\n\\nselect person_name from cte\\nwhere weight<=1000\\norder by turn desc\\nlimit  1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as (select coalesce(sum(weight) over (order by turn rows between unbounded preceding and current row)) as weight ,person_name,turn from queue)\\n\\n\\nselect person_name from cte\\nwhere weight<=1000\\norder by turn desc\\nlimit  1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072297,
                "title": "mysql-solution-using-sub-queries",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Q.person_name\\nfrom (\\n    select *,sum(Weight) over (order by turn asc) as total_wt \\n    from Queue\\n) Q\\nwhere total_wt<=1000\\norder by total_wt desc\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Q.person_name\\nfrom (\\n    select *,sum(Weight) over (order by turn asc) as total_wt \\n    from Queue\\n) Q\\nwhere total_wt<=1000\\norder by total_wt desc\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069796,
                "title": "easy-to-understand-with-sum-over",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\n  SELECT \\n    person_name, \\n    SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) total_at_turn\\n  FROM Queue\\n)\\nSELECT person_name\\nFROM CTE\\nWHERE total_at_turn <= 1000\\nORDER BY total_at_turn DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWITH CTE AS (\\n  SELECT \\n    person_name, \\n    SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) total_at_turn\\n  FROM Queue\\n)\\nSELECT person_name\\nFROM CTE\\nWHERE total_at_turn <= 1000\\nORDER BY total_at_turn DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065486,
                "title": "pandas-solution-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ni sorted dataframe by turn\\ni created loop going through every row\\nthere i added one by one weight and breaked the loop when sum of weight exceeded 1000\\nthen i stored last person name in an variable and returned it.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n        # Sort the DataFrame by \\'turn\\' in ascending order\\n    queue = queue.sort_values(by=\\'turn\\')\\n    \\n    # Initialize variables\\n    cumulative_weight = 0\\n    last_person = None\\n    \\n    # Iterate through the DataFrame\\n    for index, row in queue.iterrows():\\n        print(index,\" ||  \",row)\\n        cumulative_weight += row[\\'weight\\']\\n        print(cumulative_weight,\"  ||  \",row[\\'weight\\'])\\n        if cumulative_weight <= 1000:\\n            last_person = row[\\'person_name\\']\\n        else:\\n            break\\n    \\n    # Create a new DataFrame to hold the result\\n    result_df = pd.DataFrame({\\'person_name\\': [last_person]})\\n    \\n    return result_df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n        # Sort the DataFrame by \\'turn\\' in ascending order\\n    queue = queue.sort_values(by=\\'turn\\')\\n    \\n    # Initialize variables\\n    cumulative_weight = 0\\n    last_person = None\\n    \\n    # Iterate through the DataFrame\\n    for index, row in queue.iterrows():\\n        print(index,\" ||  \",row)\\n        cumulative_weight += row[\\'weight\\']\\n        print(cumulative_weight,\"  ||  \",row[\\'weight\\'])\\n        if cumulative_weight <= 1000:\\n            last_person = row[\\'person_name\\']\\n        else:\\n            break\\n    \\n    # Create a new DataFrame to hold the result\\n    result_df = pd.DataFrame({\\'person_name\\': [last_person]})\\n    \\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4065349,
                "title": "pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    \\n    sort_queue = queue.sort_values(by=\\'turn\\', ascending=True)\\n    sort_queue[\\'Total Weight\\'] = sort_queue[\\'weight\\'].cumsum()\\n    return sort_queue[sort_queue[\\'Total Weight\\'] <= 1000][[\\'person_name\\']].tail(1)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef last_passenger(queue: pd.DataFrame) -> pd.DataFrame:\\n    \\n    sort_queue = queue.sort_values(by=\\'turn\\', ascending=True)\\n    sort_queue[\\'Total Weight\\'] = sort_queue[\\'weight\\'].cumsum()\\n    return sort_queue[sort_queue[\\'Total Weight\\'] <= 1000][[\\'person_name\\']].tail(1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4063953,
                "title": "sql-window-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nwith cte as (\\n    select person_name, sum(weight) over (order by turn) as running_total\\n    from queue q\\n)\\nselect person_name from cte\\nwhere running_total <= 1000\\norder by running_total desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# Write your MySQL query statement below\\nwith cte as (\\n    select person_name, sum(weight) over (order by turn) as running_total\\n    from queue q\\n)\\nselect person_name from cte\\nwhere running_total <= 1000\\norder by running_total desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061488,
                "title": "very-easy-mysql-beats-maximum-mysql-solutions",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT person_name FROM\\n(SELECT *, SUM(weight) OVER (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as Total_Weight\\nFROM Queue) as a\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT person_name FROM\\n(SELECT *, SUM(weight) OVER (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as Total_Weight\\nFROM Queue) as a\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061462,
                "title": "mysql-solution-using-window-function",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect t.person_name\\nfrom (\\n  select q.person_name, sum(q.weight) over(order by q.turn) as total_weight\\n  from queue q\\n) as t\\nwhere t.total_weight <= 1000\\norder by t.turn desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect t.person_name\\nfrom (\\n  select q.person_name, sum(q.weight) over(order by q.turn) as total_weight\\n  from queue q\\n) as t\\nwhere t.total_weight <= 1000\\norder by t.turn desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060339,
                "title": "simple-solution-with-over-without-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT person_name\\nFROM (\\n      SELECT person_name, turn, weight,\\n      SUM(weight) OVER (ORDER BY turn)\\n      AS total_weight\\n      FROM Queue\\n      ORDER BY turn\\n      ) AS subq_1\\nWHERE total_weight <=1000\\nORDER BY turn DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person_name\\nFROM (\\n      SELECT person_name, turn, weight,\\n      SUM(weight) OVER (ORDER BY turn)\\n      AS total_weight\\n      FROM Queue\\n      ORDER BY turn\\n      ) AS subq_1\\nWHERE total_weight <=1000\\nORDER BY turn DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057219,
                "title": "mysql-easy-solution-using-join",
                "content": "\\n\\n# Code\\n```\\nSELECT q1.person_name \\nFROM Queue q1 \\nJOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC \\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT q1.person_name \\nFROM Queue q1 \\nJOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC \\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055919,
                "title": "oracle-1027ms-beats-98-21-of-users-with-oracle",
                "content": "\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect person_name \\n from\\n(select \\nturn,\\nperson_name, \\nsum(weight ) over(order by turn) as Total_Weight\\nfrom Queue \\norder by turn desc\\n)\\nwhere Total_Weight <=1000\\nand ROWNUM = 1\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect person_name \\n from\\n(select \\nturn,\\nperson_name, \\nsum(weight ) over(order by turn) as Total_Weight\\nfrom Queue \\norder by turn desc\\n)\\nwhere Total_Weight <=1000\\nand ROWNUM = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055553,
                "title": "beats-99-36-performing-running-total-in-ms-sql-server-window-function-and-cte",
                "content": "# Approach\\n## Running Total method\\nA running total or rolling total is the summation of a sequence of numbers which is updated each time a new number is added to the sequence, by adding the value of the new number to the previous running total. \\n\\n# Complexity\\n- Time complexity: 1901ms\\n- Space complexity: 0\\n\\n# Code\\n```\\nwith W_Queue as (\\n    select person_name, sum(weight) over (order by turn) as running_weight from Queue\\n)\\nselect top 1 person_name from W_Queue\\n    where running_weight <= 1000\\n    order by running_weight desc\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nwith W_Queue as (\\n    select person_name, sum(weight) over (order by turn) as running_weight from Queue\\n)\\nselect top 1 person_name from W_Queue\\n    where running_weight <= 1000\\n    order by running_weight desc\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4053627,
                "title": "simple-solution-using-window-function-beats-99-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nWITH cte AS\\n(\\nSELECT\\n    *,\\n    SUM(weight) OVER(ORDER BY turn) runn_sum\\nFROM\\n    queue\\nORDER BY turn DESC\\n)\\nSELECT\\n    person_name\\nFROM\\n    cte\\nWHERE\\n    runn_sum <= 1000\\nLIMIT 1\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/a71b7de6-964d-44fd-9d85-ae1c84dc52b6_1694915912.22411.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH cte AS\\n(\\nSELECT\\n    *,\\n    SUM(weight) OVER(ORDER BY turn) runn_sum\\nFROM\\n    queue\\nORDER BY turn DESC\\n)\\nSELECT\\n    person_name\\nFROM\\n    cte\\nWHERE\\n    runn_sum <= 1000\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051796,
                "title": "solution-with-cte-window-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith help as(\\nselect queue.*, \\nsum(weight) over(order by turn) as rollingweight from queue order by turn)\\nselect person_name from help \\nwhere rollingweight <= 1000\\norder by rollingweight desc\\nlimit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith help as(\\nselect queue.*, \\nsum(weight) over(order by turn) as rollingweight from queue order by turn)\\nselect person_name from help \\nwhere rollingweight <= 1000\\norder by rollingweight desc\\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050021,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (select person_name ,\\n rank() over(order by tt) as rr\\n from \\n   (select \\n   person_name, \\n   sum(weight) over(order by turn) as tt\\n  from queue) a\\nwhere tt <= 1000) \\nselect person_name from cte where rr = (select max(rr) from cte)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (select person_name ,\\n rank() over(order by tt) as rr\\n from \\n   (select \\n   person_name, \\n   sum(weight) over(order by turn) as tt\\n  from queue) a\\nwhere tt <= 1000) \\nselect person_name from cte where rr = (select max(rr) from cte)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048973,
                "title": "window-function-limit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name \\nFROM\\n(SELECT person_id, \\nperson_name,\\nSUM(weight) OVER (ORDER BY turn) as cumsum\\nFROM Queue) t\\nWHERE cumsum<=1000\\nORDER BY cumsum DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name \\nFROM\\n(SELECT person_id, \\nperson_name,\\nSUM(weight) OVER (ORDER BY turn) as cumsum\\nFROM Queue) t\\nWHERE cumsum<=1000\\nORDER BY cumsum DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048312,
                "title": "solution-with-variables-and-while-loop",
                "content": "\\n# Code\\n```\\n declare @sum int;\\n\\n declare @cnt int;\\n\\n declare @temp int;\\n\\nselect @sum = sum(weight) from Queue \\n\\nselect @cnt =max(turn) from Queue\\n \\n\\n while  (   @sum > 1000 )\\n\\n    begin\\n   \\n    select @temp = weight from Queue\\n    where turn =@cnt\\n    set @sum = @sum - @temp;\\n    set @cnt = @cnt -1 ;\\n\\n    end;\\n\\n select person_name from  Queue\\n where turn = @cnt\\n\\n\\n \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n declare @sum int;\\n\\n declare @cnt int;\\n\\n declare @temp int;\\n\\nselect @sum = sum(weight) from Queue \\n\\nselect @cnt =max(turn) from Queue\\n \\n\\n while  (   @sum > 1000 )\\n\\n    begin\\n   \\n    select @temp = weight from Queue\\n    where turn =@cnt\\n    set @sum = @sum - @temp;\\n    set @cnt = @cnt -1 ;\\n\\n    end;\\n\\n select person_name from  Queue\\n where turn = @cnt\\n\\n\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047219,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT q1.person_name\\nFROM Queue q1\\n    INNER JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT q1.person_name\\nFROM Queue q1\\n    INNER JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046550,
                "title": "mysql-solution",
                "content": "# Code\\n```\\nwith t1 as(\\n    select person_id, person_name, turn, weight,\\n            sum(weight) over(\\n                order by turn\\n                rows unbounded preceding\\n            ) as cumm_sum\\n    from Queue\\n)\\nselect person_name from t1\\nwhere cumm_sum <= 1000\\norder by cumm_sum desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith t1 as(\\n    select person_id, person_name, turn, weight,\\n            sum(weight) over(\\n                order by turn\\n                rows unbounded preceding\\n            ) as cumm_sum\\n    from Queue\\n)\\nselect person_name from t1\\nwhere cumm_sum <= 1000\\norder by cumm_sum desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045891,
                "title": "beats-100-speed-and-memory-oracle-rows-unbounded-preceding",
                "content": "# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect person_name from\\n( \\nselect person_name ,rank() over(order by cum desc) rnk from\\n(\\nselect turn,person_id ,person_name ,weight,sum(weight) OVER (ORDER BY turn ROWS UNBOUNDED PRECEDING) as cum from queue\\n) where cum <=1000\\n) where rnk=1\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect person_name from\\n( \\nselect person_name ,rank() over(order by cum desc) rnk from\\n(\\nselect turn,person_id ,person_name ,weight,sum(weight) OVER (ORDER BY turn ROWS UNBOUNDED PRECEDING) as cum from queue\\n) where cum <=1000\\n) where rnk=1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045434,
                "title": "not-for-beginners-over-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name from (\\n                select * , sum(weight) over(order by turn) adj from queue\\n                        ) a\\nwhere adj <= 1000\\norder by adj desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name from (\\n                select * , sum(weight) over(order by turn) adj from queue\\n                        ) a\\nwhere adj <= 1000\\norder by adj desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044487,
                "title": "super-easy-window-function-offset-and-fetch",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nwith cte1 as (\\nSELECT * ,\\nSUM(weight) over (order by turn ASC) as a\\nFROM QUEUE)\\n\\nSelect person_name \\nfrom cte1 \\nwhere a <= 1000 \\norder by turn ASC\\nOFFSET (select count(*) from cte1 where a <= 1000) - 1 ROWS\\nFETCH FIRST 1 row only\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nwith cte1 as (\\nSELECT * ,\\nSUM(weight) over (order by turn ASC) as a\\nFROM QUEUE)\\n\\nSelect person_name \\nfrom cte1 \\nwhere a <= 1000 \\norder by turn ASC\\nOFFSET (select count(*) from cte1 where a <= 1000) - 1 ROWS\\nFETCH FIRST 1 row only\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041725,
                "title": "short-n-simple-mysql-window-func-runtime-beats-78-56",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT t1.person_name \\nFROM (SELECT q.person_name, SUM(q.weight) OVER (ORDER BY q.turn) sum FROM Queue q) t1\\nWHERE t1.sum <= 1000\\nORDER BY t1.sum DESC \\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT t1.person_name \\nFROM (SELECT q.person_name, SUM(q.weight) OVER (ORDER BY q.turn) sum FROM Queue q) t1\\nWHERE t1.sum <= 1000\\nORDER BY t1.sum DESC \\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041043,
                "title": "easy-quick-soln-with-cte",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as\\n(select *, SUM(weight) OVER (order by Turn) as t\\nfrom Queue)\\n\\nselect person_name\\nfrom cte\\nwhere t<=1000\\norder by t desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as\\n(select *, SUM(weight) OVER (order by Turn) as t\\nfrom Queue)\\n\\nselect person_name\\nfrom cte\\nwhere t<=1000\\norder by t desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040944,
                "title": "asked-in-wayfair-interview-using-window-function-to-make-it-simpler",
                "content": "# Code\\n```\\nwith cte as \\n( select * , sum(weight) over(order by turn rows between unbounded preceding and current row) as total_sum\\nfrom Queue )\\n\\nselect person_name\\nfrom cte \\nwhere total_sum <= 1000\\norder by turn desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as \\n( select * , sum(weight) over(order by turn rows between unbounded preceding and current row) as total_sum\\nfrom Queue )\\n\\nselect person_name\\nfrom cte \\nwhere total_sum <= 1000\\norder by turn desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038609,
                "title": "video-self-join",
                "content": "# Video\\nhttps://youtu.be/CRx6dGddhwk\\n\\n# Code\\n```\\nselect person_name FROM Queue where turn = (SELECT TOP 1 q1.turn FROM Queue AS q1\\nJOIN Queue AS q2 \\nON q2.turn <= q1.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY q1.turn desc);\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect person_name FROM Queue where turn = (SELECT TOP 1 q1.turn FROM Queue AS q1\\nJOIN Queue AS q2 \\nON q2.turn <= q1.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY q1.turn desc);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038387,
                "title": "best-mysql-soltion-beats-99-34",
                "content": "# Approach\\nWindow function sum used in this query. Very simple to understand.\\n\\n```\\nSELECT *, SUM(weight) OVER(ORDER BY turn) as sums\\nFROM QUEUE\\nORDER BY turn\\n```\\nThis part will return the table calculated the weights.\\n![Screenshot from 2023-09-13 11-15-40.png](https://assets.leetcode.com/users/images/787ad51f-1317-48f4-88d9-02b7038b3e59_1694584016.6685116.png)\\n\\nThen its very easy just select the rows under 1000 weights and sort in descending order and just return the name of the top row.\\n\\nHurry its solved!!\\n\\n![Screenshot from 2023-09-13 11-12-19.png](https://assets.leetcode.com/users/images/d5cc5a37-c359-41e6-a125-ae3462481fa3_1694583800.9579566.png)\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name FROM\\n(\\nSELECT *, SUM(weight) OVER(ORDER BY turn) as sums\\nFROM QUEUE \\nORDER BY turn\\n) as t1\\nWHERE sums <= 1000\\nORDER BY sums DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT *, SUM(weight) OVER(ORDER BY turn) as sums\\nFROM QUEUE\\nORDER BY turn\\n```\n```\\n# Write your MySQL query statement below\\nSELECT person_name FROM\\n(\\nSELECT *, SUM(weight) OVER(ORDER BY turn) as sums\\nFROM QUEUE \\nORDER BY turn\\n) as t1\\nWHERE sums <= 1000\\nORDER BY sums DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035910,
                "title": "simple",
                "content": "# Intuition\\nKeep things simple as firstly find the output to get on board,then make use of sub query as that will find max weight of person in bus ansd the order it by respective turn.Use where to find the defining case to get and result of Distinction.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT person_name\\nFROM (\\n    SELECT \\n        person_name,\\n        SUM(weight) OVER (ORDER BY turn) AS   total_weight\\n    FROM Queue ORDER BY total_weight DESC\\n    ) \\nWHERE total_weight<=1000 AND rownum =1;\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT person_name\\nFROM (\\n    SELECT \\n        person_name,\\n        SUM(weight) OVER (ORDER BY turn) AS   total_weight\\n    FROM Queue ORDER BY total_weight DESC\\n    ) \\nWHERE total_weight<=1000 AND rownum =1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031866,
                "title": "simple-to-understand-windowed-function",
                "content": "### Hello! It\\'s me Bipop from TMNT\\n\\nThis task helps us to know, what is that last lucky dude who can take the bus. Becuse the limit for the passengers is 1000 kilograms on the bus.\\n\\n### First step\\n\\nWe use *WITH cte AS* . There we choose name\\n\\n```\\nWITH cte AS (\\nSELECT \\n  person_name,\\n\\n\\n```\\n\\n\\u0410nd add column with name *total_weight*. \\nIn which we calculate how much weight the bus will carry if this person gets into it. \\n*SUM(weight) OVER(ORDER BY turn) AS total_weight*\\n\\n---\\n\\n\\n\\n\\n```\\nWITH cte AS (\\nSELECT \\n  person_name, SUM(weight) OVER(ORDER BY turn) AS total_weight*\\nFROM \\n    Queue AS a1\\n```\\n\\n\\n**Explanation**: Initially the bus can have 1000 kilograms to carry, becuse no one person in there. \\nThen one human sits in the bus, weight limit decreases  on human weight. \\nSo now in the bus 0 + the weight of the first person who sat in the bus. When second human has sat in the bus, his weight adds to weight there. And on and on unitl the limit weight closes or equals 1000.\\n\\n```\\nSELECT \\n  person_name\\nFROM \\n  cte\\n```\\n\\n### Second step\\n\\n\\n---\\n\\nWhen filter value where *total_weight* + weight of the last person who can sit in bus, but not more than 1000. \\n*WHERE total_weight <= 1000*\\n\\nWe sort values descending method, because we choose all people who already sit in the bus by the queue and anyone adds his weight to the total weight in bus. \\n*ORDER BY total_weight DESC*\\n\\nThen we choose the one name, who sit the last. \\n*LIMIT 1*\\n\\n---\\n```\\nSELECT \\n  person_name\\nFROM \\n  cte\\nWHERE \\n  total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```\\n\\n# Code\\n\\n```\\n# Write your MySQL query statement below\\n\\nWITH cte AS (\\nSELECT \\n  person_name, SUM(weight) OVER(ORDER BY turn) AS total_weight\\nFROM \\n  Queue AS a1\\n)\\n\\nSELECT \\n  person_name\\nFROM \\n  cte\\nWHERE \\n  total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH cte AS (\\nSELECT \\n  person_name,\\n\\n\\n```\n```\\nWITH cte AS (\\nSELECT \\n  person_name, SUM(weight) OVER(ORDER BY turn) AS total_weight*\\nFROM \\n    Queue AS a1\\n```\n```\\nSELECT \\n  person_name\\nFROM \\n  cte\\n```\n```\\nSELECT \\n  person_name\\nFROM \\n  cte\\nWHERE \\n  total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```\n```\\n# Write your MySQL query statement below\\n\\nWITH cte AS (\\nSELECT \\n  person_name, SUM(weight) OVER(ORDER BY turn) AS total_weight\\nFROM \\n  Queue AS a1\\n)\\n\\nSELECT \\n  person_name\\nFROM \\n  cte\\nWHERE \\n  total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030749,
                "title": "easy-cte-sum-over",
                "content": "# Code\\n```\\nWITH cte AS(\\n    SELECT *, sum(weight) OVER(ORDER BY turn) AS cumm\\n    FROM Queue\\n)\\nSELECT person_name\\nFROM cte\\nWHERE cumm<=1000\\nORDER BY cumm DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nWITH cte AS(\\n    SELECT *, sum(weight) OVER(ORDER BY turn) AS cumm\\n    FROM Queue\\n)\\nSELECT person_name\\nFROM cte\\nWHERE cumm<=1000\\nORDER BY cumm DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030021,
                "title": "easy-efficient-solutions-2-approaches-beginner-friendly",
                "content": "# Code\\n```\\n--Approach 1 : Using Window function \\nwith cte as (\\nselect person_name, sum(weight) over(order by turn) as total_weight from queue)\\nselect person_name from cte where TOTAL_WEIGHT = (select max(TOTAL_WEIGHT) from cte where total_weight <= 1000 ) \\n\\n--Approach 2 : Using Self Join and Group By\\nwith cte1 as (\\nSELECT q1.turn, q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn, q1.person_name\\nHAVING SUM(q2.weight) <= 1000 )\\nselect person_name from cte1 where turn= (select max(turn) from cte1)\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n--Approach 1 : Using Window function \\nwith cte as (\\nselect person_name, sum(weight) over(order by turn) as total_weight from queue)\\nselect person_name from cte where TOTAL_WEIGHT = (select max(TOTAL_WEIGHT) from cte where total_weight <= 1000 ) \\n\\n--Approach 2 : Using Self Join and Group By\\nwith cte1 as (\\nSELECT q1.turn, q1.person_name\\nFROM Queue q1 JOIN Queue q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn, q1.person_name\\nHAVING SUM(q2.weight) <= 1000 )\\nselect person_name from cte1 where turn= (select max(turn) from cte1)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4026902,
                "title": "easy-to-understand-using-temporary-table",
                "content": "#On A.turn >= B.turn, this type a join is used to calculate the running sum.\\n\\nwith temp AS (\\n  select A.person_name As person_name,A.turn AS turn\\n  from queue AS A\\n  join queue AS B\\n  On A.turn >= B.turn\\n  group by A.turn\\n  having sum(B.weight) <= 1000\\n  order by A.turn\\n)\\nselect person_name\\nfrom temp\\nwhere turn IN\\n(\\n  select max(turn) from temp\\n)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "#On A.turn >= B.turn, this type a join is used to calculate the running sum.\\n\\nwith temp AS (\\n  select A.person_name As person_name,A.turn AS turn\\n  from queue AS A\\n  join queue AS B\\n  On A.turn >= B.turn\\n  group by A.turn\\n  having sum(B.weight) <= 1000\\n  order by A.turn\\n)\\nselect person_name\\nfrom temp\\nwhere turn IN\\n(\\n  select max(turn) from temp\\n)\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4025300,
                "title": "ms-sql-solution-using-windows-function-with-rows-between-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nWITH CTE AS\\n(\\n\\tSELECT *, SUM(weight) OVER(ORDER BY turn ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_weight\\n\\tFROM Queue\\n)\\nSELECT TOP 1 person_name\\nFROM CTE\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nWITH CTE AS\\n(\\n\\tSELECT *, SUM(weight) OVER(ORDER BY turn ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS total_weight\\n\\tFROM Queue\\n)\\nSELECT TOP 1 person_name\\nFROM CTE\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023028,
                "title": "mysql-detailed-explaination-self-join-cte",
                "content": "# Solution 1: Using Common Table Expressions (CTE) with Window Function\\n\\n**Query:**\\n```sql\\nWITH queue AS \\n( \\n   SELECT *, \\n          SUM(weight) OVER previous_rows AS total\\n   FROM Queue\\n   WINDOW previous_rows AS \\n        (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\\n) \\n\\nSELECT person_name\\nFROM queue\\nWHERE total <= 1000\\nORDER BY total DESC \\nLIMIT 1\\n```\\n\\n**Explanation:**\\n- **Common Table Expression (CTE):** We start by defining a CTE named \"queue.\" The CTE selects all columns from the \"Queue\" table and uses a window function to calculate the cumulative weight (`total`) as people board the bus. The window function sums the weights of previous rows, ordered by the \"turn\" column.\\n\\n- **Main Query:** In the main query, we select the \"person_name\" from the CTE where the cumulative weight (`total`) is less than or equal to 1000 kilograms. We order the results by `total` in descending order and limit the result to one row. This gives us the last person who can board the bus without exceeding the weight limit.\\n\\n**Advantages:**\\n1. **Flexibility:** This approach allows for more complex calculations and analysis if needed in the future.\\n2. **Maintainability:** The CTE structure makes it easier to update or modify the query without affecting the overall code.\\n\\n**Disadvantages:**\\n1. **Performance:** Window functions can be resource-intensive for large datasets, potentially impacting query performance.\\n2. **Complexity:** For those not familiar with window functions, the query might appear complex.\\n\\n# Solution 2: Using Self-Join and Grouping\\n\\n**Query:**\\n```sql\\nSELECT q1.person_name AS person_name\\nFROM Queue AS q1 \\nJOIN Queue AS q2 \\nON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY q1.turn DESC\\nLIMIT 1;\\n```\\n\\n**Explanation:**\\n- **Self-Join and Grouping:** In this solution, we perform a self-join on the \"Queue\" table. We join each row (person) in the table with all previous rows (persons) based on the \"turn\" column. This allows us to calculate the cumulative weight for each person by summing the weights of the previous persons who have boarded the bus.\\n\\n- **Grouping:** We then group the results by \"turn,\" effectively grouping each person with all previous persons they are responsible for. Within each group, we calculate the sum of weights (`SUM(q2.weight)`). This sum represents the total weight of all persons who have boarded the bus up to and including the current person.\\n\\n- **Main Query:** Finally, in the main query, we select the \"person_name\" from the groups where the sum of weights does not exceed 1000 kilograms. We order the results by \"turn\" in descending order to identify the last person who can board the bus within the weight limit.\\n\\n**Advantages:**\\n1. **Performance:** This approach can be more efficient for some database systems, especially for large datasets.\\n2. **Simplicity:** It uses standard SQL constructs like joins and grouping, making it easier to understand for those not familiar with window functions.\\n\\n**Disadvantages:**\\n1. **Limited Flexibility:** This approach may be less flexible if additional calculations or analysis are required in the future.\\n2. **Maintainability:** The query might be more challenging to modify or extend compared to the CTE-based approach.\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nWITH queue AS \\n( \\n   SELECT *, \\n          SUM(weight) OVER previous_rows AS total\\n   FROM Queue\\n   WINDOW previous_rows AS \\n        (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\\n) \\n\\nSELECT person_name\\nFROM queue\\nWHERE total <= 1000\\nORDER BY total DESC \\nLIMIT 1\\n```\n```sql\\nSELECT q1.person_name AS person_name\\nFROM Queue AS q1 \\nJOIN Queue AS q2 \\nON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY q1.turn DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020500,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nwith cte as (\\n    select person_name, sum(weight) over (order by turn) as cumulative_sum\\n    from Queue\\n)\\nselect person_name\\nfrom cte\\nwhere cumulative_sum <= 1000\\norder by cumulative_sum desc\\nlimit 1 \\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nwith cte as (\\n    select person_name, sum(weight) over (order by turn) as cumulative_sum\\n    from Queue\\n)\\nselect person_name\\nfrom cte\\nwhere cumulative_sum <= 1000\\norder by cumulative_sum desc\\nlimit 1 \\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020382,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name \\nfrom queue a\\nwhere (select sum(weight) \\n       from queue \\n       where a.turn >= turn\\n       order by turn) <= 1000\\norder by turn desc\\nlimit 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name \\nfrom queue a\\nwhere (select sum(weight) \\n       from queue \\n       where a.turn >= turn\\n       order by turn) <= 1000\\norder by turn desc\\nlimit 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014352,
                "title": "running-total-weight-approach-fast-solution",
                "content": "# Approach\\nTo resolve this problem we need, firstly, arrange our queue from firt in line to last. Along with that, we can count running total weight of passengers in the line by the following code:\\n```\\nsum(weight) over(order by turn) as total_weight\\n```\\nThis one adds weight of current passenger in the line to total. It seems logical to order queue in ascending order, but we need descending one for further query. Having that done, we take only part of queue ending with the passenger, who adds to 1000 (or less) kilos and take the last person in line. But as we arranged it in descending order, we need first row from the table:\\n```\\nwhere total_weight<=1000\\nlimit 1\\n```\\n\\n# Complexity\\n- Time complexity: 1761ms\\n\\n- Space complexity: 0.00MB\\n\\n# Code\\n```\\nselect person_name\\nfrom (select\\n        turn,\\n        person_name,\\n        weight,\\n        sum(weight) over(order by turn) as total_weight\\n    from Queue\\n    order by turn desc) t\\nwhere total_weight<=1000\\nlimit 1\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nsum(weight) over(order by turn) as total_weight\\n```\n```\\nwhere total_weight<=1000\\nlimit 1\\n```\n```\\nselect person_name\\nfrom (select\\n        turn,\\n        person_name,\\n        weight,\\n        sum(weight) over(order by turn) as total_weight\\n    from Queue\\n    order by turn desc) t\\nwhere total_weight<=1000\\nlimit 1\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4011815,
                "title": "simple-solution-no-join-no-group-by",
                "content": "# Write your MySQL query statement below\\n```\\nSELECT person_name\\nFROM (\\n\\t\\tSELECT person_name, turn, SUM(weight) OVER(order by turn) AS cumulative_sum\\n\\t\\tfrom Queue\\n\\t\\t) tmp\\nWHERE cumulative_sum<= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person_name\\nFROM (\\n\\t\\tSELECT person_name, turn, SUM(weight) OVER(order by turn) AS cumulative_sum\\n\\t\\tfrom Queue\\n\\t\\t) tmp\\nWHERE cumulative_sum<= 1000\\nORDER BY turn DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008707,
                "title": "mysql-solution-simple-one-using-cte",
                "content": "# Intuition\\n\\n# Code\\n```\\nwith cte as\\n(\\n\\n    select *,sum(weight) over(order by turn) as r_sum\\n    from queue\\n)\\nselect person_name from cte \\nwhere r_sum <=1000\\norder by r_sum desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as\\n(\\n\\n    select *,sum(weight) over(order by turn) as r_sum\\n    from queue\\n)\\nselect person_name from cte \\nwhere r_sum <=1000\\norder by r_sum desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008299,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith updated_table as (select person_name, sum(weight) over(order by turn) as cummulative_weight\\nfrom Queue)\\n\\nselect person_name from updated_table\\nwhere  cummulative_weight<=1000\\norder by cummulative_weight desc \\nlimit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith updated_table as (select person_name, sum(weight) over(order by turn) as cummulative_weight\\nfrom Queue)\\n\\nselect person_name from updated_table\\nwhere  cummulative_weight<=1000\\norder by cummulative_weight desc \\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005726,
                "title": "beats-95-clear-easy-sql-step-by-step-correct-formatting-comprehensive-explanation",
                "content": "# \\u2757 Upvote \\u2B06 if you found this useful \\u2714\\n![image.png](https://assets.leetcode.com/users/images/2a7fc627-21f6-445d-8aaa-1bdaa50f9c0d_1693922329.1619954.png)\\n\\n# \\uD83D\\uDCA1 Intuition (hint)\\n\\nMore complicated but interesting problem that can be solved using subqueries and window functions with running sums. \\n\\n# \\uD83C\\uDFAF Approach (solution)\\n\\nLets divide the problem into several steps. \\n\\nFirst we will calculate the running sums for each person in the queue order. \\n\\nThe query below selects all person and calculates the sum of weight of all person before in queue (ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING) up to the current person (AND CURRENT ROW). Then we ORDER BY running_sum ASCending. \\n```sql\\nSELECT\\n\\tperson_name\\n\\t, SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_sum\\nFROM Queue\\nORDER BY running_sum ASC\\n```\\n\\nThen, using main query based on the subquery above, we SELECT all person WHERE the running_sum is below or equal 1000. \\n```sql\\nSELECT\\n\\tperson_name\\nFROM (\\n...\\n) AS table_with_sums\\nWHERE running_sum <= 1000\\n...\\n```\\n\\nAs the list is sorted by running_sum ascending, the last person in the filtered result will be the one we are looking for. \\n\\nDue to this, we can simply change change the ORDER to DESCending. This way the person we are looking for will be first in order. Then we LIMIT results to one and have our answer.\\n```sql\\n...\\nORDER BY running_sum DESC\\nLIMIT 1\\n```\\n\\n# \\uD83D\\uDCC8 Complexity\\n\\n- \\u23F1 Time complexity:\\nBeats 95% of solutions with MySQL (at the time of submission)\\n\\n- \\uD83D\\uDCBE Space complexity:\\nBeats 100% of solutions with MySQL (space complexity in case of this problem is constant for all solutions)\\n\\n# \\uD83D\\uDD25 Code\\n\\n```sql\\nSELECT\\n\\xA0 person_name\\nFROM (\\n\\xA0 SELECT\\n\\xA0 \\xA0 person_name\\n\\xA0 \\xA0 , SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_sum\\n\\xA0 FROM Queue\\n\\xA0 ORDER BY running_sum ASC\\n) AS table_with_sums\\nWHERE running_sum <= 1000\\nORDER BY running_sum DESC\\nLIMIT 1;\\n```\\n# \\u2757 Upvote \\u2B06 if you found this useful \\u2714",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT\\n\\tperson_name\\n\\t, SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_sum\\nFROM Queue\\nORDER BY running_sum ASC\\n```\n```sql\\nSELECT\\n\\tperson_name\\nFROM (\\n...\\n) AS table_with_sums\\nWHERE running_sum <= 1000\\n...\\n```\n```sql\\n...\\nORDER BY running_sum DESC\\nLIMIT 1\\n```\n```sql\\nSELECT\\n\\xA0 person_name\\nFROM (\\n\\xA0 SELECT\\n\\xA0 \\xA0 person_name\\n\\xA0 \\xA0 , SUM(weight) OVER(ORDER BY turn ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_sum\\n\\xA0 FROM Queue\\n\\xA0 ORDER BY running_sum ASC\\n) AS table_with_sums\\nWHERE running_sum <= 1000\\nORDER BY running_sum DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004841,
                "title": "subquery-only",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name\\nfrom(select *,1000-current_weight as intervals\\nfrom (select *, sum(weight) over(order by turn ASC) as current_weight\\nfrom Queue\\norder by turn ASC) as temp) as temp1\\nwhere intervals>=0 order by intervals ASC\\nlimit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name\\nfrom(select *,1000-current_weight as intervals\\nfrom (select *, sum(weight) over(order by turn ASC) as current_weight\\nfrom Queue\\norder by turn ASC) as temp) as temp1\\nwhere intervals>=0 order by intervals ASC\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004419,
                "title": "cursor",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\ndeclare c1 cursor\\nfor select person_name, weight \\n    from Queue \\n    order by turn\\nfor read only\\n\\ndeclare @name varchar(50), @wt int\\nopen c1\\ndeclare @last_person_name varchar(50)= null, @total_wt int = 0\\n\\nfetch c1 into @name , @wt\\nwhile @@fetch_status = 0 \\n    begin\\n        if (@total_wt + @wt) <= 1000\\n        begin\\n        set @total_wt = @total_wt+ @wt\\n        set @last_person_name = @name\\n        end\\n        else\\n        begin\\n            break\\n        end\\n    fetch c1 into @name , @wt\\n    end\\nclose c1\\ndeallocate c1\\nselect @last_person_name as person_name \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\ndeclare c1 cursor\\nfor select person_name, weight \\n    from Queue \\n    order by turn\\nfor read only\\n\\ndeclare @name varchar(50), @wt int\\nopen c1\\ndeclare @last_person_name varchar(50)= null, @total_wt int = 0\\n\\nfetch c1 into @name , @wt\\nwhile @@fetch_status = 0 \\n    begin\\n        if (@total_wt + @wt) <= 1000\\n        begin\\n        set @total_wt = @total_wt+ @wt\\n        set @last_person_name = @name\\n        end\\n        else\\n        begin\\n            break\\n        end\\n    fetch c1 into @name , @wt\\n    end\\nclose c1\\ndeallocate c1\\nselect @last_person_name as person_name \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002999,
                "title": "optimum-solution-beats-93",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nwith cte_1 as\\n(\\n  Select          person_name, sum(weight) over(order by turn) as Cumulative_Weight\\n  from            Queue\\n)\\nSelect    top 1 person_name\\nfrom      cte_1\\nwhere     Cumulative_weight <= 1000\\norder by  Cumulative_weight desc\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nwith cte_1 as\\n(\\n  Select          person_name, sum(weight) over(order by turn) as Cumulative_Weight\\n  from            Queue\\n)\\nSelect    top 1 person_name\\nfrom      cte_1\\nwhere     Cumulative_weight <= 1000\\norder by  Cumulative_weight desc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002134,
                "title": "using-temp-table-window-function-order-and-limit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith t1 as(\\n    select turn, person_id, person_name, sum(weight) over(order by turn) as Total\\n    from Queue\\n    order by turn\\n)\\nselect person_name\\nfrom t1\\nwhere Total <= 1000\\norder by Total desc\\nlimit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith t1 as(\\n    select turn, person_id, person_name, sum(weight) over(order by turn) as Total\\n    from Queue\\n    order by turn\\n)\\nselect person_name\\nfrom t1\\nwhere Total <= 1000\\norder by Total desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001420,
                "title": "short-solution",
                "content": "SELECT \\n    person_name\\nFROM Queue q1\\nWHERE (SELECT SUM(weight) FROM Queue q2 WHERE q2.turn <= q1.turn) <= 1000\\nORDER BY turn DESC\\nLIMIT 1;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT \\n    person_name\\nFROM Queue q1\\nWHERE (SELECT SUM(weight) FROM Queue q2 WHERE q2.turn <= q1.turn) <= 1000\\nORDER BY turn DESC\\nLIMIT 1;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000511,
                "title": "best-solution-using-window-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nwith CTE as\\n(\\n  SELECT \\n        turn, person_name, weight,\\n        SUM(weight) OVER(ORDER BY turn ASC) AS tot_weight \\n    FROM Queue\\n    ORDER BY turn\\n)\\nSelect person_name\\nfrom CTE \\nwhere turn = (Select max(turn) from CTE where tot_weight<= 1000)\\n\\n  \\n    \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith CTE as\\n(\\n  SELECT \\n        turn, person_name, weight,\\n        SUM(weight) OVER(ORDER BY turn ASC) AS tot_weight \\n    FROM Queue\\n    ORDER BY turn\\n)\\nSelect person_name\\nfrom CTE \\nwhere turn = (Select max(turn) from CTE where tot_weight<= 1000)\\n\\n  \\n    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999232,
                "title": "last-person-to-fit-in-the-bus",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM Queue\\nWHERE turn = (SELECT MAX(turn) as turn \\nFROM (SELECT q1.turn\\nFROM Queue q1\\nJOIN Queue q2\\nON q1.turn >=q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <=1000) AS Queue_tab1);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM Queue\\nWHERE turn = (SELECT MAX(turn) as turn \\nFROM (SELECT q1.turn\\nFROM Queue q1\\nJOIN Queue q2\\nON q1.turn >=q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <=1000) AS Queue_tab1);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998602,
                "title": "simple-subquery",
                "content": "# Code\\n```\\nselect person_name\\nfrom (\\n  select person_name, sum(weight) over (order by turn) as total\\n  from queue\\n  order by turn\\n) as temp where total <= 1000\\norder by total desc\\nlimit 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect person_name\\nfrom (\\n  select person_name, sum(weight) over (order by turn) as total\\n  from queue\\n  order by turn\\n) as temp where total <= 1000\\norder by total desc\\nlimit 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998358,
                "title": "sql-solution-without-using-joins",
                "content": "##  **Please Upvote my solution, if you find it helpful**\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhen faced with the problem of finding a person\\'s name associated with a cumulative weight of either exactly 1000 or the nearest weight less than 1000, my initial thought is to leverage SQL window functions to calculate cumulative sums of weights. I would then need to filter and identify the person who meets the weight criteria.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, I would use the following approach:\\n1. Utilize a SQL window function (e.g., SUM() OVER) to calculate the cumulative sum of weights for each row, ordered by the \\'turn\\' column.\\n\\n2. Store the results of the cumulative sum calculation in a Common Table Expression (CTE) for further analysis.\\n\\n3. Filter the CTE data to select rows where the cumulative weight is less than or equal to 1000. This will include both weights exactly at 1000 and those closest to it.\\n\\n4. To ensure we retrieve only one name, order the filtered rows in descending order by the cumulative weight and limit the result to 1 row. This will give us the person name associated with either 1000 or the nearest lower weight.\\n\\n5. The final result would be the person\\'s name who meets the specified weight criteria.\\n\\nThis approach should efficiently identify the person\\'s name based on the given weight constraints.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nwith cte as (SELECT *, SUM(weight) OVER (ORDER BY turn) as w\\nFROM queue\\nORDER BY turn)\\n\\nSELECT person_name\\n  FROM cte\\n  WHERE w <= 1000\\n  ORDER BY w DESC\\n  limit 1\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nwith cte as (SELECT *, SUM(weight) OVER (ORDER BY turn) as w\\nFROM queue\\nORDER BY turn)\\n\\nSELECT person_name\\n  FROM cte\\n  WHERE w <= 1000\\n  ORDER BY w DESC\\n  limit 1\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997763,
                "title": "simple-subquery-and-window-sum-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect t.person_name from\\n(select person_name, turn, sum(weight) over(order by turn) as cumm_sum from Queue\\norder by turn) t \\nwhere t.cumm_sum<=1000\\norder by t.cumm_sum desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect t.person_name from\\n(select person_name, turn, sum(weight) over(order by turn) as cumm_sum from Queue\\norder by turn) t \\nwhere t.cumm_sum<=1000\\norder by t.cumm_sum desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991152,
                "title": "simplest-sql-solution-cte-cumulative-sum-using-window-funtion-where-order-by-limit",
                "content": "\\n# Code\\n```\\n\\n\\n# Write your MySQL query statement below\\nWITH REQ_CTE AS (\\n\\t\\tSELECT *\\n\\t\\t\\t,SUM(weight) OVER (\\n\\t\\t\\t\\tORDER BY turn ASC\\n\\t\\t\\t\\t) AS weight_sum\\n\\t\\tFROM QUEUE\\n\\t\\t)\\n\\nSELECT person_name\\nFROM REQ_CTE\\nWHERE weight_sum <= 1000\\nORDER BY weight_sum DESC LIMIT 1\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\n\\n# Write your MySQL query statement below\\nWITH REQ_CTE AS (\\n\\t\\tSELECT *\\n\\t\\t\\t,SUM(weight) OVER (\\n\\t\\t\\t\\tORDER BY turn ASC\\n\\t\\t\\t\\t) AS weight_sum\\n\\t\\tFROM QUEUE\\n\\t\\t)\\n\\nSELECT person_name\\nFROM REQ_CTE\\nWHERE weight_sum <= 1000\\nORDER BY weight_sum DESC LIMIT 1\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990660,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\nwith cte as (\\nselect turn, person_name, weight,\\nsum(weight) over (order by turn asc) as cum\\nfrom Queue\\norder by turn\\n)\\n\\nselect \\nperson_name as person_name\\nfrom cte\\nwhere cum <= 1000 \\norder by cum desc\\nlimit 1\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nwith cte as (\\nselect turn, person_name, weight,\\nsum(weight) over (order by turn asc) as cum\\nfrom Queue\\norder by turn\\n)\\n\\nselect \\nperson_name as person_name\\nfrom cte\\nwhere cum <= 1000 \\norder by cum desc\\nlimit 1\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990135,
                "title": "beats-94-08-order-by-limit",
                "content": "# Approach\\nFirst calculate the total weight following the ascending turn\\uFF0C then select the one who has the neareast total weight to the limitation(1000) and does not exceed it.  At lase, select the result through LIMIT() function.\\n\\n\\n# Code\\n```\\nSELECT person_name\\nFROM(\\nSELECT *, sum(weight) OVER (ORDER BY turn) as totalweight\\nFROM Queue\\nORDER BY turn\\n) as t\\nWHERE t.totalweight <=1000\\nORDER BY t.totalweight desc\\nLIMIT 1;\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person_name\\nFROM(\\nSELECT *, sum(weight) OVER (ORDER BY turn) as totalweight\\nFROM Queue\\nORDER BY turn\\n) as t\\nWHERE t.totalweight <=1000\\nORDER BY t.totalweight desc\\nLIMIT 1;\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990133,
                "title": "always-self-join-when-you-need-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT a.person_name\\nFROM Queue a JOIN Queue b\\nON a.turn >= b.turn\\nGROUP BY a.turn \\nHAVING SUM(b.weight) <= 1000 ORDER BY a.turn DESC LIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT a.person_name\\nFROM Queue a JOIN Queue b\\nON a.turn >= b.turn\\nGROUP BY a.turn \\nHAVING SUM(b.weight) <= 1000 ORDER BY a.turn DESC LIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3988870,
                "title": "a-simple-mysql-approach-which-incorporates-common-table-expressions",
                "content": "# Approach\\nThe query first creates two subqueries. The first subquery, ```subquery```, calculates the cumulative sum of the weight column in the ```Queue``` table. The query uses a ```CROSS JOIN``` to join the ```Queue``` table with a temporary table called ```init```. The ```init``` table only contains one row, and the value in the ```@cumulative_sum``` column is set to ```0```.\\n\\nThe second subquery, ```subquery2```, selects the maximum turn for each group of rows where the cumulative sum is less than or equal to ```1000```kgs.\\n\\nThe outer query then selects the ```person_name``` column from the ```subquery``` table and joins it with the ```subquery2``` table on the ```turn``` column. This ensures that we only select the person names for the rows where the cumulative sum is less than or equal to ```1000```kgs.\\n\\nThe query is written in a recursive fashion, which means that it calls itself to process the rows in the ```Queue``` table. This is necessary because we need to calculate the cumulative sum for all of the rows in the table.\\n\\nTo summarize, the query first calculates the cumulative sum of the weight column for all of the rows in the ```Queue``` table. Then, it selects the person names for the rows where the cumulative sum is less than or equal to ```1000```kgs.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWITH subquery AS (\\n    SELECT turn, person_name, weight, (@cumulative_sum := @cumulative_sum + weight) AS cumulative_sum\\n    FROM Queue\\n    CROSS JOIN (SELECT @cumulative_sum := 0) AS init\\n    ORDER BY turn ASC\\n),\\nsubquery2 AS (\\n    SELECT MAX(turn) AS max_turn\\n    FROM subquery\\n    WHERE cumulative_sum <= 1000\\n)\\nSELECT subquery.person_name\\nFROM subquery\\nINNER JOIN subquery2 ON subquery.turn = subquery2.max_turn;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```subquery```\n```Queue```\n```CROSS JOIN```\n```Queue```\n```init```\n```init```\n```@cumulative_sum```\n```0```\n```subquery2```\n```1000```\n```person_name```\n```subquery```\n```subquery2```\n```turn```\n```1000```\n```Queue```\n```Queue```\n```1000```\n```\\n# Write your MySQL query statement below\\nWITH subquery AS (\\n    SELECT turn, person_name, weight, (@cumulative_sum := @cumulative_sum + weight) AS cumulative_sum\\n    FROM Queue\\n    CROSS JOIN (SELECT @cumulative_sum := 0) AS init\\n    ORDER BY turn ASC\\n),\\nsubquery2 AS (\\n    SELECT MAX(turn) AS max_turn\\n    FROM subquery\\n    WHERE cumulative_sum <= 1000\\n)\\nSELECT subquery.person_name\\nFROM subquery\\nINNER JOIN subquery2 ON subquery.turn = subquery2.max_turn;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987720,
                "title": "nysql-is-so-smart-but-i-am-not",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    I just copy from another solution for my skills check\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    I see problem like using JOIN self and sorting.\\n\\n    it is so, group by turns and sorting it by desc\\n\\n    why desc, so... we need latest person, that is why.\\n\\n    really serious is LIMIT 1; when we use JOIN self we get so many unusable data and yeap just ignore it\\n# Complexity\\n- Time complexity:\\n    Bad\\n- Space complexity:\\n    Bad\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT\\n    q1.person_name\\nFROM Queue as q1\\nJOIN Queue as q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    q1.person_name\\nFROM Queue as q1\\nJOIN Queue as q2 ON q1.turn >= q2.turn\\nGROUP BY q1.turn\\nHAVING SUM(q2.weight) <= 1000\\nORDER BY SUM(q2.weight) DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985998,
                "title": "windows-function-runtime-1645ms-beats-79-90-memory-details-0-00mb-beats-100-00",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT\\n      person_name \\nFROM (\\nSELECT\\n      turn,\\n      person_name,\\n      CASE\\n          WHEN SUM(weight) OVER (ORDER BY turn) <= 1000 THEN SUM(weight) OVER (ORDER BY turn) \\n      END AS current_weight\\nFROM  Queue) t\\nWHERE current_weight IS NOT NULL \\nORDER BY current_weight DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT\\n      person_name \\nFROM (\\nSELECT\\n      turn,\\n      person_name,\\n      CASE\\n          WHEN SUM(weight) OVER (ORDER BY turn) <= 1000 THEN SUM(weight) OVER (ORDER BY turn) \\n      END AS current_weight\\nFROM  Queue) t\\nWHERE current_weight IS NOT NULL \\nORDER BY current_weight DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985025,
                "title": "cumulative-sum-approach-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name from\\n(select *, \\nsum(weight) over (order by turn) as weight_now\\nfrom queue)q\\nwhere weight_now<=1000\\norder by weight_now desc limit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name from\\n(select *, \\nsum(weight) over (order by turn) as weight_now\\nfrom queue)q\\nwhere weight_now<=1000\\norder by weight_now desc limit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984494,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n select person_name from \\n  (select *, \\n  (select sum(weight) from queue b where b.turn <= a.turn) as w\\n  from queue a\\n  having w <= 1000\\n  order by w desc) x\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n select person_name from \\n  (select *, \\n  (select sum(weight) from queue b where b.turn <= a.turn) as w\\n  from queue a\\n  having w <= 1000\\n  order by w desc) x\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981697,
                "title": "super-easy-approach",
                "content": "# Intuition\\n![upvote.png](https://assets.leetcode.com/users/images/ca028dd2-4cad-4fc3-b24b-559a1ed53713_1693417731.32547.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\n\\nWITH Temp AS\\n(\\n  SELECT person_name, SUM(weight) OVER (ORDER BY Turn ASC) AS Total\\n  FROM Queue\\n)\\nSELECT Top 1 person_name \\nFROM Temp\\nWHERE Total <= 1000\\nORDER By Total DESC\\n\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\n\\nWITH Temp AS\\n(\\n  SELECT person_name, SUM(weight) OVER (ORDER BY Turn ASC) AS Total\\n  FROM Queue\\n)\\nSELECT Top 1 person_name \\nFROM Temp\\nWHERE Total <= 1000\\nORDER By Total DESC\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980541,
                "title": "clean-code-with-windows-sum",
                "content": "\\n# Code\\n```\\nSELECT person_name\\nFROM\\n    (SELECT turn,person_name,weight,SUM(weight) OVER(ORDER BY turn) Total\\n    FROM Queue)a\\nWHERE total <= 1000\\nORDER BY total DESC\\nLIMIT 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person_name\\nFROM\\n    (SELECT turn,person_name,weight,SUM(weight) OVER(ORDER BY turn) Total\\n    FROM Queue)a\\nWHERE total <= 1000\\nORDER BY total DESC\\nLIMIT 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972053,
                "title": "easy-solution-by-sum-over",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect person_name\\nfrom (select *, sum(weight) over (order by turn) as cm \\n      from queue\\n      ) q\\nwhere cm <= 1000\\norder by cm desc\\nlimit 1\\n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect person_name\\nfrom (select *, sum(weight) over (order by turn) as cm \\n      from queue\\n      ) q\\nwhere cm <= 1000\\norder by cm desc\\nlimit 1\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3971746,
                "title": "smooth-simple-sql-using-sum-over-turns",
                "content": "# Intuition\\nWe need to find the last person who can fit on the bus without exceeding the weight limit of 1000 kilograms. To do this, we can calculate the cumulative sum of weights for each person in the queue and select the last person whose cumulative weight does not exceed the limit.\\n\\n# Approach\\n1. We will use a subquery named \"weighted_queue\" to calculate the cumulative sum of weights for each person in the queue. This will be achieved by using the SUM window function ordered by the \"turn\" column.\\n2. In the main query, we will select the \"person_name\" from the \"weighted_queue\" subquery where the cumulative weight is less than or equal to 1000.\\n3. We will order the results in descending order of cumulative weight to ensure that we get the heaviest person who can still fit within the weight limit.\\n4. Finally, we will use the LIMIT 1 clause to retrieve only the last person\\'s name who satisfies the weight condition.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM (\\n    SELECT person_name, \\n           SUM(weight) OVER (ORDER BY turn) AS total_weight\\n    FROM Queue\\n) AS weighted_queue\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM (\\n    SELECT person_name, \\n           SUM(weight) OVER (ORDER BY turn) AS total_weight\\n    FROM Queue\\n) AS weighted_queue\\nWHERE total_weight <= 1000\\nORDER BY total_weight DESC\\nLIMIT 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3969388,
                "title": "easiest-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect person_name\\nfrom \\n(select person_name,weight,sum(weight) over(order by turn ) as running_total\\nfrom queue) as a\\nwhere running_total<=1000\\norder by running_total desc\\nlimit 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person_name\\nfrom \\n(select person_name,weight,sum(weight) over(order by turn ) as running_total\\nfrom queue) as a\\nwhere running_total<=1000\\norder by running_total desc\\nlimit 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968093,
                "title": "beats-64-04-of-users-with-mysql",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nSELECT person_name\\r\\nFROM (\\r\\n    SELECT\\r\\n        turn,\\r\\n        person_id,\\r\\n        person_name,\\r\\n        weight,\\r\\n        @total_weight := @total_weight + weight AS TotalWeight\\r\\n    FROM\\r\\n        Queue,\\r\\n        (SELECT @total_weight := 0) AS init\\r\\n    ORDER BY\\r\\n        Turn\\r\\n) AS running_total\\r\\nWHERE TotalWeight <= 1000\\r\\nORDER BY Turn DESC\\r\\nLIMIT 1;\\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\n\\r\\nSELECT person_name\\r\\nFROM (\\r\\n    SELECT\\r\\n        turn,\\r\\n        person_id,\\r\\n        person_name,\\r\\n        weight,\\r\\n        @total_weight := @total_weight + weight AS TotalWeight\\r\\n    FROM\\r\\n        Queue,\\r\\n        (SELECT @total_weight := 0) AS init\\r\\n    ORDER BY\\r\\n        Turn\\r\\n) AS running_total\\r\\nWHERE TotalWeight <= 1000\\r\\nORDER BY Turn DESC\\r\\nLIMIT 1;\\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3967920,
                "title": "mysql-no-joins",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nYou need keep a cumulative column that keep track of the weights. Then just filter. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM (\\n  SELECT *, SUM(weight)OVER(ORDER BY turn) AS cumulative_weight\\n  FROM Queue) q1\\nWHERE cumulative_weight<=1000\\nORDER BY cumulative_weight DESC\\nLIMIT 1\\n  \\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT person_name\\nFROM (\\n  SELECT *, SUM(weight)OVER(ORDER BY turn) AS cumulative_weight\\n  FROM Queue) q1\\nWHERE cumulative_weight<=1000\\nORDER BY cumulative_weight DESC\\nLIMIT 1\\n  \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3967217,
                "title": "running-total-calculation-using-sum-window-function",
                "content": "\\r\\n# Approach\\r\\n\\r\\nThe use of SUM() as a window function lets us deduces which passenger will be able to take the bus. After creating a temporary table with these passenger, ranked inversely in terms of turn number, the person with the first rank is essentially the last passenger being able to take the bus before we go over the weight limit. By filtering the individual with the rank of 1, we select his name.\\r\\n\\r\\n\\r\\n# Code\\r\\n```\\r\\n`WITH last_p AS (\\r\\n    SELECT \\r\\n        turn,\\r\\n        person_id,\\r\\n        person_name,\\r\\n        RANK() OVER (ORDER BY turn DESC) as rnk\\r\\n    FROM (\\r\\n        SELECT\\r\\n            turn,\\r\\n            person_id,\\r\\n            person_name,\\r\\n            weight,\\r\\n            SUM(weight) OVER (ORDER BY turn ASC) as total\\r\\n        FROM Queue\\r\\n        ) temp1\\r\\n    WHERE total <= 1000)\\r\\n\\r\\nSELECT\\r\\n    person_name\\r\\nFROM last_p\\r\\nWHERE rnk = 1`\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n`WITH last_p AS (\\r\\n    SELECT \\r\\n        turn,\\r\\n        person_id,\\r\\n        person_name,\\r\\n        RANK() OVER (ORDER BY turn DESC) as rnk\\r\\n    FROM (\\r\\n        SELECT\\r\\n            turn,\\r\\n            person_id,\\r\\n            person_name,\\r\\n            weight,\\r\\n            SUM(weight) OVER (ORDER BY turn ASC) as total\\r\\n        FROM Queue\\r\\n        ) temp1\\r\\n    WHERE total <= 1000)\\r\\n\\r\\nSELECT\\r\\n    person_name\\r\\nFROM last_p\\r\\nWHERE rnk = 1`\\r\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1902438,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1570875,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1936240,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1576186,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1574688,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573119,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1574023,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573574,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573447,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 2030471,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1902438,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1570875,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1936240,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1576186,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1574688,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573119,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1574023,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573574,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 1573447,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            },
            {
                "id": 2030471,
                "content": [
                    {
                        "username": "vhood",
                        "content": "> weight is the weight of the person in kilograms\nExample: Winston weight 500kg\n\nO_O"
                    },
                    {
                        "username": "saptarshi_99",
                        "content": "That\\'s because Winston is a gorilla disguised as a person. This was a tricky part to catch as no hints were given. I\\'m glad I could catch it."
                    },
                    {
                        "username": "pradhumn_chourey",
                        "content": "thanks"
                    },
                    {
                        "username": "AbrorErgashev",
                        "content": "1)\\nselect top 1 person_name\\nfrom\\n(select person_name,\\n        turn,\\n        sum(weight)over(order by turn) as cum\\nfrom queue) a\\nwhere cum <= 1000\\norder by turn desc\\n\\n\\n2)\\nselect top 1 a.person_name\\nfrom queue a\\nleft join queue b\\non a.turn >= b.turn\\ngroup by a.person_name\\nhaving sum(b.weight) <= 1000\\norder by sum(b.weight) desc"
                    },
                    {
                        "username": "rainversion_3",
                        "content": "the solution with joins was very tricky to understand at first glance"
                    },
                    {
                        "username": "kmp1084",
                        "content": "deep"
                    },
                    {
                        "username": "jerrymrj",
                        "content": "with cte as (SELECT person_name,weight,turn,SUM(weight) over (order by turn) as total from Queue)\\nSELECT person_name  \\nFROM cte \\nwhere total <= 1000\\norder by total DESC\\nLIMIT 1;"
                    },
                    {
                        "username": "Ahsan-Haider",
                        "content": "LIMIT 1 is not working in Oracle, otherwise the code is running well."
                    },
                    {
                        "username": "jagadevappa_patil",
                        "content": "\\nselect person_name\\nfrom (\\nselect person_id,person_name ,weight,sum(weight) over ( order by turn asc ROWS BETWEEN UNBOUNDED PRECEDING and CURRENT ROW ) as C_SUm \\nfrom Queue\\n)x where C_SUM <=1000 \\norder by C_SUM desc limit 1\\n"
                    },
                    {
                        "username": "2019share",
                        "content": "With A as \\n(select *,\\nsum(weight) over (order by turn asc ROWS between unbounded preceding and current row) as running_total,\\nlag(weight,1)over(order by turn asc)as lag\\nFROM Queue),\\nB as (\\nSelect person_name, \\ncase \\nwhen running_total<1000\\n    and  lead(running_total,1)over(order by turn asc) >1000 then 1    \\nwhen running_total = 1000 then 1\\nwhen lead(running_total,1)over(order by turn asc) is null and running_total < 1000 then 1\\nelse 0 end as flag\\nFROM A)\\nselect person_name from B\\nwhere flag = 1"
                    },
                    {
                        "username": "bianjin12345",
                        "content": "\\nselect person_name from queue where turn = \\n(select max(turn)\\n from (SELECT turn, sum(weight) over(order by turn) a from queue)k where  k.a<=1000)"
                    },
                    {
                        "username": "tanayanandanwar",
                        "content": "\\'\\'\\'select person_name\\nfrom queue\\nwhere turn=(select max(turn) from\\n(select case when sum(weight) over (order by turn) <=1000 then turn end as turn\\nfrom queue))\\'\\'\\'"
                    },
                    {
                        "username": "meaganking",
                        "content": "with cte as (SELECT person_name, SUM(weight) OVER (ORDER BY turn ASC) as \\'run\\'\\n            FROM Queue)\\n\\nSELECT top 1 person_name\\nFROM cte\\nWHERE run <=1000\\nORDER BY run DESC;"
                    },
                    {
                        "username": "spookie886",
                        "content": "John Cena??? Really?"
                    }
                ]
            }
        ]
    }
]